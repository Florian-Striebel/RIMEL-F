<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bsddialog/examples_library/sade.c">









<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bsddialog.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>


<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>output</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bsddialog_conf</name></name></type> <name>conf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name> <init>= <expr><literal type="string">"Please review the disk setup. When complete, press the "</literal>
<literal type="string">"Finish button"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bsddialog_menuitem</name></name></type> <name><name>items</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="string">""</literal></expr>, <expr><name>false</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"ada0"</literal></expr>, <expr><literal type="string">"16 GB GPT"</literal></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">""</literal></expr>, <expr><name>false</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"ada0p1"</literal></expr>, <expr><literal type="string">"512 KB freebsd-boot"</literal></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">""</literal></expr>, <expr><name>false</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"ada0p2"</literal></expr>, <expr><literal type="string">"15 GB freebsd-ufs"</literal></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">""</literal></expr>, <expr><name>false</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"ada0p3"</literal></expr>, <expr><literal type="string">"819 MB freebsd-swap none"</literal></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">""</literal></expr>, <expr><name>false</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"ada1"</literal></expr>, <expr><literal type="string">"16 GB"</literal></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bsddialog_initconf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conf</name><operator>.</operator><name>title</name></name> <operator>=</operator> <literal type="string">"Partition Editor"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name><operator>.</operator><name>menu</name><operator>.</operator><name>shortcut_buttons</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name><operator>.</operator><name>menu</name><operator>.</operator><name>align_left</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name><operator>.</operator><name>button</name><operator>.</operator><name>ok_label</name></name> <operator>=</operator> <literal type="string">"Create"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name><operator>.</operator><name>button</name><operator>.</operator><name>with_extra</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name><operator>.</operator><name>button</name><operator>.</operator><name>extra_label</name></name> <operator>=</operator> <literal type="string">"Delete"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name><operator>.</operator><name>button</name><operator>.</operator><name>cancel_label</name></name> <operator>=</operator> <literal type="string">"Cancel"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name><operator>.</operator><name>button</name><operator>.</operator><name>with_help</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name><operator>.</operator><name>button</name><operator>.</operator><name>help_label</name></name> <operator>=</operator> <literal type="string">"Revert"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name><operator>.</operator><name>button</name><operator>.</operator><name>generic1_label</name></name> <operator>=</operator> <literal type="string">"Auto"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name><operator>.</operator><name>button</name><operator>.</operator><name>generic2_label</name></name> <operator>=</operator> <literal type="string">"Finish"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name><operator>.</operator><name>button</name><operator>.</operator><name>default_label</name></name> <operator>=</operator> <literal type="string">"Finish"</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bsddialog_init</name><argument_list>()</argument_list></call> <operator>==</operator> <name>BSDDIALOG_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>bsddialog_menu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conf</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>items</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>bsddialog_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Menu:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" [%c] %s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>on</name></expr> ?</condition><then> <expr><literal type="char">'X'</literal></expr> </then><else>: <expr><literal type="char">' '</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>


<return>return <expr><operator>(</operator><name>output</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
