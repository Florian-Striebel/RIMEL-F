<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bsddialog/examples_library/mixedlist.c">









<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bsddialog.h&gt;</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>output</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bsddialog_conf</name></name></type> <name>conf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bsddialog_menuitem</name></name></type> <name>item</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bsddialog_menuitem</name></name></type> <name><name>check</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"+"</literal></expr>, <expr><name>true</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"Name 1"</literal></expr>, <expr><literal type="string">"Desc 1"</literal></expr>, <expr><literal type="string">"Bottom Desc 1"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">""</literal></expr> , <expr><name>false</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"Name 2"</literal></expr>, <expr><literal type="string">"Desc 2"</literal></expr>, <expr><literal type="string">"Bottom Desc 2"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"+"</literal></expr>, <expr><name>true</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"Name 3"</literal></expr>, <expr><literal type="string">"Desc 3"</literal></expr>, <expr><literal type="string">"Bottom Desc 3"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">""</literal></expr> , <expr><name>false</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"Name 4"</literal></expr>, <expr><literal type="string">"Desc 4"</literal></expr>, <expr><literal type="string">"Bottom Desc 4"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"+"</literal></expr>, <expr><name>true</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"Name 5"</literal></expr>, <expr><literal type="string">"Desc 5"</literal></expr>, <expr><literal type="string">"Bottom Desc 5"</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bsddialog_menuitem</name></name></type> <name><name>sep</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">""</literal></expr>, <expr><name>true</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"Radiolist"</literal></expr>, <expr><literal type="string">"(desc)"</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bsddialog_menuitem</name></name></type> <name><name>radio</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">""</literal></expr>, <expr><name>true</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"Name 1"</literal></expr>, <expr><literal type="string">"Desc 1"</literal></expr>, <expr><literal type="string">"Bottom Desc 1"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"+"</literal></expr>, <expr><name>false</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"Name 2"</literal></expr>, <expr><literal type="string">"Desc 2"</literal></expr>, <expr><literal type="string">"Bottom Desc 2"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">""</literal></expr>, <expr><name>false</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"Name 3"</literal></expr>, <expr><literal type="string">"Desc 3"</literal></expr>, <expr><literal type="string">"Bottom Desc 3"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"+"</literal></expr>, <expr><name>false</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"Name 4"</literal></expr>, <expr><literal type="string">"Desc 4"</literal></expr>, <expr><literal type="string">"Bottom Desc 4"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">""</literal></expr>, <expr><name>false</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"Name 5"</literal></expr>, <expr><literal type="string">"Desc 5"</literal></expr>, <expr><literal type="string">"Bottom Desc 5"</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bsddialog_menugroup</name></name></type> <name><name>group</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>BSDDIALOG_CHECKLIST</name></expr>, <expr><literal type="number">5</literal></expr>, <expr><name>check</name></expr> }</block></expr>,
<expr><block>{ <expr><name>BSDDIALOG_SEPARATOR</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>sep</name></expr> }</block></expr>,
<expr><block>{ <expr><name>BSDDIALOG_RADIOLIST</name></expr>, <expr><literal type="number">5</literal></expr>, <expr><name>radio</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bsddialog_initconf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name><operator>.</operator><name>title</name></name> <operator>=</operator> <literal type="string">"mixedmenu"</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bsddialog_init</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>bsddialog_mixedlist</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conf</name></expr></argument>, <argument><expr><literal type="string">"dialog4ports"</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>group</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bsddialog_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Mixedlist:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name><name>group</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nitems</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>group</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>items</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>group</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>BSDDIALOG_SEPARATOR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"----- %s -----\n"</literal></expr></argument>, <argument><expr><name><name>item</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>group</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>BSDDIALOG_RADIOLIST</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" (%c) %s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>item</name><operator>.</operator><name>on</name></name></expr> ?</condition><then> <expr><literal type="char">'*'</literal></expr> </then><else>: <expr><literal type="char">' '</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>item</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" [%c] %s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>item</name><operator>.</operator><name>on</name></name></expr> ?</condition><then> <expr><literal type="char">'X'</literal></expr> </then><else>: <expr><literal type="char">' '</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>item</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>


<return>return <expr><name>output</name></expr>;</return>
</block_content>}</block></function>
</unit>
