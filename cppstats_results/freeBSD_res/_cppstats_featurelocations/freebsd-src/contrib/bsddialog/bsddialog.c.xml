<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/bsddialog/bsddialog.c">


























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;getopt.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bsddialog.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bsddialog_theme.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BSDDIALOG_VERSION</name></cpp:macro> <cpp:value>"0.0.1"</cpp:value></cpp:define>

<enum>enum <name>OPTS</name> <block>{

<decl><name>ASCII_LINES</name> <init>= <expr><literal type="char">'?'</literal> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>,
<decl><name>ASPECT_RATIO</name></decl>,
<decl><name>BACKTITLE</name></decl>,
<decl><name>BEGIN_X</name></decl>,
<decl><name>BEGIN_Y</name></decl>,
<decl><name>CANCEL_LABEL</name></decl>,
<decl><name>CLEAR</name></decl>,
<decl><name>COLORS</name></decl>,
<decl><name>CR_WRAP</name></decl>,
<decl><name>DATE_FORMAT</name></decl>,
<decl><name>DEFAULTNO</name></decl>,
<decl><name>DEFAULT_BUTTON</name></decl>,
<decl><name>DEFAULT_ITEM</name></decl>,
<decl><name>EXIT_LABEL</name></decl>,
<decl><name>EXTRA_BUTTON</name></decl>,
<decl><name>EXTRA_LABEL</name></decl>,
<decl><name>HELP</name></decl>,
<decl><name>HELP_BUTTON</name></decl>,
<decl><name>HELP_LABEL</name></decl>,
<decl><name>HELP_STATUS</name></decl>,
<decl><name>HELP_TAGS</name></decl>,
<decl><name>HFILE</name></decl>,
<decl><name>HLINE</name></decl>,
<decl><name>IGNORE</name></decl>,
<decl><name>INSECURE</name></decl>,
<decl><name>ITEM_DEPTH</name></decl>,
<decl><name>ITEM_HELP</name></decl>,
<decl><name>ITEM_PREFIX</name></decl>,
<decl><name>MAX_INPUT</name></decl>,
<decl><name>NO_CANCEL</name></decl>,
<decl><name>NOCANCEL</name></decl>,
<decl><name>NO_COLLAPSE</name></decl>,
<decl><name>NO_ITEMS</name></decl>,
<decl><name>NO_LABEL</name></decl>,
<decl><name>NO_LINES</name></decl>,
<decl><name>NO_NL_EXPAND</name></decl>,
<decl><name>NO_OK</name></decl>,
<decl><name>NOOK</name></decl>,
<decl><name>NO_TAGS</name></decl>,
<decl><name>NO_SHADOW</name></decl>,
<decl><name>OK_LABEL</name></decl>,
<decl><name>OUTPUT_FD</name></decl>,
<decl><name>OUTPUT_SEPARATOR</name></decl>,
<decl><name>PRINT_MAXSIZE</name></decl>,
<decl><name>PRINT_SIZE</name></decl>,
<decl><name>PRINT_VERSION</name></decl>,
<decl><name>QUOTED</name></decl>,
<decl><name>SEPARATE_OUTPUT</name></decl>,
<decl><name>SEPARATOR</name></decl>,
<decl><name>SHADOW</name></decl>,
<decl><name>SINGLE_QUOTED</name></decl>,
<decl><name>SLEEP</name></decl>,
<decl><name>STDERR</name></decl>,
<decl><name>STDOUT</name></decl>,
<decl><name>THEME</name></decl>,
<decl><name>TIME_FORMAT</name></decl>,
<decl><name>TITLE</name></decl>,
<decl><name>TRIM</name></decl>,
<decl><name>VERSION</name></decl>,
<decl><name>YES_LABEL</name></decl>,

<decl><name>BUILDLIST</name></decl>,
<decl><name>CHECKLIST</name></decl>,
<decl><name>DATEBOX</name></decl>,
<decl><name>FORM</name></decl>,
<decl><name>GAUGE</name></decl>,
<decl><name>INFOBOX</name></decl>,
<decl><name>INPUTBOX</name></decl>,
<decl><name>MENU</name></decl>,
<decl><name>MIXEDFORM</name></decl>,
<decl><name>MIXEDGAUGE</name></decl>,
<decl><name>MSGBOX</name></decl>,
<decl><name>PASSWORDBOX</name></decl>,
<decl><name>PASSWORDFORM</name></decl>,
<decl><name>PAUSE</name></decl>,
<decl><name>RADIOLIST</name></decl>,
<decl><name>RANGEBOX</name></decl>,
<decl><name>TEXTBOX</name></decl>,
<decl><name>TIMEBOX</name></decl>,
<decl><name>TREEVIEW</name></decl>,
<decl><name>YESNO</name></decl>,
}</block>;</enum>


<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>nostring</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>item_prefix_flag</name></decl>, <decl><type ref="prev"/><name>item_bottomdesc_flag</name></decl>, <decl><type ref="prev"/><name>item_output_sepnl_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>item_singlequote_flag</name></decl>, <decl><type ref="prev"/><name>list_items_on_flag</name></decl>, <decl><type ref="prev"/><name>item_tag_help_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>item_always_quote_flag</name></decl>, <decl><type ref="prev"/><name>item_depth_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>item_output_sep_flag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>date_fmt_flag</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>time_fmt_flag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>max_input_form_flag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>output_fd_flag</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>usage</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUILDER_ARGS</name></cpp:macro> <cpp:value>struct bsddialog_conf conf, char* text, int rows, int cols, int argc, char **argv, char *errbuf</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>buildlist_builder</name><parameter_list>(<parameter><decl><type><name>BUILDER_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>checklist_builder</name><parameter_list>(<parameter><decl><type><name>BUILDER_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>datebox_builder</name><parameter_list>(<parameter><decl><type><name>BUILDER_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>form_builder</name><parameter_list>(<parameter><decl><type><name>BUILDER_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>gauge_builder</name><parameter_list>(<parameter><decl><type><name>BUILDER_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>infobox_builder</name><parameter_list>(<parameter><decl><type><name>BUILDER_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>inputbox_builder</name><parameter_list>(<parameter><decl><type><name>BUILDER_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>menu_builder</name><parameter_list>(<parameter><decl><type><name>BUILDER_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>mixedform_builder</name><parameter_list>(<parameter><decl><type><name>BUILDER_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>mixedgauge_builder</name><parameter_list>(<parameter><decl><type><name>BUILDER_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>msgbox_builder</name><parameter_list>(<parameter><decl><type><name>BUILDER_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>passwordbox_builder</name><parameter_list>(<parameter><decl><type><name>BUILDER_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>passwordform_builder</name><parameter_list>(<parameter><decl><type><name>BUILDER_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>pause_builder</name><parameter_list>(<parameter><decl><type><name>BUILDER_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>radiolist_builder</name><parameter_list>(<parameter><decl><type><name>BUILDER_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>rangebox_builder</name><parameter_list>(<parameter><decl><type><name>BUILDER_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>textbox_builder</name><parameter_list>(<parameter><decl><type><name>BUILDER_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>timebox_builder</name><parameter_list>(<parameter><decl><type><name>BUILDER_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>treeview_builder</name><parameter_list>(<parameter><decl><type><name>BUILDER_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>yesno_builder</name><parameter_list>(<parameter><decl><type><name>BUILDER_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>custom_text</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>cr_wrap</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>no_collapse</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>no_nl_expand</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>trim</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'\\'</literal></expr>:</case>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>text</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'\\'</literal></expr>:</case>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'n'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>no_nl_expand</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">'n'</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'t'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>no_collapse</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">'t'</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\t'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><literal type="char">'\n'</literal></expr>:</case>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>cr_wrap</name></expr> ?</condition><then> <expr><literal type="char">' '</literal></expr> </then><else>: <expr><literal type="char">'\n'</literal></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'\t'</literal></expr>:</case>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>no_collapse</name></expr> ?</condition><then> <expr><literal type="char">'\t'</literal></expr> </then><else>: <expr><literal type="char">' '</literal></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>text</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>+=</operator> <ternary><condition><expr><operator>(</operator><name><name>buf</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator> <name>trim</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator></expr> ?</condition><then>
<expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>usage</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"usage: bsddialog --help\n"</literal>
<literal type="string">" bsddialog --version\n"</literal>
<literal type="string">" bsddialog [--&lt;common-opts&gt;] --&lt;widget&gt; &lt;text&gt; "</literal>
<literal type="string">"&lt;height&gt; &lt;width&gt; [--&lt;widget-opts&gt;]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Common Options:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"--ascii-lines, --aspect &lt;ratio&gt;, --backtitle &lt;backtitle&gt;, "</literal>
<literal type="string">"--begin-x &lt;x&gt;, --begin-y &lt;y&gt;, --cancel-label &lt;string&gt;, "</literal>
<literal type="string">"--clear, --colors, --date-format &lt;format&gt;, "</literal>
<literal type="string">"--default-button &lt;label&gt;, --defaultno, --default-item &lt;name&gt;,"</literal>
<literal type="string">"--exit-label &lt;label&gt;, --extra-button, --extra-label &lt;label&gt;,"</literal>
<literal type="string">"--hfile &lt;filename&gt;, --help-button, --help-label &lt;label&gt;, "</literal>
<literal type="string">"--help-status, --help-tags, --hline string, --ignore, "</literal>
<literal type="string">"--insecure, --item-depth, --item-help, --items-prefix, "</literal>
<literal type="string">"--max-input &lt;size&gt;, --no-cancel, --nocancel, "</literal>
<literal type="string">"--no-label &lt;label&gt;, --no-items, "</literal>
<literal type="string">"--no-lines, --no-ok, --nook, --no-shadow, --no-tags, "</literal>
<literal type="string">"--ok-label &lt;label&gt;, --output-fd &lt;fd&gt;, "</literal>
<literal type="string">"--output-separator &lt;sep&gt;, --print-version, --print-size, "</literal>
<literal type="string">"--quoted, --print-maxsize, --shadow, --single-quoted, "</literal>
<literal type="string">"--separator &lt;sep&gt;, --separate-output, --sleep &lt;secs&gt;, "</literal>
<literal type="string">"--stderr, --stdout, --theme &lt;blackwhite|bsddialog|dialog&gt;, "</literal>
<literal type="string">"--time-format &lt;format&gt;, --title &lt;title&gt;, "</literal>
<literal type="string">"--yes-label &lt;string&gt;.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Widgets:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"--buildlist &lt;text&gt; &lt;rows&gt; &lt;cols&gt; &lt;menurows&gt; [&lt;name&gt; &lt;desc&gt; "</literal>
<literal type="string">"&lt;on|off&gt; ...]\n"</literal>
<literal type="string">"--checklist &lt;text&gt; &lt;rows&gt; &lt;cols&gt; &lt;menurows&gt; [&lt;name&gt; &lt;desc&gt; "</literal>
<literal type="string">"&lt;on|off&gt; ...]\n"</literal>
<literal type="string">"--datebox &lt;text&gt; &lt;rows&gt; &lt;cols&gt; [&lt;yy&gt; &lt;mm&gt; &lt;dd&gt;]\n"</literal>
<literal type="string">"--form &lt;text&gt; &lt;rows&gt; &lt;cols&gt; &lt;formrows&gt; [&lt;label&gt; &lt;ylabel&gt; "</literal>
<literal type="string">"&lt;xlabel&gt; &lt;init&gt; &lt;yfield&gt; &lt;xfield&gt; &lt;fieldlen&gt; &lt;maxvalue&gt; "</literal>
<literal type="string">"...]\n"</literal>
<literal type="string">"--gauge &lt;text&gt; &lt;rows&gt; &lt;cols&gt; [&lt;perc\\n&gt; [&lt;text&gt; ...] XXX "</literal>
<literal type="string">"...] EOF\n"</literal>
<literal type="string">"--infobox &lt;text&gt; &lt;rows&gt; &lt;cols&gt;\n"</literal>
<literal type="string">"--inputbox &lt;text&gt; &lt;rows&gt; &lt;cols&gt; [init]\n"</literal>
<literal type="string">"--menu &lt;text&gt; &lt;rows&gt; &lt;cols&gt; &lt;menurows&gt; [&lt;name&gt; &lt;desc&gt; ...]\n"</literal>
<literal type="string">"--mixedform &lt;text&gt; &lt;rows&gt; &lt;cols&gt; &lt;formrows&gt; [&lt;label&gt; &lt;ylabel&gt; "</literal>
<literal type="string">"&lt;xlabe&gt; &lt;init&gt; &lt;yfield&gt; &lt;xfield&gt; &lt;fieldlen&gt; &lt;maxvalue&gt; "</literal>
<literal type="string">"&lt;0|1|2&gt; ...]\n"</literal>
<literal type="string">"--mixedgauge &lt;text&gt; &lt;rows&gt; &lt;cols&gt; &lt;mainperc&gt; [&lt;label&gt; "</literal>
<literal type="string">"&lt;01234567|-perc&gt; ...]\n"</literal>
<literal type="string">"--msgbox &lt;text&gt; &lt;rows&gt; &lt;cols&gt;\n"</literal>
<literal type="string">"--passwordbox &lt;text&gt; &lt;rows&gt; &lt;cols&gt; [init]\n"</literal>
<literal type="string">"--passwordform &lt;text&gt; &lt;rows&gt; &lt;cols&gt; &lt;formrows&gt; [&lt;label&gt; "</literal>
<literal type="string">"&lt;ylabel&gt; &lt;xlabe&gt; &lt;init&gt; &lt;yfield&gt; &lt;xfield&gt; &lt;fieldlen&gt; "</literal>
<literal type="string">"&lt;maxvalue&gt; ...]\n"</literal>
<literal type="string">"--pause &lt;text&gt; &lt;rows&gt; &lt;cols&gt; &lt;secs&gt;\n"</literal>
<literal type="string">"--radiolist &lt;text&gt; &lt;rows&gt; &lt;cols&gt; &lt;menurows&gt; [&lt;name&gt; &lt;desc&gt; "</literal>
<literal type="string">"&lt;on|off&gt; ...]\n"</literal>
<literal type="string">"--rangebox &lt;text&gt; &lt;rows&gt; &lt;cols&gt; &lt;min&gt; &lt;max&gt; &lt;default&gt;\n"</literal>
<literal type="string">"--textbox &lt;file&gt; &lt;rows&gt; &lt;cols&gt;\n"</literal>
<literal type="string">"--timebox &lt;text&gt; &lt;rows&gt; &lt;cols&gt; [&lt;hh&gt; &lt;mm&gt; &lt;ss&gt;]\n"</literal>
<literal type="string">"--treeview &lt;text&gt; &lt;rows&gt; &lt;cols&gt; &lt;menurows&gt; [&lt;depth&gt; &lt;name&gt; "</literal>
<literal type="string">"&lt;desc&gt; &lt;on|off&gt; ...]\n"</literal>
<literal type="string">"--yesno &lt;text&gt; &lt;rows&gt; &lt;cols&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[<expr><name>argc</name></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>backtitle_flag</name></decl>, <decl><type ref="prev"/><name><name>errorbuilder</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>input</name></decl>, <decl><type ref="prev"/><name>rows</name></decl>, <decl><type ref="prev"/><name>cols</name></decl>, <decl><type ref="prev"/><name>output</name></decl>, <decl><type ref="prev"/><name>getH</name></decl>, <decl><type ref="prev"/><name>getW</name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>widgetbuilder</name>)<parameter_list>(<parameter><decl><type><name>BUILDER_ARGS</name></type></decl></parameter>)</parameter_list> <init>= <expr><name>NULL</name></expr></init>;</function_decl>
<decl_stmt><decl><type><name>bool</name></type> <name>ignore_flag</name></decl>, <decl><type ref="prev"/><name>print_maxsize_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>winsize</name></name></type> <name>ws</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bsddialog_conf</name></name></type> <name>conf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>bsddialog_default_theme</name></name></type> <name>theme_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>cr_wrap_flag</name></decl>, <decl><type ref="prev"/><name>no_collapse_flag</name></decl>, <decl><type ref="prev"/><name>no_nl_expand_flag</name></decl>, <decl><type ref="prev"/><name>trim_flag</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bsddialog_initconf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>backtitle_flag</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>theme_flag</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>output_fd_flag</name> <operator>=</operator> <name>STDERR_FILENO</name></expr>;</expr_stmt>
<expr_stmt><expr><name>print_maxsize_flag</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ignore_flag</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>errorbuilder</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cr_wrap_flag</name> <operator>=</operator> <name>no_collapse_flag</name> <operator>=</operator> <name>no_nl_expand_flag</name> <operator>=</operator> <name>trim_flag</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>item_output_sepnl_flag</name> <operator>=</operator> <name>item_singlequote_flag</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>item_prefix_flag</name> <operator>=</operator> <name>item_bottomdesc_flag</name> <operator>=</operator> <name>item_depth_flag</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>list_items_on_flag</name> <operator>=</operator> <name>item_tag_help_flag</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>item_always_quote_flag</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>item_output_sep_flag</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>date_fmt_flag</name> <operator>=</operator> <name>time_fmt_flag</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>max_input_form_flag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>option</name></name></type> <name><name>longopts</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="string">"ascii-lines"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>ASCII_LINES</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"aspect"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>ASPECT_RATIO</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"backtitle"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>BACKTITLE</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"begin-x"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>BEGIN_X</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"begin-y"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>BEGIN_Y</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"cancel-label"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>CANCEL_LABEL</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"clear"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>CLEAR</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"colors"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>COLORS</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"cr-wrap"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>CR_WRAP</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"date-format"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>DATE_FORMAT</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"defaultno"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>DEFAULTNO</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"default-button"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>DEFAULT_BUTTON</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"default-item"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>DEFAULT_ITEM</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"exit-label"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>EXIT_LABEL</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"extra-button"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>EXTRA_BUTTON</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"extra-label"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>EXTRA_LABEL</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"help"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>HELP</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"help-button"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>HELP_BUTTON</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"help-label"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>HELP_LABEL</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"help-status"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>HELP_STATUS</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"help-tags"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>HELP_TAGS</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"hfile"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>HFILE</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"hline"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>HLINE</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"ignore"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>IGNORE</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"insecure"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>INSECURE</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"item-depth"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>ITEM_DEPTH</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"item-help"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>ITEM_HELP</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"item-prefix"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>ITEM_PREFIX</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"max-input"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>MAX_INPUT</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"no-cancel"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NO_CANCEL</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"nocancel"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NOCANCEL</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"no-collapse"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NO_COLLAPSE</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"no-items"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NO_ITEMS</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"no-label"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NO_LABEL</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"no-lines"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NO_LINES</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"no-nl-expand"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NO_NL_EXPAND</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"no-ok"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NO_OK</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"nook "</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NOOK</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"no-tags"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NO_TAGS</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"no-shadow"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NO_SHADOW</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"ok-label"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>OK_LABEL</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"output-fd"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>OUTPUT_FD</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"separator"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>SEPARATOR</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"output-separator"</literal></expr>,<expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>OUTPUT_SEPARATOR</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"print-maxsize"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>PRINT_MAXSIZE</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"print-size"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>PRINT_SIZE</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"print-version"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>PRINT_VERSION</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"quoted"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>QUOTED</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"separate-output"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>SEPARATE_OUTPUT</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"shadow"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>SHADOW</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"single-quoted"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>SINGLE_QUOTED</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"sleep"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>SLEEP</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"stderr"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>STDERR</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"stdout"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>STDOUT</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"theme_flag"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>THEME</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"time-format"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>TIME_FORMAT</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"title"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>TITLE</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"trim"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>TRIM</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"version"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>VERSION</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"yes-label"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>YES_LABEL</name></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"buildlist"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>BUILDLIST</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"checklist"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>CHECKLIST</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"datebox"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>DATEBOX</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"form"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>FORM</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"gauge"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>GAUGE</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"infobox"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>INFOBOX</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"inputbox"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>INPUTBOX</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"menu"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>MENU</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"mixedform"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>MIXEDFORM</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"mixedgauge"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>MIXEDGAUGE</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"msgbox"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>MSGBOX</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"passwordbox"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>PASSWORDBOX</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"passwordform"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>PASSWORDFORM</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"pause"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>PAUSE</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"radiolist"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>RADIOLIST</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"rangebox"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>RANGEBOX</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"textbox"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>TEXTBOX</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"timebox"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>TIMEBOX</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"treeview"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>TREEVIEW</name></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"yesno"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><name>YESNO</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>input</name> <operator>=</operator> <call><name>getopt_long</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>longopts</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>input</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ASCII_LINES</name></expr>:</case>
<expr_stmt><expr><name><name>conf</name><operator>.</operator><name>ascii_lines</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ASPECT_RATIO</name></expr>:</case>
<expr_stmt><expr><name><name>conf</name><operator>.</operator><name>aspect_ratio</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>aspect_ratio</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Error: aspect cannot be &lt; 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>BSDDIALOG_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>BACKTITLE</name></expr>:</case>
<expr_stmt><expr><name>backtitle_flag</name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>BEGIN_X</name></expr>:</case>
<expr_stmt><expr><name><name>conf</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>x</name></name> <operator>&lt;</operator> <name>BSDDIALOG_CENTER</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Error: --begin-x %d, cannot be &lt; %d"</literal></expr></argument>,
<argument><expr><name><name>conf</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name>BSDDIALOG_CENTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>BSDDIALOG_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>BEGIN_Y</name></expr>:</case>
<expr_stmt><expr><name><name>conf</name><operator>.</operator><name>y</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>y</name></name> <operator>&lt;</operator> <name>BSDDIALOG_CENTER</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Error: --begin-y %d, cannot be &lt; %d"</literal></expr></argument>,
<argument><expr><name><name>conf</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name>BSDDIALOG_CENTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>BSDDIALOG_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>CANCEL_LABEL</name></expr>:</case>
<expr_stmt><expr><name><name>conf</name><operator>.</operator><name>button</name><operator>.</operator><name>cancel_label</name></name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CLEAR</name></expr>:</case>
<expr_stmt><expr><name><name>conf</name><operator>.</operator><name>clear</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>COLORS</name></expr>:</case>
<expr_stmt><expr><name><name>conf</name><operator>.</operator><name>text</name><operator>.</operator><name>colors</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CR_WRAP</name></expr>:</case>
<expr_stmt><expr><name>cr_wrap_flag</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DATE_FORMAT</name></expr>:</case>
<expr_stmt><expr><name>date_fmt_flag</name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEFAULT_BUTTON</name></expr>:</case>
<expr_stmt><expr><name><name>conf</name><operator>.</operator><name>button</name><operator>.</operator><name>default_label</name></name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEFAULT_ITEM</name></expr>:</case>
<expr_stmt><expr><name><name>conf</name><operator>.</operator><name>menu</name><operator>.</operator><name>default_item</name></name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DEFAULTNO</name></expr>:</case>
<expr_stmt><expr><name><name>conf</name><operator>.</operator><name>button</name><operator>.</operator><name>default_cancel</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>EXIT_LABEL</name></expr>:</case>
<expr_stmt><expr><name><name>conf</name><operator>.</operator><name>button</name><operator>.</operator><name>exit_label</name></name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>EXTRA_BUTTON</name></expr>:</case>
<expr_stmt><expr><name><name>conf</name><operator>.</operator><name>button</name><operator>.</operator><name>with_extra</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>EXTRA_LABEL</name></expr>:</case>
<expr_stmt><expr><name><name>conf</name><operator>.</operator><name>button</name><operator>.</operator><name>extra_label</name></name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>HELP</name></expr>:</case>
<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>BSDDIALOG_OK</name><operator>)</operator></expr>;</return>
<case>case <expr><name>HELP_BUTTON</name></expr>:</case>
<expr_stmt><expr><name><name>conf</name><operator>.</operator><name>button</name><operator>.</operator><name>with_help</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>HELP_LABEL</name></expr>:</case>
<expr_stmt><expr><name><name>conf</name><operator>.</operator><name>button</name><operator>.</operator><name>help_label</name></name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>HELP_STATUS</name></expr>:</case>
<expr_stmt><expr><name>list_items_on_flag</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>HELP_TAGS</name></expr>:</case>
<expr_stmt><expr><name>item_tag_help_flag</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>HFILE</name></expr>:</case>
<expr_stmt><expr><name><name>conf</name><operator>.</operator><name>f1_file</name></name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>HLINE</name></expr>:</case>
<expr_stmt><expr><name><name>conf</name><operator>.</operator><name>bottomtitle</name></name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>IGNORE</name></expr>:</case>
<expr_stmt><expr><name>ignore_flag</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>INSECURE</name></expr>:</case>
<expr_stmt><expr><name><name>conf</name><operator>.</operator><name>form</name><operator>.</operator><name>securech</name></name> <operator>=</operator> <literal type="char">'*'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ITEM_DEPTH</name></expr>:</case>
<expr_stmt><expr><name>item_depth_flag</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ITEM_HELP</name></expr>:</case>
<expr_stmt><expr><name>item_bottomdesc_flag</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ITEM_PREFIX</name></expr>:</case>
<expr_stmt><expr><name>item_prefix_flag</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MAX_INPUT</name></expr>:</case>
<expr_stmt><expr><name>max_input_form_flag</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NO_ITEMS</name></expr>:</case>
<expr_stmt><expr><name><name>conf</name><operator>.</operator><name>menu</name><operator>.</operator><name>no_desc</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NOCANCEL</name></expr>:</case>
<case>case <expr><name>NO_CANCEL</name></expr>:</case>
<expr_stmt><expr><name><name>conf</name><operator>.</operator><name>button</name><operator>.</operator><name>without_cancel</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NO_COLLAPSE</name></expr>:</case>
<expr_stmt><expr><name>no_collapse_flag</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NO_LABEL</name></expr>:</case>
<expr_stmt><expr><name><name>conf</name><operator>.</operator><name>button</name><operator>.</operator><name>cancel_label</name></name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NO_LINES</name></expr>:</case>
<expr_stmt><expr><name><name>conf</name><operator>.</operator><name>no_lines</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NO_NL_EXPAND</name></expr>:</case>
<expr_stmt><expr><name>no_nl_expand_flag</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NOOK</name></expr>:</case>
<case>case <expr><name>NO_OK</name></expr>:</case>
<expr_stmt><expr><name><name>conf</name><operator>.</operator><name>button</name><operator>.</operator><name>without_ok</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NO_TAGS</name></expr>:</case>
<expr_stmt><expr><name><name>conf</name><operator>.</operator><name>menu</name><operator>.</operator><name>no_name</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NO_SHADOW</name></expr>:</case>
<expr_stmt><expr><name><name>conf</name><operator>.</operator><name>shadow</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OK_LABEL</name></expr>:</case>
<expr_stmt><expr><name><name>conf</name><operator>.</operator><name>button</name><operator>.</operator><name>ok_label</name></name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OUTPUT_FD</name></expr>:</case>
<expr_stmt><expr><name>output_fd_flag</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SEPARATOR</name></expr>:</case>
<case>case <expr><name>OUTPUT_SEPARATOR</name></expr>:</case>
<expr_stmt><expr><name>item_output_sep_flag</name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>QUOTED</name></expr>:</case>
<expr_stmt><expr><name>item_always_quote_flag</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PRINT_MAXSIZE</name></expr>:</case>
<expr_stmt><expr><name>print_maxsize_flag</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PRINT_SIZE</name></expr>:</case>
<expr_stmt><expr><name><name>conf</name><operator>.</operator><name>get_height</name></name> <operator>=</operator> <operator>&amp;</operator><name>getH</name></expr>;</expr_stmt><empty_stmt>;</empty_stmt>
<expr_stmt><expr><name><name>conf</name><operator>.</operator><name>get_width</name></name> <operator>=</operator> <operator>&amp;</operator><name>getW</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PRINT_VERSION</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"bsddialog version %s\n"</literal></expr></argument>, <argument><expr><name>BSDDIALOG_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SEPARATE_OUTPUT</name></expr>:</case>
<expr_stmt><expr><name>item_output_sepnl_flag</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SHADOW</name></expr>:</case>
<expr_stmt><expr><name><name>conf</name><operator>.</operator><name>shadow</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SINGLE_QUOTED</name></expr>:</case>
<expr_stmt><expr><name>item_singlequote_flag</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SLEEP</name></expr>:</case>
<expr_stmt><expr><name><name>conf</name><operator>.</operator><name>sleep</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>STDERR</name></expr>:</case>
<expr_stmt><expr><name>output_fd_flag</name> <operator>=</operator> <name>STDERR_FILENO</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>STDOUT</name></expr>:</case>
<expr_stmt><expr><name>output_fd_flag</name> <operator>=</operator> <name>STDOUT_FILENO</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>THEME</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"bsddialog"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>theme_flag</name> <operator>=</operator> <name>BSDDIALOG_THEME_BSDDIALOG</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"blackwhite"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>theme_flag</name> <operator>=</operator> <name>BSDDIALOG_THEME_BLACKWHITE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"dialog"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>theme_flag</name> <operator>=</operator> <name>BSDDIALOG_THEME_DIALOG</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Unknown theme, possible values: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"blackwhite, bsddialog, dialog"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>BSDDIALOG_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>TIME_FORMAT</name></expr>:</case>
<expr_stmt><expr><name>time_fmt_flag</name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TITLE</name></expr>:</case>
<expr_stmt><expr><name><name>conf</name><operator>.</operator><name>title</name></name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TRIM</name></expr>:</case>
<expr_stmt><expr><name>trim_flag</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VERSION</name></expr>:</case>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"bsddialog %s (libbsddialog %s).\n"</literal></expr></argument>,
<argument><expr><name>BSDDIALOG_VERSION</name></expr></argument>, <argument><expr><name>LIBBSDDIALOG_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>BSDDIALOG_OK</name><operator>)</operator></expr>;</return>
<case>case <expr><name>YES_LABEL</name></expr>:</case>
<expr_stmt><expr><name><name>conf</name><operator>.</operator><name>button</name><operator>.</operator><name>ok_label</name></name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BUILDLIST</name></expr>:</case>
<expr_stmt><expr><name>widgetbuilder</name> <operator>=</operator> <name>buildlist_builder</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CHECKLIST</name></expr>:</case>
<expr_stmt><expr><name>widgetbuilder</name> <operator>=</operator> <name>checklist_builder</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DATEBOX</name></expr>:</case>
<expr_stmt><expr><name>widgetbuilder</name> <operator>=</operator> <name>datebox_builder</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FORM</name></expr>:</case>
<expr_stmt><expr><name>widgetbuilder</name> <operator>=</operator> <name>form_builder</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>GAUGE</name></expr>:</case>
<expr_stmt><expr><name>widgetbuilder</name> <operator>=</operator> <name>gauge_builder</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>INFOBOX</name></expr>:</case>
<expr_stmt><expr><name>widgetbuilder</name> <operator>=</operator> <name>infobox_builder</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>INPUTBOX</name></expr>:</case>
<expr_stmt><expr><name>widgetbuilder</name> <operator>=</operator> <name>inputbox_builder</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MENU</name></expr>:</case>
<expr_stmt><expr><name>widgetbuilder</name> <operator>=</operator> <name>menu_builder</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MIXEDFORM</name></expr>:</case>
<expr_stmt><expr><name>widgetbuilder</name> <operator>=</operator> <name>mixedform_builder</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MIXEDGAUGE</name></expr>:</case>
<expr_stmt><expr><name>widgetbuilder</name> <operator>=</operator> <name>mixedgauge_builder</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MSGBOX</name></expr>:</case>
<expr_stmt><expr><name>widgetbuilder</name> <operator>=</operator> <name>msgbox_builder</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PAUSE</name></expr>:</case>
<expr_stmt><expr><name>widgetbuilder</name> <operator>=</operator> <name>pause_builder</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PASSWORDBOX</name></expr>:</case>
<expr_stmt><expr><name>widgetbuilder</name> <operator>=</operator> <name>passwordbox_builder</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PASSWORDFORM</name></expr>:</case>
<expr_stmt><expr><name>widgetbuilder</name> <operator>=</operator> <name>passwordform_builder</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>RADIOLIST</name></expr>:</case>
<expr_stmt><expr><name>widgetbuilder</name> <operator>=</operator> <name>radiolist_builder</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>RANGEBOX</name></expr>:</case>
<expr_stmt><expr><name>widgetbuilder</name> <operator>=</operator> <name>rangebox_builder</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TEXTBOX</name></expr>:</case>
<expr_stmt><expr><name>widgetbuilder</name> <operator>=</operator> <name>textbox_builder</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TIMEBOX</name></expr>:</case>
<expr_stmt><expr><name>widgetbuilder</name> <operator>=</operator> <name>timebox_builder</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TREEVIEW</name></expr>:</case>
<expr_stmt><expr><name>widgetbuilder</name> <operator>=</operator> <name>treeview_builder</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>YESNO</name></expr>:</case>
<expr_stmt><expr><name>widgetbuilder</name> <operator>=</operator> <name>yesno_builder</name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<if_stmt><if>if <condition>(<expr><name>ignore_flag</name> <operator>==</operator> <name>true</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>BSDDIALOG_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></while>
<expr_stmt><expr><name>argc</name> <operator>-=</operator> <name>optind</name></expr>;</expr_stmt>
<expr_stmt><expr><name>argv</name> <operator>+=</operator> <name>optind</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>print_maxsize_flag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ioctl</name><argument_list>(<argument><expr><name>STDOUT_FILENO</name></expr></argument>, <argument><expr><name>TIOCGWINSZ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ws</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr><name>output_fd_flag</name></expr></argument>, <argument><expr><literal type="string">"MaxSize: %d, %d\n"</literal></expr></argument>,
<argument><expr><name><name>ws</name><operator>.</operator><name>ws_row</name></name></expr></argument>, <argument><expr><name><name>ws</name><operator>.</operator><name>ws_col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>BSDDIALOG_OK</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>BSDDIALOG_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>widgetbuilder</name> <operator>==</operator> <name>textbox_builder</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>text</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>custom_text</name><argument_list>(<argument><expr><name>cr_wrap_flag</name></expr></argument>, <argument><expr><name>no_collapse_flag</name></expr></argument>, <argument><expr><name>no_nl_expand_flag</name></expr></argument>,
<argument><expr><name>trim_flag</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>rows</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cols</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>argc</name> <operator>-=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>argv</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><call><name>bsddialog_init</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Error: %s\n"</literal></expr></argument>, <argument><expr><call><name>bsddialog_geterror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>BSDDIALOG_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>theme_flag</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bsddialog_set_default_theme</name><argument_list>(<argument><expr><name>theme_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>backtitle_flag</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bsddialog_backtitle</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conf</name></expr></argument>, <argument><expr><name>backtitle_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <name>BSDDIALOG_OK</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>widgetbuilder</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>widgetbuilder</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>,
<argument><expr><name>errorbuilder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>widgetbuilder</name> <operator>!=</operator> <name>textbox_builder</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bsddialog_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>output</name> <operator>==</operator> <name>BSDDIALOG_ERROR</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>errorbuilder</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Error: %s\n"</literal></expr></argument>, <argument><expr><name>errorbuilder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Error: %s\n"</literal></expr></argument>, <argument><expr><call><name>bsddialog_geterror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>.</operator><name>get_height</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>conf</name><operator>.</operator><name>get_width</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr><name>output_fd_flag</name></expr></argument>, <argument><expr><literal type="string">"Widget size: (%d - %d)\n"</literal></expr></argument>,
<argument><expr><operator>*</operator><name><name>conf</name><operator>.</operator><name>get_height</name></name></expr></argument>, <argument><expr><operator>*</operator><name><name>conf</name><operator>.</operator><name>get_width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>output</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>



<function><type><name>int</name></type> <name>gauge_builder</name><parameter_list>(<parameter><decl><type><name>BUILDER_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>output</name></decl>, <decl><type ref="prev"/><name>perc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>perc</name> <operator>=</operator> <ternary><condition><expr><name>argc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>atoi</name> <argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>perc</name> <operator>=</operator> <ternary><condition><expr><name>perc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>perc</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>perc</name> <operator>=</operator> <ternary><condition><expr><name>perc</name> <operator>&gt;</operator> <literal type="number">100</literal></expr> ?</condition><then> <expr><literal type="number">100</literal></expr> </then><else>: <expr><name>perc</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>perc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>bsddialog_gauge</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conf</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><name>perc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>output</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>infobox_builder</name><parameter_list>(<parameter><decl><type><name>BUILDER_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>output</name></decl>;</decl_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>bsddialog_infobox</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conf</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>output</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mixedgauge_builder</name><parameter_list>(<parameter><decl><type><name>BUILDER_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>output</name></decl>, <decl><type ref="prev"/><name>mainperc</name></decl>, <decl><type ref="prev"/><name>nminibars</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>minipercs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>minilabels</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>argc</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">2</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><literal type="string">"bad --mixedgauge arguments\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>BSDDIALOG_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mainperc</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mainperc</name> <operator>=</operator> <ternary><condition><expr><name>mainperc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>mainperc</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>mainperc</name> <operator>=</operator> <ternary><condition><expr><name>mainperc</name> <operator>&gt;</operator> <literal type="number">100</literal></expr> ?</condition><then> <expr><literal type="number">100</literal></expr> </then><else>: <expr><name>mainperc</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>argc</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>nminibars</name> <operator>=</operator> <name>argc</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>minilabels</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>nminibars</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><literal type="string">"Cannot allocate memory for minilabels\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>BSDDIALOG_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>minipercs</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>nminibars</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><literal type="string">"Cannot allocate memory for minipercs\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>BSDDIALOG_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nminibars</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>minilabels</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>minipercs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>bsddialog_mixedgauge</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conf</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><name>mainperc</name></expr></argument>,
<argument><expr><name>nminibars</name></expr></argument>, <argument><expr><name>minilabels</name></expr></argument>, <argument><expr><name>minipercs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>output</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>msgbox_builder</name><parameter_list>(<parameter><decl><type><name>BUILDER_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>output</name></decl>;</decl_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>bsddialog_msgbox</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conf</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>output</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>pause_builder</name><parameter_list>(<parameter><decl><type><name>BUILDER_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>output</name></decl>, <decl><type ref="prev"/><name>sec</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><literal type="string">"not &lt;seconds&gt; argument for --pause\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>BSDDIALOG_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sec</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>bsddialog_pause</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conf</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><name>sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>output</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>rangebox_builder</name><parameter_list>(<parameter><decl><type><name>BUILDER_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>output</name></decl>, <decl><type ref="prev"/><name>min</name></decl>, <decl><type ref="prev"/><name>max</name></decl>, <decl><type ref="prev"/><name>value</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><literal type="string">"usage --rangebox &lt;text&gt; &lt;rows&gt; &lt;cols&gt; &lt;min&gt; "</literal>
<literal type="string">"&lt;max&gt; [&lt;init&gt;]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>BSDDIALOG_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>min</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>max</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <ternary><condition><expr><name>value</name> <operator>&lt;</operator> <name>min</name></expr> ?</condition><then> <expr><name>min</name></expr> </then><else>: <expr><name>value</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> <operator>=</operator> <ternary><condition><expr><name>value</name> <operator>&gt;</operator> <name>max</name></expr> ?</condition><then> <expr><name>max</name></expr> </then><else>: <expr><name>value</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>value</name> <operator>=</operator> <name>min</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>bsddialog_rangebox</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conf</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr><name>output_fd_flag</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>output</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>textbox_builder</name><parameter_list>(<parameter><decl><type><name>BUILDER_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>output</name></decl>;</decl_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>bsddialog_textbox</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conf</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>output</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>yesno_builder</name><parameter_list>(<parameter><decl><type><name>BUILDER_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>output</name></decl>;</decl_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>bsddialog_yesno</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conf</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>output</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>datebox_builder</name><parameter_list>(<parameter><decl><type><name>BUILDER_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>output</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>yy</name></decl>, <decl><type ref="prev"/><name>mm</name></decl>, <decl><type ref="prev"/><name>dd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>cal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>localtm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>stringdate</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>localtm</name> <operator>=</operator> <call><name>localtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>yy</name> <operator>=</operator> <name><name>localtm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>+</operator> <literal type="number">1900</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mm</name> <operator>=</operator> <name><name>localtm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dd</name> <operator>=</operator> <name><name>localtm</name><operator>-&gt;</operator><name>tm_mday</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>yy</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mm</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dd</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>bsddialog_datebox</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conf</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>output</name> <operator>!=</operator> <name>BSDDIALOG_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>output</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>date_fmt_flag</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr><name>output_fd_flag</name></expr></argument>, <argument><expr><literal type="string">"%u/%u/%u"</literal></expr></argument>, <argument><expr><name>yy</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><name>dd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>localtm</name> <operator>=</operator> <call><name>localtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>localtm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>=</operator> <name>yy</name> <operator>-</operator> <literal type="number">1900</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>localtm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>=</operator> <name>mm</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>localtm</name><operator>-&gt;</operator><name>tm_mday</name></name> <operator>=</operator> <name>dd</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strftime</name><argument_list>(<argument><expr><name>stringdate</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><name>date_fmt_flag</name></expr></argument>, <argument><expr><name>localtm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr><name>output_fd_flag</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>stringdate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><name>output</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>timebox_builder</name><parameter_list>(<parameter><decl><type><name>BUILDER_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>output</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>hh</name></decl>, <decl><type ref="prev"/><name>mm</name></decl>, <decl><type ref="prev"/><name>ss</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>clock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>localtm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>stringtime</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>clock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>localtm</name> <operator>=</operator> <call><name>localtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>clock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hh</name> <operator>=</operator> <name><name>localtm</name><operator>-&gt;</operator><name>tm_hour</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>mm</name> <operator>=</operator> <name><name>localtm</name><operator>-&gt;</operator><name>tm_min</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ss</name> <operator>=</operator> <name><name>localtm</name><operator>-&gt;</operator><name>tm_sec</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>hh</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mm</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ss</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>bsddialog_timebox</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conf</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>output</name> <operator>!=</operator> <name>BSDDIALOG_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>output</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>time_fmt_flag</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr><name>output_fd_flag</name></expr></argument>, <argument><expr><literal type="string">"%u:%u:%u"</literal></expr></argument>, <argument><expr><name>hh</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>clock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>localtm</name> <operator>=</operator> <call><name>localtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>clock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>localtm</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>=</operator> <name>hh</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>localtm</name><operator>-&gt;</operator><name>tm_min</name></name> <operator>=</operator> <name>mm</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>localtm</name><operator>-&gt;</operator><name>tm_sec</name></name> <operator>=</operator> <name>ss</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strftime</name><argument_list>(<argument><expr><name>stringtime</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><name>time_fmt_flag</name></expr></argument>, <argument><expr><name>localtm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr><name>output_fd_flag</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>stringtime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><name>output</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>get_menu_items</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>setprefix</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>setdepth</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>setname</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>setdesc</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>setstatus</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>sethelp</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nitems</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>bsddialog_menuitem</name></name> <modifier>*</modifier></type><name>items</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>sizeitem</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sizeitem</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>setprefix</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>sizeitem</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>setdepth</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>sizeitem</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>setname</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>sizeitem</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>setdesc</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>sizeitem</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>setstatus</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>sizeitem</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>sethelp</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>sizeitem</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>argc</name> <operator>%</operator> <name>sizeitem</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><literal type="string">"bad number of arguments for this menu\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>BSDDIALOG_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>nitems</name> <operator>=</operator> <name>argc</name> <operator>/</operator> <name>sizeitem</name></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><operator>*</operator><name>nitems</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>prefix</name> <operator>=</operator> <ternary><condition><expr><name>setprefix</name></expr> ?</condition><then> <expr><name><name>argv</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name></expr> </then><else>: <expr><name>nostring</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>depth</name> <operator>=</operator> <ternary><condition><expr><name>setdepth</name></expr> ?</condition><then> <expr><call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <ternary><condition><expr><name>setname</name></expr> ?</condition><then> <expr><name><name>argv</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name></expr> </then><else>: <expr><name>nostring</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>desc</name> <operator>=</operator> <ternary><condition><expr><name>setdesc</name></expr> ?</condition><then> <expr><name><name>argv</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name></expr> </then><else>: <expr><name>nostring</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>setstatus</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>on</name> <operator>=</operator> <ternary><condition><expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"on"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then>
<expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>on</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bottomdesc</name> <operator>=</operator> <ternary><condition><expr><name>sethelp</name></expr> ?</condition><then> <expr><name><name>argv</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name></expr> </then><else>: <expr><name>nostring</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><operator>(</operator><name>BSDDIALOG_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_menu_items</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsddialog_conf</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nitems</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>bsddialog_menuitem</name></name> <modifier>*</modifier></type><name>items</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>focusitem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>sep</name></decl>, <decl><type ref="prev"/><name>toquote</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sepstr</name></decl>, <decl><type ref="prev"/><name>quotech</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>helpvalue</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sep</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>quotech</name> <operator>=</operator> <ternary><condition><expr><name>item_singlequote_flag</name></expr> ?</condition><then> <expr><literal type="char">'\''</literal></expr> </then><else>: <expr><literal type="char">'"'</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>sepstr</name> <operator>=</operator> <ternary><condition><expr><name>item_output_sep_flag</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>item_output_sep_flag</name></expr> </then><else>: <expr><literal type="string">" "</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>output</name> <operator>==</operator> <name>BSDDIALOG_HELP</name> <operator>&amp;&amp;</operator> <name>focusitem</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr><name>output_fd_flag</name></expr></argument>, <argument><expr><literal type="string">"HELP "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>helpvalue</name> <operator>=</operator> <name><name>items</name><index>[<expr><name>focusitem</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>item_bottomdesc_flag</name> <operator>&amp;&amp;</operator> <name>item_tag_help_flag</name> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>helpvalue</name> <operator>=</operator> <name><name>items</name><index>[<expr><name>focusitem</name></expr>]</index></name><operator>.</operator><name>bottomdesc</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>toquote</name> <operator>=</operator> <name>item_always_quote_flag</name> <operator>||</operator>
<call><name>strchr</name><argument_list>(<argument><expr><name>helpvalue</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>toquote</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr><name>output_fd_flag</name></expr></argument>, <argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><name>quotech</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr><name>output_fd_flag</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>helpvalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>toquote</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr><name>output_fd_flag</name></expr></argument>, <argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><name>quotech</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>list_items_on_flag</name> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sep</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>output</name> <operator>!=</operator> <name>BSDDIALOG_OK</name> <operator>&amp;&amp;</operator> <name>list_items_on_flag</name> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nitems</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>on</name> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sep</name> <operator>==</operator> <name>true</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr><name>output_fd_flag</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>sepstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>item_output_sepnl_flag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr><name>output_fd_flag</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sep</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>toquote</name> <operator>=</operator> <name>item_always_quote_flag</name> <operator>||</operator>
<call><name>strchr</name><argument_list>(<argument><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>toquote</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr><name>output_fd_flag</name></expr></argument>, <argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><name>quotech</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr><name>output_fd_flag</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>toquote</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr><name>output_fd_flag</name></expr></argument>, <argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><name>quotech</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>buildlist_builder</name><parameter_list>(<parameter><decl><type><name>BUILDER_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>output</name></decl>, <decl><type ref="prev"/><name>menurows</name></decl>, <decl><type ref="prev"/><name>nitems</name></decl>, <decl><type ref="prev"/><name>focusitem</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bsddialog_menuitem</name></name></type> <name><name>items</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><literal type="string">"&lt;menurows&gt; not provided"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>BSDDIALOG_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>menurows</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>get_menu_items</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>argc</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>argv</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>item_prefix_flag</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
<argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>item_bottomdesc_flag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nitems</name></expr></argument>, <argument><expr><name>items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>output</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>output</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>bsddialog_buildlist</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conf</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><name>menurows</name></expr></argument>, <argument><expr><name>nitems</name></expr></argument>,
<argument><expr><name>items</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>focusitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>output</name> <operator>==</operator> <name>BSDDIALOG_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>BSDDIALOG_ERROR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>print_menu_items</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conf</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>nitems</name></expr></argument>, <argument><expr><name>items</name></expr></argument>, <argument><expr><name>focusitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>output</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>checklist_builder</name><parameter_list>(<parameter><decl><type><name>BUILDER_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>output</name></decl>, <decl><type ref="prev"/><name>menurows</name></decl>, <decl><type ref="prev"/><name>nitems</name></decl>, <decl><type ref="prev"/><name>focusitem</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bsddialog_menuitem</name></name></type> <name><name>items</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><literal type="string">"&lt;menurows&gt; not provided"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>BSDDIALOG_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>menurows</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>get_menu_items</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>argc</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>argv</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>item_prefix_flag</name></expr></argument>,
<argument><expr><name>item_depth_flag</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>item_bottomdesc_flag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nitems</name></expr></argument>,
<argument><expr><name>items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>output</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>output</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>bsddialog_checklist</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conf</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><name>menurows</name></expr></argument>, <argument><expr><name>nitems</name></expr></argument>,
<argument><expr><name>items</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>focusitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_menu_items</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conf</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>nitems</name></expr></argument>, <argument><expr><name>items</name></expr></argument>, <argument><expr><name>focusitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>output</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>menu_builder</name><parameter_list>(<parameter><decl><type><name>BUILDER_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>output</name></decl>, <decl><type ref="prev"/><name>menurows</name></decl>, <decl><type ref="prev"/><name>nitems</name></decl>, <decl><type ref="prev"/><name>focusitem</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bsddialog_menuitem</name></name></type> <name><name>items</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><literal type="string">"&lt;menurows&gt; not provided"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>BSDDIALOG_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>menurows</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>get_menu_items</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>argc</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>argv</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>item_prefix_flag</name></expr></argument>,
<argument><expr><name>item_depth_flag</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>item_bottomdesc_flag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nitems</name></expr></argument>,
<argument><expr><name>items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>output</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>output</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>bsddialog_menu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conf</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><name>menurows</name></expr></argument>, <argument><expr><name>nitems</name></expr></argument>,
<argument><expr><name>items</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>focusitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_menu_items</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conf</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>nitems</name></expr></argument>, <argument><expr><name>items</name></expr></argument>, <argument><expr><name>focusitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>output</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>radiolist_builder</name><parameter_list>(<parameter><decl><type><name>BUILDER_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>output</name></decl>, <decl><type ref="prev"/><name>menurows</name></decl>, <decl><type ref="prev"/><name>nitems</name></decl>, <decl><type ref="prev"/><name>focusitem</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bsddialog_menuitem</name></name></type> <name><name>items</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><literal type="string">"&lt;menurows&gt; not provided"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>BSDDIALOG_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>menurows</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>get_menu_items</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>argc</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>argv</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>item_prefix_flag</name></expr></argument>,
<argument><expr><name>item_depth_flag</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>item_bottomdesc_flag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nitems</name></expr></argument>,
<argument><expr><name>items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>output</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>output</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>bsddialog_radiolist</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conf</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><name>menurows</name></expr></argument>, <argument><expr><name>nitems</name></expr></argument>,
<argument><expr><name>items</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>focusitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_menu_items</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conf</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>nitems</name></expr></argument>, <argument><expr><name>items</name></expr></argument>, <argument><expr><name>focusitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>output</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>treeview_builder</name><parameter_list>(<parameter><decl><type><name>BUILDER_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>output</name></decl>, <decl><type ref="prev"/><name>menurows</name></decl>, <decl><type ref="prev"/><name>nitems</name></decl>, <decl><type ref="prev"/><name>focusitem</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bsddialog_menuitem</name></name></type> <name><name>items</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><literal type="string">"&lt;menurows&gt; not provided"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>BSDDIALOG_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>menurows</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>get_menu_items</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>argc</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>argv</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>item_prefix_flag</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
<argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>item_bottomdesc_flag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nitems</name></expr></argument>, <argument><expr><name>items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>output</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>output</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>conf</name><operator>.</operator><name>menu</name><operator>.</operator><name>no_name</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name><operator>.</operator><name>menu</name><operator>.</operator><name>align_left</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>bsddialog_radiolist</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conf</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><name>menurows</name></expr></argument>, <argument><expr><name>nitems</name></expr></argument>,
<argument><expr><name>items</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>focusitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_menu_items</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conf</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>nitems</name></expr></argument>, <argument><expr><name>items</name></expr></argument>, <argument><expr><name>focusitem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>output</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_form_items</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bsddialog_conf</name></name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nitems</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>bsddialog_formitem</name></name> <modifier>*</modifier></type><name>items</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>output</name> <operator>==</operator> <name>BSDDIALOG_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nitems</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>dprintf</name><argument_list>(<argument><expr><name>output_fd_flag</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>form_builder</name><parameter_list>(<parameter><decl><type><name>BUILDER_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>output</name></decl>, <decl><type ref="prev"/><name>formheight</name></decl>, <decl><type ref="prev"/><name>nitems</name></decl>, <decl><type ref="prev"/><name>fieldlen</name></decl>, <decl><type ref="prev"/><name>valuelen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bsddialog_formitem</name></name></type> <name><name>items</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>argc</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">8</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><literal type="string">"bad number of arguments for this form\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>BSDDIALOG_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>formheight</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>argc</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>nitems</name> <operator>=</operator> <name>argc</name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nitems</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>label</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">8</literal><operator>*</operator><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ylabel</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">8</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>xlabel</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">8</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>init</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">8</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>yfield</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">8</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>xfield</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">8</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fieldlen</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">8</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fieldlen</name> <operator>=</operator> <call><name>abs</name><argument_list>(<argument><expr><name>fieldlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>valuelen</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">8</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>maxvaluelen</name> <operator>=</operator> <ternary><condition><expr><name>valuelen</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>abs</name><argument_list>(<argument><expr><name>fieldlen</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>valuelen</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <operator>(</operator><ternary><condition><expr><name>fieldlen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>BSDDIALOG_FIELDREADONLY</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bottomdesc</name> <operator>=</operator> <name>nostring</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>bsddialog_form</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conf</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><name>formheight</name></expr></argument>, <argument><expr><name>nitems</name></expr></argument>,
<argument><expr><name>items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_form_items</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conf</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>nitems</name></expr></argument>, <argument><expr><name>items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>output</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>inputbox_builder</name><parameter_list>(<parameter><decl><type><name>BUILDER_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>output</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bsddialog_formitem</name></name></type> <name>item</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>item</name><operator>.</operator><name>label</name></name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>.</operator><name>ylabel</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>.</operator><name>xlabel</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>.</operator><name>init</name></name> <operator>=</operator> <ternary><condition><expr><name>argc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>.</operator><name>yfield</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>.</operator><name>xfield</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>.</operator><name>fieldlen</name></name> <operator>=</operator> <ternary><condition><expr><name>cols</name> <operator>&gt;</operator> <literal type="number">4</literal></expr> ?</condition><then> <expr><name>cols</name><operator>-</operator><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">25</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>.</operator><name>maxvaluelen</name></name> <operator>=</operator> <ternary><condition><expr><name>max_input_form_flag</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>max_input_form_flag</name></expr> </then><else>: <expr><literal type="number">2048</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>.</operator><name>bottomdesc</name></name> <operator>=</operator> <name>nostring</name></expr>;</expr_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>bsddialog_form</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conf</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_form_items</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conf</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>output</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mixedform_builder</name><parameter_list>(<parameter><decl><type><name>BUILDER_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>output</name></decl>, <decl><type ref="prev"/><name>formheight</name></decl>, <decl><type ref="prev"/><name>nitems</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bsddialog_formitem</name></name></type> <name><name>items</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>argc</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">9</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><literal type="string">"bad number of arguments for this form\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>BSDDIALOG_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>formheight</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>argc</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>nitems</name> <operator>=</operator> <name>argc</name> <operator>/</operator> <literal type="number">9</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nitems</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>label</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">9</literal><operator>*</operator><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ylabel</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">9</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>xlabel</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">9</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>init</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">9</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>yfield</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">9</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>xfield</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">9</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fieldlen</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">9</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>maxvaluelen</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">9</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">9</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bottomdesc</name> <operator>=</operator> <name>nostring</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>bsddialog_form</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conf</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><name>formheight</name></expr></argument>, <argument><expr><name>nitems</name></expr></argument>,
<argument><expr><name>items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_form_items</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conf</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>nitems</name></expr></argument>, <argument><expr><name>items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>output</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>passwordbox_builder</name><parameter_list>(<parameter><decl><type><name>BUILDER_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>output</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bsddialog_formitem</name></name></type> <name>item</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>item</name><operator>.</operator><name>label</name></name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>.</operator><name>ylabel</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>.</operator><name>xlabel</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>.</operator><name>init</name></name> <operator>=</operator> <ternary><condition><expr><name>argc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>.</operator><name>yfield</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>.</operator><name>xfield</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>.</operator><name>fieldlen</name></name> <operator>=</operator> <ternary><condition><expr><name>cols</name> <operator>&gt;</operator> <literal type="number">4</literal></expr> ?</condition><then> <expr><name>cols</name><operator>-</operator><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">25</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>.</operator><name>maxvaluelen</name></name> <operator>=</operator> <ternary><condition><expr><name>max_input_form_flag</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>max_input_form_flag</name></expr> </then><else>: <expr><literal type="number">2048</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>BSDDIALOG_FIELDHIDDEN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>.</operator><name>bottomdesc</name></name> <operator>=</operator> <name>nostring</name></expr>;</expr_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>bsddialog_form</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conf</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_form_items</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conf</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>output</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>passwordform_builder</name><parameter_list>(<parameter><decl><type><name>BUILDER_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>output</name></decl>, <decl><type ref="prev"/><name>formheight</name></decl>, <decl><type ref="prev"/><name>nitems</name></decl>, <decl><type ref="prev"/><name>fieldlen</name></decl>, <decl><type ref="prev"/><name>valuelen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bsddialog_formitem</name></name></type> <name><name>items</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name> <init>= <expr><name>BSDDIALOG_FIELDHIDDEN</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>argc</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">8</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><literal type="string">"bad number of arguments for this form\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>BSDDIALOG_ERROR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>formheight</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>argc</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>nitems</name> <operator>=</operator> <name>argc</name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nitems</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>label</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">8</literal><operator>*</operator><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ylabel</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">8</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>xlabel</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">8</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>init</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">8</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>yfield</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">8</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>xfield</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">8</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fieldlen</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">8</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fieldlen</name> <operator>=</operator> <call><name>abs</name><argument_list>(<argument><expr><name>fieldlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>valuelen</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">8</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>maxvaluelen</name> <operator>=</operator> <ternary><condition><expr><name>valuelen</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>abs</name><argument_list>(<argument><expr><name>fieldlen</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>valuelen</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <operator>(</operator><ternary><condition><expr><name>fieldlen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>BSDDIALOG_FIELDREADONLY</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bottomdesc</name> <operator>=</operator> <name>nostring</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>bsddialog_form</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conf</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>cols</name></expr></argument>, <argument><expr><name>formheight</name></expr></argument>,
<argument><expr><name>nitems</name></expr></argument>, <argument><expr><name>items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_form_items</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conf</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>nitems</name></expr></argument>, <argument><expr><name>items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>output</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
