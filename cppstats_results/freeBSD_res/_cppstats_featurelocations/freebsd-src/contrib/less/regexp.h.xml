<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/less/regexp.h">






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_REGEXP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_REGEXP</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NSUBEXP</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <name>regexp</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>startp</name><index>[<expr><name>NSUBEXP</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>endp</name><index>[<expr><name>NSUBEXP</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>regstart</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>reganch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>regmust</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>regmlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>program</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>regexp</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__STDC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ANSI_ARGS_</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ANSI_ARGS_</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>()</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>extern</specifier> <name>regexp</name> <modifier>*</modifier><name>regcomp</name></type> <name>_ANSI_ARGS_</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>exp</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>regexec</name></type> <name>_ANSI_ARGS_</name><argument_list>(<argument><expr><operator>(</operator><name>regexp</name> <operator>*</operator><name>prog</name><operator>,</operator> <name>char</name> <operator>*</operator><name>string</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>regexec2</name></type> <name>_ANSI_ARGS_</name><argument_list>(<argument><expr><operator>(</operator><name>regexp</name> <operator>*</operator><name>prog</name><operator>,</operator> <name>char</name> <operator>*</operator><name>string</name><operator>,</operator> <name>int</name> <name>notbol</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>regsub</name></type> <name>_ANSI_ARGS_</name><argument_list>(<argument><expr><operator>(</operator><name>regexp</name> <operator>*</operator><name>prog</name><operator>,</operator> <name>char</name> <operator>*</operator><name>source</name><operator>,</operator> <name>char</name> <operator>*</operator><name>dest</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>regerror</name></type> <name>_ANSI_ARGS_</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>msg</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
