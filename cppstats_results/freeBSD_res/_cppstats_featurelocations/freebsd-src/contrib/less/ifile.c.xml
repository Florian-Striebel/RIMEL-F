<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/less/ifile.c">




















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"less.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>extern</specifier> <name>IFILE</name></type> <name>curr_ifile</name></decl>;</decl_stmt>

<struct>struct <name>ifile</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>ifile</name></name> <modifier>*</modifier></type><name>h_next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ifile</name></name> <modifier>*</modifier></type><name>h_prev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>h_filename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>h_rfilename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>h_filestate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h_hold</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>h_opened</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>scrpos</name></name></type> <name>h_scrpos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>h_altpipe</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>h_altfilename</name></decl>;</decl_stmt>
}</block>;</struct>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int_ifile</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((struct ifile *)(h))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ext_ifile</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((IFILE)(h))</cpp:value></cpp:define>




<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>ifile</name></name></type> <name>anchor</name> <init>= <expr><block>{ <expr><operator>&amp;</operator><name>anchor</name></expr>, <expr><operator>&amp;</operator><name>anchor</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'\0'</literal></expr>,
<expr><block>{ <expr><name>NULL_POSITION</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>ifiles</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>incr_index</name><parameter_list>(<parameter><decl><type><name>p</name></type></decl></parameter>, <parameter><decl><type><name>incr</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name><name>struct</name> <name>ifile</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>incr</name></decl>;</decl_stmt>
<block>{<block_content>
<for>for <control>(<init>;</init> <condition><expr><name>p</name> <operator>!=</operator> <operator>&amp;</operator><name>anchor</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>h_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>h_index</name></name> <operator>+=</operator> <name>incr</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>link_ifile</name><parameter_list>(<parameter><decl><type><name>p</name></type></decl></parameter>, <parameter><decl><type><name>prev</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name><name>struct</name> <name>ifile</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ifile</name></name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>prev</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <operator>&amp;</operator><name>anchor</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>h_next</name></name> <operator>=</operator> <name><name>prev</name><operator>-&gt;</operator><name>h_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>h_prev</name></name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>h_next</name><operator>-&gt;</operator><name>h_prev</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>h_next</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>




<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>h_index</name></name> <operator>=</operator> <name><name>prev</name><operator>-&gt;</operator><name>h_index</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>incr_index</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>h_next</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ifiles</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>unlink_ifile</name><parameter_list>(<parameter><decl><type><name>p</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name><name>struct</name> <name>ifile</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>h_next</name><operator>-&gt;</operator><name>h_prev</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>h_prev</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>h_prev</name><operator>-&gt;</operator><name>h_next</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>h_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>incr_index</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>h_next</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ifiles</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name><name>struct</name> <name>ifile</name></name> <modifier>*</modifier></type>
<name>new_ifile</name><parameter_list>(<parameter><decl><type><name>filename</name></type></decl></parameter>, <parameter><decl><type><name>prev</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ifile</name></name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ifile</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>




<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator>struct <name>ifile</name> <operator>*</operator><operator>)</operator> <call><name>ecalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ifile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>h_filename</name></name> <operator>=</operator> <call><name>save</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>h_rfilename</name></name> <operator>=</operator> <call><name>lrealpath</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>h_scrpos</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <name>NULL_POSITION</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>h_opened</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>h_hold</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>h_filestate</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>h_altfilename</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>h_altpipe</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>link_ifile</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>mark_check_ifile</name><argument_list>(<argument><expr><call><name>ext_ifile</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>p</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>public</name> <name>void</name></type>
<name>del_ifile</name><parameter_list>(<parameter><decl><type><name>h</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>IFILE</name></type> <name>h</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ifile</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>h</name> <operator>==</operator> <name>NULL_IFILE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><call><name>unmark</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>h</name> <operator>==</operator> <name>curr_ifile</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>curr_ifile</name> <operator>=</operator> <call><name>getoff_ifile</name><argument_list>(<argument><expr><name>curr_ifile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>int_ifile</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlink_ifile</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>h_rfilename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>h_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>public</name> <name>IFILE</name></type>
<name>next_ifile</name><parameter_list>(<parameter><decl><type><name>h</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>IFILE</name></type> <name>h</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ifile</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>h</name> <operator>==</operator> <name>NULL_IFILE</name><operator>)</operator></expr> ?</condition><then> <expr><operator>&amp;</operator><name>anchor</name></expr> </then><else>: <expr><call><name>int_ifile</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>h_next</name></name> <operator>==</operator> <operator>&amp;</operator><name>anchor</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL_IFILE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>ext_ifile</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>h_next</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>public</name> <name>IFILE</name></type>
<name>prev_ifile</name><parameter_list>(<parameter><decl><type><name>h</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>IFILE</name></type> <name>h</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ifile</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>h</name> <operator>==</operator> <name>NULL_IFILE</name><operator>)</operator></expr> ?</condition><then> <expr><operator>&amp;</operator><name>anchor</name></expr> </then><else>: <expr><call><name>int_ifile</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>h_prev</name></name> <operator>==</operator> <operator>&amp;</operator><name>anchor</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL_IFILE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>ext_ifile</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>h_prev</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>public</name> <name>IFILE</name></type>
<name>getoff_ifile</name><parameter_list>(<parameter><decl><type><name>ifile</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>IFILE</name></type> <name>ifile</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>IFILE</name></type> <name>newifile</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>newifile</name> <operator>=</operator> <call><name>prev_ifile</name><argument_list>(<argument><expr><name>ifile</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL_IFILE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>newifile</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>newifile</name> <operator>=</operator> <call><name>next_ifile</name><argument_list>(<argument><expr><name>ifile</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL_IFILE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>newifile</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>NULL_IFILE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>public</name> <name>int</name></type>
<name>nifile</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>ifiles</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name><name>struct</name> <name>ifile</name></name> <modifier>*</modifier></type>
<name>find_ifile</name><parameter_list>(<parameter><decl><type><name>filename</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ifile</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rfilename</name> <init>= <expr><call><name>lrealpath</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>anchor</name><operator>.</operator><name>h_next</name></name></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <operator>&amp;</operator><name>anchor</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>h_next</name></name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>rfilename</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>h_rfilename</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>




<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>h_filename</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>h_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>h_filename</name></name> <operator>=</operator> <call><name>save</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>rfilename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <operator>&amp;</operator><name>anchor</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>p</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><name>public</name> <name>IFILE</name></type>
<name>get_ifile</name><parameter_list>(<parameter><decl><type><name>filename</name></type></decl></parameter>, <parameter><decl><type><name>prev</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IFILE</name></type> <name>prev</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ifile</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>find_ifile</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>new_ifile</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><call><name>int_ifile</name><argument_list>(<argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>ext_ifile</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>public</name> <name>char</name> <modifier>*</modifier></type>
<name>get_filename</name><parameter_list>(<parameter><decl><type><name>ifile</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>IFILE</name></type> <name>ifile</name></decl>;</decl_stmt>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ifile</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>int_ifile</name><argument_list>(<argument><expr><name>ifile</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>h_filename</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>public</name> <name>char</name> <modifier>*</modifier></type>
<name>get_real_filename</name><parameter_list>(<parameter><decl><type><name>ifile</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>IFILE</name></type> <name>ifile</name></decl>;</decl_stmt>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ifile</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>int_ifile</name><argument_list>(<argument><expr><name>ifile</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>h_rfilename</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>public</name> <name>int</name></type>
<name>get_index</name><parameter_list>(<parameter><decl><type><name>ifile</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>IFILE</name></type> <name>ifile</name></decl>;</decl_stmt>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>int_ifile</name><argument_list>(<argument><expr><name>ifile</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>h_index</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>public</name> <name>void</name></type>
<name>store_pos</name><parameter_list>(<parameter><decl><type><name>ifile</name></type></decl></parameter>, <parameter><decl><type><name>scrpos</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>IFILE</name></type> <name>ifile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>scrpos</name></name> <modifier>*</modifier></type><name>scrpos</name></decl>;</decl_stmt>
<block>{<block_content>
<expr_stmt><expr><call><name>int_ifile</name><argument_list>(<argument><expr><name>ifile</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>h_scrpos</name> <operator>=</operator> <operator>*</operator><name>scrpos</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>public</name> <name>void</name></type>
<name>get_pos</name><parameter_list>(<parameter><decl><type><name>ifile</name></type></decl></parameter>, <parameter><decl><type><name>scrpos</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>IFILE</name></type> <name>ifile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>scrpos</name></name> <modifier>*</modifier></type><name>scrpos</name></decl>;</decl_stmt>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>scrpos</name> <operator>=</operator> <call><name>int_ifile</name><argument_list>(<argument><expr><name>ifile</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>h_scrpos</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>public</name> <name>void</name></type>
<name>set_open</name><parameter_list>(<parameter><decl><type><name>ifile</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>IFILE</name></type> <name>ifile</name></decl>;</decl_stmt>
<block>{<block_content>
<expr_stmt><expr><call><name>int_ifile</name><argument_list>(<argument><expr><name>ifile</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>h_opened</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>public</name> <name>int</name></type>
<name>opened</name><parameter_list>(<parameter><decl><type><name>ifile</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>IFILE</name></type> <name>ifile</name></decl>;</decl_stmt>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>int_ifile</name><argument_list>(<argument><expr><name>ifile</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>h_opened</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>public</name> <name>void</name></type>
<name>hold_ifile</name><parameter_list>(<parameter><decl><type><name>ifile</name></type></decl></parameter>, <parameter><decl><type><name>incr</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>IFILE</name></type> <name>ifile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>incr</name></decl>;</decl_stmt>
<block>{<block_content>
<expr_stmt><expr><call><name>int_ifile</name><argument_list>(<argument><expr><name>ifile</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>h_hold</name> <operator>+=</operator> <name>incr</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>public</name> <name>int</name></type>
<name>held_ifile</name><parameter_list>(<parameter><decl><type><name>ifile</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>IFILE</name></type> <name>ifile</name></decl>;</decl_stmt>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>int_ifile</name><argument_list>(<argument><expr><name>ifile</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>h_hold</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>public</name> <name>void</name> <modifier>*</modifier></type>
<name>get_filestate</name><parameter_list>(<parameter><decl><type><name>ifile</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>IFILE</name></type> <name>ifile</name></decl>;</decl_stmt>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>int_ifile</name><argument_list>(<argument><expr><name>ifile</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>h_filestate</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>public</name> <name>void</name></type>
<name>set_filestate</name><parameter_list>(<parameter><decl><type><name>ifile</name></type></decl></parameter>, <parameter><decl><type><name>filestate</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>IFILE</name></type> <name>ifile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>filestate</name></decl>;</decl_stmt>
<block>{<block_content>
<expr_stmt><expr><call><name>int_ifile</name><argument_list>(<argument><expr><name>ifile</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>h_filestate</name> <operator>=</operator> <name>filestate</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>public</name> <name>void</name></type>
<name>set_altpipe</name><parameter_list>(<parameter><decl><type><name>ifile</name></type></decl></parameter>, <parameter><decl><type><name>p</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>IFILE</name></type> <name>ifile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<block>{<block_content>
<expr_stmt><expr><call><name>int_ifile</name><argument_list>(<argument><expr><name>ifile</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>h_altpipe</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>public</name> <name>void</name> <modifier>*</modifier></type>
<name>get_altpipe</name><parameter_list>(<parameter><decl><type><name>ifile</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>IFILE</name></type> <name>ifile</name></decl>;</decl_stmt>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>int_ifile</name><argument_list>(<argument><expr><name>ifile</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>h_altpipe</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>public</name> <name>void</name></type>
<name>set_altfilename</name><parameter_list>(<parameter><decl><type><name>ifile</name></type></decl></parameter>, <parameter><decl><type><name>altfilename</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>IFILE</name></type> <name>ifile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>altfilename</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ifile</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>int_ifile</name><argument_list>(<argument><expr><name>ifile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>h_altfilename</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>h_altfilename</name></name> <operator>!=</operator> <name>altfilename</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>h_altfilename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>h_altfilename</name></name> <operator>=</operator> <name>altfilename</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>public</name> <name>char</name> <modifier>*</modifier></type>
<name>get_altfilename</name><parameter_list>(<parameter><decl><type><name>ifile</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>IFILE</name></type> <name>ifile</name></decl>;</decl_stmt>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>int_ifile</name><argument_list>(<argument><expr><name>ifile</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>h_altfilename</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
public void
if_dump(VOID_PARAM)
{
struct ifile *p;

for (p = anchor.h_next; p != &amp;anchor; p = p-&gt;h_next)
{
printf("%x: %d. &lt;%s&gt; pos %d,%x\n",
p, p-&gt;h_index, p-&gt;h_filename,
p-&gt;h_scrpos.ln, p-&gt;h_scrpos.pos);
ch_dump(p-&gt;h_filestate);
}
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
