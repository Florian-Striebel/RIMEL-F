<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/less/mark.c">









<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"less.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"position.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>extern</specifier> <name>IFILE</name></type> <name>curr_ifile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>sc_height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>jump_sline</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>perma_marks</name></decl>;</decl_stmt>




<struct>struct <name>mark</name>
<block>{






<decl_stmt><decl><type><name>char</name></type> <name>m_letter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IFILE</name></type> <name>m_ifile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>m_filename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>scrpos</name></name></type> <name>m_scrpos</name></decl>;</decl_stmt>
}</block>;</struct>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NMARKS</name></cpp:macro> <cpp:value>((2*26)+2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUMARKS</name></cpp:macro> <cpp:value>((2*26)+1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOUSEMARK</name></cpp:macro> <cpp:value>(NMARKS-2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LASTMARK</name></cpp:macro> <cpp:value>(NMARKS-1)</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>mark</name></name></type> <name><name>marks</name><index>[<expr><name>NMARKS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>marks_modified</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>cmark</name><parameter_list>(<parameter><decl><type><name>m</name></type></decl></parameter>, <parameter><decl><type><name>ifile</name></type></decl></parameter>, <parameter><decl><type><name>pos</name></type></decl></parameter>, <parameter><decl><type><name>ln</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name><name>struct</name> <name>mark</name></name> <modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IFILE</name></type> <name>ifile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>POSITION</name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ln</name></decl>;</decl_stmt>
<block>{<block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>m_ifile</name></name> <operator>=</operator> <name>ifile</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>m_scrpos</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>m_scrpos</name><operator>.</operator><name>ln</name></name> <operator>=</operator> <name>ln</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>m_filename</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>public</name> <name>void</name></type>
<name>init_mark</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NMARKS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>letter</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>MOUSEMARK</name></expr>:</case> <expr_stmt><expr><name>letter</name> <operator>=</operator> <literal type="char">'#'</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>LASTMARK</name></expr>:</case> <expr_stmt><expr><name>letter</name> <operator>=</operator> <literal type="char">'\''</literal></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><name>letter</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>&lt;</operator> <literal type="number">26</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'a'</literal><operator>+</operator><name>i</name></expr> </then><else>: <expr><literal type="char">'A'</literal><operator>+</operator><name>i</name><operator>-</operator><literal type="number">26</literal></expr></else></ternary></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>marks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>m_letter</name> <operator>=</operator> <name>letter</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cmark</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>marks</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL_IFILE</name></expr></argument>, <argument><expr><name>NULL_POSITION</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>mark_set_ifile</name><parameter_list>(<parameter><decl><type><name>m</name></type></decl></parameter>, <parameter><decl><type><name>ifile</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name><name>struct</name> <name>mark</name></name> <modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IFILE</name></type> <name>ifile</name></decl>;</decl_stmt>
<block>{<block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>m_ifile</name></name> <operator>=</operator> <name>ifile</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>m_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>m_filename</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>mark_get_ifile</name><parameter_list>(<parameter><decl><type><name>m</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name><name>struct</name> <name>mark</name></name> <modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>m_ifile</name></name> <operator>!=</operator> <name>NULL_IFILE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>mark_set_ifile</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><call><name>get_ifile</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>m_filename</name></name></expr></argument>, <argument><expr><call><name>prev_ifile</name><argument_list>(<argument><expr><name>NULL_IFILE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name><name>struct</name> <name>mark</name></name> <modifier>*</modifier></type>
<name>getumark</name><parameter_list>(<parameter><decl><type><name>c</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>PARG</name></type> <name>parg</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'z'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>&amp;</operator><name><name>marks</name><index>[<expr><name>c</name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>&amp;</operator><name><name>marks</name><index>[<expr><name>c</name><operator>-</operator><literal type="char">'A'</literal><operator>+</operator><literal type="number">26</literal></expr>]</index></name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>&amp;</operator><name><name>marks</name><index>[<expr><name>LASTMARK</name></expr>]</index></name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>&amp;</operator><name><name>marks</name><index>[<expr><name>MOUSEMARK</name></expr>]</index></name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>parg</name><operator>.</operator><name>p_char</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Invalid mark letter %c"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>parg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name><name>struct</name> <name>mark</name></name> <modifier>*</modifier></type>
<name>getmark</name><parameter_list>(<parameter><decl><type><name>c</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mark</name></name> <modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>mark</name></name></type> <name>sm</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>c</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'^'</literal></expr>:</case>



<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>&amp;</operator><name>sm</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cmark</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>curr_ifile</name></expr></argument>, <argument><expr><call><name>ch_zero</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'$'</literal></expr>:</case>



<if_stmt><if>if <condition>(<expr><call><name>ch_end_seek</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Cannot seek to end of file"</literal></expr></argument>, <argument><expr><name>NULL_PARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>&amp;</operator><name>sm</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cmark</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>curr_ifile</name></expr></argument>, <argument><expr><call><name>ch_tell</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>sc_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'.'</literal></expr>:</case>



<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>&amp;</operator><name>sm</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_scrpos</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>m_scrpos</name></name></expr></argument>, <argument><expr><name>TOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cmark</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>curr_ifile</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>m_scrpos</name><operator>.</operator><name>pos</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>m_scrpos</name><operator>.</operator><name>ln</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'\''</literal></expr>:</case>



<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>&amp;</operator><name><name>marks</name><index>[<expr><name>LASTMARK</name></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>



<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>getumark</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>m</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>m_scrpos</name><operator>.</operator><name>pos</name></name> <operator>==</operator> <name>NULL_POSITION</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Mark not set"</literal></expr></argument>, <argument><expr><name>NULL_PARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><operator>(</operator><name>m</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>public</name> <name>int</name></type>
<name>badmark</name><parameter_list>(<parameter><decl><type><name>c</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>getmark</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>public</name> <name>void</name></type>
<name>setmark</name><parameter_list>(<parameter><decl><type><name>c</name></type></decl></parameter>, <parameter><decl><type><name>where</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>where</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mark</name></name> <modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>scrpos</name></name></type> <name>scrpos</name></decl>;</decl_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>getumark</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>m</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>get_scrpos</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scrpos</name></expr></argument>, <argument><expr><name>where</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>scrpos</name><operator>.</operator><name>pos</name></name> <operator>==</operator> <name>NULL_POSITION</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>bell</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>cmark</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>curr_ifile</name></expr></argument>, <argument><expr><name><name>scrpos</name><operator>.</operator><name>pos</name></name></expr></argument>, <argument><expr><name><name>scrpos</name><operator>.</operator><name>ln</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>marks_modified</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>public</name> <name>void</name></type>
<name>clrmark</name><parameter_list>(<parameter><decl><type><name>c</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mark</name></name> <modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>getumark</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>m</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>m_scrpos</name><operator>.</operator><name>pos</name></name> <operator>==</operator> <name>NULL_POSITION</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>bell</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>m_scrpos</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <name>NULL_POSITION</name></expr>;</expr_stmt>
<expr_stmt><expr><name>marks_modified</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>public</name> <name>void</name></type>
<name>lastmark</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>scrpos</name></name></type> <name>scrpos</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ch_getflags</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>CH_HELPFILE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>get_scrpos</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scrpos</name></expr></argument>, <argument><expr><name>TOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>scrpos</name><operator>.</operator><name>pos</name></name> <operator>==</operator> <name>NULL_POSITION</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>cmark</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>marks</name><index>[<expr><name>LASTMARK</name></expr>]</index></name></expr></argument>, <argument><expr><name>curr_ifile</name></expr></argument>, <argument><expr><name><name>scrpos</name><operator>.</operator><name>pos</name></name></expr></argument>, <argument><expr><name><name>scrpos</name><operator>.</operator><name>ln</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>marks_modified</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>public</name> <name>void</name></type>
<name>gomark</name><parameter_list>(<parameter><decl><type><name>c</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mark</name></name> <modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>scrpos</name></name></type> <name>scrpos</name></decl>;</decl_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>getmark</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>m</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><name>m</name> <operator>==</operator> <operator>&amp;</operator><name><name>marks</name><index>[<expr><name>LASTMARK</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>m</name><operator>-&gt;</operator><name>m_scrpos</name><operator>.</operator><name>pos</name></name> <operator>==</operator> <name>NULL_POSITION</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cmark</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>curr_ifile</name></expr></argument>, <argument><expr><call><name>ch_zero</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>jump_sline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mark_get_ifile</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>scrpos</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>m_scrpos</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>m_ifile</name></name> <operator>!=</operator> <name>curr_ifile</name></expr>)</condition>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><call><name>edit_ifile</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>m_ifile</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>jump_loc</name><argument_list>(<argument><expr><name><name>scrpos</name><operator>.</operator><name>pos</name></name></expr></argument>, <argument><expr><name><name>scrpos</name><operator>.</operator><name>ln</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><name>public</name> <name>POSITION</name></type>
<name>markpos</name><parameter_list>(<parameter><decl><type><name>c</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mark</name></name> <modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>getmark</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>m</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL_POSITION</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>m_ifile</name></name> <operator>!=</operator> <name>curr_ifile</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Mark not in current file"</literal></expr></argument>, <argument><expr><name>NULL_PARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL_POSITION</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>m_scrpos</name><operator>.</operator><name>pos</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>public</name> <name>char</name></type>
<name>posmark</name><parameter_list>(<parameter><decl><type><name>pos</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>POSITION</name></type> <name>pos</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUMARKS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>marks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>m_ifile</name> <operator>==</operator> <name>curr_ifile</name> <operator>&amp;&amp;</operator> <name><name>marks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>m_scrpos</name><operator>.</operator><name>pos</name></name> <operator>==</operator> <name>pos</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">26</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="char">'a'</literal> <operator>+</operator> <name>i</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">26</literal><operator>*</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="char">'A'</literal> <operator>+</operator> <operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">26</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="char">'#'</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>public</name> <name>void</name></type>
<name>unmark</name><parameter_list>(<parameter><decl><type><name>ifile</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>IFILE</name></type> <name>ifile</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NMARKS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>marks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>m_ifile</name> <operator>==</operator> <name>ifile</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>marks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>m_scrpos</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <name>NULL_POSITION</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></function>





<function><type><name>public</name> <name>void</name></type>
<name>mark_check_ifile</name><parameter_list>(<parameter><decl><type><name>ifile</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>IFILE</name></type> <name>ifile</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name> <init>= <expr><call><name>get_real_filename</name><argument_list>(<argument><expr><name>ifile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NMARKS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mark</name></name> <modifier>*</modifier></type><name>m</name> <init>= <expr><operator>&amp;</operator><name><name>marks</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mark_filename</name> <init>= <expr><name><name>m</name><operator>-&gt;</operator><name>m_filename</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>mark_filename</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>mark_filename</name> <operator>=</operator> <call><name>lrealpath</name><argument_list>(<argument><expr><name>mark_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>mark_filename</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mark_set_ifile</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>ifile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>mark_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CMD_HISTORY</name></expr></cpp:if>




<function><type><name>public</name> <name>void</name></type>
<name>save_marks</name><parameter_list>(<parameter><decl><type><name>fout</name></type></decl></parameter>, <parameter><decl><type><name>hdr</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hdr</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>perma_marks</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fout</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NMARKS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>mark</name></name> <modifier>*</modifier></type><name>m</name> <init>= <expr><operator>&amp;</operator><name><name>marks</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>pos_str</name><index>[<expr><call><name>INT_STRLEN_BOUND</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>m_scrpos</name><operator>.</operator><name>pos</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>m_scrpos</name><operator>.</operator><name>pos</name></name> <operator>==</operator> <name>NULL_POSITION</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>postoa</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>m_scrpos</name><operator>.</operator><name>pos</name></name></expr></argument>, <argument><expr><name>pos_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>filename</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>m_filename</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>filename</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>filename</name> <operator>=</operator> <call><name>get_real_filename</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>m_ifile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fout</name></expr></argument>, <argument><expr><literal type="string">"m %c %d %s %s\n"</literal></expr></argument>,
<argument><expr><name><name>m</name><operator>-&gt;</operator><name>m_letter</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>m_scrpos</name><operator>.</operator><name>ln</name></name></expr></argument>, <argument><expr><name>pos_str</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><name>public</name> <name>void</name></type>
<name>restore_mark</name><parameter_list>(<parameter><decl><type><name>line</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mark</name></name> <modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ln</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>POSITION</name></type> <name>pos</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>skip_whitespace</name></cpp:macro> <cpp:value>while (*line == ' ') line++</cpp:value></cpp:define>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>line</name><operator>++</operator> <operator>!=</operator> <literal type="char">'m'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>skip_whitespace</name></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>getumark</name><argument_list>(<argument><expr><operator>*</operator><name>line</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>m</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>skip_whitespace</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ln</name> <operator>=</operator> <call><name>lstrtoi</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ln</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ln</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ln</name> <operator>&gt;</operator> <name>sc_height</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ln</name> <operator>=</operator> <name>sc_height</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>skip_whitespace</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>lstrtopos</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>skip_whitespace</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cmark</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>NULL_IFILE</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>m_filename</name></name> <operator>=</operator> <call><name>save</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
