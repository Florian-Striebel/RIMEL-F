<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/less/regexp.c">




























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"less.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_STDIO_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_STDLIB_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_STRING_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"regexp.h"</cpp:file></cpp:include>






































<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EOL</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>END</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BOL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EOL</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANY</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANYOF</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANYBUT</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BRANCH</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BACK</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXACTLY</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOTHING</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STAR</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLUS</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPEN</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLOSE</name></cpp:macro> <cpp:value>30</cpp:value></cpp:define>

































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(p))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEXT</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((*((p)+1)&amp;0377)&lt;&lt;8) + (*((p)+2)&amp;0377))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPERAND</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((p) + 3)</cpp:value></cpp:define>









<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CHARBITS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UCHARAT</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)*(unsigned char *)(p))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UCHARAT</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)*(p)&amp;CHARBITS)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FAIL</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ regerror(m); return(NULL); }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISMULT</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((c) == '*' || (c) == '+' || (c) == '?')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>META</name></cpp:macro> <cpp:value>"^$.[()|?+*\\"</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASWIDTH</name></cpp:macro> <cpp:value>01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMPLE</name></cpp:macro> <cpp:value>02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPSTART</name></cpp:macro> <cpp:value>04</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WORST</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>




<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>regparse</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>regnpar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name>regdummy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>regcode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name>regsize</name></decl>;</decl_stmt>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAGIC</name></cpp:macro> <cpp:value>0234</cpp:value></cpp:define>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STATIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STATIC</name></cpp:macro> <cpp:value>static</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><name>STATIC</name> <name>char</name> <modifier>*</modifier></type><name>reg</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>STATIC</name> <name>char</name> <modifier>*</modifier></type><name>regbranch</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>STATIC</name> <name>char</name> <modifier>*</modifier></type><name>regpiece</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>STATIC</name> <name>char</name> <modifier>*</modifier></type><name>regatom</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>STATIC</name> <name>char</name> <modifier>*</modifier></type><name>regnode</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>STATIC</name> <name>char</name> <modifier>*</modifier></type><name>regnext</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>STATIC</name> <name>void</name></type> <name>regc</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>STATIC</name> <name>void</name></type> <name>reginsert</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>STATIC</name> <name>void</name></type> <name>regtail</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>STATIC</name> <name>void</name></type> <name>regoptail</name><parameter_list>()</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STRCSPN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>STATIC</name> <name>int</name></type> <name>strcspn</name><parameter_list>()</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
















<function><type><name>regexp</name> <modifier>*</modifier></type>
<name>regcomp</name><parameter_list>(<parameter><decl><type><name>exp</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>exp</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>regexp</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type><name>scan</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type><name>longest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>exp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FAIL</name><argument_list>(<argument><expr><literal type="string">"NULL argument"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>regparse</name> <operator>=</operator> <name>exp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>regnpar</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>regsize</name> <operator>=</operator> <literal type="number">0L</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>regcode</name> <operator>=</operator> <operator>&amp;</operator><name>regdummy</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>regc</name><argument_list>(<argument><expr><name>MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>reg</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>regsize</name> <operator>&gt;=</operator> <literal type="number">32767L</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FAIL</name><argument_list>(<argument><expr><literal type="string">"regexp too big"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>regexp</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>regexp</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>regsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FAIL</name><argument_list>(<argument><expr><literal type="string">"out of space"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>regparse</name> <operator>=</operator> <name>exp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>regnpar</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>regcode</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>program</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>regc</name><argument_list>(<argument><expr><name>MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>reg</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>regstart</name></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>reganch</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>regmust</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>regmlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>scan</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>program</name></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>OP</name><argument_list>(<argument><expr><call><name>regnext</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>END</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>scan</name> <operator>=</operator> <call><name>OPERAND</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>OP</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EXACTLY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>regstart</name></name> <operator>=</operator> <operator>*</operator><call><name>OPERAND</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>OP</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BOL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>reganch</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>









<if_stmt><if>if <condition>(<expr><name>flags</name><operator>&amp;</operator><name>SPSTART</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>longest</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>scan</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>scan</name> <operator>=</operator> <call><name>regnext</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>OP</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EXACTLY</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><call><name>OPERAND</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>longest</name> <operator>=</operator> <call><name>OPERAND</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><call><name>OPERAND</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>regmust</name></name> <operator>=</operator> <name>longest</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>regmlen</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return<expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>reg</name><parameter_list>(<parameter><decl><type><name>paren</name></type></decl></parameter>, <parameter><decl><type><name>flagp</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>paren</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>flagp</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type><name>br</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type><name>ender</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>parno</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>flagp</name> <operator>=</operator> <name>HASWIDTH</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>paren</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>regnpar</name> <operator>&gt;=</operator> <name>NSUBEXP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FAIL</name><argument_list>(<argument><expr><literal type="string">"too many ()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>parno</name> <operator>=</operator> <name>regnpar</name></expr>;</expr_stmt>
<expr_stmt><expr><name>regnpar</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>regnode</name><argument_list>(<argument><expr><name>OPEN</name><operator>+</operator><name>parno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><name>br</name> <operator>=</operator> <call><name>regbranch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>br</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>regtail</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>br</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>br</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name><operator>&amp;</operator><name>HASWIDTH</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>flagp</name> <operator>&amp;=</operator> <operator>~</operator><name>HASWIDTH</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>flagp</name> <operator>|=</operator> <name>flags</name><operator>&amp;</operator><name>SPSTART</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>regparse</name> <operator>==</operator> <literal type="char">'|'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>regparse</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>br</name> <operator>=</operator> <call><name>regbranch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>br</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>regtail</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>br</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name><operator>&amp;</operator><name>HASWIDTH</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>flagp</name> <operator>&amp;=</operator> <operator>~</operator><name>HASWIDTH</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>flagp</name> <operator>|=</operator> <name>flags</name><operator>&amp;</operator><name>SPSTART</name></expr>;</expr_stmt>
</block_content>}</block></while>


<expr_stmt><expr><name>ender</name> <operator>=</operator> <call><name>regnode</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name>paren</name><operator>)</operator></expr> ?</condition><then> <expr><name>CLOSE</name><operator>+</operator><name>parno</name></expr> </then><else>: <expr><name>END</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>regtail</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ender</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>br</name> <operator>=</operator> <name>ret</name></expr>;</init> <condition><expr><name>br</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>br</name> <operator>=</operator> <call><name>regnext</name><argument_list>(<argument><expr><name>br</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>regoptail</name><argument_list>(<argument><expr><name>br</name></expr></argument>, <argument><expr><name>ender</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>


<if_stmt><if>if <condition>(<expr><name>paren</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>regparse</name><operator>++</operator> <operator>!=</operator> <literal type="char">')'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>FAIL</name><argument_list>(<argument><expr><literal type="string">"unmatched ()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>paren</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>regparse</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>regparse</name> <operator>==</operator> <literal type="char">')'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>FAIL</name><argument_list>(<argument><expr><literal type="string">"unmatched ()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FAIL</name><argument_list>(<argument><expr><literal type="string">"junk on end"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return<expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>regbranch</name><parameter_list>(<parameter><decl><type><name>flagp</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>flagp</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type><name>chain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type><name>latest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>flagp</name> <operator>=</operator> <name>WORST</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>regnode</name><argument_list>(<argument><expr><name>BRANCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>chain</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>regparse</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>regparse</name> <operator>!=</operator> <literal type="char">'|'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>regparse</name> <operator>!=</operator> <literal type="char">')'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>latest</name> <operator>=</operator> <call><name>regpiece</name><argument_list>(<argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>latest</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>flagp</name> <operator>|=</operator> <name>flags</name><operator>&amp;</operator><name>HASWIDTH</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>chain</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>flagp</name> <operator>|=</operator> <name>flags</name><operator>&amp;</operator><name>SPSTART</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>regtail</name><argument_list>(<argument><expr><name>chain</name></expr></argument>, <argument><expr><name>latest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>chain</name> <operator>=</operator> <name>latest</name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>chain</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>regnode</name><argument_list>(<argument><expr><name>NOTHING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return<expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>regpiece</name><parameter_list>(<parameter><decl><type><name>flagp</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>flagp</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>char</name></type> <name>op</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>regatom</name><argument_list>(<argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>op</name> <operator>=</operator> <operator>*</operator><name>regparse</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ISMULT</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>flagp</name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name><operator>&amp;</operator><name>HASWIDTH</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>op</name> <operator>!=</operator> <literal type="char">'?'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FAIL</name><argument_list>(<argument><expr><literal type="string">"*+ operand could be empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>flagp</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>op</name> <operator>!=</operator> <literal type="char">'+'</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>WORST</name><operator>|</operator><name>SPSTART</name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name>WORST</name><operator>|</operator><name>HASWIDTH</name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <literal type="char">'*'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name><operator>&amp;</operator><name>SIMPLE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>reginsert</name><argument_list>(<argument><expr><name>STAR</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>op</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>reginsert</name><argument_list>(<argument><expr><name>BRANCH</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>regoptail</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><call><name>regnode</name><argument_list>(<argument><expr><name>BACK</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>regoptail</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>regtail</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><call><name>regnode</name><argument_list>(<argument><expr><name>BRANCH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>regtail</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><call><name>regnode</name><argument_list>(<argument><expr><name>NOTHING</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>op</name> <operator>==</operator> <literal type="char">'+'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name><operator>&amp;</operator><name>SIMPLE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>reginsert</name><argument_list>(<argument><expr><name>PLUS</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>op</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>regnode</name><argument_list>(<argument><expr><name>BRANCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>regtail</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>regtail</name><argument_list>(<argument><expr><call><name>regnode</name><argument_list>(<argument><expr><name>BACK</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>regtail</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><call><name>regnode</name><argument_list>(<argument><expr><name>BRANCH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>regtail</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><call><name>regnode</name><argument_list>(<argument><expr><name>NOTHING</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>op</name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>reginsert</name><argument_list>(<argument><expr><name>BRANCH</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>regtail</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><call><name>regnode</name><argument_list>(<argument><expr><name>BRANCH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>regnode</name><argument_list>(<argument><expr><name>NOTHING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>regtail</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>regoptail</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>regparse</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ISMULT</name><argument_list>(<argument><expr><operator>*</operator><name>regparse</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FAIL</name><argument_list>(<argument><expr><literal type="string">"nested *?+"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return<expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>regatom</name><parameter_list>(<parameter><decl><type><name>flagp</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>flagp</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>flagp</name> <operator>=</operator> <name>WORST</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><operator>*</operator><name>regparse</name><operator>++</operator></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'^'</literal></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>regnode</name><argument_list>(<argument><expr><name>BOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'$'</literal></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>regnode</name><argument_list>(<argument><expr><name>EOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'.'</literal></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>regnode</name><argument_list>(<argument><expr><name>ANY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>flagp</name> <operator>|=</operator> <name>HASWIDTH</name><operator>|</operator><name>SIMPLE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'['</literal></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>clss</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>classend</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>regparse</name> <operator>==</operator> <literal type="char">'^'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>regnode</name><argument_list>(<argument><expr><name>ANYBUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>regparse</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>regnode</name><argument_list>(<argument><expr><name>ANYOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>regparse</name> <operator>==</operator> <literal type="char">']'</literal> <operator>||</operator> <operator>*</operator><name>regparse</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>regc</name><argument_list>(<argument><expr><operator>*</operator><name>regparse</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while <condition>(<expr><operator>*</operator><name>regparse</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>regparse</name> <operator>!=</operator> <literal type="char">']'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>regparse</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>regparse</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>regparse</name> <operator>==</operator> <literal type="char">']'</literal> <operator>||</operator> <operator>*</operator><name>regparse</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>regc</name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>clss</name> <operator>=</operator> <call><name>UCHARAT</name><argument_list>(<argument><expr><name>regparse</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>classend</name> <operator>=</operator> <call><name>UCHARAT</name><argument_list>(<argument><expr><name>regparse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>clss</name> <operator>&gt;</operator> <name>classend</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FAIL</name><argument_list>(<argument><expr><literal type="string">"invalid [] range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>clss</name> <operator>&lt;=</operator> <name>classend</name></expr>;</condition> <incr><expr><name>clss</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>regc</name><argument_list>(<argument><expr><name>clss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>regparse</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>regc</name><argument_list>(<argument><expr><operator>*</operator><name>regparse</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>regc</name><argument_list>(<argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>regparse</name> <operator>!=</operator> <literal type="char">']'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FAIL</name><argument_list>(<argument><expr><literal type="string">"unmatched []"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>regparse</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>flagp</name> <operator>|=</operator> <name>HASWIDTH</name><operator>|</operator><name>SIMPLE</name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><literal type="char">'('</literal></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>reg</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>flagp</name> <operator>|=</operator> <name>flags</name><operator>&amp;</operator><operator>(</operator><name>HASWIDTH</name><operator>|</operator><name>SPSTART</name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'\0'</literal></expr>:</case>
<case>case <expr><literal type="char">'|'</literal></expr>:</case>
<case>case <expr><literal type="char">')'</literal></expr>:</case>
<expr_stmt><expr><call><name>FAIL</name><argument_list>(<argument><expr><literal type="string">"internal urp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>
<case>case <expr><literal type="char">'?'</literal></expr>:</case>
<case>case <expr><literal type="char">'+'</literal></expr>:</case>
<case>case <expr><literal type="char">'*'</literal></expr>:</case>
<expr_stmt><expr><call><name>FAIL</name><argument_list>(<argument><expr><literal type="string">"?+* follows nothing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>
<case>case <expr><literal type="char">'\\'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>regparse</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FAIL</name><argument_list>(<argument><expr><literal type="string">"trailing \\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>regnode</name><argument_list>(<argument><expr><name>EXACTLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>regc</name><argument_list>(<argument><expr><operator>*</operator><name>regparse</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>regc</name><argument_list>(<argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>flagp</name> <operator>|=</operator> <name>HASWIDTH</name><operator>|</operator><name>SIMPLE</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default> <block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>char</name></type> <name>ender</name></decl>;</decl_stmt>

<expr_stmt><expr><name>regparse</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>strcspn</name><argument_list>(<argument><expr><name>regparse</name></expr></argument>, <argument><expr><name>META</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>FAIL</name><argument_list>(<argument><expr><literal type="string">"internal disaster"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ender</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>regparse</name><operator>+</operator><name>len</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>ISMULT</name><argument_list>(<argument><expr><name>ender</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>flagp</name> <operator>|=</operator> <name>HASWIDTH</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>flagp</name> <operator>|=</operator> <name>SIMPLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>regnode</name><argument_list>(<argument><expr><name>EXACTLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>regc</name><argument_list>(<argument><expr><operator>*</operator><name>regparse</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>regc</name><argument_list>(<argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
</block_content>}</block></switch>

<return>return<expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>regnode</name><parameter_list>(<parameter><decl><type><name>op</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name></type> <name>op</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>regcode</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>&amp;</operator><name>regdummy</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>regsize</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <name>op</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>regcode</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>

<return>return<expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>regc</name><parameter_list>(<parameter><decl><type><name>b</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name></type> <name>b</name></decl>;</decl_stmt>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>regcode</name> <operator>!=</operator> <operator>&amp;</operator><name>regdummy</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>regcode</name><operator>++</operator> <operator>=</operator> <name>b</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>regsize</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>reginsert</name><parameter_list>(<parameter><decl><type><name>op</name></type></decl></parameter>, <parameter><decl><type><name>opnd</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name></type> <name>op</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>opnd</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type><name>place</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>regcode</name> <operator>==</operator> <operator>&amp;</operator><name>regdummy</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>regsize</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <name>regcode</name></expr>;</expr_stmt>
<expr_stmt><expr><name>regcode</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name>regcode</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>src</name> <operator>&gt;</operator> <name>opnd</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>--</operator><name>dst</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>src</name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>place</name> <operator>=</operator> <name>opnd</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>place</name><operator>++</operator> <operator>=</operator> <name>op</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>place</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>place</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>regtail</name><parameter_list>(<parameter><decl><type><name>p</name></type></decl></parameter>, <parameter><decl><type><name>val</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type><name>scan</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type><name>temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>offset</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <operator>&amp;</operator><name>regdummy</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>scan</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>regnext</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>temp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>scan</name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>OP</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BACK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>scan</name> <operator>-</operator> <name>val</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>val</name> <operator>-</operator> <name>scan</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>scan</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>=</operator> <operator>(</operator><name>offset</name><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0377</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name>scan</name><operator>+</operator><literal type="number">2</literal><operator>)</operator> <operator>=</operator> <name>offset</name><operator>&amp;</operator><literal type="number">0377</literal></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>regoptail</name><parameter_list>(<parameter><decl><type><name>p</name></type></decl></parameter>, <parameter><decl><type><name>val</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>p</name> <operator>==</operator> <operator>&amp;</operator><name>regdummy</name> <operator>||</operator> <call><name>OP</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>BRANCH</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>regtail</name><argument_list>(<argument><expr><call><name>OPERAND</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>








<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>reginput</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>regbol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>regstartp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>regendp</name></decl>;</decl_stmt>




<function_decl><type><name>STATIC</name> <name>int</name></type> <name>regtry</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>STATIC</name> <name>int</name></type> <name>regmatch</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>STATIC</name> <name>int</name></type> <name>regrepeat</name><parameter_list>()</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>regnarrate</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> <name>regdump</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>STATIC</name> <name>char</name> <modifier>*</modifier></type><name>regprop</name><parameter_list>()</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><name>int</name></type>
<name>regexec2</name><parameter_list>(<parameter><decl><type><name>prog</name></type></decl></parameter>, <parameter><decl><type><name>string</name></type></decl></parameter>, <parameter><decl><type><name>notbol</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><specifier>register</specifier> <name>regexp</name> <modifier>*</modifier></type><name>prog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>notbol</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>prog</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>string</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>regerror</name><argument_list>(<argument><expr><literal type="string">"NULL parameter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>UCHARAT</name><argument_list>(<argument><expr><name><name>prog</name><operator>-&gt;</operator><name>program</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>MAGIC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>regerror</name><argument_list>(<argument><expr><literal type="string">"corrupted program"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>prog</name><operator>-&gt;</operator><name>regmust</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>string</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>s</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>prog</name><operator>-&gt;</operator><name>regmust</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>prog</name><operator>-&gt;</operator><name>regmust</name></name></expr></argument>, <argument><expr><name><name>prog</name><operator>-&gt;</operator><name>regmlen</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>notbol</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>regbol</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>regbol</name> <operator>=</operator> <name>string</name></expr>;</expr_stmt></block_content></block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>prog</name><operator>-&gt;</operator><name>reganch</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><call><name>regtry</name><argument_list>(<argument><expr><name>prog</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>s</name> <operator>=</operator> <name>string</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>prog</name><operator>-&gt;</operator><name>regstart</name></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>

<while>while <condition>(<expr><operator>(</operator><name>s</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>prog</name><operator>-&gt;</operator><name>regstart</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>regtry</name><argument_list>(<argument><expr><name>prog</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while></block_content></block></if>
<else>else<block type="pseudo"><block_content>

<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>regtry</name><argument_list>(<argument><expr><name>prog</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><operator>*</operator><name>s</name><operator>++</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>;</do></block_content></block></else></if_stmt>


<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>regexec</name><parameter_list>(<parameter><decl><type><name>prog</name></type></decl></parameter>, <parameter><decl><type><name>string</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><specifier>register</specifier> <name>regexp</name> <modifier>*</modifier></type><name>prog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl>;</decl_stmt>
<block>{<block_content>
<return>return <expr><call><name>regexec2</name><argument_list>(<argument><expr><name>prog</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>regtry</name><parameter_list>(<parameter><decl><type><name>prog</name></type></decl></parameter>, <parameter><decl><type><name>string</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>regexp</name> <modifier>*</modifier></type><name>prog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>string</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>sp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt>

<expr_stmt><expr><name>reginput</name> <operator>=</operator> <name>string</name></expr>;</expr_stmt>
<expr_stmt><expr><name>regstartp</name> <operator>=</operator> <name><name>prog</name><operator>-&gt;</operator><name>startp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>regendp</name> <operator>=</operator> <name><name>prog</name><operator>-&gt;</operator><name>endp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sp</name> <operator>=</operator> <name><name>prog</name><operator>-&gt;</operator><name>startp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ep</name> <operator>=</operator> <name><name>prog</name><operator>-&gt;</operator><name>endp</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>NSUBEXP</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>sp</name><operator>++</operator> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ep</name><operator>++</operator> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><call><name>regmatch</name><argument_list>(<argument><expr><name><name>prog</name><operator>-&gt;</operator><name>program</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>prog</name><operator>-&gt;</operator><name>startp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>string</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prog</name><operator>-&gt;</operator><name>endp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>reginput</name></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>int</name></type>
<name>regmatch</name><parameter_list>(<parameter><decl><type><name>prog</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>prog</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type><name>scan</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<expr_stmt><expr><name>scan</name> <operator>=</operator> <name>prog</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>scan</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>regnarrate</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s(\n"</literal></expr></argument>, <argument><expr><call><name>regprop</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<while>while <condition>(<expr><name>scan</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>regnarrate</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s...\n"</literal></expr></argument>, <argument><expr><call><name>regprop</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>regnext</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><call><name>OP</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>BOL</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>reginput</name> <operator>!=</operator> <name>regbol</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>EOL</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>reginput</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>ANY</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>reginput</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>reginput</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>EXACTLY</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type><name>opnd</name></decl>;</decl_stmt>

<expr_stmt><expr><name>opnd</name> <operator>=</operator> <call><name>OPERAND</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>opnd</name> <operator>!=</operator> <operator>*</operator><name>reginput</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>opnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>opnd</name></expr></argument>, <argument><expr><name>reginput</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>reginput</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>ANYOF</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>reginput</name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <call><name>strchr</name><argument_list>(<argument><expr><call><name>OPERAND</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>*</operator><name>reginput</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>reginput</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ANYBUT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>reginput</name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <call><name>strchr</name><argument_list>(<argument><expr><call><name>OPERAND</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>*</operator><name>reginput</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>reginput</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NOTHING</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>BACK</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>OPEN</name><operator>+</operator><literal type="number">1</literal></expr>:</case>
<case>case <expr><name>OPEN</name><operator>+</operator><literal type="number">2</literal></expr>:</case>
<case>case <expr><name>OPEN</name><operator>+</operator><literal type="number">3</literal></expr>:</case>
<case>case <expr><name>OPEN</name><operator>+</operator><literal type="number">4</literal></expr>:</case>
<case>case <expr><name>OPEN</name><operator>+</operator><literal type="number">5</literal></expr>:</case>
<case>case <expr><name>OPEN</name><operator>+</operator><literal type="number">6</literal></expr>:</case>
<case>case <expr><name>OPEN</name><operator>+</operator><literal type="number">7</literal></expr>:</case>
<case>case <expr><name>OPEN</name><operator>+</operator><literal type="number">8</literal></expr>:</case>
<case>case <expr><name>OPEN</name><operator>+</operator><literal type="number">9</literal></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>no</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type><name>save</name></decl>;</decl_stmt>

<expr_stmt><expr><name>no</name> <operator>=</operator> <call><name>OP</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>OPEN</name></expr>;</expr_stmt>
<expr_stmt><expr><name>save</name> <operator>=</operator> <name>reginput</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>regmatch</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>





<if_stmt><if>if <condition>(<expr><name><name>regstartp</name><index>[<expr><name>no</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>regstartp</name><index>[<expr><name>no</name></expr>]</index></name> <operator>=</operator> <name>save</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block>

<break>break;</break>
<case>case <expr><name>CLOSE</name><operator>+</operator><literal type="number">1</literal></expr>:</case>
<case>case <expr><name>CLOSE</name><operator>+</operator><literal type="number">2</literal></expr>:</case>
<case>case <expr><name>CLOSE</name><operator>+</operator><literal type="number">3</literal></expr>:</case>
<case>case <expr><name>CLOSE</name><operator>+</operator><literal type="number">4</literal></expr>:</case>
<case>case <expr><name>CLOSE</name><operator>+</operator><literal type="number">5</literal></expr>:</case>
<case>case <expr><name>CLOSE</name><operator>+</operator><literal type="number">6</literal></expr>:</case>
<case>case <expr><name>CLOSE</name><operator>+</operator><literal type="number">7</literal></expr>:</case>
<case>case <expr><name>CLOSE</name><operator>+</operator><literal type="number">8</literal></expr>:</case>
<case>case <expr><name>CLOSE</name><operator>+</operator><literal type="number">9</literal></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>no</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type><name>save</name></decl>;</decl_stmt>

<expr_stmt><expr><name>no</name> <operator>=</operator> <call><name>OP</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>CLOSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>save</name> <operator>=</operator> <name>reginput</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>regmatch</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>





<if_stmt><if>if <condition>(<expr><name><name>regendp</name><index>[<expr><name>no</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>regendp</name><index>[<expr><name>no</name></expr>]</index></name> <operator>=</operator> <name>save</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block>

<break>break;</break>
<case>case <expr><name>BRANCH</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type><name>save</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>OP</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>BRANCH</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>OPERAND</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<do>do <block>{<block_content>
<expr_stmt><expr><name>save</name> <operator>=</operator> <name>reginput</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>regmatch</name><argument_list>(<argument><expr><call><name>OPERAND</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>reginput</name> <operator>=</operator> <name>save</name></expr>;</expr_stmt>
<expr_stmt><expr><name>scan</name> <operator>=</operator> <call><name>regnext</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>scan</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>OP</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BRANCH</name></expr>)</condition>;</do>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>

</block_content>}</block></else></if_stmt>
</block_content>}</block>

<break>break;</break>
<case>case <expr><name>STAR</name></expr>:</case>
<case>case <expr><name>PLUS</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>char</name></type> <name>nextch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>no</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type><name>save</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>min</name></decl>;</decl_stmt>





<expr_stmt><expr><name>nextch</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>OP</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EXACTLY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nextch</name> <operator>=</operator> <operator>*</operator><call><name>OPERAND</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>min</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><call><name>OP</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>STAR</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>save</name> <operator>=</operator> <name>reginput</name></expr>;</expr_stmt>
<expr_stmt><expr><name>no</name> <operator>=</operator> <call><name>regrepeat</name><argument_list>(<argument><expr><call><name>OPERAND</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>no</name> <operator>&gt;=</operator> <name>min</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>nextch</name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <operator>*</operator><name>reginput</name> <operator>==</operator> <name>nextch</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>regmatch</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>no</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>reginput</name> <operator>=</operator> <name>save</name> <operator>+</operator> <name>no</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block>

<break>break;</break>
<case>case <expr><name>END</name></expr>:</case>
<return>return<expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>

<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>regerror</name><argument_list>(<argument><expr><literal type="string">"memory corruption"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>

<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name>scan</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></while>





<expr_stmt><expr><call><name>regerror</name><argument_list>(<argument><expr><literal type="string">"corrupted pointers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>regrepeat</name><parameter_list>(<parameter><decl><type><name>p</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type><name>scan</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type><name>opnd</name></decl>;</decl_stmt>

<expr_stmt><expr><name>scan</name> <operator>=</operator> <name>reginput</name></expr>;</expr_stmt>
<expr_stmt><expr><name>opnd</name> <operator>=</operator> <call><name>OPERAND</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><call><name>OP</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ANY</name></expr>:</case>
<expr_stmt><expr><name>count</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>scan</name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>EXACTLY</name></expr>:</case>
<while>while <condition>(<expr><operator>*</operator><name>opnd</name> <operator>==</operator> <operator>*</operator><name>scan</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>scan</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<break>break;</break>
<case>case <expr><name>ANYOF</name></expr>:</case>
<while>while <condition>(<expr><operator>*</operator><name>scan</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>opnd</name></expr></argument>, <argument><expr><operator>*</operator><name>scan</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>scan</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<break>break;</break>
<case>case <expr><name>ANYBUT</name></expr>:</case>
<while>while <condition>(<expr><operator>*</operator><name>scan</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>opnd</name></expr></argument>, <argument><expr><operator>*</operator><name>scan</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>scan</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>regerror</name><argument_list>(<argument><expr><literal type="string">"internal foulup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name>reginput</name> <operator>=</operator> <name>scan</name></expr>;</expr_stmt>

<return>return<expr><operator>(</operator><name>count</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>regnext</name><parameter_list>(<parameter><decl><type><name>p</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>offset</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <operator>&amp;</operator><name>regdummy</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>NEXT</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>OP</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BACK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><name>p</name><operator>-</operator><name>offset</name><operator>)</operator></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><name>p</name><operator>+</operator><name>offset</name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function_decl><type><name>STATIC</name> <name>char</name> <modifier>*</modifier></type><name>regprop</name><parameter_list>()</parameter_list>;</function_decl>




<function><type><name>void</name></type>
<name>regdump</name><parameter_list>(<parameter><decl><type><name>r</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>regexp</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>char</name></type> <name>op</name> <init>= <expr><name>EXACTLY</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>


<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>program</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>op</name> <operator>!=</operator> <name>END</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>OP</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%2d%s"</literal></expr></argument>, <argument><expr><name>s</name><operator>-</operator><name><name>r</name><operator>-&gt;</operator><name>program</name></name></expr></argument>, <argument><expr><call><name>regprop</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>regnext</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>next</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"(0)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"(%d)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>s</name><operator>-</operator><name><name>r</name><operator>-&gt;</operator><name>program</name></name><operator>)</operator><operator>+</operator><operator>(</operator><name>next</name><operator>-</operator><name>s</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>ANYOF</name> <operator>||</operator> <name>op</name> <operator>==</operator> <name>ANYBUT</name> <operator>||</operator> <name>op</name> <operator>==</operator> <name>EXACTLY</name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>


<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>regstart</name></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"start `%c' "</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>regstart</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>reganch</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"anchored "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>regmust</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"must have \"%s\""</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>regmust</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>regprop</name><parameter_list>(<parameter><decl><type><name>op</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>op</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">50</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><call><name>OP</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>BOL</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"BOL"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>EOL</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"EOL"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ANY</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"ANY"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ANYOF</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"ANYOF"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ANYBUT</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"ANYBUT"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>BRANCH</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"BRANCH"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>EXACTLY</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"EXACTLY"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NOTHING</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"NOTHING"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>BACK</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"BACK"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>END</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"END"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OPEN</name><operator>+</operator><literal type="number">1</literal></expr>:</case>
<case>case <expr><name>OPEN</name><operator>+</operator><literal type="number">2</literal></expr>:</case>
<case>case <expr><name>OPEN</name><operator>+</operator><literal type="number">3</literal></expr>:</case>
<case>case <expr><name>OPEN</name><operator>+</operator><literal type="number">4</literal></expr>:</case>
<case>case <expr><name>OPEN</name><operator>+</operator><literal type="number">5</literal></expr>:</case>
<case>case <expr><name>OPEN</name><operator>+</operator><literal type="number">6</literal></expr>:</case>
<case>case <expr><name>OPEN</name><operator>+</operator><literal type="number">7</literal></expr>:</case>
<case>case <expr><name>OPEN</name><operator>+</operator><literal type="number">8</literal></expr>:</case>
<case>case <expr><name>OPEN</name><operator>+</operator><literal type="number">9</literal></expr>:</case>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name><operator>+</operator><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"OPEN%d"</literal></expr></argument>, <argument><expr><call><name>OP</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call><operator>-</operator><name>OPEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CLOSE</name><operator>+</operator><literal type="number">1</literal></expr>:</case>
<case>case <expr><name>CLOSE</name><operator>+</operator><literal type="number">2</literal></expr>:</case>
<case>case <expr><name>CLOSE</name><operator>+</operator><literal type="number">3</literal></expr>:</case>
<case>case <expr><name>CLOSE</name><operator>+</operator><literal type="number">4</literal></expr>:</case>
<case>case <expr><name>CLOSE</name><operator>+</operator><literal type="number">5</literal></expr>:</case>
<case>case <expr><name>CLOSE</name><operator>+</operator><literal type="number">6</literal></expr>:</case>
<case>case <expr><name>CLOSE</name><operator>+</operator><literal type="number">7</literal></expr>:</case>
<case>case <expr><name>CLOSE</name><operator>+</operator><literal type="number">8</literal></expr>:</case>
<case>case <expr><name>CLOSE</name><operator>+</operator><literal type="number">9</literal></expr>:</case>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name><operator>+</operator><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"CLOSE%d"</literal></expr></argument>, <argument><expr><call><name>OP</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call><operator>-</operator><name>CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>STAR</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"STAR"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PLUS</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="string">"PLUS"</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>regerror</name><argument_list>(<argument><expr><literal type="string">"corrupted opcode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strcat</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return<expr><operator>(</operator><name>buf</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STRCSPN</name></expr></argument>)</argument_list></call></expr></cpp:if>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>strcspn</name><parameter_list>(<parameter><decl><type><name>s1</name></type></decl></parameter>, <parameter><decl><type><name>s2</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s2</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type><name>scan1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>char</name> <modifier>*</modifier></type><name>scan2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>count</name></decl>;</decl_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>scan1</name> <operator>=</operator> <name>s1</name></expr>;</init> <condition><expr><operator>*</operator><name>scan1</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>scan1</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>scan2</name> <operator>=</operator> <name>s2</name></expr>;</init> <condition><expr><operator>*</operator><name>scan2</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition><incr/>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>scan1</name> <operator>==</operator> <operator>*</operator><name>scan2</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return<expr><operator>(</operator><name>count</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return<expr><operator>(</operator><name>count</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
