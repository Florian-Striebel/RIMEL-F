<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/less/optfunc.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"less.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"option.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>nbufs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>bufspace</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>pr_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>plusoption</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>swindow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>sc_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>sc_height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>secure</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>dohelp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>is_tty</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name></type> <name>openquote</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name></type> <name>closequote</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name><name>prproto</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>eqproto</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>hproto</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>wproto</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>every_first_cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>IFILE</name></type> <name>curr_ifile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name></type> <name><name>version</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>jump_sline</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>long</name></type> <name>jump_sline_fraction</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>shift_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>long</name></type> <name>shift_count_fraction</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name></type> <name>rscroll_char</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>rscroll_attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>mousecap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>wheel_lines</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>less_is_more</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>linenum_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>status_col_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>use_color</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>want_filesize</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LOGFILE</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>namelogfile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>force_logfile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>logfile</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TAGS</name></expr></cpp:if>
<decl_stmt><decl><type><name>public</name> <name>char</name> <modifier>*</modifier></type><name>tagoption</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>tags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name></type> <name><name>ztags</name><index>[]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LESSTEST</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>ttyin_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>rstat_file</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>nm_fg_color</name></decl>, <decl><type ref="prev"/><name>nm_bg_color</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>bo_fg_color</name></decl>, <decl><type ref="prev"/><name>bo_bg_color</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>ul_fg_color</name></decl>, <decl><type ref="prev"/><name>ul_bg_color</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>so_fg_color</name></decl>, <decl><type ref="prev"/><name>so_bg_color</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>bl_fg_color</name></decl>, <decl><type ref="prev"/><name>bl_bg_color</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>sgr_mode</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>WIN32C</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>COMMON_LVB_UNDERSCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMMON_LVB_UNDERSCORE</name></cpp:macro> <cpp:value>0x8000</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LOGFILE</name></expr></cpp:if>



<function><type><name>public</name> <name>void</name></type>
<name>opt_o</name><parameter_list>(<parameter><decl><type><name>type</name></type></decl></parameter>, <parameter><decl><type><name>s</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>PARG</name></type> <name>parg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>secure</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"log file support is not available"</literal></expr></argument>, <argument><expr><name>NULL_PARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>INIT</name></expr>:</case>
<expr_stmt><expr><name>namelogfile</name> <operator>=</operator> <call><name>save</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TOGGLE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>ch_getflags</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>CH_CANSEEK</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Input is not a pipe"</literal></expr></argument>, <argument><expr><name>NULL_PARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>logfile</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Log file is already in use"</literal></expr></argument>, <argument><expr><name>NULL_PARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>skipsp</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>namelogfile</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>namelogfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>filename</name> <operator>=</operator> <call><name>lglob</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>namelogfile</name> <operator>=</operator> <call><name>shell_unquote</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>use_logfile</name><argument_list>(<argument><expr><name>namelogfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sync_logfile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>QUERY</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>logfile</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"No log file"</literal></expr></argument>, <argument><expr><name>NULL_PARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>parg</name><operator>.</operator><name>p_string</name></name> <operator>=</operator> <name>namelogfile</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Log file \"%s\""</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>parg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>




<function><type><name>public</name> <name>void</name></type>
<name>opt__O</name><parameter_list>(<parameter><decl><type><name>type</name></type></decl></parameter>, <parameter><decl><type><name>s</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<block>{<block_content>
<expr_stmt><expr><name>force_logfile</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>opt_o</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><name>public</name> <name>void</name></type>
<name>opt_j</name><parameter_list>(<parameter><decl><type><name>type</name></type></decl></parameter>, <parameter><decl><type><name>s</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>PARG</name></type> <name>parg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">24</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>INIT</name></expr>:</case>
<case>case <expr><name>TOGGLE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>jump_sline_fraction</name> <operator>=</operator> <call><name>getfraction</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="string">"j"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Invalid line fraction"</literal></expr></argument>, <argument><expr><name>NULL_PARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>calc_jump_sline</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sline</name> <init>= <expr><call><name>getnum</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="string">"j"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Invalid line number"</literal></expr></argument>, <argument><expr><name>NULL_PARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>jump_sline</name> <operator>=</operator> <name>sline</name></expr>;</expr_stmt>
<expr_stmt><expr><name>jump_sline_fraction</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>QUERY</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>jump_sline_fraction</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>parg</name><operator>.</operator><name>p_int</name></name> <operator>=</operator> <name>jump_sline</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Position target at screen line %d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>parg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else
<block>{<block_content>

<expr_stmt><expr><call><name>SNPRINTF1</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">".%06ld"</literal></expr></argument>, <argument><expr><name>jump_sline_fraction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parg</name><operator>.</operator><name>p_string</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Position target at screen position %s"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>parg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>public</name> <name>void</name></type>
<name>calc_jump_sline</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>jump_sline_fraction</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>jump_sline</name> <operator>=</operator> <name>sc_height</name> <operator>*</operator> <name>jump_sline_fraction</name> <operator>/</operator> <name>NUM_FRAC_DENOM</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>public</name> <name>void</name></type>
<name>opt_shift</name><parameter_list>(<parameter><decl><type><name>type</name></type></decl></parameter>, <parameter><decl><type><name>s</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>PARG</name></type> <name>parg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">24</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>INIT</name></expr>:</case>
<case>case <expr><name>TOGGLE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>shift_count_fraction</name> <operator>=</operator> <call><name>getfraction</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="string">"#"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Invalid column fraction"</literal></expr></argument>, <argument><expr><name>NULL_PARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>calc_shift_count</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>hs</name> <init>= <expr><call><name>getnum</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="string">"#"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Invalid column number"</literal></expr></argument>, <argument><expr><name>NULL_PARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>shift_count</name> <operator>=</operator> <name>hs</name></expr>;</expr_stmt>
<expr_stmt><expr><name>shift_count_fraction</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>QUERY</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>shift_count_fraction</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>parg</name><operator>.</operator><name>p_int</name></name> <operator>=</operator> <name>shift_count</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Horizontal shift %d columns"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>parg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else
<block>{<block_content>

<expr_stmt><expr><call><name>SNPRINTF1</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">".%06ld"</literal></expr></argument>, <argument><expr><name>shift_count_fraction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parg</name><operator>.</operator><name>p_string</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Horizontal shift %s of screen width"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>parg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>public</name> <name>void</name></type>
<name>calc_shift_count</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>shift_count_fraction</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>shift_count</name> <operator>=</operator> <name>sc_width</name> <operator>*</operator> <name>shift_count_fraction</name> <operator>/</operator> <name>NUM_FRAC_DENOM</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USERFILE</name></expr></cpp:if>
<function><type><name>public</name> <name>void</name></type>
<name>opt_k</name><parameter_list>(<parameter><decl><type><name>type</name></type></decl></parameter>, <parameter><decl><type><name>s</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>PARG</name></type> <name>parg</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>INIT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>lesskey</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>parg</name><operator>.</operator><name>p_string</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Cannot use lesskey file \"%s\""</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>parg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_LESSKEYSRC</name></expr></cpp:if>
<function><type><name>public</name> <name>void</name></type>
<name>opt_ks</name><parameter_list>(<parameter><decl><type><name>type</name></type></decl></parameter>, <parameter><decl><type><name>s</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>PARG</name></type> <name>parg</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>INIT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>lesskey_src</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>parg</name><operator>.</operator><name>p_string</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Cannot use lesskey source file \"%s\""</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>parg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TAGS</name></expr></cpp:if>



<function><type><name>public</name> <name>void</name></type>
<name>opt_t</name><parameter_list>(<parameter><decl><type><name>type</name></type></decl></parameter>, <parameter><decl><type><name>s</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>IFILE</name></type> <name>save_ifile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>POSITION</name></type> <name>pos</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>INIT</name></expr>:</case>
<expr_stmt><expr><name>tagoption</name> <operator>=</operator> <call><name>save</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>
<case>case <expr><name>TOGGLE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>secure</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"tags support is not available"</literal></expr></argument>, <argument><expr><name>NULL_PARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>findtag</name><argument_list>(<argument><expr><call><name>skipsp</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>save_ifile</name> <operator>=</operator> <call><name>save_curr_ifile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><call><name>edit_tagfile</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>(</operator><name>pos</name> <operator>=</operator> <call><name>tagsearch</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL_POSITION</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>reedit_ifile</name><argument_list>(<argument><expr><name>save_ifile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>unsave_ifile</name><argument_list>(<argument><expr><name>save_ifile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>jump_loc</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>jump_sline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>




<function><type><name>public</name> <name>void</name></type>
<name>opt__T</name><parameter_list>(<parameter><decl><type><name>type</name></type></decl></parameter>, <parameter><decl><type><name>s</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>PARG</name></type> <name>parg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>INIT</name></expr>:</case>
<expr_stmt><expr><name>tags</name> <operator>=</operator> <call><name>save</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TOGGLE</name></expr>:</case>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>skipsp</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tags</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>tags</name> <operator>!=</operator> <name>ztags</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>filename</name> <operator>=</operator> <call><name>lglob</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tags</name> <operator>=</operator> <call><name>shell_unquote</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>QUERY</name></expr>:</case>
<expr_stmt><expr><name><name>parg</name><operator>.</operator><name>p_string</name></name> <operator>=</operator> <name>tags</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Tags file \"%s\""</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>parg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><name>public</name> <name>void</name></type>
<name>opt_p</name><parameter_list>(<parameter><decl><type><name>type</name></type></decl></parameter>, <parameter><decl><type><name>s</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<block>{<block_content>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>INIT</name></expr>:</case>



<if_stmt><if>if <condition>(<expr><name>less_is_more</name></expr>)</condition>
<block>{<block_content>




<expr_stmt><expr><name>every_first_cmd</name> <operator>=</operator> <call><name>save</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else
<block>{<block_content>
<expr_stmt><expr><name>plusoption</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>




<expr_stmt><expr><call><name>ungetsc</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ungetsc</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ungetcc_back</name><argument_list>(<argument><expr><name>CHAR_END_COMMAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>




<function><type><name>public</name> <name>void</name></type>
<name>opt__P</name><parameter_list>(<parameter><decl><type><name>type</name></type></decl></parameter>, <parameter><decl><type><name>s</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>proto</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PARG</name></type> <name>parg</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>INIT</name></expr>:</case>
<case>case <expr><name>TOGGLE</name></expr>:</case>



<switch>switch <condition>(<expr><operator>*</operator><name>s</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'s'</literal></expr>:</case> <expr_stmt><expr><name>proto</name> <operator>=</operator> <operator>&amp;</operator><name><name>prproto</name><index>[<expr><name>PR_SHORT</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'m'</literal></expr>:</case> <expr_stmt><expr><name>proto</name> <operator>=</operator> <operator>&amp;</operator><name><name>prproto</name><index>[<expr><name>PR_MEDIUM</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'M'</literal></expr>:</case> <expr_stmt><expr><name>proto</name> <operator>=</operator> <operator>&amp;</operator><name><name>prproto</name><index>[<expr><name>PR_LONG</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'='</literal></expr>:</case> <expr_stmt><expr><name>proto</name> <operator>=</operator> <operator>&amp;</operator><name>eqproto</name></expr>;</expr_stmt> <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'h'</literal></expr>:</case> <expr_stmt><expr><name>proto</name> <operator>=</operator> <operator>&amp;</operator><name>hproto</name></expr>;</expr_stmt> <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'w'</literal></expr>:</case> <expr_stmt><expr><name>proto</name> <operator>=</operator> <operator>&amp;</operator><name>wproto</name></expr>;</expr_stmt> <expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><name>proto</name> <operator>=</operator> <operator>&amp;</operator><name><name>prproto</name><index>[<expr><name>PR_SHORT</name></expr>]</index></name></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>proto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>proto</name> <operator>=</operator> <call><name>save</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>QUERY</name></expr>:</case>
<expr_stmt><expr><name><name>parg</name><operator>.</operator><name>p_string</name></name> <operator>=</operator> <name><name>prproto</name><index>[<expr><name>pr_type</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>parg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>





<function><type><name>public</name> <name>void</name></type>
<name>opt_b</name><parameter_list>(<parameter><decl><type><name>type</name></type></decl></parameter>, <parameter><decl><type><name>s</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<block>{<block_content>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>INIT</name></expr>:</case>
<case>case <expr><name>TOGGLE</name></expr>:</case>



<expr_stmt><expr><call><name>ch_setbufspace</name><argument_list>(<argument><expr><name>bufspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>QUERY</name></expr>:</case>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>





<function><type><name>public</name> <name>void</name></type>
<name>opt_i</name><parameter_list>(<parameter><decl><type><name>type</name></type></decl></parameter>, <parameter><decl><type><name>s</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<block>{<block_content>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>TOGGLE</name></expr>:</case>
<expr_stmt><expr><call><name>chg_caseless</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>QUERY</name></expr>:</case>
<case>case <expr><name>INIT</name></expr>:</case>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>





<function><type><name>public</name> <name>void</name></type>
<name>opt__V</name><parameter_list>(<parameter><decl><type><name>type</name></type></decl></parameter>, <parameter><decl><type><name>s</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<block>{<block_content>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>TOGGLE</name></expr>:</case>
<case>case <expr><name>QUERY</name></expr>:</case>
<expr_stmt><expr><call><name>dispversion</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>INIT</name></expr>:</case>
<expr_stmt><expr><call><name>set_output</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putstr</name><argument_list>(<argument><expr><literal type="string">"less "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putstr</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putstr</name><argument_list>(<argument><expr><literal type="string">" ("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putstr</name><argument_list>(<argument><expr><call><name>pattern_lib_name</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putstr</name><argument_list>(<argument><expr><literal type="string">" regular expressions)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <name>constant</name> <modifier>*</modifier></type><name>copyright</name> <init>=
<expr><literal type="string">"Copyright (C) 1984-2021 Mark Nudelman\n\n"</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>putstr</name><argument_list>(<argument><expr><name>copyright</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><name><name>version</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'x'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>putstr</name><argument_list>(<argument><expr><literal type="string">"** This is an EXPERIMENTAL build of the 'less' software,\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putstr</name><argument_list>(<argument><expr><literal type="string">"** and may not function correctly.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putstr</name><argument_list>(<argument><expr><literal type="string">"** Obtain release builds from the web page below.\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>putstr</name><argument_list>(<argument><expr><literal type="string">"less comes with NO WARRANTY, to the extent permitted by law.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putstr</name><argument_list>(<argument><expr><literal type="string">"For information about the terms of redistribution,\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putstr</name><argument_list>(<argument><expr><literal type="string">"see the file named README in the less distribution.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putstr</name><argument_list>(<argument><expr><literal type="string">"Home page: https://greenwoodsoftware.com/less\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>quit</name><argument_list>(<argument><expr><name>QUIT_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name></expr></cpp:if>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>colordesc</name><parameter_list>(<parameter><decl><type><name>s</name></type></decl></parameter>, <parameter><decl><type><name>fg_color</name></type></decl></parameter>, <parameter><decl><type><name>bg_color</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>fg_color</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>bg_color</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fg</name></decl>, <decl><type ref="prev"/><name>bg</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>WIN32C</name></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>ul</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'u'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>ul</name> <operator>=</operator> <name>COMMON_LVB_UNDERSCORE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>fg_color</name> <operator>=</operator> <name>nm_fg_color</name> <operator>|</operator> <name>ul</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>bg_color</name> <operator>=</operator> <name>nm_bg_color</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><call><name>parse_color</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bg</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CT_NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>PARG</name></type> <name>p</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p</name><operator>.</operator><name>p_string</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Invalid color string \"%s\""</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fg</name> <operator>==</operator> <name>CV_NOCHANGE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fg</name> <operator>=</operator> <name>nm_fg_color</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bg</name> <operator>==</operator> <name>CV_NOCHANGE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bg</name> <operator>=</operator> <name>nm_bg_color</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>WIN32C</name></expr></cpp:if>
<expr_stmt><expr><name>fg</name> <operator>|=</operator> <name>ul</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>*</operator><name>fg_color</name> <operator>=</operator> <name>fg</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>bg_color</name> <operator>=</operator> <name>bg</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>color_from_namechar</name><parameter_list>(<parameter><decl><type><name>namechar</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name></type> <name>namechar</name></decl>;</decl_stmt>
<block>{<block_content>
<switch>switch <condition>(<expr><name>namechar</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'W'</literal></expr>:</case> <case>case <expr><literal type="char">'A'</literal></expr>:</case> <return>return <expr><name>AT_COLOR_ATTN</name></expr>;</return>
<case>case <expr><literal type="char">'B'</literal></expr>:</case> <return>return <expr><name>AT_COLOR_BIN</name></expr>;</return>
<case>case <expr><literal type="char">'C'</literal></expr>:</case> <return>return <expr><name>AT_COLOR_CTRL</name></expr>;</return>
<case>case <expr><literal type="char">'E'</literal></expr>:</case> <return>return <expr><name>AT_COLOR_ERROR</name></expr>;</return>
<case>case <expr><literal type="char">'M'</literal></expr>:</case> <return>return <expr><name>AT_COLOR_MARK</name></expr>;</return>
<case>case <expr><literal type="char">'N'</literal></expr>:</case> <return>return <expr><name>AT_COLOR_LINENUM</name></expr>;</return>
<case>case <expr><literal type="char">'P'</literal></expr>:</case> <return>return <expr><name>AT_COLOR_PROMPT</name></expr>;</return>
<case>case <expr><literal type="char">'R'</literal></expr>:</case> <return>return <expr><name>AT_COLOR_RSCROLL</name></expr>;</return>
<case>case <expr><literal type="char">'S'</literal></expr>:</case> <return>return <expr><name>AT_COLOR_SEARCH</name></expr>;</return>
<case>case <expr><literal type="char">'n'</literal></expr>:</case> <return>return <expr><name>AT_NORMAL</name></expr>;</return>
<case>case <expr><literal type="char">'s'</literal></expr>:</case> <return>return <expr><name>AT_STANDOUT</name></expr>;</return>
<case>case <expr><literal type="char">'d'</literal></expr>:</case> <return>return <expr><name>AT_BOLD</name></expr>;</return>
<case>case <expr><literal type="char">'u'</literal></expr>:</case> <return>return <expr><name>AT_UNDERLINE</name></expr>;</return>
<case>case <expr><literal type="char">'k'</literal></expr>:</case> <return>return <expr><name>AT_BLINK</name></expr>;</return>
<default>default:</default> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>





<function><type><name>public</name> <name>void</name></type>
<name>opt_D</name><parameter_list>(<parameter><decl><type><name>type</name></type></decl></parameter>, <parameter><decl><type><name>s</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>PARG</name></type> <name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>attr</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>INIT</name></expr>:</case>
<case>case <expr><name>TOGGLE</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'a'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>sgr_mode</name> <operator>=</operator> <operator>!</operator><name>sgr_mode</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>color_from_namechar</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>.</operator><name>p_char</name></name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Invalid color specifier '%c'"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>use_color</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>attr</name> <operator>&amp;</operator> <name>AT_COLOR</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Set --use-color before changing colors"</literal></expr></argument>, <argument><expr><name>NULL_PARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>attr</name> <operator>&amp;</operator> <name>AT_COLOR</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<switch>switch <condition>(<expr><name>attr</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>AT_NORMAL</name></expr>:</case>
<expr_stmt><expr><call><name>colordesc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nm_fg_color</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nm_bg_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AT_BOLD</name></expr>:</case>
<expr_stmt><expr><call><name>colordesc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bo_fg_color</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bo_bg_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AT_UNDERLINE</name></expr>:</case>
<expr_stmt><expr><call><name>colordesc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ul_fg_color</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ul_bg_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AT_BLINK</name></expr>:</case>
<expr_stmt><expr><call><name>colordesc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bl_fg_color</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bl_bg_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AT_STANDOUT</name></expr>:</case>
<expr_stmt><expr><call><name>colordesc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>so_fg_color</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>so_bg_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>TOGGLE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>at_enter</name><argument_list>(<argument><expr><name>AT_STANDOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>at_exit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
if <condition>(<expr><call><name>set_color_map</name><argument_list>(<argument><expr><name>attr</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>.</operator><name>p_string</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Invalid color string \"%s\""</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name></expr></cpp:if>
<case>case <expr><name>QUERY</name></expr>:</case>
<expr_stmt><expr><name><name>p</name><operator>.</operator><name>p_string</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>sgr_mode</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"on"</literal></expr> </then><else>: <expr><literal type="string">"off"</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"SGR mode is %s"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></switch>
</block_content>}</block></function>




<function><type><name>public</name> <name>void</name></type>
<name>opt_x</name><parameter_list>(<parameter><decl><type><name>type</name></type></decl></parameter>, <parameter><decl><type><name>s</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name><name>tabstops</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>ntabstops</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>tabdefault</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>msg</name><index>[<expr><literal type="number">60</literal><operator>+</operator><operator>(</operator><literal type="number">4</literal><operator>*</operator><name>TABSTOP_MAX</name><operator>)</operator></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PARG</name></type> <name>p</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>INIT</name></expr>:</case>
<case>case <expr><name>TOGGLE</name></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TABSTOP_MAX</name></expr>;</condition> <incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>skipsp</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><literal type="number">10</literal> <operator>*</operator> <name>n</name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>*</operator><name>s</name><operator>++</operator> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name><name>tabstops</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>tabstops</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>skipsp</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name><operator>++</operator> <operator>!=</operator> <literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ntabstops</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tabdefault</name> <operator>=</operator> <name><name>tabstops</name><index>[<expr><name>ntabstops</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>tabstops</name><index>[<expr><name>ntabstops</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>QUERY</name></expr>:</case>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"Tab stops "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ntabstops</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ntabstops</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>msg</name><operator>+</operator><call><name>strlen</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>tabstops</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>msg</name><operator>+</operator><call><name>strlen</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">" and then "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>msg</name><operator>+</operator><call><name>strlen</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"every %d spaces"</literal></expr></argument>,
<argument><expr><name>tabdefault</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>.</operator><name>p_string</name></name> <operator>=</operator> <name>msg</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>





<function><type><name>public</name> <name>void</name></type>
<name>opt_quote</name><parameter_list>(<parameter><decl><type><name>type</name></type></decl></parameter>, <parameter><decl><type><name>s</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PARG</name></type> <name>parg</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>INIT</name></expr>:</case>
<case>case <expr><name>TOGGLE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>openquote</name> <operator>=</operator> <name>closequote</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"-\" must be followed by 1 or 2 chars"</literal></expr></argument>, <argument><expr><name>NULL_PARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>openquote</name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>closequote</name> <operator>=</operator> <name>openquote</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>closequote</name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>QUERY</name></expr>:</case>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>openquote</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>closequote</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parg</name><operator>.</operator><name>p_string</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"quotes %s"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>parg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>





<function><type><name>public</name> <name>void</name></type>
<name>opt_rscroll</name><parameter_list>(<parameter><decl><type><name>type</name></type></decl></parameter>, <parameter><decl><type><name>s</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>PARG</name></type> <name>p</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>INIT</name></expr>:</case>
<case>case <expr><name>TOGGLE</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>attr</name> <init>= <expr><name>AT_STANDOUT</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>setfmt</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><literal type="string">"*s&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>rscroll_char</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else
<block>{<block_content>
<expr_stmt><expr><name>rscroll_char</name> <operator>=</operator> <ternary><condition><expr><operator>*</operator><name>fmt</name></expr> ?</condition><then> <expr><operator>*</operator><name>fmt</name></expr> </then><else>: <expr><literal type="char">'&gt;'</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>rscroll_attr</name> <operator>=</operator> <name>attr</name><operator>|</operator><name>AT_COLOR_RSCROLL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break> </block_content>}</block>
<case>case <expr><name>QUERY</name></expr>:</case> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>.</operator><name>p_string</name></name> <operator>=</operator> <ternary><condition><expr><name>rscroll_char</name></expr> ?</condition><then> <expr><call><name>prchar</name><argument_list>(<argument><expr><name>rscroll_char</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">"-"</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"rscroll char is %s"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break> </block_content>}</block>
</block_content>}</block></switch>
</block_content>}</block></function>






<function><type><name>public</name> <name>void</name></type>
<name>opt_query</name><parameter_list>(<parameter><decl><type><name>type</name></type></decl></parameter>, <parameter><decl><type><name>s</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<block>{<block_content>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>QUERY</name></expr>:</case>
<case>case <expr><name>TOGGLE</name></expr>:</case>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Use \"h\" for help"</literal></expr></argument>, <argument><expr><name>NULL_PARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>INIT</name></expr>:</case>
<expr_stmt><expr><name>dohelp</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></function>





<function><type><name>public</name> <name>void</name></type>
<name>opt_mousecap</name><parameter_list>(<parameter><decl><type><name>type</name></type></decl></parameter>, <parameter><decl><type><name>s</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<block>{<block_content>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>TOGGLE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>mousecap</name> <operator>==</operator> <name>OPT_OFF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>deinit_mouse</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>init_mouse</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>INIT</name></expr>:</case>
<case>case <expr><name>QUERY</name></expr>:</case>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>





<function><type><name>public</name> <name>void</name></type>
<name>opt_wheel_lines</name><parameter_list>(<parameter><decl><type><name>type</name></type></decl></parameter>, <parameter><decl><type><name>s</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<block>{<block_content>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>INIT</name></expr>:</case>
<case>case <expr><name>TOGGLE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>wheel_lines</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>wheel_lines</name> <operator>=</operator> <call><name>default_wheel_lines</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>QUERY</name></expr>:</case>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>





<function><type><name>public</name> <name>void</name></type>
<name>opt_linenum_width</name><parameter_list>(<parameter><decl><type><name>type</name></type></decl></parameter>, <parameter><decl><type><name>s</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>PARG</name></type> <name>parg</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>INIT</name></expr>:</case>
<case>case <expr><name>TOGGLE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>linenum_width</name> <operator>&gt;</operator> <name>MAX_LINENUM_WIDTH</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>parg</name><operator>.</operator><name>p_int</name></name> <operator>=</operator> <name>MAX_LINENUM_WIDTH</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Line number width must not be larger than %d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>parg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>linenum_width</name> <operator>=</operator> <name>MIN_LINENUM_WIDTH</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>QUERY</name></expr>:</case>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>





<function><type><name>public</name> <name>void</name></type>
<name>opt_status_col_width</name><parameter_list>(<parameter><decl><type><name>type</name></type></decl></parameter>, <parameter><decl><type><name>s</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>PARG</name></type> <name>parg</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>INIT</name></expr>:</case>
<case>case <expr><name>TOGGLE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>status_col_width</name> <operator>&gt;</operator> <name>MAX_STATUSCOL_WIDTH</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>parg</name><operator>.</operator><name>p_int</name></name> <operator>=</operator> <name>MAX_STATUSCOL_WIDTH</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Status column width must not be larger than %d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>parg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status_col_width</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>QUERY</name></expr>:</case>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>





<function><type><name>public</name> <name>void</name></type>
<name>opt_filesize</name><parameter_list>(<parameter><decl><type><name>type</name></type></decl></parameter>, <parameter><decl><type><name>s</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<block>{<block_content>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>INIT</name></expr>:</case>
<case>case <expr><name>TOGGLE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>want_filesize</name> <operator>&amp;&amp;</operator> <name>curr_ifile</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>ch_length</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NULL_POSITION</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>scan_eof</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>QUERY</name></expr>:</case>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LESSTEST</name></expr></cpp:if>




<function><type><name>public</name> <name>void</name></type>
<name>opt_ttyin_name</name><parameter_list>(<parameter><decl><type><name>type</name></type></decl></parameter>, <parameter><decl><type><name>s</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<block>{<block_content>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>INIT</name></expr>:</case>
<expr_stmt><expr><name>ttyin_name</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>is_tty</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>





<function><type><name>public</name> <name>void</name></type>
<name>opt_rstat</name><parameter_list>(<parameter><decl><type><name>type</name></type></decl></parameter>, <parameter><decl><type><name>s</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<block>{<block_content>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>INIT</name></expr>:</case>
<expr_stmt><expr><name>rstat_file</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>O_WRONLY</name><operator>|</operator><name>O_CREAT</name></expr></argument>, <argument><expr><literal type="number">0664</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rstat_file</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>PARG</name></type> <name>parg</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>parg</name><operator>.</operator><name>p_string</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Cannot create rstat file \"%s\""</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>parg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><name>public</name> <name>int</name></type>
<name>get_swindow</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>swindow</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>swindow</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>sc_height</name> <operator>+</operator> <name>swindow</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

</unit>
