<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/less/input.c">


















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"less.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>squeeze</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>chopline</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>hshift</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>quit_if_one_screen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>sigs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>ignore_eoi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>status_col</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>POSITION</name></type> <name>start_attnpos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>POSITION</name></type> <name>end_attnpos</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HILITE_SEARCH</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>hilite_search</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>size_linebuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>show_attn</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>








<function><type><name>public</name> <name>POSITION</name></type>
<name>forw_line_seg</name><parameter_list>(<parameter><decl><type><name>curr_pos</name></type></decl></parameter>, <parameter><decl><type><name>get_segpos</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>POSITION</name></type> <name>curr_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>get_segpos</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>POSITION</name></type> <name>base_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>POSITION</name></type> <name>new_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>blankline</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>endline</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>chopped</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>backchars</name></decl>;</decl_stmt>

<label><name>get_forw_line</name>:</label>
<if_stmt><if>if <condition>(<expr><name>curr_pos</name> <operator>==</operator> <name>NULL_POSITION</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>null_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL_POSITION</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HILITE_SEARCH</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>hilite_search</name> <operator>==</operator> <name>OPT_ONPLUS</name> <operator>||</operator> <call><name>is_filtering</name><argument_list>()</argument_list></call> <operator>||</operator> <name>status_col</name></expr>)</condition>
<block>{<block_content>







<expr_stmt><expr><call><name>prep_hilite</name><argument_list>(<argument><expr><name>curr_pos</name></expr></argument>, <argument><expr><name>curr_pos</name> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><name>size_linebuf</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>ignore_eoi</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>curr_pos</name> <operator>=</operator> <call><name>next_unfiltered</name><argument_list>(<argument><expr><name>curr_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><call><name>ch_seek</name><argument_list>(<argument><expr><name>curr_pos</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>null_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL_POSITION</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>base_pos</name> <operator>=</operator> <name>curr_pos</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ABORT_SIGS</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>null_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL_POSITION</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>ch_back_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>EOI</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ch_forw_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>--</operator><name>base_pos</name></expr>;</expr_stmt>
</block_content>}</block></for>




<expr_stmt><expr><call><name>prewind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>plinestart</name><argument_list>(<argument><expr><name>base_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ch_seek</name><argument_list>(<argument><expr><name>base_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>new_pos</name> <operator>=</operator> <name>base_pos</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>new_pos</name> <operator>&lt;</operator> <name>curr_pos</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ABORT_SIGS</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>null_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL_POSITION</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>ch_forw_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>backchars</name> <operator>=</operator> <call><name>pappend</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>new_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>new_pos</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>backchars</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pshift_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>new_pos</name> <operator>-=</operator> <name>backchars</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>--</operator><name>backchars</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ch_back_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pflushmbc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pshift_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>ch_forw_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>EOI</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>null_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL_POSITION</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>blankline</name> <operator>=</operator> <operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\r'</literal><operator>)</operator></expr>;</expr_stmt>




<expr_stmt><expr><name>chopped</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ABORT_SIGS</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>null_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL_POSITION</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <name>EOI</name></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><name>backchars</name> <operator>=</operator> <call><name>pflushmbc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>new_pos</name> <operator>=</operator> <call><name>ch_tell</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>backchars</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>chopline</name> <operator>&amp;&amp;</operator> <name>hshift</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>new_pos</name> <operator>-=</operator> <name>backchars</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>endline</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>endline</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="char">'\r'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>blankline</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>




<expr_stmt><expr><name>backchars</name> <operator>=</operator> <call><name>pappend</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>ch_tell</name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>backchars</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name>chopline</name> <operator>||</operator> <name>hshift</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>get_segpos</name></expr>)</condition>
<block>{<block_content>

<do>do
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ABORT_SIGS</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>null_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL_POSITION</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>ch_forw_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>EOI</name></expr>)</condition>;</do>
<expr_stmt><expr><name>new_pos</name> <operator>=</operator> <call><name>ch_tell</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>endline</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>quit_if_one_screen</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>chopped</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else
<block>{<block_content>
<expr_stmt><expr><name>new_pos</name> <operator>=</operator> <call><name>ch_tell</name><argument_list>()</argument_list></call> <operator>-</operator> <name>backchars</name></expr>;</expr_stmt>
<expr_stmt><expr><name>endline</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>ch_forw_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HILITE_SEARCH</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>blankline</name> <operator>&amp;&amp;</operator> <name>show_attn</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>pappend</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><call><name>ch_tell</name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>pdone</name><argument_list>(<argument><expr><name>endline</name></expr></argument>, <argument><expr><name>chopped</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HILITE_SEARCH</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>is_filtered</name><argument_list>(<argument><expr><name>base_pos</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>




<expr_stmt><expr><name>curr_pos</name> <operator>=</operator> <name>new_pos</name></expr>;</expr_stmt>
<goto>goto <name>get_forw_line</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>status_col</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>attr</name> <init>= <expr><call><name>is_hilited_attr</name><argument_list>(<argument><expr><name>base_pos</name></expr></argument>, <argument><expr><call><name>ch_tell</name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_status_col</name><argument_list>(<argument><expr><literal type="char">'*'</literal></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>squeeze</name> <operator>&amp;&amp;</operator> <name>blankline</name></expr>)</condition>
<block>{<block_content>





<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>ch_forw_get</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>ABORT_SIGS</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>null_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL_POSITION</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <name>EOI</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ch_back_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>new_pos</name> <operator>=</operator> <call><name>ch_tell</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>new_pos</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>public</name> <name>POSITION</name></type>
<name>forw_line</name><parameter_list>(<parameter><decl><type><name>curr_pos</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>POSITION</name></type> <name>curr_pos</name></decl>;</decl_stmt>
<block>{<block_content>
<return>return <expr><call><name>forw_line_seg</name><argument_list>(<argument><expr><name>curr_pos</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>








<function><type><name>public</name> <name>POSITION</name></type>
<name>back_line</name><parameter_list>(<parameter><decl><type><name>curr_pos</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>POSITION</name></type> <name>curr_pos</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>POSITION</name></type> <name>new_pos</name></decl>, <decl><type ref="prev"/><name>begin_new_pos</name></decl>, <decl><type ref="prev"/><name>base_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>endline</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>chopped</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>backchars</name></decl>;</decl_stmt>

<label><name>get_back_line</name>:</label>
<if_stmt><if>if <condition>(<expr><name>curr_pos</name> <operator>==</operator> <name>NULL_POSITION</name> <operator>||</operator> <name>curr_pos</name> <operator>&lt;=</operator> <call><name>ch_zero</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>null_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL_POSITION</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HILITE_SEARCH</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>hilite_search</name> <operator>==</operator> <name>OPT_ONPLUS</name> <operator>||</operator> <call><name>is_filtering</name><argument_list>()</argument_list></call> <operator>||</operator> <name>status_col</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>prep_hilite</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name>curr_pos</name> <operator>&lt;</operator> <literal type="number">3</literal><operator>*</operator><name>size_linebuf</name><operator>)</operator></expr> ?</condition><then>
<expr><literal type="number">0</literal></expr> </then><else>: <expr><name>curr_pos</name> <operator>-</operator> <literal type="number">3</literal><operator>*</operator><name>size_linebuf</name></expr></else></ternary></expr></argument>, <argument><expr><name>curr_pos</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><call><name>ch_seek</name><argument_list>(<argument><expr><name>curr_pos</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>null_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL_POSITION</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>squeeze</name></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ch_forw_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>ch_forw_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ch_back_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ch_back_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition>
<block>{<block_content>





<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>ch_back_get</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>ABORT_SIGS</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>null_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL_POSITION</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>EOI</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>null_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL_POSITION</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ch_forw_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ABORT_SIGS</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>null_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL_POSITION</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>ch_back_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition>
<block>{<block_content>




<expr_stmt><expr><name>base_pos</name> <operator>=</operator> <call><name>ch_tell</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>EOI</name></expr>)</condition>
<block>{<block_content>





<expr_stmt><expr><name>base_pos</name> <operator>=</operator> <call><name>ch_tell</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>










<expr_stmt><expr><name>new_pos</name> <operator>=</operator> <name>base_pos</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ch_seek</name><argument_list>(<argument><expr><name>new_pos</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>null_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL_POSITION</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>endline</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>prewind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>plinestart</name><argument_list>(<argument><expr><name>new_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>loop</name>:</label>
<expr_stmt><expr><name>begin_new_pos</name> <operator>=</operator> <name>new_pos</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ch_seek</name><argument_list>(<argument><expr><name>new_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>chopped</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<do>do
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>ch_forw_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>EOI</name> <operator>||</operator> <call><name>ABORT_SIGS</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>null_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL_POSITION</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>new_pos</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>backchars</name> <operator>=</operator> <call><name>pflushmbc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>backchars</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>chopline</name> <operator>&amp;&amp;</operator> <name>hshift</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>backchars</name><operator>++</operator></expr>;</expr_stmt>
<goto>goto <name>shift</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>endline</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>backchars</name> <operator>=</operator> <call><name>pappend</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>ch_tell</name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>backchars</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>





<if_stmt><if>if <condition>(<expr><name>chopline</name> <operator>||</operator> <name>hshift</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>endline</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>chopped</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>quit_if_one_screen</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<label><name>shift</name>:</label>
<expr_stmt><expr><call><name>pshift_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>backchars</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ch_back_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>new_pos</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<goto>goto <name>loop</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><name>new_pos</name> <operator>&lt;</operator> <name>curr_pos</name></expr>)</condition>;</do>

<expr_stmt><expr><call><name>pdone</name><argument_list>(<argument><expr><name>endline</name></expr></argument>, <argument><expr><name>chopped</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HILITE_SEARCH</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>is_filtered</name><argument_list>(<argument><expr><name>base_pos</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>




<expr_stmt><expr><name>curr_pos</name> <operator>=</operator> <name>begin_new_pos</name></expr>;</expr_stmt>
<goto>goto <name>get_back_line</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>status_col</name> <operator>&amp;&amp;</operator> <name>curr_pos</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>attr</name> <init>= <expr><call><name>is_hilited_attr</name><argument_list>(<argument><expr><name>base_pos</name></expr></argument>, <argument><expr><name>curr_pos</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_status_col</name><argument_list>(<argument><expr><literal type="char">'*'</literal></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><operator>(</operator><name>begin_new_pos</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>public</name> <name>void</name></type>
<name>set_attnpos</name><parameter_list>(<parameter><decl><type><name>pos</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>POSITION</name></type> <name>pos</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>!=</operator> <name>NULL_POSITION</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ch_seek</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>ch_forw_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>EOI</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ch_back_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>end_attnpos</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>ch_back_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>EOI</name> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pos</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>start_attnpos</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
