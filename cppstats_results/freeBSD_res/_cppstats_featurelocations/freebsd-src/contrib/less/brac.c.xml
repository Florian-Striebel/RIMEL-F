<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/less/brac.c">













<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"less.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"position.h"</cpp:file></cpp:include>









<function><type><name>public</name> <name>void</name></type>
<name>match_brac</name><parameter_list>(<parameter><decl><type><name>obrac</name></type></decl></parameter>, <parameter><decl><type><name>cbrac</name></type></decl></parameter>, <parameter><decl><type><name>forwdir</name></type></decl></parameter>, <parameter><decl><type><name>n</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>obrac</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cbrac</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>forwdir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>POSITION</name></type> <name>pos</name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>chget</name>)<parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>ch_forw_get</name><argument_list>()</argument_list></decl>, <decl><type ref="prev"/><name>ch_back_get</name><argument_list>()</argument_list></decl>;</decl_stmt>






<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>position</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name>forwdir</name><operator>)</operator></expr> ?</condition><then> <expr><name>TOP</name></expr> </then><else>: <expr><name>BOTTOM</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <name>NULL_POSITION</name> <operator>||</operator> <call><name>ch_seek</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>forwdir</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Nothing in top line"</literal></expr></argument>, <argument><expr><name>NULL_PARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Nothing in bottom line"</literal></expr></argument>, <argument><expr><name>NULL_PARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>




<do>do
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>ch_forw_get</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <name>EOI</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>forwdir</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"No bracket in top line"</literal></expr></argument>, <argument><expr><name>NULL_PARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"No bracket in bottom line"</literal></expr></argument>, <argument><expr><name>NULL_PARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><name>c</name> <operator>!=</operator> <name>obrac</name> <operator>||</operator> <operator>--</operator><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>







<if_stmt><if>if <condition>(<expr><operator>!</operator><name>forwdir</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ch_back_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>




<expr_stmt><expr><name>chget</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>forwdir</name><operator>)</operator></expr> ?</condition><then> <expr><name>ch_forw_get</name></expr> </then><else>: <expr><name>ch_back_get</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>nest</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call>(<modifier>*</modifier><name>chget</name>)<argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>EOI</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>obrac</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nest</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <name>cbrac</name> <operator>&amp;&amp;</operator> <operator>--</operator><name>nest</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>





<expr_stmt><expr><call><name>jump_line_loc</name><argument_list>(<argument><expr><call><name>ch_tell</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name>forwdir</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"No matching bracket"</literal></expr></argument>, <argument><expr><name>NULL_PARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
