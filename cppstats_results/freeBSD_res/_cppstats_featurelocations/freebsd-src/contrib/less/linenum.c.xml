<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/less/linenum.c">

































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"less.h"</cpp:file></cpp:include>





<struct>struct <name>linenum_info</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>linenum_info</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>linenum_info</name></name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>POSITION</name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>POSITION</name></type> <name>gap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LINENUM</name></type> <name>line</name></decl>;</decl_stmt>
}</block>;</struct>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NPOOL</name></cpp:macro> <cpp:value>200</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LONGTIME</name></cpp:macro> <cpp:value>(2)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>linenum_info</name></name></type> <name>anchor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>linenum_info</name></name> <modifier>*</modifier></type><name>freelist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>linenum_info</name></name></type> <name><name>pool</name><index>[<expr><name>NPOOL</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>linenum_info</name></name> <modifier>*</modifier></type><name>spare</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>linenums</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>sigs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>sc_height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>screen_trashed</name></decl>;</decl_stmt>




<function><type><name>public</name> <name>void</name></type>
<name>clr_linenum</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>linenum_info</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>





<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>pool</name></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <operator>&amp;</operator><name><name>pool</name><index>[<expr><name>NPOOL</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>p</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>pool</name><index>[<expr><name>NPOOL</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>next</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>freelist</name> <operator>=</operator> <name>pool</name></expr>;</expr_stmt>

<expr_stmt><expr><name>spare</name> <operator>=</operator> <operator>&amp;</operator><name><name>pool</name><index>[<expr><name>NPOOL</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>




<expr_stmt><expr><name><name>anchor</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name><name>anchor</name><operator>.</operator><name>prev</name></name> <operator>=</operator> <operator>&amp;</operator><name>anchor</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>anchor</name><operator>.</operator><name>gap</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>anchor</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <operator>(</operator><name>POSITION</name><operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>anchor</name><operator>.</operator><name>line</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>calcgap</name><parameter_list>(<parameter><decl><type><name>p</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name><name>struct</name> <name>linenum_info</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<block>{<block_content>






<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <operator>&amp;</operator><name>anchor</name> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <operator>&amp;</operator><name>anchor</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>gap</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>pos</name></name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>public</name> <name>void</name></type>
<name>add_lnum</name><parameter_list>(<parameter><decl><type><name>linenum</name></type></decl></parameter>, <parameter><decl><type><name>pos</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>LINENUM</name></type> <name>linenum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>POSITION</name></type> <name>pos</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>linenum_info</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>linenum_info</name></name> <modifier>*</modifier></type><name>new</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>linenum_info</name></name> <modifier>*</modifier></type><name>nextp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>linenum_info</name></name> <modifier>*</modifier></type><name>prevp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>POSITION</name></type> <name>mingap</name></decl>;</decl_stmt>





<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>anchor</name><operator>.</operator><name>next</name></name></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <operator>&amp;</operator><name>anchor</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>pos</name></name> <operator>&lt;</operator> <name>pos</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>line</name></name> <operator>==</operator> <name>linenum</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><name>nextp</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prevp</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>freelist</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>




<expr_stmt><expr><name>new</name> <operator>=</operator> <name>freelist</name></expr>;</expr_stmt>
<expr_stmt><expr><name>freelist</name> <operator>=</operator> <name><name>freelist</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else
<block>{<block_content>




<expr_stmt><expr><name>new</name> <operator>=</operator> <name>spare</name></expr>;</expr_stmt>
<expr_stmt><expr><name>spare</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>





<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>nextp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>prevp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>line</name></name> <operator>=</operator> <name>linenum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nextp</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prevp</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>




<expr_stmt><expr><call><name>calcgap</name><argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>calcgap</name><argument_list>(<argument><expr><name>nextp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>calcgap</name><argument_list>(<argument><expr><name>prevp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>spare</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>









<expr_stmt><expr><name>mingap</name> <operator>=</operator> <name><name>anchor</name><operator>.</operator><name>next</name><operator>-&gt;</operator><name>gap</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>anchor</name><operator>.</operator><name>next</name></name></expr>;</init> <condition><expr><name><name>p</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <operator>&amp;</operator><name>anchor</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>gap</name></name> <operator>&lt;=</operator> <name>mingap</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>spare</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mingap</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>gap</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>spare</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>spare</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>spare</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>spare</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>longloopmessage</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ierror</name><argument_list>(<argument><expr><literal type="string">"Calculating line numbers"</literal></expr></argument>, <argument><expr><name>NULL_PARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>loopcount</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_TIME</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>time_type</name></type> <name>startime</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>longish</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_TIME</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>loopcount</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>++</operator><name>loopcount</name> <operator>&gt;</operator> <literal type="number">100</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>loopcount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>get_time</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <name>startime</name> <operator>+</operator> <name>LONGTIME</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>longloopmessage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>loopcount</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><name>loopcount</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>++</operator><name>loopcount</name> <operator>&gt;</operator> <name>LONGLOOP</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>longloopmessage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>loopcount</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>abort_long</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>loopcount</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>linenums</name> <operator>==</operator> <name>OPT_ONPLUS</name></expr>)</condition><block type="pseudo"><block_content>



<expr_stmt><expr><name>screen_trashed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>linenums</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Line numbers turned off"</literal></expr></argument>, <argument><expr><name>NULL_PARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>public</name> <name>LINENUM</name></type>
<name>find_linenum</name><parameter_list>(<parameter><decl><type><name>pos</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>POSITION</name></type> <name>pos</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>linenum_info</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LINENUM</name></type> <name>linenum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>POSITION</name></type> <name>cpos</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>linenums</name></expr>)</condition><block type="pseudo"><block_content>



<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <name>NULL_POSITION</name></expr>)</condition><block type="pseudo"><block_content>



<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;=</operator> <call><name>ch_zero</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>



<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>




<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>anchor</name><operator>.</operator><name>next</name></name></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <operator>&amp;</operator><name>anchor</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>pos</name></name> <operator>&lt;</operator> <name>pos</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>pos</name></name> <operator>==</operator> <name>pos</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>line</name></name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>












<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_TIME</name></expr></cpp:if>
<expr_stmt><expr><name>startime</name> <operator>=</operator> <call><name>get_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>loopcount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <operator>&amp;</operator><name>anchor</name> <operator>||</operator> <name>pos</name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>pos</name></name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>pos</name></name> <operator>-</operator> <name>pos</name></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ch_seek</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>linenum</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>line</name></name></expr><operator>,</operator> <expr><name>cpos</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>pos</name></name></expr>;</init> <condition><expr><name>cpos</name> <operator>&lt;</operator> <name>pos</name></expr>;</condition> <incr><expr><name>linenum</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>



<expr_stmt><expr><name>cpos</name> <operator>=</operator> <call><name>forw_raw_line</name><argument_list>(<argument><expr><name>cpos</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ABORT_SIGS</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort_long</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cpos</name> <operator>==</operator> <name>NULL_POSITION</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>longish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>



<expr_stmt><expr><call><name>add_lnum</name><argument_list>(<argument><expr><name>linenum</name></expr></argument>, <argument><expr><name>cpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>cpos</name> <operator>&gt;</operator> <name>pos</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>linenum</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><call><name>ch_seek</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>linenum</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>line</name></name></expr><operator>,</operator> <expr><name>cpos</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>pos</name></name></expr>;</init> <condition><expr><name>cpos</name> <operator>&gt;</operator> <name>pos</name></expr>;</condition> <incr><expr><name>linenum</name><operator>--</operator></expr></incr>)</control>
<block>{<block_content>



<expr_stmt><expr><name>cpos</name> <operator>=</operator> <call><name>back_raw_line</name><argument_list>(<argument><expr><name>cpos</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ABORT_SIGS</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>abort_long</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cpos</name> <operator>==</operator> <name>NULL_POSITION</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>longish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>



<expr_stmt><expr><call><name>add_lnum</name><argument_list>(<argument><expr><name>linenum</name></expr></argument>, <argument><expr><name>cpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>loopcount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>linenum</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>public</name> <name>POSITION</name></type>
<name>find_pos</name><parameter_list>(<parameter><decl><type><name>linenum</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>LINENUM</name></type> <name>linenum</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>linenum_info</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>POSITION</name></type> <name>cpos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LINENUM</name></type> <name>clinenum</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>linenum</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>



<return>return <expr><operator>(</operator><call><name>ch_zero</name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>




<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>anchor</name><operator>.</operator><name>next</name></name></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <operator>&amp;</operator><name>anchor</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>line</name></name> <operator>&lt;</operator> <name>linenum</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>line</name></name> <operator>==</operator> <name>linenum</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>pos</name></name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <operator>&amp;</operator><name>anchor</name> <operator>||</operator> <name>linenum</name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>line</name></name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>line</name></name> <operator>-</operator> <name>linenum</name></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ch_seek</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL_POSITION</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>clinenum</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>line</name></name></expr><operator>,</operator> <expr><name>cpos</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>pos</name></name></expr>;</init> <condition><expr><name>clinenum</name> <operator>&lt;</operator> <name>linenum</name></expr>;</condition> <incr><expr><name>clinenum</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>



<expr_stmt><expr><name>cpos</name> <operator>=</operator> <call><name>forw_raw_line</name><argument_list>(<argument><expr><name>cpos</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ABORT_SIGS</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL_POSITION</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cpos</name> <operator>==</operator> <name>NULL_POSITION</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL_POSITION</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><call><name>ch_seek</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL_POSITION</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>clinenum</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>line</name></name></expr><operator>,</operator> <expr><name>cpos</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>pos</name></name></expr>;</init> <condition><expr><name>clinenum</name> <operator>&gt;</operator> <name>linenum</name></expr>;</condition> <incr><expr><name>clinenum</name><operator>--</operator></expr></incr>)</control>
<block>{<block_content>



<expr_stmt><expr><name>cpos</name> <operator>=</operator> <call><name>back_raw_line</name><argument_list>(<argument><expr><name>cpos</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ABORT_SIGS</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL_POSITION</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cpos</name> <operator>==</operator> <name>NULL_POSITION</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL_POSITION</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>



<expr_stmt><expr><call><name>add_lnum</name><argument_list>(<argument><expr><name>clinenum</name></expr></argument>, <argument><expr><name>cpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>cpos</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><name>public</name> <name>LINENUM</name></type>
<name>currline</name><parameter_list>(<parameter><decl><type><name>where</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>where</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>POSITION</name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>POSITION</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LINENUM</name></type> <name>linenum</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>position</name><argument_list>(<argument><expr><name>where</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>ch_length</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>pos</name> <operator>==</operator> <name>NULL_POSITION</name> <operator>&amp;&amp;</operator> <name>where</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>where</name> <operator>&lt;</operator> <name>sc_height</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>position</name><argument_list>(<argument><expr><operator>++</operator><name>where</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <name>NULL_POSITION</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>linenum</name> <operator>=</operator> <call><name>find_linenum</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>linenum</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>linenum</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>public</name> <name>void</name></type>
<name>scan_eof</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>POSITION</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LINENUM</name></type> <name>linenum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ch_seek</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ierror</name><argument_list>(<argument><expr><literal type="string">"Determining length of file"</literal></expr></argument>, <argument><expr><name>NULL_PARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>pos</name> <operator>!=</operator> <name>NULL_POSITION</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>linenum</name><operator>++</operator> <operator>%</operator> <literal type="number">256</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>add_lnum</name><argument_list>(<argument><expr><name>linenum</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>forw_raw_line</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ABORT_SIGS</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>
</unit>
