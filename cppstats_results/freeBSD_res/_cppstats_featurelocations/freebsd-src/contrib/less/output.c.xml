<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/less/output.c">













<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"less.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>WIN32C</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"windows.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>COMMON_LVB_UNDERSCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMMON_LVB_UNDERSCORE</name></cpp:macro> <cpp:value>0x8000</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>errmsgs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>need_clr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>final_attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>at_prompt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>sigs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>sc_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>so_s_width</name></decl>, <decl><type ref="prev"/><name>so_e_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>screen_trashed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>is_tty</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>oldbot</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>WIN32C</name> <operator>||</operator> <name>MSDOS_COMPILER</name><operator>==</operator><name>BORLANDC</name> <operator>||</operator> <name>MSDOS_COMPILER</name><operator>==</operator><name>DJGPPC</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>ctldisp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>nm_fg_color</name></decl>, <decl><type ref="prev"/><name>nm_bg_color</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>bo_fg_color</name></decl>, <decl><type ref="prev"/><name>bo_bg_color</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>ul_fg_color</name></decl>, <decl><type ref="prev"/><name>ul_bg_color</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>so_fg_color</name></decl>, <decl><type ref="prev"/><name>so_bg_color</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>bl_fg_color</name></decl>, <decl><type ref="prev"/><name>bl_bg_color</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>sgr_mode</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>WIN32C</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>vt_enabled</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><name>public</name> <name>void</name></type>
<name>put_line</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ABORT_SIGS</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><name>screen_trashed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>final_attr</name> <operator>=</operator> <name>AT_NORMAL</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>gline</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>at_switch</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>final_attr</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\b'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putbs</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putchr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>at_exit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>obuf</name><index>[<expr><name>OUTBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>ob</name> <init>= <expr><name>obuf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>outfd</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>WIN32C</name> <operator>||</operator> <name>MSDOS_COMPILER</name><operator>==</operator><name>BORLANDC</name> <operator>||</operator> <name>MSDOS_COMPILER</name><operator>==</operator><name>DJGPPC</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>win_flush</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ctldisp</name> <operator>!=</operator> <name>OPT_ONPLUS</name> <operator>||</operator> <operator>(</operator><name>vt_enabled</name> <operator>&amp;&amp;</operator> <name>sgr_mode</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>WIN32textout</name><argument_list>(<argument><expr><name>obuf</name></expr></argument>, <argument><expr><name>ob</name> <operator>-</operator> <name>obuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>






<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>anchor</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>fg</name></decl>, <decl><type ref="prev"/><name>fgi</name></decl>, <decl><type ref="prev"/><name>bg</name></decl>, <decl><type ref="prev"/><name>bgi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>at</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>f</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>WIN32C</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name><name>screen_color</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>,
<expr><name>FOREGROUND_RED</name></expr>,
<expr><name>FOREGROUND_GREEN</name></expr>,
<expr><name>FOREGROUND_RED</name><operator>|</operator><name>FOREGROUND_GREEN</name></expr>,
<expr><name>FOREGROUND_BLUE</name></expr>,
<expr><name>FOREGROUND_BLUE</name><operator>|</operator><name>FOREGROUND_RED</name></expr>,
<expr><name>FOREGROUND_BLUE</name><operator>|</operator><name>FOREGROUND_GREEN</name></expr>,
<expr><name>FOREGROUND_BLUE</name><operator>|</operator><name>FOREGROUND_GREEN</name><operator>|</operator><name>FOREGROUND_RED</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>enum</name> <name>COLORS</name></name></type> <name><name>screen_color</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>BLACK</name></expr>, <expr><name>RED</name></expr>, <expr><name>GREEN</name></expr>, <expr><name>BROWN</name></expr>,
<expr><name>BLUE</name></expr>, <expr><name>MAGENTA</name></expr>, <expr><name>CYAN</name></expr>, <expr><name>LIGHTGRAY</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>fg</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>bg</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>fg</name> <operator>=</operator> <name>nm_fg_color</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fgi</name> <operator>=</operator> <name>nm_fg_color</name> <operator>&amp;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bg</name> <operator>=</operator> <name>nm_bg_color</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bgi</name> <operator>=</operator> <name>nm_bg_color</name> <operator>&amp;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>anchor</name> <operator>=</operator> <name>p_next</name> <operator>=</operator> <name>obuf</name></expr>;</init>
<condition><expr><operator>(</operator><name>p_next</name> <operator>=</operator> <call><name>memchr</name><argument_list>(<argument><expr><name>p_next</name></expr></argument>, <argument><expr><name>ESC</name></expr></argument>, <argument><expr><name>ob</name> <operator>-</operator> <name>p_next</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>p_next</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;</operator> <name>anchor</name></expr>)</condition>
<block>{<block_content>





<expr_stmt><expr><call><name>WIN32textout</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>, <argument><expr><name>p</name><operator>-</operator><name>anchor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>anchor</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>is_ansi_end</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>





<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>anchor</name> <operator>=</operator> <name>p_next</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fg</name> <operator>=</operator> <name>nm_fg_color</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fgi</name> <operator>=</operator> <name>nm_fg_color</name> <operator>&amp;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bg</name> <operator>=</operator> <name>nm_bg_color</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bgi</name> <operator>=</operator> <name>nm_bg_color</name> <operator>&amp;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>at</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WIN32setcolors</name><argument_list>(<argument><expr><name>nm_fg_color</name></expr></argument>, <argument><expr><name>nm_bg_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p_next</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>at</name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">32</literal></expr>;</expr_stmt>





<while>while <condition>(<expr><operator>!</operator><call><name>is_ansi_end</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>code</name> <init>= <expr><call><name>strtol</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>q</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition>
<block>{<block_content>





<decl_stmt><decl><type><name>int</name></type> <name>slop</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>q</name> <operator>-</operator> <name>anchor</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>obuf</name></expr></argument>, <argument><expr><name>anchor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ob</name> <operator>=</operator> <operator>&amp;</operator><name><name>obuf</name><index>[<expr><name>slop</name></expr>]</index></name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>q</name> <operator>==</operator> <name>p</name> <operator>||</operator>
<name>code</name> <operator>&gt;</operator> <literal type="number">49</literal> <operator>||</operator> <name>code</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<operator>(</operator><operator>!</operator><call><name>is_ansi_end</name><argument_list>(<argument><expr><operator>*</operator><name>q</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><name>q</name> <operator>!=</operator> <literal type="char">';'</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>p_next</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>q</name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>q</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>at</name> <operator>|=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>code</name></expr>)</condition>
<block>{<block_content>
<default>default:</default>

<expr_stmt><expr><name>fg</name> <operator>=</operator> <name>nm_fg_color</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bg</name> <operator>=</operator> <name>nm_bg_color</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>at</name> <operator>&amp;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name>at</name> <operator>&amp;</operator> <literal type="number">32</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>fgi</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bgi</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else
<block>{<block_content>
<expr_stmt><expr><name>fgi</name> <operator>=</operator> <name>nm_fg_color</name> <operator>&amp;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bgi</name> <operator>=</operator> <name>nm_bg_color</name> <operator>&amp;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>fgi</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>at</name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<case>case <expr><literal type="number">7</literal></expr>:</case>
<expr_stmt><expr><name>at</name> <operator>|=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<expr_stmt><expr><name>bgi</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>at</name> <operator>|=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">5</literal></expr>:</case>
<case>case <expr><literal type="number">6</literal></expr>:</case>
<expr_stmt><expr><name>bgi</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>at</name> <operator>|=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">8</literal></expr>:</case>
<expr_stmt><expr><name>at</name> <operator>|=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">22</literal></expr>:</case>
<expr_stmt><expr><name>fgi</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>at</name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">23</literal></expr>:</case>
<case>case <expr><literal type="number">27</literal></expr>:</case>
<expr_stmt><expr><name>at</name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">24</literal></expr>:</case>
<expr_stmt><expr><name>bgi</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>at</name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">4</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">28</literal></expr>:</case>
<expr_stmt><expr><name>at</name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">16</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">30</literal></expr>:</case> <case>case <expr><literal type="number">31</literal></expr>:</case> <case>case <expr><literal type="number">32</literal></expr>:</case>
<case>case <expr><literal type="number">33</literal></expr>:</case> <case>case <expr><literal type="number">34</literal></expr>:</case> <case>case <expr><literal type="number">35</literal></expr>:</case>
<case>case <expr><literal type="number">36</literal></expr>:</case> <case>case <expr><literal type="number">37</literal></expr>:</case>
<expr_stmt><expr><name>fg</name> <operator>=</operator> <name><name>screen_color</name><index>[<expr><name>code</name> <operator>-</operator> <literal type="number">30</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>at</name> <operator>|=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">39</literal></expr>:</case>
<expr_stmt><expr><name>fg</name> <operator>=</operator> <name>nm_fg_color</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>at</name> <operator>|=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">40</literal></expr>:</case> <case>case <expr><literal type="number">41</literal></expr>:</case> <case>case <expr><literal type="number">42</literal></expr>:</case>
<case>case <expr><literal type="number">43</literal></expr>:</case> <case>case <expr><literal type="number">44</literal></expr>:</case> <case>case <expr><literal type="number">45</literal></expr>:</case>
<case>case <expr><literal type="number">46</literal></expr>:</case> <case>case <expr><literal type="number">47</literal></expr>:</case>
<expr_stmt><expr><name>bg</name> <operator>=</operator> <name><name>screen_color</name><index>[<expr><name>code</name> <operator>-</operator> <literal type="number">40</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>at</name> <operator>|=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">49</literal></expr>:</case>
<expr_stmt><expr><name>bg</name> <operator>=</operator> <name>nm_bg_color</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>at</name> <operator>|=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_ansi_end</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>p</name> <operator>==</operator> <name>p_next</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><name>sgr_mode</name> <operator>||</operator> <operator>(</operator><name>at</name> <operator>&amp;</operator> <literal type="number">32</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>at</name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>f</name> <operator>=</operator> <name>bg</name> <operator>|</operator> <name>bgi</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>fg</name> <operator>|</operator> <name>fgi</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else
<block>{<block_content>
<expr_stmt><expr><name>f</name> <operator>=</operator> <name>fg</name> <operator>|</operator> <name>fgi</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>bg</name> <operator>|</operator> <name>bgi</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>at</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>f</name> <operator>=</operator> <name>bo_fg_color</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>bo_bg_color</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>at</name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>f</name> <operator>=</operator> <name>so_fg_color</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>so_bg_color</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>at</name> <operator>&amp;</operator> <literal type="number">4</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>f</name> <operator>=</operator> <name>ul_fg_color</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>ul_bg_color</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>at</name> <operator>&amp;</operator> <literal type="number">8</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>f</name> <operator>=</operator> <name>bl_fg_color</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>bl_bg_color</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else
<block>{<block_content>
<expr_stmt><expr><name>f</name> <operator>=</operator> <name>nm_fg_color</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>nm_bg_color</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>at</name> <operator>&amp;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>f</name> <operator>=</operator> <name>b</name> <operator>^</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>WIN32C</name></expr></cpp:if>
<expr_stmt><expr><name>f</name> <operator>&amp;=</operator> <literal type="number">0xf</literal> <operator>|</operator> <name>COMMON_LVB_UNDERSCORE</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>f</name> <operator>&amp;=</operator> <literal type="number">0xf</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>b</name> <operator>&amp;=</operator> <literal type="number">0xf</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WIN32setcolors</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p_next</name> <operator>=</operator> <name>anchor</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>p_next</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>WIN32textout</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>, <argument><expr><name>ob</name> <operator>-</operator> <name>anchor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>ob</name> <operator>=</operator> <name>obuf</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

















<function><type><name>public</name> <name>void</name></type>
<name>flush</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>ob</name> <operator>-</operator> <name>obuf</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ob</name> <operator>=</operator> <name>obuf</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>MSOFTC</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>interactive</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>obuf</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_outtext</name><argument_list>(<argument><expr><name>obuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>WIN32C</name> <operator>||</operator> <name>MSDOS_COMPILER</name><operator>==</operator><name>BORLANDC</name> <operator>||</operator> <name>MSDOS_COMPILER</name><operator>==</operator><name>DJGPPC</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>interactive</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>ob</name> <operator>=</operator> <name>obuf</name> <operator>+</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ob</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>win_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name>outfd</name></expr></argument>, <argument><expr><name>obuf</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>screen_trashed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>public</name> <name>void</name></type>
<name>set_output</name><parameter_list>(<parameter><decl><type><name>fd</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<block>{<block_content>
<expr_stmt><expr><call><name>flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>outfd</name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>public</name> <name>int</name></type>
<name>putchr</name><parameter_list>(<parameter><decl><type><name>c</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
extern int utf_mode;
if (utf_mode)
{
static char ubuf[MAX_UTF_CHAR_LEN];
static int ubuf_len = 0;
static int ubuf_index = 0;
if (ubuf_len == 0)
{
ubuf_len = utf_len(c);
ubuf_index = 0;
}
ubuf[ubuf_index++] = c;
if (ubuf_index &lt; ubuf_len)
return c;
c = get_wchar(ubuf) &amp; 0xFF;
ubuf_len = 0;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>clear_bot_if_needed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <name>is_tty</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>putchr</name><argument_list>(<argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_OSK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <name>is_tty</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putchr</name><argument_list>(<argument><expr><literal type="number">0x0A</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<if_stmt><if>if <condition>(<expr><name>ob</name> <operator>&gt;=</operator> <operator>&amp;</operator><name><name>obuf</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>obuf</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>ob</name><operator>++</operator> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>at_prompt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>c</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>public</name> <name>void</name></type>
<name>clear_bot_if_needed</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>need_clr</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>need_clr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_bot</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>public</name> <name>void</name></type>
<name>putstr</name><parameter_list>(<parameter><decl><type><name>s</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>constant</name> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putchr</name><argument_list>(<argument><expr><operator>*</operator><name>s</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE_TO_A_FUNC</name><parameter_list>(<parameter><type><name>funcname</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>void funcname(num, buf) type num; char *buf; { int neg = (num &lt; 0); char tbuf[INT_STRLEN_BOUND(num)+2]; char *s = tbuf + sizeof(tbuf); if (neg) num = -num; *--s = '\0'; do { *--s = (num % 10) + '0'; } while ((num /= 10) != 0); if (neg) *--s = '-'; strcpy(buf, s); }</cpp:value></cpp:define>
















<macro><name>TYPE_TO_A_FUNC</name><argument_list>(<argument>postoa</argument>, <argument>POSITION</argument>)</argument_list></macro>
<macro><name>TYPE_TO_A_FUNC</name><argument_list>(<argument>linenumtoa</argument>, <argument>LINENUM</argument>)</argument_list></macro>
<macro><name>TYPE_TO_A_FUNC</name><argument_list>(<argument>inttoa</argument>, <argument>int</argument>)</argument_list></macro>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STR_TO_TYPE_FUNC</name><parameter_list>(<parameter><type><name>funcname</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>type funcname(buf, ebuf) char *buf; char **ebuf; { type val = 0; for (;; buf++) { char c = *buf; if (c &lt; '0' || c &gt; '9') break; val = 10 * val + c - '0'; } if (ebuf != NULL) *ebuf = buf; return val; }</cpp:value></cpp:define>














<macro><name>STR_TO_TYPE_FUNC</name><argument_list>(<argument>lstrtopos</argument>, <argument>POSITION</argument>)</argument_list></macro>
<macro><name>STR_TO_TYPE_FUNC</name><argument_list>(<argument>lstrtoi</argument>, <argument>int</argument>)</argument_list></macro>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>iprint_int</name><parameter_list>(<parameter><decl><type><name>num</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><call><name>INT_STRLEN_BOUND</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>inttoa</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putstr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>iprint_linenum</name><parameter_list>(<parameter><decl><type><name>num</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>LINENUM</name></type> <name>num</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><call><name>INT_STRLEN_BOUND</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>linenumtoa</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putstr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>








<function><type><name>public</name> <name>int</name></type>
<name>less_printf</name><parameter_list>(<parameter><decl><type><name>fmt</name></type></decl></parameter>, <parameter><decl><type><name>parg</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PARG</name> <modifier>*</modifier></type><name>parg</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>col</name></decl>;</decl_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>fmt</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>fmt</name> <operator>!=</operator> <literal type="char">'%'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>putchr</name><argument_list>(<argument><expr><operator>*</operator><name>fmt</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>fmt</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><operator>*</operator><name>fmt</name><operator>++</operator></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'s'</literal></expr>:</case>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>parg</name><operator>-&gt;</operator><name>p_string</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>parg</name><operator>++</operator></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>putchr</name><argument_list>(<argument><expr><operator>*</operator><name>s</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<break>break;</break>
<case>case <expr><literal type="char">'d'</literal></expr>:</case>
<expr_stmt><expr><name>col</name> <operator>+=</operator> <call><name>iprint_int</name><argument_list>(<argument><expr><name><name>parg</name><operator>-&gt;</operator><name>p_int</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>parg</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'n'</literal></expr>:</case>
<expr_stmt><expr><name>col</name> <operator>+=</operator> <call><name>iprint_linenum</name><argument_list>(<argument><expr><name><name>parg</name><operator>-&gt;</operator><name>p_linenum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>parg</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'c'</literal></expr>:</case>
<expr_stmt><expr><call><name>putchr</name><argument_list>(<argument><expr><name><name>parg</name><operator>-&gt;</operator><name>p_char</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'%'</literal></expr>:</case>
<expr_stmt><expr><call><name>putchr</name><argument_list>(<argument><expr><literal type="char">'%'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><name>col</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><name>public</name> <name>void</name></type>
<name>get_return</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ONLY_RETURN</name></expr></cpp:if>
<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>getchr</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">'\r'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bell</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getchr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">'\r'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <name>READ_INTR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ungetcc</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>





<function><type><name>public</name> <name>void</name></type>
<name>error</name><parameter_list>(<parameter><decl><type><name>fmt</name></type></decl></parameter>, <parameter><decl><type><name>parg</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PARG</name> <modifier>*</modifier></type><name>parg</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>return_to_continue</name><index>[]</index></name> <init>= <expr><literal type="string">" (press RETURN)"</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>errmsgs</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>interactive</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>less_printf</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>parg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putchr</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>oldbot</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>squish_check</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>at_exit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_bot</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>at_enter</name><argument_list>(<argument><expr><name>AT_STANDOUT</name><operator>|</operator><name>AT_COLOR_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name> <operator>+=</operator> <name>so_s_width</name></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name> <operator>+=</operator> <call><name>less_printf</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>parg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putstr</name><argument_list>(<argument><expr><name>return_to_continue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>at_exit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>return_to_continue</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>so_e_width</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_return</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lower_left</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_eol</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&gt;=</operator> <name>sc_width</name></expr>)</condition><block type="pseudo"><block_content>





<expr_stmt><expr><name>screen_trashed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>intr_to_abort</name><index>[]</index></name> <init>= <expr><literal type="string">"... (interrupt to abort)"</literal></expr></init></decl>;</decl_stmt>







<function><type><name>public</name> <name>void</name></type>
<name>ierror</name><parameter_list>(<parameter><decl><type><name>fmt</name></type></decl></parameter>, <parameter><decl><type><name>parg</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PARG</name> <modifier>*</modifier></type><name>parg</name></decl>;</decl_stmt>
<block>{<block_content>
<expr_stmt><expr><call><name>at_exit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_bot</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>at_enter</name><argument_list>(<argument><expr><name>AT_STANDOUT</name><operator>|</operator><name>AT_COLOR_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>less_printf</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>parg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putstr</name><argument_list>(<argument><expr><name>intr_to_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>at_exit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>need_clr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>public</name> <name>int</name></type>
<name>query</name><parameter_list>(<parameter><decl><type><name>fmt</name></type></decl></parameter>, <parameter><decl><type><name>parg</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PARG</name> <modifier>*</modifier></type><name>parg</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>interactive</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clear_bot</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>less_printf</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>parg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getchr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>interactive</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>lower_left</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&gt;=</operator> <name>sc_width</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>screen_trashed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else
<block>{<block_content>
<expr_stmt><expr><call><name>putchr</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'Q'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>quit</name><argument_list>(<argument><expr><name>QUIT_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>c</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
