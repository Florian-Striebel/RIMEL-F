<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/less/edit.c">









<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"less.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"position.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_STAT</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OS2</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>fd0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>new_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>cbufs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>every_first_cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>force_open</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>is_tty</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>sigs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>hshift</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>want_filesize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>IFILE</name></type> <name>curr_ifile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>IFILE</name></type> <name>old_ifile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>scrpos</name></name></type> <name>initial_scrpos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <modifier>*</modifier></type><name>ml_examine</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SPACES_IN_FILENAMES</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name></type> <name>openquote</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name></type> <name>closequote</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LOGFILE</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>logfile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>force_logfile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>namelogfile</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_STAT_INO</name></expr></cpp:if>
<decl_stmt><decl><type><name>public</name> <name>dev_t</name></type> <name>curr_dev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>ino_t</name></type> <name>curr_ino</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>








<function><type><name>public</name> <name>void</name></type>
<name>init_textlist</name><parameter_list>(<parameter><decl><type><name>tlist</name></type></decl></parameter>, <parameter><decl><type><name>str</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name><name>struct</name> <name>textlist</name></name> <modifier>*</modifier></type><name>tlist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SPACES_IN_FILENAMES</name></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>meta_quoted</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>delim_quoted</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>esc</name> <init>= <expr><call><name>get_meta_escape</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>esclen</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>esc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>tlist</name><operator>-&gt;</operator><name>string</name></name> <operator>=</operator> <call><name>skipsp</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tlist</name><operator>-&gt;</operator><name>endstring</name></name> <operator>=</operator> <name><name>tlist</name><operator>-&gt;</operator><name>string</name></name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>tlist</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <name>str</name></expr>;</init> <condition><expr><name>s</name> <operator>&lt;</operator> <name><name>tlist</name><operator>-&gt;</operator><name>endstring</name></name></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SPACES_IN_FILENAMES</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>meta_quoted</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>meta_quoted</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>esclen</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>s</name> <operator>+</operator> <name>esclen</name> <operator>&lt;</operator> <name><name>tlist</name><operator>-&gt;</operator><name>endstring</name></name> <operator>&amp;&amp;</operator>
<call><name>strncmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>esc</name></expr></argument>, <argument><expr><name>esclen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>meta_quoted</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>esclen</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>delim_quoted</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <name>closequote</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>delim_quoted</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <name>openquote</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>delim_quoted</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>public</name> <name>char</name> <modifier>*</modifier></type>
<name>forw_textlist</name><parameter_list>(<parameter><decl><type><name>tlist</name></type></decl></parameter>, <parameter><decl><type><name>prev</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name><name>struct</name> <name>textlist</name></name> <modifier>*</modifier></type><name>tlist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><name>prev</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>tlist</name><operator>-&gt;</operator><name>string</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>prev</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&gt;=</operator> <name><name>tlist</name><operator>-&gt;</operator><name>endstring</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&gt;=</operator> <name><name>tlist</name><operator>-&gt;</operator><name>endstring</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>s</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>public</name> <name>char</name> <modifier>*</modifier></type>
<name>back_textlist</name><parameter_list>(<parameter><decl><type><name>tlist</name></type></decl></parameter>, <parameter><decl><type><name>prev</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name><name>struct</name> <name>textlist</name></name> <modifier>*</modifier></type><name>tlist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><name>prev</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>tlist</name><operator>-&gt;</operator><name>endstring</name></name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>prev</name> <operator>&lt;=</operator> <name><name>tlist</name><operator>-&gt;</operator><name>string</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>prev</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&lt;=</operator> <name><name>tlist</name><operator>-&gt;</operator><name>string</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<while>while <condition>(<expr><name><name>s</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <name>s</name> <operator>&gt;</operator> <name><name>tlist</name><operator>-&gt;</operator><name>string</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><operator>(</operator><name>s</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>close_pipe</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>pipefd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pipefd</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OS2</name></expr></cpp:if>




<expr_stmt><expr><call><name>kill</name><argument_list>(<argument><expr><name><name>pipefd</name><operator>-&gt;</operator><name>_pid</name></name></expr></argument>, <argument><expr><name>SIGINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>pclose</name><argument_list>(<argument><expr><name>pipefd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>close_file</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>scrpos</name></name></type> <name>scrpos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>chflags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>altpipe</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>altfilename</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>curr_ifile</name> <operator>==</operator> <name>NULL_IFILE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>





<expr_stmt><expr><call><name>get_scrpos</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scrpos</name></expr></argument>, <argument><expr><name>TOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>scrpos</name><operator>.</operator><name>pos</name></name> <operator>!=</operator> <name>NULL_POSITION</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>store_pos</name><argument_list>(<argument><expr><name>curr_ifile</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scrpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lastmark</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>chflags</name> <operator>=</operator> <call><name>ch_getflags</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ch_close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>altfilename</name> <operator>=</operator> <call><name>get_altfilename</name><argument_list>(<argument><expr><name>curr_ifile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>altfilename</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>altpipe</name> <operator>=</operator> <call><name>get_altpipe</name><argument_list>(<argument><expr><name>curr_ifile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>altpipe</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>chflags</name> <operator>&amp;</operator> <name>CH_KEEPOPEN</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>close_pipe</name><argument_list>(<argument><expr><name>altpipe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_altpipe</name><argument_list>(<argument><expr><name>curr_ifile</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>close_altfile</name><argument_list>(<argument><expr><name>altfilename</name></expr></argument>, <argument><expr><call><name>get_filename</name><argument_list>(<argument><expr><name>curr_ifile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_altfilename</name><argument_list>(<argument><expr><name>curr_ifile</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>curr_ifile</name> <operator>=</operator> <name>NULL_IFILE</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_STAT_INO</name></expr></cpp:if>
<expr_stmt><expr><name>curr_ino</name> <operator>=</operator> <name>curr_dev</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>






<function><type><name>public</name> <name>int</name></type>
<name>edit</name><parameter_list>(<parameter><decl><type><name>filename</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl>;</decl_stmt>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>filename</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>edit_ifile</name><argument_list>(<argument><expr><name>NULL_IFILE</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>edit_ifile</name><argument_list>(<argument><expr><call><name>get_ifile</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>curr_ifile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>public</name> <name>int</name></type>
<name>edit_ifile</name><parameter_list>(<parameter><decl><type><name>ifile</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>IFILE</name></type> <name>ifile</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>answer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>chflags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>open_filename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>alt_filename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>altpipe</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IFILE</name></type> <name>was_curr_ifile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PARG</name></type> <name>parg</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ifile</name> <operator>==</operator> <name>curr_ifile</name></expr>)</condition>
<block>{<block_content>



<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LOGFILE</name></expr></cpp:if>
<expr_stmt><expr><call><name>end_logfile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>was_curr_ifile</name> <operator>=</operator> <call><name>save_curr_ifile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>curr_ifile</name> <operator>!=</operator> <name>NULL_IFILE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>chflags</name> <operator>=</operator> <call><name>ch_getflags</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close_file</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>chflags</name> <operator>&amp;</operator> <name>CH_HELPFILE</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>held_ifile</name><argument_list>(<argument><expr><name>was_curr_ifile</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><call><name>del_ifile</name><argument_list>(<argument><expr><name>was_curr_ifile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>was_curr_ifile</name> <operator>=</operator> <name>old_ifile</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ifile</name> <operator>==</operator> <name>NULL_IFILE</name></expr>)</condition>
<block>{<block_content>






<expr_stmt><expr><call><name>unsave_ifile</name><argument_list>(<argument><expr><name>was_curr_ifile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>filename</name> <operator>=</operator> <call><name>save</name><argument_list>(<argument><expr><call><name>get_filename</name><argument_list>(<argument><expr><name>ifile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>altpipe</name> <operator>=</operator> <call><name>get_altpipe</name><argument_list>(<argument><expr><name>ifile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>altpipe</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>






<expr_stmt><expr><name>chflags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>alt_filename</name> <operator>=</operator> <call><name>get_altfilename</name><argument_list>(<argument><expr><name>ifile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>open_filename</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>alt_filename</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>alt_filename</name></expr> </then><else>: <expr><name>filename</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if> <else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>FAKE_HELPFILE</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>FAKE_EMPTYFILE</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>alt_filename</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>alt_filename</name> <operator>=</operator> <call><name>open_altfile</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>altpipe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>open_filename</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>alt_filename</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>alt_filename</name></expr> </then><else>: <expr><name>filename</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>chflags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>altpipe</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>







<expr_stmt><expr><name>chflags</name> <operator>|=</operator> <name>CH_POPENED</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>chflags</name> <operator>|=</operator> <name>CH_KEEPOPEN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>




<expr_stmt><expr><name>f</name> <operator>=</operator> <name>fd0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>chflags</name> <operator>|=</operator> <name>CH_KEEPOPEN</name></expr>;</expr_stmt>



<expr_stmt><expr><call><name>SET_BINARY</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>DJGPPC</name></expr></cpp:if>





<expr_stmt><expr><call><name>__djgpp_set_ctrl_c</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>open_filename</name></expr></argument>, <argument><expr><name>FAKE_EMPTYFILE</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>f</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>chflags</name> <operator>|=</operator> <name>CH_NODATA</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>open_filename</name></expr></argument>, <argument><expr><name>FAKE_HELPFILE</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>f</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>chflags</name> <operator>|=</operator> <name>CH_HELPFILE</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>parg</name><operator>.</operator><name>p_string</name></name> <operator>=</operator> <call><name>bad_file</name><argument_list>(<argument><expr><name>open_filename</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>parg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>parg</name><operator>.</operator><name>p_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>err1</name>:</label>
<if_stmt><if>if <condition>(<expr><name>alt_filename</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>close_pipe</name><argument_list>(<argument><expr><name>altpipe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close_altfile</name><argument_list>(<argument><expr><name>alt_filename</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>alt_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>del_ifile</name><argument_list>(<argument><expr><name>ifile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>was_curr_ifile</name> <operator>==</operator> <name>ifile</name></expr>)</condition>
<block>{<block_content>




<expr_stmt><expr><call><name>quit</name><argument_list>(<argument><expr><name>QUIT_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>reedit_ifile</name><argument_list>(<argument><expr><name>was_curr_ifile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>open_filename</name></expr></argument>, <argument><expr><name>OPEN_READ</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><name><name>parg</name><operator>.</operator><name>p_string</name></name> <operator>=</operator> <call><name>errno_message</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>parg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>parg</name><operator>.</operator><name>p_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err1</name>;</goto>
</block_content>}</block></if> <else>else
<block>{<block_content>
<expr_stmt><expr><name>chflags</name> <operator>|=</operator> <name>CH_CANSEEK</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>force_open</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>opened</name><argument_list>(<argument><expr><name>ifile</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>bin_file</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>




<expr_stmt><expr><name><name>parg</name><operator>.</operator><name>p_string</name></name> <operator>=</operator> <name>filename</name></expr>;</expr_stmt>
<expr_stmt><expr><name>answer</name> <operator>=</operator> <call><name>query</name><argument_list>(<argument><expr><literal type="string">"\"%s\" may be a binary file. See it anyway? "</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>parg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>answer</name> <operator>!=</operator> <literal type="char">'y'</literal> <operator>&amp;&amp;</operator> <name>answer</name> <operator>!=</operator> <literal type="char">'Y'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>err1</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>





<if_stmt><if>if <condition>(<expr><name>was_curr_ifile</name> <operator>!=</operator> <name>NULL_IFILE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>old_ifile</name> <operator>=</operator> <name>was_curr_ifile</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unsave_ifile</name><argument_list>(<argument><expr><name>was_curr_ifile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>curr_ifile</name> <operator>=</operator> <name>ifile</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_altfilename</name><argument_list>(<argument><expr><name>curr_ifile</name></expr></argument>, <argument><expr><name>alt_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_altpipe</name><argument_list>(<argument><expr><name>curr_ifile</name></expr></argument>, <argument><expr><name>altpipe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_open</name><argument_list>(<argument><expr><name>curr_ifile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_pos</name><argument_list>(<argument><expr><name>curr_ifile</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>initial_scrpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>new_file</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ch_init</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>chflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>chflags</name> <operator>&amp;</operator> <name>CH_HELPFILE</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LOGFILE</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>namelogfile</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>is_tty</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>use_logfile</name><argument_list>(<argument><expr><name>namelogfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_STAT_INO</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>open_filename</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>statbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>stat</name><argument_list>(<argument><expr><name>open_filename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>statbuf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>curr_ino</name> <operator>=</operator> <name><name>statbuf</name><operator>.</operator><name>st_ino</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>curr_dev</name> <operator>=</operator> <name><name>statbuf</name><operator>.</operator><name>st_dev</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>every_first_cmd</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ungetsc</name><argument_list>(<argument><expr><name>every_first_cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ungetcc_back</name><argument_list>(<argument><expr><name>CHAR_END_COMMAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is_tty</name></expr>)</condition>
<block>{<block_content>







<expr_stmt><expr><call><name>pos_clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clr_linenum</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HILITE_SEARCH</name></expr></cpp:if>
<expr_stmt><expr><call><name>clr_hilite</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>hshift</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>FAKE_HELPFILE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>FAKE_EMPTYFILE</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>qfilename</name> <init>= <expr><call><name>shell_quote</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>cmd_addhist</name><argument_list>(<argument><expr><name>ml_examine</name></expr></argument>, <argument><expr><name>qfilename</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>qfilename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>want_filesize</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>scan_eof</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><name>public</name> <name>int</name></type>
<name>edit_list</name><parameter_list>(<parameter><decl><type><name>filelist</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filelist</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>IFILE</name></type> <name>save_ifile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>good_filename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>gfilelist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>gfilename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>qfilename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>textlist</name></name></type> <name>tl_files</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>textlist</name></name></type> <name>tl_gfiles</name></decl>;</decl_stmt>

<expr_stmt><expr><name>save_ifile</name> <operator>=</operator> <call><name>save_curr_ifile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>good_filename</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>







<expr_stmt><expr><call><name>init_textlist</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tl_files</name></expr></argument>, <argument><expr><name>filelist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>filename</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>filename</name> <operator>=</operator> <call><name>forw_textlist</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tl_files</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>gfilelist</name> <operator>=</operator> <call><name>lglob</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_textlist</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tl_gfiles</name></expr></argument>, <argument><expr><name>gfilelist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>gfilename</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>gfilename</name> <operator>=</operator> <call><name>forw_textlist</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tl_gfiles</name></expr></argument>, <argument><expr><name>gfilename</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>qfilename</name> <operator>=</operator> <call><name>shell_unquote</name><argument_list>(<argument><expr><name>gfilename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>edit</name><argument_list>(<argument><expr><name>qfilename</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>good_filename</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>good_filename</name> <operator>=</operator> <call><name>get_filename</name><argument_list>(<argument><expr><name>curr_ifile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>qfilename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>gfilelist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>



<if_stmt><if>if <condition>(<expr><name>good_filename</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>unsave_ifile</name><argument_list>(<argument><expr><name>save_ifile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>get_ifile</name><argument_list>(<argument><expr><name>good_filename</name></expr></argument>, <argument><expr><name>curr_ifile</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>curr_ifile</name></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><call><name>unsave_ifile</name><argument_list>(<argument><expr><name>save_ifile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>reedit_ifile</name><argument_list>(<argument><expr><name>save_ifile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>edit</name><argument_list>(<argument><expr><name>good_filename</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>public</name> <name>int</name></type>
<name>edit_first</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>nifile</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>edit_stdin</name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>curr_ifile</name> <operator>=</operator> <name>NULL_IFILE</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>edit_next</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>public</name> <name>int</name></type>
<name>edit_last</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>curr_ifile</name> <operator>=</operator> <name>NULL_IFILE</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>edit_prev</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>edit_istep</name><parameter_list>(<parameter><decl><type><name>h</name></type></decl></parameter>, <parameter><decl><type><name>n</name></type></decl></parameter>, <parameter><decl><type><name>dir</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>IFILE</name></type> <name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dir</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>IFILE</name></type> <name>next</name></decl>;</decl_stmt>




<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name>next</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>dir</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>next_ifile</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>prev_ifile</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>edit_ifile</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>next</name> <operator>==</operator> <name>NULL_IFILE</name></expr>)</condition>
<block>{<block_content>



<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ABORT_SIGS</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>




<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></for>



<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>edit_inext</name><parameter_list>(<parameter><decl><type><name>h</name></type></decl></parameter>, <parameter><decl><type><name>n</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>IFILE</name></type> <name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>edit_istep</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>public</name> <name>int</name></type>
<name>edit_next</name><parameter_list>(<parameter><decl><type><name>n</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<block>{<block_content>
<return>return <expr><call><name>edit_istep</name><argument_list>(<argument><expr><name>curr_ifile</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>edit_iprev</name><parameter_list>(<parameter><decl><type><name>h</name></type></decl></parameter>, <parameter><decl><type><name>n</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>IFILE</name></type> <name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>edit_istep</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>public</name> <name>int</name></type>
<name>edit_prev</name><parameter_list>(<parameter><decl><type><name>n</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<block>{<block_content>
<return>return <expr><call><name>edit_istep</name><argument_list>(<argument><expr><name>curr_ifile</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>public</name> <name>int</name></type>
<name>edit_index</name><parameter_list>(<parameter><decl><type><name>n</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>IFILE</name></type> <name>h</name></decl>;</decl_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <name>NULL_IFILE</name></expr>;</expr_stmt>
<do>do
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>h</name> <operator>=</operator> <call><name>next_ifile</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL_IFILE</name></expr>)</condition>
<block>{<block_content>



<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><call><name>get_index</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>n</name></expr>)</condition>;</do>

<return>return <expr><operator>(</operator><call><name>edit_ifile</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>public</name> <name>IFILE</name></type>
<name>save_curr_ifile</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>curr_ifile</name> <operator>!=</operator> <name>NULL_IFILE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>hold_ifile</name><argument_list>(<argument><expr><name>curr_ifile</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>curr_ifile</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>public</name> <name>void</name></type>
<name>unsave_ifile</name><parameter_list>(<parameter><decl><type><name>save_ifile</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>IFILE</name></type> <name>save_ifile</name></decl>;</decl_stmt>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>save_ifile</name> <operator>!=</operator> <name>NULL_IFILE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>hold_ifile</name><argument_list>(<argument><expr><name>save_ifile</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>public</name> <name>void</name></type>
<name>reedit_ifile</name><parameter_list>(<parameter><decl><type><name>save_ifile</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>IFILE</name></type> <name>save_ifile</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>IFILE</name></type> <name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IFILE</name></type> <name>prev</name></decl>;</decl_stmt>







<expr_stmt><expr><call><name>unsave_ifile</name><argument_list>(<argument><expr><name>save_ifile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>next_ifile</name><argument_list>(<argument><expr><name>save_ifile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <call><name>prev_ifile</name><argument_list>(<argument><expr><name>save_ifile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>edit_ifile</name><argument_list>(<argument><expr><name>save_ifile</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>next</name> <operator>!=</operator> <name>NULL_IFILE</name> <operator>&amp;&amp;</operator> <call><name>edit_inext</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>prev</name> <operator>!=</operator> <name>NULL_IFILE</name> <operator>&amp;&amp;</operator> <call><name>edit_iprev</name><argument_list>(<argument><expr><name>prev</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><call><name>quit</name><argument_list>(<argument><expr><name>QUIT_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>public</name> <name>void</name></type>
<name>reopen_curr_ifile</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>IFILE</name></type> <name>save_ifile</name> <init>= <expr><call><name>save_curr_ifile</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>close_file</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reedit_ifile</name><argument_list>(<argument><expr><name>save_ifile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>public</name> <name>int</name></type>
<name>edit_stdin</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>isatty</name><argument_list>(<argument><expr><name>fd0</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Missing filename (\"less --help\" for help)"</literal></expr></argument>, <argument><expr><name>NULL_PARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>quit</name><argument_list>(<argument><expr><name>QUIT_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>edit</name><argument_list>(<argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>public</name> <name>void</name></type>
<name>cat_file</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>ch_forw_get</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>EOI</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putchr</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LOGFILE</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OVERWRITE_OPTIONS</name></cpp:macro> <cpp:value>"Overwrite, Append, Don't log, or Quit?"</cpp:value></cpp:define>






<function><type><name>public</name> <name>void</name></type>
<name>use_logfile</name><parameter_list>(<parameter><decl><type><name>filename</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>exists</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>answer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PARG</name></type> <name>parg</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ch_getflags</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>CH_CANSEEK</name></expr>)</condition><block type="pseudo"><block_content>



<return>return;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><name>exists</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>OPEN_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>exists</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>exists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>exists</name> <operator>=</operator> <operator>(</operator><name>exists</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><operator>!</operator><name>exists</name> <operator>||</operator> <name>force_logfile</name></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><name>answer</name> <operator>=</operator> <literal type="char">'O'</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else
<block>{<block_content>



<expr_stmt><expr><name><name>parg</name><operator>.</operator><name>p_string</name></name> <operator>=</operator> <name>filename</name></expr>;</expr_stmt>
<expr_stmt><expr><name>answer</name> <operator>=</operator> <call><name>query</name><argument_list>(<argument><expr><literal type="string">"Warning: \"%s\" exists; "</literal><name>OVERWRITE_OPTIONS</name><literal type="string">" "</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>parg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<label><name>loop</name>:</label>
<switch>switch <condition>(<expr><name>answer</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'O'</literal></expr>:</case> <case>case <expr><literal type="char">'o'</literal></expr>:</case>



<expr_stmt><expr><name>logfile</name> <operator>=</operator> <call><name>creat</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="number">0644</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'A'</literal></expr>:</case> <case>case <expr><literal type="char">'a'</literal></expr>:</case>



<expr_stmt><expr><name>logfile</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>OPEN_APPEND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lseek</name><argument_list>(<argument><expr><name>logfile</name></expr></argument>, <argument><expr><operator>(</operator><name>off_t</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_END</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BAD_LSEEK</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>logfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>logfile</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'D'</literal></expr>:</case> <case>case <expr><literal type="char">'d'</literal></expr>:</case>



<return>return;</return>
<default>default:</default>




<expr_stmt><expr><name>answer</name> <operator>=</operator> <call><name>query</name><argument_list>(<argument><expr><name>OVERWRITE_OPTIONS</name><literal type="string">" (Type \"O\", \"A\", \"D\" or \"Q\") "</literal></expr></argument>, <argument><expr><name>NULL_PARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>loop</name>;</goto>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>logfile</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><name><name>parg</name><operator>.</operator><name>p_string</name></name> <operator>=</operator> <name>filename</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Cannot write to \"%s\""</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>parg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>SET_BINARY</name><argument_list>(<argument><expr><name>logfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
