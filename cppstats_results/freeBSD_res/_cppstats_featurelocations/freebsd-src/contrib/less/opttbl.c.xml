<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/less/opttbl.c">













<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"less.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"option.h"</cpp:file></cpp:include>




<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>quiet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>how_search</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>top_scroll</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>pr_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>bs_mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>know_dumb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>quit_at_eof</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>quit_if_one_screen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>squeeze</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>tabstop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>back_scroll</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>forw_scroll</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>caseless</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>linenums</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>autobuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>bufspace</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>ctldisp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>force_open</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>swindow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>jump_sline</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>long</name></type> <name>jump_sline_fraction</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>long</name></type> <name>shift_count_fraction</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>chopline</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>no_init</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>no_keypad</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>twiddle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>show_attn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>shift_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>status_col</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>use_lessopen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>quit_on_intr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>follow_mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>oldbot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>opt_use_backslash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>char</name></type> <name>rscroll_char</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>rscroll_attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>no_hist_dups</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>mousecap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>wheel_lines</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>perma_marks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>linenum_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>status_col_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>incr_search</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>use_color</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>want_filesize</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HILITE_SEARCH</name></expr></cpp:if>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>hilite_search</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>less_is_more</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>optname</name></name></type> <name>a_optname</name> <init>= <expr><block>{ <expr><literal type="string">"search-skip-screen"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>optname</name></name></type> <name>b_optname</name> <init>= <expr><block>{ <expr><literal type="string">"buffers"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>optname</name></name></type> <name>B__optname</name> <init>= <expr><block>{ <expr><literal type="string">"auto-buffers"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>optname</name></name></type> <name>c_optname</name> <init>= <expr><block>{ <expr><literal type="string">"clear-screen"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>optname</name></name></type> <name>d_optname</name> <init>= <expr><block>{ <expr><literal type="string">"dumb"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>optname</name></name></type> <name>D__optname</name> <init>= <expr><block>{ <expr><literal type="string">"color"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>optname</name></name></type> <name>e_optname</name> <init>= <expr><block>{ <expr><literal type="string">"quit-at-eof"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>optname</name></name></type> <name>f_optname</name> <init>= <expr><block>{ <expr><literal type="string">"force"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>optname</name></name></type> <name>F__optname</name> <init>= <expr><block>{ <expr><literal type="string">"quit-if-one-screen"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HILITE_SEARCH</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>optname</name></name></type> <name>g_optname</name> <init>= <expr><block>{ <expr><literal type="string">"hilite-search"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>optname</name></name></type> <name>h_optname</name> <init>= <expr><block>{ <expr><literal type="string">"max-back-scroll"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>optname</name></name></type> <name>i_optname</name> <init>= <expr><block>{ <expr><literal type="string">"ignore-case"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>optname</name></name></type> <name>j_optname</name> <init>= <expr><block>{ <expr><literal type="string">"jump-target"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>optname</name></name></type> <name>J__optname</name> <init>= <expr><block>{ <expr><literal type="string">"status-column"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USERFILE</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>optname</name></name></type> <name>k_optname</name> <init>= <expr><block>{ <expr><literal type="string">"lesskey-file"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_LESSKEYSRC</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>optname</name></name></type> <name>ks_optname</name> <init>= <expr><block>{ <expr><literal type="string">"lesskey-src"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>optname</name></name></type> <name>K__optname</name> <init>= <expr><block>{ <expr><literal type="string">"quit-on-intr"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>optname</name></name></type> <name>L__optname</name> <init>= <expr><block>{ <expr><literal type="string">"no-lessopen"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>optname</name></name></type> <name>m_optname</name> <init>= <expr><block>{ <expr><literal type="string">"long-prompt"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>optname</name></name></type> <name>n_optname</name> <init>= <expr><block>{ <expr><literal type="string">"line-numbers"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LOGFILE</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>optname</name></name></type> <name>o_optname</name> <init>= <expr><block>{ <expr><literal type="string">"log-file"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>optname</name></name></type> <name>O__optname</name> <init>= <expr><block>{ <expr><literal type="string">"LOG-FILE"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>optname</name></name></type> <name>p_optname</name> <init>= <expr><block>{ <expr><literal type="string">"pattern"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>optname</name></name></type> <name>P__optname</name> <init>= <expr><block>{ <expr><literal type="string">"prompt"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>optname</name></name></type> <name>q2_optname</name> <init>= <expr><block>{ <expr><literal type="string">"silent"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>optname</name></name></type> <name>q_optname</name> <init>= <expr><block>{ <expr><literal type="string">"quiet"</literal></expr>, <expr><operator>&amp;</operator><name>q2_optname</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>optname</name></name></type> <name>r_optname</name> <init>= <expr><block>{ <expr><literal type="string">"raw-control-chars"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>optname</name></name></type> <name>s_optname</name> <init>= <expr><block>{ <expr><literal type="string">"squeeze-blank-lines"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>optname</name></name></type> <name>S__optname</name> <init>= <expr><block>{ <expr><literal type="string">"chop-long-lines"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TAGS</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>optname</name></name></type> <name>t_optname</name> <init>= <expr><block>{ <expr><literal type="string">"tag"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>optname</name></name></type> <name>T__optname</name> <init>= <expr><block>{ <expr><literal type="string">"tag-file"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>optname</name></name></type> <name>u_optname</name> <init>= <expr><block>{ <expr><literal type="string">"underline-special"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>optname</name></name></type> <name>V__optname</name> <init>= <expr><block>{ <expr><literal type="string">"version"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>optname</name></name></type> <name>w_optname</name> <init>= <expr><block>{ <expr><literal type="string">"hilite-unread"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>optname</name></name></type> <name>x_optname</name> <init>= <expr><block>{ <expr><literal type="string">"tabs"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>optname</name></name></type> <name>X__optname</name> <init>= <expr><block>{ <expr><literal type="string">"no-init"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>optname</name></name></type> <name>y_optname</name> <init>= <expr><block>{ <expr><literal type="string">"max-forw-scroll"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>optname</name></name></type> <name>z_optname</name> <init>= <expr><block>{ <expr><literal type="string">"window"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>optname</name></name></type> <name>quote_optname</name> <init>= <expr><block>{ <expr><literal type="string">"quotes"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>optname</name></name></type> <name>tilde_optname</name> <init>= <expr><block>{ <expr><literal type="string">"tilde"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>optname</name></name></type> <name>query_optname</name> <init>= <expr><block>{ <expr><literal type="string">"help"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>optname</name></name></type> <name>pound_optname</name> <init>= <expr><block>{ <expr><literal type="string">"shift"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>optname</name></name></type> <name>keypad_optname</name> <init>= <expr><block>{ <expr><literal type="string">"no-keypad"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>optname</name></name></type> <name>oldbot_optname</name> <init>= <expr><block>{ <expr><literal type="string">"old-bot"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>optname</name></name></type> <name>follow_optname</name> <init>= <expr><block>{ <expr><literal type="string">"follow-name"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>optname</name></name></type> <name>use_backslash_optname</name> <init>= <expr><block>{ <expr><literal type="string">"use-backslash"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>optname</name></name></type> <name>rscroll_optname</name> <init>= <expr><block>{ <expr><literal type="string">"rscroll"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>optname</name></name></type> <name>nohistdups_optname</name> <init>= <expr><block>{ <expr><literal type="string">"no-histdups"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>optname</name></name></type> <name>mousecap_optname</name> <init>= <expr><block>{ <expr><literal type="string">"mouse"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>optname</name></name></type> <name>wheel_lines_optname</name> <init>= <expr><block>{ <expr><literal type="string">"wheel-lines"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>optname</name></name></type> <name>perma_marks_optname</name> <init>= <expr><block>{ <expr><literal type="string">"save-marks"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>optname</name></name></type> <name>linenum_width_optname</name> <init>= <expr><block>{ <expr><literal type="string">"line-num-width"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>optname</name></name></type> <name>status_col_width_optname</name> <init>= <expr><block>{ <expr><literal type="string">"status-col-width"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>optname</name></name></type> <name>incr_search_optname</name> <init>= <expr><block>{ <expr><literal type="string">"incsearch"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>optname</name></name></type> <name>use_color_optname</name> <init>= <expr><block>{ <expr><literal type="string">"use-color"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>optname</name></name></type> <name>want_filesize_optname</name> <init>= <expr><block>{ <expr><literal type="string">"file-size"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LESSTEST</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>optname</name></name></type> <name>ttyin_name_optname</name> <init>= <expr><block>{ <expr><literal type="string">"tty"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>optname</name></name></type> <name>rstat_optname</name> <init>= <expr><block>{ <expr><literal type="string">"rstat"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>














<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>loption</name></name></type> <name><name>option</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><operator>&amp;</operator><name>a_optname</name></expr>,
<expr><name>TRIPLE</name></expr>, <expr><name>OPT_ONPLUS</name></expr>, <expr><operator>&amp;</operator><name>how_search</name></expr>, <expr><name>NULL</name></expr>,
<expr><block>{
<expr><literal type="string">"Search includes displayed screen"</literal></expr>,
<expr><literal type="string">"Search skips displayed screen"</literal></expr>,
<expr><literal type="string">"Search includes all of displayed screen"</literal></expr>
}</block></expr>
}</block></expr>,

<expr><block>{ <expr><literal type="char">'b'</literal></expr>, <expr><operator>&amp;</operator><name>b_optname</name></expr>,
<expr><name>NUMBER</name><operator>|</operator><name>INIT_HANDLER</name></expr>, <expr><literal type="number">64</literal></expr>, <expr><operator>&amp;</operator><name>bufspace</name></expr>, <expr><name>opt_b</name></expr>,
<expr><block>{
<expr><literal type="string">"Max buffer space per file (K): "</literal></expr>,
<expr><literal type="string">"Max buffer space per file: %dK"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr>
}</block></expr>,
<expr><block>{ <expr><literal type="char">'B'</literal></expr>, <expr><operator>&amp;</operator><name>B__optname</name></expr>,
<expr><name>BOOL</name></expr>, <expr><name>OPT_ON</name></expr>, <expr><operator>&amp;</operator><name>autobuf</name></expr>, <expr><name>NULL</name></expr>,
<expr><block>{
<expr><literal type="string">"Don't automatically allocate buffers"</literal></expr>,
<expr><literal type="string">"Automatically allocate buffers when needed"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr>
}</block></expr>,
<expr><block>{ <expr><literal type="char">'c'</literal></expr>, <expr><operator>&amp;</operator><name>c_optname</name></expr>,
<expr><name>TRIPLE</name></expr>, <expr><name>OPT_OFF</name></expr>, <expr><operator>&amp;</operator><name>top_scroll</name></expr>, <expr><name>NULL</name></expr>,
<expr><block>{
<expr><literal type="string">"Repaint by scrolling from bottom of screen"</literal></expr>,
<expr><literal type="string">"Repaint by painting from top of screen"</literal></expr>,
<expr><literal type="string">"Repaint by painting from top of screen"</literal></expr>
}</block></expr>
}</block></expr>,
<expr><block>{ <expr><literal type="char">'d'</literal></expr>, <expr><operator>&amp;</operator><name>d_optname</name></expr>,
<expr><name>BOOL</name><operator>|</operator><name>NO_TOGGLE</name></expr>, <expr><name>OPT_OFF</name></expr>, <expr><operator>&amp;</operator><name>know_dumb</name></expr>, <expr><name>NULL</name></expr>,
<expr><block>{
<expr><literal type="string">"Assume intelligent terminal"</literal></expr>,
<expr><literal type="string">"Assume dumb terminal"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr>
}</block></expr>,
<expr><block>{ <expr><literal type="char">'D'</literal></expr>, <expr><operator>&amp;</operator><name>D__optname</name></expr>,
<expr><name>STRING</name><operator>|</operator><name>REPAINT</name><operator>|</operator><name>NO_QUERY</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>opt_D</name></expr>,
<expr><block>{
<expr><literal type="string">"color desc: "</literal></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>
}</block></expr>
}</block></expr>,
<expr><block>{ <expr><literal type="char">'e'</literal></expr>, <expr><operator>&amp;</operator><name>e_optname</name></expr>,
<expr><name>TRIPLE</name></expr>, <expr><name>OPT_OFF</name></expr>, <expr><operator>&amp;</operator><name>quit_at_eof</name></expr>, <expr><name>NULL</name></expr>,
<expr><block>{
<expr><literal type="string">"Don't quit at end-of-file"</literal></expr>,
<expr><literal type="string">"Quit at end-of-file"</literal></expr>,
<expr><literal type="string">"Quit immediately at end-of-file"</literal></expr>
}</block></expr>
}</block></expr>,
<expr><block>{ <expr><literal type="char">'f'</literal></expr>, <expr><operator>&amp;</operator><name>f_optname</name></expr>,
<expr><name>BOOL</name></expr>, <expr><name>OPT_OFF</name></expr>, <expr><operator>&amp;</operator><name>force_open</name></expr>, <expr><name>NULL</name></expr>,
<expr><block>{
<expr><literal type="string">"Open only regular files"</literal></expr>,
<expr><literal type="string">"Open even non-regular files"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr>
}</block></expr>,
<expr><block>{ <expr><literal type="char">'F'</literal></expr>, <expr><operator>&amp;</operator><name>F__optname</name></expr>,
<expr><name>BOOL</name></expr>, <expr><name>OPT_OFF</name></expr>, <expr><operator>&amp;</operator><name>quit_if_one_screen</name></expr>, <expr><name>NULL</name></expr>,
<expr><block>{
<expr><literal type="string">"Don't quit if end-of-file on first screen"</literal></expr>,
<expr><literal type="string">"Quit if end-of-file on first screen"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr>
}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HILITE_SEARCH</name></expr></cpp:if>
<expr><block>{ <expr><literal type="char">'g'</literal></expr>, <expr><operator>&amp;</operator><name>g_optname</name></expr>,
<expr><name>TRIPLE</name><operator>|</operator><name>HL_REPAINT</name></expr>, <expr><name>OPT_ONPLUS</name></expr>, <expr><operator>&amp;</operator><name>hilite_search</name></expr>, <expr><name>NULL</name></expr>,
<expr><block>{
<expr><literal type="string">"Don't highlight search matches"</literal></expr>,
<expr><literal type="string">"Highlight matches for previous search only"</literal></expr>,
<expr><literal type="string">"Highlight all matches for previous search pattern"</literal></expr>,
}</block></expr>
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr><literal type="char">'h'</literal></expr>, <expr><operator>&amp;</operator><name>h_optname</name></expr>,
<expr><name>NUMBER</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>&amp;</operator><name>back_scroll</name></expr>, <expr><name>NULL</name></expr>,
<expr><block>{
<expr><literal type="string">"Backwards scroll limit: "</literal></expr>,
<expr><literal type="string">"Backwards scroll limit is %d lines"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr>
}</block></expr>,
<expr><block>{ <expr><literal type="char">'i'</literal></expr>, <expr><operator>&amp;</operator><name>i_optname</name></expr>,
<expr><name>TRIPLE</name><operator>|</operator><name>HL_REPAINT</name></expr>, <expr><name>OPT_OFF</name></expr>, <expr><operator>&amp;</operator><name>caseless</name></expr>, <expr><name>opt_i</name></expr>,
<expr><block>{
<expr><literal type="string">"Case is significant in searches"</literal></expr>,
<expr><literal type="string">"Ignore case in searches"</literal></expr>,
<expr><literal type="string">"Ignore case in searches and in patterns"</literal></expr>
}</block></expr>
}</block></expr>,
<expr><block>{ <expr><literal type="char">'j'</literal></expr>, <expr><operator>&amp;</operator><name>j_optname</name></expr>,
<expr><name>STRING</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>opt_j</name></expr>,
<expr><block>{
<expr><literal type="string">"Target line: "</literal></expr>,
<expr><literal type="string">"0123456789.-"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr>
}</block></expr>,
<expr><block>{ <expr><literal type="char">'J'</literal></expr>, <expr><operator>&amp;</operator><name>J__optname</name></expr>,
<expr><name>BOOL</name><operator>|</operator><name>REPAINT</name></expr>, <expr><name>OPT_OFF</name></expr>, <expr><operator>&amp;</operator><name>status_col</name></expr>, <expr><name>NULL</name></expr>,
<expr><block>{
<expr><literal type="string">"Don't display a status column"</literal></expr>,
<expr><literal type="string">"Display a status column"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr>
}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USERFILE</name></expr></cpp:if>
<expr><block>{ <expr><literal type="char">'k'</literal></expr>, <expr><operator>&amp;</operator><name>k_optname</name></expr>,
<expr><name>STRING</name><operator>|</operator><name>NO_TOGGLE</name><operator>|</operator><name>NO_QUERY</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>opt_k</name></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_LESSKEYSRC</name></expr></cpp:if>
<expr><block>{ <expr><name>OLETTER_NONE</name></expr>, <expr><operator>&amp;</operator><name>ks_optname</name></expr>,
<expr><name>STRING</name><operator>|</operator><name>NO_TOGGLE</name><operator>|</operator><name>NO_QUERY</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>opt_ks</name></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr><literal type="char">'K'</literal></expr>, <expr><operator>&amp;</operator><name>K__optname</name></expr>,
<expr><name>BOOL</name></expr>, <expr><name>OPT_OFF</name></expr>, <expr><operator>&amp;</operator><name>quit_on_intr</name></expr>, <expr><name>NULL</name></expr>,
<expr><block>{
<expr><literal type="string">"Interrupt (ctrl-C) returns to prompt"</literal></expr>,
<expr><literal type="string">"Interrupt (ctrl-C) exits less"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr>
}</block></expr>,
<expr><block>{ <expr><literal type="char">'L'</literal></expr>, <expr><operator>&amp;</operator><name>L__optname</name></expr>,
<expr><name>BOOL</name></expr>, <expr><name>OPT_ON</name></expr>, <expr><operator>&amp;</operator><name>use_lessopen</name></expr>, <expr><name>NULL</name></expr>,
<expr><block>{
<expr><literal type="string">"Don't use the LESSOPEN filter"</literal></expr>,
<expr><literal type="string">"Use the LESSOPEN filter"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr>
}</block></expr>,
<expr><block>{ <expr><literal type="char">'m'</literal></expr>, <expr><operator>&amp;</operator><name>m_optname</name></expr>,
<expr><name>TRIPLE</name></expr>, <expr><name>OPT_OFF</name></expr>, <expr><operator>&amp;</operator><name>pr_type</name></expr>, <expr><name>NULL</name></expr>,
<expr><block>{
<expr><literal type="string">"Short prompt"</literal></expr>,
<expr><literal type="string">"Medium prompt"</literal></expr>,
<expr><literal type="string">"Long prompt"</literal></expr>
}</block></expr>
}</block></expr>,
<expr><block>{ <expr><literal type="char">'n'</literal></expr>, <expr><operator>&amp;</operator><name>n_optname</name></expr>,
<expr><name>TRIPLE</name><operator>|</operator><name>REPAINT</name></expr>, <expr><name>OPT_ON</name></expr>, <expr><operator>&amp;</operator><name>linenums</name></expr>, <expr><name>NULL</name></expr>,
<expr><block>{
<expr><literal type="string">"Don't use line numbers"</literal></expr>,
<expr><literal type="string">"Use line numbers"</literal></expr>,
<expr><literal type="string">"Constantly display line numbers"</literal></expr>
}</block></expr>
}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LOGFILE</name></expr></cpp:if>
<expr><block>{ <expr><literal type="char">'o'</literal></expr>, <expr><operator>&amp;</operator><name>o_optname</name></expr>,
<expr><name>STRING</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>opt_o</name></expr>,
<expr><block>{ <expr><literal type="string">"log file: "</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr>,
<expr><block>{ <expr><literal type="char">'O'</literal></expr>, <expr><operator>&amp;</operator><name>O__optname</name></expr>,
<expr><name>STRING</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>opt__O</name></expr>,
<expr><block>{ <expr><literal type="string">"Log file: "</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr><literal type="char">'p'</literal></expr>, <expr><operator>&amp;</operator><name>p_optname</name></expr>,
<expr><name>STRING</name><operator>|</operator><name>NO_TOGGLE</name><operator>|</operator><name>NO_QUERY</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>opt_p</name></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr>,
<expr><block>{ <expr><literal type="char">'P'</literal></expr>, <expr><operator>&amp;</operator><name>P__optname</name></expr>,
<expr><name>STRING</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>opt__P</name></expr>,
<expr><block>{ <expr><literal type="string">"prompt: "</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr>,
<expr><block>{ <expr><literal type="char">'q'</literal></expr>, <expr><operator>&amp;</operator><name>q_optname</name></expr>,
<expr><name>TRIPLE</name></expr>, <expr><name>OPT_OFF</name></expr>, <expr><operator>&amp;</operator><name>quiet</name></expr>, <expr><name>NULL</name></expr>,
<expr><block>{
<expr><literal type="string">"Ring the bell for errors AND at eof/bof"</literal></expr>,
<expr><literal type="string">"Ring the bell for errors but not at eof/bof"</literal></expr>,
<expr><literal type="string">"Never ring the bell"</literal></expr>
}</block></expr>
}</block></expr>,
<expr><block>{ <expr><literal type="char">'r'</literal></expr>, <expr><operator>&amp;</operator><name>r_optname</name></expr>,
<expr><name>TRIPLE</name><operator>|</operator><name>REPAINT</name></expr>, <expr><name>OPT_OFF</name></expr>, <expr><operator>&amp;</operator><name>ctldisp</name></expr>, <expr><name>NULL</name></expr>,
<expr><block>{
<expr><literal type="string">"Display control characters as ^X"</literal></expr>,
<expr><literal type="string">"Display control characters directly (not recommended)"</literal></expr>,
<expr><literal type="string">"Display ANSI sequences directly, other control characters as ^X"</literal></expr>
}</block></expr>
}</block></expr>,
<expr><block>{ <expr><literal type="char">'s'</literal></expr>, <expr><operator>&amp;</operator><name>s_optname</name></expr>,
<expr><name>BOOL</name><operator>|</operator><name>REPAINT</name></expr>, <expr><name>OPT_OFF</name></expr>, <expr><operator>&amp;</operator><name>squeeze</name></expr>, <expr><name>NULL</name></expr>,
<expr><block>{
<expr><literal type="string">"Display all blank lines"</literal></expr>,
<expr><literal type="string">"Squeeze multiple blank lines"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr>
}</block></expr>,
<expr><block>{ <expr><literal type="char">'S'</literal></expr>, <expr><operator>&amp;</operator><name>S__optname</name></expr>,
<expr><name>BOOL</name><operator>|</operator><name>REPAINT</name></expr>, <expr><name>OPT_OFF</name></expr>, <expr><operator>&amp;</operator><name>chopline</name></expr>, <expr><name>NULL</name></expr>,
<expr><block>{
<expr><literal type="string">"Fold long lines"</literal></expr>,
<expr><literal type="string">"Chop long lines"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr>
}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TAGS</name></expr></cpp:if>
<expr><block>{ <expr><literal type="char">'t'</literal></expr>, <expr><operator>&amp;</operator><name>t_optname</name></expr>,
<expr><name>STRING</name><operator>|</operator><name>NO_QUERY</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>opt_t</name></expr>,
<expr><block>{ <expr><literal type="string">"tag: "</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr>,
<expr><block>{ <expr><literal type="char">'T'</literal></expr>, <expr><operator>&amp;</operator><name>T__optname</name></expr>,
<expr><name>STRING</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>opt__T</name></expr>,
<expr><block>{ <expr><literal type="string">"tags file: "</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr><literal type="char">'u'</literal></expr>, <expr><operator>&amp;</operator><name>u_optname</name></expr>,
<expr><name>TRIPLE</name><operator>|</operator><name>REPAINT</name></expr>, <expr><name>OPT_OFF</name></expr>, <expr><operator>&amp;</operator><name>bs_mode</name></expr>, <expr><name>NULL</name></expr>,
<expr><block>{
<expr><literal type="string">"Display underlined text in underline mode"</literal></expr>,
<expr><literal type="string">"Backspaces cause overstrike"</literal></expr>,
<expr><literal type="string">"Print backspace as ^H"</literal></expr>
}</block></expr>
}</block></expr>,
<expr><block>{ <expr><literal type="char">'V'</literal></expr>, <expr><operator>&amp;</operator><name>V__optname</name></expr>,
<expr><name>NOVAR</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>opt__V</name></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr>,
<expr><block>{ <expr><literal type="char">'w'</literal></expr>, <expr><operator>&amp;</operator><name>w_optname</name></expr>,
<expr><name>TRIPLE</name><operator>|</operator><name>REPAINT</name></expr>, <expr><name>OPT_OFF</name></expr>, <expr><operator>&amp;</operator><name>show_attn</name></expr>, <expr><name>NULL</name></expr>,
<expr><block>{
<expr><literal type="string">"Don't highlight first unread line"</literal></expr>,
<expr><literal type="string">"Highlight first unread line after forward-screen"</literal></expr>,
<expr><literal type="string">"Highlight first unread line after any forward movement"</literal></expr>,
}</block></expr>
}</block></expr>,
<expr><block>{ <expr><literal type="char">'x'</literal></expr>, <expr><operator>&amp;</operator><name>x_optname</name></expr>,
<expr><name>STRING</name><operator>|</operator><name>REPAINT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>opt_x</name></expr>,
<expr><block>{
<expr><literal type="string">"Tab stops: "</literal></expr>,
<expr><literal type="string">"0123456789,"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr>
}</block></expr>,
<expr><block>{ <expr><literal type="char">'X'</literal></expr>, <expr><operator>&amp;</operator><name>X__optname</name></expr>,
<expr><name>BOOL</name><operator>|</operator><name>NO_TOGGLE</name></expr>, <expr><name>OPT_OFF</name></expr>, <expr><operator>&amp;</operator><name>no_init</name></expr>, <expr><name>NULL</name></expr>,
<expr><block>{
<expr><literal type="string">"Send init/deinit strings to terminal"</literal></expr>,
<expr><literal type="string">"Don't use init/deinit strings"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr>
}</block></expr>,
<expr><block>{ <expr><literal type="char">'y'</literal></expr>, <expr><operator>&amp;</operator><name>y_optname</name></expr>,
<expr><name>NUMBER</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>&amp;</operator><name>forw_scroll</name></expr>, <expr><name>NULL</name></expr>,
<expr><block>{
<expr><literal type="string">"Forward scroll limit: "</literal></expr>,
<expr><literal type="string">"Forward scroll limit is %d lines"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr>
}</block></expr>,
<expr><block>{ <expr><literal type="char">'z'</literal></expr>, <expr><operator>&amp;</operator><name>z_optname</name></expr>,
<expr><name>NUMBER</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>&amp;</operator><name>swindow</name></expr>, <expr><name>NULL</name></expr>,
<expr><block>{
<expr><literal type="string">"Scroll window size: "</literal></expr>,
<expr><literal type="string">"Scroll window size is %d lines"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr>
}</block></expr>,
<expr><block>{ <expr><literal type="char">'"'</literal></expr>, <expr><operator>&amp;</operator><name>quote_optname</name></expr>,
<expr><name>STRING</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>opt_quote</name></expr>,
<expr><block>{ <expr><literal type="string">"quotes: "</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr>,
<expr><block>{ <expr><literal type="char">'~'</literal></expr>, <expr><operator>&amp;</operator><name>tilde_optname</name></expr>,
<expr><name>BOOL</name><operator>|</operator><name>REPAINT</name></expr>, <expr><name>OPT_ON</name></expr>, <expr><operator>&amp;</operator><name>twiddle</name></expr>, <expr><name>NULL</name></expr>,
<expr><block>{
<expr><literal type="string">"Don't show tildes after end of file"</literal></expr>,
<expr><literal type="string">"Show tildes after end of file"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr>
}</block></expr>,
<expr><block>{ <expr><literal type="char">'?'</literal></expr>, <expr><operator>&amp;</operator><name>query_optname</name></expr>,
<expr><name>NOVAR</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>opt_query</name></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr>,
<expr><block>{ <expr><literal type="char">'#'</literal></expr>, <expr><operator>&amp;</operator><name>pound_optname</name></expr>,
<expr><name>STRING</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>opt_shift</name></expr>,
<expr><block>{
<expr><literal type="string">"Horizontal shift: "</literal></expr>,
<expr><literal type="string">"0123456789."</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr>
}</block></expr>,
<expr><block>{ <expr><name>OLETTER_NONE</name></expr>, <expr><operator>&amp;</operator><name>keypad_optname</name></expr>,
<expr><name>BOOL</name><operator>|</operator><name>NO_TOGGLE</name></expr>, <expr><name>OPT_OFF</name></expr>, <expr><operator>&amp;</operator><name>no_keypad</name></expr>, <expr><name>NULL</name></expr>,
<expr><block>{
<expr><literal type="string">"Use keypad mode"</literal></expr>,
<expr><literal type="string">"Don't use keypad mode"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr>
}</block></expr>,
<expr><block>{ <expr><name>OLETTER_NONE</name></expr>, <expr><operator>&amp;</operator><name>oldbot_optname</name></expr>,
<expr><name>BOOL</name></expr>, <expr><name>OPT_OFF</name></expr>, <expr><operator>&amp;</operator><name>oldbot</name></expr>, <expr><name>NULL</name></expr>,
<expr><block>{
<expr><literal type="string">"Use new bottom of screen behavior"</literal></expr>,
<expr><literal type="string">"Use old bottom of screen behavior"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr>
}</block></expr>,
<expr><block>{ <expr><name>OLETTER_NONE</name></expr>, <expr><operator>&amp;</operator><name>follow_optname</name></expr>,
<expr><name>BOOL</name></expr>, <expr><name>FOLLOW_DESC</name></expr>, <expr><operator>&amp;</operator><name>follow_mode</name></expr>, <expr><name>NULL</name></expr>,
<expr><block>{
<expr><literal type="string">"F command follows file descriptor"</literal></expr>,
<expr><literal type="string">"F command follows file name"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr>
}</block></expr>,
<expr><block>{ <expr><name>OLETTER_NONE</name></expr>, <expr><operator>&amp;</operator><name>use_backslash_optname</name></expr>,
<expr><name>BOOL</name></expr>, <expr><name>OPT_OFF</name></expr>, <expr><operator>&amp;</operator><name>opt_use_backslash</name></expr>, <expr><name>NULL</name></expr>,
<expr><block>{
<expr><literal type="string">"Use backslash escaping in command line parameters"</literal></expr>,
<expr><literal type="string">"Don't use backslash escaping in command line parameters"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr>
}</block></expr>,
<expr><block>{ <expr><name>OLETTER_NONE</name></expr>, <expr><operator>&amp;</operator><name>rscroll_optname</name></expr>,
<expr><name>STRING</name><operator>|</operator><name>REPAINT</name><operator>|</operator><name>INIT_HANDLER</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>opt_rscroll</name></expr>,
<expr><block>{ <expr><literal type="string">"right scroll character: "</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr>,
<expr><block>{ <expr><name>OLETTER_NONE</name></expr>, <expr><operator>&amp;</operator><name>nohistdups_optname</name></expr>,
<expr><name>BOOL</name></expr>, <expr><name>OPT_OFF</name></expr>, <expr><operator>&amp;</operator><name>no_hist_dups</name></expr>, <expr><name>NULL</name></expr>,
<expr><block>{
<expr><literal type="string">"Allow duplicates in history list"</literal></expr>,
<expr><literal type="string">"Remove duplicates from history list"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr>
}</block></expr>,
<expr><block>{ <expr><name>OLETTER_NONE</name></expr>, <expr><operator>&amp;</operator><name>mousecap_optname</name></expr>,
<expr><name>TRIPLE</name></expr>, <expr><name>OPT_OFF</name></expr>, <expr><operator>&amp;</operator><name>mousecap</name></expr>, <expr><name>opt_mousecap</name></expr>,
<expr><block>{
<expr><literal type="string">"Ignore mouse input"</literal></expr>,
<expr><literal type="string">"Use the mouse for scrolling"</literal></expr>,
<expr><literal type="string">"Use the mouse for scrolling (reverse)"</literal></expr>
}</block></expr>
}</block></expr>,
<expr><block>{ <expr><name>OLETTER_NONE</name></expr>, <expr><operator>&amp;</operator><name>wheel_lines_optname</name></expr>,
<expr><name>NUMBER</name><operator>|</operator><name>INIT_HANDLER</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>&amp;</operator><name>wheel_lines</name></expr>, <expr><name>opt_wheel_lines</name></expr>,
<expr><block>{
<expr><literal type="string">"Lines to scroll on mouse wheel: "</literal></expr>,
<expr><literal type="string">"Scroll %d line(s) on mouse wheel"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr>
}</block></expr>,
<expr><block>{ <expr><name>OLETTER_NONE</name></expr>, <expr><operator>&amp;</operator><name>perma_marks_optname</name></expr>,
<expr><name>BOOL</name></expr>, <expr><name>OPT_OFF</name></expr>, <expr><operator>&amp;</operator><name>perma_marks</name></expr>, <expr><name>NULL</name></expr>,
<expr><block>{
<expr><literal type="string">"Don't save marks in history file"</literal></expr>,
<expr><literal type="string">"Save marks in history file"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr>
}</block></expr>,
<expr><block>{ <expr><name>OLETTER_NONE</name></expr>, <expr><operator>&amp;</operator><name>linenum_width_optname</name></expr>,
<expr><name>NUMBER</name><operator>|</operator><name>REPAINT</name></expr>, <expr><name>MIN_LINENUM_WIDTH</name></expr>, <expr><operator>&amp;</operator><name>linenum_width</name></expr>, <expr><name>opt_linenum_width</name></expr>,
<expr><block>{
<expr><literal type="string">"Line number width: "</literal></expr>,
<expr><literal type="string">"Line number width is %d chars"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr>
}</block></expr>,
<expr><block>{ <expr><name>OLETTER_NONE</name></expr>, <expr><operator>&amp;</operator><name>status_col_width_optname</name></expr>,
<expr><name>NUMBER</name><operator>|</operator><name>REPAINT</name></expr>, <expr><literal type="number">2</literal></expr>, <expr><operator>&amp;</operator><name>status_col_width</name></expr>, <expr><name>opt_status_col_width</name></expr>,
<expr><block>{
<expr><literal type="string">"Status column width: "</literal></expr>,
<expr><literal type="string">"Status column width is %d chars"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr>
}</block></expr>,
<expr><block>{ <expr><name>OLETTER_NONE</name></expr>, <expr><operator>&amp;</operator><name>incr_search_optname</name></expr>,
<expr><name>BOOL</name></expr>, <expr><name>OPT_OFF</name></expr>, <expr><operator>&amp;</operator><name>incr_search</name></expr>, <expr><name>NULL</name></expr>,
<expr><block>{
<expr><literal type="string">"Incremental search is off"</literal></expr>,
<expr><literal type="string">"Incremental search is on"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr>
}</block></expr>,
<expr><block>{ <expr><name>OLETTER_NONE</name></expr>, <expr><operator>&amp;</operator><name>use_color_optname</name></expr>,
<expr><name>BOOL</name><operator>|</operator><name>REPAINT</name></expr>, <expr><name>OPT_OFF</name></expr>, <expr><operator>&amp;</operator><name>use_color</name></expr>, <expr><name>NULL</name></expr>,
<expr><block>{
<expr><literal type="string">"Don't use color"</literal></expr>,
<expr><literal type="string">"Use color"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr>
}</block></expr>,
<expr><block>{ <expr><name>OLETTER_NONE</name></expr>, <expr><operator>&amp;</operator><name>want_filesize_optname</name></expr>,
<expr><name>BOOL</name><operator>|</operator><name>REPAINT</name></expr>, <expr><name>OPT_OFF</name></expr>, <expr><operator>&amp;</operator><name>want_filesize</name></expr>, <expr><name>opt_filesize</name></expr>,
<expr><block>{
<expr><literal type="string">"Don't get size of each file"</literal></expr>,
<expr><literal type="string">"Get size of each file"</literal></expr>,
<expr><name>NULL</name></expr>
}</block></expr>
}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LESSTEST</name></expr></cpp:if>
<expr><block>{ <expr><name>OLETTER_NONE</name></expr>, <expr><operator>&amp;</operator><name>ttyin_name_optname</name></expr>,
<expr><name>STRING</name><operator>|</operator><name>NO_TOGGLE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>opt_ttyin_name</name></expr>,
<expr><block>{
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>
}</block></expr>
}</block></expr>,
<expr><block>{ <expr><name>OLETTER_NONE</name></expr>, <expr><operator>&amp;</operator><name>rstat_optname</name></expr>,
<expr><name>STRING</name><operator>|</operator><name>NO_TOGGLE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>opt_rstat</name></expr>,
<expr><block>{
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>
}</block></expr>
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr><literal type="char">'\0'</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NOVAR</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>





<function><type><name>public</name> <name>void</name></type>
<name>init_option</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>loption</name></name> <modifier>*</modifier></type><name>o</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>lgetenv</name><argument_list>(<argument><expr><literal type="string">"LESS_IS_MORE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isnullenv</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>less_is_more</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>o</name> <operator>=</operator> <name>option</name></expr>;</init> <condition><expr><name><name>o</name><operator>-&gt;</operator><name>oletter</name></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>o</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>ovar</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>o</name><operator>-&gt;</operator><name>ovar</name></name><operator>)</operator> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>odefault</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>otype</name></name> <operator>&amp;</operator> <name>INIT_HANDLER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><name><name>o</name><operator>-&gt;</operator><name>ofunc</name></name><operator>)</operator><operator>)</operator><operator>(</operator><name>INIT</name><operator>,</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><name>public</name> <name><name>struct</name> <name>loption</name></name> <modifier>*</modifier></type>
<name>findopt</name><parameter_list>(<parameter><decl><type><name>c</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>loption</name></name> <modifier>*</modifier></type><name>o</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>o</name> <operator>=</operator> <name>option</name></expr>;</init> <condition><expr><name><name>o</name><operator>-&gt;</operator><name>oletter</name></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>o</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>oletter</name></name> <operator>==</operator> <name>c</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>o</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>o</name><operator>-&gt;</operator><name>otype</name></name> <operator>&amp;</operator> <name>TRIPLE</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>ASCII_TO_UPPER</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>oletter</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>c</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>o</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>is_optchar</name><parameter_list>(<parameter><decl><type><name>c</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ASCII_IS_UPPER</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ASCII_IS_LOWER</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>







<function><type><name>public</name> <name><name>struct</name> <name>loption</name></name> <modifier>*</modifier></type>
<name>findopt_name</name><parameter_list>(<parameter><decl><type><name>p_optname</name></type></decl></parameter>, <parameter><decl><type><name>p_oname</name></type></decl></parameter>, <parameter><decl><type><name>p_err</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p_optname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p_oname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>p_err</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>optname</name> <init>= <expr><operator>*</operator><name>p_optname</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>loption</name></name> <modifier>*</modifier></type><name>o</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>optname</name></name> <modifier>*</modifier></type><name>oname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>uppercase</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>loption</name></name> <modifier>*</modifier></type><name>maxo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>optname</name></name> <modifier>*</modifier></type><name>maxoname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>maxlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ambig</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>exact</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>




<for>for <control>(<init><expr><name>o</name> <operator>=</operator> <name>option</name></expr>;</init> <condition><expr><name><name>o</name><operator>-&gt;</operator><name>oletter</name></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>o</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>



<for>for <control>(<init><expr><name>oname</name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>onames</name></name></expr>;</init> <condition><expr><name>oname</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>oname</name> <operator>=</operator> <name><name>oname</name><operator>-&gt;</operator><name>onext</name></name></expr></incr>)</control>
<block>{<block_content>





<for>for <control>(<init><expr><name>uppercase</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>uppercase</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>uppercase</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>sprefix</name><argument_list>(<argument><expr><name>optname</name></expr></argument>, <argument><expr><name><name>oname</name><operator>-&gt;</operator><name>oname</name></name></expr></argument>, <argument><expr><name>uppercase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>is_optchar</name><argument_list>(<argument><expr><name><name>optname</name><index>[<expr><name>len</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>



<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>exact</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>==</operator> <name>maxlen</name></expr>)</condition><block type="pseudo"><block_content>





<expr_stmt><expr><name>ambig</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>maxlen</name></expr>)</condition>
<block>{<block_content>




<expr_stmt><expr><name>maxo</name> <operator>=</operator> <name>o</name></expr>;</expr_stmt>
<expr_stmt><expr><name>maxoname</name> <operator>=</operator> <name>oname</name></expr>;</expr_stmt>
<expr_stmt><expr><name>maxlen</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ambig</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>exact</name> <operator>=</operator> <operator>(</operator><name>len</name> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>oname</name><operator>-&gt;</operator><name>oname</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>o</name><operator>-&gt;</operator><name>otype</name></name> <operator>&amp;</operator> <name>TRIPLE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>ambig</name></expr>)</condition>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>p_err</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p_err</name> <operator>=</operator> <name>OPT_AMBIG</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>p_optname</name> <operator>=</operator> <name>optname</name> <operator>+</operator> <name>maxlen</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p_oname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p_oname</name> <operator>=</operator> <ternary><condition><expr><name>maxoname</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name><name>maxoname</name><operator>-&gt;</operator><name>oname</name></name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>maxo</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
