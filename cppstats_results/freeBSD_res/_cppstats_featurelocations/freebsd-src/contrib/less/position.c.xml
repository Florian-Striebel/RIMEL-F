<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/less/position.c">



















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"less.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"position.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>POSITION</name> <modifier>*</modifier></type><name>table</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>table_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>sc_width</name></decl>, <decl><type ref="prev"/><name>sc_height</name></decl>;</decl_stmt>










<function><type><name>public</name> <name>POSITION</name></type>
<name>position</name><parameter_list>(<parameter><decl><type><name>sindex</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>sindex</name></decl>;</decl_stmt>
<block>{<block_content>
<switch>switch <condition>(<expr><name>sindex</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>BOTTOM</name></expr>:</case>
<expr_stmt><expr><name>sindex</name> <operator>=</operator> <name>sc_height</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>BOTTOM_PLUS_ONE</name></expr>:</case>
<expr_stmt><expr><name>sindex</name> <operator>=</operator> <name>sc_height</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>MIDDLE</name></expr>:</case>
<expr_stmt><expr><name>sindex</name> <operator>=</operator> <operator>(</operator><name>sc_height</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><operator>(</operator><name><name>table</name><index>[<expr><name>sindex</name></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>public</name> <name>void</name></type>
<name>add_forw_pos</name><parameter_list>(<parameter><decl><type><name>pos</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>POSITION</name></type> <name>pos</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>




<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sc_height</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>table</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>table</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>table</name><index>[<expr><name>sc_height</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>public</name> <name>void</name></type>
<name>add_back_pos</name><parameter_list>(<parameter><decl><type><name>pos</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>POSITION</name></type> <name>pos</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>




<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>sc_height</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>table</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>public</name> <name>void</name></type>
<name>pos_clear</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sc_height</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL_POSITION</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>




<function><type><name>public</name> <name>void</name></type>
<name>pos_init</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>scrpos</name></name></type> <name>scrpos</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sc_height</name> <operator>&lt;=</operator> <name>table_size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>table</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>get_scrpos</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scrpos</name></expr></argument>, <argument><expr><name>TOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>scrpos</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <name>NULL_POSITION</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>table</name> <operator>=</operator> <operator>(</operator><name>POSITION</name> <operator>*</operator><operator>)</operator> <call><name>ecalloc</name><argument_list>(<argument><expr><name>sc_height</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>POSITION</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>table_size</name> <operator>=</operator> <name>sc_height</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pos_clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>scrpos</name><operator>.</operator><name>pos</name></name> <operator>!=</operator> <name>NULL_POSITION</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>table</name><index>[<expr><name><name>scrpos</name><operator>.</operator><name>ln</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>scrpos</name><operator>.</operator><name>pos</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>






<function><type><name>public</name> <name>int</name></type>
<name>onscreen</name><parameter_list>(<parameter><decl><type><name>pos</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>POSITION</name></type> <name>pos</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <name><name>table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sc_height</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <name><name>table</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>i</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>public</name> <name>int</name></type>
<name>empty_screen</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>empty_lines</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sc_height</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>public</name> <name>int</name></type>
<name>empty_lines</name><parameter_list>(<parameter><decl><type><name>s</name></type></decl></parameter>, <parameter><decl><type><name>e</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>e</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>s</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>e</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL_POSITION</name> <operator>&amp;&amp;</operator> <name><name>table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>









<function><type><name>public</name> <name>void</name></type>
<name>get_scrpos</name><parameter_list>(<parameter><decl><type><name>scrpos</name></type></decl></parameter>, <parameter><decl><type><name>where</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name><name>struct</name> <name>scrpos</name></name> <modifier>*</modifier></type><name>scrpos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>where</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>where</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>TOP</name></expr>:</case>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name>dir</name> <operator>=</operator> <operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>last</name> <operator>=</operator> <name>sc_height</name><operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>BOTTOM</name></expr>:</case> <case>case <expr><name>BOTTOM_PLUS_ONE</name></expr>:</case>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>sc_height</name><operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt> <expr_stmt><expr><name>dir</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>last</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>where</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL_POSITION</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>scrpos</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>NULL_POSITION</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<break>break;</break>
</block_content>}</block></switch>





<for>for <control>(<init>;</init><condition>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>dir</name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL_POSITION</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>scrpos</name><operator>-&gt;</operator><name>ln</name></name> <operator>=</operator> <name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>scrpos</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name><name>table</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>last</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>



<expr_stmt><expr><name><name>scrpos</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>NULL_POSITION</name></expr>;</expr_stmt>
</block_content>}</block></function>










<function><type><name>public</name> <name>int</name></type>
<name>sindex_from_sline</name><parameter_list>(<parameter><decl><type><name>sline</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>sline</name></decl>;</decl_stmt>
<block>{<block_content>




<if_stmt><if>if <condition>(<expr><name>sline</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sline</name> <operator>+=</operator> <name>sc_height</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>sline</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sline</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>sline</name> <operator>&gt;</operator> <name>sc_height</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sline</name> <operator>=</operator> <name>sc_height</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



<return>return <expr><operator>(</operator><name>sline</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
