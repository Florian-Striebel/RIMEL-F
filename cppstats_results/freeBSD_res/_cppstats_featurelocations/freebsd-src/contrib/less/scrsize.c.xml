<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/less/scrsize.c">









































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;X11/Xutil.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_winsize</name><parameter_list>(<parameter><decl><type><name>dpy</name></type></decl></parameter>, <parameter><decl><type><name>window</name></type></decl></parameter>, <parameter><decl><type><name>p_width</name></type></decl></parameter>, <parameter><decl><type><name>p_height</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>Display</name> <modifier>*</modifier></type><name>dpy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Window</name></type> <name>window</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>p_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>p_height</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>XWindowAttributes</name></type> <name>win_attributes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>XSizeHints</name></type> <name>hints</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>longjunk</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>XGetWindowAttributes</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>window</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>win_attributes</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>XGetWMNormalHints</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><name>window</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>longjunk</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>hints</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>PResizeInc</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hints</name><operator>.</operator><name>width_inc</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>hints</name><operator>.</operator><name>height_inc</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>hints</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>PBaseSize</name><operator>|</operator><name>PMinSize</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hints</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>PBaseSize</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>win_attributes</name><operator>.</operator><name>width</name></name> <operator>-=</operator> <name><name>hints</name><operator>.</operator><name>base_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>win_attributes</name><operator>.</operator><name>height</name></name> <operator>-=</operator> <name><name>hints</name><operator>.</operator><name>base_height</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else
<block>{<block_content>
<expr_stmt><expr><name><name>win_attributes</name><operator>.</operator><name>width</name></name> <operator>-=</operator> <name><name>hints</name><operator>.</operator><name>min_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>win_attributes</name><operator>.</operator><name>height</name></name> <operator>-=</operator> <name><name>hints</name><operator>.</operator><name>min_height</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>*</operator><name>p_width</name> <operator>=</operator> <name><name>win_attributes</name><operator>.</operator><name>width</name></name> <operator>/</operator> <name><name>hints</name><operator>.</operator><name>width_inc</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p_height</name> <operator>=</operator> <name><name>win_attributes</name><operator>.</operator><name>height</name></name> <operator>/</operator> <name><name>hints</name><operator>.</operator><name>height_inc</name></name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>argc</name></type></decl></parameter>, <parameter><decl><type><name>argv</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>argc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Display</name> <modifier>*</modifier></type><name>dpy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>size</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_scrsize</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"WINDOWID"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>dpy</name> <operator>=</operator> <call><name>XOpenDisplay</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dpy</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>get_winsize</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>, <argument><expr><operator>(</operator><name>Window</name><operator>)</operator> <call><name>atol</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>size</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XCloseDisplay</name><argument_list>(<argument><expr><name>dpy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%i %i\n"</literal></expr></argument>, <argument><expr><name><name>size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>size</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
