<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/less/prompt.c">


















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"less.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"position.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>pr_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>new_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>sc_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>so_s_width</name></decl>, <decl><type ref="prev"/><name>so_e_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>linenums</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>hshift</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>sc_height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>jump_sline</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>less_is_more</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>IFILE</name></type> <name>curr_ifile</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>EDITOR</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>editor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>editproto</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<decl_stmt><decl><type><specifier>static</specifier> <name>constant</name> <name>char</name></type> <name><name>s_proto</name><index>[]</index></name> <init>=
<expr><literal type="string">"?n?f%f .?m(%T %i of %m) ..?e(END) ?x- Next\\: %x..%t"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>constant</name> <name>char</name></type> <name><name>m_proto</name><index>[]</index></name> <init>=
<expr><literal type="string">"?n?f%f .?m(%T %i of %m) ..?e(END) ?x- Next\\: %x.:?pB%pB\\%:byte %bB?s/%s...%t"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>constant</name> <name>char</name></type> <name><name>M_proto</name><index>[]</index></name> <init>=
<expr><literal type="string">"?f%f .?n?m(%T %i of %m) ..?ltlines %lt-%lb?L/%L. :byte %bB?s/%s. .?e(END) ?x- Next\\: %x.:?pB%pB\\%..%t"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>constant</name> <name>char</name></type> <name><name>e_proto</name><index>[]</index></name> <init>=
<expr><literal type="string">"?f%f .?m(%T %i of %m) .?ltlines %lt-%lb?L/%L. .byte %bB?s/%s. ?e(END) :?pB%pB\\%..%t"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>constant</name> <name>char</name></type> <name><name>h_proto</name><index>[]</index></name> <init>=
<expr><literal type="string">"HELP -- ?eEND -- Press g to see it again:Press RETURN for more., or q when done"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>constant</name> <name>char</name></type> <name><name>w_proto</name><index>[]</index></name> <init>=
<expr><literal type="string">"Waiting for data"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>constant</name> <name>char</name></type> <name><name>more_proto</name><index>[]</index></name> <init>=
<expr><literal type="string">"--More--(?eEND ?x- Next\\: %x.:?pB%pB\\%:byte %bB?s/%s...%t)"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>public</name> <name>char</name> <modifier>*</modifier></type><name><name>prproto</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>char</name> <name>constant</name> <modifier>*</modifier></type><name>eqproto</name> <init>= <expr><name>e_proto</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>char</name> <name>constant</name> <modifier>*</modifier></type><name>hproto</name> <init>= <expr><name>h_proto</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>char</name> <name>constant</name> <modifier>*</modifier></type><name>wproto</name> <init>= <expr><name>w_proto</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>message</name><index>[<expr><name>PROMPT_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>mp</name></decl>;</decl_stmt>




<function><type><name>public</name> <name>void</name></type>
<name>init_prompt</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>prproto</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>save</name><argument_list>(<argument><expr><name>s_proto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prproto</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>save</name><argument_list>(<argument><expr><ternary><condition><expr><name>less_is_more</name></expr> ?</condition><then> <expr><name>more_proto</name></expr> </then><else>: <expr><name>m_proto</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prproto</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>save</name><argument_list>(<argument><expr><name>M_proto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>eqproto</name> <operator>=</operator> <call><name>save</name><argument_list>(<argument><expr><name>e_proto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hproto</name> <operator>=</operator> <call><name>save</name><argument_list>(<argument><expr><name>h_proto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>wproto</name> <operator>=</operator> <call><name>save</name><argument_list>(<argument><expr><name>w_proto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>ap_str</name><parameter_list>(<parameter><decl><type><name>s</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mp</name> <operator>+</operator> <name>len</name> <operator>&gt;=</operator> <name>message</name> <operator>+</operator> <name>PROMPT_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>message</name> <operator>+</operator> <name>PROMPT_SIZE</name> <operator>-</operator> <name>mp</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mp</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>mp</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>ap_char</name><parameter_list>(<parameter><decl><type><name>c</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>ap_pos</name><parameter_list>(<parameter><decl><type><name>pos</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>POSITION</name></type> <name>pos</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><call><name>INT_STRLEN_BOUND</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>postoa</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>ap_linenum</name><parameter_list>(<parameter><decl><type><name>linenum</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>LINENUM</name></type> <name>linenum</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><call><name>INT_STRLEN_BOUND</name><argument_list>(<argument><expr><name>linenum</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>linenumtoa</name><argument_list>(<argument><expr><name>linenum</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>ap_int</name><parameter_list>(<parameter><decl><type><name>num</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><call><name>INT_STRLEN_BOUND</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>inttoa</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>ap_quest</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ap_str</name><argument_list>(<argument><expr><literal type="string">"?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>POSITION</name></type>
<name>curr_byte</name><parameter_list>(<parameter><decl><type><name>where</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>where</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>POSITION</name></type> <name>pos</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>position</name><argument_list>(<argument><expr><name>where</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>pos</name> <operator>==</operator> <name>NULL_POSITION</name> <operator>&amp;&amp;</operator> <name>where</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>where</name> <operator>&lt;</operator> <name>sc_height</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>position</name><argument_list>(<argument><expr><operator>++</operator><name>where</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <name>NULL_POSITION</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>ch_length</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>pos</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type>
<name>cond</name><parameter_list>(<parameter><decl><type><name>c</name></type></decl></parameter>, <parameter><decl><type><name>where</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>where</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>POSITION</name></type> <name>len</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>c</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'a'</literal></expr>:</case>
<return>return <expr><operator>(</operator><name>mp</name> <operator>&gt;</operator> <name>message</name><operator>)</operator></expr>;</return>
<case>case <expr><literal type="char">'b'</literal></expr>:</case>
<return>return <expr><operator>(</operator><call><name>curr_byte</name><argument_list>(<argument><expr><name>where</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL_POSITION</name><operator>)</operator></expr>;</return>
<case>case <expr><literal type="char">'c'</literal></expr>:</case>
<return>return <expr><operator>(</operator><name>hshift</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
<case>case <expr><literal type="char">'e'</literal></expr>:</case>
<return>return <expr><operator>(</operator><call><name>eof_displayed</name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
<case>case <expr><literal type="char">'f'</literal></expr>:</case>
<case>case <expr><literal type="char">'g'</literal></expr>:</case>
<return>return <expr><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><call><name>get_filename</name><argument_list>(<argument><expr><name>curr_ifile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
<case>case <expr><literal type="char">'l'</literal></expr>:</case>
<case>case <expr><literal type="char">'d'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>linenums</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>currline</name><argument_list>(<argument><expr><name>where</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
<case>case <expr><literal type="char">'L'</literal></expr>:</case>
<case>case <expr><literal type="char">'D'</literal></expr>:</case>
<return>return <expr><operator>(</operator><name>linenums</name> <operator>&amp;&amp;</operator> <call><name>ch_length</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>NULL_POSITION</name><operator>)</operator></expr>;</return>
<case>case <expr><literal type="char">'m'</literal></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TAGS</name></expr></cpp:if>
<return>return <expr><operator>(</operator><ternary><condition><expr><call><name>ntags</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><operator>(</operator><call><name>ntags</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><call><name>nifile</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></else></ternary><operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><call><name>nifile</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><literal type="char">'n'</literal></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TAGS</name></expr></cpp:if>
<return>return <expr><operator>(</operator><ternary><condition><expr><call><name>ntags</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name>new_file</name></expr></else></ternary><operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>new_file</name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><literal type="char">'p'</literal></expr>:</case>
<return>return <expr><operator>(</operator><call><name>curr_byte</name><argument_list>(<argument><expr><name>where</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL_POSITION</name> <operator>&amp;&amp;</operator>
<call><name>ch_length</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
<case>case <expr><literal type="char">'P'</literal></expr>:</case>
<return>return <expr><operator>(</operator><call><name>currline</name><argument_list>(<argument><expr><name>where</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name>len</name> <operator>=</operator> <call><name>ch_length</name><argument_list>()</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>find_linenum</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
<case>case <expr><literal type="char">'s'</literal></expr>:</case>
<case>case <expr><literal type="char">'B'</literal></expr>:</case>
<return>return <expr><operator>(</operator><call><name>ch_length</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>NULL_POSITION</name><operator>)</operator></expr>;</return>
<case>case <expr><literal type="char">'x'</literal></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TAGS</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>ntags</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><operator>(</operator><call><name>next_ifile</name><argument_list>(<argument><expr><name>curr_ifile</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL_IFILE</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>void</name></type>
<name>protochar</name><parameter_list>(<parameter><decl><type><name>c</name></type></decl></parameter>, <parameter><decl><type><name>where</name></type></decl></parameter>, <parameter><decl><type><name>iseditproto</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>where</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>iseditproto</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>POSITION</name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>POSITION</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LINENUM</name></type> <name>linenum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LINENUM</name></type> <name>last_linenum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IFILE</name></type> <name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PAGE_NUM</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAGE_NUM</name><parameter_list>(<parameter><type><name>linenum</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((linenum) - 1) / (sc_height - 1)) + 1)</cpp:value></cpp:define>

<switch>switch <condition>(<expr><name>c</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'b'</literal></expr>:</case>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>curr_byte</name><argument_list>(<argument><expr><name>where</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>!=</operator> <name>NULL_POSITION</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ap_pos</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ap_quest</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'c'</literal></expr>:</case>
<expr_stmt><expr><call><name>ap_int</name><argument_list>(<argument><expr><name>hshift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'d'</literal></expr>:</case>
<expr_stmt><expr><name>linenum</name> <operator>=</operator> <call><name>currline</name><argument_list>(<argument><expr><name>where</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>linenum</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>sc_height</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ap_linenum</name><argument_list>(<argument><expr><call><name>PAGE_NUM</name><argument_list>(<argument><expr><name>linenum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ap_quest</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'D'</literal></expr>:</case>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>ch_length</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <name>NULL_POSITION</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ap_quest</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ap_linenum</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>linenum</name> <operator>=</operator> <call><name>find_linenum</name><argument_list>(<argument><expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>linenum</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ap_quest</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ap_linenum</name><argument_list>(<argument><expr><call><name>PAGE_NUM</name><argument_list>(<argument><expr><name>linenum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>EDITOR</name></expr></cpp:if>
<case>case <expr><literal type="char">'E'</literal></expr>:</case>
<expr_stmt><expr><call><name>ap_str</name><argument_list>(<argument><expr><name>editor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><literal type="char">'f'</literal></expr>:</case>
<expr_stmt><expr><call><name>ap_str</name><argument_list>(<argument><expr><call><name>get_filename</name><argument_list>(<argument><expr><name>curr_ifile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'F'</literal></expr>:</case>
<expr_stmt><expr><call><name>ap_str</name><argument_list>(<argument><expr><call><name>last_component</name><argument_list>(<argument><expr><call><name>get_filename</name><argument_list>(<argument><expr><name>curr_ifile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'g'</literal></expr>:</case>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>shell_quote</name><argument_list>(<argument><expr><call><name>get_filename</name><argument_list>(<argument><expr><name>curr_ifile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_str</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'i'</literal></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TAGS</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>ntags</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ap_int</name><argument_list>(<argument><expr><call><name>curr_tag</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>ap_int</name><argument_list>(<argument><expr><call><name>get_index</name><argument_list>(<argument><expr><name>curr_ifile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'l'</literal></expr>:</case>
<expr_stmt><expr><name>linenum</name> <operator>=</operator> <call><name>currline</name><argument_list>(<argument><expr><name>where</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>linenum</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ap_linenum</name><argument_list>(<argument><expr><name>linenum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ap_quest</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'L'</literal></expr>:</case>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>ch_length</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <name>NULL_POSITION</name> <operator>||</operator> <name>len</name> <operator>==</operator> <call><name>ch_zero</name><argument_list>()</argument_list></call> <operator>||</operator>
<operator>(</operator><name>linenum</name> <operator>=</operator> <call><name>find_linenum</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ap_quest</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ap_linenum</name><argument_list>(<argument><expr><name>linenum</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'m'</literal></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TAGS</name></expr></cpp:if>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>ntags</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ap_int</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>ap_int</name><argument_list>(<argument><expr><call><name>nifile</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'p'</literal></expr>:</case>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>curr_byte</name><argument_list>(<argument><expr><name>where</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>ch_length</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>!=</operator> <name>NULL_POSITION</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ap_int</name><argument_list>(<argument><expr><call><name>percentage</name><argument_list>(<argument><expr><name>pos</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ap_quest</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'P'</literal></expr>:</case>
<expr_stmt><expr><name>linenum</name> <operator>=</operator> <call><name>currline</name><argument_list>(<argument><expr><name>where</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>linenum</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<operator>(</operator><name>len</name> <operator>=</operator> <call><name>ch_length</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL_POSITION</name> <operator>||</operator> <name>len</name> <operator>==</operator> <call><name>ch_zero</name><argument_list>()</argument_list></call> <operator>||</operator>
<operator>(</operator><name>last_linenum</name> <operator>=</operator> <call><name>find_linenum</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ap_quest</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ap_int</name><argument_list>(<argument><expr><call><name>percentage</name><argument_list>(<argument><expr><name>linenum</name></expr></argument>, <argument><expr><name>last_linenum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'s'</literal></expr>:</case>
<case>case <expr><literal type="char">'B'</literal></expr>:</case>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>ch_length</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <name>NULL_POSITION</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ap_pos</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ap_quest</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'t'</literal></expr>:</case>
<while>while <condition>(<expr><name>mp</name> <operator>&gt;</operator> <name>message</name> <operator>&amp;&amp;</operator> <name><name>mp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mp</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><operator>*</operator><name>mp</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'T'</literal></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TAGS</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>ntags</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ap_str</name><argument_list>(<argument><expr><literal type="string">"tag"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>ap_str</name><argument_list>(<argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'x'</literal></expr>:</case>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>next_ifile</name><argument_list>(<argument><expr><name>curr_ifile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>h</name> <operator>!=</operator> <name>NULL_IFILE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ap_str</name><argument_list>(<argument><expr><call><name>get_filename</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ap_quest</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>constant</name> <name>char</name> <modifier>*</modifier></type>
<name>skipcond</name><parameter_list>(<parameter><decl><type><name>p</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>constant</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>iflevel</name></decl>;</decl_stmt>





<expr_stmt><expr><name>iflevel</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control><block type="pseudo"><block_content> <switch>switch <condition>(<expr><operator>*</operator><operator>++</operator><name>p</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'?'</literal></expr>:</case>



<expr_stmt><expr><name>iflevel</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">':'</literal></expr>:</case>





<if_stmt><if>if <condition>(<expr><name>iflevel</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>p</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'.'</literal></expr>:</case>





<if_stmt><if>if <condition>(<expr><operator>--</operator><name>iflevel</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>p</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'\\'</literal></expr>:</case>



<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'\0'</literal></expr>:</case>





<return>return <expr><operator>(</operator><name>p</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></switch></block_content></block></for>

</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>constant</name> <name>char</name> <modifier>*</modifier></type>
<name>wherechar</name><parameter_list>(<parameter><decl><type><name>p</name></type></decl></parameter>, <parameter><decl><type><name>wp</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <name>constant</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>wp</name></decl>;</decl_stmt>
<block>{<block_content>
<switch>switch <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'b'</literal></expr>:</case> <case>case <expr><literal type="char">'d'</literal></expr>:</case> <case>case <expr><literal type="char">'l'</literal></expr>:</case> <case>case <expr><literal type="char">'p'</literal></expr>:</case> <case>case <expr><literal type="char">'P'</literal></expr>:</case>
<switch>switch <condition>(<expr><operator>*</operator><operator>++</operator><name>p</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'t'</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>wp</name> <operator>=</operator> <name>TOP</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'m'</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>wp</name> <operator>=</operator> <name>MIDDLE</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'b'</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>wp</name> <operator>=</operator> <name>BOTTOM</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'B'</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>wp</name> <operator>=</operator> <name>BOTTOM_PLUS_ONE</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'j'</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>wp</name> <operator>=</operator> <call><name>sindex_from_sline</name><argument_list>(<argument><expr><name>jump_sline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><operator>*</operator><name>wp</name> <operator>=</operator> <name>TOP</name></expr>;</expr_stmt> <expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></switch>
<return>return <expr><operator>(</operator><name>p</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>public</name> <name>char</name> <modifier>*</modifier></type>
<name>pr_expand</name><parameter_list>(<parameter><decl><type><name>proto</name></type></decl></parameter>, <parameter><decl><type><name>maxwidth</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>constant</name> <name>char</name> <modifier>*</modifier></type><name>proto</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>maxwidth</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>constant</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>where</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mp</name> <operator>=</operator> <name>message</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>proto</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="string">""</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>proto</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<switch>switch <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition>
<block>{<block_content>
<default>default:</default>
<expr_stmt><expr><call><name>ap_char</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'\\'</literal></expr>:</case>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_char</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'?'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>p</name><operator>)</operator> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name>p</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>where</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>wherechar</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>where</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cond</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>where</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skipcond</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">':'</literal></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skipcond</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'.'</literal></expr>:</case>
<break>break;</break>
<case>case <expr><literal type="char">'%'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>p</name><operator>)</operator> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name>p</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>where</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>wherechar</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>where</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>protochar</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>where</name></expr></argument>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>EDITOR</name></expr></cpp:if>
<argument><expr><operator>(</operator><name>proto</name> <operator>==</operator> <name>editproto</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><literal type="number">0</literal></expr></expr_stmt>)</block_content></block><empty_stmt>;</empty_stmt></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></switch>
<break>break;</break>
</block_content>}</block></for>
</block_content>}</block></function>

<if_stmt><if>if <condition>(<expr><name>mp</name> <operator>==</operator> <name>message</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="string">""</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>maxwidth</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>mp</name> <operator>&gt;=</operator> <name>message</name> <operator>+</operator> <name>maxwidth</name></expr>)</condition>
<block>{<block_content>




<return>return <expr><operator>(</operator><name>mp</name> <operator>-</operator> <name>maxwidth</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>message</name><operator>)</operator></expr>;</return>
}




public <function><type><name>char</name> <modifier>*</modifier></type>
<name>eq_message</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>pr_expand</name><argument_list>(<argument><expr><name>eqproto</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>







<function><type><name>public</name> <name>char</name> <modifier>*</modifier></type>
<name>pr_string</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>prompt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>!</operator><name>less_is_more</name><operator>)</operator></expr> ?</condition><then> <expr><name>pr_type</name></expr> </then><else>: <expr><ternary><condition><expr><name>pr_type</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>prompt</name> <operator>=</operator> <call><name>pr_expand</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><call><name>ch_getflags</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>CH_HELPFILE</name><operator>)</operator></expr> ?</condition><then>
<expr><name>hproto</name></expr> </then><else>: <expr><name><name>prproto</name><index>[<expr><name>type</name></expr>]</index></name></expr></else></ternary></expr></argument>,
<argument><expr><name>sc_width</name><operator>-</operator><name>so_s_width</name><operator>-</operator><name>so_e_width</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>new_file</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>prompt</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>public</name> <name>char</name> <modifier>*</modifier></type>
<name>wait_message</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>pr_expand</name><argument_list>(<argument><expr><name>wproto</name></expr></argument>, <argument><expr><name>sc_width</name><operator>-</operator><name>so_s_width</name><operator>-</operator><name>so_e_width</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
