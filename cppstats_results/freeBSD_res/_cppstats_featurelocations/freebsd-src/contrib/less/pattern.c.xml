<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/less/pattern.c">












<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"less.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>caseless</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>utf_mode</name></decl>;</decl_stmt>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>compile_pattern2</name><parameter_list>(<parameter><decl><type><name>pattern</name></type></decl></parameter>, <parameter><decl><type><name>search_type</name></type></decl></parameter>, <parameter><decl><type><name>comp_pattern</name></type></decl></parameter>, <parameter><decl><type><name>show_error</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pattern</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>search_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PATTERN_TYPE</name> <modifier>*</modifier></type><name>comp_pattern</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>show_error</name></decl>;</decl_stmt>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>search_type</name> <operator>&amp;</operator> <name>SRCH_NO_REGEX</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_GNU_REGEX</name></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>re_pattern_buffer</name></name> <modifier>*</modifier></type><name>comp</name> <init>= <expr><operator>(</operator>struct <name>re_pattern_buffer</name> <operator>*</operator><operator>)</operator>
<call><name>ecalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>re_pattern_buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>re_set_syntax</name><argument_list>(<argument><expr><name>RE_SYNTAX_POSIX_EXTENDED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>re_compile_pattern</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>comp</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>show_error</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Invalid pattern"</literal></expr></argument>, <argument><expr><name>NULL_PARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>comp_pattern</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>regfree</name><argument_list>(<argument><expr><operator>*</operator><name>comp_pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>comp_pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>comp_pattern</name> <operator>=</operator> <name>comp</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_POSIX_REGCOMP</name></expr></cpp:if>
<decl_stmt><decl><type><name>regex_t</name> <modifier>*</modifier></type><name>comp</name> <init>= <expr><operator>(</operator><name>regex_t</name> <operator>*</operator><operator>)</operator> <call><name>ecalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>regex_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>regcomp</name><argument_list>(<argument><expr><name>comp</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>REGCOMP_FLAG</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>show_error</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Invalid pattern"</literal></expr></argument>, <argument><expr><name>NULL_PARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>comp_pattern</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>regfree</name><argument_list>(<argument><expr><operator>*</operator><name>comp_pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>comp_pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>comp_pattern</name> <operator>=</operator> <name>comp</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_PCRE</name></expr></cpp:if>
<decl_stmt><decl><type><name>constant</name> <name>char</name> <modifier>*</modifier></type><name>errstring</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>erroffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PARG</name></type> <name>parg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pcre</name> <modifier>*</modifier></type><name>comp</name> <init>= <expr><call><name>pcre_compile</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name>utf_mode</name><operator>)</operator></expr> ?</condition><then> <expr><name>PCRE_UTF8</name> <operator>|</operator> <name>PCRE_NO_UTF8_CHECK</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,
<argument><expr><operator>&amp;</operator><name>errstring</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>erroffset</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>comp</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>parg</name><operator>.</operator><name>p_string</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>errstring</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>show_error</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>parg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>comp_pattern</name> <operator>=</operator> <name>comp</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_PCRE2</name></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>errcode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PCRE2_SIZE</name></type> <name>erroffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PARG</name></type> <name>parg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pcre2_code</name> <modifier>*</modifier></type><name>comp</name> <init>= <expr><call><name>pcre2_compile</name><argument_list>(<argument><expr><operator>(</operator><name>PCRE2_SPTR</name><operator>)</operator><name>pattern</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>errcode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>erroffset</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>comp</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>show_error</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>msg</name><index>[<expr><literal type="number">160</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>pcre2_get_error_message</name><argument_list>(<argument><expr><name>errcode</name></expr></argument>, <argument><expr><operator>(</operator><name>PCRE2_UCHAR</name><operator>*</operator><operator>)</operator><name>msg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parg</name><operator>.</operator><name>p_string</name></name> <operator>=</operator> <name>msg</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>parg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>comp_pattern</name> <operator>=</operator> <name>comp</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_RE_COMP</name></expr></cpp:if>
<decl_stmt><decl><type><name>PARG</name></type> <name>parg</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>parg</name><operator>.</operator><name>p_string</name></name> <operator>=</operator> <call><name>re_comp</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>show_error</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>parg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>comp_pattern</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_REGCMP</name></expr></cpp:if>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>comp</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>comp</name> <operator>=</operator> <call><name>regcmp</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>show_error</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Invalid pattern"</literal></expr></argument>, <argument><expr><name>NULL_PARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>comp_pattern</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>comp_pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>comp_pattern</name> <operator>=</operator> <name>comp</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_V8_REGCOMP</name></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>regexp</name></name> <modifier>*</modifier></type><name>comp</name></decl>;</decl_stmt>
<expr_stmt><expr><name>reg_show_error</name> <operator>=</operator> <name>show_error</name></expr>;</expr_stmt>
<expr_stmt><expr><name>comp</name> <operator>=</operator> <call><name>regcomp</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reg_show_error</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>comp</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>




<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>comp_pattern</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>comp_pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>comp_pattern</name> <operator>=</operator> <name>comp</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>public</name> <name>int</name></type>
<name>compile_pattern</name><parameter_list>(<parameter><decl><type><name>pattern</name></type></decl></parameter>, <parameter><decl><type><name>search_type</name></type></decl></parameter>, <parameter><decl><type><name>show_error</name></type></decl></parameter>, <parameter><decl><type><name>comp_pattern</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pattern</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>search_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>show_error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PATTERN_TYPE</name> <modifier>*</modifier></type><name>comp_pattern</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cvt_pattern</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>caseless</name> <operator>!=</operator> <name>OPT_ONPLUS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cvt_pattern</name> <operator>=</operator> <name>pattern</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>cvt_pattern</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>ecalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>cvt_length</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>CVT_TO_LC</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cvt_text</name><argument_list>(<argument><expr><name>cvt_pattern</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>NULL</name></expr></argument>, <argument><expr><name>CVT_TO_LC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>compile_pattern2</name><argument_list>(<argument><expr><name>cvt_pattern</name></expr></argument>, <argument><expr><name>search_type</name></expr></argument>, <argument><expr><name>comp_pattern</name></expr></argument>, <argument><expr><name>show_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cvt_pattern</name> <operator>!=</operator> <name>pattern</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cvt_pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>public</name> <name>void</name></type>
<name>uncompile_pattern</name><parameter_list>(<parameter><decl><type><name>pattern</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>PATTERN_TYPE</name> <modifier>*</modifier></type><name>pattern</name></decl>;</decl_stmt>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_GNU_REGEX</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pattern</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>regfree</name><argument_list>(<argument><expr><operator>*</operator><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>pattern</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_POSIX_REGCOMP</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pattern</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>regfree</name><argument_list>(<argument><expr><operator>*</operator><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>pattern</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_PCRE</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pattern</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pcre_free</name><argument_list>(<argument><expr><operator>*</operator><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>pattern</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_PCRE2</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pattern</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pcre2_code_free</name><argument_list>(<argument><expr><operator>*</operator><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>pattern</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_RE_COMP</name></expr></cpp:if>
<expr_stmt><expr><operator>*</operator><name>pattern</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_REGCMP</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pattern</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>pattern</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_V8_REGCOMP</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pattern</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>pattern</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>



public int
valid_pattern(pattern)
char *pattern;
{
PATTERN_TYPE comp_pattern;
int result;

SET_NULL_PATTERN(comp_pattern);
result = compile_pattern2(pattern, 0, &amp;comp_pattern, 0);
if (result != 0)
return (0);
uncompile_pattern(&amp;comp_pattern);
return (1);
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><name>public</name> <name>int</name></type>
<name>is_null_pattern</name><parameter_list>(<parameter><decl><type><name>pattern</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>PATTERN_TYPE</name></type> <name>pattern</name></decl>;</decl_stmt>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_GNU_REGEX</name></expr></cpp:if>
<return>return <expr><operator>(</operator><name>pattern</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_POSIX_REGCOMP</name></expr></cpp:if>
<return>return <expr><operator>(</operator><name>pattern</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_PCRE</name></expr></cpp:if>
<return>return <expr><operator>(</operator><name>pattern</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_PCRE2</name></expr></cpp:if>
<return>return <expr><operator>(</operator><name>pattern</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_RE_COMP</name></expr></cpp:if>
<return>return <expr><operator>(</operator><name>pattern</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_REGCMP</name></expr></cpp:if>
<return>return <expr><operator>(</operator><name>pattern</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_V8_REGCOMP</name></expr></cpp:if>
<return>return <expr><operator>(</operator><name>pattern</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>NO_REGEX</name></expr></cpp:if>
<return>return <expr><operator>(</operator><name>pattern</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>match</name><parameter_list>(<parameter><decl><type><name>pattern</name></type></decl></parameter>, <parameter><decl><type><name>pattern_len</name></type></decl></parameter>, <parameter><decl><type><name>buf</name></type></decl></parameter>, <parameter><decl><type><name>buf_len</name></type></decl></parameter>, <parameter><decl><type><name>pfound</name></type></decl></parameter>, <parameter><decl><type><name>pend</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pattern</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pattern_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buf_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pfound</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>pend</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>lp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pattern_end</name> <init>= <expr><name>pattern</name> <operator>+</operator> <name>pattern_len</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf_end</name> <init>= <expr><name>buf</name> <operator>+</operator> <name>buf_len</name></expr></init></decl>;</decl_stmt>

<for>for <control>( <init>;</init> <condition><expr><name>buf</name> <operator>&lt;</operator> <name>buf_end</name></expr>;</condition> <incr><expr><name>buf</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<for>for <control>(<init><expr><name>pp</name> <operator>=</operator> <name>pattern</name></expr><operator>,</operator> <expr><name>lp</name> <operator>=</operator> <name>buf</name></expr>;</init> <condition>;</condition> <incr><expr><name>pp</name><operator>++</operator></expr><operator>,</operator> <expr><name>lp</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>cp</name> <init>= <expr><operator>*</operator><name>pp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>cl</name> <init>= <expr><operator>*</operator><name>lp</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>caseless</name> <operator>==</operator> <name>OPT_ONPLUS</name> <operator>&amp;&amp;</operator> <call><name>ASCII_IS_UPPER</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>ASCII_TO_LOWER</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cp</name> <operator>!=</operator> <name>cl</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pp</name> <operator>==</operator> <name>pattern_end</name> <operator>||</operator> <name>lp</name> <operator>==</operator> <name>buf_end</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>pp</name> <operator>==</operator> <name>pattern_end</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pfound</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pfound</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pend</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>pend</name> <operator>=</operator> <name>lp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>public</name> <name>int</name></type>
<name>match_pattern</name><parameter_list>(<parameter><decl><type><name>pattern</name></type></decl></parameter>, <parameter><decl><type><name>tpattern</name></type></decl></parameter>, <parameter><decl><type><name>line</name></type></decl></parameter>, <parameter><decl><type><name>line_len</name></type></decl></parameter>, <parameter><decl><type><name>sp</name></type></decl></parameter>, <parameter><decl><type><name>ep</name></type></decl></parameter>, <parameter><decl><type><name>notbol</name></type></decl></parameter>, <parameter><decl><type><name>search_type</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>PATTERN_TYPE</name></type> <name>pattern</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tpattern</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>line_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>sp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>notbol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>search_type</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>matched</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>sp</name> <operator>=</operator> <operator>*</operator><name>ep</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>NO_REGEX</name></expr></cpp:if>
<expr_stmt><expr><name>search_type</name> <operator>|=</operator> <name>SRCH_NO_REGEX</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>search_type</name> <operator>&amp;</operator> <name>SRCH_NO_REGEX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>matched</name> <operator>=</operator> <call><name>match</name><argument_list>(<argument><expr><name>tpattern</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>tpattern</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>line_len</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_GNU_REGEX</name></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>re_registers</name></name></type> <name>search_regs</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>pattern</name><operator>-&gt;</operator><name>not_bol</name></name> <operator>=</operator> <name>notbol</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pattern</name><operator>-&gt;</operator><name>regs_allocated</name></name> <operator>=</operator> <name>REGS_UNALLOCATED</name></expr>;</expr_stmt>
<expr_stmt><expr><name>matched</name> <operator>=</operator> <call><name>re_search</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>line_len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>line_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>search_regs</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>matched</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>sp</name> <operator>=</operator> <name>line</name> <operator>+</operator> <name><name>search_regs</name><operator>.</operator><name>start</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ep</name> <operator>=</operator> <name>line</name> <operator>+</operator> <name><name>search_regs</name><operator>.</operator><name>end</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_POSIX_REGCOMP</name></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>regmatch_t</name></type> <name>rm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>notbol</name><operator>)</operator></expr> ?</condition><then> <expr><name>REG_NOTBOL</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REG_STARTEND</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>REG_STARTEND</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rm</name><operator>.</operator><name>rm_so</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rm</name><operator>.</operator><name>rm_eo</name></name> <operator>=</operator> <name>line_len</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>matched</name> <operator>=</operator> <operator>!</operator><call><name>regexec</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rm</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>matched</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__WATCOMC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>*</operator><name>sp</name> <operator>=</operator> <name>line</name> <operator>+</operator> <name><name>rm</name><operator>.</operator><name>rm_so</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ep</name> <operator>=</operator> <name>line</name> <operator>+</operator> <name><name>rm</name><operator>.</operator><name>rm_eo</name></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>*</operator><name>sp</name> <operator>=</operator> <name><name>rm</name><operator>.</operator><name>rm_sp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ep</name> <operator>=</operator> <name><name>rm</name><operator>.</operator><name>rm_ep</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_PCRE</name></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>notbol</name><operator>)</operator></expr> ?</condition><then> <expr><name>PCRE_NOTBOL</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>ovector</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>matched</name> <operator>=</operator> <call><name>pcre_exec</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>line_len</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>ovector</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>matched</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>sp</name> <operator>=</operator> <name>line</name> <operator>+</operator> <name><name>ovector</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ep</name> <operator>=</operator> <name>line</name> <operator>+</operator> <name><name>ovector</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_PCRE2</name></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>notbol</name><operator>)</operator></expr> ?</condition><then> <expr><name>PCRE2_NOTBOL</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pcre2_match_data</name> <modifier>*</modifier></type><name>md</name> <init>= <expr><call><name>pcre2_match_data_create</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>matched</name> <operator>=</operator> <call><name>pcre2_match</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><operator>(</operator><name>PCRE2_SPTR</name><operator>)</operator><name>line</name></expr></argument>, <argument><expr><name>line_len</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>md</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>matched</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>PCRE2_SIZE</name> <modifier>*</modifier></type><name>ovector</name> <init>= <expr><call><name>pcre2_get_ovector_pointer</name><argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>sp</name> <operator>=</operator> <name>line</name> <operator>+</operator> <name><name>ovector</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ep</name> <operator>=</operator> <name>line</name> <operator>+</operator> <name><name>ovector</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>pcre2_match_data_free</name><argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_RE_COMP</name></expr></cpp:if>
<expr_stmt><expr><name>matched</name> <operator>=</operator> <operator>(</operator><call><name>re_exec</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>



<expr_stmt><expr><operator>*</operator><name>sp</name> <operator>=</operator> <operator>*</operator><name>ep</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_REGCMP</name></expr></cpp:if>
<expr_stmt><expr><operator>*</operator><name>ep</name> <operator>=</operator> <call><name>regex</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>matched</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>ep</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>matched</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>sp</name> <operator>=</operator> <name>__loc1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_V8_REGCOMP</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_REGEXEC2</name></expr></cpp:if>
<expr_stmt><expr><name>matched</name> <operator>=</operator> <call><name>regexec2</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>notbol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>matched</name> <operator>=</operator> <call><name>regexec</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>matched</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>sp</name> <operator>=</operator> <name><name>pattern</name><operator>-&gt;</operator><name>startp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ep</name> <operator>=</operator> <name><name>pattern</name><operator>-&gt;</operator><name>endp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>matched</name> <operator>=</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name>search_type</name> <operator>&amp;</operator> <name>SRCH_NO_MATCH</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>matched</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>(</operator><name>search_type</name> <operator>&amp;</operator> <name>SRCH_NO_MATCH</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>matched</name><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>matched</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>public</name> <name>char</name> <modifier>*</modifier></type>
<name>pattern_lib_name</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_GNU_REGEX</name></expr></cpp:if>
<return>return <expr><operator>(</operator><literal type="string">"GNU"</literal><operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_POSIX_REGCOMP</name></expr></cpp:if>
<return>return <expr><operator>(</operator><literal type="string">"POSIX"</literal><operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_PCRE2</name></expr></cpp:if>
<return>return <expr><operator>(</operator><literal type="string">"PCRE2"</literal><operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_PCRE</name></expr></cpp:if>
<return>return <expr><operator>(</operator><literal type="string">"PCRE"</literal><operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_RE_COMP</name></expr></cpp:if>
<return>return <expr><operator>(</operator><literal type="string">"BSD"</literal><operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_REGCMP</name></expr></cpp:if>
<return>return <expr><operator>(</operator><literal type="string">"V8"</literal><operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_V8_REGCOMP</name></expr></cpp:if>
<return>return <expr><operator>(</operator><literal type="string">"Spencer V8"</literal><operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><literal type="string">"no"</literal><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
</unit>
