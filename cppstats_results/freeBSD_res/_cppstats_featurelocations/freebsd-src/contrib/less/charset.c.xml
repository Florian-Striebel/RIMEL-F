<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/less/charset.c">














<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"less.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_LOCALE</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;locale.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;langinfo.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"charset.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>WIN32C</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIN32_LEAN_AND_MEAN</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>bs_mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>utf_mode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>





<struct>struct <name>charset</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>p_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>
}</block> <decl><name><name>charsets</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"ascii"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"8bcccbcc18b95.b"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"utf-8"</literal></expr>, <expr><operator>&amp;</operator><name>utf_mode</name></expr>, <expr><literal type="string">"8bcccbcc18b95.b126.bb"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"iso8859"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"8bcccbcc18b95.33b."</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"latin3"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"8bcccbcc18b95.33b5.b8.b15.b4.b12.b18.b12.b."</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"arabic"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"8bcccbcc18b95.33b.3b.7b2.13b.3b.b26.5b19.b"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"greek"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"8bcccbcc18b95.33b4.2b4.b3.b35.b44.b"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"greek2005"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"8bcccbcc18b95.33b14.b35.b44.b"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"hebrew"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"8bcccbcc18b95.33b.b29.32b28.2b2.b"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"koi8-r"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"8bcccbcc18b95.b."</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"KOI8-T"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"8bcccbcc18b95.b8.b6.b8.b.b.5b7.3b4.b4.b3.b.b.3b."</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"georgianps"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"8bcccbcc18b95.3b11.4b12.2b."</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"tcvn"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"b..b...bcccbccbbb7.8b95.b48.5b."</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"TIS-620"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"8bcccbcc18b95.b.4b.11b7.8b."</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"next"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"8bcccbcc18b95.bb125.bb"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"dos"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"8bcccbcc12bc5b95.b."</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"windows-1251"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"8bcccbcc12bc5b95.b24.b."</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"windows-1252"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"8bcccbcc12bc5b95.b.b11.b.2b12.b."</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"windows-1255"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"8bcccbcc12bc5b95.b.b8.b.5b9.b.4b."</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ebcdic"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"5bc6bcc7bcc41b.9b7.9b5.b..8b6.10b6.b9.7b9.8b8.17b3.3b9.7b9.8b8.6b10.b.b.b."</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"IBM-1047"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"4cbcbc3b9cbccbccbb4c6bcc5b3cbbc4bc4bccbc191.b"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</struct>




<struct>struct <name>cs_alias</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>oname</name></decl>;</decl_stmt>
}</block> <decl><name><name>cs_aliases</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"UTF-8"</literal></expr>, <expr><literal type="string">"utf-8"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"utf8"</literal></expr>, <expr><literal type="string">"utf-8"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"UTF8"</literal></expr>, <expr><literal type="string">"utf-8"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ANSI_X3.4-1968"</literal></expr>, <expr><literal type="string">"ascii"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"US-ASCII"</literal></expr>, <expr><literal type="string">"ascii"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"latin1"</literal></expr>, <expr><literal type="string">"iso8859"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ISO-8859-1"</literal></expr>, <expr><literal type="string">"iso8859"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"latin9"</literal></expr>, <expr><literal type="string">"iso8859"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ISO-8859-15"</literal></expr>, <expr><literal type="string">"iso8859"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"latin2"</literal></expr>, <expr><literal type="string">"iso8859"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ISO-8859-2"</literal></expr>, <expr><literal type="string">"iso8859"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ISO-8859-3"</literal></expr>, <expr><literal type="string">"latin3"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"latin4"</literal></expr>, <expr><literal type="string">"iso8859"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ISO-8859-4"</literal></expr>, <expr><literal type="string">"iso8859"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"cyrillic"</literal></expr>, <expr><literal type="string">"iso8859"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ISO-8859-5"</literal></expr>, <expr><literal type="string">"iso8859"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ISO-8859-6"</literal></expr>, <expr><literal type="string">"arabic"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ISO-8859-7"</literal></expr>, <expr><literal type="string">"greek"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"IBM9005"</literal></expr>, <expr><literal type="string">"greek2005"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ISO-8859-8"</literal></expr>, <expr><literal type="string">"hebrew"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"latin5"</literal></expr>, <expr><literal type="string">"iso8859"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ISO-8859-9"</literal></expr>, <expr><literal type="string">"iso8859"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"latin6"</literal></expr>, <expr><literal type="string">"iso8859"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ISO-8859-10"</literal></expr>, <expr><literal type="string">"iso8859"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"latin7"</literal></expr>, <expr><literal type="string">"iso8859"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ISO-8859-13"</literal></expr>, <expr><literal type="string">"iso8859"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"latin8"</literal></expr>, <expr><literal type="string">"iso8859"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ISO-8859-14"</literal></expr>, <expr><literal type="string">"iso8859"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"latin10"</literal></expr>, <expr><literal type="string">"iso8859"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"ISO-8859-16"</literal></expr>, <expr><literal type="string">"iso8859"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"IBM437"</literal></expr>, <expr><literal type="string">"dos"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"EBCDIC-US"</literal></expr>, <expr><literal type="string">"ebcdic"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"IBM1047"</literal></expr>, <expr><literal type="string">"IBM-1047"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"KOI8-R"</literal></expr>, <expr><literal type="string">"koi8-r"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"KOI8-U"</literal></expr>, <expr><literal type="string">"koi8-r"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"GEORGIAN-PS"</literal></expr>, <expr><literal type="string">"georgianps"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"TCVN5712-1"</literal></expr>, <expr><literal type="string">"tcvn"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"NEXTSTEP"</literal></expr>, <expr><literal type="string">"next"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"windows"</literal></expr>, <expr><literal type="string">"windows-1252"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"CP1251"</literal></expr>, <expr><literal type="string">"windows-1251"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"CP1252"</literal></expr>, <expr><literal type="string">"windows-1252"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"CP1255"</literal></expr>, <expr><literal type="string">"windows-1255"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_BINARY_CHAR</name></cpp:macro> <cpp:value>01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_CONTROL_CHAR</name></cpp:macro> <cpp:value>02</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>chardef</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>binfmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>utfbinfmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>binattr</name> <init>= <expr><name>AT_STANDOUT</name><operator>|</operator><name>AT_COLOR_BIN</name></expr></init></decl>;</decl_stmt>
















<function><type><specifier>static</specifier> <name>void</name></type>
<name>ichardef</name><parameter_list>(<parameter><decl><type><name>s</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <name>chardef</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
<block>{<block_content>
<switch>switch <condition>(<expr><operator>*</operator><name>s</name><operator>++</operator></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'.'</literal></expr>:</case>
<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'c'</literal></expr>:</case>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name>IS_CONTROL_CHAR</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'b'</literal></expr>:</case>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name>IS_BINARY_CHAR</name><operator>|</operator><name>IS_CONTROL_CHAR</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'0'</literal></expr>:</case> <case>case <expr><literal type="char">'1'</literal></expr>:</case> <case>case <expr><literal type="char">'2'</literal></expr>:</case> <case>case <expr><literal type="char">'3'</literal></expr>:</case> <case>case <expr><literal type="char">'4'</literal></expr>:</case>
<case>case <expr><literal type="char">'5'</literal></expr>:</case> <case>case <expr><literal type="char">'6'</literal></expr>:</case> <case>case <expr><literal type="char">'7'</literal></expr>:</case> <case>case <expr><literal type="char">'8'</literal></expr>:</case> <case>case <expr><literal type="char">'9'</literal></expr>:</case>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><literal type="number">10</literal> <operator>*</operator> <name>n</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>s</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
<continue>continue;</continue>

<default>default:</default>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"invalid chardef"</literal></expr></argument>, <argument><expr><name>NULL_PARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>quit</name><argument_list>(<argument><expr><name>QUIT_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<do>do
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cp</name> <operator>&gt;=</operator> <name>chardef</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>chardef</name></expr></argument>)</argument_list></sizeof></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"chardef longer than 256"</literal></expr></argument>, <argument><expr><name>NULL_PARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>quit</name><argument_list>(<argument><expr><name>QUIT_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>cp</name><operator>++</operator> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>--</operator><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></while>

<while>while <condition>(<expr><name>cp</name> <operator>&lt;</operator> <name>chardef</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>chardef</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>cp</name><operator>++</operator> <operator>=</operator> <name>v</name></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>icharset</name><parameter_list>(<parameter><decl><type><name>name</name></type></decl></parameter>, <parameter><decl><type><name>no_error</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>no_error</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>charset</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>cs_alias</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>name</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<for>for <control>(<init><expr><name>a</name> <operator>=</operator> <name>cs_aliases</name></expr>;</init> <condition><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>a</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>oname</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>charsets</name></expr>;</init> <condition><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ichardef</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>p_flag</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>WIN32C</name></expr></cpp:if>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>p_flag</name></name><operator>)</operator> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><call><name>GetConsoleOutputCP</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>CP_UTF8</name><operator>)</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>p_flag</name></name><operator>)</operator> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>no_error</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"invalid charset name"</literal></expr></argument>, <argument><expr><name>NULL_PARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>quit</name><argument_list>(<argument><expr><name>QUIT_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_LOCALE</name></expr></cpp:if>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>ilocale</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>chardef</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>isprint</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>chardef</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>iscntrl</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>chardef</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <name>IS_CONTROL_CHAR</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>chardef</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <name>IS_BINARY_CHAR</name><operator>|</operator><name>IS_CONTROL_CHAR</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><name>public</name> <name>void</name></type>
<name>setfmt</name><parameter_list>(<parameter><decl><type><name>s</name></type></decl></parameter>, <parameter><decl><type><name>fmtvarptr</name></type></decl></parameter>, <parameter><decl><type><name>attrptr</name></type></decl></parameter>, <parameter><decl><type><name>default_fmt</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>fmtvarptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>attrptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>default_fmt</name></decl>;</decl_stmt>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&amp;&amp;</operator> <name>utf_mode</name></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <name>constant</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name>s</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>*</operator><name>t</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>t</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>t</name></expr></argument> &gt;</argument_list></name> <literal type="char">'~'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>default_fmt</name></expr>;</expr_stmt>
<goto>goto <name>attr</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>t</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator>
<operator>(</operator><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'*'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>s</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="char">'n'</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">'*'</literal> <operator>&amp;&amp;</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="char">'n'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>default_fmt</name></expr>;</expr_stmt></block_content></block></if></if_stmt>




<label><name>attr</name>:</label>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'*'</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'d'</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>attrptr</name> <operator>=</operator> <name>AT_BOLD</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'k'</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>attrptr</name> <operator>=</operator> <name>AT_BLINK</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'s'</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>attrptr</name> <operator>=</operator> <name>AT_STANDOUT</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'u'</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>attrptr</name> <operator>=</operator> <name>AT_UNDERLINE</name></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <expr_stmt><expr><operator>*</operator><name>attrptr</name> <operator>=</operator> <name>AT_NORMAL</name></expr>;</expr_stmt> <break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>fmtvarptr</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_charset</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>WIN32C</name></expr></cpp:if>



<if_stmt><if>if <condition>(<expr><call><name>GetConsoleOutputCP</name><argument_list>()</argument_list></call> <operator>==</operator> <name>CP_UTF8</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>icharset</name><argument_list>(<argument><expr><literal type="string">"utf-8"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>lgetenv</name><argument_list>(<argument><expr><literal type="string">"LESSCHARSET"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>icharset</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>lgetenv</name><argument_list>(<argument><expr><literal type="string">"LESSCHARDEF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isnullenv</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ichardef</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_LOCALE</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CODESET</name></expr></argument>)</argument_list></call></expr></cpp:if>



<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>nl_langinfo</name><argument_list>(<argument><expr><name>CODESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>icharset</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_STRSTR</name></expr></cpp:if>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name>s</name> <operator>=</operator> <call><name>lgetenv</name><argument_list>(<argument><expr><literal type="string">"LC_ALL"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name> <operator>||</operator>
<operator>(</operator><name>s</name> <operator>=</operator> <call><name>lgetenv</name><argument_list>(<argument><expr><literal type="string">"LC_CTYPE"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name> <operator>||</operator>
<operator>(</operator><name>s</name> <operator>=</operator> <call><name>lgetenv</name><argument_list>(<argument><expr><literal type="string">"LANG"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><call><name>strstr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"UTF-8"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"utf-8"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name>
<operator>||</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"UTF8"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"utf8"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>icharset</name><argument_list>(<argument><expr><literal type="string">"utf-8"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_LOCALE</name></expr></cpp:if>




<expr_stmt><expr><call><name>ilocale</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name></expr></cpp:if>



<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>icharset</name><argument_list>(<argument><expr><literal type="string">"dos"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>



<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>icharset</name><argument_list>(<argument><expr><literal type="string">"latin1"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>




<function><type><name>public</name> <name>void</name></type>
<name>init_charset</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_LOCALE</name></expr></cpp:if>
<expr_stmt><expr><call><name>setlocale</name><argument_list>(<argument><expr><name>LC_ALL</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>set_charset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>lgetenv</name><argument_list>(<argument><expr><literal type="string">"LESSBINFMT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setfmt</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>binfmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>binattr</name></expr></argument>, <argument><expr><literal type="string">"*s&lt;%02X&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>lgetenv</name><argument_list>(<argument><expr><literal type="string">"LESSUTFBINFMT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setfmt</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>utfbinfmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>binattr</name></expr></argument>, <argument><expr><literal type="string">"&lt;U+%04lX&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>public</name> <name>int</name></type>
<name>binary_char</name><parameter_list>(<parameter><decl><type><name>c</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>LWCHAR</name></type> <name>c</name></decl>;</decl_stmt>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>utf_mode</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>is_ubin_char</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>c</name> <operator>&amp;=</operator> <literal type="number">0377</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name><name>chardef</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;</operator> <name>IS_BINARY_CHAR</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>public</name> <name>int</name></type>
<name>control_char</name><parameter_list>(<parameter><decl><type><name>c</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>LWCHAR</name></type> <name>c</name></decl>;</decl_stmt>
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>&amp;=</operator> <literal type="number">0377</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name><name>chardef</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&amp;</operator> <name>IS_CONTROL_CHAR</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>public</name> <name>char</name> <modifier>*</modifier></type>
<name>prchar</name><parameter_list>(<parameter><decl><type><name>c</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>LWCHAR</name></type> <name>c</name></decl>;</decl_stmt>
<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>&amp;=</operator> <literal type="number">0377</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>&lt;</operator> <literal type="number">128</literal> <operator>||</operator> <operator>!</operator><name>utf_mode</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>control_char</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SNPRINTF1</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <name>ESC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"ESC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>IS_EBCDIC_HOST</name></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>binary_char</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SNPRINTF1</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"^%c"</literal></expr></argument>,




<argument><expr><literal type="string">"@ABC.I.?...KLMNO"</literal>
<literal type="string">"PQRS.JH.XY.."</literal>
<literal type="string">"\\]^_"</literal>
<literal type="string">"......W[.....EFG"</literal>
<literal type="string">"..V....D....TU.Z"</literal><index>[<expr><name>c</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if type="elseif">else if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">128</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>control_char</name><argument_list>(<argument><expr><name>c</name> <operator>^</operator> <literal type="number">0100</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SNPRINTF1</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"^%c"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>c</name> <operator>^</operator> <literal type="number">0100</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SNPRINTF1</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>binfmt</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>(</operator><name>buf</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>public</name> <name>char</name> <modifier>*</modifier></type>
<name>prutfchar</name><parameter_list>(<parameter><decl><type><name>ch</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>LWCHAR</name></type> <name>ch</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <name>ESC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"ESC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>ch</name> <operator>&lt;</operator> <literal type="number">128</literal> <operator>&amp;&amp;</operator> <call><name>control_char</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>control_char</name><argument_list>(<argument><expr><name>ch</name> <operator>^</operator> <literal type="number">0100</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SNPRINTF1</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"^%c"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>char</name><operator>)</operator> <name>ch</name><operator>)</operator> <operator>^</operator> <literal type="number">0100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SNPRINTF1</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>binfmt</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>)</operator> <name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>is_ubin_char</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>SNPRINTF1</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>utfbinfmt</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&gt;=</operator> <literal type="number">0x80000000</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="number">0xFFFD</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>put_wchar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><operator>(</operator><name>buf</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>public</name> <name>int</name></type>
<name>utf_len</name><parameter_list>(<parameter><decl><type><name>ch</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ch</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ch</name> <operator>&amp;</operator> <literal type="number">0xE0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xC0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ch</name> <operator>&amp;</operator> <literal type="number">0xF0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xE0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">3</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ch</name> <operator>&amp;</operator> <literal type="number">0xF8</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xF0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">4</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ch</name> <operator>&amp;</operator> <literal type="number">0xFC</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xF8</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">5</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ch</name> <operator>&amp;</operator> <literal type="number">0xFE</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xFC</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">6</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>public</name> <name>int</name></type>
<name>is_utf8_well_formed</name><parameter_list>(<parameter><decl><type><name>ss</name></type></decl></parameter>, <parameter><decl><type><name>slen</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ss</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slen</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>ss</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_UTF8_INVALID</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>utf_len</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>slen</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0xC2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>mask</name></decl>;</decl_stmt>
<expr_stmt><expr><name>mask</name> <operator>=</operator> <operator>(</operator><operator>~</operator><operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">8</literal><operator>-</operator><name>len</name><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>mask</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <name>mask</name><operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_UTF8_TRAIL</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>public</name> <name>void</name></type>
<name>utf_skip_to_lead</name><parameter_list>(<parameter><decl><type><name>pp</name></type></decl></parameter>, <parameter><decl><type><name>limit</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>limit</name></decl>;</decl_stmt>
<block>{<block_content>
<do>do <block>{<block_content>
<expr_stmt><expr><operator>++</operator><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>*</operator><name>pp</name> <operator>&lt;</operator> <name>limit</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS_UTF8_LEAD</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>&amp;</operator> <literal type="number">0377</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS_ASCII_OCTET</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition>;</do>
</block_content>}</block></function>





<function><type><name>public</name> <name>LWCHAR</name></type>
<name>get_wchar</name><parameter_list>(<parameter><decl><type><name>p</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>constant</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<block>{<block_content>
<switch>switch <condition>(<expr><call><name>utf_len</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<default>default:</default>

<return>return <expr><operator>(</operator><name>LWCHAR</name><operator>)</operator>
<operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr>;</return>
<case>case <expr><literal type="number">2</literal></expr>:</case>

<return>return <expr><operator>(</operator><name>LWCHAR</name><operator>)</operator> <operator>(</operator>
<operator>(</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator><operator>)</operator></expr>;</return>
<case>case <expr><literal type="number">3</literal></expr>:</case>

<return>return <expr><operator>(</operator><name>LWCHAR</name><operator>)</operator> <operator>(</operator>
<operator>(</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator><operator>)</operator></expr>;</return>
<case>case <expr><literal type="number">4</literal></expr>:</case>

<return>return <expr><operator>(</operator><name>LWCHAR</name><operator>)</operator> <operator>(</operator>
<operator>(</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x07</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">18</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator><operator>)</operator></expr>;</return>
<case>case <expr><literal type="number">5</literal></expr>:</case>

<return>return <expr><operator>(</operator><name>LWCHAR</name><operator>)</operator> <operator>(</operator>
<operator>(</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x03</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">18</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator><operator>)</operator></expr>;</return>
<case>case <expr><literal type="number">6</literal></expr>:</case>

<return>return <expr><operator>(</operator><name>LWCHAR</name><operator>)</operator> <operator>(</operator>
<operator>(</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">30</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">18</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><name><name>p</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>




<function><type><name>public</name> <name>void</name></type>
<name>put_wchar</name><parameter_list>(<parameter><decl><type><name>pp</name></type></decl></parameter>, <parameter><decl><type><name>ch</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LWCHAR</name></type> <name>ch</name></decl>;</decl_stmt>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>utf_mode</name> <operator>||</operator> <name>ch</name> <operator>&lt;</operator> <literal type="number">0x80</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <name>ch</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ch</name> <operator>&lt;</operator> <literal type="number">0x800</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><literal type="number">0xC0</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>ch</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1F</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><name>ch</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ch</name> <operator>&lt;</operator> <literal type="number">0x10000</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><literal type="number">0xE0</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>ch</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>ch</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><name>ch</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ch</name> <operator>&lt;</operator> <literal type="number">0x200000</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><literal type="number">0xF0</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>ch</name> <operator>&gt;&gt;</operator> <literal type="number">18</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x07</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>ch</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>ch</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><name>ch</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ch</name> <operator>&lt;</operator> <literal type="number">0x4000000</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><literal type="number">0xF0</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>ch</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>ch</name> <operator>&gt;&gt;</operator> <literal type="number">18</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>ch</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>ch</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><name>ch</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else
<block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><literal type="number">0xF0</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>ch</name> <operator>&gt;&gt;</operator> <literal type="number">30</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>ch</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>ch</name> <operator>&gt;&gt;</operator> <literal type="number">18</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>ch</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>ch</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><literal type="number">0x80</literal> <operator>|</operator> <operator>(</operator><name>ch</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>




<function><type><name>public</name> <name>LWCHAR</name></type>
<name>step_char</name><parameter_list>(<parameter><decl><type><name>pp</name></type></decl></parameter>, <parameter><decl><type><name>dir</name></type></decl></parameter>, <parameter><decl><type><name>limit</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>signed</name> <name>int</name></type> <name>dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constant</name> <name>char</name> <modifier>*</modifier></type><name>limit</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>LWCHAR</name></type> <name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>*</operator><name>pp</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>utf_mode</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>(</operator><name>LWCHAR</name><operator>)</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>p</name> <operator>&lt;</operator> <name>limit</name><operator>)</operator></expr> ?</condition><then> <expr><operator>*</operator><name>p</name><operator>++</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>(</operator><name>LWCHAR</name><operator>)</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>p</name> <operator>&gt;</operator> <name>limit</name><operator>)</operator></expr> ?</condition><then> <expr><operator>*</operator><operator>--</operator><name>p</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>dir</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>utf_len</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>+</operator> <name>len</name> <operator>&gt;</operator> <name>limit</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>limit</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else
<block>{<block_content>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>get_wchar</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else
<block>{<block_content>
<while>while <condition>(<expr><name>p</name> <operator>&gt;</operator> <name>limit</name> <operator>&amp;&amp;</operator> <call><name>IS_UTF8_TRAIL</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;</operator> <name>limit</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>get_wchar</name><argument_list>(<argument><expr><operator>--</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<return>return <expr><name>ch</name></expr>;</return>
</block_content>}</block></function>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECLARE_RANGE_TABLE_START</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static struct wchar_range name##_array[] = {</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECLARE_RANGE_TABLE_END</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>}; struct wchar_range_table name##_table = { name##_array, sizeof(name##_array)/sizeof(*name##_array) };</cpp:value></cpp:define>


<macro><name>DECLARE_RANGE_TABLE_START</name><argument_list>(<argument>compose</argument>)</argument_list></macro>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compose.uni"</cpp:file></cpp:include>
<macro><name>DECLARE_RANGE_TABLE_END</name><argument_list>(<argument>compose</argument>)</argument_list></macro>

<macro><name>DECLARE_RANGE_TABLE_START</name><argument_list>(<argument>ubin</argument>)</argument_list></macro>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ubin.uni"</cpp:file></cpp:include>
<macro><name>DECLARE_RANGE_TABLE_END</name><argument_list>(<argument>ubin</argument>)</argument_list></macro>

<macro><name>DECLARE_RANGE_TABLE_START</name><argument_list>(<argument>wide</argument>)</argument_list></macro>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wide.uni"</cpp:file></cpp:include>
<macro><name>DECLARE_RANGE_TABLE_END</name><argument_list>(<argument>wide</argument>)</argument_list></macro>

<macro><name>DECLARE_RANGE_TABLE_START</name><argument_list>(<argument>fmt</argument>)</argument_list></macro>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmt.uni"</cpp:file></cpp:include>
<macro><name>DECLARE_RANGE_TABLE_END</name><argument_list>(<argument>fmt</argument>)</argument_list></macro>


<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>wchar_range</name></name></type> <name><name>comb_table</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="number">0x0644</literal></expr>,<expr><literal type="number">0x0622</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x0644</literal></expr>,<expr><literal type="number">0x0623</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x0644</literal></expr>,<expr><literal type="number">0x0625</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0x0644</literal></expr>,<expr><literal type="number">0x0627</literal></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>is_in_table</name><parameter_list>(<parameter><decl><type><name>ch</name></type></decl></parameter>, <parameter><decl><type><name>table</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>LWCHAR</name></type> <name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>wchar_range_table</name></name> <modifier>*</modifier></type><name>table</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>hi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lo</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&lt;</operator> <name><name>table</name><operator>-&gt;</operator><name>table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>first</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>lo</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>hi</name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>lo</name> <operator>&lt;=</operator> <name>hi</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>mid</name> <init>= <expr><operator>(</operator><name>lo</name> <operator>+</operator> <name>hi</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&gt;</operator> <name><name>table</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>mid</name></expr>]</index></name><operator>.</operator><name>last</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>lo</name> <operator>=</operator> <name>mid</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>ch</name> <operator>&lt;</operator> <name><name>table</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>mid</name></expr>]</index></name><operator>.</operator><name>first</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hi</name> <operator>=</operator> <name>mid</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></while>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<function><type><name>public</name> <name>int</name></type>
<name>is_composing_char</name><parameter_list>(<parameter><decl><type><name>ch</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>LWCHAR</name></type> <name>ch</name></decl>;</decl_stmt>
<block>{<block_content>
<return>return <expr><call><name>is_in_table</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>compose_table</name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>(</operator><name>bs_mode</name> <operator>!=</operator> <name>BS_CONTROL</name> <operator>&amp;&amp;</operator> <call><name>is_in_table</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt_table</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>public</name> <name>int</name></type>
<name>is_ubin_char</name><parameter_list>(<parameter><decl><type><name>ch</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>LWCHAR</name></type> <name>ch</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ubin</name> <init>= <expr><call><name>is_in_table</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ubin_table</name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>(</operator><name>bs_mode</name> <operator>==</operator> <name>BS_CONTROL</name> <operator>&amp;&amp;</operator> <call><name>is_in_table</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt_table</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>WIN32C</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ubin</name> <operator>&amp;&amp;</operator> <name>utf_mode</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>&lt;</operator> <literal type="number">0x10000</literal></expr>)</condition>
<block>{<block_content>



<decl_stmt><decl><type><name>BOOL</name></type> <name>used_default</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>WideCharToMultiByte</name><argument_list>(<argument><expr><call><name>GetConsoleOutputCP</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>WC_NO_BEST_FIT_CHARS</name></expr></argument>, <argument><expr><operator>(</operator><name>LPCWSTR</name><operator>)</operator> <operator>&amp;</operator><name>ch</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>used_default</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>used_default</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ubin</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>ubin</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>public</name> <name>int</name></type>
<name>is_wide_char</name><parameter_list>(<parameter><decl><type><name>ch</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>LWCHAR</name></type> <name>ch</name></decl>;</decl_stmt>
<block>{<block_content>
<return>return <expr><call><name>is_in_table</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wide_table</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><name>public</name> <name>int</name></type>
<name>is_combining_char</name><parameter_list>(<parameter><decl><type><name>ch1</name></type></decl></parameter>, <parameter><decl><type><name>ch2</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>LWCHAR</name></type> <name>ch1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LWCHAR</name></type> <name>ch2</name></decl>;</decl_stmt>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>comb_table</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>comb_table</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ch1</name> <operator>==</operator> <name><name>comb_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>&amp;&amp;</operator>
<name>ch2</name> <operator>==</operator> <name><name>comb_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>last</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

</unit>
