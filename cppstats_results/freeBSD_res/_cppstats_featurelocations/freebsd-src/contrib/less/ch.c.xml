<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/less/ch.c">















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"less.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>WIN32C</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_STAT_INO</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>extern</specifier> <name>dev_t</name></type> <name>curr_dev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>ino_t</name></type> <name>curr_ino</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name>POSITION</name></type> <name>BLOCKNUM</name>;</typedef>

<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>ignore_eoi</name></decl>;</decl_stmt>







<struct>struct <name>bufnode</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>bufnode</name></name> <modifier>*</modifier></type><name>next</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufnode</name></name> <modifier>*</modifier></type><name>hnext</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>hprev</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LBUFSIZE</name></cpp:macro> <cpp:value>8192</cpp:value></cpp:define>
<struct>struct <name>buf</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>bufnode</name></name></type> <name>node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BLOCKNUM</name></type> <name>block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>datasize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>data</name><index>[<expr><name>LBUFSIZE</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bufnode_buf</name><parameter_list>(<parameter><type><name>bn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((struct buf *) bn)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFHASH_SIZE</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>
<struct>struct <name>filestate</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>bufnode</name></name></type> <name>buflist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufnode</name></name></type> <name><name>hashtbl</name><index>[<expr><name>BUFHASH_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>POSITION</name></type> <name>fpos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nbufs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BLOCKNUM</name></type> <name>block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>POSITION</name></type> <name>fsize</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ch_bufhead</name></cpp:macro> <cpp:value>thisfile-&gt;buflist.next</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ch_buftail</name></cpp:macro> <cpp:value>thisfile-&gt;buflist.prev</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ch_nbufs</name></cpp:macro> <cpp:value>thisfile-&gt;nbufs</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ch_block</name></cpp:macro> <cpp:value>thisfile-&gt;block</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ch_offset</name></cpp:macro> <cpp:value>thisfile-&gt;offset</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ch_fpos</name></cpp:macro> <cpp:value>thisfile-&gt;fpos</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ch_fsize</name></cpp:macro> <cpp:value>thisfile-&gt;fsize</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ch_flags</name></cpp:macro> <cpp:value>thisfile-&gt;flags</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ch_file</name></cpp:macro> <cpp:value>thisfile-&gt;file</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>END_OF_CHAIN</name></cpp:macro> <cpp:value>(&amp;thisfile-&gt;buflist)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>END_OF_HCHAIN</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(&amp;thisfile-&gt;hashtbl[h])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFHASH</name><parameter_list>(<parameter><type><name>blk</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((blk) &amp; (BUFHASH_SIZE-1))</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR_BUFS</name><parameter_list>(<parameter><type><name>bn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (bn = ch_bufhead; bn != END_OF_CHAIN; bn = bn-&gt;next)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUF_RM</name><parameter_list>(<parameter><type><name>bn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(bn)-&gt;next-&gt;prev = (bn)-&gt;prev; (bn)-&gt;prev-&gt;next = (bn)-&gt;next;</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUF_INS_HEAD</name><parameter_list>(<parameter><type><name>bn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(bn)-&gt;next = ch_bufhead; (bn)-&gt;prev = END_OF_CHAIN; ch_bufhead-&gt;prev = (bn); ch_bufhead = (bn);</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUF_INS_TAIL</name><parameter_list>(<parameter><type><name>bn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(bn)-&gt;next = END_OF_CHAIN; (bn)-&gt;prev = ch_buftail; ch_buftail-&gt;next = (bn); ch_buftail = (bn);</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR_BUFS_IN_CHAIN</name><parameter_list>(<parameter><type><name>h</name></type></parameter>,<parameter><type><name>bn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (bn = thisfile-&gt;hashtbl[h].hnext; bn != END_OF_HCHAIN(h); bn = bn-&gt;hnext)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUF_HASH_RM</name><parameter_list>(<parameter><type><name>bn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(bn)-&gt;hnext-&gt;hprev = (bn)-&gt;hprev; (bn)-&gt;hprev-&gt;hnext = (bn)-&gt;hnext;</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUF_HASH_INS</name><parameter_list>(<parameter><type><name>bn</name></type></parameter>,<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(bn)-&gt;hnext = thisfile-&gt;hashtbl[h].hnext; (bn)-&gt;hprev = END_OF_HCHAIN(h); thisfile-&gt;hashtbl[h].hnext-&gt;hprev = (bn); thisfile-&gt;hashtbl[h].hnext = (bn);</cpp:value></cpp:define>





<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>filestate</name></name> <modifier>*</modifier></type><name>thisfile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>ch_ungotchar</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>maxbufs</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>autobuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>sigs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>secure</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>screen_trashed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>follow_mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>constant</name> <name>char</name></type> <name><name>helpdata</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>constant</name> <name>int</name></type> <name>size_helpdata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>IFILE</name></type> <name>curr_ifile</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LOGFILE</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>logfile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>namelogfile</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ch_addbuf</name><parameter_list>()</parameter_list>;</function_decl>





<function><type><name>int</name></type>
<name>ch_get</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>buf</name></name> <modifier>*</modifier></type><name>bp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufnode</name></name> <modifier>*</modifier></type><name>bn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slept</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>POSITION</name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>POSITION</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>thisfile</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>EOI</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>ch_bufhead</name> <operator>!=</operator> <name>END_OF_CHAIN</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>bp</name> <operator>=</operator> <call><name>bufnode_buf</name><argument_list>(<argument><expr><name>ch_bufhead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ch_block</name> <operator>==</operator> <name><name>bp</name><operator>-&gt;</operator><name>block</name></name> <operator>&amp;&amp;</operator> <name>ch_offset</name> <operator>&lt;</operator> <name><name>bp</name><operator>-&gt;</operator><name>datasize</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>bp</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>ch_offset</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>slept</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>




<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>BUFHASH</name><argument_list>(<argument><expr><name>ch_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>FOR_BUFS_IN_CHAIN</name><argument_list>(<argument>h</argument>, <argument>bn</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><name>bp</name> <operator>=</operator> <call><name>bufnode_buf</name><argument_list>(<argument><expr><name>bn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bp</name><operator>-&gt;</operator><name>block</name></name> <operator>==</operator> <name>ch_block</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ch_offset</name> <operator>&gt;=</operator> <name><name>bp</name><operator>-&gt;</operator><name>datasize</name></name></expr>)</condition><block type="pseudo"><block_content>



<break>break;</break></block_content></block></if></if_stmt>
<goto>goto <name>found</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><name>bn</name> <operator>==</operator> <call><name>END_OF_HCHAIN</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>







<if_stmt><if>if <condition>(<expr><name>ch_buftail</name> <operator>==</operator> <name>END_OF_CHAIN</name> <operator>||</operator>
<call><name>bufnode_buf</name><argument_list>(<argument><expr><name>ch_buftail</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>block</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>






<if_stmt><if>if <condition>(<expr><operator>(</operator><name>autobuf</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>ch_flags</name> <operator>&amp;</operator> <name>CH_CANSEEK</name><operator>)</operator><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>maxbufs</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>ch_nbufs</name> <operator>&lt;</operator> <name>maxbufs</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>ch_addbuf</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>



<expr_stmt><expr><name>autobuf</name> <operator>=</operator> <name>OPT_OFF</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bn</name> <operator>=</operator> <name>ch_buftail</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bp</name> <operator>=</operator> <call><name>bufnode_buf</name><argument_list>(<argument><expr><name>bn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUF_HASH_RM</name><argument_list>(<argument><expr><name>bn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>block</name></name> <operator>=</operator> <name>ch_block</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>datasize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUF_HASH_INS</name><argument_list>(<argument><expr><name>bn</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<label><name>read_more</name>:</label>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <operator>(</operator><name>ch_block</name> <operator>*</operator> <name>LBUFSIZE</name><operator>)</operator> <operator>+</operator> <name><name>bp</name><operator>-&gt;</operator><name>datasize</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>ch_length</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL_POSITION</name> <operator>&amp;&amp;</operator> <name>pos</name> <operator>&gt;=</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>



<return>return <expr><operator>(</operator><name>EOI</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>!=</operator> <name>ch_fpos</name></expr>)</condition>
<block>{<block_content>





<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ch_flags</name> <operator>&amp;</operator> <name>CH_CANSEEK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="char">'?'</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lseek</name><argument_list>(<argument><expr><name>ch_file</name></expr></argument>, <argument><expr><operator>(</operator><name>off_t</name><operator>)</operator><name>pos</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BAD_LSEEK</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"seek error"</literal></expr></argument>, <argument><expr><name>NULL_PARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_eol</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>EOI</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ch_fpos</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><name>ch_ungotchar</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>bp</name><operator>-&gt;</operator><name>datasize</name></name></expr>]</index></name> <operator>=</operator> <name>ch_ungotchar</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ch_ungotchar</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ch_flags</name> <operator>&amp;</operator> <name>CH_HELPFILE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>bp</name><operator>-&gt;</operator><name>datasize</name></name></expr>]</index></name> <operator>=</operator> <name><name>helpdata</name><index>[<expr><name>ch_fpos</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else
<block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>iread</name><argument_list>(<argument><expr><name>ch_file</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>bp</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>bp</name><operator>-&gt;</operator><name>datasize</name></name></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>LBUFSIZE</name> <operator>-</operator> <name><name>bp</name><operator>-&gt;</operator><name>datasize</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>READ_INTR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>EOI</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>WIN32C</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EPIPE</name></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"read error"</literal></expr></argument>, <argument><expr><name>NULL_PARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_eol</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LOGFILE</name></expr></cpp:if>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name>secure</name> <operator>&amp;&amp;</operator> <name>logfile</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>logfile</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>bp</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>bp</name><operator>-&gt;</operator><name>datasize</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>ch_fpos</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>datasize</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>ch_fsize</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ignore_eoi</name></expr>)</condition>
<block>{<block_content>




<if_stmt><if>if <condition>(<expr><operator>!</operator><name>slept</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>PARG</name></type> <name>parg</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>parg</name><operator>.</operator><name>p_string</name></name> <operator>=</operator> <call><name>wait_message</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ierror</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>parg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>sleep_ms</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>slept</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_STAT_INO</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>follow_mode</name> <operator>==</operator> <name>FOLLOW_NAME</name></expr>)</condition>
<block>{<block_content>




<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>POSITION</name></type> <name>curr_pos</name> <init>= <expr><call><name>ch_tell</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>stat</name><argument_list>(<argument><expr><call><name>get_filename</name><argument_list>(<argument><expr><name>curr_ifile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>st</name><operator>.</operator><name>st_ino</name></name> <operator>!=</operator> <name>curr_ino</name> <operator>||</operator>
<name><name>st</name><operator>.</operator><name>st_dev</name></name> <operator>!=</operator> <name>curr_dev</name> <operator>||</operator>
<operator>(</operator><name>curr_pos</name> <operator>!=</operator> <name>NULL_POSITION</name> <operator>&amp;&amp;</operator> <name><name>st</name><operator>.</operator><name>st_size</name></name> <operator>&lt;</operator> <name>curr_pos</name><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name>screen_trashed</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>EOI</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>sigs</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>EOI</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<label><name>found</name>:</label>
<if_stmt><if>if <condition>(<expr><name>ch_bufhead</name> <operator>!=</operator> <name>bn</name></expr>)</condition>
<block>{<block_content>




<expr_stmt><expr><call><name>BUF_RM</name><argument_list>(<argument><expr><name>bn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUF_INS_HEAD</name><argument_list>(<argument><expr><name>bn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>BUF_HASH_RM</name><argument_list>(<argument><expr><name>bn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUF_HASH_INS</name><argument_list>(<argument><expr><name>bn</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ch_offset</name> <operator>&gt;=</operator> <name><name>bp</name><operator>-&gt;</operator><name>datasize</name></name></expr>)</condition><block type="pseudo"><block_content>




<goto>goto <name>read_more</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name><name>bp</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>ch_offset</name></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>public</name> <name>void</name></type>
<name>ch_ungetchar</name><parameter_list>(<parameter><decl><type><name>c</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>ch_ungotchar</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"ch_ungetchar overrun"</literal></expr></argument>, <argument><expr><name>NULL_PARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ch_ungotchar</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LOGFILE</name></expr></cpp:if>




<function><type><name>public</name> <name>void</name></type>
<name>end_logfile</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>tried</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>logfile</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tried</name> <operator>&amp;&amp;</operator> <name>ch_fsize</name> <operator>==</operator> <name>NULL_POSITION</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>tried</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ierror</name><argument_list>(<argument><expr><literal type="string">"Finishing logfile"</literal></expr></argument>, <argument><expr><name>NULL_PARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>ch_forw_get</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>EOI</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>ABORT_SIGS</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></while>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>logfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>logfile</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>namelogfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>namelogfile</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>public</name> <name>void</name></type>
<name>sync_logfile</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>buf</name></name> <modifier>*</modifier></type><name>bp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufnode</name></name> <modifier>*</modifier></type><name>bn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>warned</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BLOCKNUM</name></type> <name>block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BLOCKNUM</name></type> <name>nblocks</name></decl>;</decl_stmt>

<expr_stmt><expr><name>nblocks</name> <operator>=</operator> <operator>(</operator><name>ch_fpos</name> <operator>+</operator> <name>LBUFSIZE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>LBUFSIZE</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>block</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>block</name> <operator>&lt;</operator> <name>nblocks</name></expr>;</condition> <incr><expr><name>block</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>wrote</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<macro><name>FOR_BUFS</name><argument_list>(<argument>bn</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><name>bp</name> <operator>=</operator> <call><name>bufnode_buf</name><argument_list>(<argument><expr><name>bn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bp</name><operator>-&gt;</operator><name>block</name></name> <operator>==</operator> <name>block</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>logfile</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>bp</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>bp</name><operator>-&gt;</operator><name>datasize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>wrote</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>wrote</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>warned</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Warning: log file is incomplete"</literal></expr></argument>,
<argument><expr><name>NULL_PARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>warned</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>buffered</name><parameter_list>(<parameter><decl><type><name>block</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>BLOCKNUM</name></type> <name>block</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>buf</name></name> <modifier>*</modifier></type><name>bp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufnode</name></name> <modifier>*</modifier></type><name>bn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>;</decl_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>BUFHASH</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>FOR_BUFS_IN_CHAIN</name><argument_list>(<argument>h</argument>, <argument>bn</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><name>bp</name> <operator>=</operator> <call><name>bufnode_buf</name><argument_list>(<argument><expr><name>bn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bp</name><operator>-&gt;</operator><name>block</name></name> <operator>==</operator> <name>block</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>TRUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block>
<return>return <expr><operator>(</operator><name>FALSE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>public</name> <name>int</name></type>
<name>ch_seek</name><parameter_list>(<parameter><decl><type><name>pos</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>POSITION</name></type> <name>pos</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>BLOCKNUM</name></type> <name>new_block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>POSITION</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>thisfile</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>ch_length</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <call><name>ch_zero</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>(</operator><name>len</name> <operator>!=</operator> <name>NULL_POSITION</name> <operator>&amp;&amp;</operator> <name>pos</name> <operator>&gt;</operator> <name>len</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>new_block</name> <operator>=</operator> <name>pos</name> <operator>/</operator> <name>LBUFSIZE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ch_flags</name> <operator>&amp;</operator> <name>CH_CANSEEK</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>pos</name> <operator>!=</operator> <name>ch_fpos</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>buffered</name><argument_list>(<argument><expr><name>new_block</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ch_fpos</name> <operator>&gt;</operator> <name>pos</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<while>while <condition>(<expr><name>ch_fpos</name> <operator>&lt;</operator> <name>pos</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ch_forw_get</name><argument_list>()</argument_list></call> <operator>==</operator> <name>EOI</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ABORT_SIGS</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>ch_block</name> <operator>=</operator> <name>new_block</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ch_offset</name> <operator>=</operator> <name>pos</name> <operator>%</operator> <name>LBUFSIZE</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>public</name> <name>int</name></type>
<name>ch_end_seek</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>POSITION</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>thisfile</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ch_flags</name> <operator>&amp;</operator> <name>CH_CANSEEK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ch_fsize</name> <operator>=</operator> <call><name>filesize</name><argument_list>(<argument><expr><name>ch_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>ch_length</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <name>NULL_POSITION</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ch_seek</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>




<while>while <condition>(<expr><call><name>ch_forw_get</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>EOI</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>ABORT_SIGS</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></while>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>public</name> <name>int</name></type>
<name>ch_end_buffer_seek</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>buf</name></name> <modifier>*</modifier></type><name>bp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufnode</name></name> <modifier>*</modifier></type><name>bn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>POSITION</name></type> <name>buf_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>POSITION</name></type> <name>end_pos</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>thisfile</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name>ch_flags</name> <operator>&amp;</operator> <name>CH_CANSEEK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>ch_end_seek</name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>end_pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<macro><name>FOR_BUFS</name><argument_list>(<argument>bn</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><name>bp</name> <operator>=</operator> <call><name>bufnode_buf</name><argument_list>(<argument><expr><name>bn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf_pos</name> <operator>=</operator> <operator>(</operator><name><name>bp</name><operator>-&gt;</operator><name>block</name></name> <operator>*</operator> <name>LBUFSIZE</name><operator>)</operator> <operator>+</operator> <name><name>bp</name><operator>-&gt;</operator><name>datasize</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf_pos</name> <operator>&gt;</operator> <name>end_pos</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>end_pos</name> <operator>=</operator> <name>buf_pos</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>

<return>return <expr><operator>(</operator><call><name>ch_seek</name><argument_list>(<argument><expr><name>end_pos</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><name>public</name> <name>int</name></type>
<name>ch_beg_seek</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufnode</name></name> <modifier>*</modifier></type><name>bn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufnode</name></name> <modifier>*</modifier></type><name>firstbn</name></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><call><name>ch_seek</name><argument_list>(<argument><expr><call><name>ch_zero</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>





<expr_stmt><expr><name>firstbn</name> <operator>=</operator> <name>ch_bufhead</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>firstbn</name> <operator>==</operator> <name>END_OF_CHAIN</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<macro><name>FOR_BUFS</name><argument_list>(<argument>bn</argument>)</argument_list></macro>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>bufnode_buf</name><argument_list>(<argument><expr><name>bn</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>block</name> <operator>&lt;</operator> <call><name>bufnode_buf</name><argument_list>(<argument><expr><name>firstbn</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>block</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>firstbn</name> <operator>=</operator> <name>bn</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block>
<expr_stmt><expr><name>ch_block</name> <operator>=</operator> <call><name>bufnode_buf</name><argument_list>(<argument><expr><name>firstbn</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>block</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ch_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>public</name> <name>POSITION</name></type>
<name>ch_length</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>thisfile</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL_POSITION</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ignore_eoi</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL_POSITION</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ch_flags</name> <operator>&amp;</operator> <name>CH_HELPFILE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>size_helpdata</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ch_flags</name> <operator>&amp;</operator> <name>CH_NODATA</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ch_fsize</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>public</name> <name>POSITION</name></type>
<name>ch_tell</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>thisfile</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL_POSITION</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ch_block</name> <operator>*</operator> <name>LBUFSIZE</name><operator>)</operator> <operator>+</operator> <name>ch_offset</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>public</name> <name>int</name></type>
<name>ch_forw_get</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>thisfile</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>EOI</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>ch_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>EOI</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>EOI</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ch_offset</name> <operator>&lt;</operator> <name>LBUFSIZE</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ch_offset</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>ch_block</name> <operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ch_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><operator>(</operator><name>c</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>public</name> <name>int</name></type>
<name>ch_back_get</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>thisfile</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>EOI</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ch_offset</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ch_offset</name> <operator>--</operator></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ch_block</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>EOI</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ch_flags</name> <operator>&amp;</operator> <name>CH_CANSEEK</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>buffered</name><argument_list>(<argument><expr><name>ch_block</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>EOI</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ch_block</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ch_offset</name> <operator>=</operator> <name>LBUFSIZE</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><operator>(</operator><call><name>ch_get</name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>public</name> <name>void</name></type>
<name>ch_setbufspace</name><parameter_list>(<parameter><decl><type><name>bufspace</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>bufspace</name></decl>;</decl_stmt>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>bufspace</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>maxbufs</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>maxbufs</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>bufspace</name> <operator>*</operator> <literal type="number">1024</literal><operator>)</operator> <operator>+</operator> <name>LBUFSIZE</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>LBUFSIZE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>maxbufs</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>maxbufs</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>




<function><type><name>public</name> <name>void</name></type>
<name>ch_flush</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufnode</name></name> <modifier>*</modifier></type><name>bn</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>thisfile</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ch_flags</name> <operator>&amp;</operator> <name>CH_CANSEEK</name><operator>)</operator></expr>)</condition>
<block>{<block_content>




<expr_stmt><expr><name>ch_fsize</name> <operator>=</operator> <name>NULL_POSITION</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>




<macro><name>FOR_BUFS</name><argument_list>(<argument>bn</argument>)</argument_list></macro>
<block>{<block_content>
<expr_stmt><expr><call><name>bufnode_buf</name><argument_list>(<argument><expr><name>bn</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>block</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block>




<expr_stmt><expr><name>ch_fsize</name> <operator>=</operator> <call><name>filesize</name><argument_list>(<argument><expr><name>ch_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>ch_fpos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ch_block</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ch_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>






<if_stmt><if>if <condition>(<expr><name>ch_fsize</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>ch_fsize</name> <operator>=</operator> <name>NULL_POSITION</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ch_flags</name> <operator>&amp;=</operator> <operator>~</operator><name>CH_CANSEEK</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>lseek</name><argument_list>(<argument><expr><name>ch_file</name></expr></argument>, <argument><expr><operator>(</operator><name>off_t</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BAD_LSEEK</name></expr>)</condition>
<block>{<block_content>





<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"seek error to 0"</literal></expr></argument>, <argument><expr><name>NULL_PARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>ch_addbuf</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>buf</name></name> <modifier>*</modifier></type><name>bp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bufnode</name></name> <modifier>*</modifier></type><name>bn</name></decl>;</decl_stmt>





<expr_stmt><expr><name>bp</name> <operator>=</operator> <operator>(</operator>struct <name>buf</name> <operator>*</operator><operator>)</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ch_nbufs</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bp</name><operator>-&gt;</operator><name>block</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bn</name> <operator>=</operator> <operator>&amp;</operator><name><name>bp</name><operator>-&gt;</operator><name>node</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BUF_INS_TAIL</name><argument_list>(<argument><expr><name>bn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUF_HASH_INS</name><argument_list>(<argument><expr><name>bn</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>init_hashtbl</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>h</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>h</name> <operator>&lt;</operator> <name>BUFHASH_SIZE</name></expr>;</condition> <incr><expr><name>h</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>thisfile</name><operator>-&gt;</operator><name>hashtbl</name><index>[<expr><name>h</name></expr>]</index></name><operator>.</operator><name>hnext</name> <operator>=</operator> <call><name>END_OF_HCHAIN</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thisfile</name><operator>-&gt;</operator><name>hashtbl</name><index>[<expr><name>h</name></expr>]</index></name><operator>.</operator><name>hprev</name> <operator>=</operator> <call><name>END_OF_HCHAIN</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>ch_delbufs</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bufnode</name></name> <modifier>*</modifier></type><name>bn</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>ch_bufhead</name> <operator>!=</operator> <name>END_OF_CHAIN</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>bn</name> <operator>=</operator> <name>ch_bufhead</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BUF_RM</name><argument_list>(<argument><expr><name>bn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><call><name>bufnode_buf</name><argument_list>(<argument><expr><name>bn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>ch_nbufs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_hashtbl</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>public</name> <name>int</name></type>
<name>seekable</name><parameter_list>(<parameter><decl><type><name>f</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>f</name></decl>;</decl_stmt>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>fd0</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <name>fd0</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isatty</name><argument_list>(<argument><expr><name>fd0</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>




<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><operator>(</operator><call><name>lseek</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><operator>(</operator><name>off_t</name><operator>)</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>BAD_LSEEK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>public</name> <name>void</name></type>
<name>ch_set_eof</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ch_fsize</name> <operator>!=</operator> <name>NULL_POSITION</name> <operator>&amp;&amp;</operator> <name>ch_fsize</name> <operator>&lt;</operator> <name>ch_fpos</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ch_fsize</name> <operator>=</operator> <name>ch_fpos</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>





<function><type><name>public</name> <name>void</name></type>
<name>ch_init</name><parameter_list>(<parameter><decl><type><name>f</name></type></decl></parameter>, <parameter><decl><type><name>flags</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<block>{<block_content>



<expr_stmt><expr><name>thisfile</name> <operator>=</operator> <operator>(</operator>struct <name>filestate</name> <operator>*</operator><operator>)</operator> <call><name>get_filestate</name><argument_list>(<argument><expr><name>curr_ifile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>thisfile</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><name>thisfile</name> <operator>=</operator> <operator>(</operator>struct <name>filestate</name> <operator>*</operator><operator>)</operator>
<call><name>ecalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>filestate</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thisfile</name><operator>-&gt;</operator><name>buflist</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name><name>thisfile</name><operator>-&gt;</operator><name>buflist</name><operator>.</operator><name>prev</name></name> <operator>=</operator> <name>END_OF_CHAIN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thisfile</name><operator>-&gt;</operator><name>nbufs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thisfile</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thisfile</name><operator>-&gt;</operator><name>fpos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thisfile</name><operator>-&gt;</operator><name>block</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thisfile</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thisfile</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thisfile</name><operator>-&gt;</operator><name>fsize</name></name> <operator>=</operator> <name>NULL_POSITION</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_hashtbl</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>CH_CANSEEK</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>seekable</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ch_flags</name> <operator>&amp;=</operator> <operator>~</operator><name>CH_CANSEEK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>set_filestate</name><argument_list>(<argument><expr><name>curr_ifile</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>thisfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>thisfile</name><operator>-&gt;</operator><name>file</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>thisfile</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ch_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>public</name> <name>void</name></type>
<name>ch_close</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>keepstate</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>thisfile</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ch_flags</name> <operator>&amp;</operator> <operator>(</operator><name>CH_CANSEEK</name><operator>|</operator><name>CH_POPENED</name><operator>|</operator><name>CH_HELPFILE</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>ch_flags</name> <operator>&amp;</operator> <name>CH_KEEPOPEN</name><operator>)</operator></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><call><name>ch_delbufs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>keepstate</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ch_flags</name> <operator>&amp;</operator> <name>CH_KEEPOPEN</name><operator>)</operator></expr>)</condition>
<block>{<block_content>






<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ch_flags</name> <operator>&amp;</operator> <operator>(</operator><name>CH_POPENED</name><operator>|</operator><name>CH_HELPFILE</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>ch_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ch_file</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>keepstate</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>keepstate</name></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>thisfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>thisfile</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_filestate</name><argument_list>(<argument><expr><name>curr_ifile</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>public</name> <name>int</name></type>
<name>ch_getflags</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>thisfile</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ch_flags</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
public void
ch_dump(struct filestate *fs)
{
struct buf *bp;
struct bufnode *bn;
unsigned char *s;

if (fs == NULL)
{
printf(" --no filestate\n");
return;
}
printf(" file %d, flags %x, fpos %x, fsize %x, blk/off %x/%x\n",
fs-&gt;file, fs-&gt;flags, fs-&gt;fpos,
fs-&gt;fsize, fs-&gt;block, fs-&gt;offset);
printf(" %d bufs:\n", fs-&gt;nbufs);
for (bn = fs-&gt;next; bn != &amp;fs-&gt;buflist; bn = bn-&gt;next)
{
bp = bufnode_buf(bn);
printf("%x: blk %x, size %x \"",
bp, bp-&gt;block, bp-&gt;datasize);
for (s = bp-&gt;data; s &lt; bp-&gt;data + 30; s++)
if (*s &gt;= ' ' &amp;&amp; *s &lt; 0x7F)
printf("%c", *s);
else
printf(".");
printf("\"\n");
}
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
