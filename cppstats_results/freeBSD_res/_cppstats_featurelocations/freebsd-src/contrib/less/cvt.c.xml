<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/less/cvt.c">












<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"less.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"charset.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>utf_mode</name></decl>;</decl_stmt>




<function><type><name>public</name> <name>int</name></type>
<name>cvt_length</name><parameter_list>(<parameter><decl><type><name>len</name></type></decl></parameter>, <parameter><decl><type><name>ops</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ops</name></decl>;</decl_stmt>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>utf_mode</name></expr>)</condition><block type="pseudo"><block_content>





<expr_stmt><expr><name>len</name> <operator>*=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>len</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>public</name> <name>int</name> <modifier>*</modifier></type>
<name>cvt_alloc_chpos</name><parameter_list>(<parameter><decl><type><name>len</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>chpos</name> <init>= <expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <call><name>ecalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>chpos</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>
<return>return <expr><operator>(</operator><name>chpos</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><name>public</name> <name>void</name></type>
<name>cvt_text</name><parameter_list>(<parameter><decl><type><name>odst</name></type></decl></parameter>, <parameter><decl><type><name>osrc</name></type></decl></parameter>, <parameter><decl><type><name>chpos</name></type></decl></parameter>, <parameter><decl><type><name>lenp</name></type></decl></parameter>, <parameter><decl><type><name>ops</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>odst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>osrc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>chpos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>lenp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ops</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>edst</name> <init>= <expr><name>odst</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>src_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LWCHAR</name></type> <name>ch</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>lenp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>src_end</name> <operator>=</operator> <name>osrc</name> <operator>+</operator> <operator>*</operator><name>lenp</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>src_end</name> <operator>=</operator> <name>osrc</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>osrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init><expr><name>src</name> <operator>=</operator> <name>osrc</name></expr><operator>,</operator> <expr><name>dst</name> <operator>=</operator> <name>odst</name></expr>;</init> <condition><expr><name>src</name> <operator>&lt;</operator> <name>src_end</name></expr>;</condition> <incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>src_pos</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>src</name> <operator>-</operator> <name>osrc</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dst_pos</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>dst</name> <operator>-</operator> <name>odst</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ansi_state</name></name> <modifier>*</modifier></type><name>pansi</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>step_char</name><argument_list>(<argument><expr><operator>&amp;</operator><name>src</name></expr></argument>, <argument><expr><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>src_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ops</name> <operator>&amp;</operator> <name>CVT_BS</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>ch</name> <operator>==</operator> <literal type="char">'\b'</literal> <operator>&amp;&amp;</operator> <name>dst</name> <operator>&gt;</operator> <name>odst</name></expr>)</condition>
<block>{<block_content>

<do>do <block>{<block_content>
<expr_stmt><expr><name>dst</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>dst</name> <operator>&gt;</operator> <name>odst</name> <operator>&amp;&amp;</operator> <name>utf_mode</name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>IS_ASCII_OCTET</name><argument_list>(<argument><expr><operator>*</operator><name>dst</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS_UTF8_LEAD</name><argument_list>(<argument><expr><operator>*</operator><name>dst</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>ops</name> <operator>&amp;</operator> <name>CVT_ANSI</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>pansi</name> <operator>=</operator> <call><name>ansi_start</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>

<while>while <condition>(<expr><name>src</name> <operator>&lt;</operator> <name>src_end</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ansi_step</name><argument_list>(<argument><expr><name>pansi</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ANSI_MID</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>ansi_done</name><argument_list>(<argument><expr><name>pansi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ops</name> <operator>&amp;</operator> <name>CVT_TO_LC</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>IS_UPPER</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>TO_LOWER</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>put_wchar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dst</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>chpos</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>chpos</name><index>[<expr><name>dst_pos</name></expr>]</index></name> <operator>=</operator> <name>src_pos</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>&gt;</operator> <name>edst</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>edst</name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ops</name> <operator>&amp;</operator> <name>CVT_CRLF</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>edst</name> <operator>&gt;</operator> <name>odst</name> <operator>&amp;&amp;</operator> <name><name>edst</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>edst</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>edst</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>lenp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>lenp</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>edst</name> <operator>-</operator> <name>odst</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>
</unit>
