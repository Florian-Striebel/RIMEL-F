<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/less/line.c">














<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"less.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"charset.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"position.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>WIN32C</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIN32_LEAN_AND_MEAN</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_PFX_WIDTH</name></cpp:macro> <cpp:value>(MAX_LINENUM_WIDTH + MAX_STATUSCOL_WIDTH + 1)</cpp:value></cpp:define>
<struct><specifier>static</specifier> struct <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>print</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>pfx</name><index>[<expr><name>MAX_PFX_WIDTH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>pfx_attr</name><index>[<expr><name>MAX_PFX_WIDTH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pfx_end</name></decl>;</decl_stmt>
}</block> <decl><name>linebuf</name></decl>;</struct>

<decl_stmt><decl><type><name><name>struct</name> <name>xbuffer</name></name></type> <name>shifted_ansi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>xbuffer</name></name></type> <name>last_ansi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>size_linebuf</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>ansi_state</name></name> <modifier>*</modifier></type><name>line_ansi</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>cshift</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>hshift</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name><name>tabstops</name><index>[<expr><name>TABSTOP_MAX</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>ntabstops</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>tabdefault</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>POSITION</name></type> <name>highest_hilite</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>end_column</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>right_curr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>right_column</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>overstrike</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>last_overstrike</name> <init>= <expr><name>AT_NORMAL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>is_null_line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>LWCHAR</name></type> <name>pendc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>POSITION</name></type> <name>pendpos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>end_ansi_chars</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>mid_ansi_chars</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>in_hilite</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name> <name>attr_swidth</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>a</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name> <name>attr_ewidth</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>a</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name> <name>do_append</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>LWCHAR</name> <name>ch</name><operator>,</operator> <name>char</name> <operator>*</operator><name>rep</name><operator>,</operator> <name>POSITION</name> <name>pos</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>sigs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>bs_mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>linenums</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>ctldisp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>twiddle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>binattr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>status_col</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>status_col_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>linenum_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>auto_wrap</name></decl>, <decl><type ref="prev"/><name>ignaw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>bo_s_width</name></decl>, <decl><type ref="prev"/><name>bo_e_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>ul_s_width</name></decl>, <decl><type ref="prev"/><name>ul_e_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>bl_s_width</name></decl>, <decl><type ref="prev"/><name>bl_e_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>so_s_width</name></decl>, <decl><type ref="prev"/><name>so_e_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>sc_width</name></decl>, <decl><type ref="prev"/><name>sc_height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>utf_mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>POSITION</name></type> <name>start_attnpos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>POSITION</name></type> <name>end_attnpos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name></type> <name>rscroll_char</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>rscroll_attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>use_color</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>mbc_buf</name><index>[<expr><name>MAX_UTF_CHAR_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>mbc_buf_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>mbc_buf_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>POSITION</name></type> <name>mbc_pos</name></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>color_map</name><index>[<expr><name>AT_NUM_COLORS</name></expr>]</index><index>[<expr><literal type="number">12</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="string">"Wm"</literal></expr>,
<expr><literal type="string">"kR"</literal></expr>,
<expr><literal type="string">"kR"</literal></expr>,
<expr><literal type="string">"kY"</literal></expr>,
<expr><literal type="string">"c"</literal></expr>,
<expr><literal type="string">"Wb"</literal></expr>,
<expr><literal type="string">"kC"</literal></expr>,
<expr><literal type="string">"kc"</literal></expr>,
<expr><literal type="string">"kG"</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">""</literal></expr>,
<expr><literal type="string">""</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>


<struct>struct <name>ansi_state</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>hindex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hlink</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prev_esc</name></decl>;</decl_stmt>
}</block>;</struct>




<function><type><name>public</name> <name>void</name></type>
<name>init_line</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>end_ansi_chars</name> <operator>=</operator> <call><name>lgetenv</name><argument_list>(<argument><expr><literal type="string">"LESSANSIENDCHARS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isnullenv</name><argument_list>(<argument><expr><name>end_ansi_chars</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>end_ansi_chars</name> <operator>=</operator> <literal type="string">"m"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>mid_ansi_chars</name> <operator>=</operator> <call><name>lgetenv</name><argument_list>(<argument><expr><literal type="string">"LESSANSIMIDCHARS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isnullenv</name><argument_list>(<argument><expr><name>mid_ansi_chars</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mid_ansi_chars</name> <operator>=</operator> <literal type="string">"0123456789:;[?!\"'#%()*+ "</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>linebuf</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>ecalloc</name><argument_list>(<argument><expr><name>LINEBUF_SIZE</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>linebuf</name><operator>.</operator><name>attr</name></name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <call><name>ecalloc</name><argument_list>(<argument><expr><name>LINEBUF_SIZE</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size_linebuf</name> <operator>=</operator> <name>LINEBUF_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xbuf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>shifted_ansi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xbuf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>last_ansi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>expand_linebuf</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>new_size</name> <init>= <expr><name>size_linebuf</name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_REALLOC</name></expr></cpp:if>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new_buf</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>linebuf</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>new_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>new_attr</name> <init>= <expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>linebuf</name><operator>.</operator><name>attr</name></name></expr></argument>, <argument><expr><name>new_size</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new_buf</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>new_size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>new_attr</name> <init>= <expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>new_size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>new_buf</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>new_attr</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>new_attr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>new_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>new_buf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>new_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_REALLOC</name></expr></cpp:if>



<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>new_buf</name></expr></argument>, <argument><expr><name><name>linebuf</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>size_linebuf</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>new_attr</name></expr></argument>, <argument><expr><name><name>linebuf</name><operator>.</operator><name>attr</name></name></expr></argument>, <argument><expr><name>size_linebuf</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>linebuf</name><operator>.</operator><name>attr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>linebuf</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>linebuf</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <name>new_buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>linebuf</name><operator>.</operator><name>attr</name></name> <operator>=</operator> <name>new_attr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size_linebuf</name> <operator>=</operator> <name>new_size</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>public</name> <name>int</name></type>
<name>is_ascii_char</name><parameter_list>(<parameter><decl><type><name>ch</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>LWCHAR</name></type> <name>ch</name></decl>;</decl_stmt>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>ch</name> <operator>&lt;=</operator> <literal type="number">0x7F</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>inc_end_column</name><parameter_list>(<parameter><decl><type><name>w</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>;</decl_stmt>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>end_column</name> <operator>&gt;</operator> <name>right_column</name> <operator>&amp;&amp;</operator> <name>w</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>right_column</name> <operator>=</operator> <name>end_column</name></expr>;</expr_stmt>
<expr_stmt><expr><name>right_curr</name> <operator>=</operator> <name><name>linebuf</name><operator>.</operator><name>end</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>end_column</name> <operator>+=</operator> <name>w</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>public</name> <name>void</name></type>
<name>prewind</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>linebuf</name><operator>.</operator><name>print</name></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>linebuf</name><operator>.</operator><name>pfx_end</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name><name>linebuf</name><operator>.</operator><name>end</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>linebuf</name><operator>.</operator><name>end</name></name> <operator>&lt;</operator> <name><name>linebuf</name><operator>.</operator><name>print</name></name></expr>;</condition> <incr><expr><name><name>linebuf</name><operator>.</operator><name>end</name></name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>linebuf</name><operator>.</operator><name>buf</name><index>[<expr><name><name>linebuf</name><operator>.</operator><name>end</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>linebuf</name><operator>.</operator><name>attr</name><index>[<expr><name><name>linebuf</name><operator>.</operator><name>end</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>end_column</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>right_curr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>right_column</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cshift</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>overstrike</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>last_overstrike</name> <operator>=</operator> <name>AT_NORMAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mbc_buf_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>is_null_line</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pendc</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>in_hilite</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>shifted_ansi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>last_ansi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_linebuf</name><parameter_list>(<parameter><decl><type><name>n</name></type></decl></parameter>, <parameter><decl><type><name>ch</name></type></decl></parameter>, <parameter><decl><type><name>attr</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>attr</name></decl>;</decl_stmt>
<block>{<block_content>
<expr_stmt><expr><name><name>linebuf</name><operator>.</operator><name>buf</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>linebuf</name><operator>.</operator><name>attr</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>attr</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>add_linebuf</name><parameter_list>(<parameter><decl><type><name>ch</name></type></decl></parameter>, <parameter><decl><type><name>attr</name></type></decl></parameter>, <parameter><decl><type><name>w</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name></type> <name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>;</decl_stmt>
<block>{<block_content>
<expr_stmt><expr><call><name>set_linebuf</name><argument_list>(<argument><expr><name><name>linebuf</name><operator>.</operator><name>end</name></name><operator>++</operator></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>inc_end_column</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_pfx</name><parameter_list>(<parameter><decl><type><name>n</name></type></decl></parameter>, <parameter><decl><type><name>ch</name></type></decl></parameter>, <parameter><decl><type><name>attr</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>attr</name></decl>;</decl_stmt>
<block>{<block_content>
<expr_stmt><expr><name><name>linebuf</name><operator>.</operator><name>pfx</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>linebuf</name><operator>.</operator><name>pfx_attr</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>attr</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>add_pfx</name><parameter_list>(<parameter><decl><type><name>ch</name></type></decl></parameter>, <parameter><decl><type><name>attr</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name></type> <name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>attr</name></decl>;</decl_stmt>
<block>{<block_content>
<expr_stmt><expr><call><name>set_pfx</name><argument_list>(<argument><expr><name><name>linebuf</name><operator>.</operator><name>pfx_end</name></name><operator>++</operator></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>public</name> <name>void</name></type>
<name>plinestart</name><parameter_list>(<parameter><decl><type><name>pos</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>POSITION</name></type> <name>pos</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>LINENUM</name></type> <name>linenum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>linenums</name> <operator>==</operator> <name>OPT_ONPLUS</name></expr>)</condition>
<block>{<block_content>








<expr_stmt><expr><name>linenum</name> <operator>=</operator> <call><name>find_linenum</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>status_col</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><name>AT_NORMAL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><call><name>posmark</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>a</name> <operator>|=</operator> <name>AT_HILITE</name><operator>|</operator><name>AT_COLOR_MARK</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>start_attnpos</name> <operator>!=</operator> <name>NULL_POSITION</name> <operator>&amp;&amp;</operator>
<name>pos</name> <operator>&gt;=</operator> <name>start_attnpos</name> <operator>&amp;&amp;</operator> <name>pos</name> <operator>&lt;=</operator> <name>end_attnpos</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>a</name> <operator>|=</operator> <name>AT_HILITE</name><operator>|</operator><name>AT_COLOR_ATTN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>add_pfx</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>linebuf</name><operator>.</operator><name>pfx_end</name></name> <operator>&lt;</operator> <name>status_col_width</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>add_pfx</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>AT_NORMAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>linenums</name> <operator>==</operator> <name>OPT_ONPLUS</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><call><name>INT_STRLEN_BOUND</name><argument_list>(<argument><expr><name>linenum</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>linenumtoa</name><argument_list>(<argument><expr><name>linenum</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>linenum_width</name> <operator>-</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>add_pfx</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>AT_NORMAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>add_pfx</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>AT_NORMAL</name><operator>|</operator><name>AT_COLOR_LINENUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>add_pfx</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>AT_NORMAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>end_column</name> <operator>=</operator> <name><name>linebuf</name><operator>.</operator><name>pfx_end</name></name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>public</name> <name>int</name></type>
<name>line_pfx_width</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>status_col</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>width</name> <operator>+=</operator> <name>status_col_width</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>linenums</name> <operator>==</operator> <name>OPT_ONPLUS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>width</name> <operator>+=</operator> <name>linenum_width</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>width</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>public</name> <name>void</name></type>
<name>pshift_all</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>linebuf</name><operator>.</operator><name>print</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>linebuf</name><operator>.</operator><name>end</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>linebuf</name><operator>.</operator><name>attr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>AT_ANSI</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xbuf_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>shifted_ansi</name></expr></argument>, <argument><expr><name><name>linebuf</name><operator>.</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><name><name>linebuf</name><operator>.</operator><name>end</name></name> <operator>=</operator> <name><name>linebuf</name><operator>.</operator><name>print</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>end_column</name> <operator>=</operator> <name><name>linebuf</name><operator>.</operator><name>pfx_end</name></name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>attr_swidth</name><parameter_list>(<parameter><decl><type><name>a</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>apply_at_specials</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&amp;</operator> <name>AT_UNDERLINE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>w</name> <operator>+=</operator> <name>ul_s_width</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&amp;</operator> <name>AT_BOLD</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>w</name> <operator>+=</operator> <name>bo_s_width</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&amp;</operator> <name>AT_BLINK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>w</name> <operator>+=</operator> <name>bl_s_width</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&amp;</operator> <name>AT_STANDOUT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>w</name> <operator>+=</operator> <name>so_s_width</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>w</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>attr_ewidth</name><parameter_list>(<parameter><decl><type><name>a</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>apply_at_specials</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&amp;</operator> <name>AT_UNDERLINE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>w</name> <operator>+=</operator> <name>ul_e_width</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&amp;</operator> <name>AT_BOLD</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>w</name> <operator>+=</operator> <name>bo_e_width</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&amp;</operator> <name>AT_BLINK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>w</name> <operator>+=</operator> <name>bl_e_width</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&amp;</operator> <name>AT_STANDOUT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>w</name> <operator>+=</operator> <name>so_e_width</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>w</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>public</name> <name>int</name></type>
<name>pwidth</name><parameter_list>(<parameter><decl><type><name>ch</name></type></decl></parameter>, <parameter><decl><type><name>a</name></type></decl></parameter>, <parameter><decl><type><name>prev_ch</name></type></decl></parameter>, <parameter><decl><type><name>prev_a</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>LWCHAR</name></type> <name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LWCHAR</name></type> <name>prev_ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prev_a</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'\b'</literal></expr>)</condition>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>prev_a</name> <operator>&amp;</operator> <operator>(</operator><name>AT_ANSI</name><operator>|</operator><name>AT_BINARY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>strlen</name><argument_list>(<argument><expr><call><name>prchar</name><argument_list>(<argument><expr><literal type="char">'\b'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>utf_mode</name> <operator>&amp;&amp;</operator> <call><name>is_wide_char</name><argument_list>(<argument><expr><name>prev_ch</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">2</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>utf_mode</name> <operator>||</operator> <call><name>is_ascii_char</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>control_char</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>)</operator><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>





<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>is_composing_char</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>is_combining_char</name><argument_list>(<argument><expr><name>prev_ch</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>











<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>





<expr_stmt><expr><name>w</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>is_wide_char</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>w</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>linebuf</name><operator>.</operator><name>end</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_at_equiv</name><argument_list>(<argument><expr><name><name>linebuf</name><operator>.</operator><name>attr</name><index>[<expr><name><name>linebuf</name><operator>.</operator><name>end</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>w</name> <operator>+=</operator> <call><name>attr_ewidth</name><argument_list>(<argument><expr><name><name>linebuf</name><operator>.</operator><name>attr</name><index>[<expr><name><name>linebuf</name><operator>.</operator><name>end</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>apply_at_specials</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>AT_NORMAL</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>linebuf</name><operator>.</operator><name>end</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><call><name>is_at_equiv</name><argument_list>(<argument><expr><name><name>linebuf</name><operator>.</operator><name>attr</name><index>[<expr><name><name>linebuf</name><operator>.</operator><name>end</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>w</name> <operator>+=</operator> <call><name>attr_swidth</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>w</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>backc</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>LWCHAR</name></type> <name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>linebuf</name><operator>.</operator><name>end</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>linebuf</name><operator>.</operator><name>buf</name><index>[<expr><name><name>linebuf</name><operator>.</operator><name>end</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>step_char</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>linebuf</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>p</name> <operator>&gt;</operator> <name><name>linebuf</name><operator>.</operator><name>buf</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>LWCHAR</name></type> <name>prev_ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>linebuf</name><operator>.</operator><name>end</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name><name>linebuf</name><operator>.</operator><name>buf</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>prev_ch</name> <operator>=</operator> <call><name>step_char</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>linebuf</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>width</name> <operator>=</operator> <call><name>pwidth</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><name><name>linebuf</name><operator>.</operator><name>attr</name><index>[<expr><name><name>linebuf</name><operator>.</operator><name>end</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>prev_ch</name></expr></argument>, <argument><expr><name><name>linebuf</name><operator>.</operator><name>attr</name><index>[<expr><name><name>linebuf</name><operator>.</operator><name>end</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>end_column</name> <operator>-=</operator> <name>width</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <name>prev_ch</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>public</name> <name>int</name></type>
<name>is_ansi_end</name><parameter_list>(<parameter><decl><type><name>ch</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>LWCHAR</name></type> <name>ch</name></decl>;</decl_stmt>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_ascii_char</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>strchr</name><argument_list>(<argument><expr><name>end_ansi_chars</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>)</operator> <name>ch</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>public</name> <name>int</name></type>
<name>is_ansi_middle</name><parameter_list>(<parameter><decl><type><name>ch</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>LWCHAR</name></type> <name>ch</name></decl>;</decl_stmt>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_ascii_char</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>is_ansi_end</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>strchr</name><argument_list>(<argument><expr><name>mid_ansi_chars</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>)</operator> <name>ch</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>public</name> <name>void</name></type>
<name>skip_ansi</name><parameter_list>(<parameter><decl><type><name>pansi</name></type></decl></parameter>, <parameter><decl><type><name>pp</name></type></decl></parameter>, <parameter><decl><type><name>limit</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name><name>struct</name> <name>ansi_state</name></name> <modifier>*</modifier></type><name>pansi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constant</name> <name>char</name> <modifier>*</modifier></type><name>limit</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>LWCHAR</name></type> <name>c</name></decl>;</decl_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>step_char</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>*</operator><name>pp</name> <operator>&lt;</operator> <name>limit</name> <operator>&amp;&amp;</operator> <call><name>ansi_step</name><argument_list>(<argument><expr><name>pansi</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ANSI_MID</name></expr>)</condition>;</do>

</block_content>}</block></function>





<function><type><name>public</name> <name><name>struct</name> <name>ansi_state</name></name> <modifier>*</modifier></type>
<name>ansi_start</name><parameter_list>(<parameter><decl><type><name>ch</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>LWCHAR</name></type> <name>ch</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ansi_state</name></name> <modifier>*</modifier></type><name>pansi</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_CSI_START</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pansi</name> <operator>=</operator> <call><name>ecalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ansi_state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pansi</name><operator>-&gt;</operator><name>hindex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pansi</name><operator>-&gt;</operator><name>hlink</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pansi</name><operator>-&gt;</operator><name>prev_esc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>pansi</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>public</name> <name>int</name></type>
<name>ansi_step</name><parameter_list>(<parameter><decl><type><name>pansi</name></type></decl></parameter>, <parameter><decl><type><name>ch</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name><name>struct</name> <name>ansi_state</name></name> <modifier>*</modifier></type><name>pansi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LWCHAR</name></type> <name>ch</name></decl>;</decl_stmt>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>pansi</name><operator>-&gt;</operator><name>hlink</name></name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'\7'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ANSI_END</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pansi</name><operator>-&gt;</operator><name>prev_esc</name></name> <operator>&amp;&amp;</operator> <name>ch</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ANSI_END</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pansi</name><operator>-&gt;</operator><name>prev_esc</name></name> <operator>=</operator> <operator>(</operator><name>ch</name> <operator>==</operator> <name>ESC</name><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><name>ANSI_MID</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pansi</name><operator>-&gt;</operator><name>hindex</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>hlink_prefix</name><index>[]</index></name> <init>= <expr><name>ESCS</name> <literal type="string">"]8;"</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <name><name>hlink_prefix</name><index>[<expr><name><name>pansi</name><operator>-&gt;</operator><name>hindex</name></name></expr>]</index></name> <operator>||</operator>
<operator>(</operator><name><name>pansi</name><operator>-&gt;</operator><name>hindex</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>IS_CSI_START</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>pansi</name><operator>-&gt;</operator><name>hindex</name></name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hlink_prefix</name><index>[<expr><name><name>pansi</name><operator>-&gt;</operator><name>hindex</name></name></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pansi</name><operator>-&gt;</operator><name>hlink</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ANSI_MID</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>pansi</name><operator>-&gt;</operator><name>hindex</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_ansi_middle</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ANSI_MID</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>is_ansi_end</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ANSI_END</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>ANSI_ERR</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>public</name> <name>void</name></type>
<name>ansi_done</name><parameter_list>(<parameter><decl><type><name>pansi</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name><name>struct</name> <name>ansi_state</name></name> <modifier>*</modifier></type><name>pansi</name></decl>;</decl_stmt>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pansi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORE_CHAR</name><parameter_list>(<parameter><type><name>ch</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>rep</name></type></parameter>,<parameter><type><name>pos</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (store_char((ch),(a),(rep),(pos))) return (1); } while (0)</cpp:value></cpp:define>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>store_char</name><parameter_list>(<parameter><decl><type><name>ch</name></type></decl></parameter>, <parameter><decl><type><name>a</name></type></decl></parameter>, <parameter><decl><type><name>rep</name></type></decl></parameter>, <parameter><decl><type><name>pos</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>LWCHAR</name></type> <name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>POSITION</name></type> <name>pos</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>replen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>cs</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>a</name> <operator>&amp;</operator> <operator>(</operator><name>AT_UNDERLINE</name><operator>|</operator><name>AT_BOLD</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>AT_NORMAL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>last_overstrike</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HILITE_SEARCH</name></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>matches</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>resend_last</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hl_attr</name> <init>= <expr><call><name>is_hilited_attr</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>pos</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>matches</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>hl_attr</name></expr>)</condition>
<block>{<block_content>




<if_stmt><if>if <condition>(<expr><name>a</name> <operator>!=</operator> <name>AT_ANSI</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>highest_hilite</name> <operator>!=</operator> <name>NULL_POSITION</name> <operator>&amp;&amp;</operator> <name>pos</name> <operator>&gt;</operator> <name>highest_hilite</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>highest_hilite</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>a</name> <operator>|=</operator> <name>hl_attr</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>in_hilite</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>in_hilite</name></expr>)</condition>
<block>{<block_content>




<expr_stmt><expr><name>resend_last</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>in_hilite</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>resend_last</name></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>last_ansi</name><operator>.</operator><name>end</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STORE_CHAR</name><argument_list>(<argument><expr><name><name>last_ansi</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>AT_ANSI</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <name>AT_ANSI</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>linebuf</name><operator>.</operator><name>buf</name><index>[<expr><name><name>linebuf</name><operator>.</operator><name>end</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LWCHAR</name></type> <name>prev_ch</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>linebuf</name><operator>.</operator><name>end</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>step_char</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>linebuf</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prev_a</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>linebuf</name><operator>.</operator><name>end</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>linebuf</name><operator>.</operator><name>attr</name><index>[<expr><name><name>linebuf</name><operator>.</operator><name>end</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>pwidth</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>prev_ch</name></expr></argument>, <argument><expr><name>prev_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ctldisp</name> <operator>!=</operator> <name>OPT_ON</name> <operator>&amp;&amp;</operator> <name>end_column</name> <operator>-</operator> <name>cshift</name> <operator>+</operator> <name>w</name> <operator>+</operator> <call><name>attr_ewidth</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>sc_width</name></expr>)</condition><block type="pseudo"><block_content>



<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rep</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>cs</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <name>ch</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rep</name> <operator>=</operator> <operator>&amp;</operator><name>cs</name></expr>;</expr_stmt>
<expr_stmt><expr><name>replen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else
<block>{<block_content>
<expr_stmt><expr><name>replen</name> <operator>=</operator> <call><name>utf_len</name><argument_list>(<argument><expr><name><name>rep</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>linebuf</name><operator>.</operator><name>end</name></name> <operator>+</operator> <name>replen</name> <operator>&gt;=</operator> <name>size_linebuf</name><operator>-</operator><literal type="number">6</literal></expr>)</condition>
<block>{<block_content>




<if_stmt><if>if <condition>(<expr><call><name>expand_linebuf</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cshift</name> <operator>==</operator> <name>hshift</name> <operator>&amp;&amp;</operator> <name><name>shifted_ansi</name><operator>.</operator><name>end</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>shifted_ansi</name><operator>.</operator><name>end</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>add_linebuf</name><argument_list>(<argument><expr><name><name>shifted_ansi</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>AT_ANSI</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>xbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>shifted_ansi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>inc_end_column</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>replen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>add_linebuf</name><argument_list>(<argument><expr><operator>*</operator><name>rep</name><operator>++</operator></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>cshift</name> <operator>&lt;</operator> <name>hshift</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <name>AT_ANSI</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xbuf_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>shifted_ansi</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>linebuf</name><operator>.</operator><name>end</name></name> <operator>&gt;</operator> <name><name>linebuf</name><operator>.</operator><name>print</name></name></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>linebuf</name><operator>.</operator><name>print</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>linebuf</name><operator>.</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>linebuf</name><operator>.</operator><name>buf</name><index>[<expr><name>i</name><operator>+</operator><name>replen</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>linebuf</name><operator>.</operator><name>attr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>linebuf</name><operator>.</operator><name>attr</name><index>[<expr><name>i</name><operator>+</operator><name>replen</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>linebuf</name><operator>.</operator><name>end</name></name> <operator>-=</operator> <name>replen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cshift</name> <operator>+=</operator> <name>w</name></expr>;</expr_stmt>





<while>while <condition>(<expr><name>cshift</name> <operator>&gt;</operator> <name>hshift</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>add_linebuf</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>rscroll_attr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cshift</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORE_TAB</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>pos</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (store_tab((a),(pos))) return (1); } while (0)</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>store_tab</name><parameter_list>(<parameter><decl><type><name>attr</name></type></decl></parameter>, <parameter><decl><type><name>pos</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>POSITION</name></type> <name>pos</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>to_tab</name> <init>= <expr><name>end_column</name> <operator>-</operator> <name><name>linebuf</name><operator>.</operator><name>pfx_end</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ntabstops</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <name>to_tab</name> <operator>&gt;=</operator> <name><name>tabstops</name><index>[<expr><name>ntabstops</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>to_tab</name> <operator>=</operator> <name>tabdefault</name> <operator>-</operator>
<operator>(</operator><operator>(</operator><name>to_tab</name> <operator>-</operator> <name><name>tabstops</name><index>[<expr><name>ntabstops</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>tabdefault</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>ntabstops</name> <operator>-</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>to_tab</name> <operator>&gt;=</operator> <name><name>tabstops</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><name>to_tab</name> <operator>=</operator> <name><name>tabstops</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>to_tab</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<do>do <block>{<block_content>
<expr_stmt><expr><call><name>STORE_CHAR</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>attr</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>--</operator><name>to_tab</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORE_PRCHAR</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>pos</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (store_prchar((c), (pos))) return 1; } while (0)</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>store_prchar</name><parameter_list>(<parameter><decl><type><name>c</name></type></decl></parameter>, <parameter><decl><type><name>pos</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>LWCHAR</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>POSITION</name></type> <name>pos</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>




<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>prchar</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>( <init>;</init> <condition><expr><operator>*</operator><name>s</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STORE_CHAR</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>AT_BINARY</name><operator>|</operator><name>AT_COLOR_CTRL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>flush_mbc_buf</name><parameter_list>(<parameter><decl><type><name>pos</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>POSITION</name></type> <name>pos</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>mbc_buf_index</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>store_prchar</name><argument_list>(<argument><expr><name><name>mbc_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>mbc_buf_index</name> <operator>-</operator> <name>i</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>






<function><type><name>public</name> <name>int</name></type>
<name>pappend</name><parameter_list>(<parameter><decl><type><name>c</name></type></decl></parameter>, <parameter><decl><type><name>pos</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>POSITION</name></type> <name>pos</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pendc</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>&amp;&amp;</operator> <name>pendc</name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>do_append</name><argument_list>(<argument><expr><name>pendc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pendpos</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>




<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pendc</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>&amp;&amp;</operator> <name>bs_mode</name> <operator>==</operator> <name>BS_SPECIAL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mbc_buf_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>flush_mbc_buf</name><argument_list>(<argument><expr><name>mbc_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mbc_buf_index</name> <operator>=</operator> <name>r</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mbc_buf_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>mbc_buf_index</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>






<expr_stmt><expr><name>pendc</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pendpos</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>utf_mode</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>do_append</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>mbc_buf_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<label><name>retry</name>:</label>
<expr_stmt><expr><name>mbc_buf_index</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>mbc_buf</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IS_ASCII_OCTET</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>do_append</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>IS_UTF8_LEAD</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>mbc_buf_len</name> <operator>=</operator> <call><name>utf_len</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mbc_pos</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>flush_mbc_buf</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>IS_UTF8_TRAIL</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>mbc_buf</name><index>[<expr><name>mbc_buf_index</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mbc_buf_index</name> <operator>&lt;</operator> <name>mbc_buf_len</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>is_utf8_well_formed</name><argument_list>(<argument><expr><name>mbc_buf</name></expr></argument>, <argument><expr><name>mbc_buf_index</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>do_append</name><argument_list>(<argument><expr><call><name>get_wchar</name><argument_list>(<argument><expr><name>mbc_buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mbc_buf</name></expr></argument>, <argument><expr><name>mbc_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>mbc_buf_index</name> <operator>=</operator> <name>r</name> <operator>=</operator> <call><name>flush_mbc_buf</name><argument_list>(<argument><expr><name>mbc_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>mbc_buf_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else
<block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>flush_mbc_buf</name><argument_list>(<argument><expr><name>mbc_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mbc_buf_index</name> <operator>=</operator> <name>r</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mbc_buf_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>r</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>retry</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>!</operator><name>utf_mode</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name>mbc_buf_index</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>store_control_char</name><parameter_list>(<parameter><decl><type><name>ch</name></type></decl></parameter>, <parameter><decl><type><name>rep</name></type></decl></parameter>, <parameter><decl><type><name>pos</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>LWCHAR</name></type> <name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>POSITION</name></type> <name>pos</name></decl>;</decl_stmt>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ctldisp</name> <operator>==</operator> <name>OPT_ON</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>STORE_CHAR</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><name>AT_NORMAL</name></expr></argument>, <argument><expr><name>rep</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else
<block>{<block_content>

<expr_stmt><expr><call><name>STORE_PRCHAR</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>)</operator> <name>ch</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>store_ansi</name><parameter_list>(<parameter><decl><type><name>ch</name></type></decl></parameter>, <parameter><decl><type><name>rep</name></type></decl></parameter>, <parameter><decl><type><name>pos</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>LWCHAR</name></type> <name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>POSITION</name></type> <name>pos</name></decl>;</decl_stmt>
<block>{<block_content>
<switch>switch <condition>(<expr><call><name>ansi_step</name><argument_list>(<argument><expr><name>line_ansi</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>ANSI_MID</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>in_hilite</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STORE_CHAR</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><name>AT_ANSI</name></expr></argument>, <argument><expr><name>rep</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>ANSI_END</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>in_hilite</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STORE_CHAR</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><name>AT_ANSI</name></expr></argument>, <argument><expr><name>rep</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ansi_done</name><argument_list>(<argument><expr><name>line_ansi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>line_ansi</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ANSI_ERR</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>start</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>cshift</name> <operator>&lt;</operator> <name>hshift</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>shifted_ansi</name><operator>.</operator><name>data</name></name></expr> </then><else>: <expr><name><name>linebuf</name><operator>.</operator><name>buf</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>cshift</name> <operator>&lt;</operator> <name>hshift</name><operator>)</operator></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>shifted_ansi</name><operator>.</operator><name>end</name></name></expr> </then><else>: <expr><operator>&amp;</operator><name><name>linebuf</name><operator>.</operator><name>end</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>start</name> <operator>+</operator> <operator>*</operator><name>end</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LWCHAR</name></type> <name>bch</name></decl>;</decl_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>bch</name> <operator>=</operator> <call><name>step_char</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>p</name> <operator>&gt;</operator> <name>start</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS_CSI_START</name><argument_list>(<argument><expr><name>bch</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>start</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ansi_done</name><argument_list>(<argument><expr><name>line_ansi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>line_ansi</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<break>break;</break> </block_content>}</block>
</block_content>}</block></switch>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>store_bs</name><parameter_list>(<parameter><decl><type><name>ch</name></type></decl></parameter>, <parameter><decl><type><name>rep</name></type></decl></parameter>, <parameter><decl><type><name>pos</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>LWCHAR</name></type> <name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>POSITION</name></type> <name>pos</name></decl>;</decl_stmt>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>bs_mode</name> <operator>==</operator> <name>BS_CONTROL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>store_control_char</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><name>rep</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>linebuf</name><operator>.</operator><name>end</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name><name>linebuf</name><operator>.</operator><name>end</name></name> <operator>&lt;=</operator> <name><name>linebuf</name><operator>.</operator><name>print</name></name> <operator>&amp;&amp;</operator> <name><name>linebuf</name><operator>.</operator><name>buf</name><index>[<expr><name><name>linebuf</name><operator>.</operator><name>end</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>linebuf</name><operator>.</operator><name>end</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>linebuf</name><operator>.</operator><name>attr</name><index>[<expr><name><name>linebuf</name><operator>.</operator><name>end</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>AT_ANSI</name><operator>|</operator><name>AT_BINARY</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STORE_PRCHAR</name><argument_list>(<argument><expr><literal type="char">'\b'</literal></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>bs_mode</name> <operator>==</operator> <name>BS_NORMAL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STORE_CHAR</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><name>AT_NORMAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>bs_mode</name> <operator>==</operator> <name>BS_SPECIAL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>overstrike</name> <operator>=</operator> <call><name>backc</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>do_append</name><parameter_list>(<parameter><decl><type><name>ch</name></type></decl></parameter>, <parameter><decl><type><name>rep</name></type></decl></parameter>, <parameter><decl><type><name>pos</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>LWCHAR</name></type> <name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>POSITION</name></type> <name>pos</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><name>AT_NORMAL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ctldisp</name> <operator>==</operator> <name>OPT_ONPLUS</name> <operator>&amp;&amp;</operator> <name>line_ansi</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>line_ansi</name> <operator>=</operator> <call><name>ansi_start</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>line_ansi</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>xbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>last_ansi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>line_ansi</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>xbuf_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>last_ansi</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>store_ansi</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><name>rep</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'\b'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>store_bs</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><name>rep</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>overstrike</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>







<decl_stmt><decl><type><name>LWCHAR</name></type> <name>prev_ch</name></decl>;</decl_stmt>
<expr_stmt><expr><name>overstrike</name> <operator>=</operator> <ternary><condition><expr><name>utf_mode</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>utf_mode</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>prev_ch</name> <operator>=</operator> <call><name>get_wchar</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>linebuf</name><operator>.</operator><name>buf</name><index>[<expr><name><name>linebuf</name><operator>.</operator><name>end</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else
<block>{<block_content>
<expr_stmt><expr><name>prev_ch</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>linebuf</name><operator>.</operator><name>buf</name><index>[<expr><name><name>linebuf</name><operator>.</operator><name>end</name></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>linebuf</name><operator>.</operator><name>attr</name><index>[<expr><name><name>linebuf</name><operator>.</operator><name>end</name></name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <name>prev_ch</name></expr>)</condition>
<block>{<block_content>







<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>a</name> <operator>&amp;</operator> <operator>(</operator><name>AT_BOLD</name><operator>|</operator><name>AT_UNDERLINE</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <name>AT_NORMAL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>a</name> <operator>|=</operator> <operator>(</operator><name>AT_BOLD</name><operator>|</operator><name>AT_UNDERLINE</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>last_overstrike</name> <operator>!=</operator> <name>AT_NORMAL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>a</name> <operator>|=</operator> <name>last_overstrike</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>a</name> <operator>|=</operator> <name>AT_BOLD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>a</name> <operator>|=</operator> <name>AT_BOLD</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>|=</operator> <name>AT_UNDERLINE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <name>prev_ch</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rep</name> <operator>=</operator> <operator>&amp;</operator><name><name>linebuf</name><operator>.</operator><name>buf</name><index>[<expr><name><name>linebuf</name><operator>.</operator><name>end</name></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>prev_ch</name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>|=</operator> <name>AT_UNDERLINE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>overstrike</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>( <expr><call><name>is_composing_char</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call>
<operator>||</operator> <call><name>is_combining_char</name><argument_list>(<argument><expr><call><name>get_wchar</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>linebuf</name><operator>.</operator><name>buf</name><index>[<expr><name><name>linebuf</name><operator>.</operator><name>end</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name>last_overstrike</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>overstrike</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition>
<block>{<block_content>



<switch>switch <condition>(<expr><name>bs_mode</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>BS_CONTROL</name></expr>:</case>
<return>return <expr><call><name>store_control_char</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><name>rep</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>BS_NORMAL</name></expr>:</case>
<case>case <expr><name>BS_SPECIAL</name></expr>:</case>
<expr_stmt><expr><call><name>STORE_TAB</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>utf_mode</name> <operator>||</operator> <call><name>is_ascii_char</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>control_char</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>)</operator><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<return>return <expr><call><name>store_control_char</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><name>rep</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>utf_mode</name> <operator>&amp;&amp;</operator> <name>ctldisp</name> <operator>!=</operator> <name>OPT_ON</name> <operator>&amp;&amp;</operator> <call><name>is_ubin_char</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>prutfchar</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for <control>( <init>;</init> <condition><expr><operator>*</operator><name>s</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>STORE_CHAR</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>AT_BINARY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if> <else>else
<block>{<block_content>
<expr_stmt><expr><call><name>STORE_CHAR</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>rep</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>public</name> <name>int</name></type>
<name>pflushmbc</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mbc_buf_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>flush_mbc_buf</name><argument_list>(<argument><expr><name>mbc_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mbc_buf_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>add_attr_normal</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><literal type="string">"\033[m"</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ctldisp</name> <operator>!=</operator> <name>OPT_ONPLUS</name> <operator>||</operator> <operator>!</operator><call><name>is_ansi_end</name><argument_list>(<argument><expr><literal type="char">'m'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<for>for <control>( <init>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>add_linebuf</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>AT_ANSI</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>




<function><type><name>public</name> <name>void</name></type>
<name>pdone</name><parameter_list>(<parameter><decl><type><name>endline</name></type></decl></parameter>, <parameter><decl><type><name>chopped</name></type></decl></parameter>, <parameter><decl><type><name>forw</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>endline</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>chopped</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>forw</name></decl>;</decl_stmt>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pflushmbc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pendc</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>pendc</name> <operator>!=</operator> <literal type="char">'\r'</literal> <operator>||</operator> <operator>!</operator><name>endline</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>





<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>do_append</name><argument_list>(<argument><expr><name>pendc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pendpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>chopped</name> <operator>&amp;&amp;</operator> <name>rscroll_char</name></expr>)</condition>
<block>{<block_content>





<if_stmt><if>if <condition>(<expr><name>end_column</name> <operator>&gt;=</operator> <name>sc_width</name> <operator>+</operator> <name>cshift</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>end_column</name> <operator>=</operator> <name>right_column</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>linebuf</name><operator>.</operator><name>end</name></name> <operator>=</operator> <name>right_curr</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>add_attr_normal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>end_column</name> <operator>&lt;</operator> <name>sc_width</name><operator>-</operator><literal type="number">1</literal> <operator>+</operator> <name>cshift</name></expr>)</condition>
<block>{<block_content>





<expr_stmt><expr><call><name>add_linebuf</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>rscroll_attr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>add_linebuf</name><argument_list>(<argument><expr><name>rscroll_char</name></expr></argument>, <argument><expr><name>rscroll_attr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else
<block>{<block_content>
<expr_stmt><expr><call><name>add_attr_normal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>














<if_stmt><if>if <condition>(<expr><name>end_column</name> <operator>&lt;</operator> <name>sc_width</name> <operator>+</operator> <name>cshift</name> <operator>||</operator> <operator>!</operator><name>auto_wrap</name> <operator>||</operator> <operator>(</operator><name>endline</name> <operator>&amp;&amp;</operator> <name>ignaw</name><operator>)</operator> <operator>||</operator> <name>ctldisp</name> <operator>==</operator> <name>OPT_ON</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>add_linebuf</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>AT_NORMAL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>ignaw</name> <operator>&amp;&amp;</operator> <name>end_column</name> <operator>&gt;=</operator> <name>sc_width</name> <operator>+</operator> <name>cshift</name> <operator>&amp;&amp;</operator> <name>forw</name></expr>)</condition>
<block>{<block_content>














<expr_stmt><expr><call><name>add_linebuf</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>AT_NORMAL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_linebuf</name><argument_list>(<argument><expr><literal type="char">'\b'</literal></expr></argument>, <argument><expr><name>AT_NORMAL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>set_linebuf</name><argument_list>(<argument><expr><name><name>linebuf</name><operator>.</operator><name>end</name></name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><name>AT_NORMAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>public</name> <name>void</name></type>
<name>set_status_col</name><parameter_list>(<parameter><decl><type><name>c</name></type></decl></parameter>, <parameter><decl><type><name>attr</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>attr</name></decl>;</decl_stmt>
<block>{<block_content>
<expr_stmt><expr><call><name>set_pfx</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>public</name> <name>int</name></type>
<name>gline</name><parameter_list>(<parameter><decl><type><name>i</name></type></decl></parameter>, <parameter><decl><type><name>ap</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>ap</name></decl>;</decl_stmt>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>is_null_line</name></expr>)</condition>
<block>{<block_content>




<if_stmt><if>if <condition>(<expr><name>twiddle</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ap</name> <operator>=</operator> <name>AT_BOLD</name></expr>;</expr_stmt>
<return>return <expr><literal type="char">'~'</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>--</operator><name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ap</name> <operator>=</operator> <name>AT_NORMAL</name></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>i</name></expr> ?</condition><then> <expr><literal type="char">'\0'</literal></expr> </then><else>: <expr><literal type="char">'\n'</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>linebuf</name><operator>.</operator><name>pfx_end</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ap</name> <operator>=</operator> <name><name>linebuf</name><operator>.</operator><name>pfx_attr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name><name>linebuf</name><operator>.</operator><name>pfx</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <name><name>linebuf</name><operator>.</operator><name>print</name></name> <operator>-</operator> <name><name>linebuf</name><operator>.</operator><name>pfx_end</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ap</name> <operator>=</operator> <name><name>linebuf</name><operator>.</operator><name>attr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name><name>linebuf</name><operator>.</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>public</name> <name>void</name></type>
<name>null_line</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>is_null_line</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cshift</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>public</name> <name>POSITION</name></type>
<name>forw_raw_line</name><parameter_list>(<parameter><decl><type><name>curr_pos</name></type></decl></parameter>, <parameter><decl><type><name>linep</name></type></decl></parameter>, <parameter><decl><type><name>line_lenp</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>POSITION</name></type> <name>curr_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>linep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>line_lenp</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>POSITION</name></type> <name>new_pos</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>curr_pos</name> <operator>==</operator> <name>NULL_POSITION</name> <operator>||</operator> <call><name>ch_seek</name><argument_list>(<argument><expr><name>curr_pos</name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>(</operator><name>c</name> <operator>=</operator> <call><name>ch_forw_get</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>EOI</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL_POSITION</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <name>EOI</name> <operator>||</operator> <call><name>ABORT_SIGS</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>new_pos</name> <operator>=</operator> <call><name>ch_tell</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <name>size_linebuf</name><operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>expand_linebuf</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>




<expr_stmt><expr><name>new_pos</name> <operator>=</operator> <call><name>ch_tell</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>linebuf</name><operator>.</operator><name>buf</name><index>[<expr><name>n</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>ch_forw_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>linebuf</name><operator>.</operator><name>buf</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>linep</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>linep</name> <operator>=</operator> <name><name>linebuf</name><operator>.</operator><name>buf</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>line_lenp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>line_lenp</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>new_pos</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>public</name> <name>POSITION</name></type>
<name>back_raw_line</name><parameter_list>(<parameter><decl><type><name>curr_pos</name></type></decl></parameter>, <parameter><decl><type><name>linep</name></type></decl></parameter>, <parameter><decl><type><name>line_lenp</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>POSITION</name></type> <name>curr_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>linep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>line_lenp</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>POSITION</name></type> <name>new_pos</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>curr_pos</name> <operator>==</operator> <name>NULL_POSITION</name> <operator>||</operator> <name>curr_pos</name> <operator>&lt;=</operator> <call><name>ch_zero</name><argument_list>()</argument_list></call> <operator>||</operator>
<call><name>ch_seek</name><argument_list>(<argument><expr><name>curr_pos</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL_POSITION</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>size_linebuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>linebuf</name><operator>.</operator><name>buf</name><index>[<expr><operator>--</operator><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>ch_back_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <call><name>ABORT_SIGS</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>




<expr_stmt><expr><name>new_pos</name> <operator>=</operator> <call><name>ch_tell</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>EOI</name></expr>)</condition>
<block>{<block_content>





<expr_stmt><expr><name>new_pos</name> <operator>=</operator> <call><name>ch_zero</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>old_size_linebuf</name> <init>= <expr><name>size_linebuf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>to</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>expand_linebuf</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>




<expr_stmt><expr><name>new_pos</name> <operator>=</operator> <call><name>ch_tell</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>



<for>for <control>(<init><expr><name>fm</name> <operator>=</operator> <name><name>linebuf</name><operator>.</operator><name>buf</name></name> <operator>+</operator> <name>old_size_linebuf</name> <operator>-</operator> <literal type="number">1</literal></expr><operator>,</operator>
<expr><name>to</name> <operator>=</operator> <name><name>linebuf</name><operator>.</operator><name>buf</name></name> <operator>+</operator> <name>size_linebuf</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init>
<condition><expr><name>fm</name> <operator>&gt;=</operator> <name><name>linebuf</name><operator>.</operator><name>buf</name></name></expr>;</condition> <incr><expr><name>fm</name><operator>--</operator></expr><operator>,</operator> <expr><name>to</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>to</name> <operator>=</operator> <operator>*</operator><name>fm</name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>size_linebuf</name> <operator>-</operator> <name>old_size_linebuf</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>linebuf</name><operator>.</operator><name>buf</name><index>[<expr><operator>--</operator><name>n</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>linep</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>linep</name> <operator>=</operator> <operator>&amp;</operator><name><name>linebuf</name><operator>.</operator><name>buf</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>line_lenp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>line_lenp</name> <operator>=</operator> <name>size_linebuf</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>n</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>new_pos</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>public</name> <name>int</name></type>
<name>rrshift</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>POSITION</name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>longest</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>save_width</name> <operator>=</operator> <name>sc_width</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sc_width</name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>position</name><argument_list>(<argument><expr><name>TOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>line</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>line</name> <operator>&lt;</operator> <name>sc_height</name> <operator>&amp;&amp;</operator> <name>pos</name> <operator>!=</operator> <name>NULL_POSITION</name></expr>;</condition> <incr><expr><name>line</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>forw_line</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>end_column</name> <operator>&gt;</operator> <name>longest</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>longest</name> <operator>=</operator> <name>end_column</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>sc_width</name> <operator>=</operator> <name>save_width</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>longest</name> <operator>&lt;</operator> <name>sc_width</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>longest</name> <operator>-</operator> <name>sc_width</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>color_index</name><parameter_list>(<parameter><decl><type><name>attr</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>attr</name></decl>;</decl_stmt>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>use_color</name></expr>)</condition>
<block>{<block_content>
<switch>switch <condition>(<expr><name>attr</name> <operator>&amp;</operator> <name>AT_COLOR</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>AT_COLOR_ATTN</name></expr>:</case> <return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><name>AT_COLOR_BIN</name></expr>:</case> <return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><name>AT_COLOR_CTRL</name></expr>:</case> <return>return <expr><literal type="number">2</literal></expr>;</return>
<case>case <expr><name>AT_COLOR_ERROR</name></expr>:</case> <return>return <expr><literal type="number">3</literal></expr>;</return>
<case>case <expr><name>AT_COLOR_LINENUM</name></expr>:</case> <return>return <expr><literal type="number">4</literal></expr>;</return>
<case>case <expr><name>AT_COLOR_MARK</name></expr>:</case> <return>return <expr><literal type="number">5</literal></expr>;</return>
<case>case <expr><name>AT_COLOR_PROMPT</name></expr>:</case> <return>return <expr><literal type="number">6</literal></expr>;</return>
<case>case <expr><name>AT_COLOR_RSCROLL</name></expr>:</case> <return>return <expr><literal type="number">7</literal></expr>;</return>
<case>case <expr><name>AT_COLOR_SEARCH</name></expr>:</case> <return>return <expr><literal type="number">8</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>&amp;</operator> <name>AT_UNDERLINE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">9</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>&amp;</operator> <name>AT_BOLD</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">10</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>&amp;</operator> <name>AT_BLINK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">11</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>&amp;</operator> <name>AT_STANDOUT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">12</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>public</name> <name>int</name></type>
<name>set_color_map</name><parameter_list>(<parameter><decl><type><name>attr</name></type></decl></parameter>, <parameter><decl><type><name>colorstr</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>colorstr</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cx</name> <init>= <expr><call><name>color_index</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>colorstr</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>color_map</name><index>[<expr><name>cx</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>colorstr</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <call><name>parse_color</name><argument_list>(<argument><expr><name>colorstr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CT_NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>color_map</name><index>[<expr><name>cx</name></expr>]</index></name></expr></argument>, <argument><expr><name>colorstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>public</name> <name>char</name> <modifier>*</modifier></type>
<name>get_color_map</name><parameter_list>(<parameter><decl><type><name>attr</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>attr</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cx</name> <init>= <expr><call><name>color_index</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>cx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>color_map</name><index>[<expr><name>cx</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>
</unit>
