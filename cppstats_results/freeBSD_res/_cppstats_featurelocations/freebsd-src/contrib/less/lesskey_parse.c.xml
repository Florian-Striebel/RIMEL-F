<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/less/lesskey_parse.c">








<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lesskey.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cmd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xbuf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"defines.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONTROL</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((c)&amp;037)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ESC</name></cpp:macro> <cpp:value>CONTROL('[')</cpp:value></cpp:define>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>lesskey_parse_error</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>homefile</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name> <modifier>*</modifier></type><name>ecalloc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>linenum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>errors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>lesskey_file</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>lesskey_cmdname</name></name></type> <name><name>cmdnames</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{ <expr><literal type="string">"back-bracket"</literal></expr>, <expr><name>A_B_BRACKET</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"back-line"</literal></expr>, <expr><name>A_B_LINE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"back-line-force"</literal></expr>, <expr><name>A_BF_LINE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"back-screen"</literal></expr>, <expr><name>A_B_SCREEN</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"back-scroll"</literal></expr>, <expr><name>A_B_SCROLL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"back-search"</literal></expr>, <expr><name>A_B_SEARCH</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"back-window"</literal></expr>, <expr><name>A_B_WINDOW</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"clear-mark"</literal></expr>, <expr><name>A_CLRMARK</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"debug"</literal></expr>, <expr><name>A_DEBUG</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"digit"</literal></expr>, <expr><name>A_DIGIT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"display-flag"</literal></expr>, <expr><name>A_DISP_OPTION</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"display-option"</literal></expr>, <expr><name>A_DISP_OPTION</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"end"</literal></expr>, <expr><name>A_GOEND</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"end-scroll"</literal></expr>, <expr><name>A_RRSHIFT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"examine"</literal></expr>, <expr><name>A_EXAMINE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"filter"</literal></expr>, <expr><name>A_FILTER</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"first-cmd"</literal></expr>, <expr><name>A_FIRSTCMD</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"firstcmd"</literal></expr>, <expr><name>A_FIRSTCMD</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"flush-repaint"</literal></expr>, <expr><name>A_FREPAINT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"forw-bracket"</literal></expr>, <expr><name>A_F_BRACKET</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"forw-forever"</literal></expr>, <expr><name>A_F_FOREVER</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"forw-until-hilite"</literal></expr>, <expr><name>A_F_UNTIL_HILITE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"forw-line"</literal></expr>, <expr><name>A_F_LINE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"forw-line-force"</literal></expr>, <expr><name>A_FF_LINE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"forw-screen"</literal></expr>, <expr><name>A_F_SCREEN</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"forw-screen-force"</literal></expr>, <expr><name>A_FF_SCREEN</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"forw-scroll"</literal></expr>, <expr><name>A_F_SCROLL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"forw-search"</literal></expr>, <expr><name>A_F_SEARCH</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"forw-window"</literal></expr>, <expr><name>A_F_WINDOW</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"goto-end"</literal></expr>, <expr><name>A_GOEND</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"goto-end-buffered"</literal></expr>, <expr><name>A_GOEND_BUF</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"goto-line"</literal></expr>, <expr><name>A_GOLINE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"goto-mark"</literal></expr>, <expr><name>A_GOMARK</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"help"</literal></expr>, <expr><name>A_HELP</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"index-file"</literal></expr>, <expr><name>A_INDEX_FILE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"invalid"</literal></expr>, <expr><name>A_UINVALID</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"left-scroll"</literal></expr>, <expr><name>A_LSHIFT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"next-file"</literal></expr>, <expr><name>A_NEXT_FILE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"next-tag"</literal></expr>, <expr><name>A_NEXT_TAG</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"noaction"</literal></expr>, <expr><name>A_NOACTION</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"no-scroll"</literal></expr>, <expr><name>A_LLSHIFT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"percent"</literal></expr>, <expr><name>A_PERCENT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"pipe"</literal></expr>, <expr><name>A_PIPE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"prev-file"</literal></expr>, <expr><name>A_PREV_FILE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"prev-tag"</literal></expr>, <expr><name>A_PREV_TAG</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"quit"</literal></expr>, <expr><name>A_QUIT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"remove-file"</literal></expr>, <expr><name>A_REMOVE_FILE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"repaint"</literal></expr>, <expr><name>A_REPAINT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"repaint-flush"</literal></expr>, <expr><name>A_FREPAINT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"repeat-search"</literal></expr>, <expr><name>A_AGAIN_SEARCH</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"repeat-search-all"</literal></expr>, <expr><name>A_T_AGAIN_SEARCH</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"reverse-search"</literal></expr>, <expr><name>A_REVERSE_SEARCH</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"reverse-search-all"</literal></expr>, <expr><name>A_T_REVERSE_SEARCH</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"right-scroll"</literal></expr>, <expr><name>A_RSHIFT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"set-mark"</literal></expr>, <expr><name>A_SETMARK</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"set-mark-bottom"</literal></expr>, <expr><name>A_SETMARKBOT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"shell"</literal></expr>, <expr><name>A_SHELL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"status"</literal></expr>, <expr><name>A_STAT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"toggle-flag"</literal></expr>, <expr><name>A_OPT_TOGGLE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"toggle-option"</literal></expr>, <expr><name>A_OPT_TOGGLE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"undo-hilite"</literal></expr>, <expr><name>A_UNDO_SEARCH</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"clear-search"</literal></expr>, <expr><name>A_CLR_SEARCH</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"version"</literal></expr>, <expr><name>A_VERSION</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"visual"</literal></expr>, <expr><name>A_VISUAL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>lesskey_cmdname</name></name></type> <name><name>editnames</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{ <expr><literal type="string">"back-complete"</literal></expr>, <expr><name>EC_B_COMPLETE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"backspace"</literal></expr>, <expr><name>EC_BACKSPACE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"delete"</literal></expr>, <expr><name>EC_DELETE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"down"</literal></expr>, <expr><name>EC_DOWN</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"end"</literal></expr>, <expr><name>EC_END</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"expand"</literal></expr>, <expr><name>EC_EXPAND</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"forw-complete"</literal></expr>, <expr><name>EC_F_COMPLETE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"home"</literal></expr>, <expr><name>EC_HOME</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"insert"</literal></expr>, <expr><name>EC_INSERT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"invalid"</literal></expr>, <expr><name>EC_UINVALID</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"kill-line"</literal></expr>, <expr><name>EC_LINEKILL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"abort"</literal></expr>, <expr><name>EC_ABORT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"left"</literal></expr>, <expr><name>EC_LEFT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"literal"</literal></expr>, <expr><name>EC_LITERAL</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"right"</literal></expr>, <expr><name>EC_RIGHT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"up"</literal></expr>, <expr><name>EC_UP</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"word-backspace"</literal></expr>, <expr><name>EC_W_BACKSPACE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"word-delete"</literal></expr>, <expr><name>EC_W_DELETE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"word-left"</literal></expr>, <expr><name>EC_W_LEFT</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"word-right"</literal></expr>, <expr><name>EC_W_RIGHT</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>parse_error</name><parameter_list>(<parameter><decl><type><name>s1</name></type></decl></parameter>, <parameter><decl><type><name>s2</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s2</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><operator>++</operator><name>errors</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s: line %d: %s%s"</literal></expr></argument>, <argument><expr><name>lesskey_file</name></expr></argument>, <argument><expr><name>linenum</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lesskey_parse_error</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>init_tables</name><parameter_list>(<parameter><decl><type><name>tables</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name><name>struct</name> <name>lesskey_tables</name></name> <modifier>*</modifier></type><name>tables</name></decl>;</decl_stmt>
<block>{<block_content>
<expr_stmt><expr><name><name>tables</name><operator>-&gt;</operator><name>currtable</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>tables</name><operator>-&gt;</operator><name>cmdtable</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tables</name><operator>-&gt;</operator><name>cmdtable</name><operator>.</operator><name>names</name></name> <operator>=</operator> <name>cmdnames</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tables</name><operator>-&gt;</operator><name>cmdtable</name><operator>.</operator><name>is_var</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xbuf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tables</name><operator>-&gt;</operator><name>cmdtable</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tables</name><operator>-&gt;</operator><name>edittable</name><operator>.</operator><name>names</name></name> <operator>=</operator> <name>editnames</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tables</name><operator>-&gt;</operator><name>edittable</name><operator>.</operator><name>is_var</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xbuf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tables</name><operator>-&gt;</operator><name>edittable</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tables</name><operator>-&gt;</operator><name>vartable</name><operator>.</operator><name>names</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tables</name><operator>-&gt;</operator><name>vartable</name><operator>.</operator><name>is_var</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>xbuf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tables</name><operator>-&gt;</operator><name>vartable</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>tstr</name><parameter_list>(<parameter><decl><type><name>pp</name></type></decl></parameter>, <parameter><decl><type><name>xlate</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>xlate</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>tstr_control_k</name><index>[]</index></name> <init>=
<expr><block>{ <expr><name>SK_SPECIAL_KEY</name></expr>, <expr><name>SK_CONTROL_K</name></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="char">'\0'</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>*</operator><name>pp</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'\\'</literal></expr>:</case>
<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'0'</literal></expr>:</case> <case>case <expr><literal type="char">'1'</literal></expr>:</case> <case>case <expr><literal type="char">'2'</literal></expr>:</case> <case>case <expr><literal type="char">'3'</literal></expr>:</case>
<case>case <expr><literal type="char">'4'</literal></expr>:</case> <case>case <expr><literal type="char">'5'</literal></expr>:</case> <case>case <expr><literal type="char">'6'</literal></expr>:</case> <case>case <expr><literal type="char">'7'</literal></expr>:</case>



<expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<do>do<block type="pseudo"><block_content>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="number">8</literal><operator>*</operator><name>ch</name> <operator>+</operator> <operator>(</operator><operator>*</operator><name>p</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt></block_content></block>
while <condition>(<expr><operator>*</operator><operator>++</operator><name>p</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>&lt;=</operator> <literal type="char">'7'</literal> <operator>&amp;&amp;</operator> <operator>++</operator><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition>;</do>
<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>xlate</name> <operator>&amp;&amp;</operator> <name>ch</name> <operator>==</operator> <call><name>CONTROL</name><argument_list>(<argument><expr><literal type="char">'K'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>tstr_control_k</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>buf</name><operator>)</operator></expr>;</return>
<case>case <expr><literal type="char">'b'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>p</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="string">"\b"</literal><operator>)</operator></expr>;</return>
<case>case <expr><literal type="char">'e'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>p</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ESC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>buf</name><operator>)</operator></expr>;</return>
<case>case <expr><literal type="char">'n'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>p</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="string">"\n"</literal><operator>)</operator></expr>;</return>
<case>case <expr><literal type="char">'r'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>p</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="string">"\r"</literal><operator>)</operator></expr>;</return>
<case>case <expr><literal type="char">'t'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>p</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="string">"\t"</literal><operator>)</operator></expr>;</return>
<case>case <expr><literal type="char">'k'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>xlate</name></expr>)</condition>
<block>{<block_content>
<switch>switch <condition>(<expr><operator>*</operator><operator>++</operator><name>p</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'u'</literal></expr>:</case> <expr_stmt><expr><name>ch</name> <operator>=</operator> <name>SK_UP_ARROW</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'d'</literal></expr>:</case> <expr_stmt><expr><name>ch</name> <operator>=</operator> <name>SK_DOWN_ARROW</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'r'</literal></expr>:</case> <expr_stmt><expr><name>ch</name> <operator>=</operator> <name>SK_RIGHT_ARROW</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'l'</literal></expr>:</case> <expr_stmt><expr><name>ch</name> <operator>=</operator> <name>SK_LEFT_ARROW</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'U'</literal></expr>:</case> <expr_stmt><expr><name>ch</name> <operator>=</operator> <name>SK_PAGE_UP</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'D'</literal></expr>:</case> <expr_stmt><expr><name>ch</name> <operator>=</operator> <name>SK_PAGE_DOWN</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'h'</literal></expr>:</case> <expr_stmt><expr><name>ch</name> <operator>=</operator> <name>SK_HOME</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'e'</literal></expr>:</case> <expr_stmt><expr><name>ch</name> <operator>=</operator> <name>SK_END</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="char">'x'</literal></expr>:</case> <expr_stmt><expr><name>ch</name> <operator>=</operator> <name>SK_DELETE</name></expr>;</expr_stmt> <break>break;</break>
<default>default:</default> <block>{<block_content> <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>parse_error</name><argument_list>(<argument><expr><literal type="string">"illegal escape sequence \\k"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>p</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="string">""</literal><operator>)</operator></expr>;</return> </block_content>}</block>
</block_content>}</block></switch>
<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>p</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>SK_SPECIAL_KEY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>buf</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<default>default:</default>




<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>p</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>xlate</name> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <call><name>CONTROL</name><argument_list>(<argument><expr><literal type="char">'K'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>tstr_control_k</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>buf</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
<case>case <expr><literal type="char">'^'</literal></expr>:</case>



<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>p</name><operator>+</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>CONTROL</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>xlate</name> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <call><name>CONTROL</name><argument_list>(<argument><expr><literal type="char">'K'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>tstr_control_k</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>buf</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>p</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>xlate</name> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <call><name>CONTROL</name><argument_list>(<argument><expr><literal type="char">'K'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>tstr_control_k</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>buf</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>issp</name><parameter_list>(<parameter><decl><type><name>ch</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name></type> <name>ch</name></decl>;</decl_stmt>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>ch</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'\t'</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>skipsp</name><parameter_list>(<parameter><decl><type><name>s</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<block>{<block_content>
<while>while <condition>(<expr><call><name>issp</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><operator>(</operator><name>s</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>skipnsp</name><parameter_list>(<parameter><decl><type><name>s</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>issp</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><operator>(</operator><name>s</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>clean_line</name><parameter_list>(<parameter><decl><type><name>s</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>skipsp</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\r'</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>s</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\\'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>s</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>add_cmd_char</name><parameter_list>(<parameter><decl><type><name>c</name></type></decl></parameter>, <parameter><decl><type><name>tables</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>lesskey_tables</name></name> <modifier>*</modifier></type><name>tables</name></decl>;</decl_stmt>
<block>{<block_content>
<expr_stmt><expr><call><name>xbuf_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tables</name><operator>-&gt;</operator><name>currtable</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>add_cmd_str</name><parameter_list>(<parameter><decl><type><name>s</name></type></decl></parameter>, <parameter><decl><type><name>tables</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>lesskey_tables</name></name> <modifier>*</modifier></type><name>tables</name></decl>;</decl_stmt>
<block>{<block_content>
<for>for <control>( <init>;</init> <condition><expr><operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>add_cmd_char</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>tables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>control_line</name><parameter_list>(<parameter><decl><type><name>s</name></type></decl></parameter>, <parameter><decl><type><name>tables</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>lesskey_tables</name></name> <modifier>*</modifier></type><name>tables</name></decl>;</decl_stmt>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREFIX</name><parameter_list>(<parameter><type><name>str</name></type></parameter>,<parameter><type><name>pat</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(strncmp(str,pat,strlen(pat)) == 0)</cpp:value></cpp:define>

<if_stmt><if>if <condition>(<expr><call><name>PREFIX</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"#line-edit"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>tables</name><operator>-&gt;</operator><name>currtable</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>tables</name><operator>-&gt;</operator><name>edittable</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>PREFIX</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"#command"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>tables</name><operator>-&gt;</operator><name>currtable</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>tables</name><operator>-&gt;</operator><name>cmdtable</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>PREFIX</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"#env"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>tables</name><operator>-&gt;</operator><name>currtable</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>tables</name><operator>-&gt;</operator><name>vartable</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>PREFIX</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"#stop"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>add_cmd_char</name><argument_list>(<argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><name>tables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_cmd_char</name><argument_list>(<argument><expr><name>A_END_LIST</name></expr></argument>, <argument><expr><name>tables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>findaction</name><parameter_list>(<parameter><decl><type><name>actname</name></type></decl></parameter>, <parameter><decl><type><name>tables</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>actname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>lesskey_tables</name></name> <modifier>*</modifier></type><name>tables</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>tables</name><operator>-&gt;</operator><name>currtable</name><operator>-&gt;</operator><name>names</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cn_name</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>tables</name><operator>-&gt;</operator><name>currtable</name><operator>-&gt;</operator><name>names</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cn_name</name></expr></argument>, <argument><expr><name>actname</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name><name>tables</name><operator>-&gt;</operator><name>currtable</name><operator>-&gt;</operator><name>names</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cn_action</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><call><name>parse_error</name><argument_list>(<argument><expr><literal type="string">"unknown action: "</literal></expr></argument>, <argument><expr><name>actname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>A_INVALID</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>void</name></type>
<name>parse_cmdline</name><parameter_list>(<parameter><decl><type><name>p</name></type></decl></parameter>, <parameter><decl><type><name>tables</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>lesskey_tables</name></name> <modifier>*</modifier></type><name>tables</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>actname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>action</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>




<do>do
<block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>tstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_cmd_str</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>tables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>issp</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>



<expr_stmt><expr><call><name>add_cmd_char</name><argument_list>(<argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><name>tables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skipsp</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>parse_error</name><argument_list>(<argument><expr><literal type="string">"missing action"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>actname</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skipnsp</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>




<expr_stmt><expr><name>action</name> <operator>=</operator> <call><name>findaction</name><argument_list>(<argument><expr><name>actname</name></expr></argument>, <argument><expr><name>tables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skipsp</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>add_cmd_char</name><argument_list>(<argument><expr><name>action</name></expr></argument>, <argument><expr><name>tables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else
<block>{<block_content>




<expr_stmt><expr><call><name>add_cmd_char</name><argument_list>(<argument><expr><name>action</name> <operator>|</operator> <name>A_EXTRA</name></expr></argument>, <argument><expr><name>tables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>add_cmd_str</name><argument_list>(<argument><expr><call><name>tstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>add_cmd_char</name><argument_list>(<argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><name>tables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>parse_varline</name><parameter_list>(<parameter><decl><type><name>line</name></type></decl></parameter>, <parameter><decl><type><name>tables</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>lesskey_tables</name></name> <modifier>*</modifier></type><name>tables</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>line</name></expr></init></decl>;</decl_stmt>

<do>do
<block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>tstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_cmd_str</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>tables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>issp</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition>;</do>



<expr_stmt><expr><call><name>add_cmd_char</name><argument_list>(<argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><name>tables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skipsp</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name><operator>++</operator> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>parse_error</name><argument_list>(<argument><expr><literal type="string">"missing = in: "</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>add_cmd_char</name><argument_list>(<argument><expr><name>EV_OK</name><operator>|</operator><name>A_EXTRA</name></expr></argument>, <argument><expr><name>tables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>skipsp</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>tstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_cmd_str</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>tables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>add_cmd_char</name><argument_list>(<argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><name>tables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>parse_line</name><parameter_list>(<parameter><decl><type><name>line</name></type></decl></parameter>, <parameter><decl><type><name>tables</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>lesskey_tables</name></name> <modifier>*</modifier></type><name>tables</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><call><name>control_line</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>tables</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>





<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>clean_line</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tables</name><operator>-&gt;</operator><name>currtable</name><operator>-&gt;</operator><name>is_var</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>parse_varline</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>tables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>parse_cmdline</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>tables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>parse_lesskey</name><parameter_list>(<parameter><decl><type><name>infile</name></type></decl></parameter>, <parameter><decl><type><name>tables</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>infile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>lesskey_tables</name></name> <modifier>*</modifier></type><name>tables</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>line</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>infile</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>infile</name> <operator>=</operator> <call><name>homefile</name><argument_list>(<argument><expr><name>DEF_LESSKEYINFILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>lesskey_file</name> <operator>=</operator> <name>infile</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_tables</name><argument_list>(<argument><expr><name>tables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errors</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>linenum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>infile</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>desc</name> <operator>=</operator> <name>stdin</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>desc</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>infile</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>

<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>




<while>while <condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>linenum</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>parse_line</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>tables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><operator>(</operator><name>errors</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
