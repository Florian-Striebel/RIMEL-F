<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/less/funcs.h"><decl_stmt><decl><type><name>public</name> <name>char</name> <modifier>*</modifier> <name>save</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>constant</name> <name>char</name> <operator>*</operator><name>s</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>VOID_POINTER</name> <name>ecalloc</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>count</name><operator>,</operator> <name>unsigned</name> <name>int</name> <name>size</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>char</name> <modifier>*</modifier> <name>skipsp</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>s</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>sprefix</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>ps</name><operator>,</operator> <name>char</name> <operator>*</operator><name>s</name><operator>,</operator> <name>int</name> <name>uppercase</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>quit</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>status</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>raw_mode</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>on</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>scrsize</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>char</name> <modifier>*</modifier> <name>special_key_str</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>key</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>get_term</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>init_mouse</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>deinit_mouse</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>init</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>deinit</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>interactive</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>home</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>add_line</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>remove_top</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>n</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>win32_scroll_up</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>n</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>lower_left</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>line_left</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>check_winch</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>goto_line</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>sindex</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>vbell</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>bell</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>clear</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>clear_eol</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>clear_bot</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>COLOR_TYPE</name> <name>parse_color</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>str</name><operator>,</operator> <name>int</name> <operator>*</operator><name>p_fg</name><operator>,</operator> <name>int</name> <operator>*</operator><name>p_bg</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>at_enter</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>attr</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>at_exit</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>at_switch</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>attr</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>is_at_equiv</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>attr1</name><operator>,</operator> <name>int</name> <name>attr2</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>apply_at_specials</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>attr</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>putbs</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>win32_kbhit</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>char</name> <name>WIN32getch</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>WIN32setcolors</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>fg</name><operator>,</operator> <name>int</name> <name>bg</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>WIN32textout</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>text</name><operator>,</operator> <name>int</name> <name>len</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>match_brac</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>obrac</name><operator>,</operator> <name>int</name> <name>cbrac</name><operator>,</operator> <name>int</name> <name>forwdir</name><operator>,</operator> <name>int</name> <name>n</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>ch_ungetchar</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>c</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>end_logfile</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>sync_logfile</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>ch_seek</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>POSITION</name> <name>pos</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>ch_end_seek</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>ch_end_buffer_seek</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>ch_beg_seek</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>POSITION</name> <name>ch_length</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>POSITION</name> <name>ch_tell</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>ch_forw_get</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>ch_back_get</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>ch_setbufspace</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>bufspace</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>ch_flush</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>seekable</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>f</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>ch_set_eof</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>ch_init</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>f</name><operator>,</operator> <name>int</name> <name>flags</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>ch_close</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>ch_getflags</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>ch_dump</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>setfmt</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>s</name><operator>,</operator> <name>char</name> <operator>*</operator><operator>*</operator><name>fmtvarptr</name><operator>,</operator> <name>int</name> <operator>*</operator><name>attrptr</name><operator>,</operator> <name>char</name> <operator>*</operator><name>default_fmt</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>init_charset</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>binary_char</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>LWCHAR</name> <name>c</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>control_char</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>LWCHAR</name> <name>c</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>char</name> <modifier>*</modifier> <name>prchar</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>LWCHAR</name> <name>c</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>char</name> <modifier>*</modifier> <name>prutfchar</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>LWCHAR</name> <name>ch</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>utf_len</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>ch</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>is_utf8_well_formed</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>ss</name><operator>,</operator> <name>int</name> <name>slen</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>utf_skip_to_lead</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><name>pp</name><operator>,</operator> <name>char</name> <operator>*</operator><name>limit</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>LWCHAR</name> <name>get_wchar</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>constant</name> <name>char</name> <operator>*</operator><name>p</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>put_wchar</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><name>pp</name><operator>,</operator> <name>LWCHAR</name> <name>ch</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>LWCHAR</name> <name>step_char</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><name>pp</name><operator>,</operator> <name>signed</name> <name>int</name> <name>dir</name><operator>,</operator> <name>constant</name> <name>char</name> <operator>*</operator><name>limit</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>is_composing_char</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>LWCHAR</name> <name>ch</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>is_ubin_char</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>LWCHAR</name> <name>ch</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>is_wide_char</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>LWCHAR</name> <name>ch</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>is_combining_char</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>LWCHAR</name> <name>ch1</name><operator>,</operator> <name>LWCHAR</name> <name>ch2</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>cmd_reset</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>clear_cmd</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>cmd_putstr</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>constant</name> <name>char</name> <operator>*</operator><name>s</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>len_cmdbuf</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>cmd_repaint</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>constant</name> <name>char</name> <operator>*</operator><name>old_cp</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>set_mlist</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><name>mlist</name><operator>,</operator> <name>int</name> <name>cmdflags</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>cmd_addhist</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator>struct <name>mlist</name> <operator>*</operator><name>mlist</name><operator>,</operator> <name>constant</name> <name>char</name> <operator>*</operator><name>cmd</name><operator>,</operator> <name>int</name> <name>modified</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>cmd_accept</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>cmd_char</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>c</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>LINENUM</name> <name>cmd_int</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>long</name> <operator>*</operator><name>frac</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>char</name> <modifier>*</modifier> <name>get_cmdbuf</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>char</name> <modifier>*</modifier> <name>cmd_lastpattern</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>init_cmdhist</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>save_cmdhist</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>in_mca</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>dispversion</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>getcc</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>ungetcc</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>LWCHAR</name> <name>c</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>ungetcc_back</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>LWCHAR</name> <name>c</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>ungetsc</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>s</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>LWCHAR</name> <name>peekcc</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>commands</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>cvt_length</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>len</name><operator>,</operator> <name>int</name> <name>ops</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <modifier>*</modifier> <name>cvt_alloc_chpos</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>len</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>cvt_text</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>odst</name><operator>,</operator> <name>char</name> <operator>*</operator><name>osrc</name><operator>,</operator> <name>int</name> <operator>*</operator><name>chpos</name><operator>,</operator> <name>int</name> <operator>*</operator><name>lenp</name><operator>,</operator> <name>int</name> <name>ops</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>expand_cmd_tables</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>init_cmds</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>add_fcmd_table</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>buf</name><operator>,</operator> <name>int</name> <name>len</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>add_ecmd_table</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>buf</name><operator>,</operator> <name>int</name> <name>len</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>fcmd_decode</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>cmd</name><operator>,</operator> <name>char</name> <operator>*</operator><operator>*</operator><name>sp</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>ecmd_decode</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>cmd</name><operator>,</operator> <name>char</name> <operator>*</operator><operator>*</operator><name>sp</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>char</name> <modifier>*</modifier> <name>lgetenv</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>var</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>isnullenv</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator> <name>s</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>lesskey</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>filename</name><operator>,</operator> <name>int</name> <name>sysvar</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>lesskey_src</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>filename</name><operator>,</operator> <name>int</name> <name>sysvar</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>add_hometable</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><call><call><name>int</name> <argument_list>(<argument><expr><operator>*</operator><name>call_lesskey</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call><operator>,</operator> <name>char</name> <operator>*</operator><name>envname</name><operator>,</operator> <name>char</name> <operator>*</operator><name>def_filename</name><operator>,</operator> <name>int</name> <name>sysvar</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>editchar</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>c</name><operator>,</operator> <name>int</name> <name>flags</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>init_textlist</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator>struct <name>textlist</name> <operator>*</operator><name>tlist</name><operator>,</operator> <name>char</name> <operator>*</operator><name>str</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>char</name> <modifier>*</modifier> <name>forw_textlist</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator>struct <name>textlist</name> <operator>*</operator><name>tlist</name><operator>,</operator> <name>char</name> <operator>*</operator><name>prev</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>char</name> <modifier>*</modifier> <name>back_textlist</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator>struct <name>textlist</name> <operator>*</operator><name>tlist</name><operator>,</operator> <name>char</name> <operator>*</operator><name>prev</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>edit</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>filename</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>edit_ifile</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>IFILE</name> <name>ifile</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>edit_list</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>filelist</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>edit_first</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>edit_last</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>edit_next</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>n</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>edit_prev</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>n</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>edit_index</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>n</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>IFILE</name> <name>save_curr_ifile</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>unsave_ifile</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>IFILE</name> <name>save_ifile</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>reedit_ifile</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>IFILE</name> <name>save_ifile</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>reopen_curr_ifile</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>edit_stdin</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>cat_file</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>use_logfile</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>filename</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>char</name> <modifier>*</modifier> <name>shell_unquote</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>str</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>char</name> <modifier>*</modifier> <name>get_meta_escape</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>char</name> <modifier>*</modifier> <name>shell_quote</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>s</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>char</name> <modifier>*</modifier> <name>dirfile</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>dirname</name><operator>,</operator> <name>char</name> <operator>*</operator><name>filename</name><operator>,</operator> <name>int</name> <name>must_exist</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>char</name> <modifier>*</modifier> <name>homefile</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>filename</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>char</name> <modifier>*</modifier> <name>fexpand</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>s</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>char</name> <modifier>*</modifier> <name>fcomplete</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>s</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>bin_file</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>f</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>char</name> <modifier>*</modifier> <name>lglob</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>filename</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>char</name> <modifier>*</modifier> <name>lrealpath</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>path</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>char</name> <modifier>*</modifier> <name>open_altfile</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>filename</name><operator>,</operator> <name>int</name> <operator>*</operator><name>pf</name><operator>,</operator> <name>void</name> <operator>*</operator><operator>*</operator><name>pfd</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>close_altfile</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>altfilename</name><operator>,</operator> <name>char</name> <operator>*</operator><name>filename</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>is_dir</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>filename</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>char</name> <modifier>*</modifier> <name>bad_file</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>filename</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>POSITION</name> <name>filesize</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>f</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>char</name> <modifier>*</modifier> <name>shell_coption</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>char</name> <modifier>*</modifier> <name>last_component</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>name</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>eof_displayed</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>entire_file_displayed</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>squish_check</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>forw</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>n</name><operator>,</operator> <name>POSITION</name> <name>pos</name><operator>,</operator> <name>int</name> <name>force</name><operator>,</operator> <name>int</name> <name>only_last</name><operator>,</operator> <name>int</name> <name>nblank</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>back</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>n</name><operator>,</operator> <name>POSITION</name> <name>pos</name><operator>,</operator> <name>int</name> <name>force</name><operator>,</operator> <name>int</name> <name>only_last</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>forward</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>n</name><operator>,</operator> <name>int</name> <name>force</name><operator>,</operator> <name>int</name> <name>only_last</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>backward</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>n</name><operator>,</operator> <name>int</name> <name>force</name><operator>,</operator> <name>int</name> <name>only_last</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>get_back_scroll</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>get_one_screen</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>del_ifile</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>IFILE</name> <name>h</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>IFILE</name> <name>next_ifile</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>IFILE</name> <name>h</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>IFILE</name> <name>prev_ifile</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>IFILE</name> <name>h</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>IFILE</name> <name>getoff_ifile</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>IFILE</name> <name>ifile</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>nifile</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>IFILE</name> <name>get_ifile</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>filename</name><operator>,</operator> <name>IFILE</name> <name>prev</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>char</name> <modifier>*</modifier> <name>get_filename</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>IFILE</name> <name>ifile</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>char</name> <modifier>*</modifier> <name>get_real_filename</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>IFILE</name> <name>ifile</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>get_index</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>IFILE</name> <name>ifile</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>store_pos</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>IFILE</name> <name>ifile</name><operator>,</operator> struct <name>scrpos</name> <operator>*</operator><name>scrpos</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>get_pos</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>IFILE</name> <name>ifile</name><operator>,</operator> struct <name>scrpos</name> <operator>*</operator><name>scrpos</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>set_open</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>IFILE</name> <name>ifile</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>opened</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>IFILE</name> <name>ifile</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>hold_ifile</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>IFILE</name> <name>ifile</name><operator>,</operator> <name>int</name> <name>incr</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>held_ifile</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>IFILE</name> <name>ifile</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <modifier>*</modifier> <name>get_filestate</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>IFILE</name> <name>ifile</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>set_filestate</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>IFILE</name> <name>ifile</name><operator>,</operator> <name>void</name> <operator>*</operator><name>filestate</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>set_altpipe</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>IFILE</name> <name>ifile</name><operator>,</operator> <name>void</name> <operator>*</operator><name>p</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <modifier>*</modifier> <name>get_altpipe</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>IFILE</name> <name>ifile</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>set_altfilename</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>IFILE</name> <name>ifile</name><operator>,</operator> <name>char</name> <operator>*</operator><name>altfilename</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>char</name> <modifier>*</modifier> <name>get_altfilename</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>IFILE</name> <name>ifile</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>if_dump</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>POSITION</name> <name>forw_line_seg</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>POSITION</name> <name>curr_pos</name><operator>,</operator> <name>int</name> <name>get_segpos</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>POSITION</name> <name>forw_line</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>POSITION</name> <name>curr_pos</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>POSITION</name> <name>back_line</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>POSITION</name> <name>curr_pos</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>set_attnpos</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>POSITION</name> <name>pos</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>jump_forw</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>jump_forw_buffered</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>jump_back</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>LINENUM</name> <name>linenum</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>repaint</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>jump_percent</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>percent</name><operator>,</operator> <name>long</name> <name>fraction</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>jump_line_loc</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>POSITION</name> <name>pos</name><operator>,</operator> <name>int</name> <name>sline</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>jump_loc</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>POSITION</name> <name>pos</name><operator>,</operator> <name>int</name> <name>sline</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>init_line</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>is_ascii_char</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>LWCHAR</name> <name>ch</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>prewind</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>plinestart</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>POSITION</name> <name>pos</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>line_pfx_width</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>pshift_all</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>pwidth</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>LWCHAR</name> <name>ch</name><operator>,</operator> <name>int</name> <name>a</name><operator>,</operator> <name>LWCHAR</name> <name>prev_ch</name><operator>,</operator> <name>int</name> <name>prev_a</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>is_ansi_end</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>LWCHAR</name> <name>ch</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>is_ansi_middle</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>LWCHAR</name> <name>ch</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>skip_ansi</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator>struct <name>ansi_state</name> <operator>*</operator><name>pansi</name><operator>,</operator> <name>char</name> <operator>*</operator><operator>*</operator><name>pp</name><operator>,</operator> <name>constant</name> <name>char</name> <operator>*</operator><name>limit</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name><name>struct</name> <name>ansi_state</name></name> <modifier>*</modifier> <name>ansi_start</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>LWCHAR</name> <name>ch</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>ansi_step</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator>struct <name>ansi_state</name> <operator>*</operator><name>pansi</name><operator>,</operator> <name>LWCHAR</name> <name>ch</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>ansi_done</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator>struct <name>ansi_state</name> <operator>*</operator><name>pansi</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>pappend</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>c</name><operator>,</operator> <name>POSITION</name> <name>pos</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>pflushmbc</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>pdone</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>endline</name><operator>,</operator> <name>int</name> <name>chopped</name><operator>,</operator> <name>int</name> <name>forw</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>set_status_col</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>c</name><operator>,</operator> <name>int</name> <name>attr</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>gline</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>i</name><operator>,</operator> <name>int</name> <operator>*</operator><name>ap</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>null_line</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>POSITION</name> <name>forw_raw_line</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>POSITION</name> <name>curr_pos</name><operator>,</operator> <name>char</name> <operator>*</operator><operator>*</operator><name>linep</name><operator>,</operator> <name>int</name> <operator>*</operator><name>line_lenp</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>POSITION</name> <name>back_raw_line</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>POSITION</name> <name>curr_pos</name><operator>,</operator> <name>char</name> <operator>*</operator><operator>*</operator><name>linep</name><operator>,</operator> <name>int</name> <operator>*</operator><name>line_lenp</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>rrshift</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>set_color_map</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>attr</name><operator>,</operator> <name>char</name> <operator>*</operator><name>colorstr</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>char</name> <modifier>*</modifier> <name>get_color_map</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>attr</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>clr_linenum</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>add_lnum</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>LINENUM</name> <name>linenum</name><operator>,</operator> <name>POSITION</name> <name>pos</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>LINENUM</name> <name>find_linenum</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>POSITION</name> <name>pos</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>POSITION</name> <name>find_pos</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>LINENUM</name> <name>linenum</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>LINENUM</name> <name>currline</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>where</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>scan_eof</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>lsystem</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>cmd</name><operator>,</operator> <name>char</name> <operator>*</operator><name>donemsg</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>pipe_mark</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>c</name><operator>,</operator> <name>char</name> <operator>*</operator><name>cmd</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>pipe_data</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>cmd</name><operator>,</operator> <name>POSITION</name> <name>spos</name><operator>,</operator> <name>POSITION</name> <name>epos</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>init_mark</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>badmark</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>c</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>setmark</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>c</name><operator>,</operator> <name>int</name> <name>where</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>clrmark</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>c</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>lastmark</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>gomark</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>c</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>POSITION</name> <name>markpos</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>c</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>char</name> <name>posmark</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>POSITION</name> <name>pos</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>unmark</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>IFILE</name> <name>ifile</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>mark_check_ifile</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>IFILE</name> <name>ifile</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>save_marks</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>FILE</name> <operator>*</operator><name>fout</name><operator>,</operator> <name>char</name> <operator>*</operator><name>hdr</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>restore_mark</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>line</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>opt_o</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>type</name><operator>,</operator> <name>char</name> <operator>*</operator><name>s</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>opt__O</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>type</name><operator>,</operator> <name>char</name> <operator>*</operator><name>s</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>opt_j</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>type</name><operator>,</operator> <name>char</name> <operator>*</operator><name>s</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>calc_jump_sline</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>opt_shift</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>type</name><operator>,</operator> <name>char</name> <operator>*</operator><name>s</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>calc_shift_count</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>opt_k</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>type</name><operator>,</operator> <name>char</name> <operator>*</operator><name>s</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>opt_ks</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>type</name><operator>,</operator> <name>char</name> <operator>*</operator><name>s</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>opt_t</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>type</name><operator>,</operator> <name>char</name> <operator>*</operator><name>s</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>opt__T</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>type</name><operator>,</operator> <name>char</name> <operator>*</operator><name>s</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>opt_p</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>type</name><operator>,</operator> <name>char</name> <operator>*</operator><name>s</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>opt__P</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>type</name><operator>,</operator> <name>char</name> <operator>*</operator><name>s</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>opt_b</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>type</name><operator>,</operator> <name>char</name> <operator>*</operator><name>s</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>opt_i</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>type</name><operator>,</operator> <name>char</name> <operator>*</operator><name>s</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>opt__V</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>type</name><operator>,</operator> <name>char</name> <operator>*</operator><name>s</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>opt_D</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>type</name><operator>,</operator> <name>char</name> <operator>*</operator><name>s</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>opt_x</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>type</name><operator>,</operator> <name>char</name> <operator>*</operator><name>s</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>opt_quote</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>type</name><operator>,</operator> <name>char</name> <operator>*</operator><name>s</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>opt_rscroll</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>type</name><operator>,</operator> <name>char</name> <operator>*</operator><name>s</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>opt_query</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>type</name><operator>,</operator> <name>char</name> <operator>*</operator><name>s</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>opt_mousecap</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>type</name><operator>,</operator> <name>char</name> <operator>*</operator><name>s</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>opt_wheel_lines</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>type</name><operator>,</operator> <name>char</name> <operator>*</operator><name>s</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>opt_linenum_width</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>type</name><operator>,</operator> <name>char</name> <operator>*</operator><name>s</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>opt_status_col_width</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>type</name><operator>,</operator> <name>char</name> <operator>*</operator><name>s</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>opt_filesize</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>type</name><operator>,</operator> <name>char</name> <operator>*</operator><name>s</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>opt_ttyin_name</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>type</name><operator>,</operator> <name>char</name> <operator>*</operator><name>s</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>opt_rstat</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>type</name><operator>,</operator> <name>char</name> <operator>*</operator><name>s</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>get_swindow</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>char</name> <modifier>*</modifier> <name>propt</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>c</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>scan_option</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>s</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>toggle_option</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator>struct <name>loption</name> <operator>*</operator><name>o</name><operator>,</operator> <name>int</name> <name>lower</name><operator>,</operator> <name>char</name> <operator>*</operator><name>s</name><operator>,</operator> <name>int</name> <name>how_toggle</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>opt_has_param</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator>struct <name>loption</name> <operator>*</operator><name>o</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>char</name> <modifier>*</modifier> <name>opt_prompt</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator>struct <name>loption</name> <operator>*</operator><name>o</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>char</name> <modifier>*</modifier> <name>opt_toggle_disallowed</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>c</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>isoptpending</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>nopendopt</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>getnum</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><name>sp</name><operator>,</operator> <name>char</name> <operator>*</operator><name>printopt</name><operator>,</operator> <name>int</name> <operator>*</operator><name>errp</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>long</name> <name>getfraction</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><name>sp</name><operator>,</operator> <name>char</name> <operator>*</operator><name>printopt</name><operator>,</operator> <name>int</name> <operator>*</operator><name>errp</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>get_quit_at_eof</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>init_option</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name><name>struct</name> <name>loption</name></name> <modifier>*</modifier> <name>findopt</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>c</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name><name>struct</name> <name>loption</name></name> <modifier>*</modifier> <name>findopt_name</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><name>p_optname</name><operator>,</operator> <name>char</name> <operator>*</operator><operator>*</operator><name>p_oname</name><operator>,</operator> <name>int</name> <operator>*</operator><name>p_err</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>iread</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>fd</name><operator>,</operator> <name>unsigned</name> <name>char</name> <operator>*</operator><name>buf</name><operator>,</operator> <name>unsigned</name> <name>int</name> <name>len</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>intread</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>time_type</name> <name>get_time</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>char</name> <modifier>*</modifier> <name>errno_message</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>filename</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>percentage</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>POSITION</name> <name>num</name><operator>,</operator> <name>POSITION</name> <name>den</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>POSITION</name> <name>percent_pos</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>POSITION</name> <name>pos</name><operator>,</operator> <name>int</name> <name>percent</name><operator>,</operator> <name>long</name> <name>fraction</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>os9_signal</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>type</name><operator>,</operator> <call><call><name>RETSIGTYPE</name> <argument_list>(<argument><expr><operator>*</operator><name>handler</name></expr></argument>)</argument_list></call><argument_list>()</argument_list></call><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>sleep_ms</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>ms</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>put_line</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>flush</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>set_output</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>fd</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>putchr</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>c</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>clear_bot_if_needed</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>putstr</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>constant</name> <name>char</name> <operator>*</operator><name>s</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>less_printf</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>fmt</name><operator>,</operator> <name>PARG</name> <operator>*</operator><name>parg</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>get_return</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>error</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>fmt</name><operator>,</operator> <name>PARG</name> <operator>*</operator><name>parg</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>ierror</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>fmt</name><operator>,</operator> <name>PARG</name> <operator>*</operator><name>parg</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>query</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>fmt</name><operator>,</operator> <name>PARG</name> <operator>*</operator><name>parg</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>compile_pattern</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>pattern</name><operator>,</operator> <name>int</name> <name>search_type</name><operator>,</operator> <name>int</name> <name>show_error</name><operator>,</operator> <name>PATTERN_TYPE</name> <operator>*</operator><name>comp_pattern</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>uncompile_pattern</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>PATTERN_TYPE</name> <operator>*</operator><name>pattern</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>valid_pattern</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>pattern</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>is_null_pattern</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>PATTERN_TYPE</name> <name>pattern</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>match_pattern</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>PATTERN_TYPE</name> <name>pattern</name><operator>,</operator> <name>char</name> <operator>*</operator><name>tpattern</name><operator>,</operator> <name>char</name> <operator>*</operator><name>line</name><operator>,</operator> <name>int</name> <name>line_len</name><operator>,</operator> <name>char</name> <operator>*</operator><operator>*</operator><name>sp</name><operator>,</operator> <name>char</name> <operator>*</operator><operator>*</operator><name>ep</name><operator>,</operator> <name>int</name> <name>notbol</name><operator>,</operator> <name>int</name> <name>search_type</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>char</name> <modifier>*</modifier> <name>pattern_lib_name</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>POSITION</name> <name>position</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>sindex</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>add_forw_pos</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>POSITION</name> <name>pos</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>add_back_pos</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>POSITION</name> <name>pos</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>pos_clear</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>pos_init</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>onscreen</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>POSITION</name> <name>pos</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>empty_screen</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>empty_lines</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>s</name><operator>,</operator> <name>int</name> <name>e</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>get_scrpos</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator>struct <name>scrpos</name> <operator>*</operator><name>scrpos</name><operator>,</operator> <name>int</name> <name>where</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>sindex_from_sline</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>sline</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>init_prompt</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>char</name> <modifier>*</modifier> <name>pr_expand</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>constant</name> <name>char</name> <operator>*</operator><name>proto</name><operator>,</operator> <name>int</name> <name>maxwidth</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>char</name> <modifier>*</modifier> <name>eq_message</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>char</name> <modifier>*</modifier> <name>pr_string</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>char</name> <modifier>*</modifier> <name>wait_message</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>init_search</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>repaint_hilite</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>on</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>clear_attn</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>undo_search</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>clear</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>clr_hlist</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator>struct <name>hilite_tree</name> <operator>*</operator><name>anchor</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>clr_hilite</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>clr_filter</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>is_filtered</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>POSITION</name> <name>pos</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>POSITION</name> <name>next_unfiltered</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>POSITION</name> <name>pos</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>POSITION</name> <name>prev_unfiltered</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>POSITION</name> <name>pos</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>is_hilited_attr</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>POSITION</name> <name>pos</name><operator>,</operator> <name>POSITION</name> <name>epos</name><operator>,</operator> <name>int</name> <name>nohide</name><operator>,</operator> <name>int</name> <operator>*</operator><name>p_matches</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>chg_hilite</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>chg_caseless</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>search</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>search_type</name><operator>,</operator> <name>char</name> <operator>*</operator><name>pattern</name><operator>,</operator> <name>int</name> <name>n</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>prep_hilite</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>POSITION</name> <name>spos</name><operator>,</operator> <name>POSITION</name> <name>epos</name><operator>,</operator> <name>int</name> <name>maxlines</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>set_filter_pattern</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>pattern</name><operator>,</operator> <name>int</name> <name>search_type</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>is_filtering</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>RETSIGTYPE</name> <name>winch</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>type</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>init_signals</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>on</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>psignals</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>cleantags</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>gettagtype</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>findtag</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>tag</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>POSITION</name> <name>tagsearch</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>char</name> <modifier>*</modifier> <name>nexttag</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>n</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>char</name> <modifier>*</modifier> <name>prevtag</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>n</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>ntags</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>curr_tag</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>edit_tagfile</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>char</name> <modifier>*</modifier> <name>tty_device</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>open_getchr</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>close_getchr</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>default_wheel_lines</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>rstat</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <name>st</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name> <name>getchr</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator><name>VOID_PARAM</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>xbuf_init</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator>struct <name>xbuffer</name> <operator>*</operator><name>xbuf</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>xbuf_deinit</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator>struct <name>xbuffer</name> <operator>*</operator><name>xbuf</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>xbuf_reset</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator>struct <name>xbuffer</name> <operator>*</operator><name>xbuf</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>void</name> <name>xbuf_add</name></type> <name>LESSPARAMS</name> <argument_list>(<argument><expr><operator>(</operator>struct <name>xbuffer</name> <operator>*</operator><name>xbuf</name><operator>,</operator> <name>char</name> <name>ch</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
</unit>
