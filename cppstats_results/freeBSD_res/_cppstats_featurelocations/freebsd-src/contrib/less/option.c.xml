<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/less/option.c">


















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"less.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"option.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>loption</name></name> <modifier>*</modifier></type><name>pendopt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>plusoption</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier><name>optstring</name></type> <name>LESSPARAMS</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>s</name><operator>,</operator> <name>char</name> <operator>*</operator><operator>*</operator><name>p_str</name><operator>,</operator> <name>char</name> <operator>*</operator><name>printopt</name><operator>,</operator> <name>char</name> <operator>*</operator><name>validchars</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name> <name>flip_triple</name></type> <name>LESSPARAMS</name><argument_list>(<argument><expr><operator>(</operator><name>int</name> <name>val</name><operator>,</operator> <name>int</name> <name>lc</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>screen_trashed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>less_is_more</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>quit_at_eof</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>every_first_cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>opt_use_backslash</name></decl>;</decl_stmt>




<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>opt_desc</name><parameter_list>(<parameter><decl><type><name>o</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name><name>struct</name> <name>loption</name></name> <modifier>*</modifier></type><name>o</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buf</name><index>[<expr><name>OPTNAME_MAX</name> <operator>+</operator> <literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>oletter</name></name> <operator>==</operator> <name>OLETTER_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SNPRINTF1</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"--%s"</literal></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>onames</name><operator>-&gt;</operator><name>oname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SNPRINTF2</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"-%c (--%s)"</literal></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>oletter</name></name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>onames</name><operator>-&gt;</operator><name>oname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>(</operator><name>buf</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>public</name> <name>char</name> <modifier>*</modifier></type>
<name>propt</name><parameter_list>(<parameter><decl><type><name>c</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"-%s"</literal></expr></argument>, <argument><expr><call><name>prchar</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>buf</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>public</name> <name>void</name></type>
<name>scan_option</name><parameter_list>(<parameter><decl><type><name>s</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>loption</name></name> <modifier>*</modifier></type><name>o</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>optc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>optname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>printopt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>set_default</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PARG</name></type> <name>parg</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>








<if_stmt><if>if <condition>(<expr><name>pendopt</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>pendopt</name><operator>-&gt;</operator><name>otype</name></name> <operator>&amp;</operator> <name>OTYPE</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>STRING</name></expr>:</case>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>pendopt</name><operator>-&gt;</operator><name>ofunc</name></name>)<argument_list>(<argument><expr><name>INIT</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NUMBER</name></expr>:</case>
<expr_stmt><expr><name>printopt</name> <operator>=</operator> <call><name>opt_desc</name><argument_list>(<argument><expr><name>pendopt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>pendopt</name><operator>-&gt;</operator><name>ovar</name></name><operator>)</operator> <operator>=</operator> <call><name>getnum</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>printopt</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name>pendopt</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>set_default</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>optname</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
<block>{<block_content>



<switch>switch <condition>(<expr><name>optc</name> <operator>=</operator> <operator>*</operator><name>s</name><operator>++</operator></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">' '</literal></expr>:</case>
<case>case <expr><literal type="char">'\t'</literal></expr>:</case>
<case>case <expr><name>END_OPTION_STRING</name></expr>:</case>
<continue>continue;</continue>
<case>case <expr><literal type="char">'-'</literal></expr>:</case>



<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>optname</name> <operator>=</operator> <operator>++</operator><name>s</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name>set_default</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'+'</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>set_default</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<continue>continue;</continue>
<case>case <expr><literal type="char">'+'</literal></expr>:</case>







<expr_stmt><expr><name>plusoption</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>optstring</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><call><name>propt</name><argument_list>(<argument><expr><literal type="char">'+'</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>every_first_cmd</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>every_first_cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>every_first_cmd</name> <operator>=</operator> <call><name>save</name><argument_list>(<argument><expr><name>str</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else
<block>{<block_content>
<expr_stmt><expr><call><name>ungetsc</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ungetcc_back</name><argument_list>(<argument><expr><name>CHAR_END_COMMAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
<case>case <expr><literal type="char">'0'</literal></expr>:</case> <case>case <expr><literal type="char">'1'</literal></expr>:</case> <case>case <expr><literal type="char">'2'</literal></expr>:</case> <case>case <expr><literal type="char">'3'</literal></expr>:</case> <case>case <expr><literal type="char">'4'</literal></expr>:</case>
<case>case <expr><literal type="char">'5'</literal></expr>:</case> <case>case <expr><literal type="char">'6'</literal></expr>:</case> <case>case <expr><literal type="char">'7'</literal></expr>:</case> <case>case <expr><literal type="char">'8'</literal></expr>:</case> <case>case <expr><literal type="char">'9'</literal></expr>:</case>





<expr_stmt><expr><name>s</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>optc</name> <operator>=</operator> <literal type="char">'z'</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'n'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>less_is_more</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>optc</name> <operator>=</operator> <literal type="char">'z'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>





<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>optname</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>printopt</name> <operator>=</operator> <call><name>propt</name><argument_list>(<argument><expr><name>optc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lc</name> <operator>=</operator> <call><name>ASCII_IS_LOWER</name><argument_list>(<argument><expr><name>optc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>findopt</name><argument_list>(<argument><expr><name>optc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else
<block>{<block_content>
<expr_stmt><expr><name>printopt</name> <operator>=</operator> <name>optname</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lc</name> <operator>=</operator> <call><name>ASCII_IS_LOWER</name><argument_list>(<argument><expr><name><name>optname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>findopt_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name>optname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>optname</name></expr>;</expr_stmt>
<expr_stmt><expr><name>optname</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition>
<block>{<block_content>



<empty_stmt>;</empty_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>o</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>o</name><operator>-&gt;</operator><name>otype</name></name> <operator>&amp;</operator> <name>OTYPE</name><operator>)</operator> <operator>!=</operator> <name>STRING</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>o</name><operator>-&gt;</operator><name>otype</name></name> <operator>&amp;</operator> <name>OTYPE</name><operator>)</operator> <operator>!=</operator> <name>NUMBER</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>parg</name><operator>.</operator><name>p_string</name></name> <operator>=</operator> <name>printopt</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"The %s option should not be followed by ="</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>parg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else
<block>{<block_content>




<expr_stmt><expr><name>o</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>o</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>parg</name><operator>.</operator><name>p_string</name></name> <operator>=</operator> <name>printopt</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>OPT_AMBIG</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"%s is an ambiguous abbreviation (\"less --help\" for help)"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>parg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"There is no %s option (\"less --help\" for help)"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>parg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>otype</name></name> <operator>&amp;</operator> <name>OTYPE</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>BOOL</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>set_default</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>o</name><operator>-&gt;</operator><name>ovar</name></name><operator>)</operator> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>odefault</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>o</name><operator>-&gt;</operator><name>ovar</name></name><operator>)</operator> <operator>=</operator> <operator>!</operator> <name><name>o</name><operator>-&gt;</operator><name>odefault</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>TRIPLE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>set_default</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>o</name><operator>-&gt;</operator><name>ovar</name></name><operator>)</operator> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>odefault</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>o</name><operator>-&gt;</operator><name>ovar</name></name><operator>)</operator> <operator>=</operator> <call><name>flip_triple</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>odefault</name></name></expr></argument>, <argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>STRING</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition>
<block>{<block_content>





<expr_stmt><expr><name>pendopt</name> <operator>=</operator> <name>o</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>





<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>optstring</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><name>printopt</name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>odesc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>NUMBER</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>pendopt</name> <operator>=</operator> <name>o</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>o</name><operator>-&gt;</operator><name>ovar</name></name><operator>)</operator> <operator>=</operator> <call><name>getnum</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>printopt</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>



<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>ofunc</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>o</name><operator>-&gt;</operator><name>ofunc</name></name>)<argument_list>(<argument><expr><name>INIT</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></function>










<function><type><name>public</name> <name>void</name></type>
<name>toggle_option</name><parameter_list>(<parameter><decl><type><name>o</name></type></decl></parameter>, <parameter><decl><type><name>lower</name></type></decl></parameter>, <parameter><decl><type><name>s</name></type></decl></parameter>, <parameter><decl><type><name>how_toggle</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name><name>struct</name> <name>loption</name></name> <modifier>*</modifier></type><name>o</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lower</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>how_toggle</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>no_prompt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PARG</name></type> <name>parg</name></decl>;</decl_stmt>

<expr_stmt><expr><name>no_prompt</name> <operator>=</operator> <operator>(</operator><name>how_toggle</name> <operator>&amp;</operator> <name>OPT_NO_PROMPT</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>how_toggle</name> <operator>&amp;=</operator> <operator>~</operator><name>OPT_NO_PROMPT</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>o</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"No such option"</literal></expr></argument>, <argument><expr><name>NULL_PARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>how_toggle</name> <operator>==</operator> <name>OPT_TOGGLE</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>o</name><operator>-&gt;</operator><name>otype</name></name> <operator>&amp;</operator> <name>NO_TOGGLE</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>parg</name><operator>.</operator><name>p_string</name></name> <operator>=</operator> <call><name>opt_desc</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Cannot change the %s option"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>parg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>how_toggle</name> <operator>==</operator> <name>OPT_NO_TOGGLE</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>o</name><operator>-&gt;</operator><name>otype</name></name> <operator>&amp;</operator> <name>NO_QUERY</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>parg</name><operator>.</operator><name>p_string</name></name> <operator>=</operator> <call><name>opt_desc</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Cannot query the %s option"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>parg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>







<switch>switch <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>otype</name></name> <operator>&amp;</operator> <name>OTYPE</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>STRING</name></expr>:</case>
<case>case <expr><name>NUMBER</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>how_toggle</name> <operator>==</operator> <name>OPT_TOGGLE</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>how_toggle</name> <operator>=</operator> <name>OPT_NO_TOGGLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HILITE_SEARCH</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>how_toggle</name> <operator>!=</operator> <name>OPT_NO_TOGGLE</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>o</name><operator>-&gt;</operator><name>otype</name></name> <operator>&amp;</operator> <name>HL_REPAINT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>repaint_hilite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<if_stmt><if>if <condition>(<expr><name>how_toggle</name> <operator>!=</operator> <name>OPT_NO_TOGGLE</name></expr>)</condition>
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>otype</name></name> <operator>&amp;</operator> <name>OTYPE</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>BOOL</name></expr>:</case>



<switch>switch <condition>(<expr><name>how_toggle</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>OPT_TOGGLE</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>o</name><operator>-&gt;</operator><name>ovar</name></name><operator>)</operator> <operator>=</operator> <operator>!</operator> <operator>*</operator><operator>(</operator><name><name>o</name><operator>-&gt;</operator><name>ovar</name></name><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OPT_UNSET</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>o</name><operator>-&gt;</operator><name>ovar</name></name><operator>)</operator> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>odefault</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OPT_SET</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>o</name><operator>-&gt;</operator><name>ovar</name></name><operator>)</operator> <operator>=</operator> <operator>!</operator> <name><name>o</name><operator>-&gt;</operator><name>odefault</name></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><name>TRIPLE</name></expr>:</case>







<switch>switch <condition>(<expr><name>how_toggle</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>OPT_TOGGLE</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>o</name><operator>-&gt;</operator><name>ovar</name></name><operator>)</operator> <operator>=</operator> <call><name>flip_triple</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name><name>o</name><operator>-&gt;</operator><name>ovar</name></name><operator>)</operator></expr></argument>, <argument><expr><name>lower</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OPT_UNSET</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>o</name><operator>-&gt;</operator><name>ovar</name></name><operator>)</operator> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>odefault</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OPT_SET</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>o</name><operator>-&gt;</operator><name>ovar</name></name><operator>)</operator> <operator>=</operator> <call><name>flip_triple</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>odefault</name></name></expr></argument>, <argument><expr><name>lower</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><name>STRING</name></expr>:</case>




<switch>switch <condition>(<expr><name>how_toggle</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>OPT_SET</name></expr>:</case>
<case>case <expr><name>OPT_UNSET</name></expr>:</case>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Cannot use \"-+\" or \"--\" for a string option"</literal></expr></argument>,
<argument><expr><name>NULL_PARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></switch>
<break>break;</break>
<case>case <expr><name>NUMBER</name></expr>:</case>



<switch>switch <condition>(<expr><name>how_toggle</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>OPT_TOGGLE</name></expr>:</case>
<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>getnum</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>err</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>o</name><operator>-&gt;</operator><name>ovar</name></name><operator>)</operator> <operator>=</operator> <name>num</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>OPT_UNSET</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>o</name><operator>-&gt;</operator><name>ovar</name></name><operator>)</operator> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>odefault</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OPT_SET</name></expr>:</case>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Can't use \"-!\" for a numeric option"</literal></expr></argument>,
<argument><expr><name>NULL_PARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></switch>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>ofunc</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name><name>o</name><operator>-&gt;</operator><name>ofunc</name></name>)<argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name>how_toggle</name><operator>==</operator><name>OPT_NO_TOGGLE</name><operator>)</operator></expr> ?</condition><then> <expr><name>QUERY</name></expr> </then><else>: <expr><name>TOGGLE</name></expr></else></ternary></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HILITE_SEARCH</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>how_toggle</name> <operator>!=</operator> <name>OPT_NO_TOGGLE</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>o</name><operator>-&gt;</operator><name>otype</name></name> <operator>&amp;</operator> <name>HL_REPAINT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>chg_hilite</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>no_prompt</name></expr>)</condition>
<block>{<block_content>



<switch>switch <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>otype</name></name> <operator>&amp;</operator> <name>OTYPE</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>BOOL</name></expr>:</case>
<case>case <expr><name>TRIPLE</name></expr>:</case>



<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>odesc</name><index>[<expr><operator>*</operator><operator>(</operator><name><name>o</name><operator>-&gt;</operator><name>ovar</name></name><operator>)</operator></expr>]</index></name></expr></argument>, <argument><expr><name>NULL_PARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>NUMBER</name></expr>:</case>




<expr_stmt><expr><name><name>parg</name><operator>.</operator><name>p_int</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name><name>o</name><operator>-&gt;</operator><name>ovar</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>odesc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>parg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>STRING</name></expr>:</case>



<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>how_toggle</name> <operator>!=</operator> <name>OPT_NO_TOGGLE</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>o</name><operator>-&gt;</operator><name>otype</name></name> <operator>&amp;</operator> <name>REPAINT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>screen_trashed</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>flip_triple</name><parameter_list>(<parameter><decl><type><name>val</name></type></decl></parameter>, <parameter><decl><type><name>lc</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lc</name></decl>;</decl_stmt>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>lc</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>val</name> <operator>==</operator> <name>OPT_ON</name><operator>)</operator></expr> ?</condition><then> <expr><name>OPT_OFF</name></expr> </then><else>: <expr><name>OPT_ON</name></expr></else></ternary><operator>)</operator></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>val</name> <operator>==</operator> <name>OPT_ONPLUS</name><operator>)</operator></expr> ?</condition><then> <expr><name>OPT_OFF</name></expr> </then><else>: <expr><name>OPT_ONPLUS</name></expr></else></ternary><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>




<function><type><name>public</name> <name>int</name></type>
<name>opt_has_param</name><parameter_list>(<parameter><decl><type><name>o</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name><name>struct</name> <name>loption</name></name> <modifier>*</modifier></type><name>o</name></decl>;</decl_stmt>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>o</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>otype</name></name> <operator>&amp;</operator> <operator>(</operator><name>BOOL</name><operator>|</operator><name>TRIPLE</name><operator>|</operator><name>NOVAR</name><operator>|</operator><name>NO_TOGGLE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>public</name> <name>char</name> <modifier>*</modifier></type>
<name>opt_prompt</name><parameter_list>(<parameter><decl><type><name>o</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name><name>struct</name> <name>loption</name></name> <modifier>*</modifier></type><name>o</name></decl>;</decl_stmt>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>o</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name><name>o</name><operator>-&gt;</operator><name>otype</name></name> <operator>&amp;</operator> <operator>(</operator><name>STRING</name><operator>|</operator><name>NUMBER</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="string">"?"</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name><name>o</name><operator>-&gt;</operator><name>odesc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>public</name> <name>char</name> <modifier>*</modifier></type>
<name>opt_toggle_disallowed</name><parameter_list>(<parameter><decl><type><name>c</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<block>{<block_content>
<switch>switch <condition>(<expr><name>c</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'o'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>ch_getflags</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>CH_CANSEEK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="string">"Input is not a pipe"</literal></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>public</name> <name>int</name></type>
<name>isoptpending</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>pendopt</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>nostring</name><parameter_list>(<parameter><decl><type><name>printopt</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>printopt</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>PARG</name></type> <name>parg</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>parg</name><operator>.</operator><name>p_string</name></name> <operator>=</operator> <name>printopt</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Value is required after %s"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>parg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>public</name> <name>void</name></type>
<name>nopendopt</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>nostring</name><argument_list>(<argument><expr><call><name>opt_desc</name><argument_list>(<argument><expr><name>pendopt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>optstring</name><parameter_list>(<parameter><decl><type><name>s</name></type></decl></parameter>, <parameter><decl><type><name>p_str</name></type></decl></parameter>, <parameter><decl><type><name>printopt</name></type></decl></parameter>, <parameter><decl><type><name>validchars</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>printopt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>validchars</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>nostring</name><argument_list>(<argument><expr><name>printopt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>p_str</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>ecalloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <operator>*</operator><name>p_str</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>s</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>opt_use_backslash</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>END_OPTION_STRING</name> <operator>||</operator>
<operator>(</operator><name>validchars</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>validchars</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>p</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type>
<name>num_error</name><parameter_list>(<parameter><decl><type><name>printopt</name></type></decl></parameter>, <parameter><decl><type><name>errp</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>printopt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>errp</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>PARG</name></type> <name>parg</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>errp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>errp</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>printopt</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>parg</name><operator>.</operator><name>p_string</name></name> <operator>=</operator> <name>printopt</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Number is required after %s"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>parg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><name>public</name> <name>int</name></type>
<name>getnum</name><parameter_list>(<parameter><decl><type><name>sp</name></type></decl></parameter>, <parameter><decl><type><name>printopt</name></type></decl></parameter>, <parameter><decl><type><name>errp</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>sp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>printopt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>errp</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>neg</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>skipsp</name><argument_list>(<argument><expr><operator>*</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>neg</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>neg</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>s</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <operator>*</operator><name>s</name></expr></argument> &gt;</argument_list></name> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>num_error</name><argument_list>(<argument><expr><name>printopt</name></expr></argument>, <argument><expr><name>errp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">10</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <operator>*</operator><name>s</name><operator>++</operator> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><operator>*</operator><name>sp</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>errp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>errp</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>neg</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>-</operator><name>n</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>n</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>







<function><type><name>public</name> <name>long</name></type>
<name>getfraction</name><parameter_list>(<parameter><decl><type><name>sp</name></type></decl></parameter>, <parameter><decl><type><name>printopt</name></type></decl></parameter>, <parameter><decl><type><name>errp</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>sp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>printopt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>errp</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>frac</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fraclen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>skipsp</name><argument_list>(<argument><expr><operator>*</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>s</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <operator>*</operator><name>s</name></expr></argument> &gt;</argument_list></name> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>num_error</name><argument_list>(<argument><expr><name>printopt</name></expr></argument>, <argument><expr><name>errp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>( <init>;</init> <condition><expr><operator>*</operator><name>s</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>frac</name> <operator>=</operator> <operator>(</operator><name>frac</name> <operator>*</operator> <literal type="number">10</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>*</operator><name>s</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>fraclen</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>fraclen</name> <operator>&gt;</operator> <name>NUM_LOG_FRAC_DENOM</name></expr>)</condition><block type="pseudo"><block_content>
<while>while <condition>(<expr><name>fraclen</name><operator>--</operator> <operator>&gt;</operator> <name>NUM_LOG_FRAC_DENOM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>frac</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></while></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<while>while <condition>(<expr><name>fraclen</name><operator>++</operator> <operator>&lt;</operator> <name>NUM_LOG_FRAC_DENOM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>frac</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></while></block_content></block></else></if_stmt>
<expr_stmt><expr><operator>*</operator><name>sp</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>errp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>errp</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>frac</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>public</name> <name>int</name></type>
<name>get_quit_at_eof</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>less_is_more</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>quit_at_eof</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name>quit_at_eof</name></expr> ?</condition><then> <expr><name>OPT_ONPLUS</name></expr> </then><else>: <expr><name>OPT_ON</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
</unit>
