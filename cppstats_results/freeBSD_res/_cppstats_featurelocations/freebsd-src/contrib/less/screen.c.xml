<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/less/screen.c">














<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"less.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cmd.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pckeys.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>MSOFTC</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;graph.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>BORLANDC</name> <operator>||</operator> <name>MSDOS_COMPILER</name><operator>==</operator><name>DJGPPC</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;conio.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>DJGPPC</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pc.h&gt;</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>fd0</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>WIN32C</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FOREGROUND_BLUE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOREGROUND_BLUE</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FOREGROUND_GREEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOREGROUND_GREEN</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FOREGROUND_RED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOREGROUND_RED</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FOREGROUND_INTENSITY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOREGROUND_INTENSITY</name></cpp:macro> <cpp:value>0x0008</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_SYS_IOCTL_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_TERMIOS_H</name> <operator>&amp;&amp;</operator> <name>HAVE_TERMIOS_FUNCS</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;termios.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_TERMIO_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;termio.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_SGSTAT_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sgstat.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sgtty.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_TERMCAP_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;termcap.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_OSK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OS2</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pckeys.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_SYS_STREAM_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stream.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_SYS_PTEM_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ptem.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ultrix__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUST_SET_LINE_DISCIPLINE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUST_SET_LINE_DISCIPLINE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OS2</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_TERM</name></cpp:macro> <cpp:value>"ansi"</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>windowid</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_TERM</name></cpp:macro> <cpp:value>"unknown"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>MSOFTC</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>videopages</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name>msec_loops</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>flash_created</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_FG_COLOR</name><parameter_list>(<parameter><type><name>fg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_settextcolor(fg)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_BG_COLOR</name><parameter_list>(<parameter><type><name>bg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_setbkcolor(bg)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETCOLORS</name><parameter_list>(<parameter><type><name>fg</name></type></parameter>,<parameter><type><name>bg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ SET_FG_COLOR(fg); SET_BG_COLOR(bg); }</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>BORLANDC</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>whitescreen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>flash_created</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>BORLANDC</name> <operator>||</operator> <name>MSDOS_COMPILER</name><operator>==</operator><name>DJGPPC</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_settextposition</name><parameter_list>(<parameter><type><name>y</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>gotoxy(x,y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_clearscreen</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>clrscr()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_outtext</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cputs(s)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_FG_COLOR</name><parameter_list>(<parameter><type><name>fg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>textcolor(fg)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_BG_COLOR</name><parameter_list>(<parameter><type><name>bg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>textbackground(bg)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETCOLORS</name><parameter_list>(<parameter><type><name>fg</name></type></parameter>,<parameter><type><name>bg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ SET_FG_COLOR(fg); SET_BG_COLOR(bg); }</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>sc_height</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>WIN32C</name></expr></cpp:if>
<struct>struct <name>keyRecord</name>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>ascii</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>scan</name></decl>;</decl_stmt>
}</block> <decl><name>currentKey</name></decl>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>keyCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>WORD</name></type> <name>curr_attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>pending_scancode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>x11mousebuf</name><index>[]</index></name> <init>= <expr><literal type="string">"[M???"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>x11mousePos</name></decl>, <decl><type ref="prev"/><name>x11mouseCount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>HANDLE</name></type> <name>con_out_save</name> <init>= <expr><name>INVALID_HANDLE_VALUE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>HANDLE</name></type> <name>con_out_ours</name> <init>= <expr><name>INVALID_HANDLE_VALUE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>con_out</name> <init>= <expr><name>INVALID_HANDLE_VALUE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>utf_mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>quitting</name></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>win32_init_term</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>win32_deinit_term</name><parameter_list>()</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_VIRTUAL_TERMINAL_PROCESSING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENABLE_VIRTUAL_TERMINAL_PROCESSING</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FG_COLORS</name></cpp:macro> <cpp:value>(FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_BLUE | FOREGROUND_INTENSITY)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BG_COLORS</name></cpp:macro> <cpp:value>(BACKGROUND_RED | BACKGROUND_GREEN | BACKGROUND_BLUE | BACKGROUND_INTENSITY)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKEATTR</name><parameter_list>(<parameter><type><name>fg</name></type></parameter>,<parameter><type><name>bg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((WORD)((fg)|((bg)&lt;&lt;4)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APPLY_COLORS</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>{ if (SetConsoleTextAttribute(con_out, curr_attr) == 0) error("SETCOLORS failed", NULL_PARG); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_FG_COLOR</name><parameter_list>(<parameter><type><name>fg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ curr_attr |= (fg); APPLY_COLORS(); }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_BG_COLOR</name><parameter_list>(<parameter><type><name>bg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ curr_attr |= ((bg)&lt;&lt;4); APPLY_COLORS(); }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETCOLORS</name><parameter_list>(<parameter><type><name>fg</name></type></parameter>,<parameter><type><name>bg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ curr_attr = MAKEATTR(fg,bg); APPLY_COLORS(); }</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name></expr></cpp:if>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>nm_fg_color</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>nm_bg_color</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>bo_fg_color</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>bo_bg_color</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>ul_fg_color</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>ul_bg_color</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>so_fg_color</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>so_bg_color</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>bl_fg_color</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>bl_bg_color</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>sy_fg_color</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>sy_bg_color</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>sgr_mode</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>WIN32C</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>DWORD</name></type> <name>init_output_mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>vt_enabled</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>




<decl_stmt><decl><type><specifier>static</specifier> <name>char</name>
<modifier>*</modifier></type><name>sc_pad</name></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>sc_home</name></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>sc_addline</name></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>sc_lower_left</name></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>sc_return</name></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>sc_move</name></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>sc_clear</name></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>sc_eol_clear</name></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>sc_eos_clear</name></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>sc_s_in</name></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>sc_s_out</name></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>sc_u_in</name></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>sc_u_out</name></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>sc_b_in</name></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>sc_b_out</name></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>sc_bl_in</name></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>sc_bl_out</name></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>sc_visual_bell</name></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>sc_backspace</name></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>sc_s_keypad</name></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>sc_e_keypad</name></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>sc_s_mousecap</name></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>sc_e_mousecap</name></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>sc_init</name></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>sc_deinit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>attrcolor</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>init_done</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>auto_wrap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>ignaw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>erase_char</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>erase2_char</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>kill_char</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>werase_char</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>sc_width</name></decl>, <decl><type ref="prev"/><name>sc_height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>bo_s_width</name></decl>, <decl><type ref="prev"/><name>bo_e_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>ul_s_width</name></decl>, <decl><type ref="prev"/><name>ul_e_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>so_s_width</name></decl>, <decl><type ref="prev"/><name>so_e_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>bl_s_width</name></decl>, <decl><type ref="prev"/><name>bl_e_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>above_mem</name></decl>, <decl><type ref="prev"/><name>below_mem</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>can_goto_line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>clear_bg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>missing_cap</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>char</name> <modifier>*</modifier></type><name>kent</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>attrmode</name> <init>= <expr><name>AT_NORMAL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>termcap_debug</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>binattr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>one_screen</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LESSTEST</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>ttyin_name</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>MSDOS_COMPILER</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier><name>cheaper</name></type> <name>LESSPARAMS</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>t1</name><operator>,</operator> <name>char</name> <operator>*</operator><name>t2</name><operator>,</operator> <name>char</name> <operator>*</operator><name>def</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <name>tmodes</name></type> <name>LESSPARAMS</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>incap</name><operator>,</operator> <name>char</name> <operator>*</operator><name>outcap</name><operator>,</operator> <name>char</name> <operator>*</operator><operator>*</operator><name>instr</name><operator>,</operator>
<name>char</name> <operator>*</operator><operator>*</operator><name>outstr</name><operator>,</operator> <name>char</name> <operator>*</operator><name>def_instr</name><operator>,</operator> <name>char</name> <operator>*</operator><name>def_outstr</name><operator>,</operator> <name>char</name> <operator>*</operator><operator>*</operator><name>spp</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MUST_DEFINE_OSPEED</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <name>short</name></type> <name>ospeed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name></type> <name>PC</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_OSK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>short</name></type> <name>ospeed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>PC_</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>UP</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>BC</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>quiet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>no_back_scroll</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>swindow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>no_init</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>no_keypad</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>sigs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>wscroll</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>screen_trashed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>top_scroll</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>quit_if_one_screen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>oldbot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>mousecap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>is_tty</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>use_color</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HILITE_SEARCH</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>hilite_search</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>WIN32C</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <name>HANDLE</name></type> <name>tty</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>DWORD</name></type> <name>console_mode</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_EXTENDED_FLAGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENABLE_EXTENDED_FLAGS</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENABLE_QUICK_EDIT_MODE</name></cpp:macro> <cpp:value>0x40</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>tty</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>tgetstr</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>tgoto</name><parameter_list>()</parameter_list>;</function_decl>













<function><type><name>public</name> <name>void</name></type>
<name>raw_mode</name><parameter_list>(<parameter><decl><type><name>on</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>on</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>curr_on</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>on</name> <operator>==</operator> <name>curr_on</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>erase2_char</name> <operator>=</operator> <literal type="char">'\b'</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_TERMIOS_H</name> <operator>&amp;&amp;</operator> <name>HAVE_TERMIOS_FUNCS</name></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>termios</name></name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>termios</name></name></type> <name>save_term</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>saved_term</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>on</name></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><call><name>tcgetattr</name><argument_list>(<argument><expr><name>tty</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><operator>!</operator><name>saved_term</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>save_term</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>saved_term</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_OSPEED</name></expr></cpp:if>
<switch>switch <condition>(<expr><call><name>cfgetospeed</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>B0</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>B0</name></expr>:</case> <expr_stmt><expr><name>ospeed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>B50</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>B50</name></expr>:</case> <expr_stmt><expr><name>ospeed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>B75</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>B75</name></expr>:</case> <expr_stmt><expr><name>ospeed</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>B110</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>B110</name></expr>:</case> <expr_stmt><expr><name>ospeed</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>B134</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>B134</name></expr>:</case> <expr_stmt><expr><name>ospeed</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>B150</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>B150</name></expr>:</case> <expr_stmt><expr><name>ospeed</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>B200</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>B200</name></expr>:</case> <expr_stmt><expr><name>ospeed</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>B300</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>B300</name></expr>:</case> <expr_stmt><expr><name>ospeed</name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>B600</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>B600</name></expr>:</case> <expr_stmt><expr><name>ospeed</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>B1200</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>B1200</name></expr>:</case> <expr_stmt><expr><name>ospeed</name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>B1800</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>B1800</name></expr>:</case> <expr_stmt><expr><name>ospeed</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>B2400</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>B2400</name></expr>:</case> <expr_stmt><expr><name>ospeed</name> <operator>=</operator> <literal type="number">11</literal></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>B4800</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>B4800</name></expr>:</case> <expr_stmt><expr><name>ospeed</name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>B9600</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>B9600</name></expr>:</case> <expr_stmt><expr><name>ospeed</name> <operator>=</operator> <literal type="number">13</literal></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXTA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>EXTA</name></expr>:</case> <expr_stmt><expr><name>ospeed</name> <operator>=</operator> <literal type="number">14</literal></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXTB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>EXTB</name></expr>:</case> <expr_stmt><expr><name>ospeed</name> <operator>=</operator> <literal type="number">15</literal></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>B57600</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>B57600</name></expr>:</case> <expr_stmt><expr><name>ospeed</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>B115200</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>B115200</name></expr>:</case> <expr_stmt><expr><name>ospeed</name> <operator>=</operator> <literal type="number">17</literal></expr>;</expr_stmt> <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<default>default:</default> <empty_stmt>;</empty_stmt>
</block_content>}</block></switch>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>erase_char</name> <operator>=</operator> <name><name>s</name><operator>.</operator><name>c_cc</name><index>[<expr><name>VERASE</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VERASE2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>erase2_char</name> <operator>=</operator> <name><name>s</name><operator>.</operator><name>c_cc</name><index>[<expr><name>VERASE2</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>kill_char</name> <operator>=</operator> <name><name>s</name><operator>.</operator><name>c_cc</name><index>[<expr><name>VKILL</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VWERASE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>werase_char</name> <operator>=</operator> <name><name>s</name><operator>.</operator><name>c_cc</name><index>[<expr><name>VWERASE</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>werase_char</name> <operator>=</operator> <call><name>CONTROL</name><argument_list>(<argument><expr><literal type="char">'W'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<expr_stmt><expr><name><name>s</name><operator>.</operator><name>c_lflag</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><literal type="number">0</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ICANON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>|</operator> <name>ICANON</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ECHO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>|</operator> <name>ECHO</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ECHOE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>|</operator> <name>ECHOE</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ECHOK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>|</operator> <name>ECHOK</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ECHONL</name></expr></cpp:if>
<operator>|</operator> <name>ECHONL</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>.</operator><name>c_oflag</name></name> <operator>|=</operator> <operator>(</operator><literal type="number">0</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OXTABS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>|</operator> <name>OXTABS</name>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TAB3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>|</operator> <name>TAB3</name>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>XTABS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>|</operator> <name>XTABS</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OPOST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>|</operator> <name>OPOST</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ONLCR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>|</operator> <name>ONLCR</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>.</operator><name>c_oflag</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><literal type="number">0</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ONOEOT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>|</operator> <name>ONOEOT</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OCRNL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>|</operator> <name>OCRNL</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ONOCR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>|</operator> <name>ONOCR</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ONLRET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>|</operator> <name>ONLRET</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>c_cc</name><index>[<expr><name>VMIN</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>c_cc</name><index>[<expr><name>VTIME</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VLNEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>c_cc</name><index>[<expr><name>VLNEXT</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VDSUSP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>c_cc</name><index>[<expr><name>VDSUSP</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MUST_SET_LINE_DISCIPLINE</name></expr></cpp:if>




<expr_stmt><expr><name><name>s</name><operator>.</operator><name>c_line</name></name> <operator>=</operator> <name>TERMIODISC</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <else>else
<block>{<block_content>



<expr_stmt><expr><name>s</name> <operator>=</operator> <name>save_term</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_FSYNC</name></expr></cpp:if>
<expr_stmt><expr><call><name>fsync</name><argument_list>(<argument><expr><name>tty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>tcsetattr</name><argument_list>(<argument><expr><name>tty</name></expr></argument>, <argument><expr><name>TCSADRAIN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MUST_SET_LINE_DISCIPLINE</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>on</name></expr>)</condition>
<block>{<block_content>






<expr_stmt><expr><call><name>ioctl</name><argument_list>(<argument><expr><name>tty</name></expr></argument>, <argument><expr><name>TIOCSETD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>save_term</name><operator>.</operator><name>c_line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TCGETA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>termio</name></name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>termio</name></name></type> <name>save_term</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>saved_term</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>on</name></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><call><name>ioctl</name><argument_list>(<argument><expr><name>tty</name></expr></argument>, <argument><expr><name>TCGETA</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><operator>!</operator><name>saved_term</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>save_term</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>saved_term</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_OSPEED</name></expr></cpp:if>
<expr_stmt><expr><name>ospeed</name> <operator>=</operator> <name><name>s</name><operator>.</operator><name>c_cflag</name></name> <operator>&amp;</operator> <name>CBAUD</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>erase_char</name> <operator>=</operator> <name><name>s</name><operator>.</operator><name>c_cc</name><index>[<expr><name>VERASE</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>kill_char</name> <operator>=</operator> <name><name>s</name><operator>.</operator><name>c_cc</name><index>[<expr><name>VKILL</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VWERASE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>werase_char</name> <operator>=</operator> <name><name>s</name><operator>.</operator><name>c_cc</name><index>[<expr><name>VWERASE</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>werase_char</name> <operator>=</operator> <call><name>CONTROL</name><argument_list>(<argument><expr><literal type="char">'W'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<expr_stmt><expr><name><name>s</name><operator>.</operator><name>c_lflag</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>ICANON</name><operator>|</operator><name>ECHO</name><operator>|</operator><name>ECHOE</name><operator>|</operator><name>ECHOK</name><operator>|</operator><name>ECHONL</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>c_oflag</name></name> <operator>|=</operator> <operator>(</operator><name>OPOST</name><operator>|</operator><name>ONLCR</name><operator>|</operator><name>TAB3</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>c_oflag</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>OCRNL</name><operator>|</operator><name>ONOCR</name><operator>|</operator><name>ONLRET</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>c_cc</name><index>[<expr><name>VMIN</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>c_cc</name><index>[<expr><name>VTIME</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else
<block>{<block_content>



<expr_stmt><expr><name>s</name> <operator>=</operator> <name>save_term</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>ioctl</name><argument_list>(<argument><expr><name>tty</name></expr></argument>, <argument><expr><name>TCSETAW</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCGETP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sgttyb</name></name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>sgttyb</name></name></type> <name>save_term</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>saved_term</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>on</name></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><call><name>ioctl</name><argument_list>(<argument><expr><name>tty</name></expr></argument>, <argument><expr><name>TIOCGETP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><operator>!</operator><name>saved_term</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>save_term</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>saved_term</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_OSPEED</name></expr></cpp:if>
<expr_stmt><expr><name>ospeed</name> <operator>=</operator> <name><name>s</name><operator>.</operator><name>sg_ospeed</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>erase_char</name> <operator>=</operator> <name><name>s</name><operator>.</operator><name>sg_erase</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>kill_char</name> <operator>=</operator> <name><name>s</name><operator>.</operator><name>sg_kill</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>werase_char</name> <operator>=</operator> <call><name>CONTROL</name><argument_list>(<argument><expr><literal type="char">'W'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name><name>s</name><operator>.</operator><name>sg_flags</name></name> <operator>|=</operator> <name>CBREAK</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>sg_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>ECHO</name><operator>|</operator><name>XTABS</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else
<block>{<block_content>



<expr_stmt><expr><name>s</name> <operator>=</operator> <name>save_term</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>ioctl</name><argument_list>(<argument><expr><name>tty</name></expr></argument>, <argument><expr><name>TIOCSETN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_OSK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sgbuf</name></name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>sgbuf</name></name></type> <name>save_term</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>saved_term</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>on</name></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><call><name>_gs_opt</name><argument_list>(<argument><expr><name>tty</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><operator>!</operator><name>saved_term</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>save_term</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>saved_term</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>erase_char</name> <operator>=</operator> <name><name>s</name><operator>.</operator><name>sg_bspch</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>kill_char</name> <operator>=</operator> <name><name>s</name><operator>.</operator><name>sg_dlnch</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>werase_char</name> <operator>=</operator> <call><name>CONTROL</name><argument_list>(<argument><expr><literal type="char">'W'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name><name>s</name><operator>.</operator><name>sg_echo</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>sg_eofch</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>sg_pause</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>sg_psch</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else
<block>{<block_content>



<expr_stmt><expr><name>s</name> <operator>=</operator> <name>save_term</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>_ss_opt</name><argument_list>(<argument><expr><name>tty</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OS2</name></expr></cpp:if>

<expr_stmt><expr><call><name>LSIGNAL</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>erase_char</name> <operator>=</operator> <literal type="char">'\b'</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>DJGPPC</name></expr></cpp:if>
<expr_stmt><expr><name>kill_char</name> <operator>=</operator> <call><name>CONTROL</name><argument_list>(<argument><expr><literal type="char">'U'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<if_stmt><if>if <condition>(<expr><name>fd0</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>setmode</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>on</name></expr> ?</condition><then> <expr><name>O_BINARY</name></expr> </then><else>: <expr><name>O_TEXT</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>kill_char</name> <operator>=</operator> <name>ESC</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>werase_char</name> <operator>=</operator> <call><name>CONTROL</name><argument_list>(<argument><expr><literal type="char">'W'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>curr_on</name> <operator>=</operator> <name>on</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>MSDOS_COMPILER</name></expr></cpp:if>



<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>hardcopy</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>ltget_env</name><parameter_list>(<parameter><decl><type><name>capname</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>capname</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>termcap_debug</name></expr>)</condition>
<block>{<block_content>
<struct>struct <name>env</name> <block>{ <decl_stmt><decl><type><name><name>struct</name> <name>env</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt> }</block>;</struct>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>env</name></name> <modifier>*</modifier></type><name>envs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>env</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>envs</name></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>capname</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>p</name><operator>-&gt;</operator><name>value</name></name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator>struct <name>env</name> <operator>*</operator><operator>)</operator> <call><name>ecalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>env</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>save</name><argument_list>(<argument><expr><name>capname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>ecalloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>capname</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">3</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="string">"&lt;%s&gt;"</literal></expr></argument>, <argument><expr><name>capname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>envs</name></expr>;</expr_stmt>
<expr_stmt><expr><name>envs</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<return>return <expr><name><name>p</name><operator>-&gt;</operator><name>value</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>SNPRINTF1</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"LESS_TERMCAP_%s"</literal></expr></argument>, <argument><expr><name>capname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>lgetenv</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>ltgetflag</name><parameter_list>(<parameter><decl><type><name>capname</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>capname</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>s</name> <operator>=</operator> <call><name>ltget_env</name><argument_list>(<argument><expr><name>capname</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>hardcopy</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>tgetflag</name><argument_list>(<argument><expr><name>capname</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>ltgetnum</name><parameter_list>(<parameter><decl><type><name>capname</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>capname</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>s</name> <operator>=</operator> <call><name>ltget_env</name><argument_list>(<argument><expr><name>capname</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>atoi</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>hardcopy</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>tgetnum</name><argument_list>(<argument><expr><name>capname</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>ltgetstr</name><parameter_list>(<parameter><decl><type><name>capname</name></type></decl></parameter>, <parameter><decl><type><name>pp</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>capname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>s</name> <operator>=</operator> <call><name>ltget_env</name><argument_list>(<argument><expr><name>capname</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>s</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>hardcopy</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>tgetstr</name><argument_list>(<argument><expr><name>capname</name></expr></argument>, <argument><expr><name>pp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><name>public</name> <name>void</name></type>
<name>scrsize</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sys_height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sys_width</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>MSDOS_COMPILER</name></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEF_SC_WIDTH</name></cpp:macro> <cpp:value>80</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEF_SC_HEIGHT</name></cpp:macro> <cpp:value>25</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEF_SC_HEIGHT</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><name>sys_width</name> <operator>=</operator> <name>sys_height</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>MSOFTC</name></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>videoconfig</name></name></type> <name>w</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_getvideoconfig</name><argument_list>(<argument><expr><operator>&amp;</operator><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sys_height</name> <operator>=</operator> <name><name>w</name><operator>.</operator><name>numtextrows</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>sys_width</name> <operator>=</operator> <name><name>w</name><operator>.</operator><name>numtextcols</name></name></expr>;</expr_stmt>
</block_content>}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>BORLANDC</name> <operator>||</operator> <name>MSDOS_COMPILER</name><operator>==</operator><name>DJGPPC</name></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>text_info</name></name></type> <name>w</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>gettextinfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sys_height</name> <operator>=</operator> <name><name>w</name><operator>.</operator><name>screenheight</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>sys_width</name> <operator>=</operator> <name><name>w</name><operator>.</operator><name>screenwidth</name></name></expr>;</expr_stmt>
</block_content>}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>WIN32C</name></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>CONSOLE_SCREEN_BUFFER_INFO</name></type> <name>scr</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GetConsoleScreenBufferInfo</name><argument_list>(<argument><expr><name>con_out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sys_height</name> <operator>=</operator> <name><name>scr</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Bottom</name></name> <operator>-</operator> <name><name>scr</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Top</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sys_width</name> <operator>=</operator> <name><name>scr</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Right</name></name> <operator>-</operator> <name><name>scr</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Left</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OS2</name></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_scrsize</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sys_width</name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>sys_height</name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>





<expr_stmt><expr><name>windowid</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"WINDOWID"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>windowid</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name> <init>= <expr><call><name>popen</name><argument_list>(<argument><expr><literal type="string">"scrsize"</literal></expr></argument>, <argument><expr><literal type="string">"rt"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fscanf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"%i %i"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>w</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>h</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>sys_width</name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sys_height</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>pclose</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TIOCGWINSZ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>winsize</name></name></type> <name>w</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>TIOCGWINSZ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>w</name><operator>.</operator><name>ws_row</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sys_height</name> <operator>=</operator> <name><name>w</name><operator>.</operator><name>ws_row</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>w</name><operator>.</operator><name>ws_col</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sys_width</name> <operator>=</operator> <name><name>w</name><operator>.</operator><name>ws_col</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIOCGETD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>uwdata</name></name></type> <name>w</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>WIOCGETD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>w</name><operator>.</operator><name>uw_height</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sys_height</name> <operator>=</operator> <name><name>w</name><operator>.</operator><name>uw_height</name></name> <operator>/</operator> <name><name>w</name><operator>.</operator><name>uw_vs</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>w</name><operator>.</operator><name>uw_width</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sys_width</name> <operator>=</operator> <name><name>w</name><operator>.</operator><name>uw_width</name></name> <operator>/</operator> <name><name>w</name><operator>.</operator><name>uw_hs</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>sys_height</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sc_height</name> <operator>=</operator> <name>sys_height</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>s</name> <operator>=</operator> <call><name>lgetenv</name><argument_list>(<argument><expr><literal type="string">"LINES"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sc_height</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>MSDOS_COMPILER</name></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>ltgetnum</name><argument_list>(<argument><expr><literal type="string">"li"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sc_height</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>sc_height</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sc_height</name> <operator>=</operator> <name>DEF_SC_HEIGHT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sys_width</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sc_width</name> <operator>=</operator> <name>sys_width</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>s</name> <operator>=</operator> <call><name>lgetenv</name><argument_list>(<argument><expr><literal type="string">"COLUMNS"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sc_width</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>MSDOS_COMPILER</name></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>ltgetnum</name><argument_list>(<argument><expr><literal type="string">"co"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sc_width</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>sc_width</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sc_width</name> <operator>=</operator> <name>DEF_SC_WIDTH</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>MSOFTC</name></expr></cpp:if>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>get_clock</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>clock_t</name></type> <name>start</name></decl>;</decl_stmt>




<expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>clock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>clock</name><argument_list>()</argument_list></call> <operator>==</operator> <name>start</name></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></while>



<expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>clock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>msec_loops</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>clock</name><argument_list>()</argument_list></call> <operator>==</operator> <name>start</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>msec_loops</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>



<expr_stmt><expr><name>msec_loops</name> <operator>*=</operator> <name>CLOCKS_PER_SEC</name></expr>;</expr_stmt>
<expr_stmt><expr><name>msec_loops</name> <operator>/=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>delay</name><parameter_list>(<parameter><decl><type><name>msec</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>msec</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>msec</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>msec_loops</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>clock</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></while>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><name>public</name> <name>char</name> <modifier>*</modifier></type>
<name>special_key_str</name><parameter_list>(<parameter><decl><type><name>key</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>key</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>tbuf</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name> <operator>||</operator> <name>OS2</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>k_right</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'\340'</literal></expr>, <expr><name>PCK_RIGHT</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>k_left</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'\340'</literal></expr>, <expr><name>PCK_LEFT</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>k_ctl_right</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'\340'</literal></expr>, <expr><name>PCK_CTL_RIGHT</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>k_ctl_left</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'\340'</literal></expr>, <expr><name>PCK_CTL_LEFT</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>k_insert</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'\340'</literal></expr>, <expr><name>PCK_INSERT</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>k_delete</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'\340'</literal></expr>, <expr><name>PCK_DELETE</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>k_ctl_delete</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'\340'</literal></expr>, <expr><name>PCK_CTL_DELETE</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>k_ctl_backspace</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'\177'</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>k_home</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'\340'</literal></expr>, <expr><name>PCK_HOME</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>k_end</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'\340'</literal></expr>, <expr><name>PCK_END</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>k_up</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'\340'</literal></expr>, <expr><name>PCK_UP</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>k_down</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'\340'</literal></expr>, <expr><name>PCK_DOWN</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>k_backtab</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'\340'</literal></expr>, <expr><name>PCK_SHIFT_TAB</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>k_pagedown</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'\340'</literal></expr>, <expr><name>PCK_PAGEDOWN</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>k_pageup</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'\340'</literal></expr>, <expr><name>PCK_PAGEUP</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>k_f1</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'\340'</literal></expr>, <expr><name>PCK_F1</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>MSDOS_COMPILER</name></expr></cpp:if>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sp</name> <init>= <expr><name>tbuf</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<switch>switch <condition>(<expr><name>key</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OS2</name></expr></cpp:if>




<case>case <expr><name>SK_RIGHT_ARROW</name></expr>:</case>
<expr_stmt><expr><name>s</name> <operator>=</operator> <ternary><condition><expr><name>windowid</name></expr> ?</condition><then> <expr><call><name>ltgetstr</name><argument_list>(<argument><expr><literal type="string">"kr"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>k_right</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SK_LEFT_ARROW</name></expr>:</case>
<expr_stmt><expr><name>s</name> <operator>=</operator> <ternary><condition><expr><name>windowid</name></expr> ?</condition><then> <expr><call><name>ltgetstr</name><argument_list>(<argument><expr><literal type="string">"kl"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>k_left</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SK_UP_ARROW</name></expr>:</case>
<expr_stmt><expr><name>s</name> <operator>=</operator> <ternary><condition><expr><name>windowid</name></expr> ?</condition><then> <expr><call><name>ltgetstr</name><argument_list>(<argument><expr><literal type="string">"ku"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>k_up</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SK_DOWN_ARROW</name></expr>:</case>
<expr_stmt><expr><name>s</name> <operator>=</operator> <ternary><condition><expr><name>windowid</name></expr> ?</condition><then> <expr><call><name>ltgetstr</name><argument_list>(<argument><expr><literal type="string">"kd"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>k_down</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SK_PAGE_UP</name></expr>:</case>
<expr_stmt><expr><name>s</name> <operator>=</operator> <ternary><condition><expr><name>windowid</name></expr> ?</condition><then> <expr><call><name>ltgetstr</name><argument_list>(<argument><expr><literal type="string">"kP"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>k_pageup</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SK_PAGE_DOWN</name></expr>:</case>
<expr_stmt><expr><name>s</name> <operator>=</operator> <ternary><condition><expr><name>windowid</name></expr> ?</condition><then> <expr><call><name>ltgetstr</name><argument_list>(<argument><expr><literal type="string">"kN"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>k_pagedown</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SK_HOME</name></expr>:</case>
<expr_stmt><expr><name>s</name> <operator>=</operator> <ternary><condition><expr><name>windowid</name></expr> ?</condition><then> <expr><call><name>ltgetstr</name><argument_list>(<argument><expr><literal type="string">"kh"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>k_home</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SK_END</name></expr>:</case>
<expr_stmt><expr><name>s</name> <operator>=</operator> <ternary><condition><expr><name>windowid</name></expr> ?</condition><then> <expr><call><name>ltgetstr</name><argument_list>(<argument><expr><literal type="string">"@7"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>k_end</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SK_DELETE</name></expr>:</case>
<expr_stmt><expr><name>s</name> <operator>=</operator> <ternary><condition><expr><name>windowid</name></expr> ?</condition><then> <expr><call><name>ltgetstr</name><argument_list>(<argument><expr><literal type="string">"kD"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>k_delete</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>tbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\177'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>tbuf</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name></expr></cpp:if>
<case>case <expr><name>SK_RIGHT_ARROW</name></expr>:</case>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>k_right</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SK_LEFT_ARROW</name></expr>:</case>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>k_left</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SK_UP_ARROW</name></expr>:</case>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>k_up</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SK_DOWN_ARROW</name></expr>:</case>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>k_down</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SK_PAGE_UP</name></expr>:</case>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>k_pageup</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SK_PAGE_DOWN</name></expr>:</case>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>k_pagedown</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SK_HOME</name></expr>:</case>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>k_home</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SK_END</name></expr>:</case>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>k_end</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SK_DELETE</name></expr>:</case>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>k_delete</name></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name> <operator>||</operator> <name>OS2</name></expr></cpp:if>
<case>case <expr><name>SK_INSERT</name></expr>:</case>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>k_insert</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SK_CTL_LEFT_ARROW</name></expr>:</case>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>k_ctl_left</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SK_CTL_RIGHT_ARROW</name></expr>:</case>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>k_ctl_right</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SK_CTL_BACKSPACE</name></expr>:</case>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>k_ctl_backspace</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SK_CTL_DELETE</name></expr>:</case>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>k_ctl_delete</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SK_F1</name></expr>:</case>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>k_f1</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SK_BACKTAB</name></expr>:</case>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>k_backtab</name></expr>;</expr_stmt>
<break>break;</break>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<case>case <expr><name>SK_RIGHT_ARROW</name></expr>:</case>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>ltgetstr</name><argument_list>(<argument><expr><literal type="string">"kr"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SK_LEFT_ARROW</name></expr>:</case>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>ltgetstr</name><argument_list>(<argument><expr><literal type="string">"kl"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SK_UP_ARROW</name></expr>:</case>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>ltgetstr</name><argument_list>(<argument><expr><literal type="string">"ku"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SK_DOWN_ARROW</name></expr>:</case>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>ltgetstr</name><argument_list>(<argument><expr><literal type="string">"kd"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SK_PAGE_UP</name></expr>:</case>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>ltgetstr</name><argument_list>(<argument><expr><literal type="string">"kP"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SK_PAGE_DOWN</name></expr>:</case>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>ltgetstr</name><argument_list>(<argument><expr><literal type="string">"kN"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SK_HOME</name></expr>:</case>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>ltgetstr</name><argument_list>(<argument><expr><literal type="string">"kh"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SK_END</name></expr>:</case>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>ltgetstr</name><argument_list>(<argument><expr><literal type="string">"@7"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>SK_DELETE</name></expr>:</case>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>ltgetstr</name><argument_list>(<argument><expr><literal type="string">"kD"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>tbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\177'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>tbuf</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>SK_CONTROL_K</name></expr>:</case>
<expr_stmt><expr><name><name>tbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>CONTROL</name><argument_list>(<argument><expr><literal type="char">'K'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>tbuf</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><operator>(</operator><name>s</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>public</name> <name>void</name></type>
<name>get_term</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>termcap_debug</name> <operator>=</operator> <operator>!</operator><call><name>isnullenv</name><argument_list>(<argument><expr><call><name>lgetenv</name><argument_list>(<argument><expr><literal type="string">"LESS_TERMCAP_DEBUG"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name></expr></cpp:if>
<expr_stmt><expr><name>auto_wrap</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ignaw</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>can_goto_line</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>clear_bg</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>MSOFTC</name></expr></cpp:if>
<expr_stmt><expr><name>sy_bg_color</name> <operator>=</operator> <call><name>_getbkcolor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sy_fg_color</name> <operator>=</operator> <call><name>_gettextcolor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_clock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>BORLANDC</name> <operator>||</operator> <name>MSDOS_COMPILER</name><operator>==</operator><name>DJGPPC</name></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>text_info</name></name></type> <name>w</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>gettextinfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sy_bg_color</name> <operator>=</operator> <operator>(</operator><name><name>w</name><operator>.</operator><name>attribute</name></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sy_fg_color</name> <operator>=</operator> <operator>(</operator><name><name>w</name><operator>.</operator><name>attribute</name></name> <operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>;</expr_stmt>
</block_content>}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>WIN32C</name></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>CONSOLE_SCREEN_BUFFER_INFO</name></type> <name>scr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>con_out_save</name> <operator>=</operator> <name>con_out</name> <operator>=</operator> <call><name>GetStdHandle</name><argument_list>(<argument><expr><name>STD_OUTPUT_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>SET_BINARY</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetConsoleMode</name><argument_list>(<argument><expr><name>con_out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>init_output_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetConsoleScreenBufferInfo</name><argument_list>(<argument><expr><name>con_out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>curr_attr</name> <operator>=</operator> <name><name>scr</name><operator>.</operator><name>wAttributes</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>sy_bg_color</name> <operator>=</operator> <operator>(</operator><name>curr_attr</name> <operator>&amp;</operator> <name>BG_COLORS</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sy_fg_color</name> <operator>=</operator> <name>curr_attr</name> <operator>&amp;</operator> <name>FG_COLORS</name></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>nm_fg_color</name> <operator>=</operator> <name>sy_fg_color</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nm_bg_color</name> <operator>=</operator> <name>sy_bg_color</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bo_fg_color</name> <operator>=</operator> <literal type="number">11</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bo_bg_color</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ul_fg_color</name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ul_bg_color</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>so_fg_color</name> <operator>=</operator> <literal type="number">15</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>so_bg_color</name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bl_fg_color</name> <operator>=</operator> <literal type="number">15</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bl_bg_color</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sgr_mode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>




<expr_stmt><expr><call><name>scrsize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pos_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>t1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>t2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>term</name></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>termbuf</name><index>[<expr><name>TERMBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>sbuf</name><index>[<expr><name>TERMSBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OS2</name></expr></cpp:if>



<expr_stmt><expr><name>sp</name> <operator>=</operator> <call><name>lgetenv</name><argument_list>(<argument><expr><literal type="string">"TERMCAP"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isnullenv</name><argument_list>(<argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>termcap</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>sp</name> <operator>=</operator> <call><name>homefile</name><argument_list>(<argument><expr><literal type="string">"termcap.dat"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>termcap</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>ecalloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>sp</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">9</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>termcap</name></expr></argument>, <argument><expr><literal type="string">"TERMCAP=%s"</literal></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putenv</name><argument_list>(<argument><expr><name>termcap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name>term</name> <operator>=</operator> <call><name>lgetenv</name><argument_list>(<argument><expr><literal type="string">"TERM"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>term</name> <operator>=</operator> <name>DEFAULT_TERM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>hardcopy</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>tgetent</name><argument_list>(<argument><expr><name>termbuf</name></expr></argument>, <argument><expr><name>term</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TGETENT_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hardcopy</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ltgetflag</name><argument_list>(<argument><expr><literal type="string">"hc"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>hardcopy</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>




<expr_stmt><expr><call><name>scrsize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pos_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>auto_wrap</name> <operator>=</operator> <call><name>ltgetflag</name><argument_list>(<argument><expr><literal type="string">"am"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ignaw</name> <operator>=</operator> <call><name>ltgetflag</name><argument_list>(<argument><expr><literal type="string">"xn"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>above_mem</name> <operator>=</operator> <call><name>ltgetflag</name><argument_list>(<argument><expr><literal type="string">"da"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>below_mem</name> <operator>=</operator> <call><name>ltgetflag</name><argument_list>(<argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>clear_bg</name> <operator>=</operator> <call><name>ltgetflag</name><argument_list>(<argument><expr><literal type="string">"ut"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<if_stmt><if>if <condition>(<expr><operator>(</operator><name>so_s_width</name> <operator>=</operator> <call><name>ltgetnum</name><argument_list>(<argument><expr><literal type="string">"sg"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>so_s_width</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>so_e_width</name> <operator>=</operator> <name>so_s_width</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bo_s_width</name> <operator>=</operator> <name>bo_e_width</name> <operator>=</operator> <name>so_s_width</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ul_s_width</name> <operator>=</operator> <name>ul_e_width</name> <operator>=</operator> <name>so_s_width</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bl_s_width</name> <operator>=</operator> <name>bl_e_width</name> <operator>=</operator> <name>so_s_width</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HILITE_SEARCH</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>so_s_width</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>so_e_width</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>







<expr_stmt><expr><name>hilite_search</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<expr_stmt><expr><name>sp</name> <operator>=</operator> <name>sbuf</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_OSPEED</name></expr></cpp:if>
<expr_stmt><expr><name>sc_pad</name> <operator>=</operator> <call><name>ltgetstr</name><argument_list>(<argument><expr><literal type="string">"pc"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sc_pad</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>PC</name> <operator>=</operator> <operator>*</operator><name>sc_pad</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>sc_s_keypad</name> <operator>=</operator> <call><name>ltgetstr</name><argument_list>(<argument><expr><literal type="string">"ks"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sc_s_keypad</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sc_s_keypad</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>sc_e_keypad</name> <operator>=</operator> <call><name>ltgetstr</name><argument_list>(<argument><expr><literal type="string">"ke"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sc_e_keypad</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sc_e_keypad</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>kent</name> <operator>=</operator> <call><name>ltgetstr</name><argument_list>(<argument><expr><literal type="string">"@8"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sc_s_mousecap</name> <operator>=</operator> <call><name>ltgetstr</name><argument_list>(<argument><expr><literal type="string">"MOUSE_START"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sc_s_mousecap</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sc_s_mousecap</name> <operator>=</operator> <name>ESCS</name> <literal type="string">"[?1000h"</literal> <name>ESCS</name> <literal type="string">"[?1006h"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>sc_e_mousecap</name> <operator>=</operator> <call><name>ltgetstr</name><argument_list>(<argument><expr><literal type="string">"MOUSE_END"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sc_e_mousecap</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sc_e_mousecap</name> <operator>=</operator> <name>ESCS</name> <literal type="string">"[?1006l"</literal> <name>ESCS</name> <literal type="string">"[?1000l"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sc_init</name> <operator>=</operator> <call><name>ltgetstr</name><argument_list>(<argument><expr><literal type="string">"ti"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sc_init</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sc_init</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sc_deinit</name><operator>=</operator> <call><name>ltgetstr</name><argument_list>(<argument><expr><literal type="string">"te"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sc_deinit</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sc_deinit</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sc_eol_clear</name> <operator>=</operator> <call><name>ltgetstr</name><argument_list>(<argument><expr><literal type="string">"ce"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sc_eol_clear</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>sc_eol_clear</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>missing_cap</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sc_eol_clear</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sc_eos_clear</name> <operator>=</operator> <call><name>ltgetstr</name><argument_list>(<argument><expr><literal type="string">"cd"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>below_mem</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>sc_eos_clear</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>sc_eos_clear</name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>missing_cap</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sc_eos_clear</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sc_clear</name> <operator>=</operator> <call><name>ltgetstr</name><argument_list>(<argument><expr><literal type="string">"cl"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sc_clear</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>sc_clear</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>missing_cap</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>sc_clear</name> <operator>=</operator> <literal type="string">"\n\n"</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sc_move</name> <operator>=</operator> <call><name>ltgetstr</name><argument_list>(<argument><expr><literal type="string">"cm"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sc_move</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>sc_move</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition>
<block>{<block_content>





<expr_stmt><expr><name>sc_move</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>can_goto_line</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>can_goto_line</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>tmodes</name><argument_list>(<argument><expr><literal type="string">"so"</literal></expr></argument>, <argument><expr><literal type="string">"se"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sc_s_in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sc_s_out</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tmodes</name><argument_list>(<argument><expr><literal type="string">"us"</literal></expr></argument>, <argument><expr><literal type="string">"ue"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sc_u_in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sc_u_out</name></expr></argument>, <argument><expr><name>sc_s_in</name></expr></argument>, <argument><expr><name>sc_s_out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tmodes</name><argument_list>(<argument><expr><literal type="string">"md"</literal></expr></argument>, <argument><expr><literal type="string">"me"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sc_b_in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sc_b_out</name></expr></argument>, <argument><expr><name>sc_s_in</name></expr></argument>, <argument><expr><name>sc_s_out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tmodes</name><argument_list>(<argument><expr><literal type="string">"mb"</literal></expr></argument>, <argument><expr><literal type="string">"me"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sc_bl_in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sc_bl_out</name></expr></argument>, <argument><expr><name>sc_s_in</name></expr></argument>, <argument><expr><name>sc_s_out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sc_visual_bell</name> <operator>=</operator> <call><name>ltgetstr</name><argument_list>(<argument><expr><literal type="string">"vb"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sc_visual_bell</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sc_visual_bell</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ltgetflag</name><argument_list>(<argument><expr><literal type="string">"bs"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sc_backspace</name> <operator>=</operator> <literal type="string">"\b"</literal></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>sc_backspace</name> <operator>=</operator> <call><name>ltgetstr</name><argument_list>(<argument><expr><literal type="string">"bc"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sc_backspace</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>sc_backspace</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sc_backspace</name> <operator>=</operator> <literal type="string">"\b"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>





<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>ltgetstr</name><argument_list>(<argument><expr><literal type="string">"ho"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>t1</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>sc_move</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><call><name>tgoto</name><argument_list>(<argument><expr><name>sc_move</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <name>sp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sp</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>sp</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>sc_home</name> <operator>=</operator> <call><name>cheaper</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><literal type="string">"|\b^"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>ltgetstr</name><argument_list>(<argument><expr><literal type="string">"ll"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>t1</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>sc_move</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>sp</name></expr></argument>, <argument><expr><call><name>tgoto</name><argument_list>(<argument><expr><name>sc_move</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sc_height</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <name>sp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sp</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>sp</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>sc_lower_left</name> <operator>=</operator> <call><name>cheaper</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><literal type="string">"\r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>sc_return</name> <operator>=</operator> <call><name>ltgetstr</name><argument_list>(<argument><expr><literal type="string">"cr"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sc_return</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sc_return</name> <operator>=</operator> <literal type="string">"\r"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>





<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>ltgetstr</name><argument_list>(<argument><expr><literal type="string">"al"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>t1</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <call><name>ltgetstr</name><argument_list>(<argument><expr><literal type="string">"sr"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>t2</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OS2</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>t1</name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>t2</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sc_addline</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
if <condition>(<expr><name>above_mem</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sc_addline</name> <operator>=</operator> <name>t1</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>sc_addline</name> <operator>=</operator> <call><name>cheaper</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>sc_addline</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><name>no_back_scroll</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>MSDOS_COMPILER</name></expr></cpp:if>







<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>costcount</name></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>inc_costcount</name><parameter_list>(<parameter><decl><type><name>c</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<block>{<block_content>
<expr_stmt><expr><name>costcount</name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>c</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cost</name><parameter_list>(<parameter><decl><type><name>t</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
<block>{<block_content>
<expr_stmt><expr><name>costcount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tputs</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>sc_height</name></expr></argument>, <argument><expr><name>inc_costcount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>costcount</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>cheaper</name><parameter_list>(<parameter><decl><type><name>t1</name></type></decl></parameter>, <parameter><decl><type><name>t2</name></type></decl></parameter>, <parameter><decl><type><name>def</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>t1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>t2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>def</name></decl>;</decl_stmt>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>t1</name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>t2</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>missing_cap</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>def</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>t1</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>t2</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>t2</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>t1</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>cost</name><argument_list>(<argument><expr><name>t1</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>cost</name><argument_list>(<argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>t1</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>t2</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>tmodes</name><parameter_list>(<parameter><decl><type><name>incap</name></type></decl></parameter>, <parameter><decl><type><name>outcap</name></type></decl></parameter>, <parameter><decl><type><name>instr</name></type></decl></parameter>, <parameter><decl><type><name>outstr</name></type></decl></parameter>, <parameter><decl><type><name>def_instr</name></type></decl></parameter>, <parameter><decl><type><name>def_outstr</name></type></decl></parameter>, <parameter><decl><type><name>spp</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>incap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>outcap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>instr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>outstr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>def_instr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>def_outstr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>spp</name></decl>;</decl_stmt>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>instr</name> <operator>=</operator> <call><name>ltgetstr</name><argument_list>(<argument><expr><name>incap</name></expr></argument>, <argument><expr><name>spp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>instr</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>instr</name> <operator>=</operator> <name>def_instr</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>outstr</name> <operator>=</operator> <name>def_outstr</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>outstr</name> <operator>=</operator> <call><name>ltgetstr</name><argument_list>(<argument><expr><name>outcap</name></expr></argument>, <argument><expr><name>spp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>outstr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>outstr</name> <operator>=</operator> <call><name>ltgetstr</name><argument_list>(<argument><expr><literal type="string">"me"</literal></expr></argument>, <argument><expr><name>spp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>outstr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>outstr</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>WIN32C</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>_settextposition</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>COORD</name></type> <name>cpos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CONSOLE_SCREEN_BUFFER_INFO</name></type> <name>csbi</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetConsoleScreenBufferInfo</name><argument_list>(<argument><expr><name>con_out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>csbi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cpos</name><operator>.</operator><name>X</name></name> <operator>=</operator> <name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Left</name></name> <operator>+</operator> <operator>(</operator><name>col</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cpos</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Top</name></name> <operator>+</operator> <operator>(</operator><name>row</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetConsoleCursorPosition</name><argument_list>(<argument><expr><name>con_out</name></expr></argument>, <argument><expr><name>cpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>initcolor</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>BORLANDC</name> <operator>||</operator> <name>MSDOS_COMPILER</name><operator>==</operator><name>DJGPPC</name></expr></cpp:if>
<expr_stmt><expr><call><name>intensevideo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>SETCOLORS</name><argument_list>(<argument><expr><name>nm_fg_color</name></expr></argument>, <argument><expr><name>nm_bg_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>




char *blanks;
int row;
int col;




SETCOLORS(nm_fg_color, nm_bg_color);
blanks = (char *) ecalloc(width+1, sizeof(char));
for (col = 0; col &lt; sc_width; col++)
blanks[col] = ' ';
blanks[sc_width] = '\0';
for (row = 0; row &lt; sc_height; row++)
_outtext(blanks);
free(blanks);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>WIN32C</name></expr></cpp:if>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>win32_init_vt_term</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DWORD</name></type> <name>output_mode</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>vt_enabled</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>vt_enabled</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>con_out</name> <operator>==</operator> <name>con_out_ours</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>GetConsoleMode</name><argument_list>(<argument><expr><name>con_out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vt_enabled</name> <operator>=</operator> <call><name>SetConsoleMode</name><argument_list>(<argument><expr><name>con_out</name></expr></argument>,
<argument><expr><name>output_mode</name> <operator>|</operator> <name>ENABLE_VIRTUAL_TERMINAL_PROCESSING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>vt_enabled</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>auto_wrap</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ignaw</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>win32_deinit_vt_term</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>vt_enabled</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>con_out</name> <operator>==</operator> <name>con_out_save</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SetConsoleMode</name><argument_list>(<argument><expr><name>con_out</name></expr></argument>, <argument><expr><name>init_output_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>win32_init_term</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CONSOLE_SCREEN_BUFFER_INFO</name></type> <name>scr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>COORD</name></type> <name>size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>con_out_save</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>GetConsoleScreenBufferInfo</name><argument_list>(<argument><expr><name>con_out_save</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>con_out_ours</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition>
<block>{<block_content>




<expr_stmt><expr><name>con_out_ours</name> <operator>=</operator> <call><name>CreateConsoleScreenBuffer</name><argument_list>(
<argument><expr><name>GENERIC_WRITE</name> <operator>|</operator> <name>GENERIC_READ</name></expr></argument>,
<argument><expr><name>FILE_SHARE_WRITE</name> <operator>|</operator> <name>FILE_SHARE_READ</name></expr></argument>,
<argument><expr><operator>(</operator><name>LPSECURITY_ATTRIBUTES</name><operator>)</operator> <name>NULL</name></expr></argument>,
<argument><expr><name>CONSOLE_TEXTMODE_BUFFER</name></expr></argument>,
<argument><expr><operator>(</operator><name>LPVOID</name><operator>)</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>size</name><operator>.</operator><name>X</name></name> <operator>=</operator> <name><name>scr</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Right</name></name> <operator>-</operator> <name><name>scr</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Left</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>size</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <name><name>scr</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Bottom</name></name> <operator>-</operator> <name><name>scr</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Top</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetConsoleScreenBufferSize</name><argument_list>(<argument><expr><name>con_out_ours</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetConsoleActiveScreenBuffer</name><argument_list>(<argument><expr><name>con_out_ours</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>con_out</name> <operator>=</operator> <name>con_out_ours</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>win32_deinit_term</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>con_out_save</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>quitting</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>CloseHandle</name><argument_list>(<argument><expr><name>con_out_ours</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>SetConsoleActiveScreenBuffer</name><argument_list>(<argument><expr><name>con_out_save</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>con_out</name> <operator>=</operator> <name>con_out_save</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>MSDOS_COMPILER</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type>
<name>do_tputs</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>affcnt</name></expr></argument>, <argument><expr><name>f_putc</name></expr></argument>)</argument_list>
<name>char</name> <modifier>*</modifier><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>affcnt</name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>f_putc</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LESSTEST</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>ttyin_name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putstr</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>tputs</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>affcnt</name></expr></argument>, <argument><expr><name>f_putc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block>





<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type>
<name>ltputs</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>affcnt</name></expr></argument>, <argument><expr><name>f_putc</name></expr></argument>)</argument_list>
<name>char</name> <modifier>*</modifier><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>affcnt</name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>f_putc</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<block>{<block_content>
<while>while <condition>(<expr><name>str</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>str</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_STRSTR</name></expr></cpp:if>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>obrac</name> <init>= <expr><call><name>strstr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"$&lt;"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>obrac</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>str2</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>slen</name> <init>= <expr><name>obrac</name> <operator>-</operator> <name>str</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>slen</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>str2</name></expr></argument>)</argument_list></sizeof></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>delay</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>str2</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str2</name><index>[<expr><name>slen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>do_tputs</name><argument_list>(<argument><expr><name>str2</name></expr></argument>, <argument><expr><name>affcnt</name></expr></argument>, <argument><expr><name>f_putc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>+=</operator> <name>slen</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>delay</name> <operator>=</operator> <call><name>lstrtoi</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>delay</name> <operator>*=</operator> <name>affcnt</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sleep_ms</name><argument_list>(<argument><expr><name>delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>str</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>do_tputs</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>affcnt</name></expr></argument>, <argument><expr><name>f_putc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></while>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function><type><name>public</name> <name>void</name></type>
<name>init_mouse</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>MSDOS_COMPILER</name></expr></cpp:if>
<expr_stmt><expr><call><name>ltputs</name><argument_list>(<argument><expr><name>sc_s_mousecap</name></expr></argument>, <argument><expr><name>sc_height</name></expr></argument>, <argument><expr><name>putchr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>WIN32C</name></expr></cpp:if>
<expr_stmt><expr><call><name>SetConsoleMode</name><argument_list>(<argument><expr><name>tty</name></expr></argument>, <argument><expr><name>ENABLE_PROCESSED_INPUT</name> <operator>|</operator> <name>ENABLE_MOUSE_INPUT</name>
<operator>|</operator> <name>ENABLE_EXTENDED_FLAGS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>





<function><type><name>public</name> <name>void</name></type>
<name>deinit_mouse</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>MSDOS_COMPILER</name></expr></cpp:if>
<expr_stmt><expr><call><name>ltputs</name><argument_list>(<argument><expr><name>sc_e_mousecap</name></expr></argument>, <argument><expr><name>sc_height</name></expr></argument>, <argument><expr><name>putchr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>WIN32C</name></expr></cpp:if>
<expr_stmt><expr><call><name>SetConsoleMode</name><argument_list>(<argument><expr><name>tty</name></expr></argument>, <argument><expr><name>ENABLE_PROCESSED_INPUT</name> <operator>|</operator> <name>ENABLE_EXTENDED_FLAGS</name>
<operator>|</operator> <operator>(</operator><name>console_mode</name> <operator>&amp;</operator> <name>ENABLE_QUICK_EDIT_MODE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>




<function><type><name>public</name> <name>void</name></type>
<name>init</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>clear_bot_if_needed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>MSDOS_COMPILER</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>quit_if_one_screen</name> <operator>&amp;&amp;</operator> <name>one_screen</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>no_init</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ltputs</name><argument_list>(<argument><expr><name>sc_init</name></expr></argument>, <argument><expr><name>sc_height</name></expr></argument>, <argument><expr><name>putchr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>no_keypad</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ltputs</name><argument_list>(<argument><expr><name>sc_s_keypad</name></expr></argument>, <argument><expr><name>sc_height</name></expr></argument>, <argument><expr><name>putchr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mousecap</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>init_mouse</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>init_done</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>top_scroll</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>







<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sc_height</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putchr</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>line_left</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>WIN32C</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>quit_if_one_screen</name> <operator>&amp;&amp;</operator> <name>one_screen</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>no_init</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>win32_init_term</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mousecap</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>init_mouse</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>win32_init_vt_term</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>init_done</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>initcolor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>




<function><type><name>public</name> <name>void</name></type>
<name>deinit</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>init_done</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>MSDOS_COMPILER</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>quit_if_one_screen</name> <operator>&amp;&amp;</operator> <name>one_screen</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mousecap</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>deinit_mouse</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>no_keypad</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ltputs</name><argument_list>(<argument><expr><name>sc_e_keypad</name></expr></argument>, <argument><expr><name>sc_height</name></expr></argument>, <argument><expr><name>putchr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>no_init</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ltputs</name><argument_list>(<argument><expr><name>sc_deinit</name></expr></argument>, <argument><expr><name>sc_height</name></expr></argument>, <argument><expr><name>putchr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>SETCOLORS</name><argument_list>(<argument><expr><name>sy_fg_color</name></expr></argument>, <argument><expr><name>sy_bg_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>WIN32C</name></expr></cpp:if>
<expr_stmt><expr><call><name>win32_deinit_vt_term</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>quit_if_one_screen</name> <operator>&amp;&amp;</operator> <name>one_screen</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mousecap</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>deinit_mouse</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>no_init</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>win32_deinit_term</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>clreol</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>init_done</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>public</name> <name>int</name></type>
<name>interactive</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>is_tty</name> <operator>&amp;&amp;</operator> <name>init_done</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>assert_interactive</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>interactive</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></function>




<function><type><name>public</name> <name>void</name></type>
<name>home</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert_interactive</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>MSDOS_COMPILER</name></expr></cpp:if>
<expr_stmt><expr><call><name>ltputs</name><argument_list>(<argument><expr><name>sc_home</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>putchr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_settextposition</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>





<function><type><name>public</name> <name>void</name></type>
<name>add_line</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert_interactive</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>MSDOS_COMPILER</name></expr></cpp:if>
<expr_stmt><expr><call><name>ltputs</name><argument_list>(<argument><expr><name>sc_addline</name></expr></argument>, <argument><expr><name>sc_height</name></expr></argument>, <argument><expr><name>putchr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>MSOFTC</name></expr></cpp:if>
<expr_stmt><expr><call><name>_scrolltextwindow</name><argument_list>(<argument><expr><name>_GSCROLLDOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_settextposition</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>BORLANDC</name> <operator>||</operator> <name>MSDOS_COMPILER</name><operator>==</operator><name>DJGPPC</name></expr></cpp:if>
<expr_stmt><expr><call><name>movetext</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>sc_width</name></expr></argument>,<argument><expr><name>sc_height</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gotoxy</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clreol</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>WIN32C</name></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>CHAR_INFO</name></type> <name>fillchar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SMALL_RECT</name></type> <name>rcSrc</name></decl>, <decl><type ref="prev"/><name>rcClip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>COORD</name></type> <name>new_org</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CONSOLE_SCREEN_BUFFER_INFO</name></type> <name>csbi</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetConsoleScreenBufferInfo</name><argument_list>(<argument><expr><name>con_out</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>csbi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>rcClip</name><operator>.</operator><name>Left</name></name> <operator>=</operator> <name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Left</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rcClip</name><operator>.</operator><name>Top</name></name> <operator>=</operator> <name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Top</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rcClip</name><operator>.</operator><name>Right</name></name> <operator>=</operator> <name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Right</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rcClip</name><operator>.</operator><name>Bottom</name></name> <operator>=</operator> <name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Bottom</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name>rcSrc</name> <operator>=</operator> <name>rcClip</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rcSrc</name><operator>.</operator><name>Bottom</name></name><operator>--</operator></expr>;</expr_stmt>


<expr_stmt><expr><name><name>new_org</name><operator>.</operator><name>X</name></name> <operator>=</operator> <name><name>rcSrc</name><operator>.</operator><name>Left</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_org</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <name><name>rcSrc</name><operator>.</operator><name>Top</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>fillchar</name><operator>.</operator><name>Char</name><operator>.</operator><name>AsciiChar</name></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>curr_attr</name> <operator>=</operator> <call><name>MAKEATTR</name><argument_list>(<argument><expr><name>nm_fg_color</name></expr></argument>, <argument><expr><name>nm_bg_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fillchar</name><operator>.</operator><name>Attributes</name></name> <operator>=</operator> <name>curr_attr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ScrollConsoleScreenBuffer</name><argument_list>(<argument><expr><name>con_out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rcSrc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rcClip</name></expr></argument>, <argument><expr><name>new_org</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fillchar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_settextposition</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>





public void
remove_top(n)
int n;
{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>WIN32C</name></expr></cpp:if>
SMALL_RECT rcSrc, rcClip;
CHAR_INFO fillchar;
COORD new_org;
CONSOLE_SCREEN_BUFFER_INFO csbi;

if (n &gt;= sc_height - 1)
{
clear();
home();
return;
}

flush();

GetConsoleScreenBufferInfo(con_out, &amp;csbi);


rcSrc.Left = csbi.srWindow.Left;
rcSrc.Top = csbi.srWindow.Top + n;
rcSrc.Right = csbi.srWindow.Right;
rcSrc.Bottom = csbi.srWindow.Bottom;


rcClip.Left = rcSrc.Left;
rcClip.Top = csbi.srWindow.Top;
rcClip.Right = rcSrc.Right;
rcClip.Bottom = rcSrc.Bottom ;


new_org.X = rcSrc.Left;
new_org.Y = rcSrc.Top - n;


fillchar.Char.AsciiChar = ' ';
curr_attr = MAKEATTR(nm_fg_color, nm_bg_color);
fillchar.Attributes = curr_attr;

ScrollConsoleScreenBuffer(con_out, &amp;rcSrc, &amp;rcClip, new_org, &amp;fillchar);


goto_line(sc_height - n - 1);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>WIN32C</name></expr></cpp:if>



<function><type><specifier>static</specifier> <name>void</name></type>
<name>win32_clear</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>








<decl_stmt><decl><type><name>COORD</name></type> <name>topleft</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>nchars</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>winsz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CONSOLE_SCREEN_BUFFER_INFO</name></type> <name>csbi</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>GetConsoleScreenBufferInfo</name><argument_list>(<argument><expr><name>con_out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>csbi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>winsz</name> <operator>=</operator> <name><name>csbi</name><operator>.</operator><name>dwSize</name><operator>.</operator><name>X</name></name> <operator>*</operator> <operator>(</operator><name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Bottom</name></name> <operator>-</operator> <name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Top</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>topleft</name><operator>.</operator><name>X</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>topleft</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Top</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>curr_attr</name> <operator>=</operator> <call><name>MAKEATTR</name><argument_list>(<argument><expr><name>nm_fg_color</name></expr></argument>, <argument><expr><name>nm_bg_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FillConsoleOutputCharacter</name><argument_list>(<argument><expr><name>con_out</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>winsz</name></expr></argument>, <argument><expr><name>topleft</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nchars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FillConsoleOutputAttribute</name><argument_list>(<argument><expr><name>con_out</name></expr></argument>, <argument><expr><name>curr_attr</name></expr></argument>, <argument><expr><name>winsz</name></expr></argument>, <argument><expr><name>topleft</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nchars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>public</name> <name>void</name></type>
<name>win32_scroll_up</name><parameter_list>(<parameter><decl><type><name>n</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>SMALL_RECT</name></type> <name>rcSrc</name></decl>, <decl><type ref="prev"/><name>rcClip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CHAR_INFO</name></type> <name>fillchar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>COORD</name></type> <name>topleft</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>COORD</name></type> <name>new_org</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>nchars</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CONSOLE_SCREEN_BUFFER_INFO</name></type> <name>csbi</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <name>sc_height</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>win32_clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_settextposition</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>GetConsoleScreenBufferInfo</name><argument_list>(<argument><expr><name>con_out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>csbi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rcSrc</name><operator>.</operator><name>Left</name></name> <operator>=</operator> <name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Left</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rcSrc</name><operator>.</operator><name>Top</name></name> <operator>=</operator> <name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Top</name></name> <operator>+</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rcSrc</name><operator>.</operator><name>Right</name></name> <operator>=</operator> <name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Right</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rcSrc</name><operator>.</operator><name>Bottom</name></name> <operator>=</operator> <name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Bottom</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>rcClip</name><operator>.</operator><name>Left</name></name> <operator>=</operator> <name><name>rcSrc</name><operator>.</operator><name>Left</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rcClip</name><operator>.</operator><name>Top</name></name> <operator>=</operator> <name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Top</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rcClip</name><operator>.</operator><name>Right</name></name> <operator>=</operator> <name><name>rcSrc</name><operator>.</operator><name>Right</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rcClip</name><operator>.</operator><name>Bottom</name></name> <operator>=</operator> <name><name>rcSrc</name><operator>.</operator><name>Bottom</name></name></expr> ;</expr_stmt>


<expr_stmt><expr><name><name>new_org</name><operator>.</operator><name>X</name></name> <operator>=</operator> <name><name>rcSrc</name><operator>.</operator><name>Left</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_org</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <name><name>rcClip</name><operator>.</operator><name>Top</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>fillchar</name><operator>.</operator><name>Char</name><operator>.</operator><name>AsciiChar</name></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fillchar</name><operator>.</operator><name>Attributes</name></name> <operator>=</operator> <call><name>MAKEATTR</name><argument_list>(<argument><expr><name>nm_fg_color</name></expr></argument>, <argument><expr><name>nm_bg_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>SetConsoleTextAttribute</name><argument_list>(<argument><expr><name>con_out</name></expr></argument>, <argument><expr><name><name>fillchar</name><operator>.</operator><name>Attributes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ScrollConsoleScreenBuffer</name><argument_list>(<argument><expr><name>con_out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rcSrc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rcClip</name></expr></argument>, <argument><expr><name>new_org</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fillchar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>topleft</name><operator>.</operator><name>X</name></name> <operator>=</operator> <name><name>csbi</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>X</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>topleft</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <name><name>rcSrc</name><operator>.</operator><name>Bottom</name></name> <operator>-</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <operator>(</operator><name>n</name> <operator>*</operator> <name><name>csbi</name><operator>.</operator><name>dwSize</name><operator>.</operator><name>X</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>rcSrc</name><operator>.</operator><name>Right</name></name> <operator>-</operator> <name><name>topleft</name><operator>.</operator><name>X</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FillConsoleOutputCharacter</name><argument_list>(<argument><expr><name>con_out</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>topleft</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>nchars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FillConsoleOutputAttribute</name><argument_list>(<argument><expr><name>con_out</name></expr></argument>, <argument><expr><name><name>fillchar</name><operator>.</operator><name>Attributes</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>topleft</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>nchars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetConsoleTextAttribute</name><argument_list>(<argument><expr><name>con_out</name></expr></argument>, <argument><expr><name>curr_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>csbi</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>Y</name></name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetConsoleCursorPosition</name><argument_list>(<argument><expr><name>con_out</name></expr></argument>, <argument><expr><name><name>csbi</name><operator>.</operator><name>dwCursorPosition</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><name>public</name> <name>void</name></type>
<name>lower_left</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert_interactive</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>MSDOS_COMPILER</name></expr></cpp:if>
<expr_stmt><expr><call><name>ltputs</name><argument_list>(<argument><expr><name>sc_lower_left</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>putchr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_settextposition</name><argument_list>(<argument><expr><name>sc_height</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>




<function><type><name>public</name> <name>void</name></type>
<name>line_left</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert_interactive</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>MSDOS_COMPILER</name></expr></cpp:if>
<expr_stmt><expr><call><name>ltputs</name><argument_list>(<argument><expr><name>sc_return</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>putchr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>WIN32C</name></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>CONSOLE_SCREEN_BUFFER_INFO</name></type> <name>scr</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GetConsoleScreenBufferInfo</name><argument_list>(<argument><expr><name>con_out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>row</name> <operator>=</operator> <name><name>scr</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>Y</name></name> <operator>-</operator> <name><name>scr</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Top</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>BORLANDC</name> <operator>||</operator> <name>MSDOS_COMPILER</name><operator>==</operator><name>DJGPPC</name></expr></cpp:if>
<expr_stmt><expr><name>row</name> <operator>=</operator> <call><name>wherey</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rccoord</name></name></type> <name>tpos</name> <init>= <expr><call><name>_gettextposition</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>row</name> <operator>=</operator> <name><name>tpos</name><operator>.</operator><name>row</name></name></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>_settextposition</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>





<function><type><name>public</name> <name>void</name></type>
<name>check_winch</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>WIN32C</name></expr></cpp:if>
<decl_stmt><decl><type><name>CONSOLE_SCREEN_BUFFER_INFO</name></type> <name>scr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>COORD</name></type> <name>size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>con_out</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetConsoleScreenBufferInfo</name><argument_list>(<argument><expr><name>con_out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>size</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <name><name>scr</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Bottom</name></name> <operator>-</operator> <name><name>scr</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Top</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>size</name><operator>.</operator><name>X</name></name> <operator>=</operator> <name><name>scr</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Right</name></name> <operator>-</operator> <name><name>scr</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Left</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>size</name><operator>.</operator><name>Y</name></name> <operator>!=</operator> <name>sc_height</name> <operator>||</operator> <name><name>size</name><operator>.</operator><name>X</name></name> <operator>!=</operator> <name>sc_width</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>sc_height</name> <operator>=</operator> <name><name>size</name><operator>.</operator><name>Y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>sc_width</name> <operator>=</operator> <name><name>size</name><operator>.</operator><name>X</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>no_init</name> <operator>&amp;&amp;</operator> <name>con_out_ours</name> <operator>==</operator> <name>con_out</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SetConsoleScreenBufferSize</name><argument_list>(<argument><expr><name>con_out</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>pos_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>wscroll</name> <operator>=</operator> <operator>(</operator><name>sc_height</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>screen_trashed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>




<function><type><name>public</name> <name>void</name></type>
<name>goto_line</name><parameter_list>(<parameter><decl><type><name>sindex</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>sindex</name></decl>;</decl_stmt>
<block>{<block_content>
<expr_stmt><expr><call><name>assert_interactive</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>MSDOS_COMPILER</name></expr></cpp:if>
<expr_stmt><expr><call><name>ltputs</name><argument_list>(<argument><expr><call><name>tgoto</name><argument_list>(<argument><expr><name>sc_move</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sindex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>putchr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_settextposition</name><argument_list>(<argument><expr><name>sindex</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>MSOFTC</name> <operator>||</operator> <name>MSDOS_COMPILER</name><operator>==</operator><name>BORLANDC</name></expr></cpp:if>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>create_flash</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>MSOFTC</name></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>videoconfig</name></name></type> <name>w</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>blanks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>, <decl><type ref="prev"/><name>col</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_getvideoconfig</name><argument_list>(<argument><expr><operator>&amp;</operator><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>videopages</name> <operator>=</operator> <name><name>w</name><operator>.</operator><name>numvideopages</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>videopages</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>at_enter</name><argument_list>(<argument><expr><name>AT_STANDOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>at_exit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else
<block>{<block_content>
<expr_stmt><expr><call><name>_setactivepage</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>at_enter</name><argument_list>(<argument><expr><name>AT_STANDOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>blanks</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>ecalloc</name><argument_list>(<argument><expr><name><name>w</name><operator>.</operator><name>numtextcols</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name><name>w</name><operator>.</operator><name>numtextcols</name></name></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>blanks</name><index>[<expr><name>col</name></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>row</name> <operator>=</operator> <name><name>w</name><operator>.</operator><name>numtextrows</name></name></expr>;</init> <condition><expr><name>row</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>row</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_outmem</name><argument_list>(<argument><expr><name>blanks</name></expr></argument>, <argument><expr><name><name>w</name><operator>.</operator><name>numtextcols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>_setactivepage</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_setvisualpage</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>blanks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>at_exit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>BORLANDC</name></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>whitescreen</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>short</name> <operator>*</operator><operator>)</operator>
<call><name>malloc</name><argument_list>(<argument><expr><name>sc_width</name> <operator>*</operator> <name>sc_height</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>whitescreen</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>sc_width</name> <operator>*</operator> <name>sc_height</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>whitescreen</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x7020</literal></expr>;</expr_stmt></block_content></block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>flash_created</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><name>public</name> <name>void</name></type>
<name>vbell</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>MSDOS_COMPILER</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>sc_visual_bell</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ltputs</name><argument_list>(<argument><expr><name>sc_visual_bell</name></expr></argument>, <argument><expr><name>sc_height</name></expr></argument>, <argument><expr><name>putchr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>DJGPPC</name></expr></cpp:if>
<expr_stmt><expr><call><name>ScreenVisualBell</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>MSOFTC</name></expr></cpp:if>




<if_stmt><if>if <condition>(<expr><operator>!</operator><name>flash_created</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>create_flash</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>videopages</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>_setvisualpage</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>delay</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_setvisualpage</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>BORLANDC</name></expr></cpp:if>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>currscreen</name></decl>;</decl_stmt>






<if_stmt><if>if <condition>(<expr><operator>!</operator><name>flash_created</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>create_flash</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>whitescreen</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>currscreen</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>short</name> <operator>*</operator><operator>)</operator>
<call><name>malloc</name><argument_list>(<argument><expr><name>sc_width</name> <operator>*</operator> <name>sc_height</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>currscreen</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>gettext</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>sc_width</name></expr></argument>, <argument><expr><name>sc_height</name></expr></argument>, <argument><expr><name>currscreen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>puttext</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>sc_width</name></expr></argument>, <argument><expr><name>sc_height</name></expr></argument>, <argument><expr><name>whitescreen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>delay</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>puttext</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>sc_width</name></expr></argument>, <argument><expr><name>sc_height</name></expr></argument>, <argument><expr><name>currscreen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>currscreen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>WIN32C</name></expr></cpp:if>

<expr_stmt><expr><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>repaint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>beep</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>MSDOS_COMPILER</name></expr></cpp:if>
<expr_stmt><expr><call><name>putchr</name><argument_list>(<argument><expr><call><name>CONTROL</name><argument_list>(<argument><expr><literal type="char">'G'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>WIN32C</name></expr></cpp:if>
<expr_stmt><expr><call><name>MessageBeep</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"\7"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>




<function><type><name>public</name> <name>void</name></type>
<name>bell</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>quiet</name> <operator>==</operator> <name>VERY_QUIET</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vbell</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>beep</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>




<function><type><name>public</name> <name>void</name></type>
<name>clear</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert_interactive</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>MSDOS_COMPILER</name></expr></cpp:if>
<expr_stmt><expr><call><name>ltputs</name><argument_list>(<argument><expr><name>sc_clear</name></expr></argument>, <argument><expr><name>sc_height</name></expr></argument>, <argument><expr><name>putchr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>WIN32C</name></expr></cpp:if>
<expr_stmt><expr><call><name>win32_clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>_clearscreen</name><argument_list>(<argument><expr><name>_GCLEARSCREEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>





<function><type><name>public</name> <name>void</name></type>
<name>clear_eol</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>MSDOS_COMPILER</name></expr></cpp:if>
<expr_stmt><expr><call><name>ltputs</name><argument_list>(<argument><expr><name>sc_eol_clear</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>putchr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>MSOFTC</name></expr></cpp:if>
<decl_stmt><decl><type><name>short</name></type> <name>top</name></decl>, <decl><type ref="prev"/><name>left</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>short</name></type> <name>bot</name></decl>, <decl><type ref="prev"/><name>right</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rccoord</name></name></type> <name>tpos</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>tpos</name> <operator>=</operator> <call><name>_gettextposition</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_gettextwindow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>top</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>left</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>_settextwindow</name><argument_list>(<argument><expr><name><name>tpos</name><operator>.</operator><name>row</name></name></expr></argument>, <argument><expr><name><name>tpos</name><operator>.</operator><name>col</name></name></expr></argument>, <argument><expr><name><name>tpos</name><operator>.</operator><name>row</name></name></expr></argument>, <argument><expr><name>sc_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_clearscreen</name><argument_list>(<argument><expr><name>_GWINDOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>_settextwindow</name><argument_list>(<argument><expr><name>top</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>bot</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_settextposition</name><argument_list>(<argument><expr><name><name>tpos</name><operator>.</operator><name>row</name></name></expr></argument>, <argument><expr><name><name>tpos</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>BORLANDC</name> <operator>||</operator> <name>MSDOS_COMPILER</name><operator>==</operator><name>DJGPPC</name></expr></cpp:if>
<expr_stmt><expr><call><name>flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clreol</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>WIN32C</name></expr></cpp:if>
<decl_stmt><decl><type><name>DWORD</name></type> <name>nchars</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>COORD</name></type> <name>cpos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CONSOLE_SCREEN_BUFFER_INFO</name></type> <name>scr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>scr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetConsoleScreenBufferInfo</name><argument_list>(<argument><expr><name>con_out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cpos</name><operator>.</operator><name>X</name></name> <operator>=</operator> <name><name>scr</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>X</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cpos</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <name><name>scr</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>Y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>curr_attr</name> <operator>=</operator> <call><name>MAKEATTR</name><argument_list>(<argument><expr><name>nm_fg_color</name></expr></argument>, <argument><expr><name>nm_bg_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FillConsoleOutputAttribute</name><argument_list>(<argument><expr><name>con_out</name></expr></argument>, <argument><expr><name>curr_attr</name></expr></argument>,
<argument><expr><name><name>scr</name><operator>.</operator><name>dwSize</name><operator>.</operator><name>X</name></name> <operator>-</operator> <name><name>cpos</name><operator>.</operator><name>X</name></name></expr></argument>, <argument><expr><name>cpos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nchars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FillConsoleOutputCharacter</name><argument_list>(<argument><expr><name>con_out</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>,
<argument><expr><name><name>scr</name><operator>.</operator><name>dwSize</name><operator>.</operator><name>X</name></name> <operator>-</operator> <name><name>cpos</name><operator>.</operator><name>X</name></name></expr></argument>, <argument><expr><name>cpos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nchars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>clear_eol_bot</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert_interactive</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name></expr></cpp:if>
<expr_stmt><expr><call><name>clear_eol</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><name>below_mem</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ltputs</name><argument_list>(<argument><expr><name>sc_eos_clear</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>putchr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ltputs</name><argument_list>(<argument><expr><name>sc_eol_clear</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>putchr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>





<function><type><name>public</name> <name>void</name></type>
<name>clear_bot</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>





<if_stmt><if>if <condition>(<expr><name>oldbot</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lower_left</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>line_left</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>attrmode</name> <operator>==</operator> <name>AT_NORMAL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clear_eol_bot</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>saved_attrmode</name> <init>= <expr><name>attrmode</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>at_exit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_eol_bot</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>at_enter</name><argument_list>(<argument><expr><name>saved_attrmode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_color4</name><parameter_list>(<parameter><decl><type><name>ch</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name></type> <name>ch</name></decl>;</decl_stmt>
<block>{<block_content>
<switch>switch <condition>(<expr><name>ch</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'k'</literal></expr>:</case> <return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><literal type="char">'r'</literal></expr>:</case> <return>return <expr><name>CV_RED</name></expr>;</return>
<case>case <expr><literal type="char">'g'</literal></expr>:</case> <return>return <expr><name>CV_GREEN</name></expr>;</return>
<case>case <expr><literal type="char">'y'</literal></expr>:</case> <return>return <expr><name>CV_RED</name><operator>|</operator><name>CV_GREEN</name></expr>;</return>
<case>case <expr><literal type="char">'b'</literal></expr>:</case> <return>return <expr><name>CV_BLUE</name></expr>;</return>
<case>case <expr><literal type="char">'m'</literal></expr>:</case> <return>return <expr><name>CV_RED</name><operator>|</operator><name>CV_BLUE</name></expr>;</return>
<case>case <expr><literal type="char">'c'</literal></expr>:</case> <return>return <expr><name>CV_GREEN</name><operator>|</operator><name>CV_BLUE</name></expr>;</return>
<case>case <expr><literal type="char">'w'</literal></expr>:</case> <return>return <expr><name>CV_RED</name><operator>|</operator><name>CV_GREEN</name><operator>|</operator><name>CV_BLUE</name></expr>;</return>
<case>case <expr><literal type="char">'K'</literal></expr>:</case> <return>return <expr><literal type="number">0</literal><operator>|</operator><name>CV_BRIGHT</name></expr>;</return>
<case>case <expr><literal type="char">'R'</literal></expr>:</case> <return>return <expr><name>CV_RED</name><operator>|</operator><name>CV_BRIGHT</name></expr>;</return>
<case>case <expr><literal type="char">'G'</literal></expr>:</case> <return>return <expr><name>CV_GREEN</name><operator>|</operator><name>CV_BRIGHT</name></expr>;</return>
<case>case <expr><literal type="char">'Y'</literal></expr>:</case> <return>return <expr><name>CV_RED</name><operator>|</operator><name>CV_GREEN</name><operator>|</operator><name>CV_BRIGHT</name></expr>;</return>
<case>case <expr><literal type="char">'B'</literal></expr>:</case> <return>return <expr><name>CV_BLUE</name><operator>|</operator><name>CV_BRIGHT</name></expr>;</return>
<case>case <expr><literal type="char">'M'</literal></expr>:</case> <return>return <expr><name>CV_RED</name><operator>|</operator><name>CV_BLUE</name><operator>|</operator><name>CV_BRIGHT</name></expr>;</return>
<case>case <expr><literal type="char">'C'</literal></expr>:</case> <return>return <expr><name>CV_GREEN</name><operator>|</operator><name>CV_BLUE</name><operator>|</operator><name>CV_BRIGHT</name></expr>;</return>
<case>case <expr><literal type="char">'W'</literal></expr>:</case> <return>return <expr><name>CV_RED</name><operator>|</operator><name>CV_GREEN</name><operator>|</operator><name>CV_BLUE</name><operator>|</operator><name>CV_BRIGHT</name></expr>;</return>
<case>case <expr><literal type="char">'-'</literal></expr>:</case> <return>return <expr><name>CV_NOCHANGE</name></expr>;</return>
<default>default:</default> <return>return <expr><name>CV_ERROR</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_color6</name><parameter_list>(<parameter><decl><type><name>ps</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ps</name></decl>;</decl_stmt>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>ps</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>ps</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><name>CV_NOCHANGE</name></expr>;</return>
</block_content>}</block></if> <else>else
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ops</name> <init>= <expr><operator>*</operator><name>ps</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>color</name> <init>= <expr><call><name>lstrtoi</name><argument_list>(<argument><expr><name>ops</name></expr></argument>, <argument><expr><name>ps</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ps</name> <operator>==</operator> <name>ops</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CV_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>color</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>







<function><type><name>public</name> <name>COLOR_TYPE</name></type>
<name>parse_color</name><parameter_list>(<parameter><decl><type><name>str</name></type></decl></parameter>, <parameter><decl><type><name>p_fg</name></type></decl></parameter>, <parameter><decl><type><name>p_bg</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>p_fg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>p_bg</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>COLOR_TYPE</name></type> <name>type</name> <init>= <expr><name>CT_NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CT_NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>str</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fg</name> <operator>=</operator> <call><name>parse_color4</name><argument_list>(<argument><expr><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bg</name> <operator>=</operator> <call><name>parse_color4</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'-'</literal></expr> </then><else>: <expr><name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fg</name> <operator>!=</operator> <name>CV_ERROR</name> <operator>&amp;&amp;</operator> <name>bg</name> <operator>!=</operator> <name>CV_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>CT_4BIT</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>fg</name> <operator>=</operator> <call><name>parse_color6</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bg</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>fg</name> <operator>!=</operator> <name>CV_ERROR</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>str</name><operator>++</operator> <operator>==</operator> <literal type="char">'.'</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>parse_color6</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>CV_NOCHANGE</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fg</name> <operator>!=</operator> <name>CV_ERROR</name> <operator>&amp;&amp;</operator> <name>bg</name> <operator>!=</operator> <name>CV_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>CT_6BIT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>p_fg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p_fg</name> <operator>=</operator> <name>fg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>p_bg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p_bg</name> <operator>=</operator> <name>bg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>type</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>MSDOS_COMPILER</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>sgr_color</name><parameter_list>(<parameter><decl><type><name>color</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>color</name></decl>;</decl_stmt>
<block>{<block_content>
<switch>switch <condition>(<expr><name>color</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case> <return>return <expr><literal type="number">30</literal></expr>;</return>
<case>case <expr><name>CV_RED</name></expr>:</case> <return>return <expr><literal type="number">31</literal></expr>;</return>
<case>case <expr><name>CV_GREEN</name></expr>:</case> <return>return <expr><literal type="number">32</literal></expr>;</return>
<case>case <expr><name>CV_RED</name><operator>|</operator><name>CV_GREEN</name></expr>:</case> <return>return <expr><literal type="number">33</literal></expr>;</return>
<case>case <expr><name>CV_BLUE</name></expr>:</case> <return>return <expr><literal type="number">34</literal></expr>;</return>
<case>case <expr><name>CV_RED</name><operator>|</operator><name>CV_BLUE</name></expr>:</case> <return>return <expr><literal type="number">35</literal></expr>;</return>
<case>case <expr><name>CV_GREEN</name><operator>|</operator><name>CV_BLUE</name></expr>:</case> <return>return <expr><literal type="number">36</literal></expr>;</return>
<case>case <expr><name>CV_RED</name><operator>|</operator><name>CV_GREEN</name><operator>|</operator><name>CV_BLUE</name></expr>:</case> <return>return <expr><literal type="number">37</literal></expr>;</return>

<case>case <expr><name>CV_BRIGHT</name></expr>:</case> <return>return <expr><literal type="number">90</literal></expr>;</return>
<case>case <expr><name>CV_RED</name><operator>|</operator><name>CV_BRIGHT</name></expr>:</case> <return>return <expr><literal type="number">91</literal></expr>;</return>
<case>case <expr><name>CV_GREEN</name><operator>|</operator><name>CV_BRIGHT</name></expr>:</case> <return>return <expr><literal type="number">92</literal></expr>;</return>
<case>case <expr><name>CV_RED</name><operator>|</operator><name>CV_GREEN</name><operator>|</operator><name>CV_BRIGHT</name></expr>:</case> <return>return <expr><literal type="number">93</literal></expr>;</return>
<case>case <expr><name>CV_BLUE</name><operator>|</operator><name>CV_BRIGHT</name></expr>:</case> <return>return <expr><literal type="number">94</literal></expr>;</return>
<case>case <expr><name>CV_RED</name><operator>|</operator><name>CV_BLUE</name><operator>|</operator><name>CV_BRIGHT</name></expr>:</case> <return>return <expr><literal type="number">95</literal></expr>;</return>
<case>case <expr><name>CV_GREEN</name><operator>|</operator><name>CV_BLUE</name><operator>|</operator><name>CV_BRIGHT</name></expr>:</case> <return>return <expr><literal type="number">96</literal></expr>;</return>
<case>case <expr><name>CV_RED</name><operator>|</operator><name>CV_GREEN</name><operator>|</operator><name>CV_BLUE</name><operator>|</operator><name>CV_BRIGHT</name></expr>:</case> <return>return <expr><literal type="number">97</literal></expr>;</return>

<default>default:</default> <return>return <expr><name>color</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type>
<name>tput_fmt</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><name>f_putc</name></expr></argument>)</argument_list>
<name>char</name> <modifier>*</modifier><name>fmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>color</name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>f_putc</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>color</name> <operator>==</operator> <name>attrcolor</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>SNPRINTF1</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ltputs</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>f_putc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>attrcolor</name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>
</block_content>}</block>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type>
<name>tput_color</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>f_putc</name></expr></argument>)</argument_list>
<name>char</name> <modifier>*</modifier><name>str</name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>f_putc</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bg</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>str</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>tput_fmt</name><argument_list>(<argument><expr><name>ESCS</name><literal type="string">"[m"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>f_putc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><call><name>parse_color</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bg</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>CT_4BIT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>fg</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tput_fmt</name><argument_list>(<argument><expr><name>ESCS</name><literal type="string">"[%dm"</literal></expr></argument>, <argument><expr><call><name>sgr_color</name><argument_list>(<argument><expr><name>fg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>f_putc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bg</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tput_fmt</name><argument_list>(<argument><expr><name>ESCS</name><literal type="string">"[%dm"</literal></expr></argument>, <argument><expr><call><name>sgr_color</name><argument_list>(<argument><expr><name>bg</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">10</literal></expr></argument>, <argument><expr><name>f_putc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>CT_6BIT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>fg</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tput_fmt</name><argument_list>(<argument><expr><name>ESCS</name><literal type="string">"[38;5;%dm"</literal></expr></argument>, <argument><expr><name>fg</name></expr></argument>, <argument><expr><name>f_putc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bg</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tput_fmt</name><argument_list>(<argument><expr><name>ESCS</name><literal type="string">"[48;5;%dm"</literal></expr></argument>, <argument><expr><name>bg</name></expr></argument>, <argument><expr><name>f_putc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type>
<name>tput_inmode</name><argument_list>(<argument><expr><name>mode_str</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>, <argument><expr><name>attr_bit</name></expr></argument>, <argument><expr><name>f_putc</name></expr></argument>)</argument_list>
<name>char</name> <modifier>*</modifier><name>mode_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>attr_bit</name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>f_putc</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>color_str</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>attr</name> <operator>&amp;</operator> <name>attr_bit</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>color_str</name> <operator>=</operator> <call><name>get_color_map</name><argument_list>(<argument><expr><name>attr_bit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>color_str</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>color_str</name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <operator>*</operator><name>color_str</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ltputs</name><argument_list>(<argument><expr><name>mode_str</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>f_putc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>color_str</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>color_str</name><operator>++</operator> <operator>!=</operator> <literal type="char">'+'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>tput_color</name><argument_list>(<argument><expr><name>color_str</name></expr></argument>, <argument><expr><name>f_putc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type>
<name>tput_outmode</name><argument_list>(<argument><expr><name>mode_str</name></expr></argument>, <argument><expr><name>attr_bit</name></expr></argument>, <argument><expr><name>f_putc</name></expr></argument>)</argument_list>
<name>char</name> <modifier>*</modifier><name>mode_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>attr_bit</name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>f_putc</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>attrmode</name> <operator>&amp;</operator> <name>attr_bit</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ltputs</name><argument_list>(<argument><expr><name>mode_str</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>f_putc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>WIN32C</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>WIN32put_fmt</name><parameter_list>(<parameter><decl><type><name>fmt</name></type></decl></parameter>, <parameter><decl><type><name>color</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>color</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>SNPRINTF1</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>WIN32textout</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>win_set_color</name><parameter_list>(<parameter><decl><type><name>attr</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>attr</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>out</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>get_color_map</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><call><name>parse_color</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bg</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>CT_4BIT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>fg</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>bg</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>SETCOLORS</name><argument_list>(<argument><expr><name>fg</name></expr></argument>, <argument><expr><name>bg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>fg</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>SET_FG_COLOR</name><argument_list>(<argument><expr><name>fg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>bg</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>SET_BG_COLOR</name><argument_list>(<argument><expr><name>bg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>WIN32C</name></expr></cpp:if>
<case>case <expr><name>CT_6BIT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>vt_enabled</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fg</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>WIN32put_fmt</name><argument_list>(<argument><expr><name>ESCS</name><literal type="string">"[38;5;%dm"</literal></expr></argument>, <argument><expr><name>fg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bg</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>WIN32put_fmt</name><argument_list>(<argument><expr><name>ESCS</name><literal type="string">"[48;5;%dm"</literal></expr></argument>, <argument><expr><name>bg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<return>return <expr><name>out</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>public</name> <name>void</name></type>
<name>at_enter</name><parameter_list>(<parameter><decl><type><name>attr</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>attr</name></decl>;</decl_stmt>
<block>{<block_content>
<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>apply_at_specials</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>MSDOS_COMPILER</name></expr></cpp:if>

<expr_stmt><expr><call><name>tput_inmode</name><argument_list>(<argument><expr><name>sc_u_in</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>, <argument><expr><name>AT_UNDERLINE</name></expr></argument>, <argument><expr><name>putchr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tput_inmode</name><argument_list>(<argument><expr><name>sc_b_in</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>, <argument><expr><name>AT_BOLD</name></expr></argument>, <argument><expr><name>putchr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tput_inmode</name><argument_list>(<argument><expr><name>sc_bl_in</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>, <argument><expr><name>AT_BLINK</name></expr></argument>, <argument><expr><name>putchr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>use_color</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>attr</name> <operator>&amp;</operator> <name>AT_COLOR</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tput_color</name><argument_list>(<argument><expr><call><name>get_color_map</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>putchr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>tput_inmode</name><argument_list>(<argument><expr><name>sc_s_in</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>, <argument><expr><name>AT_STANDOUT</name></expr></argument>, <argument><expr><name>putchr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>attr</name> <operator>&amp;</operator> <name>AT_COLOR</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>use_color</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>win_set_color</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>attr</name> <operator>&amp;</operator> <name>AT_STANDOUT</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>SETCOLORS</name><argument_list>(<argument><expr><name>so_fg_color</name></expr></argument>, <argument><expr><name>so_bg_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>attr</name> <operator>&amp;</operator> <name>AT_BLINK</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>SETCOLORS</name><argument_list>(<argument><expr><name>bl_fg_color</name></expr></argument>, <argument><expr><name>bl_bg_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>attr</name> <operator>&amp;</operator> <name>AT_BOLD</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>SETCOLORS</name><argument_list>(<argument><expr><name>bo_fg_color</name></expr></argument>, <argument><expr><name>bo_bg_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>attr</name> <operator>&amp;</operator> <name>AT_UNDERLINE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>SETCOLORS</name><argument_list>(<argument><expr><name>ul_fg_color</name></expr></argument>, <argument><expr><name>ul_bg_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>attrmode</name> <operator>=</operator> <name>attr</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>public</name> <name>void</name></type>
<name>at_exit</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>MSDOS_COMPILER</name></expr></cpp:if>

<expr_stmt><expr><call><name>tput_color</name><argument_list>(<argument><expr><literal type="string">"*"</literal></expr></argument>, <argument><expr><name>putchr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tput_outmode</name><argument_list>(<argument><expr><name>sc_s_out</name></expr></argument>, <argument><expr><name>AT_STANDOUT</name></expr></argument>, <argument><expr><name>putchr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tput_outmode</name><argument_list>(<argument><expr><name>sc_bl_out</name></expr></argument>, <argument><expr><name>AT_BLINK</name></expr></argument>, <argument><expr><name>putchr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tput_outmode</name><argument_list>(<argument><expr><name>sc_b_out</name></expr></argument>, <argument><expr><name>AT_BOLD</name></expr></argument>, <argument><expr><name>putchr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tput_outmode</name><argument_list>(<argument><expr><name>sc_u_out</name></expr></argument>, <argument><expr><name>AT_UNDERLINE</name></expr></argument>, <argument><expr><name>putchr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SETCOLORS</name><argument_list>(<argument><expr><name>nm_fg_color</name></expr></argument>, <argument><expr><name>nm_bg_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>attrmode</name> <operator>=</operator> <name>AT_NORMAL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>public</name> <name>void</name></type>
<name>at_switch</name><parameter_list>(<parameter><decl><type><name>attr</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>attr</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>new_attrmode</name> <init>= <expr><call><name>apply_at_specials</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ignore_modes</name> <init>= <expr><name>AT_ANSI</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>new_attrmode</name> <operator>&amp;</operator> <operator>~</operator><name>ignore_modes</name><operator>)</operator> <operator>!=</operator> <operator>(</operator><name>attrmode</name> <operator>&amp;</operator> <operator>~</operator><name>ignore_modes</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>at_exit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>at_enter</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>public</name> <name>int</name></type>
<name>is_at_equiv</name><parameter_list>(<parameter><decl><type><name>attr1</name></type></decl></parameter>, <parameter><decl><type><name>attr2</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>attr1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>attr2</name></decl>;</decl_stmt>
<block>{<block_content>
<expr_stmt><expr><name>attr1</name> <operator>=</operator> <call><name>apply_at_specials</name><argument_list>(<argument><expr><name>attr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>attr2</name> <operator>=</operator> <call><name>apply_at_specials</name><argument_list>(<argument><expr><name>attr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>attr1</name> <operator>==</operator> <name>attr2</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>public</name> <name>int</name></type>
<name>apply_at_specials</name><parameter_list>(<parameter><decl><type><name>attr</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>attr</name></decl>;</decl_stmt>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>&amp;</operator> <name>AT_BINARY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>attr</name> <operator>|=</operator> <name>binattr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>&amp;</operator> <name>AT_HILITE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>attr</name> <operator>|=</operator> <name>AT_STANDOUT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>attr</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>AT_BINARY</name><operator>|</operator><name>AT_HILITE</name><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>attr</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>public</name> <name>void</name></type>
<name>putbs</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>termcap_debug</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putstr</name><argument_list>(<argument><expr><literal type="string">"&lt;bs&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>MSDOS_COMPILER</name></expr></cpp:if>
<expr_stmt><expr><call><name>ltputs</name><argument_list>(<argument><expr><name>sc_backspace</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>putchr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>, <decl><type ref="prev"/><name>col</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>MSOFTC</name></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>rccoord</name></name></type> <name>tpos</name></decl>;</decl_stmt>
<expr_stmt><expr><name>tpos</name> <operator>=</operator> <call><name>_gettextposition</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>row</name> <operator>=</operator> <name><name>tpos</name><operator>.</operator><name>row</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name> <operator>=</operator> <name><name>tpos</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>BORLANDC</name> <operator>||</operator> <name>MSDOS_COMPILER</name><operator>==</operator><name>DJGPPC</name></expr></cpp:if>
<expr_stmt><expr><name>row</name> <operator>=</operator> <call><name>wherey</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name> <operator>=</operator> <call><name>wherex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>WIN32C</name></expr></cpp:if>
<decl_stmt><decl><type><name>CONSOLE_SCREEN_BUFFER_INFO</name></type> <name>scr</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GetConsoleScreenBufferInfo</name><argument_list>(<argument><expr><name>con_out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>row</name> <operator>=</operator> <name><name>scr</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>Y</name></name> <operator>-</operator> <name><name>scr</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Top</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>col</name> <operator>=</operator> <name><name>scr</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>X</name></name> <operator>-</operator> <name><name>scr</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Left</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block>
<if_stmt><if>if <condition>(<expr><name>col</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>_settextposition</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>WIN32C</name></expr></cpp:if>



<function><type><name>public</name> <name>int</name></type>
<name>win32_kbhit</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>INPUT_RECORD</name></type> <name>ip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>read</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>keyCount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>TRUE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>currentKey</name><operator>.</operator><name>ascii</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>currentKey</name><operator>.</operator><name>scan</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x11mouseCount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>currentKey</name><operator>.</operator><name>ascii</name></name> <operator>=</operator> <name><name>x11mousebuf</name><index>[<expr><name>x11mousePos</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>x11mouseCount</name></expr>;</expr_stmt>
<expr_stmt><expr><name>keyCount</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>TRUE</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>





<do>do
<block>{<block_content>
<expr_stmt><expr><call><name>PeekConsoleInput</name><argument_list>(<argument><expr><name>tty</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ip</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>read</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>FALSE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ReadConsoleInput</name><argument_list>(<argument><expr><name>tty</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ip</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mousecap</name> <operator>&amp;&amp;</operator> <name><name>ip</name><operator>.</operator><name>EventType</name></name> <operator>==</operator> <name>MOUSE_EVENT</name> <operator>&amp;&amp;</operator>
<name><name>ip</name><operator>.</operator><name>Event</name><operator>.</operator><name>MouseEvent</name><operator>.</operator><name>dwEventFlags</name></name> <operator>!=</operator> <name>MOUSE_MOVED</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>x11mousebuf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>X11MOUSE_OFFSET</name> <operator>+</operator> <name><name>ip</name><operator>.</operator><name>Event</name><operator>.</operator><name>MouseEvent</name><operator>.</operator><name>dwMousePosition</name><operator>.</operator><name>X</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x11mousebuf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>X11MOUSE_OFFSET</name> <operator>+</operator> <name><name>ip</name><operator>.</operator><name>Event</name><operator>.</operator><name>MouseEvent</name><operator>.</operator><name>dwMousePosition</name><operator>.</operator><name>Y</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>ip</name><operator>.</operator><name>Event</name><operator>.</operator><name>MouseEvent</name><operator>.</operator><name>dwEventFlags</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>ip</name><operator>.</operator><name>Event</name><operator>.</operator><name>MouseEvent</name><operator>.</operator><name>dwButtonState</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>x11mousebuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>X11MOUSE_OFFSET</name> <operator>+</operator> <name>X11MOUSE_BUTTON_REL</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>ip</name><operator>.</operator><name>Event</name><operator>.</operator><name>MouseEvent</name><operator>.</operator><name>dwButtonState</name></name> <operator>&amp;</operator> <operator>(</operator><name>FROM_LEFT_3RD_BUTTON_PRESSED</name> <operator>|</operator> <name>FROM_LEFT_4TH_BUTTON_PRESSED</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>x11mousebuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>X11MOUSE_OFFSET</name> <operator>+</operator> <name>X11MOUSE_BUTTON1</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>ip</name><operator>.</operator><name>Event</name><operator>.</operator><name>MouseEvent</name><operator>.</operator><name>dwButtonState</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>MOUSE_WHEELED</name></expr>:</case>
<expr_stmt><expr><name><name>x11mousebuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>X11MOUSE_OFFSET</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>ip</name><operator>.</operator><name>Event</name><operator>.</operator><name>MouseEvent</name><operator>.</operator><name>dwButtonState</name></name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>X11MOUSE_WHEEL_DOWN</name></expr> </then><else>: <expr><name>X11MOUSE_WHEEL_UP</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<continue>continue;</continue>
</block_content>}</block></switch>
<expr_stmt><expr><name>x11mousePos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>x11mouseCount</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>currentKey</name><operator>.</operator><name>ascii</name></name> <operator>=</operator> <name>ESC</name></expr>;</expr_stmt>
<expr_stmt><expr><name>keyCount</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>TRUE</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><name><name>ip</name><operator>.</operator><name>EventType</name></name> <operator>!=</operator> <name>KEY_EVENT</name> <operator>||</operator>
<name><name>ip</name><operator>.</operator><name>Event</name><operator>.</operator><name>KeyEvent</name><operator>.</operator><name>bKeyDown</name></name> <operator>!=</operator> <name>TRUE</name> <operator>||</operator>
<name><name>ip</name><operator>.</operator><name>Event</name><operator>.</operator><name>KeyEvent</name><operator>.</operator><name>wVirtualScanCode</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<name><name>ip</name><operator>.</operator><name>Event</name><operator>.</operator><name>KeyEvent</name><operator>.</operator><name>wVirtualKeyCode</name></name> <operator>==</operator> <name>VK_SHIFT</name> <operator>||</operator>
<name><name>ip</name><operator>.</operator><name>Event</name><operator>.</operator><name>KeyEvent</name><operator>.</operator><name>wVirtualKeyCode</name></name> <operator>==</operator> <name>VK_CONTROL</name> <operator>||</operator>
<name><name>ip</name><operator>.</operator><name>Event</name><operator>.</operator><name>KeyEvent</name><operator>.</operator><name>wVirtualKeyCode</name></name> <operator>==</operator> <name>VK_MENU</name></expr>)</condition>;</do>

<expr_stmt><expr><name><name>currentKey</name><operator>.</operator><name>ascii</name></name> <operator>=</operator> <name><name>ip</name><operator>.</operator><name>Event</name><operator>.</operator><name>KeyEvent</name><operator>.</operator><name>uChar</name><operator>.</operator><name>AsciiChar</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>currentKey</name><operator>.</operator><name>scan</name></name> <operator>=</operator> <name><name>ip</name><operator>.</operator><name>Event</name><operator>.</operator><name>KeyEvent</name><operator>.</operator><name>wVirtualScanCode</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>keyCount</name> <operator>=</operator> <name><name>ip</name><operator>.</operator><name>Event</name><operator>.</operator><name>KeyEvent</name><operator>.</operator><name>wRepeatCount</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ip</name><operator>.</operator><name>Event</name><operator>.</operator><name>KeyEvent</name><operator>.</operator><name>dwControlKeyState</name></name> <operator>&amp;</operator>
<operator>(</operator><name>LEFT_ALT_PRESSED</name> <operator>|</operator> <name>RIGHT_ALT_PRESSED</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>currentKey</name><operator>.</operator><name>scan</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>PCK_ALT_E</name></expr>:</case>
<expr_stmt><expr><name><name>currentKey</name><operator>.</operator><name>ascii</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ip</name><operator>.</operator><name>Event</name><operator>.</operator><name>KeyEvent</name><operator>.</operator><name>dwControlKeyState</name></name> <operator>&amp;</operator>
<operator>(</operator><name>LEFT_CTRL_PRESSED</name> <operator>|</operator> <name>RIGHT_CTRL_PRESSED</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>currentKey</name><operator>.</operator><name>scan</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>PCK_RIGHT</name></expr>:</case>
<expr_stmt><expr><name><name>currentKey</name><operator>.</operator><name>scan</name></name> <operator>=</operator> <name>PCK_CTL_RIGHT</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PCK_LEFT</name></expr>:</case>
<expr_stmt><expr><name><name>currentKey</name><operator>.</operator><name>scan</name></name> <operator>=</operator> <name>PCK_CTL_LEFT</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PCK_DELETE</name></expr>:</case>
<expr_stmt><expr><name><name>currentKey</name><operator>.</operator><name>scan</name></name> <operator>=</operator> <name>PCK_CTL_DELETE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ip</name><operator>.</operator><name>Event</name><operator>.</operator><name>KeyEvent</name><operator>.</operator><name>dwControlKeyState</name></name> <operator>&amp;</operator> <name>SHIFT_PRESSED</name></expr>)</condition>
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>currentKey</name><operator>.</operator><name>scan</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>PCK_SHIFT_TAB</name></expr>:</case>
<expr_stmt><expr><name><name>currentKey</name><operator>.</operator><name>ascii</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>TRUE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>public</name> <name>char</name></type>
<name>WIN32getch</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ascii</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pending_scancode</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>pending_scancode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><name><name>currentKey</name><operator>.</operator><name>scan</name></name> <operator>&amp;</operator> <literal type="number">0x00FF</literal><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<do>do <block>{<block_content>
<while>while <condition>(<expr><call><name>win32_kbhit</name><argument_list>()</argument_list></call> <operator>==</operator> <name>FALSE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ABORT_SIGS</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="char">'\003'</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></while>
<expr_stmt><expr><name>keyCount</name> <operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ascii</name> <operator>=</operator> <name><name>currentKey</name><operator>.</operator><name>ascii</name></name></expr>;</expr_stmt>





<expr_stmt><expr><name>pending_scancode</name> <operator>=</operator> <operator>(</operator><name>ascii</name> <operator>==</operator> <literal type="number">0x00</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>pending_scancode</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>currentKey</name><operator>.</operator><name>scan</name></name> <operator>==</operator> <name>PCK_CAPS_LOCK</name> <operator>||</operator> <name><name>currentKey</name><operator>.</operator><name>scan</name></name> <operator>==</operator> <name>PCK_NUM_LOCK</name><operator>)</operator></expr>)</condition>;</do>

<return>return <expr><operator>(</operator><operator>(</operator><name>char</name><operator>)</operator><name>ascii</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name></expr></cpp:if>


<function><type><name>public</name> <name>void</name></type>
<name>WIN32setcolors</name><parameter_list>(<parameter><decl><type><name>fg</name></type></decl></parameter>, <parameter><decl><type><name>bg</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>fg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bg</name></decl>;</decl_stmt>
<block>{<block_content>
<expr_stmt><expr><call><name>SETCOLORS</name><argument_list>(<argument><expr><name>fg</name></expr></argument>, <argument><expr><name>bg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>public</name> <name>void</name></type>
<name>WIN32textout</name><parameter_list>(<parameter><decl><type><name>text</name></type></decl></parameter>, <parameter><decl><type><name>len</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>WIN32C</name></expr></cpp:if>
<decl_stmt><decl><type><name>DWORD</name></type> <name>written</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>utf_mode</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>




<decl_stmt><decl><type><name>WCHAR</name></type> <name><name>wtext</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>wtext</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>wtext</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>wtext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WriteConsoleW</name><argument_list>(<argument><expr><name>con_out</name></expr></argument>, <argument><expr><name>wtext</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>written</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>WriteConsole</name><argument_list>(<argument><expr><name>con_out</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>written</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><name><name>text</name><index>[<expr><name>len</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>text</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cputs</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>text</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
