<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/less/xbuf.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"less.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xbuf.h"</cpp:file></cpp:include>




<function><type><name>public</name> <name>void</name></type>
<name>xbuf_init</name><parameter_list>(<parameter><decl><type><name>xbuf</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name><name>struct</name> <name>xbuffer</name></name> <modifier>*</modifier></type><name>xbuf</name></decl>;</decl_stmt>
<block>{<block_content>
<expr_stmt><expr><name><name>xbuf</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xbuf</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>xbuf</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>public</name> <name>void</name></type>
<name>xbuf_deinit</name><parameter_list>(<parameter><decl><type><name>xbuf</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name><name>struct</name> <name>xbuffer</name></name> <modifier>*</modifier></type><name>xbuf</name></decl>;</decl_stmt>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>xbuf</name><operator>-&gt;</operator><name>data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>xbuf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>xbuf_init</name><argument_list>(<argument><expr><name>xbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>public</name> <name>void</name></type>
<name>xbuf_reset</name><parameter_list>(<parameter><decl><type><name>xbuf</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name><name>struct</name> <name>xbuffer</name></name> <modifier>*</modifier></type><name>xbuf</name></decl>;</decl_stmt>
<block>{<block_content>
<expr_stmt><expr><name><name>xbuf</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>public</name> <name>void</name></type>
<name>xbuf_add</name><parameter_list>(<parameter><decl><type><name>xbuf</name></type></decl></parameter>, <parameter><decl><type><name>ch</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name><name>struct</name> <name>xbuffer</name></name> <modifier>*</modifier></type><name>xbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>ch</name></decl>;</decl_stmt>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>xbuf</name><operator>-&gt;</operator><name>end</name></name> <operator>&gt;=</operator> <name><name>xbuf</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>xbuf</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>xbuf</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">16</literal></expr> </then><else>: <expr><name><name>xbuf</name><operator>-&gt;</operator><name>size</name></name> <operator>*</operator> <literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>ecalloc</name><argument_list>(<argument><expr><name><name>xbuf</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>xbuf</name><operator>-&gt;</operator><name>data</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>xbuf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>xbuf</name><operator>-&gt;</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>xbuf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>xbuf</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>xbuf</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>xbuf</name><operator>-&gt;</operator><name>end</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
