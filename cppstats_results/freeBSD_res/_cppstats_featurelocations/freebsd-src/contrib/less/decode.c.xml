<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/less/decode.c">






























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"less.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cmd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lesskey.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>erase_char</name></decl>, <decl><type ref="prev"/><name>erase2_char</name></decl>, <decl><type ref="prev"/><name>kill_char</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>secure</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>mousecap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>screen_trashed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>sc_height</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SK</name><parameter_list>(<parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SK_SPECIAL_KEY, (k), 6, 1, 1, 1</cpp:value></cpp:define>






<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name><name>cmdtable</name><index>[]</index></name> <init>=
<expr><block>{
<expr><literal type="char">'\r'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_F_LINE</name></expr>,
<expr><literal type="char">'\n'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_F_LINE</name></expr>,
<expr><literal type="char">'e'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_F_LINE</name></expr>,
<expr><literal type="char">'j'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_F_LINE</name></expr>,
<expr><call><name>SK</name><argument_list>(<argument><expr><name>SK_DOWN_ARROW</name></expr></argument>)</argument_list></call></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_F_LINE</name></expr>,
<expr><call><name>CONTROL</name><argument_list>(<argument><expr><literal type="char">'E'</literal></expr></argument>)</argument_list></call></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_F_LINE</name></expr>,
<expr><call><name>CONTROL</name><argument_list>(<argument><expr><literal type="char">'N'</literal></expr></argument>)</argument_list></call></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_F_LINE</name></expr>,
<expr><literal type="char">'k'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_B_LINE</name></expr>,
<expr><literal type="char">'y'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_B_LINE</name></expr>,
<expr><call><name>CONTROL</name><argument_list>(<argument><expr><literal type="char">'Y'</literal></expr></argument>)</argument_list></call></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_B_LINE</name></expr>,
<expr><call><name>SK</name><argument_list>(<argument><expr><name>SK_CONTROL_K</name></expr></argument>)</argument_list></call></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_B_LINE</name></expr>,
<expr><call><name>CONTROL</name><argument_list>(<argument><expr><literal type="char">'P'</literal></expr></argument>)</argument_list></call></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_B_LINE</name></expr>,
<expr><call><name>SK</name><argument_list>(<argument><expr><name>SK_UP_ARROW</name></expr></argument>)</argument_list></call></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_B_LINE</name></expr>,
<expr><literal type="char">'J'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_FF_LINE</name></expr>,
<expr><literal type="char">'K'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_BF_LINE</name></expr>,
<expr><literal type="char">'Y'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_BF_LINE</name></expr>,
<expr><literal type="char">'d'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_F_SCROLL</name></expr>,
<expr><call><name>CONTROL</name><argument_list>(<argument><expr><literal type="char">'D'</literal></expr></argument>)</argument_list></call></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_F_SCROLL</name></expr>,
<expr><literal type="char">'u'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_B_SCROLL</name></expr>,
<expr><call><name>CONTROL</name><argument_list>(<argument><expr><literal type="char">'U'</literal></expr></argument>)</argument_list></call></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_B_SCROLL</name></expr>,
<expr><name>ESC</name></expr>,<expr><literal type="char">'['</literal></expr>,<expr><literal type="char">'M'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_X11MOUSE_IN</name></expr>,
<expr><name>ESC</name></expr>,<expr><literal type="char">'['</literal></expr>,<expr><literal type="char">'&lt;'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_X116MOUSE_IN</name></expr>,
<expr><literal type="char">' '</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_F_SCREEN</name></expr>,
<expr><literal type="char">'f'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_F_SCREEN</name></expr>,
<expr><call><name>CONTROL</name><argument_list>(<argument><expr><literal type="char">'F'</literal></expr></argument>)</argument_list></call></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_F_SCREEN</name></expr>,
<expr><call><name>CONTROL</name><argument_list>(<argument><expr><literal type="char">'V'</literal></expr></argument>)</argument_list></call></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_F_SCREEN</name></expr>,
<expr><call><name>SK</name><argument_list>(<argument><expr><name>SK_PAGE_DOWN</name></expr></argument>)</argument_list></call></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_F_SCREEN</name></expr>,
<expr><literal type="char">'b'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_B_SCREEN</name></expr>,
<expr><call><name>CONTROL</name><argument_list>(<argument><expr><literal type="char">'B'</literal></expr></argument>)</argument_list></call></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_B_SCREEN</name></expr>,
<expr><name>ESC</name></expr>,<expr><literal type="char">'v'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_B_SCREEN</name></expr>,
<expr><call><name>SK</name><argument_list>(<argument><expr><name>SK_PAGE_UP</name></expr></argument>)</argument_list></call></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_B_SCREEN</name></expr>,
<expr><literal type="char">'z'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_F_WINDOW</name></expr>,
<expr><literal type="char">'w'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_B_WINDOW</name></expr>,
<expr><name>ESC</name></expr>,<expr><literal type="char">' '</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_FF_SCREEN</name></expr>,
<expr><literal type="char">'F'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_F_FOREVER</name></expr>,
<expr><name>ESC</name></expr>,<expr><literal type="char">'F'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_F_UNTIL_HILITE</name></expr>,
<expr><literal type="char">'R'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_FREPAINT</name></expr>,
<expr><literal type="char">'r'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_REPAINT</name></expr>,
<expr><call><name>CONTROL</name><argument_list>(<argument><expr><literal type="char">'R'</literal></expr></argument>)</argument_list></call></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_REPAINT</name></expr>,
<expr><call><name>CONTROL</name><argument_list>(<argument><expr><literal type="char">'L'</literal></expr></argument>)</argument_list></call></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_REPAINT</name></expr>,
<expr><name>ESC</name></expr>,<expr><literal type="char">'u'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_UNDO_SEARCH</name></expr>,
<expr><name>ESC</name></expr>,<expr><literal type="char">'U'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_CLR_SEARCH</name></expr>,
<expr><literal type="char">'g'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_GOLINE</name></expr>,
<expr><call><name>SK</name><argument_list>(<argument><expr><name>SK_HOME</name></expr></argument>)</argument_list></call></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_GOLINE</name></expr>,
<expr><literal type="char">'&lt;'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_GOLINE</name></expr>,
<expr><name>ESC</name></expr>,<expr><literal type="char">'&lt;'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_GOLINE</name></expr>,
<expr><literal type="char">'p'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_PERCENT</name></expr>,
<expr><literal type="char">'%'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_PERCENT</name></expr>,
<expr><name>ESC</name></expr>,<expr><literal type="char">'['</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_LSHIFT</name></expr>,
<expr><name>ESC</name></expr>,<expr><literal type="char">']'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_RSHIFT</name></expr>,
<expr><name>ESC</name></expr>,<expr><literal type="char">'('</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_LSHIFT</name></expr>,
<expr><name>ESC</name></expr>,<expr><literal type="char">')'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_RSHIFT</name></expr>,
<expr><name>ESC</name></expr>,<expr><literal type="char">'{'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_LLSHIFT</name></expr>,
<expr><name>ESC</name></expr>,<expr><literal type="char">'}'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_RRSHIFT</name></expr>,
<expr><call><name>SK</name><argument_list>(<argument><expr><name>SK_RIGHT_ARROW</name></expr></argument>)</argument_list></call></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_RSHIFT</name></expr>,
<expr><call><name>SK</name><argument_list>(<argument><expr><name>SK_LEFT_ARROW</name></expr></argument>)</argument_list></call></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_LSHIFT</name></expr>,
<expr><call><name>SK</name><argument_list>(<argument><expr><name>SK_CTL_RIGHT_ARROW</name></expr></argument>)</argument_list></call></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_RRSHIFT</name></expr>,
<expr><call><name>SK</name><argument_list>(<argument><expr><name>SK_CTL_LEFT_ARROW</name></expr></argument>)</argument_list></call></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_LLSHIFT</name></expr>,
<expr><literal type="char">'{'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_F_BRACKET</name><operator>|</operator><name>A_EXTRA</name></expr>, <expr><literal type="char">'{'</literal></expr>,<expr><literal type="char">'}'</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="char">'}'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_B_BRACKET</name><operator>|</operator><name>A_EXTRA</name></expr>, <expr><literal type="char">'{'</literal></expr>,<expr><literal type="char">'}'</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="char">'('</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_F_BRACKET</name><operator>|</operator><name>A_EXTRA</name></expr>, <expr><literal type="char">'('</literal></expr>,<expr><literal type="char">')'</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="char">')'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_B_BRACKET</name><operator>|</operator><name>A_EXTRA</name></expr>, <expr><literal type="char">'('</literal></expr>,<expr><literal type="char">')'</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="char">'['</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_F_BRACKET</name><operator>|</operator><name>A_EXTRA</name></expr>, <expr><literal type="char">'['</literal></expr>,<expr><literal type="char">']'</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="char">']'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_B_BRACKET</name><operator>|</operator><name>A_EXTRA</name></expr>, <expr><literal type="char">'['</literal></expr>,<expr><literal type="char">']'</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><name>ESC</name></expr>,<expr><call><name>CONTROL</name><argument_list>(<argument><expr><literal type="char">'F'</literal></expr></argument>)</argument_list></call></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_F_BRACKET</name></expr>,
<expr><name>ESC</name></expr>,<expr><call><name>CONTROL</name><argument_list>(<argument><expr><literal type="char">'B'</literal></expr></argument>)</argument_list></call></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_B_BRACKET</name></expr>,
<expr><literal type="char">'G'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_GOEND</name></expr>,
<expr><name>ESC</name></expr>,<expr><literal type="char">'G'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_GOEND_BUF</name></expr>,
<expr><name>ESC</name></expr>,<expr><literal type="char">'&gt;'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_GOEND</name></expr>,
<expr><literal type="char">'&gt;'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_GOEND</name></expr>,
<expr><call><name>SK</name><argument_list>(<argument><expr><name>SK_END</name></expr></argument>)</argument_list></call></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_GOEND</name></expr>,
<expr><literal type="char">'P'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_GOPOS</name></expr>,

<expr><literal type="char">'0'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_DIGIT</name></expr>,
<expr><literal type="char">'1'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_DIGIT</name></expr>,
<expr><literal type="char">'2'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_DIGIT</name></expr>,
<expr><literal type="char">'3'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_DIGIT</name></expr>,
<expr><literal type="char">'4'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_DIGIT</name></expr>,
<expr><literal type="char">'5'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_DIGIT</name></expr>,
<expr><literal type="char">'6'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_DIGIT</name></expr>,
<expr><literal type="char">'7'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_DIGIT</name></expr>,
<expr><literal type="char">'8'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_DIGIT</name></expr>,
<expr><literal type="char">'9'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_DIGIT</name></expr>,
<expr><literal type="char">'.'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_DIGIT</name></expr>,

<expr><literal type="char">'='</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_STAT</name></expr>,
<expr><call><name>CONTROL</name><argument_list>(<argument><expr><literal type="char">'G'</literal></expr></argument>)</argument_list></call></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_STAT</name></expr>,
<expr><literal type="char">':'</literal></expr>,<expr><literal type="char">'f'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_STAT</name></expr>,
<expr><literal type="char">'/'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_F_SEARCH</name></expr>,
<expr><literal type="char">'?'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_B_SEARCH</name></expr>,
<expr><name>ESC</name></expr>,<expr><literal type="char">'/'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_F_SEARCH</name><operator>|</operator><name>A_EXTRA</name></expr>, <expr><literal type="char">'*'</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><name>ESC</name></expr>,<expr><literal type="char">'?'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_B_SEARCH</name><operator>|</operator><name>A_EXTRA</name></expr>, <expr><literal type="char">'*'</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="char">'n'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_AGAIN_SEARCH</name></expr>,
<expr><name>ESC</name></expr>,<expr><literal type="char">'n'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_T_AGAIN_SEARCH</name></expr>,
<expr><literal type="char">'N'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_REVERSE_SEARCH</name></expr>,
<expr><name>ESC</name></expr>,<expr><literal type="char">'N'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_T_REVERSE_SEARCH</name></expr>,
<expr><literal type="char">'&amp;'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_FILTER</name></expr>,
<expr><literal type="char">'m'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_SETMARK</name></expr>,
<expr><literal type="char">'M'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_SETMARKBOT</name></expr>,
<expr><name>ESC</name></expr>,<expr><literal type="char">'m'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_CLRMARK</name></expr>,
<expr><literal type="char">'\''</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_GOMARK</name></expr>,
<expr><call><name>CONTROL</name><argument_list>(<argument><expr><literal type="char">'X'</literal></expr></argument>)</argument_list></call></expr>,<expr><call><name>CONTROL</name><argument_list>(<argument><expr><literal type="char">'X'</literal></expr></argument>)</argument_list></call></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_GOMARK</name></expr>,
<expr><literal type="char">'E'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_EXAMINE</name></expr>,
<expr><literal type="char">':'</literal></expr>,<expr><literal type="char">'e'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_EXAMINE</name></expr>,
<expr><call><name>CONTROL</name><argument_list>(<argument><expr><literal type="char">'X'</literal></expr></argument>)</argument_list></call></expr>,<expr><call><name>CONTROL</name><argument_list>(<argument><expr><literal type="char">'V'</literal></expr></argument>)</argument_list></call></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_EXAMINE</name></expr>,
<expr><literal type="char">':'</literal></expr>,<expr><literal type="char">'n'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT_FILE</name></expr>,
<expr><literal type="char">':'</literal></expr>,<expr><literal type="char">'p'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_PREV_FILE</name></expr>,
<expr><literal type="char">'t'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT_TAG</name></expr>,
<expr><literal type="char">'T'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_PREV_TAG</name></expr>,
<expr><literal type="char">':'</literal></expr>,<expr><literal type="char">'x'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_INDEX_FILE</name></expr>,
<expr><literal type="char">':'</literal></expr>,<expr><literal type="char">'d'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_REMOVE_FILE</name></expr>,
<expr><literal type="char">'-'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_OPT_TOGGLE</name></expr>,
<expr><literal type="char">':'</literal></expr>,<expr><literal type="char">'t'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_OPT_TOGGLE</name><operator>|</operator><name>A_EXTRA</name></expr>, <expr><literal type="char">'t'</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="char">'s'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_OPT_TOGGLE</name><operator>|</operator><name>A_EXTRA</name></expr>, <expr><literal type="char">'o'</literal></expr>,<expr><literal type="number">0</literal></expr>,
<expr><literal type="char">'_'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_DISP_OPTION</name></expr>,
<expr><literal type="char">'|'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_PIPE</name></expr>,
<expr><literal type="char">'v'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_VISUAL</name></expr>,
<expr><literal type="char">'!'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_SHELL</name></expr>,
<expr><literal type="char">'+'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_FIRSTCMD</name></expr>,

<expr><literal type="char">'H'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_HELP</name></expr>,
<expr><literal type="char">'h'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_HELP</name></expr>,
<expr><call><name>SK</name><argument_list>(<argument><expr><name>SK_F1</name></expr></argument>)</argument_list></call></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_HELP</name></expr>,
<expr><literal type="char">'V'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_VERSION</name></expr>,
<expr><literal type="char">'q'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_QUIT</name></expr>,
<expr><literal type="char">'Q'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_QUIT</name></expr>,
<expr><literal type="char">':'</literal></expr>,<expr><literal type="char">'q'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_QUIT</name></expr>,
<expr><literal type="char">':'</literal></expr>,<expr><literal type="char">'Q'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_QUIT</name></expr>,
<expr><literal type="char">'Z'</literal></expr>,<expr><literal type="char">'Z'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>A_QUIT</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name><name>edittable</name><index>[]</index></name> <init>=
<expr><block>{
<expr><literal type="char">'\t'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>EC_F_COMPLETE</name></expr>,
<expr><literal type="char">'\17'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>EC_B_COMPLETE</name></expr>,
<expr><call><name>SK</name><argument_list>(<argument><expr><name>SK_BACKTAB</name></expr></argument>)</argument_list></call></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>EC_B_COMPLETE</name></expr>,
<expr><name>ESC</name></expr>,<expr><literal type="char">'\t'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>EC_B_COMPLETE</name></expr>,
<expr><call><name>CONTROL</name><argument_list>(<argument><expr><literal type="char">'L'</literal></expr></argument>)</argument_list></call></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>EC_EXPAND</name></expr>,
<expr><call><name>CONTROL</name><argument_list>(<argument><expr><literal type="char">'V'</literal></expr></argument>)</argument_list></call></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>EC_LITERAL</name></expr>,
<expr><call><name>CONTROL</name><argument_list>(<argument><expr><literal type="char">'A'</literal></expr></argument>)</argument_list></call></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>EC_LITERAL</name></expr>,
<expr><name>ESC</name></expr>,<expr><literal type="char">'l'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>EC_RIGHT</name></expr>,
<expr><call><name>SK</name><argument_list>(<argument><expr><name>SK_RIGHT_ARROW</name></expr></argument>)</argument_list></call></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>EC_RIGHT</name></expr>,
<expr><name>ESC</name></expr>,<expr><literal type="char">'h'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>EC_LEFT</name></expr>,
<expr><call><name>SK</name><argument_list>(<argument><expr><name>SK_LEFT_ARROW</name></expr></argument>)</argument_list></call></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>EC_LEFT</name></expr>,
<expr><name>ESC</name></expr>,<expr><literal type="char">'b'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>EC_W_LEFT</name></expr>,
<expr><name>ESC</name></expr>,<expr><call><name>SK</name><argument_list>(<argument><expr><name>SK_LEFT_ARROW</name></expr></argument>)</argument_list></call></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>EC_W_LEFT</name></expr>,
<expr><call><name>SK</name><argument_list>(<argument><expr><name>SK_CTL_LEFT_ARROW</name></expr></argument>)</argument_list></call></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>EC_W_LEFT</name></expr>,
<expr><name>ESC</name></expr>,<expr><literal type="char">'w'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>EC_W_RIGHT</name></expr>,
<expr><name>ESC</name></expr>,<expr><call><name>SK</name><argument_list>(<argument><expr><name>SK_RIGHT_ARROW</name></expr></argument>)</argument_list></call></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>EC_W_RIGHT</name></expr>,
<expr><call><name>SK</name><argument_list>(<argument><expr><name>SK_CTL_RIGHT_ARROW</name></expr></argument>)</argument_list></call></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>EC_W_RIGHT</name></expr>,
<expr><name>ESC</name></expr>,<expr><literal type="char">'i'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>EC_INSERT</name></expr>,
<expr><call><name>SK</name><argument_list>(<argument><expr><name>SK_INSERT</name></expr></argument>)</argument_list></call></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>EC_INSERT</name></expr>,
<expr><name>ESC</name></expr>,<expr><literal type="char">'x'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>EC_DELETE</name></expr>,
<expr><call><name>SK</name><argument_list>(<argument><expr><name>SK_DELETE</name></expr></argument>)</argument_list></call></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>EC_DELETE</name></expr>,
<expr><name>ESC</name></expr>,<expr><literal type="char">'X'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>EC_W_DELETE</name></expr>,
<expr><name>ESC</name></expr>,<expr><call><name>SK</name><argument_list>(<argument><expr><name>SK_DELETE</name></expr></argument>)</argument_list></call></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>EC_W_DELETE</name></expr>,
<expr><call><name>SK</name><argument_list>(<argument><expr><name>SK_CTL_DELETE</name></expr></argument>)</argument_list></call></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>EC_W_DELETE</name></expr>,
<expr><call><name>SK</name><argument_list>(<argument><expr><name>SK_CTL_BACKSPACE</name></expr></argument>)</argument_list></call></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>EC_W_BACKSPACE</name></expr>,
<expr><name>ESC</name></expr>,<expr><literal type="char">'\b'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>EC_W_BACKSPACE</name></expr>,
<expr><name>ESC</name></expr>,<expr><literal type="char">'0'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>EC_HOME</name></expr>,
<expr><call><name>SK</name><argument_list>(<argument><expr><name>SK_HOME</name></expr></argument>)</argument_list></call></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>EC_HOME</name></expr>,
<expr><name>ESC</name></expr>,<expr><literal type="char">'$'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>EC_END</name></expr>,
<expr><call><name>SK</name><argument_list>(<argument><expr><name>SK_END</name></expr></argument>)</argument_list></call></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>EC_END</name></expr>,
<expr><name>ESC</name></expr>,<expr><literal type="char">'k'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>EC_UP</name></expr>,
<expr><call><name>SK</name><argument_list>(<argument><expr><name>SK_UP_ARROW</name></expr></argument>)</argument_list></call></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>EC_UP</name></expr>,
<expr><name>ESC</name></expr>,<expr><literal type="char">'j'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>EC_DOWN</name></expr>,
<expr><call><name>SK</name><argument_list>(<argument><expr><name>SK_DOWN_ARROW</name></expr></argument>)</argument_list></call></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>EC_DOWN</name></expr>,
<expr><call><name>CONTROL</name><argument_list>(<argument><expr><literal type="char">'G'</literal></expr></argument>)</argument_list></call></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>EC_ABORT</name></expr>,
<expr><name>ESC</name></expr>,<expr><literal type="char">'['</literal></expr>,<expr><literal type="char">'M'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>EC_X11MOUSE</name></expr>,
<expr><name>ESC</name></expr>,<expr><literal type="char">'['</literal></expr>,<expr><literal type="char">'&lt;'</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><name>EC_X116MOUSE</name></expr>,
}</block></expr></init></decl>;</decl_stmt>




<struct>struct <name>tablelist</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>tablelist</name></name> <modifier>*</modifier></type><name>t_next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>t_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>t_end</name></decl>;</decl_stmt>
}</block>;</struct>




<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>tablelist</name></name> <modifier>*</modifier></type><name>list_fcmd_tables</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>tablelist</name></name> <modifier>*</modifier></type><name>list_ecmd_tables</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>tablelist</name></name> <modifier>*</modifier></type><name>list_var_tables</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>tablelist</name></name> <modifier>*</modifier></type><name>list_sysvar_tables</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>expand_special_keys</name><parameter_list>(<parameter><decl><type><name>table</name></type></decl></parameter>, <parameter><decl><type><name>len</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>table</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>to</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>repl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>klen</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>fm</name> <operator>=</operator> <name>table</name></expr>;</init> <condition><expr><name>fm</name> <operator>&lt;</operator> <name>table</name> <operator>+</operator> <name>len</name></expr>;</condition> <incr/>)</control>
<block>{<block_content>




<for>for <control>(<init><expr><name>to</name> <operator>=</operator> <name>fm</name></expr>;</init> <condition><expr><operator>*</operator><name>fm</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr/>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>fm</name> <operator>!=</operator> <name>SK_SPECIAL_KEY</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>to</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>fm</name><operator>++</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>









<expr_stmt><expr><name>repl</name> <operator>=</operator> <call><name>special_key_str</name><argument_list>(<argument><expr><name><name>fm</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>klen</name> <operator>=</operator> <name><name>fm</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0377</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fm</name> <operator>+=</operator> <name>klen</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>repl</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>repl</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>klen</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>repl</name> <operator>=</operator> <literal type="string">"\377"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while <condition>(<expr><operator>*</operator><name>repl</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>to</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>repl</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>to</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>




<while>while <condition>(<expr><name>to</name> <operator>&lt;=</operator> <name>fm</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>to</name><operator>++</operator> <operator>=</operator> <name>A_SKIP</name></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>fm</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>*</operator><name>fm</name><operator>++</operator> <operator>&amp;</operator> <literal type="number">0377</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&amp;</operator> <name>A_EXTRA</name></expr>)</condition>
<block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><name>fm</name><operator>++</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></while>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>expand_cmd_table</name><parameter_list>(<parameter><decl><type><name>tlist</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name><name>struct</name> <name>tablelist</name></name> <modifier>*</modifier></type><name>tlist</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tablelist</name></name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>t</name> <operator>=</operator> <name>tlist</name></expr>;</init> <condition><expr><name>t</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>t</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>t_next</name></name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>expand_special_keys</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>t_start</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>t_end</name></name> <operator>-</operator> <name><name>t</name><operator>-&gt;</operator><name>t_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><name>public</name> <name>void</name></type>
<name>expand_cmd_tables</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>expand_cmd_table</name><argument_list>(<argument><expr><name>list_fcmd_tables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>expand_cmd_table</name><argument_list>(<argument><expr><name>list_ecmd_tables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>expand_cmd_table</name><argument_list>(<argument><expr><name>list_var_tables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>expand_cmd_table</name><argument_list>(<argument><expr><name>list_sysvar_tables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>public</name> <name>void</name></type>
<name>init_cmds</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>



<expr_stmt><expr><call><name>add_fcmd_table</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>cmdtable</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cmdtable</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_ecmd_table</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>edittable</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>edittable</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USERFILE</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BINDIR</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>add_hometable</name><argument_list>(<argument><expr><name>lesskey</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>BINDIR</name> <literal type="string">"/.sysless"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_LESSKEYSRC</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>add_hometable</name><argument_list>(<argument><expr><name>lesskey_src</name></expr></argument>, <argument><expr><literal type="string">"LESSKEYIN_SYSTEM"</literal></expr></argument>, <argument><expr><name>LESSKEYINFILE_SYS</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>



<expr_stmt><expr><call><name>add_hometable</name><argument_list>(<argument><expr><name>lesskey</name></expr></argument>, <argument><expr><literal type="string">"LESSKEY_SYSTEM"</literal></expr></argument>, <argument><expr><name>LESSKEYFILE_SYS</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_LESSKEYSRC</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>add_hometable</name><argument_list>(<argument><expr><name>lesskey_src</name></expr></argument>, <argument><expr><literal type="string">"LESSKEYIN"</literal></expr></argument>, <argument><expr><name>DEF_LESSKEYINFILE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>



<expr_stmt><expr><call><name>add_hometable</name><argument_list>(<argument><expr><name>lesskey</name></expr></argument>, <argument><expr><literal type="string">"LESSKEY"</literal></expr></argument>, <argument><expr><name>LESSKEYFILE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>add_cmd_table</name><parameter_list>(<parameter><decl><type><name>tlist</name></type></decl></parameter>, <parameter><decl><type><name>buf</name></type></decl></parameter>, <parameter><decl><type><name>len</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name><name>struct</name> <name>tablelist</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>tlist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tablelist</name></name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name>t</name> <operator>=</operator> <operator>(</operator>struct <name>tablelist</name> <operator>*</operator><operator>)</operator>
<call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>tablelist</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>t_start</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>t_end</name></name> <operator>=</operator> <name>buf</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>t_next</name></name> <operator>=</operator> <operator>*</operator><name>tlist</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>tlist</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>public</name> <name>void</name></type>
<name>add_fcmd_table</name><parameter_list>(<parameter><decl><type><name>buf</name></type></decl></parameter>, <parameter><decl><type><name>len</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>add_cmd_table</name><argument_list>(<argument><expr><operator>&amp;</operator><name>list_fcmd_tables</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Warning: some commands disabled"</literal></expr></argument>, <argument><expr><name>NULL_PARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><name>public</name> <name>void</name></type>
<name>add_ecmd_table</name><parameter_list>(<parameter><decl><type><name>buf</name></type></decl></parameter>, <parameter><decl><type><name>len</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>add_cmd_table</name><argument_list>(<argument><expr><operator>&amp;</operator><name>list_ecmd_tables</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Warning: some edit commands disabled"</literal></expr></argument>, <argument><expr><name>NULL_PARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>add_var_table</name><parameter_list>(<parameter><decl><type><name>tlist</name></type></decl></parameter>, <parameter><decl><type><name>buf</name></type></decl></parameter>, <parameter><decl><type><name>len</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name><name>struct</name> <name>tablelist</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>tlist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>add_cmd_table</name><argument_list>(<argument><expr><name>tlist</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Warning: environment variables from lesskey file unavailable"</literal></expr></argument>, <argument><expr><name>NULL_PARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>mouse_wheel_down</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>mousecap</name> <operator>==</operator> <name>OPT_ONPLUS</name><operator>)</operator></expr> ?</condition><then> <expr><name>A_B_MOUSE</name></expr> </then><else>: <expr><name>A_F_MOUSE</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>mouse_wheel_up</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>mousecap</name> <operator>==</operator> <name>OPT_ONPLUS</name><operator>)</operator></expr> ?</condition><then> <expr><name>A_F_MOUSE</name></expr> </then><else>: <expr><name>A_B_MOUSE</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>mouse_button_rel</name><parameter_list>(<parameter><decl><type><name>x</name></type></decl></parameter>, <parameter><decl><type><name>y</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
<block>{<block_content>




<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <name>sc_height</name><operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>setmark</name><argument_list>(<argument><expr><literal type="char">'#'</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>screen_trashed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>A_NOACTION</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>getcc_int</name><parameter_list>(<parameter><decl><type><name>pterm</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>pterm</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>digits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>ch</name> <init>= <expr><call><name>getcc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ch</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <name>ch</name></expr></argument> &gt;</argument_list></name> <literal type="char">'9'</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pterm</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>pterm</name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>digits</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>num</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>num</name> <operator>=</operator> <operator>(</operator><literal type="number">10</literal> <operator>*</operator> <name>num</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>ch</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>digits</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>x11mouse_action</name><parameter_list>(<parameter><decl><type><name>skip</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>skip</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><call><name>getcc</name><argument_list>()</argument_list></call> <operator>-</operator> <name>X11MOUSE_OFFSET</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><call><name>getcc</name><argument_list>()</argument_list></call> <operator>-</operator> <name>X11MOUSE_OFFSET</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><call><name>getcc</name><argument_list>()</argument_list></call> <operator>-</operator> <name>X11MOUSE_OFFSET</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>skip</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>A_NOACTION</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><name>b</name></expr>)</condition> <block>{<block_content>
<default>default:</default>
<return>return <expr><operator>(</operator><name>A_NOACTION</name><operator>)</operator></expr>;</return>
<case>case <expr><name>X11MOUSE_WHEEL_DOWN</name></expr>:</case>
<return>return <expr><call><name>mouse_wheel_down</name><argument_list>()</argument_list></call></expr>;</return>
<case>case <expr><name>X11MOUSE_WHEEL_UP</name></expr>:</case>
<return>return <expr><call><name>mouse_wheel_up</name><argument_list>()</argument_list></call></expr>;</return>
<case>case <expr><name>X11MOUSE_BUTTON_REL</name></expr>:</case>
<return>return <expr><call><name>mouse_button_rel</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>x116mouse_action</name><parameter_list>(<parameter><decl><type><name>skip</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>skip</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><call><name>getcc_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>ch</name> <operator>!=</operator> <literal type="char">';'</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>A_NOACTION</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>getcc_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ch</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>ch</name> <operator>!=</operator> <literal type="char">';'</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>A_NOACTION</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>getcc_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ch</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>A_NOACTION</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>skip</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>A_NOACTION</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><name>b</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>X11MOUSE_WHEEL_DOWN</name></expr>:</case>
<return>return <expr><call><name>mouse_wheel_down</name><argument_list>()</argument_list></call></expr>;</return>
<case>case <expr><name>X11MOUSE_WHEEL_UP</name></expr>:</case>
<return>return <expr><call><name>mouse_wheel_up</name><argument_list>()</argument_list></call></expr>;</return>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>!=</operator> <literal type="char">'m'</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>A_NOACTION</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>mouse_button_rel</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>cmd_search</name><parameter_list>(<parameter><decl><type><name>cmd</name></type></decl></parameter>, <parameter><decl><type><name>table</name></type></decl></parameter>, <parameter><decl><type><name>endtable</name></type></decl></parameter>, <parameter><decl><type><name>sp</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>table</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>endtable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>sp</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>sp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>table</name></expr><operator>,</operator> <expr><name>q</name> <operator>=</operator> <name>cmd</name></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>endtable</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr><operator>,</operator> <expr><name>q</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <operator>*</operator><name>q</name></expr>)</condition>
<block>{<block_content>







<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>p</name> <operator>&amp;</operator> <literal type="number">0377</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>a</name> <operator>==</operator> <name>A_SKIP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>p</name> <operator>&amp;</operator> <literal type="number">0377</literal></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <name>A_END_LIST</name></expr>)</condition>
<block>{<block_content>






<return>return <expr><operator>(</operator><name>A_UINVALID</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&amp;</operator> <name>A_EXTRA</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>sp</name> <operator>=</operator> <operator>++</operator><name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>&amp;=</operator> <operator>~</operator><name>A_EXTRA</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <name>A_X11MOUSE_IN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>x11mouse_action</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>a</name> <operator>==</operator> <name>A_X116MOUSE_IN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>x116mouse_action</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>a</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>q</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition>
<block>{<block_content>





<return>return <expr><operator>(</operator><name>A_PREFIX</name><operator>)</operator></expr>;</return>
</block_content>}</block></if> <else>else
<block>{<block_content>






<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>A_END_LIST</name></expr>)</condition>
<block>{<block_content>




<return>return <expr><operator>(</operator><name>A_UINVALID</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name><operator>++</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></while>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>A_SKIP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>&amp;</operator> <name>A_EXTRA</name></expr>)</condition><block type="pseudo"><block_content>
<while>while <condition>(<expr><operator>*</operator><operator>++</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></while></block_content></block></if></if_stmt>
<expr_stmt><expr><name>q</name> <operator>=</operator> <name>cmd</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>



<return>return <expr><operator>(</operator><name>A_INVALID</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>cmd_decode</name><parameter_list>(<parameter><decl><type><name>tlist</name></type></decl></parameter>, <parameter><decl><type><name>cmd</name></type></decl></parameter>, <parameter><decl><type><name>sp</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name><name>struct</name> <name>tablelist</name></name> <modifier>*</modifier></type><name>tlist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>sp</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tablelist</name></name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>action</name> <init>= <expr><name>A_INVALID</name></expr></init></decl>;</decl_stmt>





<for>for <control>(<init><expr><name>t</name> <operator>=</operator> <name>tlist</name></expr>;</init> <condition><expr><name>t</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>t</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>t_next</name></name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>action</name> <operator>=</operator> <call><name>cmd_search</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>t_start</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>t_end</name></name></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>action</name> <operator>!=</operator> <name>A_INVALID</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>action</name> <operator>==</operator> <name>A_UINVALID</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>action</name> <operator>=</operator> <name>A_INVALID</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>action</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>public</name> <name>int</name></type>
<name>fcmd_decode</name><parameter_list>(<parameter><decl><type><name>cmd</name></type></decl></parameter>, <parameter><decl><type><name>sp</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>sp</name></decl>;</decl_stmt>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>cmd_decode</name><argument_list>(<argument><expr><name>list_fcmd_tables</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>public</name> <name>int</name></type>
<name>ecmd_decode</name><parameter_list>(<parameter><decl><type><name>cmd</name></type></decl></parameter>, <parameter><decl><type><name>sp</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>sp</name></decl>;</decl_stmt>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>cmd_decode</name><argument_list>(<argument><expr><name>list_ecmd_tables</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>public</name> <name>char</name> <modifier>*</modifier></type>
<name>lgetenv</name><parameter_list>(<parameter><decl><type><name>var</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>var</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>cmd_decode</name><argument_list>(<argument><expr><name>list_var_tables</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <name>EV_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>s</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>s</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>cmd_decode</name><argument_list>(<argument><expr><name>list_sysvar_tables</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <name>EV_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>s</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>public</name> <name>int</name></type>
<name>isnullenv</name><parameter_list>(<parameter><decl><type><name>s</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>s</name></decl>;</decl_stmt>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>s</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USERFILE</name></expr></cpp:if>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>gint</name><parameter_list>(<parameter><decl><type><name>sp</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>sp</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>sp</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>+=</operator> <operator>*</operator><operator>(</operator><operator>*</operator><name>sp</name><operator>)</operator><operator>++</operator> <operator>*</operator> <name>KRADIX</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>n</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>old_lesskey</name><parameter_list>(<parameter><decl><type><name>buf</name></type></decl></parameter>, <parameter><decl><type><name>len</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<block>{<block_content>







<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>add_fcmd_table</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>new_lesskey</name><parameter_list>(<parameter><decl><type><name>buf</name></type></decl></parameter>, <parameter><decl><type><name>len</name></type></decl></parameter>, <parameter><decl><type><name>sysvar</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sysvar</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <name>C0_END_LESSKEY_MAGIC</name> <operator>||</operator>
<name><name>buf</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <name>C1_END_LESSKEY_MAGIC</name> <operator>||</operator>
<name><name>buf</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>C2_END_LESSKEY_MAGIC</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>c</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>CMD_SECTION</name></expr>:</case>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>gint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_fcmd_table</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>EDIT_SECTION</name></expr>:</case>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>gint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_ecmd_table</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>VAR_SECTION</name></expr>:</case>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>gint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_var_table</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name>sysvar</name><operator>)</operator></expr> ?</condition><then>
<expr><operator>&amp;</operator><name>list_sysvar_tables</name></expr> </then><else>: <expr><operator>&amp;</operator><name>list_var_tables</name></expr></else></ternary></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>END_SECTION</name></expr>:</case>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
<default>default:</default>



<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><name>public</name> <name>int</name></type>
<name>lesskey</name><parameter_list>(<parameter><decl><type><name>filename</name></type></decl></parameter>, <parameter><decl><type><name>sysvar</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sysvar</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>POSITION</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>f</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>secure</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>OPEN_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>









<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>filesize</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <name>NULL_POSITION</name> <operator>||</operator> <name>len</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>buf</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>calloc</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lseek</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><operator>(</operator><name>off_t</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BAD_LSEEK</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <name>len</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>C0_LESSKEY_MAGIC</name> <operator>||</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>C1_LESSKEY_MAGIC</name> <operator>||</operator>
<name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <name>C2_LESSKEY_MAGIC</name> <operator>||</operator> <name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <name>C3_LESSKEY_MAGIC</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>old_lesskey</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>new_lesskey</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></argument>, <argument><expr><name>sysvar</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_LESSKEYSRC</name></expr></cpp:if>
<function><type><name>public</name> <name>int</name></type>
<name>lesskey_src</name><parameter_list>(<parameter><decl><type><name>filename</name></type></decl></parameter>, <parameter><decl><type><name>sysvar</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sysvar</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>lesskey_tables</name></name></type> <name>tables</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>parse_lesskey</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tables</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>add_fcmd_table</name><argument_list>(<argument><expr><name><name>tables</name><operator>.</operator><name>cmdtable</name><operator>.</operator><name>buf</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>tables</name><operator>.</operator><name>cmdtable</name><operator>.</operator><name>buf</name><operator>.</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_ecmd_table</name><argument_list>(<argument><expr><name><name>tables</name><operator>.</operator><name>edittable</name><operator>.</operator><name>buf</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>tables</name><operator>.</operator><name>edittable</name><operator>.</operator><name>buf</name><operator>.</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_var_table</name><argument_list>(<argument><expr><ternary><condition><expr><name>sysvar</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>list_sysvar_tables</name></expr> </then><else>: <expr><operator>&amp;</operator><name>list_var_tables</name></expr></else></ternary></expr></argument>,
<argument><expr><name><name>tables</name><operator>.</operator><name>vartable</name><operator>.</operator><name>buf</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>tables</name><operator>.</operator><name>vartable</name><operator>.</operator><name>buf</name><operator>.</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>lesskey_parse_error</name><parameter_list>(<parameter><decl><type><name>s</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>PARG</name></type> <name>parg</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>parg</name><operator>.</operator><name>p_string</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>parg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<decl_stmt><decl><type><name>public</name> <name>int</name></type>
<name>add_hometable</name><argument_list>(<argument><expr><name>call_lesskey</name></expr></argument>, <argument><expr><name>envname</name></expr></argument>, <argument><expr><name>def_filename</name></expr></argument>, <argument><expr><name>sysvar</name></expr></argument>)</argument_list>
<name>int</name> <argument_list>(<argument><expr><operator>*</operator><name>call_lesskey</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>envname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>def_filename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sysvar</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>envname</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>filename</name> <operator>=</operator> <call><name>lgetenv</name><argument_list>(<argument><expr><name>envname</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>filename</name> <operator>=</operator> <call><name>save</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>sysvar</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>filename</name> <operator>=</operator> <call><name>save</name><argument_list>(<argument><expr><name>def_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>xdg</name> <init>= <expr><call><name>lgetenv</name><argument_list>(<argument><expr><literal type="string">"XDG_CONFIG_HOME"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isnullenv</name><argument_list>(<argument><expr><name>xdg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>filename</name> <operator>=</operator> <call><name>dirfile</name><argument_list>(<argument><expr><name>xdg</name></expr></argument>, <argument><expr><name>def_filename</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>filename</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>filename</name> <operator>=</operator> <call><name>homefile</name><argument_list>(<argument><expr><name>def_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>filename</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call>(<modifier>*</modifier><name>call_lesskey</name>)<argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>sysvar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><name>public</name> <name>int</name></type>
<name>editchar</name><parameter_list>(<parameter><decl><type><name>c</name></type></decl></parameter>, <parameter><decl><type><name>flags</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>action</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>usercmd</name><index>[<expr><name>MAX_CMDLEN</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>








<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>erase_char</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>erase2_char</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>EC_BACKSPACE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>kill_char</name></expr>)</condition>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>WIN32C</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>win32_kbhit</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><operator>(</operator><name>EC_LINEKILL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name>nch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>nch</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getcc</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>usercmd</name><index>[<expr><name>nch</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>usercmd</name><index>[<expr><name>nch</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nch</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>action</name> <operator>=</operator> <call><name>ecmd_decode</name><argument_list>(<argument><expr><name>usercmd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>action</name> <operator>==</operator> <name>A_PREFIX</name> <operator>&amp;&amp;</operator> <name>nch</name> <operator>&lt;</operator> <name>MAX_CMDLEN</name></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>action</name> <operator>==</operator> <name>EC_X11MOUSE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>x11mouse_action</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>action</name> <operator>==</operator> <name>EC_X116MOUSE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>x116mouse_action</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ECF_NORIGHTLEFT</name></expr>)</condition>
<block>{<block_content>
<switch>switch <condition>(<expr><name>action</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>EC_RIGHT</name></expr>:</case>
<case>case <expr><name>EC_LEFT</name></expr>:</case>
<expr_stmt><expr><name>action</name> <operator>=</operator> <name>A_INVALID</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CMD_HISTORY</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ECF_NOHISTORY</name></expr>)</condition>
<block>{<block_content>




<switch>switch <condition>(<expr><name>action</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>EC_UP</name></expr>:</case>
<case>case <expr><name>EC_DOWN</name></expr>:</case>
<expr_stmt><expr><name>action</name> <operator>=</operator> <name>A_INVALID</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TAB_COMPLETE_FILENAME</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ECF_NOCOMPLETE</name></expr>)</condition>
<block>{<block_content>




<switch>switch <condition>(<expr><name>action</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>EC_F_COMPLETE</name></expr>:</case>
<case>case <expr><name>EC_B_COMPLETE</name></expr>:</case>
<case>case <expr><name>EC_EXPAND</name></expr>:</case>
<expr_stmt><expr><name>action</name> <operator>=</operator> <name>A_INVALID</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ECF_PEEK</name><operator>)</operator> <operator>||</operator> <name>action</name> <operator>==</operator> <name>A_INVALID</name></expr>)</condition>
<block>{<block_content>






<while>while <condition>(<expr><name>nch</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>ungetcc</name><argument_list>(<argument><expr><name><name>usercmd</name><index>[<expr><operator>--</operator><name>nch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if> <else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ungetsc</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>action</name></expr>;</return>
</block_content>}</block></function>

</unit>
