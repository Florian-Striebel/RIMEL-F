<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/less/forwback.c">















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"less.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"position.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>screen_trashed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>squished</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>no_back_scroll</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>public</name> <name>int</name></type> <name>forw_prompt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>sigs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>top_scroll</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>quiet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>sc_width</name></decl>, <decl><type ref="prev"/><name>sc_height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>less_is_more</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>plusoption</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>forw_scroll</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>back_scroll</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>ignore_eoi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>clear_bg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>final_attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>oldbot</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HILITE_SEARCH</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>size_linebuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>hilite_search</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>status_col</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TAGS</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>tagoption</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>eof_bell</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_TIME</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>time_type</name></type> <name>last_eof_bell</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_type</name></type> <name>now</name> <init>= <expr><call><name>get_time</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>now</name> <operator>==</operator> <name>last_eof_bell</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>last_eof_bell</name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>quiet</name> <operator>==</operator> <name>NOT_QUIET</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bell</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>vbell</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>




<function><type><name>public</name> <name>int</name></type>
<name>eof_displayed</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>POSITION</name></type> <name>pos</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ignore_eoi</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ch_length</name><argument_list>()</argument_list></call> <operator>==</operator> <name>NULL_POSITION</name></expr>)</condition><block type="pseudo"><block_content>




<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>






<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>position</name><argument_list>(<argument><expr><name>BOTTOM_PLUS_ONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>pos</name> <operator>==</operator> <name>NULL_POSITION</name> <operator>||</operator> <name>pos</name> <operator>==</operator> <call><name>ch_length</name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>public</name> <name>int</name></type>
<name>entire_file_displayed</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>POSITION</name></type> <name>pos</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>eof_displayed</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>position</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>pos</name> <operator>==</operator> <name>NULL_POSITION</name> <operator>||</operator> <name>pos</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>







<function><type><name>public</name> <name>void</name></type>
<name>squish_check</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>squished</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>squished</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>repaint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>










<function><type><name>public</name> <name>void</name></type>
<name>forw</name><parameter_list>(<parameter><decl><type><name>n</name></type></decl></parameter>, <parameter><decl><type><name>pos</name></type></decl></parameter>, <parameter><decl><type><name>force</name></type></decl></parameter>, <parameter><decl><type><name>only_last</name></type></decl></parameter>, <parameter><decl><type><name>nblank</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>POSITION</name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>force</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>only_last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nblank</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nlines</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>do_repaint</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>first_time</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>squish_check</name><argument_list>()</argument_list></call></expr>;</expr_stmt>










<expr_stmt><expr><name>do_repaint</name> <operator>=</operator> <operator>(</operator><name>only_last</name> <operator>&amp;&amp;</operator> <name>n</name> <operator>&gt;</operator> <name>sc_height</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>||</operator>
<operator>(</operator><name>forw_scroll</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>n</name> <operator>&gt;</operator> <name>forw_scroll</name> <operator>&amp;&amp;</operator> <name>n</name> <operator>!=</operator> <name>sc_height</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HILITE_SEARCH</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>hilite_search</name> <operator>==</operator> <name>OPT_ONPLUS</name> <operator>||</operator> <call><name>is_filtering</name><argument_list>()</argument_list></call> <operator>||</operator> <name>status_col</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>prep_hilite</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>pos</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name>size_linebuf</name></expr></argument>, <argument><expr><ternary><condition><expr><name>ignore_eoi</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>next_unfiltered</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>do_repaint</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>top_scroll</name> <operator>&amp;&amp;</operator> <name>n</name> <operator>&gt;=</operator> <name>sc_height</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>pos</name> <operator>!=</operator> <call><name>ch_length</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>






<expr_stmt><expr><call><name>pos_clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_forw_pos</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>force</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>less_is_more</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>home</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>!=</operator> <call><name>position</name><argument_list>(<argument><expr><name>BOTTOM_PLUS_ONE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>empty_screen</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>





<expr_stmt><expr><call><name>pos_clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_forw_pos</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>force</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>top_scroll</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>home</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>first_time</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_filtering</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>putstr</name><argument_list>(<argument><expr><literal type="string">"...skipping...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>--</operator><name>n</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>nblank</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>






<if_stmt><if>if <condition>(<expr><operator>--</operator><name>nblank</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>ch_zero</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else
<block>{<block_content>



<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>forw_line</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HILITE_SEARCH</name></expr></cpp:if>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>next_unfiltered</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <name>NULL_POSITION</name></expr>)</condition>
<block>{<block_content>






<if_stmt><if>if <condition>(<expr><operator>!</operator><name>force</name> <operator>&amp;&amp;</operator> <call><name>position</name><argument_list>(<argument><expr><name>TOP</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL_POSITION</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>empty_lines</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>empty_lines</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>empty_lines</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>sc_height</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>




<expr_stmt><expr><call><name>add_forw_pos</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nlines</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>do_repaint</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>










<if_stmt><if>if <condition>(<expr><operator>(</operator><name>first_time</name> <operator>||</operator> <name>less_is_more</name><operator>)</operator> <operator>&amp;&amp;</operator>
<name>pos</name> <operator>==</operator> <name>NULL_POSITION</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>top_scroll</name> <operator>&amp;&amp;</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TAGS</name></expr></cpp:if>
<name>tagoption</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>!</operator><name>plusoption</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>squished</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>put_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>








if (clear_bg &amp;&amp; apply_at_specials(final_attr) != AT_NORMAL)
{







clear_eol();
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>forw_prompt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>nlines</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>ignore_eoi</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>eof_bell</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>do_repaint</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>repaint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>first_time</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>currline</name><argument_list>(<argument><expr><name>BOTTOM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>public</name> <name>void</name></type>
<name>back</name><parameter_list>(<parameter><decl><type><name>n</name></type></decl></parameter>, <parameter><decl><type><name>pos</name></type></decl></parameter>, <parameter><decl><type><name>force</name></type></decl></parameter>, <parameter><decl><type><name>only_last</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>POSITION</name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>force</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>only_last</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nlines</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>do_repaint</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>squish_check</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>do_repaint</name> <operator>=</operator> <operator>(</operator><name>n</name> <operator>&gt;</operator> <call><name>get_back_scroll</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>(</operator><name>only_last</name> <operator>&amp;&amp;</operator> <name>n</name> <operator>&gt;</operator> <name>sc_height</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HILITE_SEARCH</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>hilite_search</name> <operator>==</operator> <name>OPT_ONPLUS</name> <operator>||</operator> <call><name>is_filtering</name><argument_list>()</argument_list></call> <operator>||</operator> <name>status_col</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>prep_hilite</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name>pos</name> <operator>&lt;</operator> <literal type="number">3</literal><operator>*</operator><name>size_linebuf</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>pos</name> <operator>-</operator> <literal type="number">3</literal><operator>*</operator><name>size_linebuf</name></expr></else></ternary></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<while>while <condition>(<expr><operator>--</operator><name>n</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HILITE_SEARCH</name></expr></cpp:if>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>prev_unfiltered</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>back_line</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <name>NULL_POSITION</name></expr>)</condition>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name>force</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><call><name>add_back_pos</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nlines</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>do_repaint</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>home</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>nlines</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>eof_bell</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>do_repaint</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>repaint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name>oldbot</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lower_left</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>currline</name><argument_list>(<argument><expr><name>BOTTOM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>public</name> <name>void</name></type>
<name>forward</name><parameter_list>(<parameter><decl><type><name>n</name></type></decl></parameter>, <parameter><decl><type><name>force</name></type></decl></parameter>, <parameter><decl><type><name>only_last</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>force</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>only_last</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>POSITION</name></type> <name>pos</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_quit_at_eof</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>eof_displayed</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><call><name>ch_getflags</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>CH_HELPFILE</name><operator>)</operator></expr>)</condition>
<block>{<block_content>




<if_stmt><if>if <condition>(<expr><call><name>edit_next</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>quit</name><argument_list>(<argument><expr><name>QUIT_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>position</name><argument_list>(<argument><expr><name>BOTTOM_PLUS_ONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <name>NULL_POSITION</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>force</name> <operator>||</operator> <call><name>empty_lines</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>sc_height</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ignore_eoi</name></expr>)</condition>
<block>{<block_content>





<if_stmt><if>if <condition>(<expr><call><name>empty_screen</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>ch_zero</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<do>do
<block>{<block_content>
<expr_stmt><expr><call><name>back</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>position</name><argument_list>(<argument><expr><name>TOP</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>position</name><argument_list>(<argument><expr><name>BOTTOM_PLUS_ONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>pos</name> <operator>==</operator> <name>NULL_POSITION</name></expr>)</condition>;</do>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else
<block>{<block_content>
<expr_stmt><expr><call><name>eof_bell</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>forw</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>force</name></expr></argument>, <argument><expr><name>only_last</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>public</name> <name>void</name></type>
<name>backward</name><parameter_list>(<parameter><decl><type><name>n</name></type></decl></parameter>, <parameter><decl><type><name>force</name></type></decl></parameter>, <parameter><decl><type><name>only_last</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>force</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>only_last</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>POSITION</name></type> <name>pos</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>position</name><argument_list>(<argument><expr><name>TOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <name>NULL_POSITION</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>force</name> <operator>||</operator> <call><name>position</name><argument_list>(<argument><expr><name>BOTTOM</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>eof_bell</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>back</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>force</name></expr></argument>, <argument><expr><name>only_last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>public</name> <name>int</name></type>
<name>get_back_scroll</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>no_back_scroll</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>back_scroll</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>back_scroll</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>top_scroll</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>sc_height</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">10000</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><name>public</name> <name>int</name></type>
<name>get_one_screen</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nlines</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>POSITION</name></type> <name>pos</name> <init>= <expr><call><name>ch_zero</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>nlines</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>nlines</name> <operator>&lt;</operator> <name>sc_height</name></expr>;</condition> <incr><expr><name>nlines</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>forw_line</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <name>NULL_POSITION</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><name>nlines</name> <operator>&lt;</operator> <name>sc_height</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
