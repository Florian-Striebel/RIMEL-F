<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/less/command.c">














<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"less.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>WIN32C</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"position.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"option.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cmd.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>erase_char</name></decl>, <decl><type ref="prev"/><name>erase2_char</name></decl>, <decl><type ref="prev"/><name>kill_char</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>sigs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>quit_if_one_screen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>squished</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>sc_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>sc_height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>kent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>swindow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>jump_sline</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>quitting</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>wscroll</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>top_scroll</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>ignore_eoi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>secure</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>hshift</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>bs_mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>show_attn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>less_is_more</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>status_col</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>POSITION</name></type> <name>highest_hilite</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>POSITION</name></type> <name>start_attnpos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>POSITION</name></type> <name>end_attnpos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>every_first_cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name></type> <name><name>version</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>scrpos</name></name></type> <name>initial_scrpos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>IFILE</name></type> <name>curr_ifile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <modifier>*</modifier></type><name>ml_search</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <modifier>*</modifier></type><name>ml_examine</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>wheel_lines</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SHELL_ESCAPE</name> <operator>||</operator> <name>PIPEC</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <modifier>*</modifier></type><name>ml_shell</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>EDITOR</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>editor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>editproto</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>screen_trashed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>shift_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>oldbot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>forw_prompt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>incr_search</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>WIN32C</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>utf_mode</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SHELL_ESCAPE</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>shellcmd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>mca</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>search_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>LINENUM</name></type> <name>number</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name>fraction</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>loption</name></name> <modifier>*</modifier></type><name>curropt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>opt_lower</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>optflag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>optgetname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>POSITION</name></type> <name>bottompos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>save_hshift</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>save_bs_mode</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PIPEC</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name>pipec</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<struct>struct <name>ungot</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>ungot</name></name> <modifier>*</modifier></type><name>ug_next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LWCHAR</name></type> <name>ug_char</name></decl>;</decl_stmt>
}</block>;</struct>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>ungot</name></name><modifier>*</modifier></type> <name>ungot</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <name>multi_search</name></type> <name>LESSPARAMS</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><name>pattern</name><operator>,</operator> <name>int</name> <name>n</name><operator>,</operator> <name>int</name> <name>silent</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>cmd_exec</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>clear_attn</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_bot</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_mca</name><parameter_list>(<parameter><decl><type><name>action</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>action</name></decl>;</decl_stmt>
<block>{<block_content>
<expr_stmt><expr><name>mca</name> <operator>=</operator> <name>action</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_bot</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_cmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>clear_mca</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mca</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>mca</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>start_mca</name><parameter_list>(<parameter><decl><type><name>action</name></type></decl></parameter>, <parameter><decl><type><name>prompt</name></type></decl></parameter>, <parameter><decl><type><name>mlist</name></type></decl></parameter>, <parameter><decl><type><name>cmdflags</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>action</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>constant</name> <name>char</name> <modifier>*</modifier></type><name>prompt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>mlist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cmdflags</name></decl>;</decl_stmt>
<block>{<block_content>
<expr_stmt><expr><call><name>set_mca</name><argument_list>(<argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cmd_putstr</name><argument_list>(<argument><expr><name>prompt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_mlist</name><argument_list>(<argument><expr><name>mlist</name></expr></argument>, <argument><expr><name>cmdflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>public</name> <name>int</name></type>
<name>in_mca</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>mca</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>mca</name> <operator>!=</operator> <name>A_PREFIX</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>mca_search</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HILITE_SEARCH</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>search_type</name> <operator>&amp;</operator> <name>SRCH_FILTER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_mca</name><argument_list>(<argument><expr><name>A_FILTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
if <condition>(<expr><name>search_type</name> <operator>&amp;</operator> <name>SRCH_FORW</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_mca</name><argument_list>(<argument><expr><name>A_F_SEARCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_mca</name><argument_list>(<argument><expr><name>A_B_SEARCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>search_type</name> <operator>&amp;</operator> <name>SRCH_NO_MATCH</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cmd_putstr</name><argument_list>(<argument><expr><literal type="string">"Non-match "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>search_type</name> <operator>&amp;</operator> <name>SRCH_FIRST_FILE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cmd_putstr</name><argument_list>(<argument><expr><literal type="string">"First-file "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>search_type</name> <operator>&amp;</operator> <name>SRCH_PAST_EOF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cmd_putstr</name><argument_list>(<argument><expr><literal type="string">"EOF-ignore "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>search_type</name> <operator>&amp;</operator> <name>SRCH_NO_MOVE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cmd_putstr</name><argument_list>(<argument><expr><literal type="string">"Keep-pos "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>search_type</name> <operator>&amp;</operator> <name>SRCH_NO_REGEX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cmd_putstr</name><argument_list>(<argument><expr><literal type="string">"Regex-off "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>search_type</name> <operator>&amp;</operator> <name>SRCH_WRAP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cmd_putstr</name><argument_list>(<argument><expr><literal type="string">"Wrap "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HILITE_SEARCH</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>search_type</name> <operator>&amp;</operator> <name>SRCH_FILTER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cmd_putstr</name><argument_list>(<argument><expr><literal type="string">"&amp;/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
if <condition>(<expr><name>search_type</name> <operator>&amp;</operator> <name>SRCH_FORW</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cmd_putstr</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cmd_putstr</name><argument_list>(<argument><expr><literal type="string">"?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>forw_prompt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_mlist</name><argument_list>(<argument><expr><name>ml_search</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>mca_opt_toggle</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>no_prompt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dash</name></decl>;</decl_stmt>

<expr_stmt><expr><name>no_prompt</name> <operator>=</operator> <operator>(</operator><name>optflag</name> <operator>&amp;</operator> <name>OPT_NO_PROMPT</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <operator>(</operator><name>optflag</name> <operator>&amp;</operator> <operator>~</operator><name>OPT_NO_PROMPT</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>dash</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>flag</name> <operator>==</operator> <name>OPT_NO_TOGGLE</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"_"</literal></expr> </then><else>: <expr><literal type="string">"-"</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_mca</name><argument_list>(<argument><expr><name>A_OPT_TOGGLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cmd_putstr</name><argument_list>(<argument><expr><name>dash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>optgetname</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cmd_putstr</name><argument_list>(<argument><expr><name>dash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>no_prompt</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cmd_putstr</name><argument_list>(<argument><expr><literal type="string">"(P)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><name>flag</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>OPT_UNSET</name></expr>:</case>
<expr_stmt><expr><call><name>cmd_putstr</name><argument_list>(<argument><expr><literal type="string">"+"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>OPT_SET</name></expr>:</case>
<expr_stmt><expr><call><name>cmd_putstr</name><argument_list>(<argument><expr><literal type="string">"!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name>forw_prompt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_mlist</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>exec_mca</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cbuf</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>cmd_exec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cbuf</name> <operator>=</operator> <call><name>get_cmdbuf</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>mca</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>A_F_SEARCH</name></expr>:</case>
<case>case <expr><name>A_B_SEARCH</name></expr>:</case>
<expr_stmt><expr><call><name>multi_search</name><argument_list>(<argument><expr><name>cbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>number</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HILITE_SEARCH</name></expr></cpp:if>
<case>case <expr><name>A_FILTER</name></expr>:</case>
<expr_stmt><expr><name>search_type</name> <operator>^=</operator> <name>SRCH_NO_MATCH</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_filter_pattern</name><argument_list>(<argument><expr><name>cbuf</name></expr></argument>, <argument><expr><name>search_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>A_FIRSTCMD</name></expr>:</case>



<while>while <condition>(<expr><operator>*</operator><name>cbuf</name> <operator>==</operator> <literal type="char">'+'</literal> <operator>||</operator> <operator>*</operator><name>cbuf</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cbuf</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>every_first_cmd</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>every_first_cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cbuf</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>every_first_cmd</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>every_first_cmd</name> <operator>=</operator> <call><name>save</name><argument_list>(<argument><expr><name>cbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>A_OPT_TOGGLE</name></expr>:</case>
<expr_stmt><expr><call><name>toggle_option</name><argument_list>(<argument><expr><name>curropt</name></expr></argument>, <argument><expr><name>opt_lower</name></expr></argument>, <argument><expr><name>cbuf</name></expr></argument>, <argument><expr><name>optflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>curropt</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>A_F_BRACKET</name></expr>:</case>
<expr_stmt><expr><call><name>match_brac</name><argument_list>(<argument><expr><name><name>cbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>cbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>A_B_BRACKET</name></expr>:</case>
<expr_stmt><expr><call><name>match_brac</name><argument_list>(<argument><expr><name><name>cbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>cbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>EXAMINE</name></expr></cpp:if>
<case>case <expr><name>A_EXAMINE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>secure</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>edit_list</name><argument_list>(<argument><expr><name>cbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TAGS</name></expr></cpp:if>

<expr_stmt><expr><call><name>cleantags</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SHELL_ESCAPE</name></expr></cpp:if>
<case>case <expr><name>A_SHELL</name></expr>:</case>





<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cbuf</name> <operator>!=</operator> <literal type="char">'!'</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>shellcmd</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>shellcmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>shellcmd</name> <operator>=</operator> <call><name>fexpand</name><argument_list>(<argument><expr><name>cbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>secure</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>shellcmd</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lsystem</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"!done"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>lsystem</name><argument_list>(<argument><expr><name>shellcmd</name></expr></argument>, <argument><expr><literal type="string">"!done"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PIPEC</name></expr></cpp:if>
<case>case <expr><name>A_PIPE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>secure</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pipe_mark</name><argument_list>(<argument><expr><name>pipec</name></expr></argument>, <argument><expr><name>cbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"|done"</literal></expr></argument>, <argument><expr><name>NULL_PARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></switch>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>is_erase_char</name><parameter_list>(<parameter><decl><type><name>c</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>c</name> <operator>==</operator> <name>erase_char</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>erase2_char</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>kill_char</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>is_newline_char</name><parameter_list>(<parameter><decl><type><name>c</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\r'</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>mca_opt_first_char</name><parameter_list>(<parameter><decl><type><name>c</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>flag</name> <init>= <expr><operator>(</operator><name>optflag</name> <operator>&amp;</operator> <operator>~</operator><name>OPT_NO_PROMPT</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>flag</name> <operator>==</operator> <name>OPT_NO_TOGGLE</name></expr>)</condition>
<block>{<block_content>
<switch>switch <condition>(<expr><name>c</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'_'</literal></expr>:</case>

<expr_stmt><expr><name>optgetname</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mca_opt_toggle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>MCA_MORE</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></if> <else>else
<block>{<block_content>
<switch>switch <condition>(<expr><name>c</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'+'</literal></expr>:</case>

<expr_stmt><expr><name>optflag</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>flag</name> <operator>==</operator> <name>OPT_UNSET</name><operator>)</operator></expr> ?</condition><then>
<expr><name>OPT_TOGGLE</name></expr> </then><else>: <expr><name>OPT_UNSET</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mca_opt_toggle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>MCA_MORE</name><operator>)</operator></expr>;</return>
<case>case <expr><literal type="char">'!'</literal></expr>:</case>

<expr_stmt><expr><name>optflag</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>flag</name> <operator>==</operator> <name>OPT_SET</name><operator>)</operator></expr> ?</condition><then>
<expr><name>OPT_TOGGLE</name></expr> </then><else>: <expr><name>OPT_SET</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mca_opt_toggle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>MCA_MORE</name><operator>)</operator></expr>;</return>
<case>case <expr><call><name>CONTROL</name><argument_list>(<argument><expr><literal type="char">'P'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name>optflag</name> <operator>^=</operator> <name>OPT_NO_PROMPT</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mca_opt_toggle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>MCA_MORE</name><operator>)</operator></expr>;</return>
<case>case <expr><literal type="char">'-'</literal></expr>:</case>

<expr_stmt><expr><name>optgetname</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mca_opt_toggle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>MCA_MORE</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><name>NO_MCA</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type>
<name>mca_opt_nonfirst_char</name><parameter_list>(<parameter><decl><type><name>c</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>oname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>curropt</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>




<if_stmt><if>if <condition>(<expr><call><name>is_erase_char</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>MCA_DONE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>MCA_MORE</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>cmd_char</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CC_QUIT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>MCA_DONE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>get_cmdbuf</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>opt_lower</name> <operator>=</operator> <call><name>ASCII_IS_LOWER</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>curropt</name> <operator>=</operator> <call><name>findopt_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>curropt</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>





<expr_stmt><expr><call><name>cmd_reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mca_opt_toggle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>oname</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>opt_lower</name> <operator>&amp;&amp;</operator> <call><name>ASCII_IS_LOWER</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>ASCII_TO_UPPER</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>cmd_char</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CC_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>MCA_DONE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>err</name> <operator>!=</operator> <name>OPT_AMBIG</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>bell</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>MCA_MORE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>mca_opt_char</name><parameter_list>(<parameter><decl><type><name>c</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>PARG</name></type> <name>parg</name></decl>;</decl_stmt>






<if_stmt><if>if <condition>(<expr><name>curropt</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>len_cmdbuf</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>mca_opt_first_char</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>NO_MCA</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>optgetname</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_newline_char</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>mca_opt_nonfirst_char</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>curropt</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>parg</name><operator>.</operator><name>p_string</name></name> <operator>=</operator> <call><name>get_cmdbuf</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"There is no --%s option"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>parg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>MCA_DONE</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>optgetname</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cmd_reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>is_erase_char</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NO_MCA</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>curropt</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>NO_MCA</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>curropt</name> <operator>=</operator> <call><name>findopt</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>curropt</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>parg</name><operator>.</operator><name>p_string</name></name> <operator>=</operator> <call><name>propt</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"There is no %s option"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>parg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>MCA_DONE</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>opt_lower</name> <operator>=</operator> <call><name>ASCII_IS_LOWER</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name>optflag</name> <operator>&amp;</operator> <operator>~</operator><name>OPT_NO_PROMPT</name><operator>)</operator> <operator>!=</operator> <name>OPT_TOGGLE</name> <operator>||</operator>
<operator>!</operator><call><name>opt_has_param</name><argument_list>(<argument><expr><name>curropt</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>toggle_option</name><argument_list>(<argument><expr><name>curropt</name></expr></argument>, <argument><expr><name>opt_lower</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>optflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>MCA_DONE</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><call><name>start_mca</name><argument_list>(<argument><expr><name>A_OPT_TOGGLE</name></expr></argument>, <argument><expr><call><name>opt_prompt</name><argument_list>(<argument><expr><name>curropt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>MCA_MORE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>mca_search_char</name><parameter_list>(<parameter><decl><type><name>c</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>








<if_stmt><if>if <condition>(<expr><call><name>len_cmdbuf</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NO_MCA</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>c</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'*'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>less_is_more</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<case>case <expr><call><name>CONTROL</name><argument_list>(<argument><expr><literal type="char">'E'</literal></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>mca</name> <operator>!=</operator> <name>A_FILTER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <name>SRCH_PAST_EOF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'@'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>less_is_more</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<case>case <expr><call><name>CONTROL</name><argument_list>(<argument><expr><literal type="char">'F'</literal></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>mca</name> <operator>!=</operator> <name>A_FILTER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <name>SRCH_FIRST_FILE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><call><name>CONTROL</name><argument_list>(<argument><expr><literal type="char">'K'</literal></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>mca</name> <operator>!=</operator> <name>A_FILTER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <name>SRCH_NO_MOVE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><call><name>CONTROL</name><argument_list>(<argument><expr><literal type="char">'W'</literal></expr></argument>)</argument_list></call></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>mca</name> <operator>!=</operator> <name>A_FILTER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <name>SRCH_WRAP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><call><name>CONTROL</name><argument_list>(<argument><expr><literal type="char">'R'</literal></expr></argument>)</argument_list></call></expr>:</case>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <name>SRCH_NO_REGEX</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><call><name>CONTROL</name><argument_list>(<argument><expr><literal type="char">'N'</literal></expr></argument>)</argument_list></call></expr>:</case>
<case>case <expr><literal type="char">'!'</literal></expr>:</case>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <name>SRCH_NO_MATCH</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>flag</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>search_type</name> <operator>^=</operator> <name>flag</name> <operator>|</operator> <operator>(</operator><name>search_type</name> <operator>&amp;</operator> <operator>(</operator><name>SRCH_PAST_EOF</name><operator>|</operator><name>SRCH_WRAP</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mca_search</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>MCA_MORE</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>NO_MCA</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>mca_char</name><parameter_list>(<parameter><decl><type><name>c</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>mca</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>



<return>return <expr><operator>(</operator><name>NO_MCA</name><operator>)</operator></expr>;</return>

<case>case <expr><name>A_PREFIX</name></expr>:</case>






<return>return <expr><operator>(</operator><name>NO_MCA</name><operator>)</operator></expr>;</return>

<case>case <expr><name>A_DIGIT</name></expr>:</case>




<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><call><name>editchar</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>ECF_PEEK</name><operator>|</operator><name>ECF_NOHISTORY</name><operator>|</operator><name>ECF_NOCOMPLETE</name><operator>|</operator><name>ECF_NORIGHTLEFT</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>A_NOACTION</name></expr>:</case>



<return>return <expr><operator>(</operator><name>MCA_MORE</name><operator>)</operator></expr>;</return>
<case>case <expr><name>A_INVALID</name></expr>:</case>





<expr_stmt><expr><name>number</name> <operator>=</operator> <call><name>cmd_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fraction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clear_mca</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cmd_accept</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NO_MCA</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
<break>break;</break>

<case>case <expr><name>A_OPT_TOGGLE</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mca_opt_char</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>NO_MCA</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>A_F_SEARCH</name></expr>:</case>
<case>case <expr><name>A_B_SEARCH</name></expr>:</case>
<case>case <expr><name>A_FILTER</name></expr>:</case>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mca_search_char</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>NO_MCA</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>

<default>default:</default>

<break>break;</break>
</block_content>}</block></switch>




<if_stmt><if>if <condition>(<expr><call><name>is_newline_char</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><call><name>exec_mca</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>MCA_DONE</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>cmd_char</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CC_QUIT</name></expr>)</condition><block type="pseudo"><block_content>



<return>return <expr><operator>(</operator><name>MCA_DONE</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>mca</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>A_F_BRACKET</name></expr>:</case>
<case>case <expr><name>A_B_BRACKET</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>len_cmdbuf</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>





<expr_stmt><expr><call><name>exec_mca</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>MCA_DONE</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>A_F_SEARCH</name></expr>:</case>
<case>case <expr><name>A_B_SEARCH</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>incr_search</name></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>st</name> <init>= <expr><operator>(</operator><name>search_type</name> <operator>&amp;</operator> <operator>(</operator><name>SRCH_FORW</name><operator>|</operator><name>SRCH_BACK</name><operator>|</operator><name>SRCH_NO_MATCH</name><operator>|</operator><name>SRCH_NO_REGEX</name><operator>|</operator><name>SRCH_NO_MOVE</name><operator>|</operator><name>SRCH_WRAP</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pattern</name> <init>= <expr><call><name>get_cmdbuf</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>cmd_exec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pattern</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>undo_search</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>search</name><argument_list>(<argument><expr><name>st</name> <operator>|</operator> <name>SRCH_INCR</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>undo_search</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>mca_search</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cmd_repaint</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>




<return>return <expr><operator>(</operator><name>MCA_MORE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>clear_buffers</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>ch_getflags</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>CH_CANSEEK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ch_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>clr_linenum</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HILITE_SEARCH</name></expr></cpp:if>
<expr_stmt><expr><call><name>clr_hilite</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>make_display</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><call><name>empty_screen</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>initial_scrpos</name><operator>.</operator><name>pos</name></name> <operator>==</operator> <name>NULL_POSITION</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>jump_loc</name><argument_list>(<argument><expr><call><name>ch_zero</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>jump_loc</name><argument_list>(<argument><expr><name><name>initial_scrpos</name><operator>.</operator><name>pos</name></name></expr></argument>, <argument><expr><name><name>initial_scrpos</name><operator>.</operator><name>ln</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>screen_trashed</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>save_top_scroll</name> <init>= <expr><name>top_scroll</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_ignore_eoi</name> <init>= <expr><name>ignore_eoi</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>top_scroll</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ignore_eoi</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>screen_trashed</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><call><name>reopen_curr_ifile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>jump_forw</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>repaint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>top_scroll</name> <operator>=</operator> <name>save_top_scroll</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ignore_eoi</name> <operator>=</operator> <name>save_ignore_eoi</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>prompt</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>constant</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ungot</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>ungot</name><operator>-&gt;</operator><name>ug_char</name></name> <operator>!=</operator> <name>CHAR_END_COMMAND</name></expr>)</condition>
<block>{<block_content>




<return>return;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><call><name>make_display</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bottompos</name> <operator>=</operator> <call><name>position</name><argument_list>(<argument><expr><name>BOTTOM_PLUS_ONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><call><name>get_quit_at_eof</name><argument_list>()</argument_list></call> <operator>==</operator> <name>OPT_ONPLUS</name> <operator>&amp;&amp;</operator>
<call><name>eof_displayed</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><call><name>ch_getflags</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>CH_HELPFILE</name><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>next_ifile</name><argument_list>(<argument><expr><name>curr_ifile</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL_IFILE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>quit</name><argument_list>(<argument><expr><name>QUIT_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>quit_if_one_screen</name> <operator>&amp;&amp;</operator>
<call><name>entire_file_displayed</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><call><name>ch_getflags</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>CH_HELPFILE</name><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>next_ifile</name><argument_list>(<argument><expr><name>curr_ifile</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL_IFILE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>quit</name><argument_list>(<argument><expr><name>QUIT_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>quit_if_one_screen</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>WIN32C</name></expr></cpp:if>



<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>ch_getflags</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>CH_HELPFILE</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>WCHAR</name></type> <name><name>w</name><index>[<expr><name>MAX_PATH</name><operator>+</operator><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>pr_expand</name><argument_list>(<argument><expr><literal type="string">"Less?f - %f."</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>CP_ACP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>w</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetConsoleTitleW</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>














<if_stmt><if>if <condition>(<expr><operator>!</operator><name>forw_prompt</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clear_bot</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>clear_cmd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>forw_prompt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>pr_string</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HILITE_SEARCH</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>is_filtering</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>putstr</name><argument_list>(<argument><expr><literal type="string">"&amp; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>at_enter</name><argument_list>(<argument><expr><name>AT_NORMAL</name><operator>|</operator><name>AT_COLOR_PROMPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putchr</name><argument_list>(<argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>at_exit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MSDOS_COMPILER</name><operator>==</operator><name>WIN32C</name></expr></cpp:if>
<decl_stmt><decl><type><name>WCHAR</name></type> <name><name>w</name><index>[<expr><name>MAX_PATH</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>a</name><index>[<expr><name>MAX_PATH</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>CP_ACP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>w</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WideCharToMultiByte</name><argument_list>(<argument><expr><ternary><condition><expr><name>utf_mode</name></expr> ?</condition><then> <expr><name>CP_UTF8</name></expr> </then><else>: <expr><call><name>GetConsoleOutputCP</name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>at_enter</name><argument_list>(<argument><expr><name>AT_STANDOUT</name><operator>|</operator><name>AT_COLOR_PROMPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putstr</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>at_exit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>clear_eol</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>public</name> <name>void</name></type>
<name>dispversion</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PARG</name></type> <name>parg</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>parg</name><operator>.</operator><name>p_string</name></name> <operator>=</operator> <name>version</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"less %s"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>parg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>LWCHAR</name></type>
<name>getcc_end_command</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>mca</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>A_DIGIT</name></expr>:</case>

<return>return <expr><operator>(</operator><literal type="char">'g'</literal><operator>)</operator></expr>;</return>
<case>case <expr><name>A_F_SEARCH</name></expr>:</case>
<case>case <expr><name>A_B_SEARCH</name></expr>:</case>

<return>return <expr><operator>(</operator><literal type="char">'\n'</literal><operator>)</operator></expr>;</return>
<default>default:</default>

<return>return <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>ungot</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>getchr</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>LWCHAR</name></type>
<name>getccu</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>LWCHAR</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ungot</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getchr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else
<block>{<block_content>


<decl_stmt><decl><type><name><name>struct</name> <name>ungot</name></name> <modifier>*</modifier></type><name>ug</name> <init>= <expr><name>ungot</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>ug</name><operator>-&gt;</operator><name>ug_char</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ungot</name> <operator>=</operator> <name><name>ug</name><operator>-&gt;</operator><name>ug_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>CHAR_END_COMMAND</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getcc_end_command</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<return>return <expr><operator>(</operator><name>c</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<decl_stmt><decl><type><specifier>static</specifier> <name>LWCHAR</name></type>
<name>getcc_repl</name><argument_list>(<argument><expr><name>orig</name></expr></argument>, <argument><expr><name>repl</name></expr></argument>, <argument><expr><name>gr_getc</name></expr></argument>, <argument><expr><name>gr_ungetc</name></expr></argument>)</argument_list>
<name>char</name> const<modifier>*</modifier> <name>orig</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type> <name>repl</name></decl>;</decl_stmt>
<function_decl><type><name>LWCHAR</name></type> (<modifier>*</modifier><name>gr_getc</name>)<parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>gr_ungetc</name>)<parameter_list>(<parameter><decl><type><name>LWCHAR</name></type></decl></parameter>)</parameter_list>;</function_decl>
<block>{<block_content>
<decl_stmt><decl><type><name>LWCHAR</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LWCHAR</name></type> <name><name>keys</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ki</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call>(<modifier>*</modifier><name>gr_getc</name>)<argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>orig</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>orig</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>c</name></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>keys</name><index>[<expr><name>ki</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <name><name>orig</name><index>[<expr><name>ki</name></expr>]</index></name> <operator>||</operator> <name>ki</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>



<while>while <condition>(<expr><name>ki</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name>gr_ungetc</name>)<argument_list>(<argument><expr><name><name>keys</name><index>[<expr><name>ki</name><operator>--</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><name><name>keys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>orig</name><index>[<expr><operator>++</operator><name>ki</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name>ki</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>repl</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>ki</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call>(<modifier>*</modifier><name>gr_ungetc</name>)<argument_list>(<argument><expr><name><name>repl</name><index>[<expr><name>ki</name><operator>--</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><name><name>repl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>c</name> <operator>=</operator> <call>(<modifier>*</modifier><name>gr_getc</name>)<argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block>




<function><type><name>public</name> <name>int</name></type>
<name>getcc</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><call><name>getcc_repl</name><argument_list>(<argument><expr><name>kent</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>getccu</name></expr></argument>, <argument><expr><name>ungetcc</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><name>public</name> <name>void</name></type>
<name>ungetcc</name><parameter_list>(<parameter><decl><type><name>c</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>LWCHAR</name></type> <name>c</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ungot</name></name> <modifier>*</modifier></type><name>ug</name> <init>= <expr><operator>(</operator>struct <name>ungot</name> <operator>*</operator><operator>)</operator> <call><name>ecalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ungot</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ug</name><operator>-&gt;</operator><name>ug_char</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ug</name><operator>-&gt;</operator><name>ug_next</name></name> <operator>=</operator> <name>ungot</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ungot</name> <operator>=</operator> <name>ug</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>public</name> <name>void</name></type>
<name>ungetcc_back</name><parameter_list>(<parameter><decl><type><name>c</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>LWCHAR</name></type> <name>c</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ungot</name></name> <modifier>*</modifier></type><name>ug</name> <init>= <expr><operator>(</operator>struct <name>ungot</name> <operator>*</operator><operator>)</operator> <call><name>ecalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ungot</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ug</name><operator>-&gt;</operator><name>ug_char</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ug</name><operator>-&gt;</operator><name>ug_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ungot</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ungot</name> <operator>=</operator> <name>ug</name></expr>;</expr_stmt></block_content></block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ungot</name></name> <modifier>*</modifier></type><name>pu</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>pu</name> <operator>=</operator> <name>ungot</name></expr>;</init> <condition><expr><name><name>pu</name><operator>-&gt;</operator><name>ug_next</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>pu</name> <operator>=</operator> <name><name>pu</name><operator>-&gt;</operator><name>ug_next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></for>
<expr_stmt><expr><name><name>pu</name><operator>-&gt;</operator><name>ug_next</name></name> <operator>=</operator> <name>ug</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>





<function><type><name>public</name> <name>void</name></type>
<name>ungetsc</name><parameter_list>(<parameter><decl><type><name>s</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ungetcc_back</name><argument_list>(<argument><expr><operator>*</operator><name>s</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>




<function><type><name>public</name> <name>LWCHAR</name></type>
<name>peekcc</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>LWCHAR</name></type> <name>c</name> <init>= <expr><call><name>getcc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ungetcc</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>multi_search</name><parameter_list>(<parameter><decl><type><name>pattern</name></type></decl></parameter>, <parameter><decl><type><name>n</name></type></decl></parameter>, <parameter><decl><type><name>silent</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pattern</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>silent</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nomore</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IFILE</name></type> <name>save_ifile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>changed_file</name></decl>;</decl_stmt>

<expr_stmt><expr><name>changed_file</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>save_ifile</name> <operator>=</operator> <call><name>save_curr_ifile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>search_type</name> <operator>&amp;</operator> <name>SRCH_FIRST_FILE</name></expr>)</condition>
<block>{<block_content>




<if_stmt><if>if <condition>(<expr><name>search_type</name> <operator>&amp;</operator> <name>SRCH_FORW</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nomore</name> <operator>=</operator> <call><name>edit_first</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>nomore</name> <operator>=</operator> <call><name>edit_last</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nomore</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>unsave_ifile</name><argument_list>(<argument><expr><name>save_ifile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>changed_file</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>search_type</name> <operator>&amp;=</operator> <operator>~</operator><name>SRCH_FIRST_FILE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>search</name><argument_list>(<argument><expr><name>search_type</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name>search_type</name> <operator>&amp;=</operator> <operator>~</operator><name>SRCH_NO_MOVE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><call><name>unsave_ifile</name><argument_list>(<argument><expr><name>save_ifile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>




<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>search_type</name> <operator>&amp;</operator> <name>SRCH_PAST_EOF</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>




<break>break;</break></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>search_type</name> <operator>&amp;</operator> <name>SRCH_FORW</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nomore</name> <operator>=</operator> <call><name>edit_next</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>nomore</name> <operator>=</operator> <call><name>edit_prev</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nomore</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>changed_file</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>





<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>silent</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Pattern not found"</literal></expr></argument>, <argument><expr><name>NULL_PARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>changed_file</name></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><call><name>reedit_ifile</name><argument_list>(<argument><expr><name>save_ifile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else
<block>{<block_content>
<expr_stmt><expr><call><name>unsave_ifile</name><argument_list>(<argument><expr><name>save_ifile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>forw_loop</name><parameter_list>(<parameter><decl><type><name>until_hilite</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>until_hilite</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>POSITION</name></type> <name>curr_len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ch_getflags</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>CH_HELPFILE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>A_NOACTION</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>cmd_exec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>jump_forw_buffered</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>curr_len</name> <operator>=</operator> <call><name>ch_length</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>highest_hilite</name> <operator>=</operator> <ternary><condition><expr><name>until_hilite</name></expr> ?</condition><then> <expr><name>curr_len</name></expr> </then><else>: <expr><name>NULL_POSITION</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>ignore_eoi</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>!</operator><name>sigs</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>until_hilite</name> <operator>&amp;&amp;</operator> <name>highest_hilite</name> <operator>&gt;</operator> <name>curr_len</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>bell</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>make_display</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>forward</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>ignore_eoi</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ch_set_eof</name><argument_list>()</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name>sigs</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ABORT_SIGS</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><ternary><condition><expr><name>until_hilite</name></expr> ?</condition><then> <expr><name>A_F_UNTIL_HILITE</name></expr> </then><else>: <expr><name>A_F_FOREVER</name></expr></else></ternary><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>A_NOACTION</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>public</name> <name>void</name></type>
<name>commands</name><parameter_list>(<parameter><decl><type><name>VOID_PARAM</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>action</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>newaction</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_jump_sline</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_search_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>extra</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>tbuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PARG</name></type> <name>parg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IFILE</name></type> <name>old_ifile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IFILE</name></type> <name>new_ifile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tagfile</name></decl>;</decl_stmt>

<expr_stmt><expr><name>search_type</name> <operator>=</operator> <name>SRCH_FORW</name></expr>;</expr_stmt>
<expr_stmt><expr><name>wscroll</name> <operator>=</operator> <operator>(</operator><name>sc_height</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>newaction</name> <operator>=</operator> <name>A_NOACTION</name></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>clear_mca</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cmd_accept</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>number</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>curropt</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>sigs</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>psignals</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>quitting</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>quit</name><argument_list>(<argument><expr><name>QUIT_SAVED_STATUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><call><name>check_winch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>cmd_reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>prompt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sigs</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>newaction</name> <operator>==</operator> <name>A_NOACTION</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getcc</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>again</name>:</label>
<if_stmt><if>if <condition>(<expr><name>sigs</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>newaction</name> <operator>!=</operator> <name>A_NOACTION</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>action</name> <operator>=</operator> <name>newaction</name></expr>;</expr_stmt>
<expr_stmt><expr><name>newaction</name> <operator>=</operator> <name>A_NOACTION</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else
<block>{<block_content>





<if_stmt><if>if <condition>(<expr><name>mca</name></expr>)</condition><block type="pseudo"><block_content>
<switch>switch <condition>(<expr><call><name>mca_char</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>MCA_MORE</name></expr>:</case>



<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getcc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>again</name>;</goto>
<case>case <expr><name>MCA_DONE</name></expr>:</case>




<continue>continue;</continue>
<case>case <expr><name>NO_MCA</name></expr>:</case>




<break>break;</break>
</block_content>}</block></switch></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name>mca</name></expr>)</condition>
<block>{<block_content>







<if_stmt><if>if <condition>(<expr><call><name>cmd_char</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CC_QUIT</name> <operator>||</operator> <call><name>len_cmdbuf</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>cbuf</name> <operator>=</operator> <call><name>get_cmdbuf</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else
<block>{<block_content>








<expr_stmt><expr><name><name>tbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tbuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cbuf</name> <operator>=</operator> <name>tbuf</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>extra</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>action</name> <operator>=</operator> <call><name>fcmd_decode</name><argument_list>(<argument><expr><name>cbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>extra</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ungetsc</name><argument_list>(<argument><expr><name>extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>





<if_stmt><if>if <condition>(<expr><name>action</name> <operator>!=</operator> <name>A_PREFIX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cmd_reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>action</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>A_DIGIT</name></expr>:</case>



<expr_stmt><expr><call><name>start_mca</name><argument_list>(<argument><expr><name>A_DIGIT</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>NULL</name></expr></argument>, <argument><expr><name>CF_QUIT_ON_ERASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>again</name>;</goto>

<case>case <expr><name>A_F_WINDOW</name></expr>:</case>



<if_stmt><if>if <condition>(<expr><name>number</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>swindow</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>number</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<case>case <expr><name>A_F_SCREEN</name></expr>:</case>



<if_stmt><if>if <condition>(<expr><name>number</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>number</name> <operator>=</operator> <call><name>get_swindow</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>cmd_exec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>show_attn</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_attnpos</name><argument_list>(<argument><expr><name>bottompos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>forward</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>number</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>A_B_WINDOW</name></expr>:</case>



<if_stmt><if>if <condition>(<expr><name>number</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>swindow</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>number</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<case>case <expr><name>A_B_SCREEN</name></expr>:</case>



<if_stmt><if>if <condition>(<expr><name>number</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>number</name> <operator>=</operator> <call><name>get_swindow</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>cmd_exec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>backward</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>number</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>A_F_LINE</name></expr>:</case>



<if_stmt><if>if <condition>(<expr><name>number</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>number</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>cmd_exec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>show_attn</name> <operator>==</operator> <name>OPT_ONPLUS</name> <operator>&amp;&amp;</operator> <name>number</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_attnpos</name><argument_list>(<argument><expr><name>bottompos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>forward</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>number</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>A_B_LINE</name></expr>:</case>



<if_stmt><if>if <condition>(<expr><name>number</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>number</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>cmd_exec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>backward</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>number</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>A_F_MOUSE</name></expr>:</case>



<expr_stmt><expr><call><name>cmd_exec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>forward</name><argument_list>(<argument><expr><name>wheel_lines</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>A_B_MOUSE</name></expr>:</case>



<expr_stmt><expr><call><name>cmd_exec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>backward</name><argument_list>(<argument><expr><name>wheel_lines</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>A_FF_LINE</name></expr>:</case>



<if_stmt><if>if <condition>(<expr><name>number</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>number</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>cmd_exec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>show_attn</name> <operator>==</operator> <name>OPT_ONPLUS</name> <operator>&amp;&amp;</operator> <name>number</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_attnpos</name><argument_list>(<argument><expr><name>bottompos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>forward</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>number</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>A_BF_LINE</name></expr>:</case>



<if_stmt><if>if <condition>(<expr><name>number</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>number</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>cmd_exec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>backward</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>number</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>A_FF_SCREEN</name></expr>:</case>



<if_stmt><if>if <condition>(<expr><name>number</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>number</name> <operator>=</operator> <call><name>get_swindow</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>cmd_exec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>show_attn</name> <operator>==</operator> <name>OPT_ONPLUS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_attnpos</name><argument_list>(<argument><expr><name>bottompos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>forward</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>number</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>A_F_FOREVER</name></expr>:</case>



<if_stmt><if>if <condition>(<expr><name>show_attn</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_attnpos</name><argument_list>(<argument><expr><name>bottompos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>newaction</name> <operator>=</operator> <call><name>forw_loop</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>A_F_UNTIL_HILITE</name></expr>:</case>
<expr_stmt><expr><name>newaction</name> <operator>=</operator> <call><name>forw_loop</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>A_F_SCROLL</name></expr>:</case>




<if_stmt><if>if <condition>(<expr><name>number</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>wscroll</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>number</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>cmd_exec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>show_attn</name> <operator>==</operator> <name>OPT_ONPLUS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>set_attnpos</name><argument_list>(<argument><expr><name>bottompos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>forward</name><argument_list>(<argument><expr><name>wscroll</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>A_B_SCROLL</name></expr>:</case>




<if_stmt><if>if <condition>(<expr><name>number</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>wscroll</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>number</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>cmd_exec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>backward</name><argument_list>(<argument><expr><name>wscroll</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>A_FREPAINT</name></expr>:</case>




<expr_stmt><expr><call><name>clear_buffers</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>A_REPAINT</name></expr>:</case>



<expr_stmt><expr><call><name>cmd_exec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>repaint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>A_GOLINE</name></expr>:</case>





<expr_stmt><expr><name>save_jump_sline</name> <operator>=</operator> <name>jump_sline</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>number</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>number</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>jump_sline</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>cmd_exec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>jump_back</name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>jump_sline</name> <operator>=</operator> <name>save_jump_sline</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>A_PERCENT</name></expr>:</case>



<if_stmt><if>if <condition>(<expr><name>number</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>number</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fraction</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>number</name> <operator>&gt;</operator> <literal type="number">100</literal> <operator>||</operator> <operator>(</operator><name>number</name> <operator>==</operator> <literal type="number">100</literal> <operator>&amp;&amp;</operator> <name>fraction</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>number</name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>fraction</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>cmd_exec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>jump_percent</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>number</name></expr></argument>, <argument><expr><name>fraction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>A_GOEND</name></expr>:</case>



<expr_stmt><expr><call><name>cmd_exec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>number</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>jump_forw</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>jump_back</name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>A_GOEND_BUF</name></expr>:</case>



<expr_stmt><expr><call><name>cmd_exec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>number</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>jump_forw_buffered</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>jump_back</name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>A_GOPOS</name></expr>:</case>



<expr_stmt><expr><call><name>cmd_exec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>number</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>number</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>jump_line_loc</name><argument_list>(<argument><expr><operator>(</operator><name>POSITION</name><operator>)</operator> <name>number</name></expr></argument>, <argument><expr><name>jump_sline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>A_STAT</name></expr>:</case>



<if_stmt><if>if <condition>(<expr><call><name>ch_getflags</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>CH_HELPFILE</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>cmd_exec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parg</name><operator>.</operator><name>p_string</name></name> <operator>=</operator> <call><name>eq_message</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>parg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>A_VERSION</name></expr>:</case>



<expr_stmt><expr><call><name>cmd_exec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dispversion</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>A_QUIT</name></expr>:</case>



<if_stmt><if>if <condition>(<expr><name>curr_ifile</name> <operator>!=</operator> <name>NULL_IFILE</name> <operator>&amp;&amp;</operator>
<call><name>ch_getflags</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>CH_HELPFILE</name></expr>)</condition>
<block>{<block_content>





<expr_stmt><expr><name>hshift</name> <operator>=</operator> <name>save_hshift</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bs_mode</name> <operator>=</operator> <name>save_bs_mode</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>edit_prev</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>extra</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>quit</name><argument_list>(<argument><expr><operator>*</operator><name>extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>quit</name><argument_list>(<argument><expr><name>QUIT_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO_SEARCH</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>if (number &lt;= 0) number = 1; mca_search(); cmd_exec(); multi_search((char *)NULL, (int) number, 0);</cpp:value></cpp:define>






<case>case <expr><name>A_F_SEARCH</name></expr>:</case>




<expr_stmt><expr><name>search_type</name> <operator>=</operator> <name>SRCH_FORW</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>number</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>number</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>mca_search</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getcc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>again</name>;</goto>

<case>case <expr><name>A_B_SEARCH</name></expr>:</case>




<expr_stmt><expr><name>search_type</name> <operator>=</operator> <name>SRCH_BACK</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>number</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>number</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>mca_search</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getcc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>again</name>;</goto>

<case>case <expr><name>A_FILTER</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HILITE_SEARCH</name></expr></cpp:if>
<expr_stmt><expr><name>search_type</name> <operator>=</operator> <name>SRCH_FORW</name> <operator>|</operator> <name>SRCH_FILTER</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mca_search</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getcc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>again</name>;</goto>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Command not available"</literal></expr></argument>, <argument><expr><name>NULL_PARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>A_AGAIN_SEARCH</name></expr>:</case>



<expr_stmt><expr><call><name>DO_SEARCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>A_T_AGAIN_SEARCH</name></expr>:</case>



<expr_stmt><expr><name>search_type</name> <operator>|=</operator> <name>SRCH_PAST_EOF</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO_SEARCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>A_REVERSE_SEARCH</name></expr>:</case>



<expr_stmt><expr><name>save_search_type</name> <operator>=</operator> <name>search_type</name></expr>;</expr_stmt>
<expr_stmt><expr><name>search_type</name> <operator>=</operator> <call><name>SRCH_REVERSE</name><argument_list>(<argument><expr><name>search_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO_SEARCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>search_type</name> <operator>=</operator> <name>save_search_type</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>A_T_REVERSE_SEARCH</name></expr>:</case>




<expr_stmt><expr><name>save_search_type</name> <operator>=</operator> <name>search_type</name></expr>;</expr_stmt>
<expr_stmt><expr><name>search_type</name> <operator>=</operator> <call><name>SRCH_REVERSE</name><argument_list>(<argument><expr><name>search_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>search_type</name> <operator>|=</operator> <name>SRCH_PAST_EOF</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO_SEARCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>search_type</name> <operator>=</operator> <name>save_search_type</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>A_UNDO_SEARCH</name></expr>:</case>
<case>case <expr><name>A_CLR_SEARCH</name></expr>:</case>



<expr_stmt><expr><call><name>undo_search</name><argument_list>(<argument><expr><name>action</name> <operator>==</operator> <name>A_CLR_SEARCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>A_HELP</name></expr>:</case>



<if_stmt><if>if <condition>(<expr><call><name>ch_getflags</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>CH_HELPFILE</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>cmd_exec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>save_hshift</name> <operator>=</operator> <name>hshift</name></expr>;</expr_stmt>
<expr_stmt><expr><name>hshift</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>save_bs_mode</name> <operator>=</operator> <name>bs_mode</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bs_mode</name> <operator>=</operator> <name>BS_SPECIAL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>edit</name><argument_list>(<argument><expr><name>FAKE_HELPFILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>A_EXAMINE</name></expr>:</case>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>EXAMINE</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>secure</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>start_mca</name><argument_list>(<argument><expr><name>A_EXAMINE</name></expr></argument>, <argument><expr><literal type="string">"Examine: "</literal></expr></argument>, <argument><expr><name>ml_examine</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getcc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>again</name>;</goto>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Command not available"</literal></expr></argument>, <argument><expr><name>NULL_PARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>A_VISUAL</name></expr>:</case>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>EDITOR</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>secure</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ch_getflags</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>CH_HELPFILE</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>get_filename</name><argument_list>(<argument><expr><name>curr_ifile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Cannot edit standard input"</literal></expr></argument>, <argument><expr><name>NULL_PARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>get_altfilename</name><argument_list>(<argument><expr><name>curr_ifile</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"WARNING: This file was viewed via LESSOPEN"</literal></expr></argument>,
<argument><expr><name>NULL_PARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>start_mca</name><argument_list>(<argument><expr><name>A_SHELL</name></expr></argument>, <argument><expr><literal type="string">"!"</literal></expr></argument>, <argument><expr><name>ml_shell</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><call><name>make_display</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cmd_exec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lsystem</name><argument_list>(<argument><expr><call><name>pr_expand</name><argument_list>(<argument><expr><name>editproto</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Command not available"</literal></expr></argument>, <argument><expr><name>NULL_PARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>A_NEXT_FILE</name></expr>:</case>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TAGS</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>ntags</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"No next file"</literal></expr></argument>, <argument><expr><name>NULL_PARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>number</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>number</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>edit_next</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>number</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>get_quit_at_eof</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>eof_displayed</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><call><name>ch_getflags</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>CH_HELPFILE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>quit</name><argument_list>(<argument><expr><name>QUIT_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>parg</name><operator>.</operator><name>p_string</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>number</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"(N-th) "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"No %snext file"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>parg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>A_PREV_FILE</name></expr>:</case>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TAGS</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>ntags</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"No previous file"</literal></expr></argument>, <argument><expr><name>NULL_PARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>number</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>number</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>edit_prev</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>number</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>parg</name><operator>.</operator><name>p_string</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>number</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"(N-th) "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"No %sprevious file"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>parg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>A_NEXT_TAG</name></expr>:</case>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TAGS</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>number</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>number</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>tagfile</name> <operator>=</operator> <call><name>nexttag</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tagfile</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"No next tag"</literal></expr></argument>, <argument><expr><name>NULL_PARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>cmd_exec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>edit</name><argument_list>(<argument><expr><name>tagfile</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>POSITION</name></type> <name>pos</name> <init>= <expr><call><name>tagsearch</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>!=</operator> <name>NULL_POSITION</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>jump_loc</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>jump_sline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Command not available"</literal></expr></argument>, <argument><expr><name>NULL_PARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>

<case>case <expr><name>A_PREV_TAG</name></expr>:</case>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TAGS</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>number</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>number</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>tagfile</name> <operator>=</operator> <call><name>prevtag</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tagfile</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"No previous tag"</literal></expr></argument>, <argument><expr><name>NULL_PARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>cmd_exec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>edit</name><argument_list>(<argument><expr><name>tagfile</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>POSITION</name></type> <name>pos</name> <init>= <expr><call><name>tagsearch</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>!=</operator> <name>NULL_POSITION</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>jump_loc</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>jump_sline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Command not available"</literal></expr></argument>, <argument><expr><name>NULL_PARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>

<case>case <expr><name>A_INDEX_FILE</name></expr>:</case>



<if_stmt><if>if <condition>(<expr><name>number</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>number</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>edit_index</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>number</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"No such file"</literal></expr></argument>, <argument><expr><name>NULL_PARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>A_REMOVE_FILE</name></expr>:</case>



<if_stmt><if>if <condition>(<expr><call><name>ch_getflags</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>CH_HELPFILE</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>old_ifile</name> <operator>=</operator> <name>curr_ifile</name></expr>;</expr_stmt>
<expr_stmt><expr><name>new_ifile</name> <operator>=</operator> <call><name>getoff_ifile</name><argument_list>(<argument><expr><name>curr_ifile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>new_ifile</name> <operator>==</operator> <name>NULL_IFILE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>bell</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>edit_ifile</name><argument_list>(<argument><expr><name>new_ifile</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>reedit_ifile</name><argument_list>(<argument><expr><name>old_ifile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>del_ifile</name><argument_list>(<argument><expr><name>old_ifile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>A_OPT_TOGGLE</name></expr>:</case>



<expr_stmt><expr><name>optflag</name> <operator>=</operator> <name>OPT_TOGGLE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>optgetname</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mca_opt_toggle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getcc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cbuf</name> <operator>=</operator> <call><name>opt_toggle_disallowed</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cbuf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><name>cbuf</name></expr></argument>, <argument><expr><name>NULL_PARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<goto>goto <name>again</name>;</goto>

<case>case <expr><name>A_DISP_OPTION</name></expr>:</case>



<expr_stmt><expr><name>optflag</name> <operator>=</operator> <name>OPT_NO_TOGGLE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>optgetname</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mca_opt_toggle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getcc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>again</name>;</goto>

<case>case <expr><name>A_FIRSTCMD</name></expr>:</case>



<expr_stmt><expr><call><name>start_mca</name><argument_list>(<argument><expr><name>A_FIRSTCMD</name></expr></argument>, <argument><expr><literal type="string">"+"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getcc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>again</name>;</goto>

<case>case <expr><name>A_SHELL</name></expr>:</case>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SHELL_ESCAPE</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>secure</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>start_mca</name><argument_list>(<argument><expr><name>A_SHELL</name></expr></argument>, <argument><expr><literal type="string">"!"</literal></expr></argument>, <argument><expr><name>ml_shell</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getcc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>again</name>;</goto>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Command not available"</literal></expr></argument>, <argument><expr><name>NULL_PARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>A_SETMARK</name></expr>:</case>
<case>case <expr><name>A_SETMARKBOT</name></expr>:</case>



<if_stmt><if>if <condition>(<expr><call><name>ch_getflags</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>CH_HELPFILE</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>start_mca</name><argument_list>(<argument><expr><name>A_SETMARK</name></expr></argument>, <argument><expr><literal type="string">"set mark: "</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getcc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>is_erase_char</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>is_newline_char</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>setmark</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><ternary><condition><expr><name>action</name> <operator>==</operator> <name>A_SETMARKBOT</name></expr> ?</condition><then> <expr><name>BOTTOM</name></expr> </then><else>: <expr><name>TOP</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>repaint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>A_CLRMARK</name></expr>:</case>



<expr_stmt><expr><call><name>start_mca</name><argument_list>(<argument><expr><name>A_CLRMARK</name></expr></argument>, <argument><expr><literal type="string">"clear mark: "</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getcc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>is_erase_char</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>is_newline_char</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>clrmark</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>repaint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>A_GOMARK</name></expr>:</case>



<expr_stmt><expr><call><name>start_mca</name><argument_list>(<argument><expr><name>A_GOMARK</name></expr></argument>, <argument><expr><literal type="string">"goto mark: "</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getcc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>is_erase_char</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>is_newline_char</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>cmd_exec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gomark</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>A_PIPE</name></expr>:</case>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PIPEC</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>secure</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>start_mca</name><argument_list>(<argument><expr><name>A_PIPE</name></expr></argument>, <argument><expr><literal type="string">"|mark: "</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getcc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>is_erase_char</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>is_newline_char</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>badmark</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pipec</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>start_mca</name><argument_list>(<argument><expr><name>A_PIPE</name></expr></argument>, <argument><expr><literal type="string">"!"</literal></expr></argument>, <argument><expr><name>ml_shell</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getcc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>again</name>;</goto>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Command not available"</literal></expr></argument>, <argument><expr><name>NULL_PARG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>A_B_BRACKET</name></expr>:</case>
<case>case <expr><name>A_F_BRACKET</name></expr>:</case>
<expr_stmt><expr><call><name>start_mca</name><argument_list>(<argument><expr><name>action</name></expr></argument>, <argument><expr><literal type="string">"Brackets: "</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getcc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>again</name>;</goto>

<case>case <expr><name>A_LSHIFT</name></expr>:</case>



<if_stmt><if>if <condition>(<expr><name>number</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>shift_count</name> <operator>=</operator> <name>number</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>number</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>shift_count</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then>
<expr><name>shift_count</name></expr> </then><else>: <expr><name>sc_width</name> <operator>/</operator> <literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>number</name> <operator>&gt;</operator> <name>hshift</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>number</name> <operator>=</operator> <name>hshift</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>hshift</name> <operator>-=</operator> <name>number</name></expr>;</expr_stmt>
<expr_stmt><expr><name>screen_trashed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>A_RSHIFT</name></expr>:</case>



<if_stmt><if>if <condition>(<expr><name>number</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>shift_count</name> <operator>=</operator> <name>number</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>number</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>shift_count</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then>
<expr><name>shift_count</name></expr> </then><else>: <expr><name>sc_width</name> <operator>/</operator> <literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>hshift</name> <operator>+=</operator> <name>number</name></expr>;</expr_stmt>
<expr_stmt><expr><name>screen_trashed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>A_LLSHIFT</name></expr>:</case>



<expr_stmt><expr><name>hshift</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>screen_trashed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>A_RRSHIFT</name></expr>:</case>



<expr_stmt><expr><name>hshift</name> <operator>=</operator> <call><name>rrshift</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>screen_trashed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>A_PREFIX</name></expr>:</case>





<if_stmt><if>if <condition>(<expr><name>mca</name> <operator>!=</operator> <name>A_PREFIX</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>cmd_reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>start_mca</name><argument_list>(<argument><expr><name>A_PREFIX</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>NULL</name></expr></argument>,
<argument><expr><name>CF_QUIT_ON_ERASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>cmd_char</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getcc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>again</name>;</goto>

<case>case <expr><name>A_NOACTION</name></expr>:</case>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>bell</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></function>
</unit>
