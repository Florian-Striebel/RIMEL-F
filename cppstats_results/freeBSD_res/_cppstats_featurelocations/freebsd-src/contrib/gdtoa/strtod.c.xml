<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/gdtoa/strtod.c">
































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gdtoaimp.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_FENV_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fenv.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_LOCALE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"locale.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IEEE_Arith</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_IEEE_Scale</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Avoid_Underflow</name></cpp:macro></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>tinytens</name></cpp:undef>


<decl_stmt><decl><type><specifier>static</specifier> <name>CONST</name> <name>double</name></type> <name><name>tinytens</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">1e-16</literal></expr>, <expr><literal type="number">1e-32</literal></expr>, <expr><literal type="number">1e-64</literal></expr>, <expr><literal type="number">1e-128</literal></expr>,
<expr><literal type="number">9007199254740992.</literal><operator>*</operator><literal type="number">9007199254740992.e-256</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Honor_FLT_ROUNDS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>Check_FLT_ROUNDS</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Check_FLT_ROUNDS</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Rounding</name></cpp:macro> <cpp:value>Flt_Rounds</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Avoid_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>double</name></type>
<name>sulp</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KR_headers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list> <name>U</name> <modifier>*</modifier><name>x</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>scale</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>U</name> <operator>*</operator><name>x</name><operator>,</operator> <name>int</name> <name>scale</name><operator>)</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr><name>U</name> <name>u</name></expr>;
<expr><name>double</name> <name>rv</name></expr>;
<expr><name>int</name> <name>i</name></expr>;

<expr><name>rv</name> <operator>=</operator> <call><name>ulp</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>scale</name> <operator>||</operator> <operator>(</operator><name>i</name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><name>P</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><call><name>word0</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Exp_mask</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>Exp_shift</name><operator>)</operator><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>rv</name></expr>;</return></block_content></block></if></if_stmt>
<call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>u</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>Exp_1</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <name>Exp_shift</name><operator>)</operator></block></expr>;</expr_stmt>
<expr_stmt><expr><call><name>word1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>u</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>rv</name> <operator>*</operator> <name><name>u</name><operator>.</operator><name>d</name></name></expr>;</return>
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

double
<macro><name>strtod_l</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KR_headers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument_list>(<argument>s00</argument>, <argument>se</argument>, <argument>loc</argument>)</argument_list></macro> <decl_stmt><decl><type><name>CONST</name> <name>char</name> <modifier>*</modifier></type><name>s00</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>se</name></decl>;</decl_stmt> <function><type><name>locale_t</name></type> <name>loc</name>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<parameter_list>(<parameter><decl><type><name>CONST</name> <name>char</name> <modifier>*</modifier></type><name>s00</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>se</name></decl></parameter>, <parameter><decl><type><name>locale_t</name></type> <name>loc</name></decl></parameter>)</parameter_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Avoid_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>scale</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>bb2</name></decl>, <decl><type ref="prev"/><name>bb5</name></decl>, <decl><type ref="prev"/><name>bbe</name></decl>, <decl><type ref="prev"/><name>bd2</name></decl>, <decl><type ref="prev"/><name>bd5</name></decl>, <decl><type ref="prev"/><name>bbbits</name></decl>, <decl><type ref="prev"/><name>bs2</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>decpt</name></decl>, <decl><type ref="prev"/><name>dsign</name></decl>,
<decl><type ref="prev"/><name>e</name></decl>, <decl><type ref="prev"/><name>e1</name></decl>, <decl><type ref="prev"/><name>esign</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>nd</name></decl>, <decl><type ref="prev"/><name>nd0</name></decl>, <decl><type ref="prev"/><name>nf</name></decl>, <decl><type ref="prev"/><name>nz</name></decl>, <decl><type ref="prev"/><name>nz0</name></decl>, <decl><type ref="prev"/><name>sign</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CONST</name> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s0</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>aadj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Long</name></type> <name>L</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>U</name></type> <name>adj</name></decl>, <decl><type ref="prev"/><name>aadj1</name></decl>, <decl><type ref="prev"/><name>rv</name></decl>, <decl><type ref="prev"/><name>rv0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULong</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>z</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Bigint</name> <modifier>*</modifier></type><name>bb</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bb1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bd</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bd0</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bs</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>delta</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Avoid_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>ULong</name></type> <name>Lsb</name></decl>, <decl><type ref="prev"/><name>Lsb1</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SET_INEXACT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>inexact</name></decl>, <decl><type ref="prev"/><name>oldinexact</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_LOCALE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NO_LOCALE_CACHE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>decimalpoint</name> <init>= <expr><call><name>localeconv_l</name><argument_list>(<argument><expr><name>loc</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>decimal_point</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dplen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>decimalpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>decimalpoint</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>decimalpoint_cache</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>dplen</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>s0</name> <operator>=</operator> <name>decimalpoint_cache</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s0</name> <operator>=</operator> <call><name>localeconv_l</name><argument_list>(<argument><expr><name>loc</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>decimal_point</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>decimalpoint_cache</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>MALLOC</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s0</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>decimalpoint_cache</name></expr></argument>, <argument><expr><name>s0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s0</name> <operator>=</operator> <name>decimalpoint_cache</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dplen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>s0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>decimalpoint</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>s0</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dplen</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Honor_FLT_ROUNDS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>Rounding</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Trust_FLT_ROUNDS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>Rounding</name> <operator>=</operator> <name>Flt_Rounds</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>Rounding</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<switch>switch<condition>(<expr><call><name>fegetround</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FE_TOWARDZERO</name></expr>:</case> <expr_stmt><expr><name>Rounding</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>FE_UPWARD</name></expr>:</case> <expr_stmt><expr><name>Rounding</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>FE_DOWNWARD</name></expr>:</case> <expr_stmt><expr><name>Rounding</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></switch>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <name>nz0</name> <operator>=</operator> <name>nz</name> <operator>=</operator> <name>decpt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0.</literal></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>s</name> <operator>=</operator> <name>s00</name></expr>;</init><condition>;</condition><incr><expr><name>s</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <switch>switch<condition>(<expr><operator>*</operator><name>s</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'-'</literal></expr>:</case>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<case>case <expr><literal type="char">'+'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>++</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>break2</name>;</goto></block_content></block></if></if_stmt>

<case>case <expr><literal type="number">0</literal></expr>:</case>
<goto>goto <name>ret0</name>;</goto>
<case>case <expr><literal type="char">'\t'</literal></expr>:</case>
<case>case <expr><literal type="char">'\n'</literal></expr>:</case>
<case>case <expr><literal type="char">'\v'</literal></expr>:</case>
<case>case <expr><literal type="char">'\f'</literal></expr>:</case>
<case>case <expr><literal type="char">'\r'</literal></expr>:</case>
<case>case <expr><literal type="char">' '</literal></expr>:</case>
<continue>continue;</continue>
<default>default:</default>
<goto>goto <name>break2</name>;</goto>
</block_content>}</block></switch></block_content></block></for>
<label><name>break2</name>:</label>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_HEX_FP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>FPI</name></type> <name>fpi</name> <init>= <expr><block>{ <expr><literal type="number">53</literal></expr>, <expr><literal type="number">1</literal><operator>-</operator><literal type="number">1023</literal><operator>-</operator><literal type="number">53</literal><operator>+</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2046</literal><operator>-</operator><literal type="number">1023</literal><operator>-</operator><literal type="number">53</literal><operator>+</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>SI</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Long</name></type> <name>exp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULong</name></type> <name><name>bits</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<switch>switch<condition>(<expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'x'</literal></expr>:</case>
<case>case <expr><literal type="char">'X'</literal></expr>:</case>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Honor_FLT_ROUNDS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>FPI</name></type> <name>fpi1</name> <init>= <expr><name>fpi</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>fpi1</name><operator>.</operator><name>rounding</name></name> <operator>=</operator> <name>Rounding</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fpi1</name></cpp:macro> <cpp:value>fpi</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<switch>switch<condition>(<expr><operator>(</operator><name>i</name> <operator>=</operator> <call><name>gethex</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fpi1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>exp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bb</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;</operator> <name>STRTOG_Retmask</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>STRTOG_NoNumber</name></expr>:</case>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>s00</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<case>case <expr><name>STRTOG_Zero</name></expr>:</case>
<break>break;</break>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><name>bb</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>copybits</name><argument_list>(<argument><expr><name>bits</name></expr></argument>, <argument><expr><name><name>fpi</name><operator>.</operator><name>nbits</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ULtod</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>U</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>rv</name><operator>)</operator><operator>-&gt;</operator><name>L</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><name>exp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch></block_content>}</block>
<goto>goto <name>ret</name>;</goto>
</block_content>}</block></switch>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>nz0</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>*</operator><operator>++</operator><name>s</name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition><block type="pseudo"><block_content> <empty_stmt>;</empty_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ret</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>s0</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>nd</name> <operator>=</operator> <name>nf</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>s</name><operator>)</operator> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>;</condition> <incr><expr><name>nd</name><operator>++</operator></expr><operator>,</operator> <expr><name>s</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>nd</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">10</literal><operator>*</operator><name>y</name> <operator>+</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>nd</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>z</name> <operator>=</operator> <literal type="number">10</literal><operator>*</operator><name>z</name> <operator>+</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><name>nd0</name> <operator>=</operator> <name>nd</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_LOCALE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <operator>*</operator><name>decimalpoint</name></expr>)</condition> <block>{<block_content>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name><name>decimalpoint</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>decimalpoint</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>dig_done</name>;</goto></block_content></block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>s</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>s</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>decpt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nd</name></expr>)</condition> <block>{<block_content>
<for>for<control>(<init>;</init> <condition><expr><name>c</name> <operator>==</operator> <literal type="char">'0'</literal></expr>;</condition> <incr><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>s</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>nz</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s0</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nf</name> <operator>+=</operator> <name>nz</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nz</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>have_dig</name>;</goto>
</block_content>}</block></if></if_stmt>
<goto>goto <name>dig_done</name>;</goto>
</block_content>}</block></if></if_stmt>
<for>for<control>(<init>;</init> <condition><expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>;</condition> <incr><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>s</name></expr></incr>)</control> <block>{<block_content>
<label><name>have_dig</name>:</label>
<expr_stmt><expr><name>nz</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>-=</operator> <literal type="char">'0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nf</name> <operator>+=</operator> <name>nz</name></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>nd</name><operator>++</operator> <operator>&lt;</operator> <literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>y</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>nd</name> <operator>&lt;=</operator> <name>DBL_DIG</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>z</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>nd</name><operator>++</operator> <operator>&lt;</operator> <literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">10</literal><operator>*</operator><name>y</name> <operator>+</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>nd</name> <operator>&lt;=</operator> <name>DBL_DIG</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>z</name> <operator>=</operator> <literal type="number">10</literal><operator>*</operator><name>z</name> <operator>+</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nz</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<label><name>dig_done</name>:</label>
<expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'e'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'E'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nd</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>nz</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>nz0</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>ret0</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>s00</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>esign</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<switch>switch<condition>(<expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>s</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'-'</literal></expr>:</case>
<expr_stmt><expr><name>esign</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<case>case <expr><literal type="char">'+'</literal></expr>:</case>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>s</name></expr>;</expr_stmt>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>
<while>while<condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>s</name></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>L</name> <operator>=</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s1</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>s</name><operator>)</operator> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>L</name> <operator>=</operator> <literal type="number">10</literal><operator>*</operator><name>L</name> <operator>+</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>-</operator> <name>s1</name> <operator>&gt;</operator> <literal type="number">8</literal> <operator>||</operator> <name>L</name> <operator>&gt;</operator> <literal type="number">19999</literal></expr>)</condition><block type="pseudo"><block_content>



<expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">19999</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>L</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>esign</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>-</operator><name>e</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>s00</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nd</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nz</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>nz0</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INFNAN_CHECK</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>ULong</name></type> <name><name>bits</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>FPI</name></type> <name>fpinan</name> <init>=
<expr><block>{ <expr><literal type="number">52</literal></expr>, <expr><literal type="number">1</literal><operator>-</operator><literal type="number">1023</literal><operator>-</operator><literal type="number">53</literal><operator>+</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2046</literal><operator>-</operator><literal type="number">1023</literal><operator>-</operator><literal type="number">53</literal><operator>+</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>SI</name></expr> }</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>decpt</name></expr>)</condition><block type="pseudo"><block_content>
<switch>switch<condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'i'</literal></expr>:</case>
<case>case <expr><literal type="char">'I'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>match</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>,<argument><expr><literal type="string">"nf"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>--</operator><name>s</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>match</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>,<argument><expr><literal type="string">"inity"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>s</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0x7ff00000</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>word1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>ret</name>;</goto>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'n'</literal></expr>:</case>
<case>case <expr><literal type="char">'N'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>match</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="string">"an"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>No_Hex_NaN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'('</literal>
<operator>&amp;&amp;</operator> <call><name>hexnan</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fpinan</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call>
<operator>==</operator> <name>STRTOG_NaNbits</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0x7ff80000</literal> <operator>|</operator> <name><name>bits</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>word1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <name><name>bits</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>NAN_WORD0</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>word1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>NAN_WORD1</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>No_Hex_NaN</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<goto>goto <name>ret</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></switch></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<label><name>ret0</name>:</label>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>s00</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<goto>goto <name>ret</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>e1</name> <operator>=</operator> <name>e</name> <operator>-=</operator> <name>nf</name></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nd0</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nd0</name> <operator>=</operator> <name>nd</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <ternary><condition><expr><name>nd</name> <operator>&lt;</operator> <name>DBL_DIG</name> <operator>+</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>nd</name></expr> </then><else>: <expr><name>DBL_DIG</name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SET_INEXACT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;</operator> <name>DBL_DIG</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>oldinexact</name> <operator>=</operator> <call><name>get_inexact</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <name><name>tens</name><index>[<expr><name>k</name> <operator>-</operator> <literal type="number">9</literal></expr>]</index></name> <operator>*</operator> <call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>z</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bd0</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nd</name> <operator>&lt;=</operator> <name>DBL_DIG</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RND_PRODQUOT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>Honor_FLT_ROUNDS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <name>Flt_Rounds</name> <operator>==</operator> <literal type="number">1</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>e</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ret</name>;</goto></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ROUND_BIASED_without_Round_Up</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>&lt;=</operator> <name>Ten_pmax</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<goto>goto <name>vax_ovfl_check</name>;</goto>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Honor_FLT_ROUNDS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>sign</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rv</name><operator>.</operator><name>d</name></name> <operator>=</operator> <operator>-</operator><name><name>rv</name><operator>.</operator><name>d</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>rounded_product</name><argument_list>(<argument><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>tens</name><index>[<expr><name>e</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>ret</name>;</goto>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>DBL_DIG</name> <operator>-</operator> <name>nd</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>&lt;=</operator> <name>Ten_pmax</name> <operator>+</operator> <name>i</name></expr>)</condition> <block>{<block_content>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Honor_FLT_ROUNDS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>sign</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rv</name><operator>.</operator><name>d</name></name> <operator>=</operator> <operator>-</operator><name><name>rv</name><operator>.</operator><name>d</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>e</name> <operator>-=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>*=</operator> <name><name>tens</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VAX</name></expr></argument>)</argument_list></call></expr></cpp:if>



<label><name>vax_ovfl_check</name>:</label>
<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>-=</operator> <name>P</name><operator>*</operator><name>Exp_msk1</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rounded_product</name><argument_list>(<argument><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>tens</name><index>[<expr><name>e</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Exp_mask</name><operator>)</operator>
<operator>&gt;</operator> <name>Exp_msk1</name><operator>*</operator><operator>(</operator><name>DBL_MAX_EXP</name><operator>+</operator><name>Bias</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>P</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ovfl</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>+=</operator> <name>P</name><operator>*</operator><name>Exp_msk1</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>rounded_product</name><argument_list>(<argument><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>tens</name><index>[<expr><name>e</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<goto>goto <name>ret</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>Inaccurate_Divide</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name>e</name> <operator>&gt;=</operator> <operator>-</operator><name>Ten_pmax</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Honor_FLT_ROUNDS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>sign</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rv</name><operator>.</operator><name>d</name></name> <operator>=</operator> <operator>-</operator><name><name>rv</name><operator>.</operator><name>d</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>rounded_quotient</name><argument_list>(<argument><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>tens</name><index>[<expr><operator>-</operator><name>e</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>ret</name>;</goto>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>e1</name> <operator>+=</operator> <name>nd</name> <operator>-</operator> <name>k</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IEEE_Arith</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SET_INEXACT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>inexact</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&lt;=</operator> <name>DBL_DIG</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>oldinexact</name> <operator>=</operator> <call><name>get_inexact</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Avoid_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>scale</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Honor_FLT_ROUNDS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>Rounding</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>sign</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Rounding</name> <operator>=</operator> <ternary><condition><expr><name>Rounding</name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else
if <condition>(<expr><name>Rounding</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Rounding</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<if_stmt><if>if <condition>(<expr><name>e1</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>( <expr><operator>(</operator><name>i</name> <operator>=</operator> <name>e1</name> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator> <operator>!=</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>*=</operator> <name><name>tens</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>e1</name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">15</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>e1</name> <operator>&gt;</operator> <name>DBL_MAX_10_EXP</name></expr>)</condition> <block>{<block_content>
<label><name>ovfl</name>:</label>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IEEE_Arith</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Honor_FLT_ROUNDS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<switch>switch<condition>(<expr><name>Rounding</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>Big0</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>word1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>Big1</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>Exp_mask</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>word1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></switch>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>Exp_mask</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>word1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SET_INEXACT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv0</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">1e300</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv0</name></expr></argument>)</argument_list></call> <operator>*=</operator> <call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>Big0</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>word1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>Big1</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<label><name>range_err</name>:</label>
<if_stmt><if>if <condition>(<expr><name>bd0</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name>bd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name>bd0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_ERRNO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<goto>goto <name>ret</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>e1</name> <operator>&gt;&gt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>e1</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>e1</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>e1</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>*=</operator> <name><name>bigtens</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>-=</operator> <name>P</name><operator>*</operator><name>Exp_msk1</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>*=</operator> <name><name>bigtens</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>z</name> <operator>=</operator> <call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Exp_mask</name><operator>)</operator>
<operator>&gt;</operator> <name>Exp_msk1</name><operator>*</operator><operator>(</operator><name>DBL_MAX_EXP</name><operator>+</operator><name>Bias</name><operator>-</operator><name>P</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ovfl</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>z</name> <operator>&gt;</operator> <name>Exp_msk1</name><operator>*</operator><operator>(</operator><name>DBL_MAX_EXP</name><operator>+</operator><name>Bias</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>P</name><operator>)</operator></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>Big0</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>word1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>Big1</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>+=</operator> <name>P</name><operator>*</operator><name>Exp_msk1</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>e1</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>e1</name> <operator>=</operator> <operator>-</operator><name>e1</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>(</operator><name>i</name> <operator>=</operator> <name>e1</name> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator> <operator>!=</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>/=</operator> <name><name>tens</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>e1</name> <operator>&gt;&gt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>e1</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>n_bigtens</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>undfl</name>;</goto></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Avoid_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>e1</name> <operator>&amp;</operator> <name>Scale_Bit</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>scale</name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><name>P</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>e1</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>e1</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>e1</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>*=</operator> <name><name>tinytens</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>scale</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>j</name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><name>P</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Exp_mask</name><operator>)</operator>
<operator>&gt;&gt;</operator> <name>Exp_shift</name><operator>)</operator><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;=</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>word1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;=</operator> <literal type="number">53</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>P</name><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>Exp_msk1</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;=</operator> <literal type="number">0xffffffff</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>j</name><operator>-</operator><literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>word1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;=</operator> <literal type="number">0xffffffff</literal> <operator>&lt;&lt;</operator> <name>j</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>e1</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>e1</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>e1</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>*=</operator> <name><name>tinytens</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv0</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>*=</operator> <name><name>tinytens</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">2.</literal><operator>*</operator><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>*=</operator> <name><name>tinytens</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<label><name>undfl</name>:</label>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0.</literal></expr>;</expr_stmt>
<goto>goto <name>range_err</name>;</goto>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>Avoid_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>Tiny0</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>word1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>Tiny1</name></expr>;</expr_stmt>



</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name>bd0</name> <operator>=</operator> <call><name>s2b</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><name>nd0</name></expr></argument>, <argument><expr><name>nd</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>dplen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>bd</name> <operator>=</operator> <call><name>Balloc</name><argument_list>(<argument><expr><name><name>bd0</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Bcopy</name><argument_list>(<argument><expr><name>bd</name></expr></argument>, <argument><expr><name>bd0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bb</name> <operator>=</operator> <call><name>d2b</name><argument_list>(<argument><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>bbe</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bbbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bs</name> <operator>=</operator> <call><name>i2b</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bb2</name> <operator>=</operator> <name>bb5</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bd2</name> <operator>=</operator> <name>bd5</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>bb2</name> <operator>=</operator> <name>bb5</name> <operator>=</operator> <operator>-</operator><name>e</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bd2</name> <operator>=</operator> <name>bd5</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bbe</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bb2</name> <operator>+=</operator> <name>bbe</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>bd2</name> <operator>-=</operator> <name>bbe</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>bs2</name> <operator>=</operator> <name>bb2</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Honor_FLT_ROUNDS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>Rounding</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bs2</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Avoid_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>Lsb</name> <operator>=</operator> <name>LSB</name></expr>;</expr_stmt>
<expr_stmt><expr><name>Lsb1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>bbe</name> <operator>-</operator> <name>scale</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>j</name> <operator>+</operator> <name>bbbits</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>P</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>bbbits</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>Emin</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>Emin</name> <operator>-</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>-=</operator> <name>i</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Lsb</name> <operator>&lt;&lt;=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>Lsb1</name> <operator>=</operator> <name>Lsb</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>i</name><operator>-</operator><literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Sudden_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IBM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name>P</name> <operator>-</operator> <literal type="number">3</literal> <operator>-</operator> <name>bbbits</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>bbe</name> <operator>+</operator> <name>bbbits</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>P</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>bbbits</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>bbe</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>j</name> <operator>+</operator> <name>bbbits</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>Emin</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>j</name> <operator>+=</operator> <name>P</name> <operator>-</operator> <name>Emin</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>P</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>bbbits</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>bb2</name> <operator>+=</operator> <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bd2</name> <operator>+=</operator> <name>j</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Avoid_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>bd2</name> <operator>+=</operator> <name>scale</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>i</name> <operator>=</operator> <ternary><condition><expr><name>bb2</name> <operator>&lt;</operator> <name>bd2</name></expr> ?</condition><then> <expr><name>bb2</name></expr> </then><else>: <expr><name>bd2</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <name>bs2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>bs2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bb2</name> <operator>-=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bd2</name> <operator>-=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bs2</name> <operator>-=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bb5</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bs</name> <operator>=</operator> <call><name>pow5mult</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>bb5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bb1</name> <operator>=</operator> <call><name>mult</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bb</name> <operator>=</operator> <name>bb1</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bb2</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bb</name> <operator>=</operator> <call><name>lshift</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>bb2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bd5</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bd</name> <operator>=</operator> <call><name>pow5mult</name><argument_list>(<argument><expr><name>bd</name></expr></argument>, <argument><expr><name>bd5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bd2</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bd</name> <operator>=</operator> <call><name>lshift</name><argument_list>(<argument><expr><name>bd</name></expr></argument>, <argument><expr><name>bd2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bs2</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bs</name> <operator>=</operator> <call><name>lshift</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>bs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>delta</name> <operator>=</operator> <call><name>diff</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>bd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dsign</name> <operator>=</operator> <name><name>delta</name><operator>-&gt;</operator><name>sign</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>delta</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cmp</name><argument_list>(<argument><expr><name>delta</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Honor_FLT_ROUNDS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>Rounding</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>delta</name><operator>-&gt;</operator><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>delta</name><operator>-&gt;</operator><name>wds</name></name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SET_INEXACT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>inexact</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>Rounding</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dsign</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>adj</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">1.</literal></expr>;</expr_stmt>
<goto>goto <name>apply_adj</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name>dsign</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>adj</name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>-</operator><literal type="number">1.</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>word1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Frac_mask</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Exp_mask</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Avoid_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>scale</name> <operator>||</operator> <name>y</name> <operator>&gt;</operator> <literal type="number">2</literal><operator>*</operator><name>P</name><operator>*</operator><name>Exp_msk1</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><name>y</name></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<expr_stmt><expr><name>delta</name> <operator>=</operator> <call><name>lshift</name><argument_list>(<argument><expr><name>delta</name></expr></argument>,<argument><expr><name>Log2P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>cmp</name><argument_list>(<argument><expr><name>delta</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>adj</name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>-</operator><literal type="number">0.5</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<label><name>apply_adj</name>:</label>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Avoid_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>scale</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>y</name> <operator>=</operator> <call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Exp_mask</name><operator>)</operator>
<operator>&lt;=</operator> <literal type="number">2</literal><operator>*</operator><name>P</name><operator>*</operator><name>Exp_msk1</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>adj</name></expr></argument>)</argument_list></call> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal><operator>*</operator><name>P</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>Exp_msk1</name> <operator>-</operator> <name>y</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Sudden_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Exp_mask</name><operator>)</operator> <operator>&lt;=</operator>
<name>P</name><operator>*</operator><name>Exp_msk1</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>+=</operator> <name>P</name><operator>*</operator><name>Exp_msk1</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>+=</operator> <name>adj</name><operator>*</operator><call><name>ulp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>-=</operator> <name>P</name><operator>*</operator><name>Exp_msk1</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>+=</operator> <name><name>adj</name><operator>.</operator><name>d</name></name><operator>*</operator><call><name>ulp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>adj</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>ratio</name><argument_list>(<argument><expr><name>delta</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>adj</name><operator>.</operator><name>d</name></name> <operator>&lt;</operator> <literal type="number">1.</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>adj</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">1.</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>adj</name><operator>.</operator><name>d</name></name> <operator>&lt;=</operator> <literal type="number">0x7ffffffe</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>adj</name><operator>.</operator><name>d</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>!=</operator> <name><name>adj</name><operator>.</operator><name>d</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>Rounding</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>^</operator> <name>dsign</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>y</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>adj</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Avoid_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>scale</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>y</name> <operator>=</operator> <call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Exp_mask</name><operator>)</operator> <operator>&lt;=</operator> <literal type="number">2</literal><operator>*</operator><name>P</name><operator>*</operator><name>Exp_msk1</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>adj</name></expr></argument>)</argument_list></call> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal><operator>*</operator><name>P</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>Exp_msk1</name> <operator>-</operator> <name>y</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Sudden_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Exp_mask</name><operator>)</operator> <operator>&lt;=</operator> <name>P</name><operator>*</operator><name>Exp_msk1</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>+=</operator> <name>P</name><operator>*</operator><name>Exp_msk1</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>adj</name></expr></argument>)</argument_list></call> <operator>*=</operator> <call><name>ulp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dsign</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>+=</operator> <name>adj</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>-=</operator> <name>adj</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>-=</operator> <name>P</name><operator>*</operator><name>Exp_msk1</name></expr>;</expr_stmt>
<goto>goto <name>cont</name>;</goto>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>adj</name></expr></argument>)</argument_list></call> <operator>*=</operator> <call><name>ulp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dsign</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>Big0</name> <operator>&amp;&amp;</operator> <call><name>word1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>Big1</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ovfl</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>+=</operator> <name><name>adj</name><operator>.</operator><name>d</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>-=</operator> <name><name>adj</name><operator>.</operator><name>d</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<goto>goto <name>cont</name>;</goto>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>dsign</name> <operator>||</operator> <call><name>word1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Bndry_mask</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IEEE_Arith</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Avoid_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <operator>(</operator><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Exp_mask</name><operator>)</operator> <operator>&lt;=</operator> <operator>(</operator><literal type="number">2</literal><operator>*</operator><name>P</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>Exp_msk1</name>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<operator>||</operator> <operator>(</operator><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Exp_mask</name><operator>)</operator> <operator>&lt;=</operator> <name>Exp_msk1</name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SET_INEXACT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>delta</name><operator>-&gt;</operator><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>delta</name><operator>-&gt;</operator><name>wds</name></name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>inexact</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>delta</name><operator>-&gt;</operator><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>delta</name><operator>-&gt;</operator><name>wds</name></name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SET_INEXACT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>inexact</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>delta</name> <operator>=</operator> <call><name>lshift</name><argument_list>(<argument><expr><name>delta</name></expr></argument>,<argument><expr><name>Log2P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>cmp</name><argument_list>(<argument><expr><name>delta</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>drop_down</name>;</goto></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dsign</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Bndry_mask1</name><operator>)</operator> <operator>==</operator> <name>Bndry_mask1</name>
<operator>&amp;&amp;</operator> <call><name>word1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>(</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><ternary><condition><expr><call><name>defined</name><argument_list>(<argument><expr><name>Avoid_Underflow</name></expr></argument>)</argument_list></call></expr></condition></ternary></expr></cpp:if>
<ternary><condition><expr><operator>(</operator><name>scale</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>y</name> <operator>=</operator> <call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Exp_mask</name><operator>)</operator> <operator>&lt;=</operator> <literal type="number">2</literal><operator>*</operator><name>P</name><operator>*</operator><name>Exp_msk1</name><operator>)</operator></expr>
?</condition><then> <expr><operator>(</operator><literal type="number">0xffffffff</literal> <operator>&amp;</operator> <operator>(</operator><literal type="number">0xffffffff</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">2</literal><operator>*</operator><name>P</name><operator>+</operator><literal type="number">1</literal><operator>-</operator><operator>(</operator><name>y</name><operator>&gt;&gt;</operator><name>Exp_shift</name><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator></expr> </then><else>:
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><literal type="number">0xffffffff</literal></expr></else></ternary><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>Big0</name> <operator>&amp;&amp;</operator> <call><name>word1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>Big1</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ovfl</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Exp_mask</name><operator>)</operator>
<operator>+</operator> <name>Exp_msk1</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IBM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>|</operator> <name>Exp_msk1</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
;</expr_stmt>
<expr_stmt><expr><call><name>word1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Avoid_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>dsign</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Bndry_mask</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>word1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<label><name>drop_down</name>:</label>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Sudden_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>L</name> <operator>=</operator> <call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Exp_mask</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IBM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>L</name> <operator>&lt;</operator> <name>Exp_msk1</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Avoid_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>L</name> <operator>&lt;=</operator> <operator>(</operator><ternary><condition><expr><name>scale</name></expr> ?</condition><then> <expr><operator>(</operator><literal type="number">2</literal><operator>*</operator><name>P</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>Exp_msk1</name></expr> </then><else>: <expr><name>Exp_msk1</name></expr></else></ternary><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><name>L</name> <operator>&lt;=</operator> <name>Exp_msk1</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<goto>goto <name>undfl</name>;</goto></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>L</name> <operator>-=</operator> <name>Exp_msk1</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Avoid_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>scale</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>L</name> <operator>=</operator> <call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Exp_mask</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>L</name> <operator>&lt;=</operator> <operator>(</operator><literal type="number">2</literal><operator>*</operator><name>P</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>Exp_msk1</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>L</name> <operator>&gt;</operator> <operator>(</operator><name>P</name><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>Exp_msk1</name></expr>)</condition><block type="pseudo"><block_content>


<break>break;</break></block_content></block></if></if_stmt>

<goto>goto <name>undfl</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>L</name> <operator>=</operator> <operator>(</operator><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Exp_mask</name><operator>)</operator> <operator>-</operator> <name>Exp_msk1</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>L</name> <operator>|</operator> <name>Bndry_mask1</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>word1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0xffffffff</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IBM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<goto>goto <name>cont</name>;</goto>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ROUND_BIASED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Avoid_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>Lsb1</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Lsb1</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>word1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Lsb</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>word1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>LSB</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>dsign</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Avoid_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>+=</operator> <call><name>sulp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>+=</operator> <call><name>ulp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ROUND_BIASED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><else>else <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Avoid_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>-=</operator> <call><name>sulp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>-=</operator> <call><name>ulp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>Sudden_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>undfl</name>;</goto></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Avoid_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>dsign</name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name>dsign</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>aadj</name> <operator>=</operator> <call><name>ratio</name><argument_list>(<argument><expr><name>delta</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;=</operator> <literal type="number">2.</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dsign</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>aadj</name> <operator>=</operator> <call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aadj1</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">1.</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>word1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Bndry_mask</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>Sudden_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>word1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>Tiny1</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>undfl</name>;</goto></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>aadj</name> <operator>=</operator> <literal type="number">1.</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aadj1</name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>-</operator><literal type="number">1.</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>aadj</name> <operator>&lt;</operator> <literal type="number">2.</literal><operator>/</operator><name>FLT_RADIX</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>aadj</name> <operator>=</operator> <literal type="number">1.</literal><operator>/</operator><name>FLT_RADIX</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>aadj</name> <operator>*=</operator> <literal type="number">0.5</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aadj1</name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>-</operator><name>aadj</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>aadj</name> <operator>*=</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aadj1</name></expr></argument>)</argument_list></call> <operator>=</operator> <ternary><condition><expr><name>dsign</name></expr> ?</condition><then> <expr><name>aadj</name></expr> </then><else>: <expr><operator>-</operator><name>aadj</name></expr></else></ternary></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Check_FLT_ROUNDS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<switch>switch<condition>(<expr><name>Rounding</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aadj1</name></expr></argument>)</argument_list></call> <operator>-=</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aadj1</name></expr></argument>)</argument_list></call> <operator>+=</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>
</block_content>}</block></switch>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><name>Flt_Rounds</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aadj1</name></expr></argument>)</argument_list></call> <operator>+=</operator> <literal type="number">0.5</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Exp_mask</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>y</name> <operator>==</operator> <name>Exp_msk1</name><operator>*</operator><operator>(</operator><name>DBL_MAX_EXP</name><operator>+</operator><name>Bias</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv0</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>-=</operator> <name>P</name><operator>*</operator><name>Exp_msk1</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>adj</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aadj1</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>ulp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>+=</operator> <call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>adj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Exp_mask</name><operator>)</operator> <operator>&gt;=</operator>
<name>Exp_msk1</name><operator>*</operator><operator>(</operator><name>DBL_MAX_EXP</name><operator>+</operator><name>Bias</name><operator>-</operator><name>P</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv0</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>Big0</name> <operator>&amp;&amp;</operator> <call><name>word1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv0</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>Big1</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ovfl</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>Big0</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>word1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>Big1</name></expr>;</expr_stmt>
<goto>goto <name>cont</name>;</goto>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>+=</operator> <name>P</name><operator>*</operator><name>Exp_msk1</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Avoid_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>scale</name> <operator>&amp;&amp;</operator> <name>y</name> <operator>&lt;=</operator> <literal type="number">2</literal><operator>*</operator><name>P</name><operator>*</operator><name>Exp_msk1</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>aadj</name> <operator>&lt;=</operator> <literal type="number">0x7fffffff</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>z</name> <operator>=</operator> <name>aadj</name><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>z</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>aadj</name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aadj1</name></expr></argument>)</argument_list></call> <operator>=</operator> <ternary><condition><expr><name>dsign</name></expr> ?</condition><then> <expr><name>aadj</name></expr> </then><else>: <expr><operator>-</operator><name>aadj</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aadj1</name></expr></argument>)</argument_list></call> <operator>+=</operator> <operator>(</operator><literal type="number">2</literal><operator>*</operator><name>P</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>Exp_msk1</name> <operator>-</operator> <name>y</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>adj</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aadj1</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>ulp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>+=</operator> <call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>adj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Sudden_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Exp_mask</name><operator>)</operator> <operator>&lt;=</operator> <name>P</name><operator>*</operator><name>Exp_msk1</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv0</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>+=</operator> <name>P</name><operator>*</operator><name>Exp_msk1</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>adj</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aadj1</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>ulp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>+=</operator> <name>adj</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IBM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Exp_mask</name><operator>)</operator> <operator>&lt;</operator> <name>P</name><operator>*</operator><name>Exp_msk1</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Exp_mask</name><operator>)</operator> <operator>&lt;=</operator> <name>P</name><operator>*</operator><name>Exp_msk1</name></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv0</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>Tiny0</name>
<operator>&amp;&amp;</operator> <call><name>word1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv0</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>Tiny1</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>undfl</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>Tiny0</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>word1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>Tiny1</name></expr>;</expr_stmt>
<goto>goto <name>cont</name>;</goto>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>-=</operator> <name>P</name><operator>*</operator><name>Exp_msk1</name></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>adj</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aadj1</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>ulp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>+=</operator> <name>adj</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>







<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;=</operator> <operator>(</operator><name>P</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>Exp_msk1</name> <operator>&amp;&amp;</operator> <name>aadj</name> <operator>&gt;</operator> <literal type="number">1.</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aadj1</name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>aadj</name> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dsign</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aadj1</name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>-</operator><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aadj1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>adj</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aadj1</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>ulp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>+=</operator> <name>adj</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Exp_mask</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SET_INEXACT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Avoid_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>scale</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>==</operator> <name>z</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>L</name> <operator>=</operator> <operator>(</operator><name>Long</name><operator>)</operator><name>aadj</name></expr>;</expr_stmt>
<expr_stmt><expr><name>aadj</name> <operator>-=</operator> <name>L</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dsign</name> <operator>||</operator> <call><name>word1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Bndry_mask</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>aadj</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">.4999999</literal> <operator>||</operator> <name>aadj</name></expr></argument> &gt;</argument_list></name> <literal type="number">.5000001</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>aadj</name> <operator>&lt;</operator> <literal type="number">.4999999</literal><operator>/</operator><name>FLT_RADIX</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<label><name>cont</name>:</label>
<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name>bd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name>bd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name>bd0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SET_INEXACT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>inexact</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>oldinexact</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv0</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>Exp_1</name> <operator>+</operator> <operator>(</operator><literal type="number">70</literal> <operator>&lt;&lt;</operator> <name>Exp_shift</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>word1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv0</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv0</name></expr></argument>)</argument_list></call> <operator>+=</operator> <literal type="number">1.</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><name>oldinexact</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>clear_inexact</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Avoid_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>scale</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv0</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>Exp_1</name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><name>P</name><operator>*</operator><name>Exp_msk1</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>word1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv0</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>*=</operator> <call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_ERRNO</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IEEE_Arith</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Exp_mask</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>word1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SET_INEXACT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>inexact</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Exp_mask</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv0</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">1e-300</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv0</name></expr></argument>)</argument_list></call> <operator>*=</operator> <call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<label><name>ret</name>:</label>
<if_stmt><if>if <condition>(<expr><name>se</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>se</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>s</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><ternary><condition><expr><name>sign</name></expr> ?</condition><then> <expr><operator>-</operator><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></if></if_stmt>

<function><type><name>double</name></type>
<name>strtod</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KR_headers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<parameter_list>(<parameter><decl><type><name>s00</name></type></decl></parameter>, <parameter><decl><type><name>se</name></type></decl></parameter>, <parameter><decl><type><name>loc</name></type></decl></parameter>)</parameter_list> <decl_stmt><decl><type><name>CONST</name> <name>char</name> <modifier>*</modifier></type><name>s00</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>se</name></decl>;</decl_stmt> locale_t
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<parameter_list>(<parameter><decl><type><name>CONST</name> <name>char</name> <modifier>*</modifier></type><name>s00</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>se</name></decl></parameter>)</parameter_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<return>return <expr><call><name>strtod_l</name><argument_list>(<argument><expr><name>s00</name></expr></argument>, <argument><expr><name>se</name></expr></argument>, <argument><expr><call><name>__get_locale</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function></block_content></block></function>

</unit>
