<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/gdtoa/strtodg.c">






























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gdtoaimp.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_LOCALE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"locale.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>CONST</name> <name>int</name></type>
<name><name>fivesbits</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">21</literal></expr>,
<expr><literal type="number">24</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">45</literal></expr>,
<expr><literal type="number">47</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">52</literal></expr>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">56</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>Bigint</name> <modifier>*</modifier></type>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KR_headers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>increment</name><parameter_list>(<parameter><decl><type><name>b</name></type></decl></parameter>)</parameter_list> <decl_stmt><decl><type><name>Bigint</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
increment<parameter_list>(<parameter><decl><type><name>Bigint</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<decl_stmt><decl><type><name>ULong</name> <modifier>*</modifier></type><name>x</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>xe</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Bigint</name> <modifier>*</modifier></type><name>b1</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Pack_16</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>ULong</name></type> <name>carry</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>xe</name> <operator>=</operator> <name>x</name> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>wds</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Pack_32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>x</name> <operator>&lt;</operator> <operator>(</operator><name>ULong</name><operator>)</operator><literal type="number">0xffffffffL</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><operator>*</operator><name>x</name></expr>;</expr_stmt>
<return>return <expr><name>b</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>x</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block> while<condition>(<expr><name>x</name> <operator>&lt;</operator> <name>xe</name></expr>)</condition>;</do>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<do>do <block>{<block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>*</operator><name>x</name> <operator>+</operator> <name>carry</name></expr>;</expr_stmt>
<expr_stmt><expr><name>carry</name> <operator>=</operator> <name>y</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>x</name><operator>++</operator> <operator>=</operator> <name>y</name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>carry</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>b</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block> while<condition>(<expr><name>x</name> <operator>&lt;</operator> <name>xe</name></expr>)</condition>;</do>
<if_stmt><if>if <condition>(<expr><name>carry</name></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>wds</name></name> <operator>&gt;=</operator> <name><name>b</name><operator>-&gt;</operator><name>maxwds</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>b1</name> <operator>=</operator> <call><name>Balloc</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>k</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Bcopy</name><argument_list>(<argument><expr><name>b1</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>b1</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>x</name><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>wds</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>b</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KR_headers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>decrement</name><parameter_list>(<parameter><decl><type><name>b</name></type></decl></parameter>)</parameter_list> <decl_stmt><decl><type><name>Bigint</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
decrement<parameter_list>(<parameter><decl><type><name>Bigint</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<decl_stmt><decl><type><name>ULong</name> <modifier>*</modifier></type><name>x</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>xe</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Pack_16</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>ULong</name></type> <name>borrow</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>xe</name> <operator>=</operator> <name>x</name> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>wds</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Pack_32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>x</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>--</operator><operator>*</operator><name>x</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>x</name><operator>++</operator> <operator>=</operator> <literal type="number">0xffffffffL</literal></expr>;</expr_stmt>
</block_content>}</block>
while<condition>(<expr><name>x</name> <operator>&lt;</operator> <name>xe</name></expr>)</condition>;</do>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<do>do <block>{<block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>*</operator><name>x</name> <operator>-</operator> <name>borrow</name></expr>;</expr_stmt>
<expr_stmt><expr><name>borrow</name> <operator>=</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <literal type="number">0x10000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>x</name><operator>++</operator> <operator>=</operator> <name>y</name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>
</block_content>}</block> while<condition>(<expr><name>borrow</name> <operator>&amp;&amp;</operator> <name>x</name> <operator>&lt;</operator> <name>xe</name></expr>)</condition>;</do>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KR_headers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>all_on</name><parameter_list>(<parameter><decl><type><name>b</name></type></decl></parameter>, <parameter><decl><type><name>n</name></type></decl></parameter>)</parameter_list> <decl_stmt><decl><type><name>Bigint</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
all_on<parameter_list>(<parameter><decl><type><name>Bigint</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<decl_stmt><decl><type><name>ULong</name> <modifier>*</modifier></type><name>x</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>xe</name></decl>;</decl_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>xe</name> <operator>=</operator> <name>x</name> <operator>+</operator> <operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <name>kshift</name><operator>)</operator></expr>;</expr_stmt>
<while>while<condition>(<expr><name>x</name> <operator>&lt;</operator> <name>xe</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>x</name><operator>++</operator> <operator>&amp;</operator> <name>ALL_ON</name><operator>)</operator> <operator>!=</operator> <name>ALL_ON</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&amp;=</operator> <name>kmask</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>(</operator><operator>*</operator><name>x</name> <operator>|</operator> <operator>(</operator><name>ALL_ON</name> <operator>&lt;&lt;</operator> <name>n</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <name>ALL_ON</name><operator>)</operator> <operator>==</operator> <name>ALL_ON</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>Bigint</name> <modifier>*</modifier></type>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KR_headers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>set_ones</name><parameter_list>(<parameter><decl><type><name>b</name></type></decl></parameter>, <parameter><decl><type><name>n</name></type></decl></parameter>)</parameter_list> <decl_stmt><decl><type><name>Bigint</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
set_ones<parameter_list>(<parameter><decl><type><name>Bigint</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULong</name> <modifier>*</modifier></type><name>x</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>xe</name></decl>;</decl_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <operator>(</operator><name>n</name> <operator>+</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>kshift</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name>kshift</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>k</name></name> <operator>&lt;</operator> <name>k</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>Balloc</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>kshift</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&amp;=</operator> <name>kmask</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>wds</name></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>xe</name> <operator>=</operator> <name>x</name> <operator>+</operator> <name>k</name></expr>;</expr_stmt>
<while>while<condition>(<expr><name>x</name> <operator>&lt;</operator> <name>xe</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>x</name><operator>++</operator> <operator>=</operator> <name>ALL_ON</name></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>n</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>x</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;=</operator> <name>ULbits</name> <operator>-</operator> <name>n</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>b</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>
<name>rvOK</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KR_headers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>fpi</name></expr></argument>, <argument><expr><name>exp</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><name>exact</name></expr></argument>, <argument><expr><name>rd</name></expr></argument>, <argument><expr><name>irv</name></expr></argument>)</argument_list>
<name>U</name> <modifier>*</modifier><name>d</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>FPI</name> <modifier>*</modifier></type><name>fpi</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>Long</name> <modifier>*</modifier></type><name>exp</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>ULong</name> <modifier>*</modifier></type><name>bits</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>exact</name></decl>, <decl><type ref="prev"/><name>rd</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>irv</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>U</name> <operator>*</operator><name>d</name><operator>,</operator> <name>FPI</name> <operator>*</operator><name>fpi</name><operator>,</operator> <name>Long</name> <operator>*</operator><name>exp</name><operator>,</operator> <name>ULong</name> <operator>*</operator><name>bits</name><operator>,</operator> <name>int</name> <name>exact</name><operator>,</operator> <name>int</name> <name>rd</name><operator>,</operator> <name>int</name> <operator>*</operator><name>irv</name><operator>)</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr><name>Bigint</name> <operator>*</operator><name>b</name></expr>;
<expr><name>ULong</name> <name>carry</name></expr>, <expr><name>inex</name></expr>, <expr><name>lostbits</name></expr>;
<expr><name>int</name> <name>bdif</name></expr>, <expr><name>e</name></expr>, <expr><name>j</name></expr>, <expr><name>k</name></expr>, <expr><name>k1</name></expr>, <expr><name>nb</name></expr>, <expr><name>rv</name></expr>;

<expr><name>carry</name> <operator>=</operator> <name>rv</name> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>b</name> <operator>=</operator> <call><name>d2b</name><argument_list>(<argument><expr><call><name>dval</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bdif</name></expr></argument>)</argument_list></call></expr>;
<expr><name>bdif</name> <operator>-=</operator> <name>nb</name> <operator>=</operator> <name><name>fpi</name><operator>-&gt;</operator><name>nbits</name></name></expr>;
<expr><name>e</name> <operator>+=</operator> <name>bdif</name></expr>;
<if_stmt><if>if <condition>(<expr><name>bdif</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>exact</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>trunc</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>ret</name>;</goto>
<expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt>
<if_stmt><if>if <condition>(<expr><name>P</name> <operator>==</operator> <name>nb</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>IMPRECISE_INEXACT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>exact</name> <operator>&amp;&amp;</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<name><name>fpi</name><operator>-&gt;</operator><name>rounding</name></name> <operator>==</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RND_PRODQUOT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>FPI_Round_near</name>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name>Flt_Rounds</name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition><block type="pseudo"><block_content> <goto>goto <name>trunc</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>ret</name>;</goto>
</block_content>}</block></if></if_stmt>
<switch>switch<condition>(<expr><name>rd</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<goto>goto <name>trunc</name>;</goto>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>k</name> <operator>=</operator> <name>bdif</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>trunc</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>k</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>exact</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ret</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<goto>goto <name>trunc</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>x</name><index>[<expr><name>k</name><operator>&gt;&gt;</operator><name>kshift</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><name>ULong</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>k</name> <operator>&amp;</operator> <name>kmask</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<goto>goto <name>trunc</name>;</goto>
</block_content>}</block></switch>

<expr_stmt><expr><name>carry</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<label><name>trunc</name>:</label>
<expr_stmt><expr><name>inex</name> <operator>=</operator> <name>lostbits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bdif</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>( <expr><operator>(</operator><name>lostbits</name> <operator>=</operator> <call><name>any_on</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>bdif</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>inex</name> <operator>=</operator> <name>STRTOG_Inexlo</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>rshift</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>bdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>carry</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>inex</name> <operator>=</operator> <name>STRTOG_Inexhi</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>increment</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>(</operator><name>j</name> <operator>=</operator> <name>nb</name> <operator>&amp;</operator> <name>kmask</name><operator>)</operator> <operator>!=</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>ULbits</name> <operator>-</operator> <name>j</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>hi0bits</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>x</name><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>wds</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>j</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lostbits</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>lostbits</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>rshift</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>bdif</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>lshift</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>-</operator><name>bdif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>&lt;</operator> <name><name>fpi</name><operator>-&gt;</operator><name>emin</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>fpi</name><operator>-&gt;</operator><name>emin</name></name> <operator>-</operator> <name>e</name></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>fpi</name><operator>-&gt;</operator><name>emin</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;</operator> <name>nb</name> <operator>||</operator> <name><name>fpi</name><operator>-&gt;</operator><name>sudden_underflow</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>wds</name></name> <operator>=</operator> <name>inex</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>irv</name> <operator>=</operator> <name>STRTOG_Underflow</name> <operator>|</operator> <name>STRTOG_Inexlo</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>k1</name> <operator>=</operator> <name>k</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>k1</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>lostbits</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>lostbits</name> <operator>=</operator> <call><name>any_on</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>k1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lostbits</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>exact</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ret</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>lostbits</name> <operator>|=</operator>
<name>carry</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>x</name><index>[<expr><name>k1</name><operator>&gt;&gt;</operator><name>kshift</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>k1</name> <operator>&amp;</operator> <name>kmask</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rshift</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>irv</name> <operator>=</operator> <name>STRTOG_Denormal</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>carry</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>increment</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inex</name> <operator>=</operator> <name>STRTOG_Inexhi</name> <operator>|</operator> <name>STRTOG_Underflow</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>lostbits</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>inex</name> <operator>=</operator> <name>STRTOG_Inexlo</name> <operator>|</operator> <name>STRTOG_Underflow</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>e</name> <operator>&gt;</operator> <name><name>fpi</name><operator>-&gt;</operator><name>emax</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>fpi</name><operator>-&gt;</operator><name>emax</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>irv</name> <operator>=</operator> <name>STRTOG_Infinite</name> <operator>|</operator> <name>STRTOG_Overflow</name> <operator>|</operator> <name>STRTOG_Inexhi</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_ERRNO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>wds</name></name> <operator>=</operator> <name>inex</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>exp</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>copybits</name><argument_list>(<argument><expr><name>bits</name></expr></argument>, <argument><expr><name>nb</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>irv</name> <operator>|=</operator> <name>inex</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<label><name>ret</name>:</label>
<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}

static <function><type><name>int</name></type>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KR_headers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>mantbits</name><parameter_list>(<parameter><decl><type><name>d</name></type></decl></parameter>)</parameter_list> <decl_stmt><decl><type><name>U</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
mantbits<parameter_list>(<parameter><decl><type><name>U</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<decl_stmt><decl><type><name>ULong</name></type> <name>L</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>L</name> <operator>=</operator> <call><name>word1</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>|</operator> <call><name>word1</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>L</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>( <expr><operator>(</operator><name>L</name> <operator>=</operator> <call><name>word1</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>P</name> <operator>-</operator> <call><name>lo0bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>L</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>L</name> <operator>=</operator> <call><name>word0</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>|</operator> <call><name>word0</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>|</operator> <name>Exp_msk11</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>L</name> <operator>=</operator> <call><name>word0</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>Exp_msk1</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>P</name> <operator>-</operator> <literal type="number">32</literal> <operator>-</operator> <call><name>lo0bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>L</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>int</name></type>
<name>strtodg_l</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KR_headers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument_list>(<argument><expr><name>s00</name></expr></argument>, <argument><expr><name>se</name></expr></argument>, <argument><expr><name>fpi</name></expr></argument>, <argument><expr><name>exp</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><name>loc</name></expr></argument>)</argument_list>
<name>CONST</name> <name>char</name> <modifier>*</modifier><name>s00</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>se</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>FPI</name> <modifier>*</modifier></type><name>fpi</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>Long</name> <modifier>*</modifier></type><name>exp</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>ULong</name> <modifier>*</modifier></type><name>bits</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>locale_t</name></type> <name>loc</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>CONST</name> <name>char</name> <operator>*</operator><name>s00</name><operator>,</operator> <name>char</name> <operator>*</operator><operator>*</operator><name>se</name><operator>,</operator> <name>FPI</name> <operator>*</operator><name>fpi</name><operator>,</operator> <name>Long</name> <operator>*</operator><name>exp</name><operator>,</operator> <name>ULong</name> <operator>*</operator><name>bits</name><operator>,</operator> <name>locale_t</name> <name>loc</name><operator>)</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr><name>int</name> <name>abe</name></expr>, <expr><name>abits</name></expr>, <expr><name>asub</name></expr>;
<expr><name>int</name> <name>bb0</name></expr>, <expr><name>bb2</name></expr>, <expr><name>bb5</name></expr>, <expr><name>bbe</name></expr>, <expr><name>bd2</name></expr>, <expr><name>bd5</name></expr>, <expr><name>bbbits</name></expr>, <expr><name>bs2</name></expr>, <expr><name>c</name></expr>, <expr><name>decpt</name></expr>, <expr><name>denorm</name></expr>;
<expr><name>int</name> <name>dsign</name></expr>, <expr><name>e</name></expr>, <expr><name>e1</name></expr>, <expr><name>e2</name></expr>, <expr><name>emin</name></expr>, <expr><name>esign</name></expr>, <expr><name>finished</name></expr>, <expr><name>i</name></expr>, <expr><name>inex</name></expr>, <expr><name>irv</name></expr>;
<expr><name>int</name> <name>j</name></expr>, <expr><name>k</name></expr>, <expr><name>nbits</name></expr>, <expr><name>nd</name></expr>, <expr><name>nd0</name></expr>, <expr><name>nf</name></expr>, <expr><name>nz</name></expr>, <expr><name>nz0</name></expr>, <expr><name>rd</name></expr>, <expr><name>rvbits</name></expr>, <expr><name>rve</name></expr>, <expr><name>rve1</name></expr>, <expr><name>sign</name></expr>;
<expr><name>int</name> <name>sudden_underflow</name></expr>;
<expr><name>CONST</name> <name>char</name> <operator>*</operator><name>s</name></expr>, <expr><operator>*</operator><name>s0</name></expr>, <expr><operator>*</operator><name>s1</name></expr>;
<expr><name>double</name> <name>adj0</name></expr>, <expr><name>tol</name></expr>;
<expr><name>Long</name> <name>L</name></expr>;
<expr><name>U</name> <name>adj</name></expr>, <expr><name>rv</name></expr>;
<expr><name>ULong</name> <operator>*</operator><name>b</name></expr>, <expr><operator>*</operator><name>be</name></expr>, <expr><name>y</name></expr>, <expr><name>z</name></expr>;
<expr><name>Bigint</name> <operator>*</operator><name>ab</name></expr>, <expr><operator>*</operator><name>bb</name></expr>, <expr><operator>*</operator><name>bb1</name></expr>, <expr><operator>*</operator><name>bd</name></expr>, <expr><operator>*</operator><name>bd0</name></expr>, <expr><operator>*</operator><name>bs</name></expr>, <expr><operator>*</operator><name>delta</name></expr>, <expr><operator>*</operator><name>rvb</name></expr>, <expr><operator>*</operator><name>rvb0</name></expr>;
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_LOCALE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NO_LOCALE_CACHE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>char</name> <operator>*</operator><name>decimalpoint</name> <operator>=</operator> <call><name>localeconv_l</name><argument_list>(<argument><expr><name>loc</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>decimal_point</name></expr>;
<expr><name>int</name> <name>dplen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>decimalpoint</name></expr></argument>)</argument_list></call></expr>;
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><name>char</name> <operator>*</operator><name>decimalpoint</name></expr>;
<expr><specifier>static</specifier> <name>char</name> <operator>*</operator><name>decimalpoint_cache</name></expr>;
<expr><specifier>static</specifier> <name>int</name> <name>dplen</name></expr>;
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>s0</name> <operator>=</operator> <name>decimalpoint_cache</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s0</name> <operator>=</operator> <call><name>localeconv_l</name><argument_list>(<argument><expr><name>loc</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>decimal_point</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>decimalpoint_cache</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>MALLOC</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s0</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>decimalpoint_cache</name></expr></argument>, <argument><expr><name>s0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s0</name> <operator>=</operator> <name>decimalpoint_cache</name></expr>;</expr_stmt>
<expr_stmt/></block_content></block></if></if_stmt></block_content></block></if></if_stmt>}</block>
<name>dplen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>s0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}
decimalpoint <expr_stmt><expr><operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>s0</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dplen</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>irv</name> <operator>=</operator> <name>STRTOG_Zero</name></expr>;</expr_stmt>
<expr_stmt><expr><name>denorm</name> <operator>=</operator> <name>sign</name> <operator>=</operator> <name>nz0</name> <operator>=</operator> <name>nz</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0.</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>rvb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nbits</name> <operator>=</operator> <name><name>fpi</name><operator>-&gt;</operator><name>nbits</name></name></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>s</name> <operator>=</operator> <name>s00</name></expr>;</init><condition>;</condition><incr><expr><name>s</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <switch>switch<condition>(<expr><operator>*</operator><name>s</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'-'</literal></expr>:</case>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<case>case <expr><literal type="char">'+'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>++</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>break2</name>;</goto></block_content></block></if></if_stmt>

<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>irv</name> <operator>=</operator> <name>STRTOG_NoNumber</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>s00</name></expr>;</expr_stmt>
<goto>goto <name>ret</name>;</goto>
<case>case <expr><literal type="char">'\t'</literal></expr>:</case>
<case>case <expr><literal type="char">'\n'</literal></expr>:</case>
<case>case <expr><literal type="char">'\v'</literal></expr>:</case>
<case>case <expr><literal type="char">'\f'</literal></expr>:</case>
<case>case <expr><literal type="char">'\r'</literal></expr>:</case>
<case>case <expr><literal type="char">' '</literal></expr>:</case>
<continue>continue;</continue>
<default>default:</default>
<goto>goto <name>break2</name>;</goto>
</block_content>}</block></switch></block_content></block></for>
<label><name>break2</name>:</label>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_HEX_FP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<switch>switch<condition>(<expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'x'</literal></expr>:</case>
<case>case <expr><literal type="char">'X'</literal></expr>:</case>
<expr_stmt><expr><name>irv</name> <operator>=</operator> <call><name>gethex</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>fpi</name></expr></argument>, <argument><expr><name>exp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rvb</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>irv</name> <operator>==</operator> <name>STRTOG_NoNumber</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>s00</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<goto>goto <name>ret</name>;</goto>
</block_content>}</block></switch>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>nz0</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>*</operator><operator>++</operator><name>s</name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition><block type="pseudo"><block_content> <empty_stmt>;</empty_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ret</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sudden_underflow</name> <operator>=</operator> <name><name>fpi</name><operator>-&gt;</operator><name>sudden_underflow</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s0</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>decpt</name> <operator>=</operator> <name>nd</name> <operator>=</operator> <name>nf</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>s</name><operator>)</operator> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>;</condition> <incr><expr><name>nd</name><operator>++</operator></expr><operator>,</operator> <expr><name>s</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>nd</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">10</literal><operator>*</operator><name>y</name> <operator>+</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>nd</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>z</name> <operator>=</operator> <literal type="number">10</literal><operator>*</operator><name>z</name> <operator>+</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><name>nd0</name> <operator>=</operator> <name>nd</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_LOCALE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <operator>*</operator><name>decimalpoint</name></expr>)</condition> <block>{<block_content>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name><name>decimalpoint</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>decimalpoint</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>dig_done</name>;</goto></block_content></block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>s</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>s</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>decpt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nd</name></expr>)</condition> <block>{<block_content>
<for>for<control>(<init>;</init> <condition><expr><name>c</name> <operator>==</operator> <literal type="char">'0'</literal></expr>;</condition> <incr><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>s</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>nz</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s0</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nf</name> <operator>+=</operator> <name>nz</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nz</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>have_dig</name>;</goto>
</block_content>}</block></if></if_stmt>
<goto>goto <name>dig_done</name>;</goto>
</block_content>}</block></if></if_stmt>
<for>for<control>(<init>;</init> <condition><expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>;</condition> <incr><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>s</name></expr></incr>)</control> <block>{<block_content>
<label><name>have_dig</name>:</label>
<expr_stmt><expr><name>nz</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>-=</operator> <literal type="char">'0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nf</name> <operator>+=</operator> <name>nz</name></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>nd</name><operator>++</operator> <operator>&lt;</operator> <literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>y</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>nd</name> <operator>&lt;=</operator> <name>DBL_DIG</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>z</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>nd</name><operator>++</operator> <operator>&lt;</operator> <literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">10</literal><operator>*</operator><name>y</name> <operator>+</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>nd</name> <operator>&lt;=</operator> <name>DBL_DIG</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>z</name> <operator>=</operator> <literal type="number">10</literal><operator>*</operator><name>z</name> <operator>+</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nz</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<label><name>dig_done</name>:</label>
<expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'e'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'E'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nd</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>nz</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>nz0</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>irv</name> <operator>=</operator> <name>STRTOG_NoNumber</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>s00</name></expr>;</expr_stmt>
<goto>goto <name>ret</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>s00</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>esign</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<switch>switch<condition>(<expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>s</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'-'</literal></expr>:</case>
<expr_stmt><expr><name>esign</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<case>case <expr><literal type="char">'+'</literal></expr>:</case>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>s</name></expr>;</expr_stmt>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>
<while>while<condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>s</name></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>L</name> <operator>=</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s1</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>s</name><operator>)</operator> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>L</name> <operator>=</operator> <literal type="number">10</literal><operator>*</operator><name>L</name> <operator>+</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>-</operator> <name>s1</name> <operator>&gt;</operator> <literal type="number">8</literal> <operator>||</operator> <name>L</name> <operator>&gt;</operator> <literal type="number">19999</literal></expr>)</condition><block type="pseudo"><block_content>



<expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">19999</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>L</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>esign</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>-</operator><name>e</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>s00</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nd</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nz</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>nz0</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INFNAN_CHECK</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>decpt</name></expr>)</condition><block type="pseudo"><block_content>
<switch>switch<condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'i'</literal></expr>:</case>
<case>case <expr><literal type="char">'I'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>match</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>,<argument><expr><literal type="string">"nf"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>--</operator><name>s</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>match</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>,<argument><expr><literal type="string">"inity"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>s</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>irv</name> <operator>=</operator> <name>STRTOG_Infinite</name></expr>;</expr_stmt>
<goto>goto <name>infnanexp</name>;</goto>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'n'</literal></expr>:</case>
<case>case <expr><literal type="char">'N'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>match</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="string">"an"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>irv</name> <operator>=</operator> <name>STRTOG_NaN</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>exp</name> <operator>=</operator> <name><name>fpi</name><operator>-&gt;</operator><name>emax</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>No_Hex_NaN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>irv</name> <operator>=</operator> <call><name>hexnan</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>fpi</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<goto>goto <name>infnanexp</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></switch></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>irv</name> <operator>=</operator> <name>STRTOG_NoNumber</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>s00</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<goto>goto <name>ret</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>irv</name> <operator>=</operator> <name>STRTOG_Normal</name></expr>;</expr_stmt>
<expr_stmt><expr><name>e1</name> <operator>=</operator> <name>e</name> <operator>-=</operator> <name>nf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<switch>switch<condition>(<expr><name><name>fpi</name><operator>-&gt;</operator><name>rounding</name></name> <operator>&amp;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FPI_Round_up</name></expr>:</case>
<expr_stmt><expr><name>rd</name> <operator>=</operator> <literal type="number">2</literal> <operator>-</operator> <name>sign</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FPI_Round_zero</name></expr>:</case>
<expr_stmt><expr><name>rd</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FPI_Round_down</name></expr>:</case>
<expr_stmt><expr><name>rd</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <name>sign</name></expr>;</expr_stmt>
</block_content>}</block></switch>






<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nd0</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nd0</name> <operator>=</operator> <name>nd</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <ternary><condition><expr><name>nd</name> <operator>&lt;</operator> <name>DBL_DIG</name> <operator>+</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>nd</name></expr> </then><else>: <expr><name>DBL_DIG</name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <name><name>tens</name><index>[<expr><name>k</name> <operator>-</operator> <literal type="number">9</literal></expr>]</index></name> <operator>*</operator> <call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>z</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>bd0</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nbits</name> <operator>&lt;=</operator> <name>P</name> <operator>&amp;&amp;</operator> <name>nd</name> <operator>&lt;=</operator> <name>DBL_DIG</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>e</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>rvOK</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>, <argument><expr><name>fpi</name></expr></argument>, <argument><expr><name>exp</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>rd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>irv</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ret</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>e</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>&lt;=</operator> <name>Ten_pmax</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<goto>goto <name>vax_ovfl_check</name>;</goto>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>fivesbits</name><index>[<expr><name>e</name></expr>]</index></name> <operator>+</operator> <call><name>mantbits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>P</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rounded_product</name><argument_list>(<argument><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>tens</name><index>[<expr><name>e</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rvOK</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>, <argument><expr><name>fpi</name></expr></argument>, <argument><expr><name>exp</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>rd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>irv</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ret</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>e1</name> <operator>-=</operator> <name>e</name></expr>;</expr_stmt>
<goto>goto <name>rv_notOK</name>;</goto>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>DBL_DIG</name> <operator>-</operator> <name>nd</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>&lt;=</operator> <name>Ten_pmax</name> <operator>+</operator> <name>i</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>e2</name> <operator>=</operator> <name>e</name> <operator>-</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>e1</name> <operator>-=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>*=</operator> <name><name>tens</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VAX</name></expr></argument>)</argument_list></call></expr></cpp:if>



<label><name>vax_ovfl_check</name>:</label>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>adj</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>adj</name></expr></argument>)</argument_list></call> <operator>-=</operator> <name>P</name><operator>*</operator><name>Exp_msk1</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rounded_product</name><argument_list>(<argument><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>adj</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>tens</name><index>[<expr><name>e2</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>adj</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Exp_mask</name><operator>)</operator>
<operator>&gt;</operator> <name>Exp_msk1</name><operator>*</operator><operator>(</operator><name>DBL_MAX_EXP</name><operator>+</operator><name>Bias</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>P</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>rv_notOK</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>adj</name></expr></argument>)</argument_list></call> <operator>+=</operator> <name>P</name><operator>*</operator><name>Exp_msk1</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>adj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>rounded_product</name><argument_list>(<argument><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>tens</name><index>[<expr><name>e2</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><call><name>rvOK</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>, <argument><expr><name>fpi</name></expr></argument>, <argument><expr><name>exp</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>rd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>irv</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ret</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>e1</name> <operator>-=</operator> <name>e2</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>Inaccurate_Divide</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name>e</name> <operator>&gt;=</operator> <operator>-</operator><name>Ten_pmax</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rounded_quotient</name><argument_list>(<argument><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>tens</name><index>[<expr><operator>-</operator><name>e</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rvOK</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>, <argument><expr><name>fpi</name></expr></argument>, <argument><expr><name>exp</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>rd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>irv</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ret</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>e1</name> <operator>-=</operator> <name>e</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<label><name>rv_notOK</name>:</label>
<expr_stmt><expr><name>e1</name> <operator>+=</operator> <name>nd</name> <operator>-</operator> <name>k</name></expr>;</expr_stmt>



<expr_stmt><expr><name>e2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e1</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>( <expr><operator>(</operator><name>i</name> <operator>=</operator> <name>e1</name> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator> <operator>!=</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>*=</operator> <name><name>tens</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>e1</name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">15</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>e1</name> <operator>&gt;&gt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<while>while<condition>(<expr><name>e1</name> <operator>&gt;=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>n_bigtens</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>e2</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Exp_mask</name><operator>)</operator>
<operator>&gt;&gt;</operator> <name>Exp_shift1</name><operator>)</operator> <operator>-</operator> <name>Bias</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;=</operator> <operator>~</operator><name>Exp_mask</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>|=</operator> <name>Bias</name> <operator>&lt;&lt;</operator> <name>Exp_shift1</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>*=</operator> <name><name>bigtens</name><index>[<expr><name>n_bigtens</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>e1</name> <operator>-=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>n_bigtens</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>e2</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Exp_mask</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>Exp_shift1</name><operator>)</operator> <operator>-</operator> <name>Bias</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;=</operator> <operator>~</operator><name>Exp_mask</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>|=</operator> <name>Bias</name> <operator>&lt;&lt;</operator> <name>Exp_shift1</name></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>e1</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>e1</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>e1</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>*=</operator> <name><name>bigtens</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>e1</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>e1</name> <operator>=</operator> <operator>-</operator><name>e1</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>(</operator><name>i</name> <operator>=</operator> <name>e1</name> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator> <operator>!=</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>/=</operator> <name><name>tens</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>e1</name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">15</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>e1</name> <operator>&gt;&gt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<while>while<condition>(<expr><name>e1</name> <operator>&gt;=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>n_bigtens</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>e2</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Exp_mask</name><operator>)</operator>
<operator>&gt;&gt;</operator> <name>Exp_shift1</name><operator>)</operator> <operator>-</operator> <name>Bias</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;=</operator> <operator>~</operator><name>Exp_mask</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>|=</operator> <name>Bias</name> <operator>&lt;&lt;</operator> <name>Exp_shift1</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>*=</operator> <name><name>tinytens</name><index>[<expr><name>n_bigtens</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>e1</name> <operator>-=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>n_bigtens</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>e2</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Exp_mask</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>Exp_shift1</name><operator>)</operator> <operator>-</operator> <name>Bias</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>&amp;=</operator> <operator>~</operator><name>Exp_mask</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>|=</operator> <name>Bias</name> <operator>&lt;&lt;</operator> <name>Exp_shift1</name></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>e1</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>e1</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>e1</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call> <operator>*=</operator> <name><name>tinytens</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IBM</name></expr></argument>)</argument_list></call></expr></cpp:if>





<expr_stmt><expr><name>e2</name> <operator>&lt;&lt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>rvb</name> <operator>=</operator> <call><name>d2b</name><argument_list>(<argument><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>rve</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rvbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rve</name> <operator>+=</operator> <name>e2</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>j</name> <operator>=</operator> <name>rvbits</name> <operator>-</operator> <name>nbits</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rshift</name><argument_list>(<argument><expr><name>rvb</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rvbits</name> <operator>=</operator> <name>nbits</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rve</name> <operator>+=</operator> <name>j</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bb0</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>e2</name> <operator>=</operator> <name>rve</name> <operator>+</operator> <name>rvbits</name> <operator>-</operator> <name>nbits</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e2</name> <operator>&gt;</operator> <name><name>fpi</name><operator>-&gt;</operator><name>emax</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>huge</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>rve1</name> <operator>=</operator> <name>rve</name> <operator>+</operator> <name>rvbits</name> <operator>-</operator> <name>nbits</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e2</name> <operator>&lt;</operator> <operator>(</operator><name>emin</name> <operator>=</operator> <name><name>fpi</name><operator>-&gt;</operator><name>emin</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>denorm</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>rve</name> <operator>-</operator> <name>emin</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rvb</name> <operator>=</operator> <call><name>lshift</name><argument_list>(<argument><expr><name>rvb</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rvbits</name> <operator>+=</operator> <name>j</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>j</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rvbits</name> <operator>+=</operator> <name>j</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rvbits</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>rvbits</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<label><name>ufl</name>:</label>
<expr_stmt><expr><name><name>rvb</name><operator>-&gt;</operator><name>wds</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rvb</name><operator>-&gt;</operator><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>exp</name> <operator>=</operator> <name>emin</name></expr>;</expr_stmt>
<expr_stmt><expr><name>irv</name> <operator>=</operator> <name>STRTOG_Underflow</name> <operator>|</operator> <name>STRTOG_Inexlo</name></expr>;</expr_stmt>
<goto>goto <name>ret</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>rvb</name><operator>-&gt;</operator><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>rvb</name><operator>-&gt;</operator><name>wds</name></name> <operator>=</operator> <name>rvbits</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rshift</name><argument_list>(<argument><expr><name>rvb</name></expr></argument>, <argument><expr><operator>-</operator><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>rve</name> <operator>=</operator> <name>rve1</name> <operator>=</operator> <name>emin</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sudden_underflow</name> <operator>&amp;&amp;</operator> <name>e2</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>emin</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ufl</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name>bd0</name> <operator>=</operator> <call><name>s2b</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><name>nd0</name></expr></argument>, <argument><expr><name>nd</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>dplen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>bd</name> <operator>=</operator> <call><name>Balloc</name><argument_list>(<argument><expr><name><name>bd0</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Bcopy</name><argument_list>(<argument><expr><name>bd</name></expr></argument>, <argument><expr><name>bd0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bb</name> <operator>=</operator> <call><name>Balloc</name><argument_list>(<argument><expr><name><name>rvb</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Bcopy</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>rvb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bbbits</name> <operator>=</operator> <name>rvbits</name> <operator>-</operator> <name>bb0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bbe</name> <operator>=</operator> <name>rve</name> <operator>+</operator> <name>bb0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bs</name> <operator>=</operator> <call><name>i2b</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>e</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bb2</name> <operator>=</operator> <name>bb5</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bd2</name> <operator>=</operator> <name>bd5</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>bb2</name> <operator>=</operator> <name>bb5</name> <operator>=</operator> <operator>-</operator><name>e</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bd2</name> <operator>=</operator> <name>bd5</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bbe</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bb2</name> <operator>+=</operator> <name>bbe</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>bd2</name> <operator>-=</operator> <name>bbe</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>bs2</name> <operator>=</operator> <name>bb2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>nbits</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>bbbits</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>bbe</name> <operator>+</operator> <name>bbbits</name> <operator>-</operator> <name>nbits</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>emin</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>j</name> <operator>+=</operator> <name>i</name> <operator>-</operator> <name>emin</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>bb2</name> <operator>+=</operator> <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bd2</name> <operator>+=</operator> <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <ternary><condition><expr><name>bb2</name> <operator>&lt;</operator> <name>bd2</name></expr> ?</condition><then> <expr><name>bb2</name></expr> </then><else>: <expr><name>bd2</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <name>bs2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>bs2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bb2</name> <operator>-=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bd2</name> <operator>-=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bs2</name> <operator>-=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bb5</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bs</name> <operator>=</operator> <call><name>pow5mult</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>bb5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bb1</name> <operator>=</operator> <call><name>mult</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bb</name> <operator>=</operator> <name>bb1</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bb2</name> <operator>-=</operator> <name>bb0</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bb2</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bb</name> <operator>=</operator> <call><name>lshift</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>bb2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>bb2</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rshift</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><operator>-</operator><name>bb2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bd5</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bd</name> <operator>=</operator> <call><name>pow5mult</name><argument_list>(<argument><expr><name>bd</name></expr></argument>, <argument><expr><name>bd5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bd2</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bd</name> <operator>=</operator> <call><name>lshift</name><argument_list>(<argument><expr><name>bd</name></expr></argument>, <argument><expr><name>bd2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bs2</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bs</name> <operator>=</operator> <call><name>lshift</name><argument_list>(<argument><expr><name>bs</name></expr></argument>, <argument><expr><name>bs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>asub</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>inex</name> <operator>=</operator> <name>STRTOG_Inexhi</name></expr>;</expr_stmt>
<expr_stmt><expr><name>delta</name> <operator>=</operator> <call><name>diff</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>bd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>delta</name><operator>-&gt;</operator><name>wds</name></name> <operator>&lt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>delta</name><operator>-&gt;</operator><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>dsign</name> <operator>=</operator> <name><name>delta</name><operator>-&gt;</operator><name>sign</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>delta</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <name>finished</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>L</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cmp</name><argument_list>(<argument><expr><name>delta</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rd</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>irv</name> <operator>=</operator> <name>STRTOG_Normal</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>(</operator><name>finished</name> <operator>=</operator> <name>dsign</name> <operator>^</operator> <operator>(</operator><name>rd</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>!=</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dsign</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>irv</name> <operator>|=</operator> <name>STRTOG_Inexhi</name></expr>;</expr_stmt>
<goto>goto <name>adj1</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>irv</name> <operator>|=</operator> <name>STRTOG_Inexlo</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rve1</name> <operator>==</operator> <name>emin</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>adj1</name>;</goto></block_content></block></if></if_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <name>nbits</name></expr>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <name>ULbits</name></expr>;</condition>
<incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>j</name> <operator>-=</operator> <name>ULbits</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>rvb</name><operator>-&gt;</operator><name>x</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <name>ALL_ON</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>adj1</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>lo0bits</name><argument_list>(<argument><expr><name><name>rvb</name><operator>-&gt;</operator><name>x</name></name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>adj1</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>rve</name> <operator>=</operator> <name>rve1</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>rvb</name> <operator>=</operator> <call><name>set_ones</name><argument_list>(<argument><expr><name>rvb</name></expr></argument>, <argument><expr><name>rvbits</name> <operator>=</operator> <name>nbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>irv</name> <operator>|=</operator> <ternary><condition><expr><name>dsign</name></expr> ?</condition><then> <expr><name>STRTOG_Inexlo</name></expr> </then><else>: <expr><name>STRTOG_Inexhi</name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>irv</name> <operator>=</operator> <ternary><condition><expr><name>dsign</name></expr>
?</condition><then> <expr><name>STRTOG_Normal</name> <operator>|</operator> <name>STRTOG_Inexlo</name></expr>
</then><else>: <expr><name>STRTOG_Normal</name> <operator>|</operator> <name>STRTOG_Inexhi</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dsign</name> <operator>||</operator> <name>bbbits</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>denorm</name> <operator>||</operator> <name>rve1</name> <operator>==</operator> <name>emin</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>delta</name> <operator>=</operator> <call><name>lshift</name><argument_list>(<argument><expr><name>delta</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>cmp</name><argument_list>(<argument><expr><name>delta</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>irv</name> <operator>=</operator> <name>STRTOG_Normal</name> <operator>|</operator> <name>STRTOG_Inexlo</name></expr>;</expr_stmt>
<goto>goto <name>drop_down</name>;</goto>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dsign</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>denorm</name> <operator>&amp;&amp;</operator> <call><name>all_on</name><argument_list>(<argument><expr><name>rvb</name></expr></argument>, <argument><expr><name>rvbits</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>rvb</name><operator>-&gt;</operator><name>wds</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rvb</name><operator>-&gt;</operator><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>rve</name> <operator>=</operator> <name>emin</name> <operator>+</operator> <name>nbits</name> <operator>-</operator> <operator>(</operator><name>rvbits</name> <operator>=</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>irv</name> <operator>=</operator> <name>STRTOG_Normal</name> <operator>|</operator> <name>STRTOG_Inexhi</name></expr>;</expr_stmt>
<expr_stmt><expr><name>denorm</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>irv</name> <operator>=</operator> <name>STRTOG_Normal</name> <operator>|</operator> <name>STRTOG_Inexlo</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>bbbits</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>irv</name> <operator>=</operator> <name>STRTOG_Normal</name></expr>;</expr_stmt>
<label><name>drop_down</name>:</label>

<if_stmt><if>if <condition>(<expr><name>rve1</name> <operator>==</operator> <name>emin</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>irv</name> <operator>=</operator> <name>STRTOG_Normal</name> <operator>|</operator> <name>STRTOG_Inexhi</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rvb</name><operator>-&gt;</operator><name>wds</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>rvb</name><operator>-&gt;</operator><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>sudden_underflow</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>rve</name> <operator>-=</operator> <name>nbits</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rvb</name> <operator>=</operator> <call><name>set_ones</name><argument_list>(<argument><expr><name>rvb</name></expr></argument>, <argument><expr><name>rvbits</name> <operator>=</operator> <name>nbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>irv</name> <operator>=</operator> <name>STRTOG_Normal</name> <operator>|</operator> <name>STRTOG_Inexhi</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>bbbits</name> <operator>&lt;</operator> <name>nbits</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>denorm</name><operator>)</operator> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>rvb</name><operator>-&gt;</operator><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dsign</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rvb</name> <operator>=</operator> <call><name>increment</name><argument_list>(<argument><expr><name>rvb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>kmask</name> <operator>&amp;</operator> <operator>(</operator><name>ULbits</name> <operator>-</operator> <operator>(</operator><name>rvbits</name> <operator>&amp;</operator> <name>kmask</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>hi0bits</name><argument_list>(<argument><expr><name><name>rvb</name><operator>-&gt;</operator><name>x</name><index>[<expr><name><name>rvb</name><operator>-&gt;</operator><name>wds</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>j</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rvbits</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>irv</name> <operator>=</operator> <name>STRTOG_Normal</name> <operator>|</operator> <name>STRTOG_Inexhi</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>bbbits</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>undfl</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>decrement</name><argument_list>(<argument><expr><name>rvb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>irv</name> <operator>=</operator> <name>STRTOG_Normal</name> <operator>|</operator> <name>STRTOG_Inexlo</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>adj</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>ratio</name><argument_list>(<argument><expr><name>delta</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;=</operator> <literal type="number">2.</literal></expr>)</condition> <block>{<block_content>
<label><name>adj1</name>:</label>
<expr_stmt><expr><name>inex</name> <operator>=</operator> <name>STRTOG_Inexlo</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dsign</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>asub</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>inex</name> <operator>=</operator> <name>STRTOG_Inexhi</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>denorm</name> <operator>&amp;&amp;</operator> <name>bbbits</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<label><name>undfl</name>:</label>
<expr_stmt><expr><name><name>rvb</name><operator>-&gt;</operator><name>wds</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>rve</name> <operator>=</operator> <name>emin</name></expr>;</expr_stmt>
<expr_stmt><expr><name>irv</name> <operator>=</operator> <name>STRTOG_Underflow</name> <operator>|</operator> <name>STRTOG_Inexlo</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>adj0</name> <operator>=</operator> <call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>adj</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">1.</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>adj0</name> <operator>=</operator> <call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>adj</name></expr></argument>)</argument_list></call> <operator>*=</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dsign</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>asub</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>inex</name> <operator>=</operator> <name>STRTOG_Inexlo</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>adj</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">2147483647.</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>L</name> <operator>=</operator> <name>adj0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>adj0</name> <operator>-=</operator> <name>L</name></expr>;</expr_stmt>
<switch>switch<condition>(<expr><name>rd</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>adj0</name> <operator>&gt;=</operator> <literal type="number">.5</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>inc_L</name>;</goto></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>asub</name> <operator>&amp;&amp;</operator> <name>adj0</name> <operator>&gt;</operator> <literal type="number">0.</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>inc_L</name>;</goto></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>asub</name> <operator>&amp;&amp;</operator> <name>adj0</name> <operator>&gt;</operator> <literal type="number">0.</literal></expr>)</condition> <block>{<block_content>
<label><name>inc_L</name>:</label>
<expr_stmt><expr><name>L</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>inex</name> <operator>=</operator> <name>STRTOG_Inexact</name> <operator>-</operator> <name>inex</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>adj</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>L</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name>rve</name> <operator>+</operator> <name>rvbits</name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><operator>!</operator><name>denorm</name> <operator>&amp;&amp;</operator> <name>rvbits</name> <operator>&lt;</operator> <name>nbits</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rvb</name> <operator>=</operator> <call><name>lshift</name><argument_list>(<argument><expr><name>rvb</name></expr></argument>, <argument><expr><name>j</name> <operator>=</operator> <name>nbits</name> <operator>-</operator> <name>rvbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rve</name> <operator>-=</operator> <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rvbits</name> <operator>=</operator> <name>nbits</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ab</name> <operator>=</operator> <call><name>d2b</name><argument_list>(<argument><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>adj</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>abe</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>abits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>abe</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rshift</name><argument_list>(<argument><expr><name>ab</name></expr></argument>, <argument><expr><operator>-</operator><name>abe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>abe</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ab</name> <operator>=</operator> <call><name>lshift</name><argument_list>(<argument><expr><name>ab</name></expr></argument>, <argument><expr><name>abe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>rvb0</name> <operator>=</operator> <name>rvb</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>asub</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>j</name> <operator>=</operator> <call><name>hi0bits</name><argument_list>(<argument><expr><name><name>rvb</name><operator>-&gt;</operator><name>x</name><index>[<expr><name><name>rvb</name><operator>-&gt;</operator><name>wds</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rvb</name> <operator>=</operator> <call><name>diff</name><argument_list>(<argument><expr><name>rvb</name></expr></argument>, <argument><expr><name>ab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>rvb0</name><operator>-&gt;</operator><name>wds</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>denorm</name></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>rvb</name><operator>-&gt;</operator><name>wds</name></name> <operator>&lt;=</operator> <name>k</name>
<operator>||</operator> <call><name>hi0bits</name><argument_list>( <argument><expr><name><name>rvb</name><operator>-&gt;</operator><name>x</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;</operator>
<call><name>hi0bits</name><argument_list>(<argument><expr><name><name>rvb0</name><operator>-&gt;</operator><name>x</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>rve1</name> <operator>==</operator> <name>emin</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>--</operator><name>rvbits</name></expr>;</expr_stmt>
<expr_stmt><expr><name>denorm</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>rvb</name> <operator>=</operator> <call><name>lshift</name><argument_list>(<argument><expr><name>rvb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>rve</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>rve1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>L</name> <operator>=</operator> <name>finished</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>rvb</name> <operator>=</operator> <call><name>sum</name><argument_list>(<argument><expr><name>rvb</name></expr></argument>, <argument><expr><name>ab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>rvb</name><operator>-&gt;</operator><name>wds</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;=</operator> <name><name>rvb0</name><operator>-&gt;</operator><name>wds</name></name>
<operator>||</operator> <call><name>hi0bits</name><argument_list>(<argument><expr><name><name>rvb</name><operator>-&gt;</operator><name>x</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>hi0bits</name><argument_list>(<argument><expr><name><name>rvb0</name><operator>-&gt;</operator><name>x</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>denorm</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>rvbits</name> <operator>==</operator> <name>nbits</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>denorm</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>rshift</name><argument_list>(<argument><expr><name>rvb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rve</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>rve1</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>L</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name>ab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name>rvb0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>finished</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>z</name> <operator>=</operator> <name>rve</name> <operator>+</operator> <name>rvbits</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>==</operator> <name>z</name> <operator>&amp;&amp;</operator> <name>L</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tol</name> <operator>=</operator> <call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>adj</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">5e-16</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>adj</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>adj0</name> <operator>-</operator> <literal type="number">.5</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>adj</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <operator>-</operator><name>tol</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>adj0</name> <operator>&gt;</operator> <name>tol</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>irv</name> <operator>|=</operator> <name>inex</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>adj</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>tol</name> <operator>&amp;&amp;</operator> <name>adj0</name> <operator>&lt;</operator> <literal type="number">1.</literal> <operator>-</operator> <name>tol</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>irv</name> <operator>|=</operator> <name>inex</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bb0</name> <operator>=</operator> <ternary><condition><expr><name>denorm</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>trailz</name><argument_list>(<argument><expr><name>rvb</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name>bd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>denorm</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>j</name> <operator>=</operator> <name>nbits</name> <operator>-</operator> <name>rvbits</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rvb</name> <operator>=</operator> <call><name>lshift</name><argument_list>(<argument><expr><name>rvb</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rshift</name><argument_list>(<argument><expr><name>rvb</name></expr></argument>, <argument><expr><operator>-</operator><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>rve</name> <operator>-=</operator> <name>j</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>exp</name> <operator>=</operator> <name>rve</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name>bd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name>bd0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rve</name> <operator>&gt;</operator> <name><name>fpi</name><operator>-&gt;</operator><name>emax</name></name></expr>)</condition> <block>{<block_content>
<switch>switch<condition>(<expr><name><name>fpi</name><operator>-&gt;</operator><name>rounding</name></name> <operator>&amp;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FPI_Round_near</name></expr>:</case>
<goto>goto <name>huge</name>;</goto>
<case>case <expr><name>FPI_Round_up</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sign</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>huge</name>;</goto></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FPI_Round_down</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>sign</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>huge</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name>rvb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rvb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>irv</name> <operator>=</operator> <name>STRTOG_Normal</name> <operator>|</operator> <name>STRTOG_Inexlo</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>exp</name> <operator>=</operator> <name><name>fpi</name><operator>-&gt;</operator><name>emax</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>bits</name></expr>;</expr_stmt>
<expr_stmt><expr><name>be</name> <operator>=</operator> <name>b</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>fpi</name><operator>-&gt;</operator><name>nbits</name></name> <operator>+</operator> <literal type="number">31</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>
<while>while<condition>(<expr><name>b</name> <operator>&lt;</operator> <name>be</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>b</name><operator>++</operator> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>j</name> <operator>=</operator> <name><name>fpi</name><operator>-&gt;</operator><name>nbits</name></name> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><operator>--</operator><name>be</name> <operator>&gt;&gt;=</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>j</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>ret</name>;</goto>
<label><name>huge</name>:</label>
<expr_stmt><expr><name><name>rvb</name><operator>-&gt;</operator><name>wds</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>irv</name> <operator>=</operator> <name>STRTOG_Infinite</name> <operator>|</operator> <name>STRTOG_Overflow</name> <operator>|</operator> <name>STRTOG_Inexhi</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_ERRNO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<label><name>infnanexp</name>:</label>
<expr_stmt><expr><operator>*</operator><name>exp</name> <operator>=</operator> <name><name>fpi</name><operator>-&gt;</operator><name>emax</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<label><name>ret</name>:</label>
<if_stmt><if>if <condition>(<expr><name>denorm</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>sudden_underflow</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rvb</name><operator>-&gt;</operator><name>wds</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>irv</name> <operator>=</operator> <name>STRTOG_Underflow</name> <operator>|</operator> <name>STRTOG_Inexlo</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_ERRNO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>irv</name> <operator>=</operator> <operator>(</operator><name>irv</name> <operator>&amp;</operator> <operator>~</operator><name>STRTOG_Retmask</name><operator>)</operator> <operator>|</operator>
<operator>(</operator><ternary><condition><expr><name><name>rvb</name><operator>-&gt;</operator><name>wds</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>STRTOG_Denormal</name></expr> </then><else>: <expr><name>STRTOG_Zero</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>irv</name> <operator>&amp;</operator> <name>STRTOG_Inexact</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>irv</name> <operator>|=</operator> <name>STRTOG_Underflow</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_ERRNO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>se</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>se</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>s</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>sign</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>irv</name> <operator>|=</operator> <name>STRTOG_Neg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>rvb</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>copybits</name><argument_list>(<argument><expr><name>bits</name></expr></argument>, <argument><expr><name>nbits</name></expr></argument>, <argument><expr><name>rvb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name>rvb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>irv</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</unit>
