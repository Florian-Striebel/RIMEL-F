<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/gdtoa/arithchk.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>dalign</name></decl>;</decl_stmt>
<typedef>typedef <type><struct>struct
<name>Akind</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>kind</name></decl>;</decl_stmt>
}</block></struct></type> <name>Akind</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>Akind</name></type>
<name>IEEE_8087</name> <init>= <expr><block>{ <expr><literal type="string">"IEEE_8087"</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr></init></decl>,
<decl><type ref="prev"/><name>IEEE_MC68k</name> <init>= <expr><block>{ <expr><literal type="string">"IEEE_MC68k"</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr></init></decl>,
<decl><type ref="prev"/><name>IBM</name> <init>= <expr><block>{ <expr><literal type="string">"IBM"</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr></init></decl>,
<decl><type ref="prev"/><name>VAX</name> <init>= <expr><block>{ <expr><literal type="string">"VAX"</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr></init></decl>,
<decl><type ref="prev"/><name>CRAY</name> <init>= <expr><block>{ <expr><literal type="string">"CRAY"</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>Akind</name> <modifier>*</modifier></type>
<name>Lcheck</name><parameter_list>()</parameter_list>
<block>{<block_content>
<union>union <block>{
<decl_stmt><decl><type><name>double</name></type> <name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name><name>L</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>u</name></decl>;</union>
<struct>struct <block>{
<decl_stmt><decl><type><name>double</name></type> <name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>L</name></decl>;</decl_stmt>
}</block> <decl><name><name>x</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</struct>

<if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <literal type="number">2</literal><operator>*</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dalign</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>u</name><operator>.</operator><name>L</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>u</name><operator>.</operator><name>L</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>u</name><operator>.</operator><name>d</name></name> <operator>=</operator> <literal type="number">1e13</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>u</name><operator>.</operator><name>L</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1117925532</literal> <operator>&amp;&amp;</operator> <name><name>u</name><operator>.</operator><name>L</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">448790528</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>&amp;</operator><name>IEEE_MC68k</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>u</name><operator>.</operator><name>L</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1117925532</literal> <operator>&amp;&amp;</operator> <name><name>u</name><operator>.</operator><name>L</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">448790528</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>&amp;</operator><name>IEEE_8087</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>u</name><operator>.</operator><name>L</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">2065213935</literal> <operator>&amp;&amp;</operator> <name><name>u</name><operator>.</operator><name>L</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">10752</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>&amp;</operator><name>VAX</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>u</name><operator>.</operator><name>L</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1267827943</literal> <operator>&amp;&amp;</operator> <name><name>u</name><operator>.</operator><name>L</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">704643072</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>&amp;</operator><name>IBM</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Akind</name> <modifier>*</modifier></type>
<name>icheck</name><parameter_list>()</parameter_list>
<block>{<block_content>
<union>union <block>{
<decl_stmt><decl><type><name>double</name></type> <name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>L</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>u</name></decl>;</union>
<struct>struct <block>{
<decl_stmt><decl><type><name>double</name></type> <name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>L</name></decl>;</decl_stmt>
}</block> <decl><name><name>x</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</struct>

<if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <literal type="number">2</literal><operator>*</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dalign</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>u</name><operator>.</operator><name>L</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>u</name><operator>.</operator><name>L</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>u</name><operator>.</operator><name>d</name></name> <operator>=</operator> <literal type="number">1e13</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>u</name><operator>.</operator><name>L</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1117925532</literal> <operator>&amp;&amp;</operator> <name><name>u</name><operator>.</operator><name>L</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">448790528</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>&amp;</operator><name>IEEE_MC68k</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>u</name><operator>.</operator><name>L</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1117925532</literal> <operator>&amp;&amp;</operator> <name><name>u</name><operator>.</operator><name>L</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">448790528</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>&amp;</operator><name>IEEE_8087</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>u</name><operator>.</operator><name>L</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">2065213935</literal> <operator>&amp;&amp;</operator> <name><name>u</name><operator>.</operator><name>L</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">10752</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>&amp;</operator><name>VAX</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>u</name><operator>.</operator><name>L</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1267827943</literal> <operator>&amp;&amp;</operator> <name><name>u</name><operator>.</operator><name>L</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">704643072</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>&amp;</operator><name>IBM</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>emptyfmt</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>Akind</name> <modifier>*</modifier></type>
<name>ccheck</name><parameter_list>()</parameter_list>
<block>{<block_content>
<union>union <block>{
<decl_stmt><decl><type><name>double</name></type> <name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>L</name></decl>;</decl_stmt>
}</block> <decl><name>u</name></decl>;</union>
<decl_stmt><decl><type><name>long</name></type> <name>Cray1</name></decl>;</decl_stmt>


<expr_stmt><expr><name>Cray1</name> <operator>=</operator> <ternary><condition><expr><call><name>printf</name><argument_list>(<argument><expr><name>emptyfmt</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">4617762</literal></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>printf</name><argument_list>(<argument><expr><name>emptyfmt</name></expr></argument>, <argument><expr><name>Cray1</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Cray1</name> <operator>=</operator> <literal type="number">1000000</literal><operator>*</operator><name>Cray1</name> <operator>+</operator> <literal type="number">693716</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>printf</name><argument_list>(<argument><expr><name>emptyfmt</name></expr></argument>, <argument><expr><name>Cray1</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>Cray1</name> <operator>=</operator> <literal type="number">1000000</literal><operator>*</operator><name>Cray1</name> <operator>+</operator> <literal type="number">115456</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>u</name><operator>.</operator><name>d</name></name> <operator>=</operator> <literal type="number">1e13</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>u</name><operator>.</operator><name>L</name></name> <operator>==</operator> <name>Cray1</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>&amp;</operator><name>CRAY</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>fzcheck</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>double</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">1.</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <literal type="number">.1</literal></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">155</literal></expr>;</init><condition>;</condition> <incr><expr><name>b</name> <operator>*=</operator> <name>b</name></expr><operator>,</operator> <expr><name>i</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>*=</operator> <name>b</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>a</name> <operator>*</operator> <name>a</name></expr>;</expr_stmt>
<return>return <expr><name>b</name> <operator>==</operator> <literal type="number">0.</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>()</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>Akind</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>Ldef</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WRITE_ARITH_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><literal type="string">"arith.h"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Cannot open arith.h\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>f</name> <operator>=</operator> <name>stdout</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">2</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>Lcheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">2</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>Ldef</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>icheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>ccheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>a</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"#define %s\n#define Arith_Kind_ASL %d\n"</literal></expr></argument>,
<argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>kind</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>Ldef</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"#define Long int\n#define Intcast (int)(long)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dalign</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"#define Double_Align\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"#define X64_bit_pointers\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_LONG_LONG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr>sizeof<operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"#define NO_LONG_LONG\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>kind</name></name> <operator>&lt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>fzcheck</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"#define Sudden_Underflow\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"/* Unknown arithmetic */\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
</unit>
