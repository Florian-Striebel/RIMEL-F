<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/gdtoa/g_ddfmt.c">





























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gdtoaimp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<function><type><name>char</name> <modifier>*</modifier></type>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KR_headers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>g_ddfmt</name><parameter_list>(<parameter><decl><type><name>buf</name></type></decl></parameter>, <parameter><decl><type><name>dd0</name></type></decl></parameter>, <parameter><decl><type><name>ndig</name></type></decl></parameter>, <parameter><decl><type><name>bufsize</name></type></decl></parameter>)</parameter_list> <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>dd0</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>ndig</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>bufsize</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
g_ddfmt<parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>dd0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ndig</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bufsize</name></decl></parameter>)</parameter_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<decl_stmt><decl><type><name>FPI</name></type> <name>fpi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>b</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>se</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULong</name> <modifier>*</modifier></type><name>L</name></decl>, <decl><type ref="prev"/><name><name>bits0</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bits</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>zx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bx</name></decl>, <decl><type ref="prev"/><name>by</name></decl>, <decl><type ref="prev"/><name>decpt</name></decl>, <decl><type ref="prev"/><name>ex</name></decl>, <decl><type ref="prev"/><name>ey</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Bigint</name> <modifier>*</modifier></type><name>x</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>y</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>z</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>U</name> <modifier>*</modifier></type><name>dd</name></decl>, <decl><type ref="prev"/><name><name>ddx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Honor_FLT_ROUNDS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>Rounding</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Trust_FLT_ROUNDS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>Rounding</name> <operator>=</operator> <name>Flt_Rounds</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>Rounding</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<switch>switch<condition>(<expr><call><name>fegetround</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FE_TOWARDZERO</name></expr>:</case> <expr_stmt><expr><name>Rounding</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>FE_UPWARD</name></expr>:</case> <expr_stmt><expr><name>Rounding</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>FE_DOWNWARD</name></expr>:</case> <expr_stmt><expr><name>Rounding</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></switch>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Rounding</name></cpp:macro> <cpp:value>FPI_Round_near</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>bufsize</name> <operator>&lt;</operator> <literal type="number">10</literal> <operator>||</operator> <name>bufsize</name> <operator>&lt;</operator> <name>ndig</name> <operator>+</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dd</name> <operator>=</operator> <operator>(</operator><name>U</name><operator>*</operator><operator>)</operator><name>dd0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>L</name> <operator>=</operator> <name><name>dd</name><operator>-&gt;</operator><name>L</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>L</name><index>[<expr><name>_0</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7ff00000L</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x7ff00000L</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>L</name><index>[<expr><name>_0</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xfffff</literal> <operator>||</operator> <name><name>L</name><index>[<expr><name>_1</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<label><name>nanret</name>:</label>
<return>return <expr><call><name>strcp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"NaN"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>L</name><index>[<expr><literal type="number">2</literal><operator>+</operator><name>_0</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7ff00000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x7ff00000</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>L</name><index>[<expr><literal type="number">2</literal><operator>+</operator><name>_0</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xfffff</literal> <operator>||</operator> <name><name>L</name><index>[<expr><literal type="number">2</literal><operator>+</operator><name>_1</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>nanret</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>L</name><index>[<expr><name>_0</name></expr>]</index></name> <operator>^</operator> <name><name>L</name><index>[<expr><literal type="number">2</literal><operator>+</operator><name>_0</name></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x80000000L</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>nanret</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<label><name>infret</name>:</label>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>L</name><index>[<expr><name>_0</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80000000L</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>b</name><operator>++</operator> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>strcp</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="string">"Infinity"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>L</name><index>[<expr><literal type="number">2</literal><operator>+</operator><name>_0</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7ff00000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x7ff00000</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>L</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>L</name><index>[<expr><name>_0</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xfffff</literal> <operator>||</operator> <name><name>L</name><index>[<expr><name>_1</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>nanret</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>infret</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0.</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>IGNORE_ZERO_SIGN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>L</name><index>[<expr><name>_0</name></expr>]</index></name> <operator>&amp;</operator> <name><name>L</name><index>[<expr><literal type="number">2</literal><operator>+</operator><name>_0</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80000000L</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>b</name><operator>++</operator> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>*</operator><name>b</name><operator>++</operator> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>b</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>L</name><index>[<expr><name>_0</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7ff00000L</literal><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><name><name>L</name><index>[<expr><literal type="number">2</literal><operator>+</operator><name>_0</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7ff00000L</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ddx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ddx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dd</name> <operator>=</operator> <name>ddx</name></expr>;</expr_stmt>
<expr_stmt><expr><name>L</name> <operator>=</operator> <name><name>dd</name><operator>-&gt;</operator><name>L</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <call><name>d2b</name><argument_list>(<argument><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>ex</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0.</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>no_y</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>d2b</name><argument_list>(<argument><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>ey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>by</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>(</operator><name>i</name> <operator>=</operator> <name>ex</name> <operator>-</operator> <name>ey</name><operator>)</operator> <operator>!=</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>lshift</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ex</name> <operator>=</operator> <name>ey</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>lshift</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><operator>-</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>L</name><index>[<expr><name>_0</name></expr>]</index></name> <operator>^</operator> <name><name>L</name><index>[<expr><literal type="number">2</literal><operator>+</operator><name>_0</name></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x80000000L</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>z</name> <operator>=</operator> <call><name>diff</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>L</name><index>[<expr><name>_0</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80000000L</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>sign</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>z</name> <operator>=</operator> <call><name>sum</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>L</name><index>[<expr><name>_0</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80000000L</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>no_y</name>:</label>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <name>zx</name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>!</operator><operator>*</operator><name>zx</name></expr>;</condition> <incr><expr><name>zx</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">32</literal></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <call><name>lo0bits</name><argument_list>(<argument><expr><name>zx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rshift</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ex</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>fpi</name><operator>.</operator><name>nbits</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>wds</name></name> <operator>*</operator> <literal type="number">32</literal> <operator>-</operator> <call><name>hi0bits</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>x</name><index>[<expr><name>j</name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>wds</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fpi</name><operator>.</operator><name>nbits</name></name> <operator>&lt;</operator> <literal type="number">106</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>fpi</name><operator>.</operator><name>nbits</name></name> <operator>=</operator> <literal type="number">106</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>j</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bits0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>bits</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<while>while<condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bits0</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <name>bits0</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ndig</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>bufsize</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>fpi</name><operator>.</operator><name>nbits</name></name> <operator>*</operator> <literal type="number">.301029995664</literal><operator>)</operator> <operator>+</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>fpi</name><operator>.</operator><name>emin</name></name> <operator>=</operator> <literal type="number">1</literal><operator>-</operator><literal type="number">1023</literal><operator>-</operator><literal type="number">53</literal><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fpi</name><operator>.</operator><name>emax</name></name> <operator>=</operator> <literal type="number">2046</literal><operator>-</operator><literal type="number">1023</literal><operator>-</operator><literal type="number">106</literal><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fpi</name><operator>.</operator><name>rounding</name></name> <operator>=</operator> <name>Rounding</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fpi</name><operator>.</operator><name>sudden_underflow</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>STRTOG_Normal</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>gdtoa</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fpi</name></expr></argument>, <argument><expr><name>ex</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>ndig</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>decpt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>se</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>g__fmt</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>se</name></expr></argument>, <argument><expr><name>decpt</name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>sign</name></name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>b</name></expr>;</return>
</block_content>}</block></function>
</unit>
