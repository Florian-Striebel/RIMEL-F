<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/gdtoa/gdtoaimp.h">


















































































































































































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GDTOAIMP_H_INCLUDED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GDTOAIMP_H_INCLUDED</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Long</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gdtoa.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gd_qnan.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Honor_FLT_ROUNDS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fenv.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdio.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Bug</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{fprintf(stderr, "%s\n", x); exit(1);}</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"limits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libc_private.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"namespace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"un-namespace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xlocale_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KR_headers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Char</name></cpp:macro> <cpp:value>char</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Char</name></cpp:macro> <cpp:value>void</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MALLOC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <name>Char</name> <modifier>*</modifier><name>MALLOC</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MALLOC</name></cpp:macro> <cpp:value>malloc</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INFNAN_CHECK</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_LOCALE</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NO_LOCALE_CACHE</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Honor_FLT_ROUNDS</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Trust_FLT_ROUNDS</name></cpp:macro></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>IEEE_Arith</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>Avoid_Underflow</name></cpp:undef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IEEE_MC68k</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE_Arith</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IEEE_8087</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IEEE_Arith</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"errno.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Bad_float_h</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IEEE_Arith</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBL_DIG</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBL_MAX_10_EXP</name></cpp:macro> <cpp:value>308</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBL_MAX_EXP</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLT_RADIX</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBL_MAX</name></cpp:macro> <cpp:value>1.7976931348623157e+308</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IBM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBL_DIG</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBL_MAX_10_EXP</name></cpp:macro> <cpp:value>75</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBL_MAX_EXP</name></cpp:macro> <cpp:value>63</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLT_RADIX</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBL_MAX</name></cpp:macro> <cpp:value>7.2370055773322621e+75</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBL_DIG</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBL_MAX_10_EXP</name></cpp:macro> <cpp:value>38</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBL_MAX_EXP</name></cpp:macro> <cpp:value>127</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLT_RADIX</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBL_MAX</name></cpp:macro> <cpp:value>1.7014118346046923e+38</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>n_bigtens</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LONG_MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LONG_MAX</name></cpp:macro> <cpp:value>2147483647</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"float.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IEEE_Arith</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Scale_Bit</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>n_bigtens</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IBM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>n_bigtens</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>n_bigtens</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MATH_H__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"math.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IEEE_8087</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>defined</name><argument_list>(<argument><expr><name>IEEE_MC68k</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VAX</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>defined</name><argument_list>(<argument><expr><name>IBM</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr></cpp:if>
<decl_stmt><decl><type><name>Exactly</name> <name>one</name> <name>of</name></type> <name>IEEE_8087</name></decl>, <decl><type ref="prev"/><name>IEEE_MC68k</name></decl>, <decl><type ref="prev"/><name>VAX</name></decl>, <decl><type ref="prev"/><name>or</name> <name>IBM</name> <name>should</name> <name>be</name> <name><name>defined</name><operator>.</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name/></name>typedef union <block>{<block_content> <decl_stmt><decl><type><name>double</name></type> <name>d</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>ULong</name></type> <name><name>L</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> </block_content>}</block></decl></decl_stmt> <expr_stmt><expr><name>U</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IEEE_8087</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>word0</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)-&gt;L[1]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>word1</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)-&gt;L[0]</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>word0</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)-&gt;L[0]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>word1</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)-&gt;L[1]</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dval</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)-&gt;d</cpp:value></cpp:define>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IEEE_8087</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>defined</name><argument_list>(<argument><expr><name>VAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Storeinc</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((unsigned short *)a)[1] = (unsigned short)b, ((unsigned short *)a)[0] = (unsigned short)c, a++)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Storeinc</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((unsigned short *)a)[0] = (unsigned short)b, ((unsigned short *)a)[1] = (unsigned short)c, a++)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IEEE_Arith</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Exp_shift</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Exp_shift1</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Exp_msk1</name></cpp:macro> <cpp:value>0x100000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Exp_msk11</name></cpp:macro> <cpp:value>0x100000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Exp_mask</name></cpp:macro> <cpp:value>0x7ff00000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P</name></cpp:macro> <cpp:value>53</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Bias</name></cpp:macro> <cpp:value>1023</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Emin</name></cpp:macro> <cpp:value>(-1022)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Exp_1</name></cpp:macro> <cpp:value>0x3ff00000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Exp_11</name></cpp:macro> <cpp:value>0x3ff00000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Ebits</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Frac_mask</name></cpp:macro> <cpp:value>0xfffff</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Frac_mask1</name></cpp:macro> <cpp:value>0xfffff</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Ten_pmax</name></cpp:macro> <cpp:value>22</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Bletch</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Bndry_mask</name></cpp:macro> <cpp:value>0xfffff</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Bndry_mask1</name></cpp:macro> <cpp:value>0xfffff</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSB</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Sign_bit</name></cpp:macro> <cpp:value>0x80000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Log2P</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Tiny0</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Tiny1</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Quick_max</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Int_max</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>Flt_Rounds</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FLT_ROUNDS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Flt_Rounds</name></cpp:macro> <cpp:value>FLT_ROUNDS</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Flt_Rounds</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>Sudden_Underflow</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Sudden_Underflow</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IBM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>Flt_Rounds</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Flt_Rounds</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Exp_shift</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Exp_shift1</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Exp_msk1</name></cpp:macro> <cpp:value>0x1000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Exp_msk11</name></cpp:macro> <cpp:value>0x1000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Exp_mask</name></cpp:macro> <cpp:value>0x7f000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Bias</name></cpp:macro> <cpp:value>65</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Exp_1</name></cpp:macro> <cpp:value>0x41000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Exp_11</name></cpp:macro> <cpp:value>0x41000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Ebits</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Frac_mask</name></cpp:macro> <cpp:value>0xffffff</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Frac_mask1</name></cpp:macro> <cpp:value>0xffffff</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Bletch</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Ten_pmax</name></cpp:macro> <cpp:value>22</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Bndry_mask</name></cpp:macro> <cpp:value>0xefffff</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Bndry_mask1</name></cpp:macro> <cpp:value>0xffffff</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSB</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Sign_bit</name></cpp:macro> <cpp:value>0x80000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Log2P</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Tiny0</name></cpp:macro> <cpp:value>0x100000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Tiny1</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Quick_max</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Int_max</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>Flt_Rounds</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Flt_Rounds</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Exp_shift</name></cpp:macro> <cpp:value>23</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Exp_shift1</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Exp_msk1</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Exp_msk11</name></cpp:macro> <cpp:value>0x800000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Exp_mask</name></cpp:macro> <cpp:value>0x7f80</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P</name></cpp:macro> <cpp:value>56</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Bias</name></cpp:macro> <cpp:value>129</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Exp_1</name></cpp:macro> <cpp:value>0x40800000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Exp_11</name></cpp:macro> <cpp:value>0x4080</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Ebits</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Frac_mask</name></cpp:macro> <cpp:value>0x7fffff</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Frac_mask1</name></cpp:macro> <cpp:value>0xffff007f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Ten_pmax</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Bletch</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Bndry_mask</name></cpp:macro> <cpp:value>0xffff007f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Bndry_mask1</name></cpp:macro> <cpp:value>0xffff007f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSB</name></cpp:macro> <cpp:value>0x10000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Sign_bit</name></cpp:macro> <cpp:value>0x8000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Log2P</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Tiny0</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Tiny1</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Quick_max</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Int_max</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>IEEE_Arith</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROUND_BIASED</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ROUND_BIASED_without_Round_Up</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ROUND_BIASED</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROUND_BIASED</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RND_PRODQUOT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rounded_product</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a = rnd_prod(a, b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rounded_quotient</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a = rnd_quot(a, b)</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KR_headers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <name>double</name></type> <name>rnd_prod</name><argument_list>()</argument_list></decl>, <decl><type ref="prev"/><name>rnd_quot</name><argument_list>()</argument_list></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>extern</specifier> <name>double</name></type> <name>rnd_prod</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>rnd_quot</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rounded_product</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a *= b</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rounded_quotient</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a /= b</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Big0</name></cpp:macro> <cpp:value>(Frac_mask1 | Exp_msk1*(DBL_MAX_EXP+Bias-1))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Big1</name></cpp:macro> <cpp:value>0xffffffff</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>Pack_16</name></cpp:undef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>Pack_32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Pack_32</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NO_LONG_LONG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ULLong</name></cpp:undef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Just_16</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>Pack_32</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Pack_16</name></cpp:macro></cpp:define>





<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>Llong</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Llong</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ULLong</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ULLong</name></cpp:macro> <cpp:value>unsigned Llong</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Pack_32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ULbits</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kshift</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kmask</name></cpp:macro> <cpp:value>31</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALL_ON</name></cpp:macro> <cpp:value>0xffffffff</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ULbits</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kshift</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kmask</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALL_ON</name></cpp:macro> <cpp:value>0xffff</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MULTIPLE_THREADS</name></cpp:macro></cpp:define>
<decl_stmt><decl><type><specifier>extern</specifier> <name>pthread_mutex_t</name></type> <name><name>__gdtoa_locks</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACQUIRE_DTOA_LOCK</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (__isthreaded) _pthread_mutex_lock(&amp;__gdtoa_locks[n]); } while(0)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREE_DTOA_LOCK</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (__isthreaded) _pthread_mutex_unlock(&amp;__gdtoa_locks[n]); } while(0)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Kmax</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>

<struct>struct
<name>Bigint</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>Bigint</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>, <decl><type ref="prev"/><name>maxwds</name></decl>, <decl><type ref="prev"/><name>sign</name></decl>, <decl><type ref="prev"/><name>wds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULong</name></type> <name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><name><name>struct</name> <name>Bigint</name></name></type> <name>Bigint</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NO_STRING_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DECLARE_SIZE_T</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>size_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>memcpy_D2A</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>,</operator> <specifier>const</specifier> <name>void</name><operator>*</operator><operator>,</operator> <name>size_t</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Bcopy</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memcpy_D2A(&amp;x-&gt;sign,&amp;y-&gt;sign,y-&gt;wds*sizeof(ULong) + 2*sizeof(int))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Bcopy</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memcpy(&amp;x-&gt;sign,&amp;y-&gt;sign,y-&gt;wds*sizeof(ULong) + 2*sizeof(int))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dtoa</name></cpp:macro> <cpp:value>__dtoa</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gdtoa</name></cpp:macro> <cpp:value>__gdtoa</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>freedtoa</name></cpp:macro> <cpp:value>__freedtoa</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strtodg</name></cpp:macro> <cpp:value>__strtodg</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>g_ddfmt</name></cpp:macro> <cpp:value>__g_ddfmt</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>g_dfmt</name></cpp:macro> <cpp:value>__g_dfmt</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>g_ffmt</name></cpp:macro> <cpp:value>__g_ffmt</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>g_Qfmt</name></cpp:macro> <cpp:value>__g_Qfmt</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>g_xfmt</name></cpp:macro> <cpp:value>__g_xfmt</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>g_xLfmt</name></cpp:macro> <cpp:value>__g_xLfmt</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strtoId</name></cpp:macro> <cpp:value>__strtoId</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strtoIdd</name></cpp:macro> <cpp:value>__strtoIdd</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strtoIf</name></cpp:macro> <cpp:value>__strtoIf</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strtoIQ</name></cpp:macro> <cpp:value>__strtoIQ</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strtoIx</name></cpp:macro> <cpp:value>__strtoIx</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strtoIxL</name></cpp:macro> <cpp:value>__strtoIxL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strtord_l</name></cpp:macro> <cpp:value>__strtord_l</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strtordd</name></cpp:macro> <cpp:value>__strtordd</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strtorf</name></cpp:macro> <cpp:value>__strtorf</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strtorQ_l</name></cpp:macro> <cpp:value>__strtorQ_l</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strtorx_l</name></cpp:macro> <cpp:value>__strtorx_l</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strtorxL</name></cpp:macro> <cpp:value>__strtorxL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strtodI</name></cpp:macro> <cpp:value>__strtodI</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strtopd</name></cpp:macro> <cpp:value>__strtopd</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strtopdd</name></cpp:macro> <cpp:value>__strtopdd</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strtopf</name></cpp:macro> <cpp:value>__strtopf</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strtopQ</name></cpp:macro> <cpp:value>__strtopQ</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strtopx</name></cpp:macro> <cpp:value>__strtopx</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strtopxL</name></cpp:macro> <cpp:value>__strtopxL</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Balloc</name></cpp:macro> <cpp:value>__Balloc_D2A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Bfree</name></cpp:macro> <cpp:value>__Bfree_D2A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ULtoQ</name></cpp:macro> <cpp:value>__ULtoQ_D2A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ULtof</name></cpp:macro> <cpp:value>__ULtof_D2A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ULtod</name></cpp:macro> <cpp:value>__ULtod_D2A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ULtodd</name></cpp:macro> <cpp:value>__ULtodd_D2A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ULtox</name></cpp:macro> <cpp:value>__ULtox_D2A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ULtoxL</name></cpp:macro> <cpp:value>__ULtoxL_D2A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>any_on</name></cpp:macro> <cpp:value>__any_on_D2A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>b2d</name></cpp:macro> <cpp:value>__b2d_D2A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bigtens</name></cpp:macro> <cpp:value>__bigtens_D2A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cmp</name></cpp:macro> <cpp:value>__cmp_D2A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>copybits</name></cpp:macro> <cpp:value>__copybits_D2A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>d2b</name></cpp:macro> <cpp:value>__d2b_D2A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>decrement</name></cpp:macro> <cpp:value>__decrement_D2A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>diff</name></cpp:macro> <cpp:value>__diff_D2A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dtoa_result</name></cpp:macro> <cpp:value>__dtoa_result_D2A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>g__fmt</name></cpp:macro> <cpp:value>__g__fmt_D2A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gethex</name></cpp:macro> <cpp:value>__gethex_D2A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hexdig</name></cpp:macro> <cpp:value>__hexdig_D2A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hexdig_init_D2A</name></cpp:macro> <cpp:value>__hexdig_init_D2A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hexnan</name></cpp:macro> <cpp:value>__hexnan_D2A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hi0bits</name></cpp:macro> <cpp:value>__hi0bits_D2A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hi0bits_D2A</name></cpp:macro> <cpp:value>__hi0bits_D2A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>i2b</name></cpp:macro> <cpp:value>__i2b_D2A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>increment</name></cpp:macro> <cpp:value>__increment_D2A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lo0bits</name></cpp:macro> <cpp:value>__lo0bits_D2A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lshift</name></cpp:macro> <cpp:value>__lshift_D2A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>match</name></cpp:macro> <cpp:value>__match_D2A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mult</name></cpp:macro> <cpp:value>__mult_D2A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>multadd</name></cpp:macro> <cpp:value>__multadd_D2A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nrv_alloc</name></cpp:macro> <cpp:value>__nrv_alloc_D2A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pow5mult</name></cpp:macro> <cpp:value>__pow5mult_D2A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>quorem</name></cpp:macro> <cpp:value>__quorem_D2A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ratio</name></cpp:macro> <cpp:value>__ratio_D2A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rshift</name></cpp:macro> <cpp:value>__rshift_D2A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rv_alloc</name></cpp:macro> <cpp:value>__rv_alloc_D2A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>s2b</name></cpp:macro> <cpp:value>__s2b_D2A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>set_ones</name></cpp:macro> <cpp:value>__set_ones_D2A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strcp</name></cpp:macro> <cpp:value>__strcp_D2A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strcp_D2A</name></cpp:macro> <cpp:value>__strcp_D2A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strtoIg</name></cpp:macro> <cpp:value>__strtoIg_D2A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sum</name></cpp:macro> <cpp:value>__sum_D2A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tens</name></cpp:macro> <cpp:value>__tens_D2A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tinytens</name></cpp:macro> <cpp:value>__tinytens_D2A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tinytens</name></cpp:macro> <cpp:value>__tinytens_D2A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trailz</name></cpp:macro> <cpp:value>__trailz_D2A</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ulp</name></cpp:macro> <cpp:value>__ulp_D2A</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>dtoa_result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>CONST</name> <name>double</name></type> <name><name>bigtens</name><index>[]</index></name></decl>, <decl><type ref="prev"/><name><name>tens</name><index>[]</index></name></decl>, <decl><type ref="prev"/><name><name>tinytens</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name> <name>char</name></type> <name><name>hexdig</name><index>[]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>Bigint</name> <modifier>*</modifier><name>Balloc</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>Bfree</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>Bigint</name><operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>ULtof</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>ULong</name><operator>*</operator><operator>,</operator> <name>ULong</name><operator>*</operator><operator>,</operator> <name>Long</name><operator>,</operator> <name>int</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>ULtod</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>ULong</name><operator>*</operator><operator>,</operator> <name>ULong</name><operator>*</operator><operator>,</operator> <name>Long</name><operator>,</operator> <name>int</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>ULtodd</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>ULong</name><operator>*</operator><operator>,</operator> <name>ULong</name><operator>*</operator><operator>,</operator> <name>Long</name><operator>,</operator> <name>int</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>ULtoQ</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>ULong</name><operator>*</operator><operator>,</operator> <name>ULong</name><operator>*</operator><operator>,</operator> <name>Long</name><operator>,</operator> <name>int</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>ULtox</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>UShort</name><operator>*</operator><operator>,</operator> <name>ULong</name><operator>*</operator><operator>,</operator> <name>Long</name><operator>,</operator> <name>int</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>ULtoxL</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>ULong</name><operator>*</operator><operator>,</operator> <name>ULong</name><operator>*</operator><operator>,</operator> <name>Long</name><operator>,</operator> <name>int</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>ULong</name> <name>any_on</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>Bigint</name><operator>*</operator><operator>,</operator> <name>int</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>double</name> <name>b2d</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>Bigint</name><operator>*</operator><operator>,</operator> <name>int</name><operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>cmp</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>Bigint</name><operator>*</operator><operator>,</operator> <name>Bigint</name><operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>copybits</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>ULong</name><operator>*</operator><operator>,</operator> <name>int</name><operator>,</operator> <name>Bigint</name><operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>Bigint</name> <modifier>*</modifier><name>d2b</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>,</operator> <name>int</name><operator>*</operator><operator>,</operator> <name>int</name><operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>decrement</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>Bigint</name><operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>Bigint</name> <modifier>*</modifier><name>diff</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>Bigint</name><operator>*</operator><operator>,</operator> <name>Bigint</name><operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier><name>dtoa</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>double</name> <name>d</name><operator>,</operator> <name>int</name> <name>mode</name><operator>,</operator> <name>int</name> <name>ndigits</name><operator>,</operator>
<name>int</name> <operator>*</operator><name>decpt</name><operator>,</operator> <name>int</name> <operator>*</operator><name>sign</name><operator>,</operator> <name>char</name> <operator>*</operator><operator>*</operator><name>rve</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>freedtoa</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier><name>gdtoa</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>FPI</name> <operator>*</operator><name>fpi</name><operator>,</operator> <name>int</name> <name>be</name><operator>,</operator> <name>ULong</name> <operator>*</operator><name>bits</name><operator>,</operator> <name>int</name> <operator>*</operator><name>kindp</name><operator>,</operator>
<name>int</name> <name>mode</name><operator>,</operator> <name>int</name> <name>ndigits</name><operator>,</operator> <name>int</name> <operator>*</operator><name>decpt</name><operator>,</operator> <name>char</name> <operator>*</operator><operator>*</operator><name>rve</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier><name>g__fmt</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>,</operator> <name>char</name><operator>*</operator><operator>,</operator> <name>char</name><operator>*</operator><operator>,</operator> <name>int</name><operator>,</operator> <name>ULong</name><operator>,</operator> <name>size_t</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>gethex</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>CONST</name> <name>char</name><operator>*</operator><operator>*</operator><operator>,</operator> <name>FPI</name><operator>*</operator><operator>,</operator> <name>Long</name><operator>*</operator><operator>,</operator> <name>Bigint</name><operator>*</operator><operator>*</operator><operator>,</operator> <name>int</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>hexdig_init_D2A</name><parameter_list>(<parameter><decl><type><name>Void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>hexnan</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>CONST</name> <name>char</name><operator>*</operator><operator>*</operator><operator>,</operator> <name>FPI</name><operator>*</operator><operator>,</operator> <name>ULong</name><operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>hi0bits</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>ULong</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>Bigint</name> <modifier>*</modifier><name>i2b</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>Bigint</name> <modifier>*</modifier><name>increment</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>Bigint</name><operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>lo0bits</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>ULong</name><operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>Bigint</name> <modifier>*</modifier><name>lshift</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>Bigint</name><operator>*</operator><operator>,</operator> <name>int</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>match</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>CONST</name> <name>char</name><operator>*</operator><operator>*</operator><operator>,</operator> <name>char</name><operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>Bigint</name> <modifier>*</modifier><name>mult</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>Bigint</name><operator>*</operator><operator>,</operator> <name>Bigint</name><operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>Bigint</name> <modifier>*</modifier><name>multadd</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>Bigint</name><operator>*</operator><operator>,</operator> <name>int</name><operator>,</operator> <name>int</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier><name>nrv_alloc</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>,</operator> <name>char</name> <operator>*</operator><operator>*</operator><operator>,</operator> <name>int</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>Bigint</name> <modifier>*</modifier><name>pow5mult</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>Bigint</name><operator>*</operator><operator>,</operator> <name>int</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>quorem</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>Bigint</name><operator>*</operator><operator>,</operator> <name>Bigint</name><operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>double</name> <name>ratio</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>Bigint</name><operator>*</operator><operator>,</operator> <name>Bigint</name><operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>rshift</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>Bigint</name><operator>*</operator><operator>,</operator> <name>int</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier><name>rv_alloc</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>Bigint</name> <modifier>*</modifier><name>s2b</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>CONST</name> <name>char</name><operator>*</operator><operator>,</operator> <name>int</name><operator>,</operator> <name>int</name><operator>,</operator> <name>ULong</name><operator>,</operator> <name>int</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>Bigint</name> <modifier>*</modifier><name>set_ones</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>Bigint</name><operator>*</operator><operator>,</operator> <name>int</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier><name>strcp</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>,</operator> <specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>strtodg_l</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>CONST</name> <name>char</name><operator>*</operator><operator>,</operator> <name>char</name><operator>*</operator><operator>*</operator><operator>,</operator> <name>FPI</name><operator>*</operator><operator>,</operator> <name>Long</name><operator>*</operator><operator>,</operator> <name>ULong</name><operator>*</operator><operator>,</operator> <name>locale_t</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>strtoId</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>CONST</name> <name>char</name> <operator>*</operator><operator>,</operator> <name>char</name> <operator>*</operator><operator>*</operator><operator>,</operator> <name>double</name> <operator>*</operator><operator>,</operator> <name>double</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>strtoIdd</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>CONST</name> <name>char</name> <operator>*</operator><operator>,</operator> <name>char</name> <operator>*</operator><operator>*</operator><operator>,</operator> <name>double</name> <operator>*</operator><operator>,</operator> <name>double</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>strtoIf</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>CONST</name> <name>char</name> <operator>*</operator><operator>,</operator> <name>char</name> <operator>*</operator><operator>*</operator><operator>,</operator> <name>float</name> <operator>*</operator><operator>,</operator> <name>float</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>strtoIg</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>CONST</name> <name>char</name><operator>*</operator><operator>,</operator> <name>char</name><operator>*</operator><operator>*</operator><operator>,</operator> <name>FPI</name><operator>*</operator><operator>,</operator> <name>Long</name><operator>*</operator><operator>,</operator> <name>Bigint</name><operator>*</operator><operator>*</operator><operator>,</operator> <name>int</name><operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>strtoIQ</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>CONST</name> <name>char</name> <operator>*</operator><operator>,</operator> <name>char</name> <operator>*</operator><operator>*</operator><operator>,</operator> <name>void</name> <operator>*</operator><operator>,</operator> <name>void</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>strtoIx</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>CONST</name> <name>char</name> <operator>*</operator><operator>,</operator> <name>char</name> <operator>*</operator><operator>*</operator><operator>,</operator> <name>void</name> <operator>*</operator><operator>,</operator> <name>void</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>strtoIxL</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>CONST</name> <name>char</name> <operator>*</operator><operator>,</operator> <name>char</name> <operator>*</operator><operator>*</operator><operator>,</operator> <name>void</name> <operator>*</operator><operator>,</operator> <name>void</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>double</name> <name>strtod</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><name>s00</name><operator>,</operator> <name>char</name> <operator>*</operator><operator>*</operator><name>se</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>double</name> <name>strtod_l</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><name>s00</name><operator>,</operator> <name>char</name> <operator>*</operator><operator>*</operator><name>se</name><operator>,</operator> <name>locale_t</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>strtopQ</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>CONST</name> <name>char</name> <operator>*</operator><operator>,</operator> <name>char</name> <operator>*</operator><operator>*</operator><operator>,</operator> <name>Void</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>strtopf</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>CONST</name> <name>char</name> <operator>*</operator><operator>,</operator> <name>char</name> <operator>*</operator><operator>*</operator><operator>,</operator> <name>float</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>strtopd</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>CONST</name> <name>char</name> <operator>*</operator><operator>,</operator> <name>char</name> <operator>*</operator><operator>*</operator><operator>,</operator> <name>double</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>strtopdd</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>CONST</name> <name>char</name> <operator>*</operator><operator>,</operator> <name>char</name> <operator>*</operator><operator>*</operator><operator>,</operator> <name>double</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>strtopx</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>CONST</name> <name>char</name> <operator>*</operator><operator>,</operator> <name>char</name> <operator>*</operator><operator>*</operator><operator>,</operator> <name>Void</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>strtopxL</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>CONST</name> <name>char</name> <operator>*</operator><operator>,</operator> <name>char</name> <operator>*</operator><operator>*</operator><operator>,</operator> <name>Void</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>strtord_l</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>CONST</name> <name>char</name> <operator>*</operator><operator>,</operator> <name>char</name> <operator>*</operator><operator>*</operator><operator>,</operator> <name>int</name><operator>,</operator> <name>double</name> <operator>*</operator><operator>,</operator> <name>locale_t</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>strtordd</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>CONST</name> <name>char</name> <operator>*</operator><operator>,</operator> <name>char</name> <operator>*</operator><operator>*</operator><operator>,</operator> <name>int</name><operator>,</operator> <name>double</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>strtorf</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>CONST</name> <name>char</name> <operator>*</operator><operator>,</operator> <name>char</name> <operator>*</operator><operator>*</operator><operator>,</operator> <name>int</name><operator>,</operator> <name>float</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>strtorQ_l</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>CONST</name> <name>char</name> <operator>*</operator><operator>,</operator> <name>char</name> <operator>*</operator><operator>*</operator><operator>,</operator> <name>int</name><operator>,</operator> <name>void</name> <operator>*</operator><operator>,</operator> <name>locale_t</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>strtorx_l</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>CONST</name> <name>char</name> <operator>*</operator><operator>,</operator> <name>char</name> <operator>*</operator><operator>*</operator><operator>,</operator> <name>int</name><operator>,</operator> <name>void</name> <operator>*</operator><operator>,</operator> <name>locale_t</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>strtorxL</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>CONST</name> <name>char</name> <operator>*</operator><operator>,</operator> <name>char</name> <operator>*</operator><operator>*</operator><operator>,</operator> <name>int</name><operator>,</operator> <name>void</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>Bigint</name> <modifier>*</modifier><name>sum</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>Bigint</name><operator>*</operator><operator>,</operator> <name>Bigint</name><operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>trailz</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>Bigint</name><operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>double</name> <name>ulp</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>U</name><operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>









<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IEEE_Arith</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_INFNAN_CHECK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>INFNAN_CHECK</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INFNAN_CHECK</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IEEE_MC68k</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_0</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_1</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NAN_WORD0</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NAN_WORD0</name></cpp:macro> <cpp:value>d_QNAN0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NAN_WORD1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NAN_WORD1</name></cpp:macro> <cpp:value>d_QNAN1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_0</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_1</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NAN_WORD0</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NAN_WORD0</name></cpp:macro> <cpp:value>d_QNAN1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NAN_WORD1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NAN_WORD1</name></cpp:macro> <cpp:value>d_QNAN0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>INFNAN_CHECK</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SI</name></cpp:undef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Sudden_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SI</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SI</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
