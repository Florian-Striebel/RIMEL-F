<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/gdtoa/smisc.c">






























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gdtoaimp.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>Bigint</name> <modifier>*</modifier></type>
<name>s2b</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KR_headers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>nd0</name></expr></argument>, <argument><expr><name>nd</name></expr></argument>, <argument><expr><name>y9</name></expr></argument>, <argument><expr><name>dplen</name></expr></argument>)</argument_list> <name>CONST</name> <name>char</name> <modifier>*</modifier><name>s</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>dplen</name></decl>, <decl><type ref="prev"/><name>nd0</name></decl>, <decl><type ref="prev"/><name>nd</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>ULong</name></type> <name>y9</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>CONST</name> <name>char</name> <operator>*</operator><name>s</name><operator>,</operator> <name>int</name> <name>nd0</name><operator>,</operator> <name>int</name> <name>nd</name><operator>,</operator> <name>ULong</name> <name>y9</name><operator>,</operator> <name>int</name> <name>dplen</name><operator>)</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr><name>Bigint</name> <operator>*</operator><name>b</name></expr>;
<expr><name>int</name> <name>i</name></expr>, <expr><name>k</name></expr>;
<expr><name>Long</name> <name>x</name></expr>, <expr><name>y</name></expr>;

<expr><name>x</name> <operator>=</operator> <operator>(</operator><name>nd</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>/</operator> <literal type="number">9</literal></expr>;
<for>for<control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>y</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>x</name> <operator>&gt;</operator> <name>y</name></expr>;</condition> <incr><expr><name>y</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <empty_stmt>;</empty_stmt></block_content></block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Pack_32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>b</name> <operator>=</operator> <call><name>Balloc</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>y9</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>wds</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>Balloc</name><argument_list>(<argument><expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>y9</name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>wds</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>y9</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">9</literal> <operator>&lt;</operator> <name>nd0</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="number">9</literal></expr>;</expr_stmt>
<do>do<block type="pseudo"><block_content> <expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>multadd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>-</operator> <literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block>
while<condition>(<expr><operator>++</operator><name>i</name> <operator>&lt;</operator> <name>nd0</name></expr>)</condition>;</do>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>dplen</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>dplen</name> <operator>+</operator> <literal type="number">9</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<for>for<control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nd</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>multadd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>-</operator> <literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<return>return <expr><name>b</name></expr>;</return>
}

double
<macro><name>ratio</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KR_headers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument_list>(<argument>a</argument>, <argument>b</argument>)</argument_list></macro> <decl_stmt><decl><type><name>Bigint</name> <modifier>*</modifier></type><name>a</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>Bigint</name> <operator>*</operator><name>a</name><operator>,</operator> <name>Bigint</name> <operator>*</operator><name>b</name><operator>)</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr><name>U</name> <name>da</name></expr>, <expr><name>db</name></expr>;
<expr><name>int</name> <name>k</name></expr>, <expr><name>ka</name></expr>, <expr><name>kb</name></expr>;

<expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>da</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>b2d</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ka</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>b2d</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kb</name></expr></argument>)</argument_list></call></expr>;
<expr><name>k</name> <operator>=</operator> <name>ka</name> <operator>-</operator> <name>kb</name> <operator>+</operator> <name>ULbits</name><operator>*</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>wds</name></name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>wds</name></name><operator>)</operator></expr>;
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IBM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>da</name></expr></argument>)</argument_list></call> <operator>+=</operator> <operator>(</operator><name>k</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator><operator>*</operator><name>Exp_msk1</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&amp;=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>da</name></expr></argument>)</argument_list></call> <operator>*=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>k</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt>
<if_stmt><else>else <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>=</operator> <operator>-</operator><name>k</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call> <operator>+=</operator> <operator>(</operator><name>k</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator><operator>*</operator><name>Exp_msk1</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&amp;=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call> <operator>*=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>k</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>da</name></expr></argument>)</argument_list></call> <operator>+=</operator> <name>k</name><operator>*</operator><name>Exp_msk1</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>=</operator> <operator>-</operator><name>k</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call> <operator>+=</operator> <name>k</name><operator>*</operator><name>Exp_msk1</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>da</name></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</return>
}

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INFNAN_CHECK</name></expr></argument>)</argument_list></call></expr></cpp:if>

int
<macro><name>match</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KR_headers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument_list>(<argument>sp</argument>, <argument>t</argument>)</argument_list></macro> <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>sp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>CONST</name> <name>char</name> <operator>*</operator><operator>*</operator><name>sp</name><operator>,</operator> <name>char</name> <operator>*</operator><name>t</name><operator>)</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr><name>int</name> <name>c</name></expr>, <expr><name>d</name></expr>;
<expr><name>CONST</name> <name>char</name> <operator>*</operator><name>s</name> <operator>=</operator> <operator>*</operator><name>sp</name></expr>;

<while>while<condition>( <expr><operator>(</operator><name>d</name> <operator>=</operator> <operator>*</operator><name>t</name><operator>++</operator><operator>)</operator> <operator>!=</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>s</name><operator>)</operator> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>c</name> <operator>+=</operator> <literal type="char">'a'</literal> <operator>-</operator> <literal type="char">'A'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <name>d</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt/></block_content></block></while>}</block>
<operator>*</operator><name>sp</name> <operator>=</operator> <name>s</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

void
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KR_headers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>copybits</name><argument_list>(<argument>c</argument>, <argument>n</argument>, <argument>b</argument>)</argument_list></macro> <decl_stmt><decl><type><name>ULong</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>Bigint</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>copybits</name><argument_list>(<argument>ULong *c</argument>, <argument>int n</argument>, <argument>Bigint *b</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<decl_stmt><decl><type><name>ULong</name> <modifier>*</modifier></type><name>ce</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>x</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>xe</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Pack_16</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>nw</name></decl>, <decl><type ref="prev"/><name>nw1</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>ce</name> <operator>=</operator> <name>c</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>n</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name>kshift</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Pack_32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>xe</name> <operator>=</operator> <name>x</name> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>wds</name></name></expr>;</expr_stmt>
<while>while<condition>(<expr><name>x</name> <operator>&lt;</operator> <name>xe</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>c</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>x</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>nw</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>wds</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>nw1</name> <operator>=</operator> <name>nw</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>xe</name> <operator>=</operator> <name>x</name> <operator>+</operator> <operator>(</operator><name>nw</name> <operator>-</operator> <name>nw1</name><operator>)</operator></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>xe</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Storeinc</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>nw1</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>c</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>x</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<while>while<condition>(<expr><name>c</name> <operator>&lt;</operator> <name>ce</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>c</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block>

<function><type><name>ULong</name></type>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KR_headers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>any_on</name><parameter_list>(<parameter><decl><type><name>b</name></type></decl></parameter>, <parameter><decl><type><name>k</name></type></decl></parameter>)</parameter_list> <decl_stmt><decl><type><name>Bigint</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
any_on<parameter_list>(<parameter><decl><type><name>Bigint</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>nwds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULong</name> <modifier>*</modifier></type><name>x</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>x0</name></decl>, <decl><type ref="prev"/><name>x1</name></decl>, <decl><type ref="prev"/><name>x2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>nwds</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>wds</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>k</name> <operator>&gt;&gt;</operator> <name>kshift</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name>nwds</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>nwds</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>n</name> <operator>&lt;</operator> <name>nwds</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>k</name> <operator>&amp;=</operator> <name>kmask</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>x1</name> <operator>=</operator> <name>x2</name> <operator>=</operator> <name><name>x</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>x1</name> <operator>&gt;&gt;=</operator> <name>k</name></expr>;</expr_stmt>
<expr_stmt><expr><name>x1</name> <operator>&lt;&lt;=</operator> <name>k</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>x1</name> <operator>!=</operator> <name>x2</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>x0</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<while>while<condition>(<expr><name>x</name> <operator>&gt;</operator> <name>x0</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>--</operator><name>x</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></while>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
