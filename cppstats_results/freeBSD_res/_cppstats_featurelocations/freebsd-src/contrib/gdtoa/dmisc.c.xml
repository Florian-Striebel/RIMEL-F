<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/gdtoa/dmisc.c">






























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gdtoaimp.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MULTIPLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dtoa_result</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>char</name> <modifier>*</modifier></type>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KR_headers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>rv_alloc</name><parameter_list>(<parameter><decl><type><name>i</name></type></decl></parameter>)</parameter_list> <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
rv_alloc<parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ULong</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init>
<condition><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Bigint</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ULong</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>j</name> <operator>&lt;=</operator> <name>i</name></expr>;</condition>
<incr><expr><name>j</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><call><name>Balloc</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
<return>return
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MULTIPLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>dtoa_result</name> <operator>=</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>r</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KR_headers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>nrv_alloc</name><parameter_list>(<parameter><decl><type><name>s</name></type></decl></parameter>, <parameter><decl><type><name>rve</name></type></decl></parameter>, <parameter><decl><type><name>n</name></type></decl></parameter>)</parameter_list> <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>rve</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
nrv_alloc<parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>rve</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rv</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>rv</name> <operator>=</operator> <call><name>rv_alloc</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><operator>*</operator><name>t</name> <operator>=</operator> <operator>*</operator><name>s</name><operator>++</operator><operator>)</operator> <operator>!=</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>t</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>rve</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>rve</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>void</name></type>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KR_headers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>freedtoa</name><parameter_list>(<parameter><decl><type><name>s</name></type></decl></parameter>)</parameter_list> <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
freedtoa<parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<decl_stmt><decl><type><name>Bigint</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><operator>(</operator><name>Bigint</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>s</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>maxwds</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>k</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><name>b</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MULTIPLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>dtoa_result</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dtoa_result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<decl_stmt><decl><type><name>int</name></type>
<name>quorem</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KR_headers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>S</name></expr></argument>)</argument_list> <name>Bigint</name> <modifier>*</modifier><name>b</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>S</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>Bigint</name> <operator>*</operator><name>b</name><operator>,</operator> <name>Bigint</name> <operator>*</operator><name>S</name><operator>)</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr><name>int</name> <name>n</name></expr>;
<expr><name>ULong</name> <operator>*</operator><name>bx</name></expr>, <expr><operator>*</operator><name>bxe</name></expr>, <expr><name>q</name></expr>, <expr><operator>*</operator><name>sx</name></expr>, <expr><operator>*</operator><name>sxe</name></expr>;
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ULLong</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>ULLong</name> <name>borrow</name></expr>, <expr><name>carry</name></expr>, <expr><name>y</name></expr>, <expr><name>ys</name></expr>;
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><name>ULong</name> <name>borrow</name></expr>, <expr><name>carry</name></expr>, <expr><name>y</name></expr>, <expr><name>ys</name></expr>;
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Pack_32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>ULong</name> <name>si</name></expr>, <expr><name>z</name></expr>, <expr><name>zs</name></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><name>n</name> <operator>=</operator> <name><name>S</name><operator>-&gt;</operator><name>wds</name></name></expr>;
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>wds</name></name> <operator>&gt;</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Bug</name><argument_list>(<argument><expr><literal type="string">"oversize b in quorem"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr></expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>wds</name></name> <operator>&lt;</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>sx</name> <operator>=</operator> <name><name>S</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>sxe</name> <operator>=</operator> <name>sx</name> <operator>+</operator> <operator>--</operator><name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bx</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>bxe</name> <operator>=</operator> <name>bx</name> <operator>+</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>q</name> <operator>=</operator> <operator>*</operator><name>bxe</name> <operator>/</operator> <operator>(</operator><operator>*</operator><name>sxe</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>q</name> <operator>&gt;</operator> <literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Bug</name><argument_list>(<argument><expr><literal type="string">"oversized quotient in quorem"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>q</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>borrow</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>carry</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<do>do <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ULLong</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ys</name> <operator>=</operator> <operator>*</operator><name>sx</name><operator>++</operator> <operator>*</operator> <operator>(</operator><name>ULLong</name><operator>)</operator><name>q</name> <operator>+</operator> <name>carry</name></expr>;</expr_stmt>
<expr_stmt><expr><name>carry</name> <operator>=</operator> <name>ys</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>*</operator><name>bx</name> <operator>-</operator> <operator>(</operator><name>ys</name> <operator>&amp;</operator> <literal type="number">0xffffffffUL</literal><operator>)</operator> <operator>-</operator> <name>borrow</name></expr>;</expr_stmt>
<expr_stmt><expr><name>borrow</name> <operator>=</operator> <name>y</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal> <operator>&amp;</operator> <literal type="number">1UL</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>bx</name><operator>++</operator> <operator>=</operator> <name>y</name> <operator>&amp;</operator> <literal type="number">0xffffffffUL</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Pack_32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>si</name> <operator>=</operator> <operator>*</operator><name>sx</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ys</name> <operator>=</operator> <operator>(</operator><name>si</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>*</operator> <name>q</name> <operator>+</operator> <name>carry</name></expr>;</expr_stmt>
<expr_stmt><expr><name>zs</name> <operator>=</operator> <operator>(</operator><name>si</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>*</operator> <name>q</name> <operator>+</operator> <operator>(</operator><name>ys</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>carry</name> <operator>=</operator> <name>zs</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>bx</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>ys</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>-</operator> <name>borrow</name></expr>;</expr_stmt>
<expr_stmt><expr><name>borrow</name> <operator>=</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <literal type="number">0x10000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>bx</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>zs</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>-</operator> <name>borrow</name></expr>;</expr_stmt>
<expr_stmt><expr><name>borrow</name> <operator>=</operator> <operator>(</operator><name>z</name> <operator>&amp;</operator> <literal type="number">0x10000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Storeinc</name><argument_list>(<argument><expr><name>bx</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>ys</name> <operator>=</operator> <operator>*</operator><name>sx</name><operator>++</operator> <operator>*</operator> <name>q</name> <operator>+</operator> <name>carry</name></expr>;</expr_stmt>
<expr_stmt><expr><name>carry</name> <operator>=</operator> <name>ys</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>*</operator><name>bx</name> <operator>-</operator> <operator>(</operator><name>ys</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>-</operator> <name>borrow</name></expr>;</expr_stmt>
<expr_stmt><expr><name>borrow</name> <operator>=</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <literal type="number">0x10000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>bx</name><operator>++</operator> <operator>=</operator> <name>y</name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block>
while<condition>(<expr><name>sx</name> <operator>&lt;=</operator> <name>sxe</name></expr>)</condition>;</do>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>bxe</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>bx</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>--</operator><name>bxe</name> <operator>&gt;</operator> <name>bx</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><name>bxe</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name>n</name></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>wds</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>cmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>S</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>q</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>borrow</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>carry</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bx</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>sx</name> <operator>=</operator> <name><name>S</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
<do>do <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ULLong</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ys</name> <operator>=</operator> <operator>*</operator><name>sx</name><operator>++</operator> <operator>+</operator> <name>carry</name></expr>;</expr_stmt>
<expr_stmt><expr><name>carry</name> <operator>=</operator> <name>ys</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>*</operator><name>bx</name> <operator>-</operator> <operator>(</operator><name>ys</name> <operator>&amp;</operator> <literal type="number">0xffffffffUL</literal><operator>)</operator> <operator>-</operator> <name>borrow</name></expr>;</expr_stmt>
<expr_stmt><expr><name>borrow</name> <operator>=</operator> <name>y</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal> <operator>&amp;</operator> <literal type="number">1UL</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>bx</name><operator>++</operator> <operator>=</operator> <name>y</name> <operator>&amp;</operator> <literal type="number">0xffffffffUL</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Pack_32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>si</name> <operator>=</operator> <operator>*</operator><name>sx</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ys</name> <operator>=</operator> <operator>(</operator><name>si</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>+</operator> <name>carry</name></expr>;</expr_stmt>
<expr_stmt><expr><name>zs</name> <operator>=</operator> <operator>(</operator><name>si</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>ys</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>carry</name> <operator>=</operator> <name>zs</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>bx</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>ys</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>-</operator> <name>borrow</name></expr>;</expr_stmt>
<expr_stmt><expr><name>borrow</name> <operator>=</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <literal type="number">0x10000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>bx</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>zs</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>-</operator> <name>borrow</name></expr>;</expr_stmt>
<expr_stmt><expr><name>borrow</name> <operator>=</operator> <operator>(</operator><name>z</name> <operator>&amp;</operator> <literal type="number">0x10000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Storeinc</name><argument_list>(<argument><expr><name>bx</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>ys</name> <operator>=</operator> <operator>*</operator><name>sx</name><operator>++</operator> <operator>+</operator> <name>carry</name></expr>;</expr_stmt>
<expr_stmt><expr><name>carry</name> <operator>=</operator> <name>ys</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>*</operator><name>bx</name> <operator>-</operator> <operator>(</operator><name>ys</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>-</operator> <name>borrow</name></expr>;</expr_stmt>
<expr_stmt><expr><name>borrow</name> <operator>=</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <literal type="number">0x10000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>bx</name><operator>++</operator> <operator>=</operator> <name>y</name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block>
while<condition>(<expr><name>sx</name> <operator>&lt;=</operator> <name>sxe</name></expr>)</condition>;</do>
<expr_stmt><expr><name>bx</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>bxe</name> <operator>=</operator> <name>bx</name> <operator>+</operator> <name>n</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>bxe</name></expr>)</condition> <block>{<block_content>
<while>while<condition>(<expr><operator>--</operator><name>bxe</name> <operator>&gt;</operator> <name>bx</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><name>bxe</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name>n</name></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>wds</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>q</name></expr>;</return>
}
</unit>
