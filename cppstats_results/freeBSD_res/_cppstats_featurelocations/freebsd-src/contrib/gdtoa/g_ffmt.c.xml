<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/gdtoa/g_ffmt.c">






























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gdtoaimp.h"</cpp:file></cpp:include>

<function><type><name>char</name><modifier>*</modifier></type>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KR_headers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>g_ffmt</name><parameter_list>(<parameter><decl><type><name>buf</name></type></decl></parameter>, <parameter><decl><type><name>f</name></type></decl></parameter>, <parameter><decl><type><name>ndig</name></type></decl></parameter>, <parameter><decl><type><name>bufsize</name></type></decl></parameter>)</parameter_list> <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>ndig</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>bufsize</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
g_ffmt<parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ndig</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bufsize</name></decl></parameter>)</parameter_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>FPI</name></type> <name>fpi0</name> <init>= <expr><block>{ <expr><literal type="number">24</literal></expr>, <expr><literal type="number">1</literal><operator>-</operator><literal type="number">127</literal><operator>-</operator><literal type="number">24</literal><operator>+</operator><literal type="number">1</literal></expr>, <expr><literal type="number">254</literal><operator>-</operator><literal type="number">127</literal><operator>-</operator><literal type="number">24</literal><operator>+</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>b</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>se</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULong</name></type> <name><name>bits</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>L</name></decl>, <decl><type ref="prev"/><name>sign</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>decpt</name></decl>, <decl><type ref="prev"/><name>ex</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>mode</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Honor_FLT_ROUNDS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gdtoa_fltrnds.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fpi</name></cpp:macro> <cpp:value>&amp;fpi0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>ndig</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ndig</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bufsize</name> <operator>&lt;</operator> <name>ndig</name> <operator>+</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>L</name> <operator>=</operator> <operator>(</operator><name>ULong</name><operator>*</operator><operator>)</operator><name>f</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <name><name>L</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80000000L</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>L</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7f800000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x7f800000</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>L</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7fffff</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>strcp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"NaN"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sign</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>b</name><operator>++</operator> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>strcp</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="string">"Infinity"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>f</name> <operator>==</operator> <literal type="number">0.</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>IGNORE_ZERO_SIGN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>L</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80000000L</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>b</name><operator>++</operator> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>*</operator><name>b</name><operator>++</operator> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>b</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>bits</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>L</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7fffff</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>(</operator><name>ex</name> <operator>=</operator> <operator>(</operator><name><name>L</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">23</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>!=</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bits</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <literal type="number">0x800000</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ex</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>ex</name> <operator>-=</operator> <literal type="number">0x7f</literal> <operator>+</operator> <literal type="number">23</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ndig</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>bufsize</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>STRTOG_Normal</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>gdtoa</name><argument_list>(<argument><expr><name>fpi</name></expr></argument>, <argument><expr><name>ex</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>ndig</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>decpt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>se</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>g__fmt</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>se</name></expr></argument>, <argument><expr><name>decpt</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
