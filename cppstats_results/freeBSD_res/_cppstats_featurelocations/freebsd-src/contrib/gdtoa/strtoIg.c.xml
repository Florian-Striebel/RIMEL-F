<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/gdtoa/strtoIg.c">






























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gdtoaimp.h"</cpp:file></cpp:include>

<function><type><name>int</name></type>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KR_headers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>strtoIg</name><parameter_list>(<parameter><decl><type><name>s00</name></type></decl></parameter>, <parameter><decl><type><name>se</name></type></decl></parameter>, <parameter><decl><type><name>fpi</name></type></decl></parameter>, <parameter><decl><type><name>exp</name></type></decl></parameter>, <parameter><decl><type><name>B</name></type></decl></parameter>, <parameter><decl><type><name>rvp</name></type></decl></parameter>)</parameter_list> <decl_stmt><decl><type><name>CONST</name> <name>char</name> <modifier>*</modifier></type><name>s00</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>se</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>FPI</name> <modifier>*</modifier></type><name>fpi</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>Long</name> <modifier>*</modifier></type><name>exp</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>Bigint</name> <modifier>*</modifier><modifier>*</modifier></type><name>B</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>rvp</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
strtoIg<parameter_list>(<parameter><decl><type><name>CONST</name> <name>char</name> <modifier>*</modifier></type><name>s00</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>se</name></decl></parameter>, <parameter><decl><type><name>FPI</name> <modifier>*</modifier></type><name>fpi</name></decl></parameter>, <parameter><decl><type><name>Long</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>, <parameter><decl><type><name>Bigint</name> <modifier>*</modifier><modifier>*</modifier></type><name>B</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rvp</name></decl></parameter>)</parameter_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<decl_stmt><decl><type><name>Bigint</name> <modifier>*</modifier></type><name>b</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>nb</name></decl>, <decl><type ref="prev"/><name>nw</name></decl>, <decl><type ref="prev"/><name>nw1</name></decl>, <decl><type ref="prev"/><name>rv</name></decl>, <decl><type ref="prev"/><name>rv1</name></decl>, <decl><type ref="prev"/><name>swap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nb1</name></decl>, <decl><type ref="prev"/><name>nb11</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Long</name></type> <name>e1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>*</operator><name>B</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>strtodg</name><argument_list>(<argument><expr><name>s00</name></expr></argument>, <argument><expr><name>se</name></expr></argument>, <argument><expr><name>fpi</name></expr></argument>, <argument><expr><name>exp</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>rv</name> <operator>&amp;</operator> <name>STRTOG_Inexact</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>*</operator><name>rvp</name> <operator>=</operator> <name>rv</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>e1</name> <operator>=</operator> <name><name>exp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>rv1</name> <operator>=</operator> <name>rv</name> <operator>^</operator> <name>STRTOG_Inexact</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b1</name> <operator>=</operator> <call><name>Balloc</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Bcopy</name><argument_list>(<argument><expr><name>b1</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nb</name> <operator>=</operator> <name><name>fpi</name><operator>-&gt;</operator><name>nbits</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>nb1</name> <operator>=</operator> <name>nb</name> <operator>&amp;</operator> <literal type="number">31</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nb11</name> <operator>=</operator> <operator>(</operator><name>nb1</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">31</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nw</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>wds</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>nw1</name> <operator>=</operator> <name>nw</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>&amp;</operator> <name>STRTOG_Inexlo</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>swap</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b1</name> <operator>=</operator> <call><name>increment</name><argument_list>(<argument><expr><name>b1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rv</name> <operator>&amp;</operator> <name>STRTOG_Retmask</name><operator>)</operator> <operator>==</operator> <name>STRTOG_Zero</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>fpi</name><operator>-&gt;</operator><name>sudden_underflow</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>b1</name><operator>-&gt;</operator><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b1</name><operator>-&gt;</operator><name>x</name><index>[<expr><name>nw1</name></expr>]</index></name> <operator>=</operator> <literal type="number">1L</literal> <operator>&lt;&lt;</operator> <name>nb11</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rv1</name> <operator>+=</operator> <name>STRTOG_Normal</name> <operator>-</operator> <name>STRTOG_Zero</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rv1</name> <operator>&amp;=</operator> <operator>~</operator><name>STRTOG_Underflow</name></expr>;</expr_stmt>
<goto>goto <name>swapcheck</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>rv1</name> <operator>&amp;=</operator> <name>STRTOG_Inexlo</name> <operator>|</operator> <name>STRTOG_Underflow</name> <operator>|</operator> <name>STRTOG_Zero</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rv1</name> <operator>|=</operator> <name>STRTOG_Inexhi</name> <operator>|</operator> <name>STRTOG_Denormal</name></expr>;</expr_stmt>
<goto>goto <name>swapcheck</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b1</name><operator>-&gt;</operator><name>wds</name></name> <operator>&gt;</operator> <name>nw</name>
<operator>||</operator> <operator>(</operator><name>nb1</name> <operator>&amp;&amp;</operator> <name><name>b1</name><operator>-&gt;</operator><name>x</name><index>[<expr><name>nw1</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1L</literal> <operator>&lt;&lt;</operator> <name>nb1</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>e1</name> <operator>&gt;</operator> <name><name>fpi</name><operator>-&gt;</operator><name>emax</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rv1</name> <operator>=</operator> <name>STRTOG_Infinite</name> <operator>|</operator> <name>STRTOG_Inexhi</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>rshift</name><argument_list>(<argument><expr><name>b1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>rv</name> <operator>&amp;</operator> <name>STRTOG_Retmask</name><operator>)</operator> <operator>==</operator> <name>STRTOG_Denormal</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>b1</name><operator>-&gt;</operator><name>x</name><index>[<expr><name>nw1</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1L</literal> <operator>&lt;&lt;</operator> <name>nb11</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rv1</name> <operator>+=</operator> <name>STRTOG_Normal</name> <operator>-</operator> <name>STRTOG_Denormal</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rv1</name> <operator>&amp;=</operator> <operator>~</operator><name>STRTOG_Underflow</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>swap</name> <operator>=</operator> <name>STRTOG_Neg</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rv</name> <operator>&amp;</operator> <name>STRTOG_Retmask</name><operator>)</operator> <operator>==</operator> <name>STRTOG_Infinite</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>b1</name> <operator>=</operator> <call><name>set_ones</name><argument_list>(<argument><expr><name>b1</name></expr></argument>, <argument><expr><name>nb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e1</name> <operator>=</operator> <name><name>fpi</name><operator>-&gt;</operator><name>emax</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>rv1</name> <operator>=</operator> <name>STRTOG_Normal</name> <operator>|</operator> <name>STRTOG_Inexlo</name></expr>;</expr_stmt>
<goto>goto <name>swapcheck</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>decrement</name><argument_list>(<argument><expr><name>b1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rv</name> <operator>&amp;</operator> <name>STRTOG_Retmask</name><operator>)</operator> <operator>==</operator> <name>STRTOG_Denormal</name></expr>)</condition> <block>{<block_content>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <name>nw1</name></expr>;</init> <condition><expr><operator>!</operator><name><name>b1</name><operator>-&gt;</operator><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>i</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rv1</name> <operator>=</operator> <name>STRTOG_Zero</name> <operator>|</operator> <name>STRTOG_Inexlo</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt></block_content></block></for>
<goto>goto <name>swapcheck</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>b1</name><operator>-&gt;</operator><name>x</name><index>[<expr><name>nw1</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1L</literal> <operator>&lt;&lt;</operator> <name>nb11</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>e1</name> <operator>==</operator> <name><name>fpi</name><operator>-&gt;</operator><name>emin</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>fpi</name><operator>-&gt;</operator><name>sudden_underflow</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rv1</name> <operator>+=</operator> <name>STRTOG_Zero</name> <operator>-</operator> <name>STRTOG_Normal</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>rv1</name> <operator>+=</operator> <name>STRTOG_Denormal</name> <operator>-</operator> <name>STRTOG_Normal</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>rv1</name> <operator>|=</operator> <name>STRTOG_Underflow</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>b1</name> <operator>=</operator> <call><name>lshift</name><argument_list>(<argument><expr><name>b1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b1</name><operator>-&gt;</operator><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>e1</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<label><name>swapcheck</name>:</label>
<if_stmt><if>if <condition>(<expr><name>swap</name> <operator>^</operator> <operator>(</operator><name>rv</name> <operator>&amp;</operator> <name>STRTOG_Neg</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rvp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>rv1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rvp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>rv</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>b1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>exp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>exp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>exp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>e1</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>rvp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>rv</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rvp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>rv1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>b1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>exp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>e1</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>
</unit>
