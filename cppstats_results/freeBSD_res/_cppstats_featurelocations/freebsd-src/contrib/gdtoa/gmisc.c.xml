<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/gdtoa/gmisc.c">






























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gdtoaimp.h"</cpp:file></cpp:include>

<function><type><name>void</name></type>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KR_headers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>rshift</name><parameter_list>(<parameter><decl><type><name>b</name></type></decl></parameter>, <parameter><decl><type><name>k</name></type></decl></parameter>)</parameter_list> <decl_stmt><decl><type><name>Bigint</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
rshift<parameter_list>(<parameter><decl><type><name>Bigint</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<decl_stmt><decl><type><name>ULong</name> <modifier>*</modifier></type><name>x</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>x1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>xe</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x1</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>k</name> <operator>&gt;&gt;</operator> <name>kshift</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>wds</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>xe</name> <operator>=</operator> <name>x</name> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>wds</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&amp;=</operator> <name>kmask</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>ULbits</name> <operator>-</operator> <name>k</name></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>*</operator><name>x</name><operator>++</operator> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
<while>while<condition>(<expr><name>x</name> <operator>&lt;</operator> <name>xe</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>x1</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>y</name> <operator>|</operator> <operator>(</operator><operator>*</operator><name>x</name> <operator>&lt;&lt;</operator> <name>n</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <name>ALL_ON</name></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>*</operator><name>x</name><operator>++</operator> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>x1</name> <operator>=</operator> <name>y</name><operator>)</operator> <operator>!=</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>x1</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<while>while<condition>(<expr><name>x</name> <operator>&lt;</operator> <name>xe</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>x1</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>x</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>wds</name></name> <operator>=</operator> <name>x1</name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>x</name></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KR_headers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>trailz</name><parameter_list>(<parameter><decl><type><name>b</name></type></decl></parameter>)</parameter_list> <decl_stmt><decl><type><name>Bigint</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
trailz<parameter_list>(<parameter><decl><type><name>Bigint</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<decl_stmt><decl><type><name>ULong</name></type> <name>L</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>x</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>xe</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>xe</name> <operator>=</operator> <name>x</name> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>wds</name></name></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>xe</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><name>x</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name> <operator>+=</operator> <name>ULbits</name></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <name>xe</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>L</name> <operator>=</operator> <operator>*</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>lo0bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>
</unit>
