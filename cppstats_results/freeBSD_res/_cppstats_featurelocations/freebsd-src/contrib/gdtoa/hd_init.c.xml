<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/gdtoa/hd_init.c">






























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gdtoaimp.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>hexdig</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KR_headers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>htinit</name><parameter_list>(<parameter><decl><type><name>h</name></type></decl></parameter>, <parameter><decl><type><name>s</name></type></decl></parameter>, <parameter><decl><type><name>inc</name></type></decl></parameter>)</parameter_list> <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>h</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>inc</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
htinit<parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inc</name></decl></parameter>)</parameter_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>j</name> <operator>=</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>!=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>h</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>+</operator> <name>inc</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>hexdig_init_D2A</name><parameter_list>(<parameter><decl><type><name>Void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USC</name></cpp:macro> <cpp:value>(unsigned char *)</cpp:value></cpp:define>
<expr_stmt><expr><call><name>htinit</name><argument_list>(<argument><expr><name>hexdig</name></expr></argument>, <argument><expr><name>USC</name> <literal type="string">"0123456789"</literal></expr></argument>, <argument><expr><literal type="number">0x10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>htinit</name><argument_list>(<argument><expr><name>hexdig</name></expr></argument>, <argument><expr><name>USC</name> <literal type="string">"abcdef"</literal></expr></argument>, <argument><expr><literal type="number">0x10</literal> <operator>+</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>htinit</name><argument_list>(<argument><expr><name>hexdig</name></expr></argument>, <argument><expr><name>USC</name> <literal type="string">"ABCDEF"</literal></expr></argument>, <argument><expr><literal type="number">0x10</literal> <operator>+</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
