<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/gdtoa/gdtoa.h">






























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GDTOA_H_INCLUDED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GDTOA_H_INCLUDED</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"arith.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>Long</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Long</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ULong</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>unsigned</name> <name>Long</name></type> <name>ULong</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>UShort</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>unsigned</name> <name>short</name></type> <name>UShort</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ANSI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KR_headers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANSI</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Void</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANSI</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Void</name></cpp:macro> <cpp:value>void</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CONST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KR_headers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONST</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONST</name></cpp:macro> <cpp:value>const</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<enum>enum <block>{
<decl><name>STRTOG_Zero</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>STRTOG_Normal</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>STRTOG_Denormal</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>STRTOG_Infinite</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>STRTOG_NaN</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>STRTOG_NaNbits</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,
<decl><name>STRTOG_NoNumber</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,
<decl><name>STRTOG_Retmask</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,



<decl><name>STRTOG_Neg</name> <init>= <expr><literal type="number">0x08</literal></expr></init></decl>,
<decl><name>STRTOG_Inexlo</name> <init>= <expr><literal type="number">0x10</literal></expr></init></decl>,
<decl><name>STRTOG_Inexhi</name> <init>= <expr><literal type="number">0x20</literal></expr></init></decl>,
<decl><name>STRTOG_Inexact</name> <init>= <expr><literal type="number">0x30</literal></expr></init></decl>,
<decl><name>STRTOG_Underflow</name><init>= <expr><literal type="number">0x40</literal></expr></init></decl>,
<decl><name>STRTOG_Overflow</name> <init>= <expr><literal type="number">0x80</literal></expr></init></decl>
}</block>;</enum>

<typedef>typedef <type><struct>struct
<name>FPI</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>nbits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>emin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>emax</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rounding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sudden_underflow</name></decl>;</decl_stmt>
}</block></struct></type> <name>FPI</name>;</typedef>

<enum>enum <block>{
<decl><name>FPI_Round_zero</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>FPI_Round_near</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>FPI_Round_up</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>FPI_Round_down</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>
}</block>;</enum>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name><modifier>*</modifier> <name>dtoa</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>double</name> <name>d</name><operator>,</operator> <name>int</name> <name>mode</name><operator>,</operator> <name>int</name> <name>ndigits</name><operator>,</operator> <name>int</name> <operator>*</operator><name>decpt</name><operator>,</operator>
<name>int</name> <operator>*</operator><name>sign</name><operator>,</operator> <name>char</name> <operator>*</operator><operator>*</operator><name>rve</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name><modifier>*</modifier> <name>gdtoa</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>FPI</name> <operator>*</operator><name>fpi</name><operator>,</operator> <name>int</name> <name>be</name><operator>,</operator> <name>ULong</name> <operator>*</operator><name>bits</name><operator>,</operator> <name>int</name> <operator>*</operator><name>kindp</name><operator>,</operator>
<name>int</name> <name>mode</name><operator>,</operator> <name>int</name> <name>ndigits</name><operator>,</operator> <name>int</name> <operator>*</operator><name>decpt</name><operator>,</operator> <name>char</name> <operator>*</operator><operator>*</operator><name>rve</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>freedtoa</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>float</name> <name>strtof</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>CONST</name> <name>char</name> <operator>*</operator><operator>,</operator> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>double</name> <name>strtod</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>CONST</name> <name>char</name> <operator>*</operator><operator>,</operator> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>strtodg</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>CONST</name> <name>char</name><operator>*</operator><operator>,</operator> <name>char</name><operator>*</operator><operator>*</operator><operator>,</operator> <name>FPI</name><operator>*</operator><operator>,</operator> <name>Long</name><operator>*</operator><operator>,</operator> <name>ULong</name><operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name><modifier>*</modifier> <name>g_ddfmt</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>,</operator> <name>double</name><operator>*</operator><operator>,</operator> <name>int</name><operator>,</operator> <name>size_t</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name><modifier>*</modifier> <name>g_dfmt</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>,</operator> <name>double</name><operator>*</operator><operator>,</operator> <name>int</name><operator>,</operator> <name>size_t</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name><modifier>*</modifier> <name>g_ffmt</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>,</operator> <name>float</name><operator>*</operator><operator>,</operator> <name>int</name><operator>,</operator> <name>size_t</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name><modifier>*</modifier> <name>g_Qfmt</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>,</operator> <name>void</name><operator>*</operator><operator>,</operator> <name>int</name><operator>,</operator> <name>size_t</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name><modifier>*</modifier> <name>g_xfmt</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>,</operator> <name>void</name><operator>*</operator><operator>,</operator> <name>int</name><operator>,</operator> <name>size_t</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name><modifier>*</modifier> <name>g_xLfmt</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>,</operator> <name>void</name><operator>*</operator><operator>,</operator> <name>int</name><operator>,</operator> <name>size_t</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>strtoId</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>CONST</name> <name>char</name><operator>*</operator><operator>,</operator> <name>char</name><operator>*</operator><operator>*</operator><operator>,</operator> <name>double</name><operator>*</operator><operator>,</operator> <name>double</name><operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>strtoIdd</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>CONST</name> <name>char</name><operator>*</operator><operator>,</operator> <name>char</name><operator>*</operator><operator>*</operator><operator>,</operator> <name>double</name><operator>*</operator><operator>,</operator> <name>double</name><operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>strtoIf</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>CONST</name> <name>char</name><operator>*</operator><operator>,</operator> <name>char</name><operator>*</operator><operator>*</operator><operator>,</operator> <name>float</name><operator>*</operator><operator>,</operator> <name>float</name><operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>strtoIQ</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>CONST</name> <name>char</name><operator>*</operator><operator>,</operator> <name>char</name><operator>*</operator><operator>*</operator><operator>,</operator> <name>void</name><operator>*</operator><operator>,</operator> <name>void</name><operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>strtoIx</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>CONST</name> <name>char</name><operator>*</operator><operator>,</operator> <name>char</name><operator>*</operator><operator>*</operator><operator>,</operator> <name>void</name><operator>*</operator><operator>,</operator> <name>void</name><operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>strtoIxL</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>CONST</name> <name>char</name><operator>*</operator><operator>,</operator> <name>char</name><operator>*</operator><operator>*</operator><operator>,</operator> <name>void</name><operator>*</operator><operator>,</operator> <name>void</name><operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>strtord</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>CONST</name> <name>char</name><operator>*</operator><operator>,</operator> <name>char</name><operator>*</operator><operator>*</operator><operator>,</operator> <name>int</name><operator>,</operator> <name>double</name><operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>strtordd</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>CONST</name> <name>char</name><operator>*</operator><operator>,</operator> <name>char</name><operator>*</operator><operator>*</operator><operator>,</operator> <name>int</name><operator>,</operator> <name>double</name><operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>strtorf</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>CONST</name> <name>char</name><operator>*</operator><operator>,</operator> <name>char</name><operator>*</operator><operator>*</operator><operator>,</operator> <name>int</name><operator>,</operator> <name>float</name><operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>strtorQ</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>CONST</name> <name>char</name><operator>*</operator><operator>,</operator> <name>char</name><operator>*</operator><operator>*</operator><operator>,</operator> <name>int</name><operator>,</operator> <name>void</name><operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>strtorx</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>CONST</name> <name>char</name><operator>*</operator><operator>,</operator> <name>char</name><operator>*</operator><operator>*</operator><operator>,</operator> <name>int</name><operator>,</operator> <name>void</name><operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>strtorxL</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>CONST</name> <name>char</name><operator>*</operator><operator>,</operator> <name>char</name><operator>*</operator><operator>*</operator><operator>,</operator> <name>int</name><operator>,</operator> <name>void</name><operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>strtodI</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>CONST</name> <name>char</name><operator>*</operator><operator>,</operator> <name>char</name><operator>*</operator><operator>*</operator><operator>,</operator> <name>double</name><operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>strtopd</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>CONST</name> <name>char</name><operator>*</operator><operator>,</operator> <name>char</name><operator>*</operator><operator>*</operator><operator>,</operator> <name>double</name><operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>strtopdd</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>CONST</name> <name>char</name><operator>*</operator><operator>,</operator> <name>char</name><operator>*</operator><operator>*</operator><operator>,</operator> <name>double</name><operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>strtopf</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>CONST</name> <name>char</name><operator>*</operator><operator>,</operator> <name>char</name><operator>*</operator><operator>*</operator><operator>,</operator> <name>float</name><operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>strtopQ</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>CONST</name> <name>char</name><operator>*</operator><operator>,</operator> <name>char</name><operator>*</operator><operator>*</operator><operator>,</operator> <name>void</name><operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>strtopx</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>CONST</name> <name>char</name><operator>*</operator><operator>,</operator> <name>char</name><operator>*</operator><operator>*</operator><operator>,</operator> <name>void</name><operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>strtopxL</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>CONST</name> <name>char</name><operator>*</operator><operator>,</operator> <name>char</name><operator>*</operator><operator>*</operator><operator>,</operator> <name>void</name><operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strtopd</name><parameter_list>(<parameter><type><name>s</name></type></parameter>,<parameter><type><name>se</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>strtord(s,se,1,x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strtopdd</name><parameter_list>(<parameter><type><name>s</name></type></parameter>,<parameter><type><name>se</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>strtordd(s,se,1,x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strtopf</name><parameter_list>(<parameter><type><name>s</name></type></parameter>,<parameter><type><name>se</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>strtorf(s,se,1,x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strtopQ</name><parameter_list>(<parameter><type><name>s</name></type></parameter>,<parameter><type><name>se</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>strtorQ(s,se,1,x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strtopx</name><parameter_list>(<parameter><type><name>s</name></type></parameter>,<parameter><type><name>se</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>strtorx(s,se,1,x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strtopxL</name><parameter_list>(<parameter><type><name>s</name></type></parameter>,<parameter><type><name>se</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>strtorxL(s,se,1,x)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
