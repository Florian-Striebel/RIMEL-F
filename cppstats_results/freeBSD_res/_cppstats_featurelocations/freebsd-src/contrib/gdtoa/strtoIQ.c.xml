<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/gdtoa/strtoIQ.c">






























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gdtoaimp.h"</cpp:file></cpp:include>

<function><type><name>int</name></type>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KR_headers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>strtoIQ</name><parameter_list>(<parameter><decl><type><name>s</name></type></decl></parameter>, <parameter><decl><type><name>sp</name></type></decl></parameter>, <parameter><decl><type><name>a</name></type></decl></parameter>, <parameter><decl><type><name>b</name></type></decl></parameter>)</parameter_list> <decl_stmt><decl><type><name>CONST</name> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>sp</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
strtoIQ<parameter_list>(<parameter><decl><type><name>CONST</name> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>sp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>FPI</name></type> <name>fpi</name> <init>= <expr><block>{ <expr><literal type="number">113</literal></expr>, <expr><literal type="number">1</literal><operator>-</operator><literal type="number">16383</literal><operator>-</operator><literal type="number">113</literal><operator>+</operator><literal type="number">1</literal></expr>, <expr><literal type="number">32766</literal><operator>-</operator><literal type="number">16383</literal><operator>-</operator><literal type="number">113</literal><operator>+</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>SI</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Long</name></type> <name><name>exp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Bigint</name> <modifier>*</modifier></type><name><name>B</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>, <decl><type ref="prev"/><name><name>rv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULong</name> <modifier>*</modifier></type><name>L</name> <init>= <expr><operator>(</operator><name>ULong</name> <operator>*</operator><operator>)</operator><name>a</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>M</name> <init>= <expr><operator>(</operator><name>ULong</name> <operator>*</operator><operator>)</operator><name>b</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>Balloc</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>wds</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>strtoIg</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fpi</name></expr></argument>, <argument><expr><name>exp</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ULtoQ</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>x</name></expr></argument>, <argument><expr><name><name>exp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>rv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ULtoQ</name><argument_list>(<argument><expr><name>M</name></expr></argument>, <argument><expr><name><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>x</name></expr></argument>, <argument><expr><name><name>exp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>rv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>M</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>L</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>M</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>L</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>M</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>L</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>M</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>L</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>k</name></expr>;</return>
</block_content>}</block></function>
</unit>
