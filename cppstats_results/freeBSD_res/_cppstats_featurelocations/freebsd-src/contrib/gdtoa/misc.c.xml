<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/gdtoa/misc.c">






























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gdtoaimp.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>Bigint</name> <modifier>*</modifier></type><name><name>freelist</name><index>[<expr><name>Kmax</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>Omit_Private_Memory</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PRIVATE_MEM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIVATE_MEM</name></cpp:macro> <cpp:value>2304</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIVATE_mem</name></cpp:macro> <cpp:value>((PRIVATE_MEM+sizeof(double)-1)/sizeof(double))</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>double</name></type> <name><name>private_mem</name><index>[<expr><name>PRIVATE_mem</name></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pmem_next</name> <init>= <expr><name>private_mem</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>Bigint</name> <modifier>*</modifier></type>
<name>Balloc</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KR_headers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list> <name>int</name> <name>k</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>int</name> <name>k</name><operator>)</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr><name>int</name> <name>x</name></expr>;
<expr><name>Bigint</name> <operator>*</operator><name>rv</name></expr>;
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>Omit_Private_Memory</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>unsigned</name> <name>int</name> <name>len</name></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><call><name>ACQUIRE_DTOA_LOCK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;


<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&lt;=</operator> <name>Kmax</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>rv</name> <operator>=</operator> <name><name>freelist</name><index>[<expr><name>k</name></expr>]</index></name><operator>)</operator> <operator>!=</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>freelist</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>rv</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt>
<if_stmt><else>else <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>k</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Omit_Private_Memory</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <operator>(</operator><name>Bigint</name> <operator>*</operator><operator>)</operator><call><name>MALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Bigint</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <operator>(</operator><name>x</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>ULong</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>Bigint</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <operator>(</operator><name>x</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>ULong</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal><operator>)</operator>
<operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&lt;=</operator> <name>Kmax</name> <operator>&amp;&amp;</operator> <name>pmem_next</name> <operator>-</operator> <name>private_mem</name> <operator>+</operator> <name>len</name> <operator>&lt;=</operator> <name>PRIVATE_mem</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <operator>(</operator><name>Bigint</name><operator>*</operator><operator>)</operator><name>pmem_next</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pmem_next</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <operator>(</operator><name>Bigint</name><operator>*</operator><operator>)</operator><call><name>MALLOC</name><argument_list>(<argument><expr><name>len</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>k</name></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>maxwds</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>FREE_DTOA_LOCK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rv</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <name><name>rv</name><operator>-&gt;</operator><name>wds</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}

void
<macro><name>Bfree</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KR_headers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument_list>(<argument>v</argument>)</argument_list></macro> <decl_stmt><decl><type><name>Bigint</name> <modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>Bigint</name> <operator>*</operator><name>v</name><operator>)</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<if_stmt><if>if <condition>(<expr><name>v</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>k</name></name> <operator>&gt;</operator> <name>Kmax</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FREE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><else>else <block>{<block_content>
<expr_stmt><expr><call><name>ACQUIRE_DTOA_LOCK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>freelist</name><index>[<expr><name><name>v</name><operator>-&gt;</operator><name>k</name></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>freelist</name><index>[<expr><name><name>v</name><operator>-&gt;</operator><name>k</name></name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FREE_DTOA_LOCK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/></block_content></block></else></if_stmt></block_content></block></if></if_stmt>}</block></expr></expr_stmt>
}
}

<decl_stmt><decl><type><name>int</name></type>
<name>lo0bits</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KR_headers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list> <name>ULong</name> <modifier>*</modifier><name>y</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>ULong</name> <operator>*</operator><name>y</name><operator>)</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr><name>int</name> <name>k</name></expr>;
<expr><name>ULong</name> <name>x</name> <operator>=</operator> <operator>*</operator><name>y</name></expr>;

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<expr_stmt/></block_content></block></if></if_stmt></block_content></block></if></if_stmt>}</block>
<operator>*</operator><name>y</name> <operator>=</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">2</literal></expr>;</return>
}
k <expr_stmt><expr><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>&gt;&gt;=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>&gt;&gt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>&gt;&gt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>x</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">32</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<return>return <expr><name>k</name></expr>;</return>
}

Bigint <expr_stmt><expr><operator>*</operator>
<macro><name>multadd</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KR_headers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument_list>(<argument>b</argument>, <argument>m</argument>, <argument>a</argument>)</argument_list></macro> <name>Bigint</name> <operator>*</operator><name>b</name></expr>;</expr_stmt> <decl_stmt><decl><type><name>int</name></type> <name>m</name></decl>, <decl><type ref="prev"/><name>a</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>Bigint</name> <operator>*</operator><name>b</name><operator>,</operator> <name>int</name> <name>m</name><operator>,</operator> <name>int</name> <name>a</name><operator>)</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr><name>int</name> <name>i</name></expr>, <expr><name>wds</name></expr>;
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ULLong</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>ULong</name> <operator>*</operator><name>x</name></expr>;
<expr><name>ULLong</name> <name>carry</name></expr>, <expr><name>y</name></expr>;
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><name>ULong</name> <name>carry</name></expr>, <expr><operator>*</operator><name>x</name></expr>, <expr><name>y</name></expr>;
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Pack_32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>ULong</name> <name>xi</name></expr>, <expr><name>z</name></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><name>Bigint</name> <operator>*</operator><name>b1</name></expr>;

<expr><name>wds</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>wds</name></name></expr>;
<expr><name>x</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>x</name></name></expr>;
<expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;
<expr><name>carry</name> <operator>=</operator> <name>a</name></expr>;
<do>do <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ULLong</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>*</operator><name>x</name> <operator>*</operator> <operator>(</operator><name>ULLong</name><operator>)</operator><name>m</name> <operator>+</operator> <name>carry</name></expr>;</expr_stmt>
<expr_stmt><expr><name>carry</name> <operator>=</operator> <name>y</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>x</name><operator>++</operator> <operator>=</operator> <name>y</name> <operator>&amp;</operator> <literal type="number">0xffffffffUL</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Pack_32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>xi</name> <operator>=</operator> <operator>*</operator><name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name>xi</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>*</operator> <name>m</name> <operator>+</operator> <name>carry</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>xi</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>*</operator> <name>m</name> <operator>+</operator> <operator>(</operator><name>y</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>carry</name> <operator>=</operator> <name>z</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>x</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>z</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>*</operator><name>x</name> <operator>*</operator> <name>m</name> <operator>+</operator> <name>carry</name></expr>;</expr_stmt>
<expr_stmt><expr><name>carry</name> <operator>=</operator> <name>y</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>x</name><operator>++</operator> <operator>=</operator> <name>y</name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt/></block_content></block></do>}</block></expr></expr_stmt>
<while>while<condition>(<expr><operator>++</operator><name>i</name> <operator>&lt;</operator> <name>wds</name></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>carry</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>wds</name> <operator>&gt;=</operator> <name><name>b</name><operator>-&gt;</operator><name>maxwds</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>b1</name> <operator>=</operator> <call><name>Balloc</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>k</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Bcopy</name><argument_list>(<argument><expr><name>b1</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>b1</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>x</name><index>[<expr><name>wds</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>carry</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>wds</name></name> <operator>=</operator> <name>wds</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>b</name></expr>;</return>
}

int
<macro><name>hi0bits_D2A</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KR_headers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument_list>(<argument>x</argument>)</argument_list></macro> <decl_stmt><decl><type><name>ULong</name></type> <name>x</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>ULong</name> <name>x</name><operator>)</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr><name>int</name> <name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0xffff0000</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>&lt;&lt;=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0xff000000</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0xf0000000</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>&lt;&lt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0xc0000000</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>&lt;&lt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x80000000</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x40000000</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">32</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>k</name></expr>;</return>
}

Bigint <expr_stmt><expr><operator>*</operator>
<macro><name>i2b</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KR_headers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument_list>(<argument>i</argument>)</argument_list></macro> <name>int</name> <name>i</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>int</name> <name>i</name><operator>)</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr><name>Bigint</name> <operator>*</operator><name>b</name></expr>;

<expr><name>b</name> <operator>=</operator> <call><name>Balloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;
<expr><name><name>b</name><operator>-&gt;</operator><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;
<expr><name><name>b</name><operator>-&gt;</operator><name>wds</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;
<return>return <expr><name>b</name></expr>;</return>
}</block></expr></expr_stmt>

<decl_stmt><decl><type><name>Bigint</name> <modifier>*</modifier></type>
<name>mult</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KR_headers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list> <name>Bigint</name> <modifier>*</modifier><name>a</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>Bigint</name> <operator>*</operator><name>a</name><operator>,</operator> <name>Bigint</name> <operator>*</operator><name>b</name><operator>)</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr><name>Bigint</name> <operator>*</operator><name>c</name></expr>;
<expr><name>int</name> <name>k</name></expr>, <expr><name>wa</name></expr>, <expr><name>wb</name></expr>, <expr><name>wc</name></expr>;
<expr><name>ULong</name> <operator>*</operator><name>x</name></expr>, <expr><operator>*</operator><name>xa</name></expr>, <expr><operator>*</operator><name>xae</name></expr>, <expr><operator>*</operator><name>xb</name></expr>, <expr><operator>*</operator><name>xbe</name></expr>, <expr><operator>*</operator><name>xc</name></expr>, <expr><operator>*</operator><name>xc0</name></expr>;
<expr><name>ULong</name> <name>y</name></expr>;
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ULLong</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>ULLong</name> <name>carry</name></expr>, <expr><name>z</name></expr>;
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><name>ULong</name> <name>carry</name></expr>, <expr><name>z</name></expr>;
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Pack_32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>ULong</name> <name>z2</name></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>wds</name></name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>wds</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt/></block_content></block></if></if_stmt>}</block>
<name>k</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>k</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>wa</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>wds</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>wb</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>wds</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>wc</name> <operator>=</operator> <name>wa</name> <operator>+</operator> <name>wb</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>wc</name> <operator>&gt;</operator> <name><name>a</name><operator>-&gt;</operator><name>maxwds</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>Balloc</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>x</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>x</name></name></expr><operator>,</operator> <expr><name>xa</name> <operator>=</operator> <name>x</name> <operator>+</operator> <name>wc</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>xa</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>xa</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>xae</name> <operator>=</operator> <name>xa</name> <operator>+</operator> <name>wa</name></expr>;</expr_stmt>
<expr_stmt><expr><name>xb</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>xbe</name> <operator>=</operator> <name>xb</name> <operator>+</operator> <name>wb</name></expr>;</expr_stmt>
<expr_stmt><expr><name>xc0</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ULLong</name></expr></argument>)</argument_list></call></expr></cpp:if>
<for>for<control>(<init>;</init> <condition><expr><name>xb</name> <operator>&lt;</operator> <name>xbe</name></expr>;</condition> <incr><expr><name>xc0</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>( <expr><operator>(</operator><name>y</name> <operator>=</operator> <operator>*</operator><name>xb</name><operator>++</operator><operator>)</operator> <operator>!=</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>xa</name></expr>;</expr_stmt>
<expr_stmt><expr><name>xc</name> <operator>=</operator> <name>xc0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>carry</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>*</operator><name>x</name><operator>++</operator> <operator>*</operator> <operator>(</operator><name>ULLong</name><operator>)</operator><name>y</name> <operator>+</operator> <operator>*</operator><name>xc</name> <operator>+</operator> <name>carry</name></expr>;</expr_stmt>
<expr_stmt><expr><name>carry</name> <operator>=</operator> <name>z</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>xc</name><operator>++</operator> <operator>=</operator> <name>z</name> <operator>&amp;</operator> <literal type="number">0xffffffffUL</literal></expr>;</expr_stmt>
</block_content>}</block>
while<condition>(<expr><name>x</name> <operator>&lt;</operator> <name>xae</name></expr>)</condition>;</do>
<expr_stmt><expr><operator>*</operator><name>xc</name> <operator>=</operator> <name>carry</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Pack_32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<for>for<control>(<init>;</init> <condition><expr><name>xb</name> <operator>&lt;</operator> <name>xbe</name></expr>;</condition> <incr><expr><name>xb</name><operator>++</operator></expr><operator>,</operator> <expr><name>xc0</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>( <expr><operator>(</operator><name>y</name> <operator>=</operator> <operator>*</operator><name>xb</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>!=</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>xa</name></expr>;</expr_stmt>
<expr_stmt><expr><name>xc</name> <operator>=</operator> <name>xc0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>carry</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>*</operator> <name>y</name> <operator>+</operator> <operator>(</operator><operator>*</operator><name>xc</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>+</operator> <name>carry</name></expr>;</expr_stmt>
<expr_stmt><expr><name>carry</name> <operator>=</operator> <name>z</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>z2</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>x</name><operator>++</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>*</operator> <name>y</name> <operator>+</operator> <operator>(</operator><operator>*</operator><name>xc</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <name>carry</name></expr>;</expr_stmt>
<expr_stmt><expr><name>carry</name> <operator>=</operator> <name>z2</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Storeinc</name><argument_list>(<argument><expr><name>xc</name></expr></argument>, <argument><expr><name>z2</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
while<condition>(<expr><name>x</name> <operator>&lt;</operator> <name>xae</name></expr>)</condition>;</do>
<expr_stmt><expr><operator>*</operator><name>xc</name> <operator>=</operator> <name>carry</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><operator>(</operator><name>y</name> <operator>=</operator> <operator>*</operator><name>xb</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>!=</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>xa</name></expr>;</expr_stmt>
<expr_stmt><expr><name>xc</name> <operator>=</operator> <name>xc0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>carry</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>z2</name> <operator>=</operator> <operator>*</operator><name>xc</name></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>*</operator> <name>y</name> <operator>+</operator> <operator>(</operator><operator>*</operator><name>xc</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <name>carry</name></expr>;</expr_stmt>
<expr_stmt><expr><name>carry</name> <operator>=</operator> <name>z</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Storeinc</name><argument_list>(<argument><expr><name>xc</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>z2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z2</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>x</name><operator>++</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>*</operator> <name>y</name> <operator>+</operator> <operator>(</operator><operator>*</operator><name>xc</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>+</operator> <name>carry</name></expr>;</expr_stmt>
<expr_stmt><expr><name>carry</name> <operator>=</operator> <name>z2</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block>
while<condition>(<expr><name>x</name> <operator>&lt;</operator> <name>xae</name></expr>)</condition>;</do>
<expr_stmt><expr><operator>*</operator><name>xc</name> <operator>=</operator> <name>z2</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<for>for<control>(<init>;</init> <condition><expr><name>xb</name> <operator>&lt;</operator> <name>xbe</name></expr>;</condition> <incr><expr><name>xc0</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>( <expr><operator>(</operator><name>y</name> <operator>=</operator> <operator>*</operator><name>xb</name><operator>++</operator><operator>)</operator> <operator>!=</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>xa</name></expr>;</expr_stmt>
<expr_stmt><expr><name>xc</name> <operator>=</operator> <name>xc0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>carry</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>*</operator><name>x</name><operator>++</operator> <operator>*</operator> <name>y</name> <operator>+</operator> <operator>*</operator><name>xc</name> <operator>+</operator> <name>carry</name></expr>;</expr_stmt>
<expr_stmt><expr><name>carry</name> <operator>=</operator> <name>z</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>xc</name><operator>++</operator> <operator>=</operator> <name>z</name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>
</block_content>}</block>
while<condition>(<expr><name>x</name> <operator>&lt;</operator> <name>xae</name></expr>)</condition>;</do>
<expr_stmt><expr><operator>*</operator><name>xc</name> <operator>=</operator> <name>carry</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<for>for<control>(<init><expr><name>xc0</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>x</name></name></expr><operator>,</operator> <expr><name>xc</name> <operator>=</operator> <name>xc0</name> <operator>+</operator> <name>wc</name></expr>;</init> <condition><expr><name>wc</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><operator>--</operator><name>xc</name></expr>;</condition> <incr><expr><operator>--</operator><name>wc</name></expr></incr>)</control><block type="pseudo"><block_content> <empty_stmt>;</empty_stmt></block_content></block></for>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>wds</name></name> <operator>=</operator> <name>wc</name></expr>;</expr_stmt>
<return>return <expr><name>c</name></expr>;</return>
}

static <decl_stmt><decl><type><name>Bigint</name> <modifier>*</modifier></type><name>p5s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Bigint</name> <modifier>*</modifier></type>
<name>pow5mult</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KR_headers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list> <name>Bigint</name> <modifier>*</modifier><name>b</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>Bigint</name> <operator>*</operator><name>b</name><operator>,</operator> <name>int</name> <name>k</name><operator>)</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr><name>Bigint</name> <operator>*</operator><name>b1</name></expr>, <expr><operator>*</operator><name>p5</name></expr>, <expr><operator>*</operator><name>p51</name></expr>;
<expr><name>int</name> <name>i</name></expr>;
<expr><specifier>static</specifier> <name>int</name> <name><name>p05</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">125</literal></expr> }</block></expr>;

<if_stmt><if>if <condition>( <expr><operator>(</operator><name>i</name> <operator>=</operator> <name>k</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>!=</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>multadd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>p05</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr></expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>k</name> <operator>&gt;&gt;=</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>b</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p5</name> <operator>=</operator> <name>p5s</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MULTIPLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ACQUIRE_DTOA_LOCK</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>p5</name> <operator>=</operator> <name>p5s</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p5</name> <operator>=</operator> <name>p5s</name> <operator>=</operator> <call><name>i2b</name><argument_list>(<argument><expr><literal type="number">625</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p5</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>FREE_DTOA_LOCK</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>p5</name> <operator>=</operator> <name>p5s</name> <operator>=</operator> <call><name>i2b</name><argument_list>(<argument><expr><literal type="number">625</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p5</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>b1</name> <operator>=</operator> <call><name>mult</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>p5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>b1</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>k</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p51</name> <operator>=</operator> <name><name>p5</name><operator>-&gt;</operator><name>next</name></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MULTIPLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ACQUIRE_DTOA_LOCK</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>p51</name> <operator>=</operator> <name><name>p5</name><operator>-&gt;</operator><name>next</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p51</name> <operator>=</operator> <name><name>p5</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <call><name>mult</name><argument_list>(<argument><expr><name>p5</name></expr></argument>,<argument><expr><name>p5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p51</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>FREE_DTOA_LOCK</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>p51</name> <operator>=</operator> <name><name>p5</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <call><name>mult</name><argument_list>(<argument><expr><name>p5</name></expr></argument>,<argument><expr><name>p5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p51</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p5</name> <operator>=</operator> <name>p51</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>b</name></expr>;</return>
}

Bigint <expr_stmt><expr><operator>*</operator>
<macro><name>lshift</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KR_headers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument_list>(<argument>b</argument>, <argument>k</argument>)</argument_list></macro> <name>Bigint</name> <operator>*</operator><name>b</name></expr>;</expr_stmt> <decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>Bigint</name> <operator>*</operator><name>b</name><operator>,</operator> <name>int</name> <name>k</name><operator>)</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr><name>int</name> <name>i</name></expr>, <expr><name>k1</name></expr>, <expr><name>n</name></expr>, <expr><name>n1</name></expr>;
<expr><name>Bigint</name> <operator>*</operator><name>b1</name></expr>;
<expr><name>ULong</name> <operator>*</operator><name>x</name></expr>, <expr><operator>*</operator><name>x1</name></expr>, <expr><operator>*</operator><name>xe</name></expr>, <expr><name>z</name></expr>;

<expr><name>n</name> <operator>=</operator> <name>k</name> <operator>&gt;&gt;</operator> <name>kshift</name></expr>;
<expr><name>k1</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>k</name></name></expr>;
<expr><name>n1</name> <operator>=</operator> <name>n</name> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>wds</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>maxwds</name></name></expr>;</init> <condition><expr><name>n1</name> <operator>&gt;</operator> <name>i</name></expr>;</condition> <incr><expr><name>i</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>k1</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>
<name>b1</name> <operator>=</operator> <call><name>Balloc</name><argument_list>(<argument><expr><name>k1</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
<expr_stmt><expr><name>x1</name> <operator>=</operator> <name><name>b1</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>x1</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>xe</name> <operator>=</operator> <name>x</name> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>wds</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&amp;=</operator> <name>kmask</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Pack_32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>k1</name> <operator>=</operator> <literal type="number">32</literal> <operator>-</operator> <name>k</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>x1</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>x</name> <operator>&lt;&lt;</operator> <name>k</name> <operator>|</operator> <name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>*</operator><name>x</name><operator>++</operator> <operator>&gt;&gt;</operator> <name>k1</name></expr>;</expr_stmt>
</block_content>}</block>
while<condition>(<expr><name>x</name> <operator>&lt;</operator> <name>xe</name></expr>)</condition>;</do>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>x1</name> <operator>=</operator> <name>z</name><operator>)</operator> <operator>!=</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>n1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>k1</name> <operator>=</operator> <literal type="number">16</literal> <operator>-</operator> <name>k</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>x1</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>x</name> <operator>&lt;&lt;</operator> <name>k</name> <operator>&amp;</operator> <literal type="number">0xffff</literal> <operator>|</operator> <name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>*</operator><name>x</name><operator>++</operator> <operator>&gt;&gt;</operator> <name>k1</name></expr>;</expr_stmt>
</block_content>}</block>
while<condition>(<expr><name>x</name> <operator>&lt;</operator> <name>xe</name></expr>)</condition>;</do>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>x1</name> <operator>=</operator> <name>z</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>n1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <do>do<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>x1</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>x</name><operator>++</operator></expr>;</expr_stmt></block_content></block>
while<condition>(<expr><name>x</name> <operator>&lt;</operator> <name>xe</name></expr>)</condition>;</do></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>b1</name><operator>-&gt;</operator><name>wds</name></name> <operator>=</operator> <name>n1</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>b1</name></expr>;</return>
}

int
<macro><name>cmp</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KR_headers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument_list>(<argument>a</argument>, <argument>b</argument>)</argument_list></macro> <decl_stmt><decl><type><name>Bigint</name> <modifier>*</modifier></type><name>a</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>Bigint</name> <operator>*</operator><name>a</name><operator>,</operator> <name>Bigint</name> <operator>*</operator><name>b</name><operator>)</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr><name>ULong</name> <operator>*</operator><name>xa</name></expr>, <expr><operator>*</operator><name>xa0</name></expr>, <expr><operator>*</operator><name>xb</name></expr>, <expr><operator>*</operator><name>xb0</name></expr>;
<expr><name>int</name> <name>i</name></expr>, <expr><name>j</name></expr>;

<expr><name>i</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>wds</name></name></expr>;
<expr><name>j</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>wds</name></name></expr>;
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>a</name><operator>-&gt;</operator><name>x</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Bug</name><argument_list>(<argument><expr><literal type="string">"cmp called with a-&gt;x[a-&gt;wds-1] == 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr></expr_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>b</name><operator>-&gt;</operator><name>x</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Bug</name><argument_list>(<argument><expr><literal type="string">"cmp called with b-&gt;x[b-&gt;wds-1] == 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>-=</operator> <name>j</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>xa0</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>xa</name> <operator>=</operator> <name>xa0</name> <operator>+</operator> <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name>xb0</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>xb</name> <operator>=</operator> <name>xb0</name> <operator>+</operator> <name>j</name></expr>;</expr_stmt>
<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>--</operator><name>xa</name> <operator>!=</operator> <operator>*</operator><operator>--</operator><name>xb</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><operator>*</operator><name>xa</name> <operator>&lt;</operator> <operator>*</operator><name>xb</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>xa</name> <operator>&lt;=</operator> <name>xa0</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
}

Bigint <expr_stmt><expr><operator>*</operator>
<macro><name>diff</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KR_headers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument_list>(<argument>a</argument>, <argument>b</argument>)</argument_list></macro> <name>Bigint</name> <operator>*</operator><name>a</name></expr><operator>,</operator> <expr><operator>*</operator><name>b</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>Bigint</name> <operator>*</operator><name>a</name><operator>,</operator> <name>Bigint</name> <operator>*</operator><name>b</name><operator>)</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr><name>Bigint</name> <operator>*</operator><name>c</name></expr>;
<expr><name>int</name> <name>i</name></expr>, <expr><name>wa</name></expr>, <expr><name>wb</name></expr>;
<expr><name>ULong</name> <operator>*</operator><name>xa</name></expr>, <expr><operator>*</operator><name>xae</name></expr>, <expr><operator>*</operator><name>xb</name></expr>, <expr><operator>*</operator><name>xbe</name></expr>, <expr><operator>*</operator><name>xc</name></expr>;
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ULLong</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>ULLong</name> <name>borrow</name></expr>, <expr><name>y</name></expr>;
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><name>ULong</name> <name>borrow</name></expr>, <expr><name>y</name></expr>;
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Pack_32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>ULong</name> <name>z</name></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><name>i</name> <operator>=</operator> <call><name>cmp</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>i</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>Balloc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>wds</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>c</name></expr>;</return>
<expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>Balloc</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>wa</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>wds</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>xa</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>xae</name> <operator>=</operator> <name>xa</name> <operator>+</operator> <name>wa</name></expr>;</expr_stmt>
<expr_stmt><expr><name>wb</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>wds</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>xb</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>xbe</name> <operator>=</operator> <name>xb</name> <operator>+</operator> <name>wb</name></expr>;</expr_stmt>
<expr_stmt><expr><name>xc</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>borrow</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ULLong</name></expr></argument>)</argument_list></call></expr></cpp:if>
<do>do <block>{<block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name>ULLong</name><operator>)</operator><operator>*</operator><name>xa</name><operator>++</operator> <operator>-</operator> <operator>*</operator><name>xb</name><operator>++</operator> <operator>-</operator> <name>borrow</name></expr>;</expr_stmt>
<expr_stmt><expr><name>borrow</name> <operator>=</operator> <name>y</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal> <operator>&amp;</operator> <literal type="number">1UL</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>xc</name><operator>++</operator> <operator>=</operator> <name>y</name> <operator>&amp;</operator> <literal type="number">0xffffffffUL</literal></expr>;</expr_stmt>
</block_content>}</block>
while<condition>(<expr><name>xb</name> <operator>&lt;</operator> <name>xbe</name></expr>)</condition>;</do>
<while>while<condition>(<expr><name>xa</name> <operator>&lt;</operator> <name>xae</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>*</operator><name>xa</name><operator>++</operator> <operator>-</operator> <name>borrow</name></expr>;</expr_stmt>
<expr_stmt><expr><name>borrow</name> <operator>=</operator> <name>y</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal> <operator>&amp;</operator> <literal type="number">1UL</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>xc</name><operator>++</operator> <operator>=</operator> <name>y</name> <operator>&amp;</operator> <literal type="number">0xffffffffUL</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Pack_32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<do>do <block>{<block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>xa</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>*</operator><name>xb</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>-</operator> <name>borrow</name></expr>;</expr_stmt>
<expr_stmt><expr><name>borrow</name> <operator>=</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <literal type="number">0x10000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>xa</name><operator>++</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>*</operator><name>xb</name><operator>++</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>-</operator> <name>borrow</name></expr>;</expr_stmt>
<expr_stmt><expr><name>borrow</name> <operator>=</operator> <operator>(</operator><name>z</name> <operator>&amp;</operator> <literal type="number">0x10000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Storeinc</name><argument_list>(<argument><expr><name>xc</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
while<condition>(<expr><name>xb</name> <operator>&lt;</operator> <name>xbe</name></expr>)</condition>;</do>
<while>while<condition>(<expr><name>xa</name> <operator>&lt;</operator> <name>xae</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>xa</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>-</operator> <name>borrow</name></expr>;</expr_stmt>
<expr_stmt><expr><name>borrow</name> <operator>=</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <literal type="number">0x10000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>xa</name><operator>++</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>-</operator> <name>borrow</name></expr>;</expr_stmt>
<expr_stmt><expr><name>borrow</name> <operator>=</operator> <operator>(</operator><name>z</name> <operator>&amp;</operator> <literal type="number">0x10000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Storeinc</name><argument_list>(<argument><expr><name>xc</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<do>do <block>{<block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>*</operator><name>xa</name><operator>++</operator> <operator>-</operator> <operator>*</operator><name>xb</name><operator>++</operator> <operator>-</operator> <name>borrow</name></expr>;</expr_stmt>
<expr_stmt><expr><name>borrow</name> <operator>=</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <literal type="number">0x10000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>xc</name><operator>++</operator> <operator>=</operator> <name>y</name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>
</block_content>}</block>
while<condition>(<expr><name>xb</name> <operator>&lt;</operator> <name>xbe</name></expr>)</condition>;</do>
<while>while<condition>(<expr><name>xa</name> <operator>&lt;</operator> <name>xae</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>*</operator><name>xa</name><operator>++</operator> <operator>-</operator> <name>borrow</name></expr>;</expr_stmt>
<expr_stmt><expr><name>borrow</name> <operator>=</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <literal type="number">0x10000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>xc</name><operator>++</operator> <operator>=</operator> <name>y</name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<while>while<condition>(<expr><operator>!</operator><operator>*</operator><operator>--</operator><name>xc</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>wa</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>wds</name></name> <operator>=</operator> <name>wa</name></expr>;</expr_stmt>
<return>return <expr><name>c</name></expr>;</return>
}

double
<macro><name>b2d</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KR_headers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument_list>(<argument>a</argument>, <argument>e</argument>)</argument_list></macro> <decl_stmt><decl><type><name>Bigint</name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>Bigint</name> <operator>*</operator><name>a</name><operator>,</operator> <name>int</name> <operator>*</operator><name>e</name><operator>)</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr><name>ULong</name> <operator>*</operator><name>xa</name></expr>, <expr><operator>*</operator><name>xa0</name></expr>, <expr><name>w</name></expr>, <expr><name>y</name></expr>, <expr><name>z</name></expr>;
<expr><name>int</name> <name>k</name></expr>;
<expr><name>U</name> <name>d</name></expr>;
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>ULong</name> <name>d0</name></expr>, <expr><name>d1</name></expr>;
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>d0</name></cpp:macro> <cpp:value>word0(&amp;d)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>d1</name></cpp:macro> <cpp:value>word1(&amp;d)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><name>xa0</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>x</name></name></expr>;
<expr><name>xa</name> <operator>=</operator> <name>xa0</name> <operator>+</operator> <name><name>a</name><operator>-&gt;</operator><name>wds</name></name></expr>;
<expr><name>y</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>xa</name></expr>;
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>y</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>Bug</name><argument_list>(<argument><expr><literal type="string">"zero y in b2d"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<name>k</name> <operator>=</operator> <call><name>hi0bits</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>e</name> <operator>=</operator> <literal type="number">32</literal> <operator>-</operator> <name>k</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Pack_32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&lt;</operator> <name>Ebits</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>d0</name> <operator>=</operator> <name>Exp_1</name> <operator>|</operator> <name>y</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>Ebits</name> <operator>-</operator> <name>k</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <ternary><condition><expr><name>xa</name> <operator>&gt;</operator> <name>xa0</name></expr> ?</condition><then> <expr><operator>*</operator><operator>--</operator><name>xa</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>d1</name> <operator>=</operator> <name>y</name> <operator>&lt;&lt;</operator> <operator>(</operator><operator>(</operator><literal type="number">32</literal><operator>-</operator><name>Ebits</name><operator>)</operator> <operator>+</operator> <name>k</name><operator>)</operator> <operator>|</operator> <name>w</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>Ebits</name> <operator>-</operator> <name>k</name><operator>)</operator></expr>;</expr_stmt>
<goto>goto <name>ret_d</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <ternary><condition><expr><name>xa</name> <operator>&gt;</operator> <name>xa0</name></expr> ?</condition><then> <expr><operator>*</operator><operator>--</operator><name>xa</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>-=</operator> <name>Ebits</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>d0</name> <operator>=</operator> <name>Exp_1</name> <operator>|</operator> <name>y</name> <operator>&lt;&lt;</operator> <name>k</name> <operator>|</operator> <name>z</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>k</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <ternary><condition><expr><name>xa</name> <operator>&gt;</operator> <name>xa0</name></expr> ?</condition><then> <expr><operator>*</operator><operator>--</operator><name>xa</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>d1</name> <operator>=</operator> <name>z</name> <operator>&lt;&lt;</operator> <name>k</name> <operator>|</operator> <name>y</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>k</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>d0</name> <operator>=</operator> <name>Exp_1</name> <operator>|</operator> <name>y</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d1</name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&lt;</operator> <name>Ebits</name> <operator>+</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>z</name> <operator>=</operator> <ternary><condition><expr><name>xa</name> <operator>&gt;</operator> <name>xa0</name></expr> ?</condition><then> <expr><operator>*</operator><operator>--</operator><name>xa</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>d0</name> <operator>=</operator> <name>Exp_1</name> <operator>|</operator> <name>y</name> <operator>&lt;&lt;</operator> <name>k</name> <operator>-</operator> <name>Ebits</name> <operator>|</operator> <name>z</name> <operator>&gt;&gt;</operator> <name>Ebits</name> <operator>+</operator> <literal type="number">16</literal> <operator>-</operator> <name>k</name></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <ternary><condition><expr><name>xa</name> <operator>&gt;</operator> <name>xa0</name></expr> ?</condition><then> <expr><operator>*</operator><operator>--</operator><name>xa</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <ternary><condition><expr><name>xa</name> <operator>&gt;</operator> <name>xa0</name></expr> ?</condition><then> <expr><operator>*</operator><operator>--</operator><name>xa</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>d1</name> <operator>=</operator> <name>z</name> <operator>&lt;&lt;</operator> <name>k</name> <operator>+</operator> <literal type="number">16</literal> <operator>-</operator> <name>Ebits</name> <operator>|</operator> <name>w</name> <operator>&lt;&lt;</operator> <name>k</name> <operator>-</operator> <name>Ebits</name> <operator>|</operator> <name>y</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>+</operator> <name>Ebits</name> <operator>-</operator> <name>k</name></expr>;</expr_stmt>
<goto>goto <name>ret_d</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <ternary><condition><expr><name>xa</name> <operator>&gt;</operator> <name>xa0</name></expr> ?</condition><then> <expr><operator>*</operator><operator>--</operator><name>xa</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <ternary><condition><expr><name>xa</name> <operator>&gt;</operator> <name>xa0</name></expr> ?</condition><then> <expr><operator>*</operator><operator>--</operator><name>xa</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>-=</operator> <name>Ebits</name> <operator>+</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>d0</name> <operator>=</operator> <name>Exp_1</name> <operator>|</operator> <name>y</name> <operator>&lt;&lt;</operator> <name>k</name> <operator>+</operator> <literal type="number">16</literal> <operator>|</operator> <name>z</name> <operator>&lt;&lt;</operator> <name>k</name> <operator>|</operator> <name>w</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>-</operator> <name>k</name></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <ternary><condition><expr><name>xa</name> <operator>&gt;</operator> <name>xa0</name></expr> ?</condition><then> <expr><operator>*</operator><operator>--</operator><name>xa</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>d1</name> <operator>=</operator> <name>w</name> <operator>&lt;&lt;</operator> <name>k</name> <operator>+</operator> <literal type="number">16</literal> <operator>|</operator> <name>y</name> <operator>&lt;&lt;</operator> <name>k</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<label><name>ret_d</name>:</label>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>d0</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>|</operator> <name>d0</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>word1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>d1</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>|</operator> <name>d1</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</return>
}
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>d0</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>d1</name></cpp:undef>

Bigint <expr_stmt><expr><operator>*</operator>
<macro><name>d2b</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KR_headers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument_list>(<argument>dd</argument>, <argument>e</argument>, <argument>bits</argument>)</argument_list></macro> <name>double</name> <name>dd</name></expr>;</expr_stmt> <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>e</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bits</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>double</name> <name>dd</name><operator>,</operator> <name>int</name> <operator>*</operator><name>e</name><operator>,</operator> <name>int</name> <operator>*</operator><name>bits</name><operator>)</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr><name>Bigint</name> <operator>*</operator><name>b</name></expr>;
<expr><name>U</name> <name>d</name></expr>;
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>Sudden_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>int</name> <name>i</name></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><name>int</name> <name>de</name></expr>, <expr><name>k</name></expr>;
<expr><name>ULong</name> <operator>*</operator><name>x</name></expr>, <expr><name>y</name></expr>, <expr><name>z</name></expr>;
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>ULong</name> <name>d0</name></expr>, <expr><name>d1</name></expr>;
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>d0</name></cpp:macro> <cpp:value>word0(&amp;d)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>d1</name></cpp:macro> <cpp:value>word1(&amp;d)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><name><name>d</name><operator>.</operator><name>d</name></name> <operator>=</operator> <name>dd</name></expr>;
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>d0</name> <operator>=</operator> <call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>|</operator> <call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;
<expr><name>d1</name> <operator>=</operator> <call><name>word1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>|</operator> <call><name>word1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Pack_32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>b</name> <operator>=</operator> <call><name>Balloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><name>b</name> <operator>=</operator> <call><name>Balloc</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><name>x</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>x</name></name></expr>;

<expr><name>z</name> <operator>=</operator> <name>d0</name> <operator>&amp;</operator> <name>Frac_mask</name></expr>;
<expr><name>d0</name> <operator>&amp;=</operator> <literal type="number">0x7fffffff</literal></expr>;
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Sudden_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>de</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>d0</name> <operator>&gt;&gt;</operator> <name>Exp_shift</name><operator>)</operator></expr>;
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>IBM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>z</name> <operator>|=</operator> <name>Exp_msk11</name></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>( <expr><operator>(</operator><name>de</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>d0</name> <operator>&gt;&gt;</operator> <name>Exp_shift</name><operator>)</operator><operator>)</operator> <operator>!=</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>z</name> <operator>|=</operator> <name>Exp_msk1</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block></expr></expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Pack_32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>( <expr><operator>(</operator><name>y</name> <operator>=</operator> <name>d1</name><operator>)</operator> <operator>!=</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>( <expr><operator>(</operator><name>k</name> <operator>=</operator> <call><name>lo0bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>y</name> <operator>|</operator> <name>z</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>k</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>&gt;&gt;=</operator> <name>k</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>Sudden_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>i</name> <operator>=</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<name><name>b</name><operator>-&gt;</operator><name>wds</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>z</name><operator>)</operator> <operator>!=</operator><literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>lo0bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>Sudden_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>i</name> <operator>=</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<name><name>b</name><operator>-&gt;</operator><name>wds</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>+=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>( <expr><operator>(</operator><name>y</name> <operator>=</operator> <name>d1</name><operator>)</operator> <operator>!=</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>( <expr><operator>(</operator><name>k</name> <operator>=</operator> <call><name>lo0bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>y</name> <operator>|</operator> <name>z</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal> <operator>-</operator> <name>k</name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>z</name> <operator>&gt;&gt;</operator> <name>k</name> <operator>-</operator> <literal type="number">16</literal> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>z</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>y</name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>y</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>|</operator> <name>z</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>-</operator> <name>k</name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>z</name> <operator>&gt;&gt;</operator> <name>k</name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>z</name> <operator>&gt;&gt;</operator> <name>k</name><operator>+</operator><literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>y</name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>y</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>z</name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>z</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>z</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Bug</name><argument_list>(<argument><expr><literal type="string">"Zero passed to d2b"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>lo0bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>z</name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>z</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>k</name> <operator>+=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<while>while<condition>(<expr><operator>!</operator><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name>i</name></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>wds</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>Sudden_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>de</name></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IBM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>*</operator><name>e</name> <operator>=</operator> <operator>(</operator><name>de</name> <operator>-</operator> <name>Bias</name> <operator>-</operator> <operator>(</operator><name>P</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <name>k</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>bits</name> <operator>=</operator> <literal type="number">4</literal><operator>*</operator><name>P</name> <operator>+</operator> <literal type="number">8</literal> <operator>-</operator> <name>k</name> <operator>-</operator> <call><name>hi0bits</name><argument_list>(<argument><expr><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Frac_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>*</operator><name>e</name> <operator>=</operator> <name>de</name> <operator>-</operator> <name>Bias</name> <operator>-</operator> <operator>(</operator><name>P</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>k</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>bits</name> <operator>=</operator> <name>P</name> <operator>-</operator> <name>k</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>Sudden_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>e</name> <operator>=</operator> <name>de</name> <operator>-</operator> <name>Bias</name> <operator>-</operator> <operator>(</operator><name>P</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>k</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Pack_32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>*</operator><name>bits</name> <operator>=</operator> <literal type="number">32</literal><operator>*</operator><name>i</name> <operator>-</operator> <call><name>hi0bits</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>*</operator><name>bits</name> <operator>=</operator> <operator>(</operator><name>i</name><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><literal type="number">16</literal> <operator>-</operator> <call><name>hi0bits</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>b</name></expr>;</return>
}
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>d0</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>d1</name></cpp:undef>

CONST <decl_stmt><decl><type><name>double</name></type>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IEEE_Arith</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name><name>bigtens</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">1e16</literal></expr>, <expr><literal type="number">1e32</literal></expr>, <expr><literal type="number">1e64</literal></expr>, <expr><literal type="number">1e128</literal></expr>, <expr><literal type="number">1e256</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CONST</name> <name>double</name></type> <name><name>tinytens</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">1e-16</literal></expr>, <expr><literal type="number">1e-32</literal></expr>, <expr><literal type="number">1e-64</literal></expr>, <expr><literal type="number">1e-128</literal></expr>, <expr><literal type="number">1e-256</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IBM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>bigtens</name><index>[]</index></name> <operator>=</operator> <block>{ <expr><literal type="number">1e16</literal></expr>, <expr><literal type="number">1e32</literal></expr>, <expr><literal type="number">1e64</literal></expr> }</block></expr>;</expr_stmt>
<decl_stmt><decl><type><name>CONST</name> <name>double</name></type> <name><name>tinytens</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">1e-16</literal></expr>, <expr><literal type="number">1e-32</literal></expr>, <expr><literal type="number">1e-64</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>bigtens</name><index>[]</index></name> <operator>=</operator> <block>{ <expr><literal type="number">1e16</literal></expr>, <expr><literal type="number">1e32</literal></expr> }</block></expr>;</expr_stmt>
<decl_stmt><decl><type><name>CONST</name> <name>double</name></type> <name><name>tinytens</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">1e-16</literal></expr>, <expr><literal type="number">1e-32</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>CONST</name> <name>double</name></type>
<name><name>tens</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">1e0</literal></expr>, <expr><literal type="number">1e1</literal></expr>, <expr><literal type="number">1e2</literal></expr>, <expr><literal type="number">1e3</literal></expr>, <expr><literal type="number">1e4</literal></expr>, <expr><literal type="number">1e5</literal></expr>, <expr><literal type="number">1e6</literal></expr>, <expr><literal type="number">1e7</literal></expr>, <expr><literal type="number">1e8</literal></expr>, <expr><literal type="number">1e9</literal></expr>,
<expr><literal type="number">1e10</literal></expr>, <expr><literal type="number">1e11</literal></expr>, <expr><literal type="number">1e12</literal></expr>, <expr><literal type="number">1e13</literal></expr>, <expr><literal type="number">1e14</literal></expr>, <expr><literal type="number">1e15</literal></expr>, <expr><literal type="number">1e16</literal></expr>, <expr><literal type="number">1e17</literal></expr>, <expr><literal type="number">1e18</literal></expr>, <expr><literal type="number">1e19</literal></expr>,
<expr><literal type="number">1e20</literal></expr>, <expr><literal type="number">1e21</literal></expr>, <expr><literal type="number">1e22</literal></expr>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>VAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
, <expr><literal type="number">1e23</literal></expr>, <expr><literal type="number">1e24</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>char</name> <modifier>*</modifier></type>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KR_headers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>strcp_D2A</name><parameter_list>(<parameter><decl><type><name>a</name></type></decl></parameter>, <parameter><decl><type><name>b</name></type></decl></parameter>)</parameter_list> <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
strcp_D2A<parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>CONST</name> <name>char</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<while>while<condition>(<expr><operator>(</operator><operator>*</operator><name>a</name> <operator>=</operator> <operator>*</operator><name>b</name><operator>++</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>a</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><name>a</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NO_STRING_H</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>Char</name> <modifier>*</modifier></type>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KR_headers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>memcpy_D2A</name><parameter_list>(<parameter><decl><type><name>a</name></type></decl></parameter>, <parameter><decl><type><name>b</name></type></decl></parameter>, <parameter><decl><type><name>len</name></type></decl></parameter>)</parameter_list> <decl_stmt><decl><type><name>Char</name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>Char</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
memcpy_D2A<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a1</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>b1</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>a1</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ae</name> <init>= <expr><name>a</name> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>b1</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>a0</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><name>a</name> <operator>&lt;</operator> <name>ae</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>a</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>b</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><name>a0</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
