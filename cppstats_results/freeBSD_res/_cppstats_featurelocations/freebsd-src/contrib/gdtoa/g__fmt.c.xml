<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/gdtoa/g__fmt.c">






























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gdtoaimp.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_LOCALE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"locale.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>char</name> <modifier>*</modifier></type>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KR_headers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>g__fmt</name><parameter_list>(<parameter><decl><type><name>b</name></type></decl></parameter>, <parameter><decl><type><name>s</name></type></decl></parameter>, <parameter><decl><type><name>se</name></type></decl></parameter>, <parameter><decl><type><name>decpt</name></type></decl></parameter>, <parameter><decl><type><name>sign</name></type></decl></parameter>, <parameter><decl><type><name>blen</name></type></decl></parameter>)</parameter_list> <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>se</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>decpt</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>ULong</name></type> <name>sign</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>blen</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
g__fmt<parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>se</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>decpt</name></decl></parameter>, <parameter><decl><type><name>ULong</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>blen</name></decl></parameter>)</parameter_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>be</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_LOCALE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NO_LOCALE_CACHE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>decimalpoint</name> <init>= <expr><call><name>localeconv</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>decimal_point</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>dlen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>decimalpoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>decimalpoint</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>decimalpoint_cache</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>dlen</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>s0</name> <operator>=</operator> <name>decimalpoint_cache</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s0</name> <operator>=</operator> <call><name>localeconv</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>decimal_point</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dlen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>s0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>decimalpoint_cache</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>MALLOC</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s0</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>decimalpoint_cache</name></expr></argument>, <argument><expr><name>s0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s0</name> <operator>=</operator> <name>decimalpoint_cache</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>decimalpoint</name> <operator>=</operator> <name>s0</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dlen</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>s0</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>se</name><operator>-</operator><name>s</name><operator>)</operator> <operator>+</operator> <name>dlen</name> <operator>+</operator> <literal type="number">6</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>blen</name> <operator>&lt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ret0</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>be</name> <operator>=</operator> <name>b</name> <operator>+</operator> <name>blen</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sign</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>b</name><operator>++</operator> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>decpt</name> <operator>&lt;=</operator> <operator>-</operator><literal type="number">4</literal> <operator>||</operator> <name>decpt</name> <operator>&gt;</operator> <name>se</name> <operator>-</operator> <name>s</name> <operator>+</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>b</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>s</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_LOCALE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<while>while<condition>(<expr><operator>(</operator><operator>*</operator><name>b</name> <operator>=</operator> <operator>*</operator><name>decimalpoint</name><operator>++</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>b</name></expr>;</expr_stmt></block_content></block></while>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>*</operator><name>b</name><operator>++</operator> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<while>while<condition>(<expr><operator>(</operator><operator>*</operator><name>b</name> <operator>=</operator> <operator>*</operator><name>s</name><operator>++</operator><operator>)</operator> <operator>!=</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>b</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>b</name><operator>++</operator> <operator>=</operator> <literal type="char">'e'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>--</operator><name>decpt</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>b</name><operator>++</operator> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>decpt</name> <operator>=</operator> <operator>-</operator><name>decpt</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>b</name><operator>++</operator> <operator>=</operator> <literal type="char">'+'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">2</literal></expr><operator>,</operator> <expr><name>k</name> <operator>=</operator> <literal type="number">10</literal></expr>;</init> <condition><expr><literal type="number">10</literal><operator>*</operator><name>k</name> <operator>&lt;=</operator> <name>decpt</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>k</name> <operator>*=</operator> <literal type="number">10</literal></expr></incr>)</control><block>{<block_content/>}</block></for>
<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>decpt</name> <operator>/</operator> <name>k</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>&gt;=</operator> <name>be</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ret0</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>b</name><operator>++</operator> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name>j</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>decpt</name> <operator>-=</operator> <name>i</name><operator>*</operator><name>k</name></expr>;</expr_stmt>
<expr_stmt><expr><name>decpt</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>decpt</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_LOCALE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<while>while<condition>(<expr><operator>(</operator><operator>*</operator><name>b</name> <operator>=</operator> <operator>*</operator><name>decimalpoint</name><operator>++</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>b</name></expr>;</expr_stmt></block_content></block></while>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>*</operator><name>b</name><operator>++</operator> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>be</name> <operator>&lt;</operator> <name>b</name> <operator>-</operator> <name>decpt</name> <operator>+</operator> <operator>(</operator><name>se</name> <operator>-</operator> <name>s</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ret0</name>;</goto></block_content></block></if></if_stmt>
<for>for<control>(<init>;</init> <condition><expr><name>decpt</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>decpt</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>b</name><operator>++</operator> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></for>
<while>while<condition>(<expr><operator>(</operator><operator>*</operator><name>b</name> <operator>=</operator> <operator>*</operator><name>s</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>b</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if>
<else>else <block>{<block_content>
<while>while<condition>(<expr><operator>(</operator><operator>*</operator><name>b</name> <operator>=</operator> <operator>*</operator><name>s</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>b</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name>decpt</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_LOCALE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<while>while<condition>(<expr><operator>*</operator><name>b</name> <operator>=</operator> <operator>*</operator><name>decimalpoint</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>b</name></expr>;</expr_stmt></block_content></block></while>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>*</operator><name>b</name><operator>++</operator> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>+</operator> <name>decpt</name> <operator>&gt;</operator> <name>be</name></expr>)</condition> <block>{<block_content>
<label><name>ret0</name>:</label>
<expr_stmt><expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>ret</name>;</goto>
</block_content>}</block></if></if_stmt>
<for>for<control>(<init>;</init> <condition><expr><name>decpt</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>decpt</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>b</name><operator>++</operator> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><operator>*</operator><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<label><name>ret</name>:</label>
<expr_stmt><expr><call><name>freedtoa</name><argument_list>(<argument><expr><name>s0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>b</name></expr>;</return>
</block_content>}</block></function>
</unit>
