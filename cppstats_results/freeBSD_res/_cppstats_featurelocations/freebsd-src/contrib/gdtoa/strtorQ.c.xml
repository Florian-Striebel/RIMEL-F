<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/gdtoa/strtorQ.c">
































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gdtoaimp.h"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_0</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_1</name></cpp:undef>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IEEE_MC68k</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_0</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_1</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_2</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_3</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IEEE_8087</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_0</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_1</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_2</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_3</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KR_headers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>ULtoQ</name><parameter_list>(<parameter><decl><type><name>L</name></type></decl></parameter>, <parameter><decl><type><name>bits</name></type></decl></parameter>, <parameter><decl><type><name>exp</name></type></decl></parameter>, <parameter><decl><type><name>k</name></type></decl></parameter>)</parameter_list> <decl_stmt><decl><type><name>ULong</name> <modifier>*</modifier></type><name>L</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>ULong</name> <modifier>*</modifier></type><name>bits</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>Long</name></type> <name>exp</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
ULtoQ<parameter_list>(<parameter><decl><type><name>ULong</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>ULong</name> <modifier>*</modifier></type><name>bits</name></decl></parameter>, <parameter><decl><type><name>Long</name></type> <name>exp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<switch>switch<condition>(<expr><name>k</name> <operator>&amp;</operator> <name>STRTOG_Retmask</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>STRTOG_NoNumber</name></expr>:</case>
<case>case <expr><name>STRTOG_Zero</name></expr>:</case>
<expr_stmt><expr><name><name>L</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>L</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>L</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>L</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>STRTOG_Normal</name></expr>:</case>
<expr_stmt><expr><name><name>L</name><index>[<expr><name>_3</name></expr>]</index></name> <operator>=</operator> <name><name>bits</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>L</name><index>[<expr><name>_2</name></expr>]</index></name> <operator>=</operator> <name><name>bits</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>L</name><index>[<expr><name>_1</name></expr>]</index></name> <operator>=</operator> <name><name>bits</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>L</name><index>[<expr><name>_0</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>bits</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x10000</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>exp</name> <operator>+</operator> <literal type="number">0x3fff</literal> <operator>+</operator> <literal type="number">112</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>STRTOG_NaNbits</name></expr>:</case>
<expr_stmt><expr><name><name>L</name><index>[<expr><name>_3</name></expr>]</index></name> <operator>=</operator> <name><name>bits</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>L</name><index>[<expr><name>_2</name></expr>]</index></name> <operator>=</operator> <name><name>bits</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>L</name><index>[<expr><name>_1</name></expr>]</index></name> <operator>=</operator> <name><name>bits</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>L</name><index>[<expr><name>_0</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>bits</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x10000</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>exp</name> <operator>+</operator> <literal type="number">0x3fff</literal> <operator>+</operator> <literal type="number">112</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>STRTOG_Denormal</name></expr>:</case>
<expr_stmt><expr><name><name>L</name><index>[<expr><name>_3</name></expr>]</index></name> <operator>=</operator> <name><name>bits</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>L</name><index>[<expr><name>_2</name></expr>]</index></name> <operator>=</operator> <name><name>bits</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>L</name><index>[<expr><name>_1</name></expr>]</index></name> <operator>=</operator> <name><name>bits</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>L</name><index>[<expr><name>_0</name></expr>]</index></name> <operator>=</operator> <name><name>bits</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>STRTOG_Infinite</name></expr>:</case>
<expr_stmt><expr><name><name>L</name><index>[<expr><name>_0</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x7fff0000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>L</name><index>[<expr><name>_1</name></expr>]</index></name> <operator>=</operator> <name><name>L</name><index>[<expr><name>_2</name></expr>]</index></name> <operator>=</operator> <name><name>L</name><index>[<expr><name>_3</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>STRTOG_NaN</name></expr>:</case>
<expr_stmt><expr><name><name>L</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ld_QNAN0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>L</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ld_QNAN1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>L</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>ld_QNAN2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>L</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>ld_QNAN3</name></expr>;</expr_stmt>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&amp;</operator> <name>STRTOG_Neg</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>L</name><index>[<expr><name>_0</name></expr>]</index></name> <operator>|=</operator> <literal type="number">0x80000000L</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KR_headers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>strtorQ_l</name><parameter_list>(<parameter><decl><type><name>s</name></type></decl></parameter>, <parameter><decl><type><name>sp</name></type></decl></parameter>, <parameter><decl><type><name>rounding</name></type></decl></parameter>, <parameter><decl><type><name>L</name></type></decl></parameter>, <parameter><decl><type><name>locale</name></type></decl></parameter>)</parameter_list> <decl_stmt><decl><type><name>CONST</name> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>sp</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>rounding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>L</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>locale_t</name></type> <name>locale</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
strtorQ_l<parameter_list>(<parameter><decl><type><name>CONST</name> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>sp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rounding</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>locale_t</name></type> <name>locale</name></decl></parameter>)</parameter_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>FPI</name></type> <name>fpi0</name> <init>= <expr><block>{ <expr><literal type="number">113</literal></expr>, <expr><literal type="number">1</literal><operator>-</operator><literal type="number">16383</literal><operator>-</operator><literal type="number">113</literal><operator>+</operator><literal type="number">1</literal></expr>, <expr><literal type="number">32766</literal><operator>-</operator><literal type="number">16383</literal><operator>-</operator><literal type="number">113</literal><operator>+</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>SI</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FPI</name> <modifier>*</modifier></type><name>fpi</name></decl>, <decl><type ref="prev"/><name>fpi1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULong</name></type> <name><name>bits</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Long</name></type> <name>exp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fpi</name> <operator>=</operator> <operator>&amp;</operator><name>fpi0</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rounding</name> <operator>!=</operator> <name>FPI_Round_near</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fpi1</name> <operator>=</operator> <name>fpi0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fpi1</name><operator>.</operator><name>rounding</name></name> <operator>=</operator> <name>rounding</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fpi</name> <operator>=</operator> <operator>&amp;</operator><name>fpi1</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>strtodg_l</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>fpi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>exp</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><name>locale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ULtoQ</name><argument_list>(<argument><expr><operator>(</operator><name>ULong</name><operator>*</operator><operator>)</operator><name>L</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><name>exp</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>k</name></expr>;</return>
</block_content>}</block></function>
</unit>
