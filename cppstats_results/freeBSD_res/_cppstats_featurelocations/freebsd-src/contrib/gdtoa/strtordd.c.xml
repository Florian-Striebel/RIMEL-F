<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/gdtoa/strtordd.c">






























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gdtoaimp.h"</cpp:file></cpp:include>

<function><type><name>void</name></type>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KR_headers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>ULtodd</name><parameter_list>(<parameter><decl><type><name>L</name></type></decl></parameter>, <parameter><decl><type><name>bits</name></type></decl></parameter>, <parameter><decl><type><name>exp</name></type></decl></parameter>, <parameter><decl><type><name>k</name></type></decl></parameter>)</parameter_list> <decl_stmt><decl><type><name>ULong</name> <modifier>*</modifier></type><name>L</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>ULong</name> <modifier>*</modifier></type><name>bits</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>Long</name></type> <name>exp</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
ULtodd<parameter_list>(<parameter><decl><type><name>ULong</name> <modifier>*</modifier></type><name>L</name></decl></parameter>, <parameter><decl><type><name>ULong</name> <modifier>*</modifier></type><name>bits</name></decl></parameter>, <parameter><decl><type><name>Long</name></type> <name>exp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>k</name> <operator>&amp;</operator> <name>STRTOG_Retmask</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>STRTOG_NoNumber</name></expr>:</case>
<case>case <expr><name>STRTOG_Zero</name></expr>:</case>
<expr_stmt><expr><name><name>L</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>L</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>L</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>L</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>STRTOG_Normal</name></expr>:</case>
<expr_stmt><expr><name><name>L</name><index>[<expr><name>_1</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>bits</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">21</literal> <operator>|</operator> <name><name>bits</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>ULong</name><operator>)</operator><literal type="number">0xffffffffL</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>L</name><index>[<expr><name>_0</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>bits</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">21</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>bits</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">11</literal> <operator>&amp;</operator> <literal type="number">0xfffff</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><name>exp</name> <operator>+</operator> <literal type="number">0x3ff</literal> <operator>+</operator> <literal type="number">105</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">20</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>exp</name> <operator>+=</operator> <literal type="number">0x3ff</literal> <operator>+</operator> <literal type="number">52</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bits</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">0x1fffff</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>hi0bits</name><argument_list>(<argument><expr><name><name>bits</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">11</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>exp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>exp</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>exp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>exp</name> <operator>-=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bits</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>bits</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>i</name> <operator>|</operator> <name><name>bits</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">32</literal><operator>-</operator><name>i</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bits</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>bits</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>i</name> <operator>&amp;</operator> <operator>(</operator><name>ULong</name><operator>)</operator><literal type="number">0xffffffffL</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>bits</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>hi0bits</name><argument_list>(<argument><expr><name><name>bits</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">21</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>exp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>exp</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>exp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>exp</name> <operator>-=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bits</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>bits</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>i</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bits</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>bits</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>i</name> <operator>&amp;</operator> <operator>(</operator><name>ULong</name><operator>)</operator><literal type="number">0xffffffffL</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>bits</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>bits</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bits</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>L</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>L</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>L</name><index>[<expr><literal type="number">2</literal><operator>+</operator><name>_1</name></expr>]</index></name> <operator>=</operator> <name><name>bits</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>L</name><index>[<expr><literal type="number">2</literal><operator>+</operator><name>_0</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>bits</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xfffff</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>exp</name> <operator>&lt;&lt;</operator> <literal type="number">20</literal><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>STRTOG_Denormal</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>bits</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>nearly_normal</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bits</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>partly_normal</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>bits</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xffe00000</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>hardly_normal</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>L</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>L</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>L</name><index>[<expr><name>_1</name></expr>]</index></name> <operator>=</operator> <name><name>bits</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>L</name><index>[<expr><name>_0</name></expr>]</index></name> <operator>=</operator> <name><name>bits</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>

<label><name>nearly_normal</name>:</label>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>hi0bits</name><argument_list>(<argument><expr><name><name>bits</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">11</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">32</literal> <operator>-</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>L</name><index>[<expr><name>_0</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>bits</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>i</name> <operator>|</operator> <name><name>bits</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name>j</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xfffff</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><literal type="number">65</literal> <operator>-</operator> <name>i</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">20</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>L</name><index>[<expr><name>_1</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>bits</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>i</name> <operator>|</operator> <name><name>bits</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name>j</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffffffffL</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>L</name><index>[<expr><literal type="number">2</literal><operator>+</operator><name>_0</name></expr>]</index></name> <operator>=</operator> <name><name>bits</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>ULong</name><operator>)</operator><literal type="number">1L</literal> <operator>&lt;&lt;</operator> <name>j</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>L</name><index>[<expr><literal type="number">2</literal><operator>+</operator><name>_1</name></expr>]</index></name> <operator>=</operator> <name><name>bits</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>

<label><name>partly_normal</name>:</label>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>hi0bits</name><argument_list>(<argument><expr><name><name>bits</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">11</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>j</name> <operator>=</operator> <operator>-</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>L</name><index>[<expr><name>_0</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>bits</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name>j</name> <operator>&amp;</operator> <literal type="number">0xfffff</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><literal type="number">33</literal> <operator>+</operator> <name>j</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">20</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>L</name><index>[<expr><name>_1</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>bits</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>i</name> <operator>|</operator> <name><name>bits</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name>j</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffffffffL</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>L</name><index>[<expr><literal type="number">2</literal><operator>+</operator><name>_0</name></expr>]</index></name> <operator>=</operator> <name><name>bits</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>ULong</name><operator>)</operator><literal type="number">1L</literal> <operator>&lt;&lt;</operator> <name>j</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>L</name><index>[<expr><literal type="number">2</literal><operator>+</operator><name>_1</name></expr>]</index></name> <operator>=</operator> <name><name>bits</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>L</name><index>[<expr><name>_0</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>bits</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xfffff</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">33</literal> <operator>&lt;&lt;</operator> <literal type="number">20</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>L</name><index>[<expr><name>_1</name></expr>]</index></name> <operator>=</operator> <name><name>bits</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>L</name><index>[<expr><literal type="number">2</literal><operator>+</operator><name>_0</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>L</name><index>[<expr><literal type="number">2</literal><operator>+</operator><name>_1</name></expr>]</index></name> <operator>=</operator> <name><name>bits</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">32</literal> <operator>-</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>L</name><index>[<expr><name>_0</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>bits</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>bits</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name>j</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xfffff</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><name>j</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">20</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>L</name><index>[<expr><name>_1</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>bits</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>i</name> <operator>|</operator> <name><name>bits</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name>j</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffffffffL</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>L</name><index>[<expr><literal type="number">2</literal><operator>+</operator><name>_0</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>L</name><index>[<expr><literal type="number">2</literal><operator>+</operator><name>_1</name></expr>]</index></name> <operator>=</operator> <name><name>bits</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1L</literal> <operator>&lt;&lt;</operator> <name>j</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>

<label><name>hardly_normal</name>:</label>
<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">11</literal> <operator>-</operator> <call><name>hi0bits</name><argument_list>(<argument><expr><name><name>bits</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">32</literal> <operator>-</operator> <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>L</name><index>[<expr><name>_0</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>bits</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name>j</name> <operator>&amp;</operator> <literal type="number">0xfffff</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>j</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">20</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>L</name><index>[<expr><name>_1</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>bits</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>i</name> <operator>|</operator> <name><name>bits</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name>j</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffffffffL</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>L</name><index>[<expr><literal type="number">2</literal><operator>+</operator><name>_0</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>L</name><index>[<expr><literal type="number">2</literal><operator>+</operator><name>_1</name></expr>]</index></name> <operator>=</operator> <name><name>bits</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>ULong</name><operator>)</operator><literal type="number">1L</literal> <operator>&lt;&lt;</operator> <name>j</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>STRTOG_Infinite</name></expr>:</case>
<expr_stmt><expr><name><name>L</name><index>[<expr><name>_0</name></expr>]</index></name> <operator>=</operator> <name><name>L</name><index>[<expr><literal type="number">2</literal><operator>+</operator><name>_0</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x7ff00000</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>L</name><index>[<expr><name>_1</name></expr>]</index></name> <operator>=</operator> <name><name>L</name><index>[<expr><literal type="number">2</literal><operator>+</operator><name>_1</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>STRTOG_NaN</name></expr>:</case>
<expr_stmt><expr><name><name>L</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>L</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>d_QNAN0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>L</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>L</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>d_QNAN1</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>STRTOG_NaNbits</name></expr>:</case>
<expr_stmt><expr><name><name>L</name><index>[<expr><name>_1</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>bits</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">21</literal> <operator>|</operator> <name><name>bits</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>ULong</name><operator>)</operator><literal type="number">0xffffffffL</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>L</name><index>[<expr><name>_0</name></expr>]</index></name> <operator>=</operator> <name><name>bits</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">21</literal> <operator>|</operator> <name><name>bits</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">11</literal>
<operator>|</operator> <operator>(</operator><name>ULong</name><operator>)</operator><literal type="number">0x7ff00000L</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>L</name><index>[<expr><literal type="number">2</literal><operator>+</operator><name>_1</name></expr>]</index></name> <operator>=</operator> <name><name>bits</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>L</name><index>[<expr><literal type="number">2</literal><operator>+</operator><name>_0</name></expr>]</index></name> <operator>=</operator> <name><name>bits</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|</operator> <operator>(</operator><name>ULong</name><operator>)</operator><literal type="number">0x7ff00000L</literal></expr>;</expr_stmt>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&amp;</operator> <name>STRTOG_Neg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>L</name><index>[<expr><name>_0</name></expr>]</index></name> <operator>|=</operator> <literal type="number">0x80000000L</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>L</name><index>[<expr><literal type="number">2</literal><operator>+</operator><name>_0</name></expr>]</index></name> <operator>|=</operator> <literal type="number">0x80000000L</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KR_headers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>strtordd</name><parameter_list>(<parameter><decl><type><name>s</name></type></decl></parameter>, <parameter><decl><type><name>sp</name></type></decl></parameter>, <parameter><decl><type><name>rounding</name></type></decl></parameter>, <parameter><decl><type><name>dd</name></type></decl></parameter>)</parameter_list> <decl_stmt><decl><type><name>CONST</name> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>sp</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>rounding</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>dd</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
strtordd<parameter_list>(<parameter><decl><type><name>CONST</name> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>sp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rounding</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>dd</name></decl></parameter>)</parameter_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Sudden_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>FPI</name></type> <name>fpi0</name> <init>= <expr><block>{ <expr><literal type="number">106</literal></expr>, <expr><literal type="number">1</literal><operator>-</operator><literal type="number">1023</literal></expr>, <expr><literal type="number">2046</literal><operator>-</operator><literal type="number">1023</literal><operator>-</operator><literal type="number">106</literal><operator>+</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>static</specifier> <name>FPI</name></type> <name>fpi0</name> <init>= <expr><block>{ <expr><literal type="number">106</literal></expr>, <expr><literal type="number">1</literal><operator>-</operator><literal type="number">1023</literal><operator>-</operator><literal type="number">53</literal><operator>+</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2046</literal><operator>-</operator><literal type="number">1023</literal><operator>-</operator><literal type="number">106</literal><operator>+</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>FPI</name> <modifier>*</modifier></type><name>fpi</name></decl>, <decl><type ref="prev"/><name>fpi1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULong</name></type> <name><name>bits</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Long</name></type> <name>exp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fpi</name> <operator>=</operator> <operator>&amp;</operator><name>fpi0</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rounding</name> <operator>!=</operator> <name>FPI_Round_near</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fpi1</name> <operator>=</operator> <name>fpi0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fpi1</name><operator>.</operator><name>rounding</name></name> <operator>=</operator> <name>rounding</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fpi</name> <operator>=</operator> <operator>&amp;</operator><name>fpi1</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>strtodg</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>fpi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>exp</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ULtodd</name><argument_list>(<argument><expr><operator>(</operator><name>ULong</name><operator>*</operator><operator>)</operator><name>dd</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><name>exp</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>k</name></expr>;</return>
</block_content>}</block></function>
</unit>
