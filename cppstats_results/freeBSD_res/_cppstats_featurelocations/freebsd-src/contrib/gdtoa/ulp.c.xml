<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/gdtoa/ulp.c">






























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gdtoaimp.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>double</name></type>
<name>ulp</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KR_headers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list> <name>U</name> <modifier>*</modifier><name>x</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>U</name> <operator>*</operator><name>x</name><operator>)</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr><name>Long</name> <name>L</name></expr>;
<expr><name>U</name> <name>a</name></expr>;

<expr><name>L</name> <operator>=</operator> <operator>(</operator><call><name>word0</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Exp_mask</name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>P</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>Exp_msk1</name></expr>;
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>Sudden_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>L</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IBM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>L</name> <operator>|=</operator> <name>Exp_msk1</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>L</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>word1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>Sudden_Underflow</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt>
<if_stmt><else>else <block>{<block_content>
<expr_stmt><expr><name>L</name> <operator>=</operator> <operator>-</operator><name>L</name> <operator>&gt;&gt;</operator> <name>Exp_shift</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>L</name> <operator>&lt;</operator> <name>Exp_shift</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0x80000</literal> <operator>&gt;&gt;</operator> <name>L</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>word1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>L</name> <operator>-=</operator> <name>Exp_shift</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>word1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call> <operator>=</operator> <ternary><condition><expr><name>L</name> <operator>&gt;=</operator> <literal type="number">31</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">31</literal> <operator>-</operator> <name>L</name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</return>
}
</unit>
