<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/gdtoa/gdtoa.c">






























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gdtoaimp.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>Bigint</name> <modifier>*</modifier></type>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KR_headers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>bitstob</name><parameter_list>(<parameter><decl><type><name>bits</name></type></decl></parameter>, <parameter><decl><type><name>nbits</name></type></decl></parameter>, <parameter><decl><type><name>bbits</name></type></decl></parameter>)</parameter_list> <decl_stmt><decl><type><name>ULong</name> <modifier>*</modifier></type><name>bits</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>nbits</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>bbits</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
bitstob<parameter_list>(<parameter><decl><type><name>ULong</name> <modifier>*</modifier></type><name>bits</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nbits</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bbits</name></decl></parameter>)</parameter_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Bigint</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULong</name> <modifier>*</modifier></type><name>be</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>x</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>x0</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>ULbits</name></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while<condition>(<expr><name>i</name> <operator>&lt;</operator> <name>nbits</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>Pack_32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>k</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>Balloc</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>be</name> <operator>=</operator> <name>bits</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>nbits</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name>kshift</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x0</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>x</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>bits</name> <operator>&amp;</operator> <name>ALL_ON</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Pack_16</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>*</operator><name>x</name><operator>++</operator> <operator>=</operator> <operator>(</operator><operator>*</operator><name>bits</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <name>ALL_ON</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block> while<condition>(<expr><operator>++</operator><name>bits</name> <operator>&lt;=</operator> <name>be</name></expr>)</condition>;</do>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>x</name> <operator>-</operator> <name>x0</name></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>!</operator><name><name>x0</name><index>[<expr><operator>--</operator><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>i</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>wds</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>bbits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<goto>goto <name>ret</name>;</goto>
</block_content>}</block></if></if_stmt></block_content></block></while>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>wds</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>bbits</name> <operator>=</operator> <name>i</name><operator>*</operator><name>ULbits</name> <operator>+</operator> <literal type="number">32</literal> <operator>-</operator> <call><name>hi0bits</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>ret</name>:</label>
<return>return <expr><name>b</name></expr>;</return>
</block_content>}</block></function>



































<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type>
<name>gdtoa</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KR_headers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument_list>(<argument><expr><name>fpi</name></expr></argument>, <argument><expr><name>be</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><name>kindp</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>ndigits</name></expr></argument>, <argument><expr><name>decpt</name></expr></argument>, <argument><expr><name>rve</name></expr></argument>)</argument_list>
<name>FPI</name> <modifier>*</modifier><name>fpi</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>be</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>ULong</name> <modifier>*</modifier></type><name>bits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>kindp</name></decl>, <decl><type ref="prev"/><name>mode</name></decl>, <decl><type ref="prev"/><name>ndigits</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>decpt</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>rve</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>FPI</name> <operator>*</operator><name>fpi</name><operator>,</operator> <name>int</name> <name>be</name><operator>,</operator> <name>ULong</name> <operator>*</operator><name>bits</name><operator>,</operator> <name>int</name> <operator>*</operator><name>kindp</name><operator>,</operator> <name>int</name> <name>mode</name><operator>,</operator> <name>int</name> <name>ndigits</name><operator>,</operator> <name>int</name> <operator>*</operator><name>decpt</name><operator>,</operator> <name>char</name> <operator>*</operator><operator>*</operator><name>rve</name><operator>)</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{



































<expr><name>int</name> <name>bbits</name></expr>, <expr><name>b2</name></expr>, <expr><name>b5</name></expr>, <expr><name>be0</name></expr>, <expr><name>dig</name></expr>, <expr><name>i</name></expr>, <expr><name>ieps</name></expr>, <expr><name>ilim</name></expr>, <expr><name>ilim0</name></expr>, <expr><name>ilim1</name></expr>, <expr><name>inex</name></expr>;
<expr><name>int</name> <name>j</name></expr>, <expr><name>j1</name></expr>, <expr><name>k</name></expr>, <expr><name>k0</name></expr>, <expr><name>k_check</name></expr>, <expr><name>kind</name></expr>, <expr><name>leftright</name></expr>, <expr><name>m2</name></expr>, <expr><name>m5</name></expr>, <expr><name>nbits</name></expr>;
<expr><name>int</name> <name>rdir</name></expr>, <expr><name>s2</name></expr>, <expr><name>s5</name></expr>, <expr><name>spec_case</name></expr>, <expr><name>try_quick</name></expr>;
<expr><name>Long</name> <name>L</name></expr>;
<expr><name>Bigint</name> <operator>*</operator><name>b</name></expr>, <expr><operator>*</operator><name>b1</name></expr>, <expr><operator>*</operator><name>delta</name></expr>, <expr><operator>*</operator><name>mlo</name></expr>, <expr><operator>*</operator><name>mhi</name></expr>, <expr><operator>*</operator><name>mhi1</name></expr>, <expr><operator>*</operator><name>S</name></expr>;
<expr><name>double</name> <name>d2</name></expr>, <expr><name>ds</name></expr>;
<expr><name>char</name> <operator>*</operator><name>s</name></expr>, <expr><operator>*</operator><name>s0</name></expr>;
<expr><name>U</name> <name>d</name></expr>, <expr><name>eps</name></expr>;

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MULTIPLE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>dtoa_result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>freedtoa</name><argument_list>(<argument><expr><name>dtoa_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dtoa_result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt/></block_content></block></if></if_stmt>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<name>inex</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>kind</name> <operator>=</operator> <operator>*</operator><name>kindp</name> <operator>&amp;=</operator> <operator>~</operator><name>STRTOG_Inexact</name></expr>;</expr_stmt>
<switch>switch<condition>(<expr><name>kind</name> <operator>&amp;</operator> <name>STRTOG_Retmask</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>STRTOG_Zero</name></expr>:</case>
<goto>goto <name>ret_zero</name>;</goto>
<case>case <expr><name>STRTOG_Normal</name></expr>:</case>
<case>case <expr><name>STRTOG_Denormal</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>STRTOG_Infinite</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>decpt</name> <operator>=</operator> <operator>-</operator><literal type="number">32768</literal></expr>;</expr_stmt>
<return>return <expr><call><name>nrv_alloc</name><argument_list>(<argument><expr><literal type="string">"Infinity"</literal></expr></argument>, <argument><expr><name>rve</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>STRTOG_NaN</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>decpt</name> <operator>=</operator> <operator>-</operator><literal type="number">32768</literal></expr>;</expr_stmt>
<return>return <expr><call><name>nrv_alloc</name><argument_list>(<argument><expr><literal type="string">"NaN"</literal></expr></argument>, <argument><expr><name>rve</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</return>
<default>default:</default>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>bitstob</name><argument_list>(<argument><expr><name>bits</name></expr></argument>, <argument><expr><name>nbits</name> <operator>=</operator> <name><name>fpi</name><operator>-&gt;</operator><name>nbits</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>be0</name> <operator>=</operator> <name>be</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>(</operator><name>i</name> <operator>=</operator> <call><name>trailz</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rshift</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>be</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bbits</name> <operator>-=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>b</name><operator>-&gt;</operator><name>wds</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>ret_zero</name>:</label>
<expr_stmt><expr><operator>*</operator><name>decpt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><call><name>nrv_alloc</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>, <argument><expr><name>rve</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>b2d</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>be</name> <operator>+</operator> <name>bbits</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call> <operator>&amp;=</operator> <name>Frac_mask1</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call> <operator>|=</operator> <name>Exp_11</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IBM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>( <expr><operator>(</operator><name>j</name> <operator>=</operator> <literal type="number">11</literal> <operator>-</operator> <call><name>hi0bits</name><argument_list>(<argument><expr><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Frac_mask</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call> <operator>/=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>j</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IBM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>i</name> <operator>&lt;&lt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>j</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>ds</name> <operator>=</operator> <operator>(</operator><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1.5</literal><operator>)</operator><operator>*</operator><literal type="number">0.289529654602168</literal> <operator>+</operator> <literal type="number">0.1760912590558</literal> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">0.301029995663981</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>j</name> <operator>=</operator> <name>i</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>j</name> <operator>=</operator> <operator>-</operator><name>j</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>j</name> <operator>-=</operator> <literal type="number">1077</literal><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ds</name> <operator>+=</operator> <name>j</name> <operator>*</operator> <literal type="number">7e-17</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>ds</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ds</name> <operator>&lt;</operator> <literal type="number">0.</literal> <operator>&amp;&amp;</operator> <name>ds</name> <operator>!=</operator> <name>k</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>k</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>k_check</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IBM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>be</name> <operator>+</operator> <name>bbits</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>(</operator><name>j1</name> <operator>=</operator> <name>j</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>!=</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call> <operator>*=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>j1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call> <operator>+=</operator> <name>j</name> <operator>&lt;&lt;</operator> <name>Exp_shift</name> <operator>-</operator> <literal type="number">2</literal> <operator>&amp;</operator> <name>Exp_mask</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call> <operator>+=</operator> <operator>(</operator><name>be</name> <operator>+</operator> <name>bbits</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>Exp_shift</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>k</name> <operator>&lt;=</operator> <name>Ten_pmax</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>tens</name><index>[<expr><name>k</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>k</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>k_check</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>bbits</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>b2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s2</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>b2</name> <operator>=</operator> <operator>-</operator><name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>b5</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s5</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s2</name> <operator>+=</operator> <name>k</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>b2</name> <operator>-=</operator> <name>k</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b5</name> <operator>=</operator> <operator>-</operator><name>k</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s5</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mode</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>mode</name></expr></argument> &gt;</argument_list></name> <literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>try_quick</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&gt;</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mode</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>try_quick</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">4</literal> <operator>-</operator> <name>Emin</name> <operator>||</operator> <name>i</name> <operator>&lt;</operator> <name>Emin</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>try_quick</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>leftright</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ilim</name> <operator>=</operator> <name>ilim1</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>mode</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>nbits</name> <operator>*</operator> <literal type="number">.30103</literal><operator>)</operator> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ndigits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name>leftright</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<case>case <expr><literal type="number">4</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>ndigits</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ndigits</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ilim</name> <operator>=</operator> <name>ilim1</name> <operator>=</operator> <name>i</name> <operator>=</operator> <name>ndigits</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><name>leftright</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<case>case <expr><literal type="number">5</literal></expr>:</case>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>ndigits</name> <operator>+</operator> <name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ilim</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ilim1</name> <operator>=</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>s0</name> <operator>=</operator> <call><name>rv_alloc</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator><name>rdir</name> <operator>=</operator> <name><name>fpi</name><operator>-&gt;</operator><name>rounding</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>rdir</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rdir</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>kind</name> <operator>&amp;</operator> <name>STRTOG_Neg</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rdir</name> <operator>=</operator> <literal type="number">3</literal> <operator>-</operator> <name>rdir</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>ilim</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ilim</name> <operator>&lt;=</operator> <name>Quick_max</name> <operator>&amp;&amp;</operator> <name>try_quick</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>rdir</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>IMPRECISE_INEXACT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <name>k</name> <operator>==</operator> <literal type="number">0</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition> <block>{<block_content>



<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>d2</name> <operator>=</operator> <call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IBM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>( <expr><operator>(</operator><name>j</name> <operator>=</operator> <literal type="number">11</literal> <operator>-</operator> <call><name>hi0bits</name><argument_list>(<argument><expr><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>Frac_mask</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call> <operator>/=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>j</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>k0</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ilim0</name> <operator>=</operator> <name>ilim</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ieps</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ds</name> <operator>=</operator> <name><name>tens</name><index>[<expr><name>k</name><operator>&amp;</operator><literal type="number">0xf</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>k</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&amp;</operator> <name>Bletch</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>j</name> <operator>&amp;=</operator> <name>Bletch</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call> <operator>/=</operator> <name><name>bigtens</name><index>[<expr><name>n_bigtens</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ieps</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for<control>(<init>;</init> <condition><expr><name>j</name></expr>;</condition> <incr><expr><name>j</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ieps</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>ds</name> <operator>*=</operator> <name><name>bigtens</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></for>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>ds</name> <operator>=</operator> <literal type="number">1.</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>(</operator><name>j1</name> <operator>=</operator> <operator>-</operator><name>k</name><operator>)</operator> <operator>!=</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call> <operator>*=</operator> <name><name>tens</name><index>[<expr><name>j1</name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <name>j1</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</init> <condition><expr><name>j</name></expr>;</condition> <incr><expr><name>j</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ieps</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call> <operator>*=</operator> <name><name>bigtens</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>k_check</name> <operator>&amp;&amp;</operator> <call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1.</literal> <operator>&amp;&amp;</operator> <name>ilim</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ilim1</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fast_failed</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ilim</name> <operator>=</operator> <name>ilim1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call> <operator>*=</operator> <literal type="number">10.</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ieps</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>eps</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>ieps</name><operator>*</operator><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">7.</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>word0</name><argument_list>(<argument><expr><operator>&amp;</operator><name>eps</name></expr></argument>)</argument_list></call> <operator>-=</operator> <operator>(</operator><name>P</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>Exp_msk1</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ilim</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>S</name> <operator>=</operator> <name>mhi</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call> <operator>-=</operator> <literal type="number">5.</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>eps</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>one_digit</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <operator>-</operator><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>eps</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>no_digits</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>fast_failed</name>;</goto>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>No_leftright</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>leftright</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>eps</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>ds</name><operator>*</operator><literal type="number">0.5</literal><operator>/</operator><name><name>tens</name><index>[<expr><name>ilim</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>eps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>L</name> <operator>=</operator> <operator>(</operator><name>Long</name><operator>)</operator><operator>(</operator><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call><operator>/</operator><name>ds</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call> <operator>-=</operator> <name>L</name><operator>*</operator><name>ds</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <literal type="char">'0'</literal> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name>L</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>eps</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>inex</name> <operator>=</operator> <name>STRTOG_Inexlo</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>ret1</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ds</name> <operator>-</operator> <call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>eps</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bump_up</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>i</name> <operator>&gt;=</operator> <name>ilim</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>eps</name></expr></argument>)</argument_list></call> <operator>*=</operator> <literal type="number">10.</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call> <operator>*=</operator> <literal type="number">10.</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>eps</name></expr></argument>)</argument_list></call> <operator>*=</operator> <name><name>tens</name><index>[<expr><name>ilim</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init><condition>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call> <operator>*=</operator> <literal type="number">10.</literal></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>( <expr><operator>(</operator><name>L</name> <operator>=</operator> <operator>(</operator><name>Long</name><operator>)</operator><operator>(</operator><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call><operator>/</operator><name>ds</name><operator>)</operator><operator>)</operator> <operator>!=</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call> <operator>-=</operator> <name>L</name><operator>*</operator><name>ds</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <literal type="char">'0'</literal> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name>L</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>ilim</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ds</name> <operator>*=</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>ds</name> <operator>+</operator> <call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>eps</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bump_up</name>;</goto></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>ds</name> <operator>-</operator> <call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>eps</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>inex</name> <operator>=</operator> <name>STRTOG_Inexlo</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>clear_trailing0</name>;</goto>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>No_leftright</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<label><name>fast_failed</name>:</label>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>s0</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>d2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <name>k0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ilim</name> <operator>=</operator> <name>ilim0</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>be</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>k</name> <operator>&lt;=</operator> <name>Int_max</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ds</name> <operator>=</operator> <name><name>tens</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ndigits</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ilim</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>S</name> <operator>=</operator> <name>mhi</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ilim</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">5</literal><operator>*</operator><name>ds</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>no_digits</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>one_digit</name>;</goto>
</block_content>}</block></if></if_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init><condition>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call> <operator>*=</operator> <literal type="number">10.</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>L</name> <operator>=</operator> <call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>ds</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call> <operator>-=</operator> <name>L</name><operator>*</operator><name>ds</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Check_FLT_ROUNDS</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>L</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call> <operator>+=</operator> <name>ds</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <literal type="char">'0'</literal> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name>L</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0.</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>ilim</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>rdir</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>rdir</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bump_up</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>inex</name> <operator>=</operator> <name>STRTOG_Inexlo</name></expr>;</expr_stmt>
<goto>goto <name>ret1</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call> <operator>+=</operator> <call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ROUND_BIASED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>ds</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>ds</name> <operator>||</operator> <operator>(</operator><call><name>dval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ds</name> <operator>&amp;&amp;</operator> <name>L</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<label><name>bump_up</name>:</label>
<expr_stmt><expr><name>inex</name> <operator>=</operator> <name>STRTOG_Inexhi</name></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>*</operator><operator>--</operator><name>s</name> <operator>==</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>s0</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt></block_content></block></while>
<expr_stmt><expr><operator>++</operator><operator>*</operator><name>s</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>inex</name> <operator>=</operator> <name>STRTOG_Inexlo</name></expr>;</expr_stmt>
<label><name>clear_trailing0</name>:</label>
<while>while<condition>(<expr><operator>*</operator><operator>--</operator><name>s</name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition><block>{<block_content/>}</block></while>
<expr_stmt><expr><operator>++</operator><name>s</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<goto>goto <name>ret1</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>m2</name> <operator>=</operator> <name>b2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>m5</name> <operator>=</operator> <name>b5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mhi</name> <operator>=</operator> <name>mlo</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>leftright</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>nbits</name> <operator>-</operator> <name>bbits</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>be</name> <operator>-</operator> <name>i</name><operator>++</operator> <operator>&lt;</operator> <name><name>fpi</name><operator>-&gt;</operator><name>emin</name></name> <operator>&amp;&amp;</operator> <name>mode</name> <operator>!=</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>mode</name> <operator>!=</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>be</name> <operator>-</operator> <name><name>fpi</name><operator>-&gt;</operator><name>emin</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>ilim</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ilim</name> <operator>&lt;</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>small_ilim</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>mode</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<label><name>small_ilim</name>:</label>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>ilim</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>m5</name> <operator>&gt;=</operator> <name>j</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>m5</name> <operator>-=</operator> <name>j</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>s5</name> <operator>+=</operator> <name>j</name> <operator>-=</operator> <name>m5</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b5</name> <operator>+=</operator> <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name>m5</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>=</operator> <name>ilim</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>m2</name> <operator>-=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>b2</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s2</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mhi</name> <operator>=</operator> <call><name>i2b</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>m2</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>s2</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <ternary><condition><expr><name>m2</name> <operator>&lt;</operator> <name>s2</name></expr> ?</condition><then> <expr><name>m2</name></expr> </then><else>: <expr><name>s2</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>b2</name> <operator>-=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>m2</name> <operator>-=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s2</name> <operator>-=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>b5</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>leftright</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>m5</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mhi</name> <operator>=</operator> <call><name>pow5mult</name><argument_list>(<argument><expr><name>mhi</name></expr></argument>, <argument><expr><name>m5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b1</name> <operator>=</operator> <call><name>mult</name><argument_list>(<argument><expr><name>mhi</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>b1</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><operator>(</operator><name>j</name> <operator>=</operator> <name>b5</name> <operator>-</operator> <name>m5</name><operator>)</operator> <operator>!=</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>pow5mult</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>pow5mult</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>b5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>S</name> <operator>=</operator> <call><name>i2b</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s5</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>S</name> <operator>=</operator> <call><name>pow5mult</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>s5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<expr_stmt><expr><name>spec_case</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>bbits</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>be0</name> <operator>&gt;</operator> <name><name>fpi</name><operator>-&gt;</operator><name>emin</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>b2</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>s2</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>spec_case</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>








<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><operator>(</operator><ternary><condition><expr><name>s5</name></expr> ?</condition><then> <expr><call><name>hi0bits</name><argument_list>(<argument><expr><name><name>S</name><operator>-&gt;</operator><name>x</name><index>[<expr><name><name>S</name><operator>-&gt;</operator><name>wds</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>ULbits</name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary><operator>)</operator> <operator>-</operator> <name>s2</name> <operator>-</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <name>kmask</name></expr>;</expr_stmt>
<expr_stmt><expr><name>m2</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>b2</name> <operator>+=</operator> <name>i</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>lshift</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>b2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>s2</name> <operator>+=</operator> <name>i</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>S</name> <operator>=</operator> <call><name>lshift</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>k_check</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>cmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>S</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>k</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>multadd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>leftright</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mhi</name> <operator>=</operator> <call><name>multadd</name><argument_list>(<argument><expr><name>mhi</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ilim</name> <operator>=</operator> <name>ilim1</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ilim</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>mode</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ilim</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>cmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>S</name> <operator>=</operator> <call><name>multadd</name><argument_list>(<argument><expr><name>S</name></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<label><name>no_digits</name>:</label>
<expr_stmt><expr><name>k</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal> <operator>-</operator> <name>ndigits</name></expr>;</expr_stmt>
<expr_stmt><expr><name>inex</name> <operator>=</operator> <name>STRTOG_Inexlo</name></expr>;</expr_stmt>
<goto>goto <name>ret</name>;</goto>
</block_content>}</block></if></if_stmt>
<label><name>one_digit</name>:</label>
<expr_stmt><expr><name>inex</name> <operator>=</operator> <name>STRTOG_Inexhi</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <literal type="char">'1'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt>
<goto>goto <name>ret</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>leftright</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>m2</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mhi</name> <operator>=</operator> <call><name>lshift</name><argument_list>(<argument><expr><name>mhi</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>





<expr_stmt><expr><name>mlo</name> <operator>=</operator> <name>mhi</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>spec_case</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mhi</name> <operator>=</operator> <call><name>Balloc</name><argument_list>(<argument><expr><name><name>mhi</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Bcopy</name><argument_list>(<argument><expr><name>mhi</name></expr></argument>, <argument><expr><name>mlo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mhi</name> <operator>=</operator> <call><name>lshift</name><argument_list>(<argument><expr><name>mhi</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init><condition>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>dig</name> <operator>=</operator> <call><name>quorem</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>S</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>



<expr_stmt><expr><name>j</name> <operator>=</operator> <call><name>cmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>mlo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>delta</name> <operator>=</operator> <call><name>diff</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>mhi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>j1</name> <operator>=</operator> <ternary><condition><expr><name><name>delta</name><operator>-&gt;</operator><name>sign</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><call><name>cmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ROUND_BIASED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>j1</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>mode</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>bits</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>rdir</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dig</name> <operator>==</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>round_9_up</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>wds</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>inex</name> <operator>=</operator> <name>STRTOG_Inexlo</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>dig</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>inex</name> <operator>=</operator> <name>STRTOG_Inexhi</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <name>dig</name></expr>;</expr_stmt>
<goto>goto <name>ret</name>;</goto>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>j</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>mode</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ROUND_BIASED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>bits</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>rdir</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>wds</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>rdir</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>inex</name> <operator>=</operator> <name>STRTOG_Inexlo</name></expr>;</expr_stmt>
<goto>goto <name>accept</name>;</goto>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><call><name>cmp</name><argument_list>(<argument><expr><name>S</name></expr></argument>,<argument><expr><name>mhi</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <name>dig</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mhi1</name> <operator>=</operator> <call><name>multadd</name><argument_list>(<argument><expr><name>mhi</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mlo</name> <operator>==</operator> <name>mhi</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mlo</name> <operator>=</operator> <name>mhi1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>mhi</name> <operator>=</operator> <name>mhi1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>multadd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dig</name> <operator>=</operator> <call><name>quorem</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>S</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>dig</name><operator>++</operator> <operator>==</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>round_9_up</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>inex</name> <operator>=</operator> <name>STRTOG_Inexhi</name></expr>;</expr_stmt>
<goto>goto <name>accept</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>j1</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>lshift</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>j1</name> <operator>=</operator> <call><name>cmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ROUND_BIASED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<decl_stmt><expr><name>j1</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>j1</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>j1</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>dig</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<operator>&amp;&amp;</operator> <name>dig</name><operator>++</operator> <operator>==</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>round_9_up</name>;</goto></block_content></block></if></if_stmt>
<expr><name>inex</name> <operator>=</operator> <name>STRTOG_Inexhi</name></expr></condition><empty_stmt>;</empty_stmt></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>wds</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>inex</name> <operator>=</operator> <name>STRTOG_Inexlo</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<label><name>accept</name>:</label>
<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <name>dig</name></expr>;</expr_stmt>
<goto>goto <name>ret</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>j1</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>rdir</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dig</name> <operator>==</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>
<label><name>round_9_up</name>:</label>
<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <literal type="char">'9'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>inex</name> <operator>=</operator> <name>STRTOG_Inexhi</name></expr>;</expr_stmt>
<goto>goto <name>roundoff</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>inex</name> <operator>=</operator> <name>STRTOG_Inexhi</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <name>dig</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>ret</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <name>dig</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>ilim</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>multadd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mlo</name> <operator>==</operator> <name>mhi</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mlo</name> <operator>=</operator> <name>mhi</name> <operator>=</operator> <call><name>multadd</name><argument_list>(<argument><expr><name>mhi</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>mlo</name> <operator>=</operator> <call><name>multadd</name><argument_list>(<argument><expr><name>mlo</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mhi</name> <operator>=</operator> <call><name>multadd</name><argument_list>(<argument><expr><name>mhi</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init><condition>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <name>dig</name> <operator>=</operator> <call><name>quorem</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>S</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>ilim</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>multadd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for></block_content></block></else></if_stmt>



<if_stmt><if>if <condition>(<expr><name>rdir</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>rdir</name> <operator>==</operator> <literal type="number">2</literal> <operator>||</operator> <operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>wds</name></name> <operator>&lt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>b</name><operator>-&gt;</operator><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>chopzeros</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>roundoff</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>lshift</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <call><name>cmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ROUND_BIASED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>j</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>dig</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<label><name>roundoff</name>:</label>
<expr_stmt><expr><name>inex</name> <operator>=</operator> <name>STRTOG_Inexhi</name></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>*</operator><operator>--</operator><name>s</name> <operator>==</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>s0</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator> <operator>=</operator> <literal type="char">'1'</literal></expr>;</expr_stmt>
<goto>goto <name>ret</name>;</goto>
</block_content>}</block></if></if_stmt></block_content></block></while>
<expr_stmt><expr><operator>++</operator><operator>*</operator><name>s</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<label><name>chopzeros</name>:</label>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>wds</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>b</name><operator>-&gt;</operator><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>inex</name> <operator>=</operator> <name>STRTOG_Inexlo</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while<condition>(<expr><operator>*</operator><operator>--</operator><name>s</name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition><block>{<block_content/>}</block></while>
<expr_stmt><expr><operator>++</operator><name>s</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt></block_content></block></if></if_stmt>
<label><name>ret</name>:</label>
<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mhi</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mlo</name> <operator>&amp;&amp;</operator> <name>mlo</name> <operator>!=</operator> <name>mhi</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name>mlo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name>mhi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<label><name>ret1</name>:</label>
<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>decpt</name> <operator>=</operator> <name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rve</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>rve</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>kindp</name> <operator>|=</operator> <name>inex</name></expr>;</expr_stmt>
<return>return <expr><name>s0</name></expr>;</return>
}
</unit>
