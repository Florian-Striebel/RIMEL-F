<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/gdtoa/gethex.c">






























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gdtoaimp.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_LOCALE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"locale.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KR_headers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>gethex</name><parameter_list>(<parameter><decl><type><name>sp</name></type></decl></parameter>, <parameter><decl><type><name>fpi</name></type></decl></parameter>, <parameter><decl><type><name>exp</name></type></decl></parameter>, <parameter><decl><type><name>bp</name></type></decl></parameter>, <parameter><decl><type><name>sign</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>CONST</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>sp</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>FPI</name> <modifier>*</modifier></type><name>fpi</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>Long</name> <modifier>*</modifier></type><name>exp</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>Bigint</name> <modifier>*</modifier><modifier>*</modifier></type><name>bp</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>sign</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
gethex<parameter_list>( <parameter><decl><type><name>CONST</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>sp</name></decl></parameter>, <parameter><decl><type><name>FPI</name> <modifier>*</modifier></type><name>fpi</name></decl></parameter>, <parameter><decl><type><name>Long</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>, <parameter><decl><type><name>Bigint</name> <modifier>*</modifier><modifier>*</modifier></type><name>bp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sign</name></decl></parameter>)</parameter_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<decl_stmt><decl><type><name>Bigint</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CONST</name> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>decpt</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s0</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>big</name></decl>, <decl><type ref="prev"/><name>esign</name></decl>, <decl><type ref="prev"/><name>havedig</name></decl>, <decl><type ref="prev"/><name>irv</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>n0</name></decl>, <decl><type ref="prev"/><name>nbits</name></decl>, <decl><type ref="prev"/><name>up</name></decl>, <decl><type ref="prev"/><name>zret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULong</name></type> <name>L</name></decl>, <decl><type ref="prev"/><name>lostbits</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Long</name></type> <name>e</name></decl>, <decl><type ref="prev"/><name>e1</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_LOCALE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NO_LOCALE_CACHE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>decimalpoint</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><call><name>localeconv</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>decimal_point</name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>decimalpoint</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>decimalpoint_cache</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>s0</name> <operator>=</operator> <name>decimalpoint_cache</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s0</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><call><name>localeconv</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>decimal_point</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>decimalpoint_cache</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>MALLOC</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s0</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>decimalpoint_cache</name></expr></argument>, <argument><expr><name>s0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s0</name> <operator>=</operator> <name>decimalpoint_cache</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>decimalpoint</name> <operator>=</operator> <name>s0</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>hexdig</name><index>[<expr><literal type="char">'0'</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>hexdig_init_D2A</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>bp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>havedig</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s0</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>CONST</name> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>sp</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<while>while<condition>(<expr><name><name>s0</name><index>[<expr><name>havedig</name></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>havedig</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>s0</name> <operator>+=</operator> <name>havedig</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>s0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>decpt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>zret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hexdig</name><index>[<expr><operator>*</operator><name>s</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>havedig</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>zret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_LOCALE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>decimalpoint</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>decimalpoint</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>pcheck</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>decpt</name> <operator>=</operator> <name>s</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>pcheck</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>decpt</name> <operator>=</operator> <operator>++</operator><name>s</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>hexdig</name><index>[<expr><operator>*</operator><name>s</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>pcheck</name>;</goto></block_content></block></if></if_stmt>
<while>while<condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name><name>hexdig</name><index>[<expr><operator>*</operator><name>s</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>zret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>havedig</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s0</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<while>while<condition>(<expr><name><name>hexdig</name><index>[<expr><operator>*</operator><name>s</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_LOCALE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <operator>*</operator><name>decimalpoint</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>decpt</name></expr>)</condition> <block>{<block_content>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name><name>decimalpoint</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>decimalpoint</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>pcheck</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>decpt</name> <operator>=</operator> <name>s</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>decpt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>decpt</name> <operator>=</operator> <operator>++</operator><name>s</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<while>while<condition>(<expr><name><name>hexdig</name><index>[<expr><operator>*</operator><name>s</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>decpt</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>-</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>Long</name><operator>)</operator><operator>(</operator><name>s</name><operator>-</operator><name>decpt</name><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<label><name>pcheck</name>:</label>
<expr_stmt><expr><name>s1</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>big</name> <operator>=</operator> <name>esign</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<switch>switch<condition>(<expr><operator>*</operator><name>s</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'p'</literal></expr>:</case>
<case>case <expr><literal type="char">'P'</literal></expr>:</case>
<switch>switch<condition>(<expr><operator>*</operator><operator>++</operator><name>s</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'-'</literal></expr>:</case>
<expr_stmt><expr><name>esign</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<case>case <expr><literal type="char">'+'</literal></expr>:</case>
<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <name><name>hexdig</name><index>[<expr><operator>*</operator><name>s</name></expr>]</index></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>n</name> <operator>&gt;</operator> <literal type="number">0x19</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>s1</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>e1</name> <operator>=</operator> <name>n</name> <operator>-</operator> <literal type="number">0x10</literal></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <name><name>hexdig</name><index>[<expr><operator>*</operator><operator>++</operator><name>s</name></expr>]</index></name><operator>)</operator> <operator>!=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>n</name> <operator>&lt;=</operator> <literal type="number">0x19</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>e1</name> <operator>&amp;</operator> <literal type="number">0xf8000000</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>big</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>e1</name> <operator>=</operator> <literal type="number">10</literal><operator>*</operator><name>e1</name> <operator>+</operator> <name>n</name> <operator>-</operator> <literal type="number">0x10</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>esign</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>e1</name> <operator>=</operator> <operator>-</operator><name>e1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>e</name> <operator>+=</operator> <name>e1</name></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><operator>*</operator><name>sp</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>s</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>havedig</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>sp</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>s0</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>zret</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>STRTOG_Zero</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>big</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>esign</name></expr>)</condition> <block>{<block_content>
<switch>switch<condition>(<expr><name><name>fpi</name><operator>-&gt;</operator><name>rounding</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FPI_Round_up</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>sign</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<goto>goto <name>ret_tiny</name>;</goto>
<case>case <expr><name>FPI_Round_down</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sign</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<goto>goto <name>ret_tiny</name>;</goto>
</block_content>}</block></switch>
<goto>goto <name>retz</name>;</goto>
<label><name>ret_tiny</name>:</label>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>Balloc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>wds</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>dret</name>;</goto>
</block_content>}</block></if></if_stmt>
<switch>switch<condition>(<expr><name><name>fpi</name><operator>-&gt;</operator><name>rounding</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FPI_Round_near</name></expr>:</case>
<goto>goto <name>ovfl1</name>;</goto>
<case>case <expr><name>FPI_Round_up</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sign</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ovfl1</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>ret_big</name>;</goto>
<case>case <expr><name>FPI_Round_down</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>sign</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ovfl1</name>;</goto></block_content></block></if></if_stmt>
<goto>goto <name>ret_big</name>;</goto>
</block_content>}</block></switch>
<label><name>ret_big</name>:</label>
<expr_stmt><expr><name>nbits</name> <operator>=</operator> <name><name>fpi</name><operator>-&gt;</operator><name>nbits</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>n0</name> <operator>=</operator> <name>n</name> <operator>=</operator> <name>nbits</name> <operator>&gt;&gt;</operator> <name>kshift</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nbits</name> <operator>&amp;</operator> <name>kmask</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <name>n</name></expr><operator>,</operator> <expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
<expr_stmt><expr><operator>*</operator><name>bp</name> <operator>=</operator> <name>b</name> <operator>=</operator> <call><name>Balloc</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>wds</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n0</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>x</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>ALL_ON</name></expr>;</expr_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name>n0</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>x</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>ULbits</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>ULbits</name> <operator>-</operator> <operator>(</operator><name>nbits</name> <operator>&amp;</operator> <name>kmask</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>exp</name> <operator>=</operator> <name><name>fpi</name><operator>-&gt;</operator><name>emin</name></name></expr>;</expr_stmt>
<return>return <expr><name>STRTOG_Normal</name> <operator>|</operator> <name>STRTOG_Inexlo</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>s1</name> <operator>-</operator> <name>s0</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&gt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>kshift</name><operator>-</operator><literal type="number">2</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>n</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>Balloc</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>L</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_LOCALE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>decimalpoint</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<while>while<condition>(<expr><name>s1</name> <operator>&gt;</operator> <name>s0</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_LOCALE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>--</operator><name>s1</name> <operator>==</operator> <name><name>decimalpoint</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s1</name> <operator>-=</operator> <name>i</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>--</operator><name>s1</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>ULbits</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>x</name><operator>++</operator> <operator>=</operator> <name>L</name></expr>;</expr_stmt>
<expr_stmt><expr><name>L</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>L</name> <operator>|=</operator> <operator>(</operator><name><name>hexdig</name><index>[<expr><operator>*</operator><name>s1</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>x</name><operator>++</operator> <operator>=</operator> <name>L</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>wds</name></name> <operator>=</operator> <name>n</name> <operator>=</operator> <name>x</name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>ULbits</name><operator>*</operator><name>n</name> <operator>-</operator> <call><name>hi0bits</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nbits</name> <operator>=</operator> <name><name>fpi</name><operator>-&gt;</operator><name>nbits</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>lostbits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name>nbits</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>-=</operator> <name>nbits</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>any_on</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>lostbits</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>x</name><index>[<expr><name>k</name><operator>&gt;&gt;</operator><name>kshift</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>k</name> <operator>&amp;</operator> <name>kmask</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>lostbits</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>any_on</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>lostbits</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>rshift</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>n</name> <operator>&lt;</operator> <name>nbits</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name>nbits</name> <operator>-</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>lshift</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>&gt;</operator> <name><name>fpi</name><operator>-&gt;</operator><name>emax</name></name></expr>)</condition> <block>{<block_content>
<label><name>ovfl</name>:</label>
<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>ovfl1</name>:</label>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_ERRNO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>STRTOG_Infinite</name> <operator>|</operator> <name>STRTOG_Overflow</name> <operator>|</operator> <name>STRTOG_Inexhi</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>irv</name> <operator>=</operator> <name>STRTOG_Normal</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>&lt;</operator> <name><name>fpi</name><operator>-&gt;</operator><name>emin</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>irv</name> <operator>=</operator> <name>STRTOG_Denormal</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>fpi</name><operator>-&gt;</operator><name>emin</name></name> <operator>-</operator> <name>e</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <name>nbits</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>fpi</name><operator>-&gt;</operator><name>rounding</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FPI_Round_near</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>nbits</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>n</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <call><name>any_on</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>one_bit</name>;</goto></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FPI_Round_up</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sign</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>one_bit</name>;</goto></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FPI_Round_down</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>sign</name></expr>)</condition> <block>{<block_content>
<label><name>one_bit</name>:</label>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>wds</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<label><name>dret</name>:</label>
<expr_stmt><expr><operator>*</operator><name>bp</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>exp</name> <operator>=</operator> <name><name>fpi</name><operator>-&gt;</operator><name>emin</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_ERRNO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>STRTOG_Denormal</name> <operator>|</operator> <name>STRTOG_Inexhi</name>
<operator>|</operator> <name>STRTOG_Underflow</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>Bfree</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>retz</name>:</label>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_ERRNO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>STRTOG_Zero</name> <operator>|</operator> <name>STRTOG_Inexlo</name> <operator>|</operator> <name>STRTOG_Underflow</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>lostbits</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>lostbits</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>lostbits</name> <operator>=</operator> <call><name>any_on</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>x</name><index>[<expr><name>k</name><operator>&gt;&gt;</operator><name>kshift</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>k</name> <operator>&amp;</operator> <name>kmask</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>lostbits</name> <operator>|=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nbits</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rshift</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>fpi</name><operator>-&gt;</operator><name>emin</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>lostbits</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>up</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<switch>switch<condition>(<expr><name><name>fpi</name><operator>-&gt;</operator><name>rounding</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FPI_Round_zero</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>FPI_Round_near</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>lostbits</name> <operator>&amp;</operator> <literal type="number">2</literal>
<operator>&amp;&amp;</operator> <operator>(</operator><name>lostbits</name> <operator>|</operator> <name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>up</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FPI_Round_up</name></expr>:</case>
<expr_stmt><expr><name>up</name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name>sign</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FPI_Round_down</name></expr>:</case>
<expr_stmt><expr><name>up</name> <operator>=</operator> <name>sign</name></expr>;</expr_stmt>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>up</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>wds</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>increment</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>irv</name> <operator>==</operator> <name>STRTOG_Denormal</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>nbits</name> <operator>==</operator> <name><name>fpi</name><operator>-&gt;</operator><name>nbits</name></name> <operator>-</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <name><name>x</name><index>[<expr><name>nbits</name> <operator>&gt;&gt;</operator> <name>kshift</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>nbits</name> <operator>&amp;</operator> <name>kmask</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>irv</name> <operator>=</operator> <name>STRTOG_Normal</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>wds</name></name> <operator>&gt;</operator> <name>k</name>
<operator>||</operator> <operator>(</operator><operator>(</operator><name>n</name> <operator>=</operator> <name>nbits</name> <operator>&amp;</operator> <name>kmask</name><operator>)</operator> <operator>!=</operator><literal type="number">0</literal>
<operator>&amp;&amp;</operator> <call><name>hi0bits</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>k</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">32</literal><operator>-</operator><name>n</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rshift</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>e</name> <operator>&gt;</operator> <name><name>fpi</name><operator>-&gt;</operator><name>emax</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>ovfl</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>irv</name> <operator>|=</operator> <name>STRTOG_Inexhi</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>irv</name> <operator>|=</operator> <name>STRTOG_Inexlo</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>bp</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>exp</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
<return>return <expr><name>irv</name></expr>;</return>
</block_content>}</block></if></if_stmt></block_content></block></function>
</unit>
