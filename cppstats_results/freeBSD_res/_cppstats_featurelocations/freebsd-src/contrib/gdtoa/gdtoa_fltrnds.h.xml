<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/gdtoa/gdtoa_fltrnds.h"><decl_stmt><decl><type><name>FPI</name> <modifier>*</modifier></type><name>fpi</name></decl>, <decl><type ref="prev"/><name>fpi1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>Rounding</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>Trust_FLT_ROUNDS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>Rounding</name> <operator>=</operator> <name>Flt_Rounds</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>Rounding</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<switch>switch<condition>(<expr><call><name>fegetround</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FE_TOWARDZERO</name></expr>:</case> <expr_stmt><expr><name>Rounding</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>FE_UPWARD</name></expr>:</case> <expr_stmt><expr><name>Rounding</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><name>FE_DOWNWARD</name></expr>:</case> <expr_stmt><expr><name>Rounding</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></switch>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>fpi</name> <operator>=</operator> <operator>&amp;</operator><name>fpi0</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>Rounding</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fpi1</name> <operator>=</operator> <name>fpi0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fpi</name> <operator>=</operator> <operator>&amp;</operator><name>fpi1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fpi1</name><operator>.</operator><name>rounding</name></name> <operator>=</operator> <name>Rounding</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</unit>
