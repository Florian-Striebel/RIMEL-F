<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/gdtoa/hexnan.c">






























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gdtoaimp.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KR_headers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>L_shift</name><parameter_list>(<parameter><decl><type><name>x</name></type></decl></parameter>, <parameter><decl><type><name>x1</name></type></decl></parameter>, <parameter><decl><type><name>i</name></type></decl></parameter>)</parameter_list> <decl_stmt><decl><type><name>ULong</name> <modifier>*</modifier></type><name>x</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>ULong</name> <modifier>*</modifier></type><name>x1</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
L_shift<parameter_list>(<parameter><decl><type><name>ULong</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>ULong</name> <modifier>*</modifier></type><name>x1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">8</literal> <operator>-</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>&lt;&lt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>ULbits</name> <operator>-</operator> <name>i</name></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>x</name> <operator>|=</operator> <name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block> while<condition>(<expr><operator>++</operator><name>x</name> <operator>&lt;</operator> <name>x1</name></expr>)</condition>;</do>
</block_content>}</block></function>

<function><type><name>int</name></type>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KR_headers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>hexnan</name><parameter_list>(<parameter><decl><type><name>sp</name></type></decl></parameter>, <parameter><decl><type><name>fpi</name></type></decl></parameter>, <parameter><decl><type><name>x0</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>CONST</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>sp</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>FPI</name> <modifier>*</modifier></type><name>fpi</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>ULong</name> <modifier>*</modifier></type><name>x0</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
hexnan<parameter_list>( <parameter><decl><type><name>CONST</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>sp</name></decl></parameter>, <parameter><decl><type><name>FPI</name> <modifier>*</modifier></type><name>fpi</name></decl></parameter>, <parameter><decl><type><name>ULong</name> <modifier>*</modifier></type><name>x0</name></decl></parameter>)</parameter_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<decl_stmt><decl><type><name>ULong</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>x</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>x1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>xe</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CONST</name> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>havedig</name></decl>, <decl><type ref="prev"/><name>hd0</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>nbits</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>hexdig</name><index>[<expr><literal type="char">'0'</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>hexdig_init_D2A</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nbits</name> <operator>=</operator> <name><name>fpi</name><operator>-&gt;</operator><name>nbits</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x0</name> <operator>+</operator> <operator>(</operator><name>nbits</name> <operator>&gt;&gt;</operator> <name>kshift</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nbits</name> <operator>&amp;</operator> <name>kmask</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>x</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><operator>--</operator><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>x1</name> <operator>=</operator> <name>xe</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>havedig</name> <operator>=</operator> <name>hd0</name> <operator>=</operator> <name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>*</operator><name>sp</name></expr>;</expr_stmt>

<while>while<condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>CONST</name> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><name>s</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>s</name></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'x'</literal> <operator>||</operator> <name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'X'</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>CONST</name> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><name>s</name><operator>+</operator><literal type="number">3</literal><operator>)</operator> <operator>&gt;</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while<condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>CONST</name> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><operator>++</operator><name>s</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>h</name> <operator>=</operator> <name><name>hexdig</name><index>[<expr><name>c</name></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;=</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>hd0</name> <operator>&lt;</operator> <name>havedig</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <name>x1</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>L_shift</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;=</operator> <name>x0</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>hd0</name> <operator>=</operator> <name>havedig</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>--</operator><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>x1</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<while>while<condition>(<expr><operator>*</operator><operator>(</operator><name>CONST</name> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><name>s</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;=</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>s</name></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'x'</literal> <operator>||</operator> <name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'X'</literal><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>CONST</name> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><name>s</name><operator>+</operator><literal type="number">3</literal><operator>)</operator> <operator>&gt;</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>( <expr><name>c</name> <operator>==</operator> <literal type="char">')'</literal> <operator>&amp;&amp;</operator> <name>havedig</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>sp</name> <operator>=</operator> <name>s</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GDTOA_NON_PEDANTIC_NANCHECK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<do>do <block>{<block_content>
<if_stmt><if>if <condition>( <expr><name>c</name> <operator>==</operator> <literal type="char">')'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>sp</name> <operator>=</operator> <name>s</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while<condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>s</name><operator>)</operator></expr>)</condition>;</do>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>STRTOG_NaN</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>havedig</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>i</name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;=</operator> <name>x0</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>--</operator><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>x</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>h</name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>havedig</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>STRTOG_NaN</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <name>x1</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>L_shift</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;</operator> <name>x0</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>x1</name> <operator>=</operator> <name>x0</name></expr>;</expr_stmt>
<do>do<block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>x1</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>x</name><operator>++</operator></expr>;</expr_stmt></block_content></block>
while<condition>(<expr><name>x</name> <operator>&lt;=</operator> <name>xe</name></expr>)</condition>;</do>
<do>do<block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>x1</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block>
while<condition>(<expr><name>x1</name> <operator>&lt;=</operator> <name>xe</name></expr>)</condition>;</do>
</block_content>}</block></if>
<else>else <block>{<block_content>

<if_stmt><if>if <condition>( <expr><operator>(</operator><name>i</name> <operator>=</operator> <name>nbits</name> <operator>&amp;</operator> <operator>(</operator><name>ULbits</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>!=</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>xe</name> <operator>&amp;=</operator> <operator>(</operator><operator>(</operator><name>ULong</name><operator>)</operator><literal type="number">0xffffffff</literal><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>ULbits</name> <operator>-</operator> <name>i</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<for>for<control>(<init><expr><name>x1</name> <operator>=</operator> <name>xe</name></expr>;</init><condition>;</condition> <incr><expr><operator>--</operator><name>x1</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>x1</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>x1</name> <operator>==</operator> <name>x0</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>x1</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>STRTOG_NaNbits</name></expr>;</return>
</block_content>}</block></function>
</unit>
