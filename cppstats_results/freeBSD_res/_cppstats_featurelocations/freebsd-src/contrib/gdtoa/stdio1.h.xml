<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/gdtoa/stdio1.h">



























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STDIO1_H_included</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STDIO1_H_included</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>STDIO_H_included</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>KR_headers</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_SIZE_T</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_SIZE_T</name></cpp:macro></cpp:define>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>size_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANSI</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>()</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"varargs.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>Char</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Char</name></cpp:macro> <cpp:value>char</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANSI</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdarg.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>Char</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Char</name></cpp:macro> <cpp:value>void</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_STDIO1</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>Fprintf</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>FILE</name><operator>*</operator><operator>,</operator> <specifier>const</specifier> <name>char</name><operator>*</operator><operator>,</operator> <operator>...</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>Printf</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>,</operator> <operator>...</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>Sprintf</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>,</operator> <specifier>const</specifier> <name>char</name><operator>*</operator><operator>,</operator> <operator>...</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>Snprintf</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>,</operator> <name>size_t</name><operator>,</operator> <specifier>const</specifier> <name>char</name><operator>*</operator><operator>,</operator> <operator>...</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>Perror</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>Vfprintf</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>FILE</name><operator>*</operator><operator>,</operator> <specifier>const</specifier> <name>char</name><operator>*</operator><operator>,</operator> <name>va_list</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>Vsprintf</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>,</operator> <specifier>const</specifier> <name>char</name><operator>*</operator><operator>,</operator> <name>va_list</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name> <name>Vsnprintf</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>,</operator> <name>size_t</name><operator>,</operator> <specifier>const</specifier> <name>char</name><operator>*</operator><operator>,</operator> <name>va_list</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PF_BUF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <name>FILE</name> <modifier>*</modifier></type><name>stderr_ASL</name></decl>;</decl_stmt>
<extern>extern void (*pfbuf_print_ASL</extern>)</block_content> ANSI((char*</block></extern>))<empty_stmt>;</empty_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>pfbuf_ASL</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <name>fflush_ASL</name></type> <name>ANSI</name><argument_list>(<argument><expr><operator>(</operator><name>FILE</name><operator>*</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>fflush</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>old_fflush_ASL</name></cpp:macro> <cpp:value>fflush</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>fflush</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fflush</name></cpp:macro> <cpp:value>fflush_ASL</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>printf</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>fprintf</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>sprintf</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>perror</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>vfprintf</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>vsprintf</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>printf</name></cpp:macro> <cpp:value>Printf</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fprintf</name></cpp:macro> <cpp:value>Fprintf</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>snprintf</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>vsnprintf</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>snprintf</name></cpp:macro> <cpp:value>Snprintf</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sprintf</name></cpp:macro> <cpp:value>Sprintf</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>perror</name></cpp:macro> <cpp:value>Perror</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vfprintf</name></cpp:macro> <cpp:value>Vfprintf</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vsnprintf</name></cpp:macro> <cpp:value>Vsnprintf</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vsprintf</name></cpp:macro> <cpp:value>Vsprintf</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
