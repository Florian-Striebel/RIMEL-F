<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/ldns/rbtree.c">










































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ldns/config.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ldns/rbtree.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ldns/util.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLACK</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>


<decl_stmt><decl><type><name>ldns_rbnode_t</name></type> <name>ldns_rbtree_null_node</name> <init>= <expr><block>{
<expr><name>LDNS_RBTREE_NULL</name></expr>,
<expr><name>LDNS_RBTREE_NULL</name></expr>,
<expr><name>LDNS_RBTREE_NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>BLACK</name></expr>
}</block></expr></init></decl>;</decl_stmt>


<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ldns_rbtree_rotate_left</name><parameter_list>(<parameter><decl><type><name>ldns_rbtree_t</name> <modifier>*</modifier></type><name>rbtree</name></decl></parameter>, <parameter><decl><type><name>ldns_rbnode_t</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ldns_rbtree_rotate_right</name><parameter_list>(<parameter><decl><type><name>ldns_rbtree_t</name> <modifier>*</modifier></type><name>rbtree</name></decl></parameter>, <parameter><decl><type><name>ldns_rbnode_t</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ldns_rbtree_insert_fixup</name><parameter_list>(<parameter><decl><type><name>ldns_rbtree_t</name> <modifier>*</modifier></type><name>rbtree</name></decl></parameter>, <parameter><decl><type><name>ldns_rbnode_t</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ldns_rbtree_delete_fixup</name><parameter_list>(<parameter><decl><type><name>ldns_rbtree_t</name><modifier>*</modifier></type> <name>rbtree</name></decl></parameter>, <parameter><decl><type><name>ldns_rbnode_t</name><modifier>*</modifier></type> <name>child</name></decl></parameter>, <parameter><decl><type><name>ldns_rbnode_t</name><modifier>*</modifier></type> <name>child_parent</name></decl></parameter>)</parameter_list>;</function_decl>







<function><type><name>ldns_rbtree_t</name> <modifier>*</modifier></type>
<name>ldns_rbtree_create</name> <parameter_list>(<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>cmpf</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_rbtree_t</name> <modifier>*</modifier></type><name>rbtree</name></decl>;</decl_stmt>


<expr_stmt><expr><name>rbtree</name> <operator>=</operator> <operator>(</operator><name>ldns_rbtree_t</name> <operator>*</operator><operator>)</operator> <call><name>LDNS_MALLOC</name><argument_list>(<argument><expr><name>ldns_rbtree_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rbtree</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>ldns_rbtree_init</name><argument_list>(<argument><expr><name>rbtree</name></expr></argument>, <argument><expr><name>cmpf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rbtree</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ldns_rbtree_init</name><parameter_list>(<parameter><decl><type><name>ldns_rbtree_t</name> <modifier>*</modifier></type><name>rbtree</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>cmpf</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name><name>rbtree</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <name>LDNS_RBTREE_NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rbtree</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rbtree</name><operator>-&gt;</operator><name>cmp</name></name> <operator>=</operator> <name>cmpf</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ldns_rbtree_free</name><parameter_list>(<parameter><decl><type><name>ldns_rbtree_t</name> <modifier>*</modifier></type><name>rbtree</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>rbtree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>ldns_rbtree_rotate_left</name><parameter_list>(<parameter><decl><type><name>ldns_rbtree_t</name> <modifier>*</modifier></type><name>rbtree</name></decl></parameter>, <parameter><decl><type><name>ldns_rbnode_t</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_rbnode_t</name> <modifier>*</modifier></type><name>right</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>right</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <name><name>right</name><operator>-&gt;</operator><name>left</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>right</name><operator>-&gt;</operator><name>left</name></name> <operator>!=</operator> <name>LDNS_RBTREE_NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>right</name><operator>-&gt;</operator><name>left</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>right</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>parent</name></name> <operator>!=</operator> <name>LDNS_RBTREE_NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name><name>node</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>left</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <name>right</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <name>right</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>rbtree</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <name>right</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>right</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>right</name></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>ldns_rbtree_rotate_right</name><parameter_list>(<parameter><decl><type><name>ldns_rbtree_t</name> <modifier>*</modifier></type><name>rbtree</name></decl></parameter>, <parameter><decl><type><name>ldns_rbnode_t</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_rbnode_t</name> <modifier>*</modifier></type><name>left</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>left</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <name><name>left</name><operator>-&gt;</operator><name>right</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>left</name><operator>-&gt;</operator><name>right</name></name> <operator>!=</operator> <name>LDNS_RBTREE_NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>left</name><operator>-&gt;</operator><name>right</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>left</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>parent</name></name> <operator>!=</operator> <name>LDNS_RBTREE_NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name><name>node</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>right</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <name>left</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <name>left</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>rbtree</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <name>left</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>left</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>left</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ldns_rbtree_insert_fixup</name><parameter_list>(<parameter><decl><type><name>ldns_rbtree_t</name> <modifier>*</modifier></type><name>rbtree</name></decl></parameter>, <parameter><decl><type><name>ldns_rbnode_t</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_rbnode_t</name> <modifier>*</modifier></type><name>uncle</name></decl>;</decl_stmt>


<while>while <condition>(<expr><name>node</name> <operator>!=</operator> <name><name>rbtree</name><operator>-&gt;</operator><name>root</name></name> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>color</name></name> <operator>==</operator> <name>RED</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>parent</name></name> <operator>==</operator> <name><name>node</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>left</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>uncle</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>right</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>uncle</name><operator>-&gt;</operator><name>color</name></name> <operator>==</operator> <name>RED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name>BLACK</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uncle</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name>BLACK</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name>RED</name></expr>;</expr_stmt>


<expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name><name>node</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>right</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rbtree_rotate_left</name><argument_list>(<argument><expr><name>rbtree</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name>BLACK</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name>RED</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rbtree_rotate_right</name><argument_list>(<argument><expr><name>rbtree</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>uncle</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>left</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>uncle</name><operator>-&gt;</operator><name>color</name></name> <operator>==</operator> <name>RED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name>BLACK</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uncle</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name>BLACK</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name>RED</name></expr>;</expr_stmt>


<expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name><name>node</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>left</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rbtree_rotate_right</name><argument_list>(<argument><expr><name>rbtree</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name>BLACK</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name>RED</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rbtree_rotate_left</name><argument_list>(<argument><expr><name>rbtree</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>rbtree</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name>BLACK</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ldns_rbtree_insert_vref</name><parameter_list>(<parameter><decl><type><name>ldns_rbnode_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>rbtree</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ldns_rbtree_insert</name><argument_list>(<argument><expr><operator>(</operator><name>ldns_rbtree_t</name> <operator>*</operator><operator>)</operator> <name>rbtree</name></expr></argument>,
<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>ldns_rbnode_t</name> <modifier>*</modifier></type>
<name>ldns_rbtree_insert</name> <parameter_list>(<parameter><decl><type><name>ldns_rbtree_t</name> <modifier>*</modifier></type><name>rbtree</name></decl></parameter>, <parameter><decl><type><name>ldns_rbnode_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>ldns_rbnode_t</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><name><name>rbtree</name><operator>-&gt;</operator><name>root</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rbnode_t</name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><name>LDNS_RBTREE_NULL</name></expr></init></decl>;</decl_stmt>


<while>while <condition>(<expr><name>node</name> <operator>!=</operator> <name>LDNS_RBTREE_NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name><name>rbtree</name><operator>-&gt;</operator><name>cmp</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>parent</name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>left</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>right</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>


<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <name>LDNS_RBTREE_NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name>RED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rbtree</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>parent</name> <operator>!=</operator> <name>LDNS_RBTREE_NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>rbtree</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><call><name>ldns_rbtree_insert_fixup</name><argument_list>(<argument><expr><name>rbtree</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>ldns_rbnode_t</name> <modifier>*</modifier></type>
<name>ldns_rbtree_search</name> <parameter_list>(<parameter><decl><type><name>ldns_rbtree_t</name> <modifier>*</modifier></type><name>rbtree</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_rbnode_t</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ldns_rbtree_find_less_equal</name><argument_list>(<argument><expr><name>rbtree</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>node</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>node</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>swap_int8</name><parameter_list>(<parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>t</name> <init>= <expr><operator>*</operator><name>x</name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <operator>*</operator><name>y</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>swap_np</name><parameter_list>(<parameter><decl><type><name>ldns_rbnode_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>ldns_rbnode_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_rbnode_t</name><modifier>*</modifier></type> <name>t</name> <init>= <expr><operator>*</operator><name>x</name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <operator>*</operator><name>y</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>change_parent_ptr</name><parameter_list>(<parameter><decl><type><name>ldns_rbtree_t</name><modifier>*</modifier></type> <name>rbtree</name></decl></parameter>, <parameter><decl><type><name>ldns_rbnode_t</name><modifier>*</modifier></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>ldns_rbnode_t</name><modifier>*</modifier></type> <name>old</name></decl></parameter>, <parameter><decl><type><name>ldns_rbnode_t</name><modifier>*</modifier></type> <name>new</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>parent</name> <operator>==</operator> <name>LDNS_RBTREE_NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>rbtree</name><operator>-&gt;</operator><name>root</name></name> <operator>==</operator> <name>old</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>rbtree</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>left</name></name> <operator>==</operator> <name>old</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>right</name></name> <operator>==</operator> <name>old</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>change_child_ptr</name><parameter_list>(<parameter><decl><type><name>ldns_rbnode_t</name><modifier>*</modifier></type> <name>child</name></decl></parameter>, <parameter><decl><type><name>ldns_rbnode_t</name><modifier>*</modifier></type> <name>old</name></decl></parameter>, <parameter><decl><type><name>ldns_rbnode_t</name><modifier>*</modifier></type> <name>new</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>child</name> <operator>==</operator> <name>LDNS_RBTREE_NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>child</name><operator>-&gt;</operator><name>parent</name></name> <operator>==</operator> <name>old</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>ldns_rbnode_t</name><modifier>*</modifier></type>
<name>ldns_rbtree_delete</name><parameter_list>(<parameter><decl><type><name>ldns_rbtree_t</name> <modifier>*</modifier></type><name>rbtree</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_rbnode_t</name> <modifier>*</modifier></type><name>to_delete</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rbnode_t</name> <modifier>*</modifier></type><name>child</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>to_delete</name> <operator>=</operator> <call><name>ldns_rbtree_search</name><argument_list>(<argument><expr><name>rbtree</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>rbtree</name><operator>-&gt;</operator><name>count</name></name><operator>--</operator></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name><name>to_delete</name><operator>-&gt;</operator><name>left</name></name> <operator>!=</operator> <name>LDNS_RBTREE_NULL</name> <operator>&amp;&amp;</operator>
<name><name>to_delete</name><operator>-&gt;</operator><name>right</name></name> <operator>!=</operator> <name>LDNS_RBTREE_NULL</name></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>ldns_rbnode_t</name> <modifier>*</modifier></type><name>smright</name> <init>= <expr><name><name>to_delete</name><operator>-&gt;</operator><name>right</name></name></expr></init></decl>;</decl_stmt>
<while>while<condition>(<expr><name><name>smright</name><operator>-&gt;</operator><name>left</name></name> <operator>!=</operator> <name>LDNS_RBTREE_NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>smright</name> <operator>=</operator> <name><name>smright</name><operator>-&gt;</operator><name>left</name></name></expr>;</expr_stmt></block_content></block></while>






<expr_stmt><expr><call><name>swap_int8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>to_delete</name><operator>-&gt;</operator><name>color</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>smright</name><operator>-&gt;</operator><name>color</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>change_parent_ptr</name><argument_list>(<argument><expr><name>rbtree</name></expr></argument>, <argument><expr><name><name>to_delete</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name>to_delete</name></expr></argument>, <argument><expr><name>smright</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>to_delete</name><operator>-&gt;</operator><name>right</name></name> <operator>!=</operator> <name>smright</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>change_parent_ptr</name><argument_list>(<argument><expr><name>rbtree</name></expr></argument>, <argument><expr><name><name>smright</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name>smright</name></expr></argument>, <argument><expr><name>to_delete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>change_child_ptr</name><argument_list>(<argument><expr><name><name>smright</name><operator>-&gt;</operator><name>left</name></name></expr></argument>, <argument><expr><name>smright</name></expr></argument>, <argument><expr><name>to_delete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>change_child_ptr</name><argument_list>(<argument><expr><name><name>smright</name><operator>-&gt;</operator><name>left</name></name></expr></argument>, <argument><expr><name>smright</name></expr></argument>, <argument><expr><name>to_delete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>change_child_ptr</name><argument_list>(<argument><expr><name><name>smright</name><operator>-&gt;</operator><name>right</name></name></expr></argument>, <argument><expr><name>smright</name></expr></argument>, <argument><expr><name>to_delete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>change_child_ptr</name><argument_list>(<argument><expr><name><name>smright</name><operator>-&gt;</operator><name>right</name></name></expr></argument>, <argument><expr><name>smright</name></expr></argument>, <argument><expr><name>to_delete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>change_child_ptr</name><argument_list>(<argument><expr><name><name>to_delete</name><operator>-&gt;</operator><name>left</name></name></expr></argument>, <argument><expr><name>to_delete</name></expr></argument>, <argument><expr><name>smright</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>to_delete</name><operator>-&gt;</operator><name>right</name></name> <operator>!=</operator> <name>smright</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>change_child_ptr</name><argument_list>(<argument><expr><name><name>to_delete</name><operator>-&gt;</operator><name>right</name></name></expr></argument>, <argument><expr><name>to_delete</name></expr></argument>, <argument><expr><name>smright</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>to_delete</name><operator>-&gt;</operator><name>right</name></name> <operator>==</operator> <name>smright</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>to_delete</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <name>to_delete</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>smright</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>smright</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>swap_np</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>to_delete</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>smright</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>swap_np</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>to_delete</name><operator>-&gt;</operator><name>left</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>smright</name><operator>-&gt;</operator><name>left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>swap_np</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>to_delete</name><operator>-&gt;</operator><name>right</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>smright</name><operator>-&gt;</operator><name>right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>to_delete</name><operator>-&gt;</operator><name>left</name></name> <operator>!=</operator> <name>LDNS_RBTREE_NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>child</name> <operator>=</operator> <name><name>to_delete</name><operator>-&gt;</operator><name>left</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>child</name> <operator>=</operator> <name><name>to_delete</name><operator>-&gt;</operator><name>right</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><call><name>change_parent_ptr</name><argument_list>(<argument><expr><name>rbtree</name></expr></argument>, <argument><expr><name><name>to_delete</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name>to_delete</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>change_child_ptr</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>to_delete</name></expr></argument>, <argument><expr><name><name>to_delete</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>to_delete</name><operator>-&gt;</operator><name>color</name></name> <operator>==</operator> <name>RED</name></expr>)</condition>
<block>{<block_content>

</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name><name>child</name><operator>-&gt;</operator><name>color</name></name> <operator>==</operator> <name>RED</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>child</name><operator>!=</operator><name>LDNS_RBTREE_NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name>BLACK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>ldns_rbtree_delete_fixup</name><argument_list>(<argument><expr><name>rbtree</name></expr></argument>, <argument><expr><name>child</name></expr></argument>, <argument><expr><name><name>to_delete</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><name><name>to_delete</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>LDNS_RBTREE_NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>to_delete</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <name>LDNS_RBTREE_NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>to_delete</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <name>LDNS_RBTREE_NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>to_delete</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name>BLACK</name></expr>;</expr_stmt>
<return>return <expr><name>to_delete</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ldns_rbtree_delete_fixup</name><parameter_list>(<parameter><decl><type><name>ldns_rbtree_t</name><modifier>*</modifier></type> <name>rbtree</name></decl></parameter>, <parameter><decl><type><name>ldns_rbnode_t</name><modifier>*</modifier></type> <name>child</name></decl></parameter>, <parameter><decl><type><name>ldns_rbnode_t</name><modifier>*</modifier></type> <name>child_parent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_rbnode_t</name><modifier>*</modifier></type> <name>sibling</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>go_up</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><name><name>child_parent</name><operator>-&gt;</operator><name>right</name></name> <operator>==</operator> <name>child</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>sibling</name> <operator>=</operator> <name><name>child_parent</name><operator>-&gt;</operator><name>left</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>sibling</name> <operator>=</operator> <name><name>child_parent</name><operator>-&gt;</operator><name>right</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<while>while<condition>(<expr><name>go_up</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>child_parent</name> <operator>==</operator> <name>LDNS_RBTREE_NULL</name></expr>)</condition>
<block>{<block_content>

<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>sibling</name><operator>-&gt;</operator><name>color</name></name> <operator>==</operator> <name>RED</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>child_parent</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name>RED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sibling</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name>BLACK</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>child_parent</name><operator>-&gt;</operator><name>right</name></name> <operator>==</operator> <name>child</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ldns_rbtree_rotate_right</name><argument_list>(<argument><expr><name>rbtree</name></expr></argument>, <argument><expr><name>child_parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>ldns_rbtree_rotate_left</name><argument_list>(<argument><expr><name>rbtree</name></expr></argument>, <argument><expr><name>child_parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>child_parent</name><operator>-&gt;</operator><name>right</name></name> <operator>==</operator> <name>child</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>sibling</name> <operator>=</operator> <name><name>child_parent</name><operator>-&gt;</operator><name>left</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>sibling</name> <operator>=</operator> <name><name>child_parent</name><operator>-&gt;</operator><name>right</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>child_parent</name><operator>-&gt;</operator><name>color</name></name> <operator>==</operator> <name>BLACK</name>
<operator>&amp;&amp;</operator> <name><name>sibling</name><operator>-&gt;</operator><name>color</name></name> <operator>==</operator> <name>BLACK</name>
<operator>&amp;&amp;</operator> <name><name>sibling</name><operator>-&gt;</operator><name>left</name><operator>-&gt;</operator><name>color</name></name> <operator>==</operator> <name>BLACK</name>
<operator>&amp;&amp;</operator> <name><name>sibling</name><operator>-&gt;</operator><name>right</name><operator>-&gt;</operator><name>color</name></name> <operator>==</operator> <name>BLACK</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>sibling</name> <operator>!=</operator> <name>LDNS_RBTREE_NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sibling</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name>RED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>child</name> <operator>=</operator> <name>child_parent</name></expr>;</expr_stmt>
<expr_stmt><expr><name>child_parent</name> <operator>=</operator> <name><name>child_parent</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>child_parent</name><operator>-&gt;</operator><name>right</name></name> <operator>==</operator> <name>child</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>sibling</name> <operator>=</operator> <name><name>child_parent</name><operator>-&gt;</operator><name>left</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>sibling</name> <operator>=</operator> <name><name>child_parent</name><operator>-&gt;</operator><name>right</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>go_up</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><name><name>child_parent</name><operator>-&gt;</operator><name>color</name></name> <operator>==</operator> <name>RED</name>
<operator>&amp;&amp;</operator> <name><name>sibling</name><operator>-&gt;</operator><name>color</name></name> <operator>==</operator> <name>BLACK</name>
<operator>&amp;&amp;</operator> <name><name>sibling</name><operator>-&gt;</operator><name>left</name><operator>-&gt;</operator><name>color</name></name> <operator>==</operator> <name>BLACK</name>
<operator>&amp;&amp;</operator> <name><name>sibling</name><operator>-&gt;</operator><name>right</name><operator>-&gt;</operator><name>color</name></name> <operator>==</operator> <name>BLACK</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>sibling</name> <operator>!=</operator> <name>LDNS_RBTREE_NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>sibling</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name>RED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>child_parent</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name>BLACK</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if<condition>(<expr><name><name>child_parent</name><operator>-&gt;</operator><name>right</name></name> <operator>==</operator> <name>child</name>
<operator>&amp;&amp;</operator> <name><name>sibling</name><operator>-&gt;</operator><name>color</name></name> <operator>==</operator> <name>BLACK</name>
<operator>&amp;&amp;</operator> <name><name>sibling</name><operator>-&gt;</operator><name>right</name><operator>-&gt;</operator><name>color</name></name> <operator>==</operator> <name>RED</name>
<operator>&amp;&amp;</operator> <name><name>sibling</name><operator>-&gt;</operator><name>left</name><operator>-&gt;</operator><name>color</name></name> <operator>==</operator> <name>BLACK</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>sibling</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name>RED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sibling</name><operator>-&gt;</operator><name>right</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name>BLACK</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rbtree_rotate_left</name><argument_list>(<argument><expr><name>rbtree</name></expr></argument>, <argument><expr><name>sibling</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>child_parent</name><operator>-&gt;</operator><name>right</name></name> <operator>==</operator> <name>child</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>sibling</name> <operator>=</operator> <name><name>child_parent</name><operator>-&gt;</operator><name>left</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>sibling</name> <operator>=</operator> <name><name>child_parent</name><operator>-&gt;</operator><name>right</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name><name>child_parent</name><operator>-&gt;</operator><name>left</name></name> <operator>==</operator> <name>child</name>
<operator>&amp;&amp;</operator> <name><name>sibling</name><operator>-&gt;</operator><name>color</name></name> <operator>==</operator> <name>BLACK</name>
<operator>&amp;&amp;</operator> <name><name>sibling</name><operator>-&gt;</operator><name>left</name><operator>-&gt;</operator><name>color</name></name> <operator>==</operator> <name>RED</name>
<operator>&amp;&amp;</operator> <name><name>sibling</name><operator>-&gt;</operator><name>right</name><operator>-&gt;</operator><name>color</name></name> <operator>==</operator> <name>BLACK</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>sibling</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name>RED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sibling</name><operator>-&gt;</operator><name>left</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name>BLACK</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rbtree_rotate_right</name><argument_list>(<argument><expr><name>rbtree</name></expr></argument>, <argument><expr><name>sibling</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>child_parent</name><operator>-&gt;</operator><name>right</name></name> <operator>==</operator> <name>child</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>sibling</name> <operator>=</operator> <name><name>child_parent</name><operator>-&gt;</operator><name>left</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>sibling</name> <operator>=</operator> <name><name>child_parent</name><operator>-&gt;</operator><name>right</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>sibling</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name><name>child_parent</name><operator>-&gt;</operator><name>color</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child_parent</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name>BLACK</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>child_parent</name><operator>-&gt;</operator><name>right</name></name> <operator>==</operator> <name>child</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>sibling</name><operator>-&gt;</operator><name>left</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name>BLACK</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rbtree_rotate_right</name><argument_list>(<argument><expr><name>rbtree</name></expr></argument>, <argument><expr><name>child_parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>sibling</name><operator>-&gt;</operator><name>right</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name>BLACK</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rbtree_rotate_left</name><argument_list>(<argument><expr><name>rbtree</name></expr></argument>, <argument><expr><name>child_parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>ldns_rbtree_find_less_equal</name><parameter_list>(<parameter><decl><type><name>ldns_rbtree_t</name> <modifier>*</modifier></type><name>rbtree</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>ldns_rbnode_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rbnode_t</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>


<expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>rbtree</name><operator>-&gt;</operator><name>root</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<while>while <condition>(<expr><name>node</name> <operator>!=</operator> <name>LDNS_RBTREE_NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name><name>rbtree</name><operator>-&gt;</operator><name>cmp</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>left</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
<expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>right</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<function><type><name>ldns_rbnode_t</name> <modifier>*</modifier></type>
<name>ldns_rbtree_first</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_rbtree_t</name> <modifier>*</modifier></type><name>rbtree</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_rbnode_t</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><name><name>rbtree</name><operator>-&gt;</operator><name>root</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rbtree</name><operator>-&gt;</operator><name>root</name></name> <operator>!=</operator> <name>LDNS_RBTREE_NULL</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>node</name> <operator>=</operator> <name><name>rbtree</name><operator>-&gt;</operator><name>root</name></name></expr>;</init> <condition><expr><name><name>node</name><operator>-&gt;</operator><name>left</name></name> <operator>!=</operator> <name>LDNS_RBTREE_NULL</name></expr>;</condition> <incr><expr><name>node</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>left</name></name></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>node</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_rbnode_t</name> <modifier>*</modifier></type>
<name>ldns_rbtree_last</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_rbtree_t</name> <modifier>*</modifier></type><name>rbtree</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_rbnode_t</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><name><name>rbtree</name><operator>-&gt;</operator><name>root</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rbtree</name><operator>-&gt;</operator><name>root</name></name> <operator>!=</operator> <name>LDNS_RBTREE_NULL</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>node</name> <operator>=</operator> <name><name>rbtree</name><operator>-&gt;</operator><name>root</name></name></expr>;</init> <condition><expr><name><name>node</name><operator>-&gt;</operator><name>right</name></name> <operator>!=</operator> <name>LDNS_RBTREE_NULL</name></expr>;</condition> <incr><expr><name>node</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>right</name></name></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>node</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>ldns_rbnode_t</name> <modifier>*</modifier></type>
<name>ldns_rbtree_next</name><parameter_list>(<parameter><decl><type><name>ldns_rbnode_t</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_rbnode_t</name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>right</name></name> <operator>!=</operator> <name>LDNS_RBTREE_NULL</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>node</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>right</name></name></expr>;</init>
<condition><expr><name><name>node</name><operator>-&gt;</operator><name>left</name></name> <operator>!=</operator> <name>LDNS_RBTREE_NULL</name></expr>;</condition>
<incr><expr><name>node</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>left</name></name></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>parent</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>parent</name> <operator>!=</operator> <name>LDNS_RBTREE_NULL</name> <operator>&amp;&amp;</operator> <name>node</name> <operator>==</operator> <name><name>parent</name><operator>-&gt;</operator><name>right</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>node</name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
<expr_stmt><expr><name>parent</name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>node</name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>node</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_rbnode_t</name> <modifier>*</modifier></type>
<name>ldns_rbtree_previous</name><parameter_list>(<parameter><decl><type><name>ldns_rbnode_t</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_rbnode_t</name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>left</name></name> <operator>!=</operator> <name>LDNS_RBTREE_NULL</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>node</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>left</name></name></expr>;</init>
<condition><expr><name><name>node</name><operator>-&gt;</operator><name>right</name></name> <operator>!=</operator> <name>LDNS_RBTREE_NULL</name></expr>;</condition>
<incr><expr><name>node</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>right</name></name></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>parent</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>parent</name> <operator>!=</operator> <name>LDNS_RBTREE_NULL</name> <operator>&amp;&amp;</operator> <name>node</name> <operator>==</operator> <name><name>parent</name><operator>-&gt;</operator><name>left</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>node</name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
<expr_stmt><expr><name>parent</name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>node</name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>node</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>ldns_rbtree_t</name> <modifier>*</modifier></type>
<name>ldns_rbtree_split</name><parameter_list>(<parameter><decl><type><name>ldns_rbtree_t</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>elements</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_rbtree_t</name> <modifier>*</modifier></type><name>new_tree</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rbnode_t</name> <modifier>*</modifier></type><name>cur_node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rbnode_t</name> <modifier>*</modifier></type><name>move_node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>new_tree</name> <operator>=</operator> <call><name>ldns_rbtree_create</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>cmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cur_node</name> <operator>=</operator> <call><name>ldns_rbtree_first</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>count</name> <operator>&lt;</operator> <name>elements</name> <operator>&amp;&amp;</operator> <name>cur_node</name> <operator>!=</operator> <name>LDNS_RBTREE_NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>move_node</name> <operator>=</operator> <call><name>ldns_rbtree_delete</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><name><name>cur_node</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>ldns_rbtree_insert</name><argument_list>(<argument><expr><name>new_tree</name></expr></argument>, <argument><expr><name>move_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cur_node</name> <operator>=</operator> <call><name>ldns_rbtree_first</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>new_tree</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>ldns_rbtree_join</name><parameter_list>(<parameter><decl><type><name>ldns_rbtree_t</name> <modifier>*</modifier></type><name>tree1</name></decl></parameter>, <parameter><decl><type><name>ldns_rbtree_t</name> <modifier>*</modifier></type><name>tree2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ldns_traverse_postorder</name><argument_list>(<argument><expr><name>tree2</name></expr></argument>, <argument><expr><name>ldns_rbtree_insert_vref</name></expr></argument>, <argument><expr><name>tree1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>traverse_post</name><parameter_list>(<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>ldns_rbnode_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>,
<parameter><decl><type><name>ldns_rbnode_t</name><modifier>*</modifier></type> <name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>node</name> <operator>||</operator> <name>node</name> <operator>==</operator> <name>LDNS_RBTREE_NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>traverse_post</name><argument_list>(<argument><expr><name>func</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>traverse_post</name><argument_list>(<argument><expr><name>func</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>func</name>)<argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ldns_traverse_postorder</name><parameter_list>(<parameter><decl><type><name>ldns_rbtree_t</name><modifier>*</modifier></type> <name>tree</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>ldns_rbnode_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>traverse_post</name><argument_list>(<argument><expr><name>func</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name><name>tree</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
