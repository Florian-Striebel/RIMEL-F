<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/ldns/radix.c">










































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ldns/config.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ldns/radix.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ldns/util.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>


<function_decl><type><specifier>static</specifier> <name>ldns_radix_node_t</name><modifier>*</modifier></type> <name>ldns_radix_new_node</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>key</name></decl></parameter>,
<parameter><decl><type><name>radix_strlen_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ldns_radix_find_prefix</name><parameter_list>(<parameter><decl><type><name>ldns_radix_t</name><modifier>*</modifier></type> <name>tree</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>key</name></decl></parameter>,
<parameter><decl><type><name>radix_strlen_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>ldns_radix_node_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>result</name></decl></parameter>, <parameter><decl><type><name>radix_strlen_t</name><modifier>*</modifier></type> <name>pos</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ldns_radix_array_space</name><parameter_list>(<parameter><decl><type><name>ldns_radix_node_t</name><modifier>*</modifier></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>byte</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ldns_radix_array_grow</name><parameter_list>(<parameter><decl><type><name>ldns_radix_node_t</name><modifier>*</modifier></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>need</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ldns_radix_str_create</name><parameter_list>(<parameter><decl><type><name>ldns_radix_array_t</name><modifier>*</modifier></type> <name>array</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>key</name></decl></parameter>,
<parameter><decl><type><name>radix_strlen_t</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>radix_strlen_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ldns_radix_prefix_remainder</name><parameter_list>(<parameter><decl><type><name>radix_strlen_t</name></type> <name>prefix_len</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>longer_str</name></decl></parameter>, <parameter><decl><type><name>radix_strlen_t</name></type> <name>longer_len</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>split_str</name></decl></parameter>,
<parameter><decl><type><name>radix_strlen_t</name><modifier>*</modifier></type> <name>split_len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ldns_radix_array_split</name><parameter_list>(<parameter><decl><type><name>ldns_radix_array_t</name><modifier>*</modifier></type> <name>array</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>key</name></decl></parameter>,
<parameter><decl><type><name>radix_strlen_t</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>radix_strlen_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>ldns_radix_node_t</name><modifier>*</modifier></type> <name>add</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ldns_radix_str_is_prefix</name><parameter_list>(<parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>str1</name></decl></parameter>, <parameter><decl><type><name>radix_strlen_t</name></type> <name>len1</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>str2</name></decl></parameter>, <parameter><decl><type><name>radix_strlen_t</name></type> <name>len2</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>radix_strlen_t</name></type> <name>ldns_radix_str_common</name><parameter_list>(<parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>str1</name></decl></parameter>, <parameter><decl><type><name>radix_strlen_t</name></type> <name>len1</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>str2</name></decl></parameter>, <parameter><decl><type><name>radix_strlen_t</name></type> <name>len2</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ldns_radix_node_t</name><modifier>*</modifier></type> <name>ldns_radix_next_in_subtree</name><parameter_list>(<parameter><decl><type><name>ldns_radix_node_t</name><modifier>*</modifier></type> <name>node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ldns_radix_node_t</name><modifier>*</modifier></type> <name>ldns_radix_prev_from_index</name><parameter_list>(<parameter><decl><type><name>ldns_radix_node_t</name><modifier>*</modifier></type> <name>node</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ldns_radix_node_t</name><modifier>*</modifier></type> <name>ldns_radix_last_in_subtree_incl_self</name><parameter_list>(
<parameter><decl><type><name>ldns_radix_node_t</name><modifier>*</modifier></type> <name>node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ldns_radix_node_t</name><modifier>*</modifier></type> <name>ldns_radix_last_in_subtree</name><parameter_list>(<parameter><decl><type><name>ldns_radix_node_t</name><modifier>*</modifier></type> <name>node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ldns_radix_del_fix</name><parameter_list>(<parameter><decl><type><name>ldns_radix_t</name><modifier>*</modifier></type> <name>tree</name></decl></parameter>, <parameter><decl><type><name>ldns_radix_node_t</name><modifier>*</modifier></type> <name>node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ldns_radix_cleanup_onechild</name><parameter_list>(<parameter><decl><type><name>ldns_radix_node_t</name><modifier>*</modifier></type> <name>node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ldns_radix_cleanup_leaf</name><parameter_list>(<parameter><decl><type><name>ldns_radix_node_t</name><modifier>*</modifier></type> <name>node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ldns_radix_node_free</name><parameter_list>(<parameter><decl><type><name>ldns_radix_node_t</name><modifier>*</modifier></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ldns_radix_node_array_free</name><parameter_list>(<parameter><decl><type><name>ldns_radix_node_t</name><modifier>*</modifier></type> <name>node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ldns_radix_node_array_free_front</name><parameter_list>(<parameter><decl><type><name>ldns_radix_node_t</name><modifier>*</modifier></type> <name>node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ldns_radix_node_array_free_end</name><parameter_list>(<parameter><decl><type><name>ldns_radix_node_t</name><modifier>*</modifier></type> <name>node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ldns_radix_array_reduce</name><parameter_list>(<parameter><decl><type><name>ldns_radix_node_t</name><modifier>*</modifier></type> <name>node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ldns_radix_self_or_prev</name><parameter_list>(<parameter><decl><type><name>ldns_radix_node_t</name><modifier>*</modifier></type> <name>node</name></decl></parameter>,
<parameter><decl><type><name>ldns_radix_node_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>result</name></decl></parameter>)</parameter_list>;</function_decl>






<function><type><specifier>static</specifier> <name>ldns_radix_node_t</name><modifier>*</modifier></type>
<name>ldns_radix_new_node</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>radix_strlen_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_radix_node_t</name><modifier>*</modifier></type> <name>node</name> <init>= <expr><call><name>LDNS_MALLOC</name><argument_list>(<argument><expr><name>ldns_radix_node_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>node</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>klen</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>parent_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>array</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>node</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>ldns_radix_t</name> <modifier>*</modifier></type>
<name>ldns_radix_create</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_radix_t</name><modifier>*</modifier></type> <name>tree</name></decl>;</decl_stmt>


<expr_stmt><expr><name>tree</name> <operator>=</operator> <operator>(</operator><name>ldns_radix_t</name> <operator>*</operator><operator>)</operator> <call><name>LDNS_MALLOC</name><argument_list>(<argument><expr><name>ldns_radix_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tree</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ldns_radix_init</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>tree</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>void</name></type>
<name>ldns_radix_init</name><parameter_list>(<parameter><decl><type><name>ldns_radix_t</name><modifier>*</modifier></type> <name>tree</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>tree</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tree</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tree</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return;</return>
</block_content>}</block></function>






<function><type><name>void</name></type>
<name>ldns_radix_free</name><parameter_list>(<parameter><decl><type><name>ldns_radix_t</name><modifier>*</modifier></type> <name>tree</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>tree</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tree</name><operator>-&gt;</operator><name>root</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_radix_traverse_postorder</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>root</name></name></expr></argument>,
<argument><expr><name>ldns_radix_node_free</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return;</return>
</block_content>}</block></function>






<function><type><name>ldns_status</name></type>
<name>ldns_radix_insert</name><parameter_list>(<parameter><decl><type><name>ldns_radix_t</name><modifier>*</modifier></type> <name>tree</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>radix_strlen_t</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>radix_strlen_t</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_radix_node_t</name><modifier>*</modifier></type> <name>add</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_radix_node_t</name><modifier>*</modifier></type> <name>prefix</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tree</name> <operator>||</operator> <operator>!</operator><name>key</name> <operator>||</operator> <operator>!</operator><name>data</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>add</name> <operator>=</operator> <call><name>ldns_radix_new_node</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>add</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ldns_radix_find_prefix</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prefix</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>root</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name><name>tree</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <name>add</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>




<expr_stmt><expr><name>prefix</name> <operator>=</operator> <call><name>ldns_radix_new_node</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>prefix</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ldns_radix_array_space</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name><name>key</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name><name>prefix</name><operator>-&gt;</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>add</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>prefix</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>add</name><operator>-&gt;</operator><name>parent_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prefix</name><operator>-&gt;</operator><name>array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>edge</name> <operator>=</operator> <name>add</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ldns_radix_prefix_remainder</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>,
<argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>prefix</name><operator>-&gt;</operator><name>array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>str</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>prefix</name><operator>-&gt;</operator><name>array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name><name>prefix</name><operator>-&gt;</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>tree</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <name>prefix</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pos</name> <operator>==</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>prefix</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_EXISTS_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>prefix</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prefix</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prefix</name><operator>-&gt;</operator><name>klen</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>byte</name> <init>= <expr><name><name>key</name><index>[<expr><name>pos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pos</name> <operator>&lt;</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>byte</name> <operator>&lt;</operator> <name><name>prefix</name><operator>-&gt;</operator><name>offset</name></name> <operator>||</operator>
<operator>(</operator><name>byte</name> <operator>-</operator> <name><name>prefix</name><operator>-&gt;</operator><name>offset</name></name><operator>)</operator> <operator>&gt;=</operator> <name><name>prefix</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>







<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ldns_radix_array_space</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>byte</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>byte</name> <operator>&gt;=</operator> <name><name>prefix</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>byte</name> <operator>-</operator> <name><name>prefix</name><operator>-&gt;</operator><name>offset</name></name><operator>)</operator> <operator>&lt;=</operator> <name><name>prefix</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>byte</name> <operator>-=</operator> <name><name>prefix</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name><operator>+</operator><literal type="number">1</literal> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ldns_radix_str_create</name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>prefix</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>byte</name></expr>]</index></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>pos</name><operator>+</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>add</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>prefix</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>add</name><operator>-&gt;</operator><name>parent_index</name></name> <operator>=</operator> <name>byte</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prefix</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>byte</name></expr>]</index></name><operator>.</operator><name>edge</name> <operator>=</operator> <name>add</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>prefix</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>byte</name><operator>-</operator><name><name>prefix</name><operator>-&gt;</operator><name>offset</name></name></expr>]</index></name><operator>.</operator><name>edge</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>








<expr_stmt><expr><name>byte</name> <operator>-=</operator> <name><name>prefix</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name><operator>+</operator><literal type="number">1</literal> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ldns_radix_str_create</name><argument_list>(
<argument><expr><operator>&amp;</operator><name><name>prefix</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>byte</name></expr>]</index></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>pos</name><operator>+</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>add</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>prefix</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>add</name><operator>-&gt;</operator><name>parent_index</name></name> <operator>=</operator> <name>byte</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prefix</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>byte</name></expr>]</index></name><operator>.</operator><name>edge</name> <operator>=</operator> <name>add</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>




<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ldns_radix_array_split</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prefix</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>byte</name><operator>-</operator><operator>(</operator><name><name>prefix</name><operator>-&gt;</operator><name>offset</name></name><operator>)</operator></expr>]</index></name></expr></argument>,
<argument><expr><name>key</name></expr></argument>, <argument><expr><name>pos</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>add</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>tree</name><operator>-&gt;</operator><name>count</name></name> <operator>++</operator></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_OK</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>void</name><modifier>*</modifier></type> <name>ldns_radix_delete</name><parameter_list>(<parameter><decl><type><name>ldns_radix_t</name><modifier>*</modifier></type> <name>tree</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>radix_strlen_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_radix_node_t</name><modifier>*</modifier></type> <name>del</name> <init>= <expr><call><name>ldns_radix_search</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>del</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tree</name><operator>-&gt;</operator><name>count</name></name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <name><name>del</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>del</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_radix_del_fix</name><argument_list>(<argument><expr><name>tree</name></expr></argument>, <argument><expr><name>del</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>ldns_radix_node_t</name><modifier>*</modifier></type>
<name>ldns_radix_search</name><parameter_list>(<parameter><decl><type><name>ldns_radix_t</name><modifier>*</modifier></type> <name>tree</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>radix_strlen_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_radix_node_t</name><modifier>*</modifier></type> <name>node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>radix_strlen_t</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>byte</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tree</name> <operator>||</operator> <operator>!</operator><name>key</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>tree</name><operator>-&gt;</operator><name>root</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>node</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<return>return <expr><ternary><condition><expr><name><name>node</name><operator>-&gt;</operator><name>data</name></name></expr>?</condition><then><expr><name>node</name></expr></then><else>:<expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>byte</name> <operator>=</operator> <name><name>key</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>byte</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>offset</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>byte</name> <operator>-=</operator> <name><name>node</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>byte</name> <operator>&gt;=</operator> <name><name>node</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>byte</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>+</operator> <name><name>node</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>byte</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>&gt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>key</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>byte</name></expr>]</index></name><operator>.</operator><name>str</name></expr></argument>,
<argument><expr><name><name>node</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>byte</name></expr>]</index></name><operator>.</operator><name>len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name><name>node</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>byte</name></expr>]</index></name><operator>.</operator><name>len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>byte</name></expr>]</index></name><operator>.</operator><name>edge</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>int</name></type>
<name>ldns_radix_find_less_equal</name><parameter_list>(<parameter><decl><type><name>ldns_radix_t</name><modifier>*</modifier></type> <name>tree</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>key</name></decl></parameter>,
<parameter><decl><type><name>radix_strlen_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>ldns_radix_node_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_radix_node_t</name><modifier>*</modifier></type> <name>node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>radix_strlen_t</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>byte</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>memcmp_res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tree</name> <operator>||</operator> <operator>!</operator><name><name>tree</name><operator>-&gt;</operator><name>root</name></name> <operator>||</operator> <operator>!</operator><name>key</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>tree</name><operator>-&gt;</operator><name>root</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>pos</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>byte</name> <operator>=</operator> <name><name>key</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>byte</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>offset</name></name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><call><name>ldns_radix_self_or_prev</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>byte</name> <operator>-=</operator> <name><name>node</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>byte</name> <operator>&gt;=</operator> <name><name>node</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <call><name>ldns_radix_last_in_subtree_incl_self</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>result</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <call><name>ldns_radix_prev</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>node</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>byte</name></expr>]</index></name><operator>.</operator><name>edge</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <call><name>ldns_radix_prev_from_index</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>byte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>result</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_radix_self_or_prev</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>byte</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>+</operator> <name><name>node</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>byte</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>&gt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>key</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>byte</name></expr>]</index></name><operator>.</operator><name>str</name></expr></argument>,
<argument><expr><name>len</name><operator>-</operator><name>pos</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <call><name>ldns_radix_prev</name><argument_list>(
<argument><expr><name><name>node</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>byte</name></expr>]</index></name><operator>.</operator><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <call><name>ldns_radix_last_in_subtree_incl_self</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>byte</name></expr>]</index></name><operator>.</operator><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>result</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <call><name>ldns_radix_prev</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>byte</name></expr>]</index></name><operator>.</operator><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>memcmp_res</name> <operator>=</operator> <call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>key</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>byte</name></expr>]</index></name><operator>.</operator><name>str</name></expr></argument>,
<argument><expr><name><name>node</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>byte</name></expr>]</index></name><operator>.</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>memcmp_res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <call><name>ldns_radix_prev</name><argument_list>(
<argument><expr><name><name>node</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>byte</name></expr>]</index></name><operator>.</operator><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>memcmp_res</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <call><name>ldns_radix_last_in_subtree_incl_self</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>byte</name></expr>]</index></name><operator>.</operator><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>result</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <call><name>ldns_radix_prev</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>byte</name></expr>]</index></name><operator>.</operator><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name><name>node</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>byte</name></expr>]</index></name><operator>.</operator><name>len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>byte</name></expr>]</index></name><operator>.</operator><name>edge</name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <call><name>ldns_radix_prev</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>






<function><type><name>ldns_radix_node_t</name><modifier>*</modifier></type>
<name>ldns_radix_first</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_radix_t</name><modifier>*</modifier></type> <name>tree</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_radix_node_t</name><modifier>*</modifier></type> <name>first</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tree</name> <operator>||</operator> <operator>!</operator><name><name>tree</name><operator>-&gt;</operator><name>root</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>first</name> <operator>=</operator> <name><name>tree</name><operator>-&gt;</operator><name>root</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>first</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>first</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>ldns_radix_next</name><argument_list>(<argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><name>ldns_radix_node_t</name><modifier>*</modifier></type>
<name>ldns_radix_last</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_radix_t</name><modifier>*</modifier></type> <name>tree</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tree</name> <operator>||</operator> <operator>!</operator><name><name>tree</name><operator>-&gt;</operator><name>root</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>ldns_radix_last_in_subtree_incl_self</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><name>ldns_radix_node_t</name><modifier>*</modifier></type>
<name>ldns_radix_next</name><parameter_list>(<parameter><decl><type><name>ldns_radix_node_t</name><modifier>*</modifier></type> <name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>node</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ldns_radix_node_t</name><modifier>*</modifier></type> <name>next</name> <init>= <expr><call><name>ldns_radix_next_in_subtree</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>next</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>next</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>index</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>parent_index</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>edge</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ldns_radix_node_t</name><modifier>*</modifier></type> <name>next</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name><name>edge</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>node</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>edge</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>ldns_radix_next_in_subtree</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>next</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>next</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></while>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>ldns_radix_node_t</name><modifier>*</modifier></type>
<name>ldns_radix_prev</name><parameter_list>(<parameter><decl><type><name>ldns_radix_node_t</name><modifier>*</modifier></type> <name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>node</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<while>while <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>index</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>parent_index</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_radix_node_t</name><modifier>*</modifier></type> <name>prev</name></decl>;</decl_stmt>
<expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prev</name> <operator>=</operator> <call><name>ldns_radix_prev_from_index</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>prev</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>prev</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>node</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>ldns_radix_node_print</name><parameter_list>(<parameter><decl><type><name>FILE</name><modifier>*</modifier></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>ldns_radix_node_t</name><modifier>*</modifier></type> <name>node</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>radix_strlen_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>j</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>node</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>d</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"--"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>str</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>radix_strlen_t</name></type> <name>l</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"| [%u+"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>l</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>)</operator> <name><name>str</name><index>[<expr><name>l</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"]%u"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"| [%u]"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name><name>node</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>edge</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_radix_node_print</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>edge</name></expr></argument>, <argument><expr><name>j</name></expr></argument>,
<argument><expr><name><name>node</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>str</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>len</name></expr></argument>, <argument><expr><name>d</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return;</return>
</block_content>}</block></function>






<function><type><name>void</name></type>
<name>ldns_radix_printf</name><parameter_list>(<parameter><decl><type><name>FILE</name><modifier>*</modifier></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_radix_t</name><modifier>*</modifier></type> <name>tree</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fd</name> <operator>||</operator> <operator>!</operator><name>tree</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>tree</name><operator>-&gt;</operator><name>root</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"; empty radix tree\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_radix_node_print</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>tree</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></function>






<function><type><name>ldns_status</name></type>
<name>ldns_radix_join</name><parameter_list>(<parameter><decl><type><name>ldns_radix_t</name><modifier>*</modifier></type> <name>tree1</name></decl></parameter>, <parameter><decl><type><name>ldns_radix_t</name><modifier>*</modifier></type> <name>tree2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_radix_node_t</name><modifier>*</modifier></type> <name>cur_node</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next_node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>status</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tree2</name> <operator>||</operator> <operator>!</operator><name><name>tree2</name><operator>-&gt;</operator><name>root</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>cur_node</name> <operator>=</operator> <call><name>ldns_radix_first</name><argument_list>(<argument><expr><name>tree2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>cur_node</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>LDNS_STATUS_NO_DATA</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cur_node</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_radix_insert</name><argument_list>(<argument><expr><name>tree1</name></expr></argument>, <argument><expr><name><name>cur_node</name><operator>-&gt;</operator><name>key</name></name></expr></argument>,
<argument><expr><name><name>cur_node</name><operator>-&gt;</operator><name>klen</name></name></expr></argument>, <argument><expr><name><name>cur_node</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>LDNS_STATUS_OK</name> <operator>&amp;&amp;</operator>
<name>status</name> <operator>!=</operator> <name>LDNS_STATUS_EXISTS_ERR</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>next_node</name> <operator>=</operator> <call><name>ldns_radix_next</name><argument_list>(<argument><expr><name>cur_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ldns_radix_delete</name><argument_list>(<argument><expr><name>tree2</name></expr></argument>, <argument><expr><name><name>cur_node</name><operator>-&gt;</operator><name>key</name></name></expr></argument>,
<argument><expr><name><name>cur_node</name><operator>-&gt;</operator><name>klen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>cur_node</name> <operator>=</operator> <name>next_node</name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>LDNS_STATUS_OK</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>ldns_status</name></type>
<name>ldns_radix_split</name><parameter_list>(<parameter><decl><type><name>ldns_radix_t</name><modifier>*</modifier></type> <name>tree1</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>ldns_radix_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>tree2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_radix_node_t</name><modifier>*</modifier></type> <name>cur_node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>status</name> <init>= <expr><name>LDNS_STATUS_OK</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tree1</name> <operator>||</operator> <operator>!</operator><name><name>tree1</name><operator>-&gt;</operator><name>root</name></name> <operator>||</operator> <name>num</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tree2</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>tree2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>tree2</name> <operator>=</operator> <call><name>ldns_radix_create</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>tree2</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>cur_node</name> <operator>=</operator> <call><name>ldns_radix_first</name><argument_list>(<argument><expr><name>tree1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>count</name> <operator>&lt;</operator> <name>num</name> <operator>&amp;&amp;</operator> <name>cur_node</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cur_node</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>cur_key</name> <init>= <expr><name><name>cur_node</name><operator>-&gt;</operator><name>key</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>radix_strlen_t</name></type> <name>cur_len</name> <init>= <expr><name><name>cur_node</name><operator>-&gt;</operator><name>klen</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>cur_data</name> <init>= <expr><call><name>ldns_radix_delete</name><argument_list>(<argument><expr><name>tree1</name></expr></argument>, <argument><expr><name>cur_key</name></expr></argument>,
<argument><expr><name>cur_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cur_data</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_NO_DATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_radix_insert</name><argument_list>(<argument><expr><operator>*</operator><name>tree2</name></expr></argument>, <argument><expr><name>cur_key</name></expr></argument>, <argument><expr><name>cur_len</name></expr></argument>,
<argument><expr><name>cur_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>LDNS_STATUS_OK</name> <operator>&amp;&amp;</operator>
<name>status</name> <operator>!=</operator> <name>LDNS_STATUS_EXISTS_ERR</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></if></if_stmt>







<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>cur_node</name> <operator>=</operator> <call><name>ldns_radix_first</name><argument_list>(<argument><expr><name>tree1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>cur_node</name> <operator>=</operator> <call><name>ldns_radix_next</name><argument_list>(<argument><expr><name>cur_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>LDNS_STATUS_OK</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>void</name></type>
<name>ldns_radix_traverse_postorder</name><parameter_list>(<parameter><decl><type><name>ldns_radix_node_t</name><modifier>*</modifier></type> <name>node</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>ldns_radix_node_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>node</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_radix_traverse_postorder</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>edge</name></expr></argument>,
<argument><expr><name>func</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call>(<modifier>*</modifier><name>func</name>)<argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></function>

















<function><type><specifier>static</specifier> <name>int</name></type>
<name>ldns_radix_find_prefix</name><parameter_list>(<parameter><decl><type><name>ldns_radix_t</name><modifier>*</modifier></type> <name>tree</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>key</name></decl></parameter>,
<parameter><decl><type><name>radix_strlen_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>ldns_radix_node_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>result</name></decl></parameter>, <parameter><decl><type><name>radix_strlen_t</name><modifier>*</modifier></type> <name>respos</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>ldns_radix_node_t</name><modifier>*</modifier></type> <name>n</name> <init>= <expr><name><name>tree</name><operator>-&gt;</operator><name>root</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>radix_strlen_t</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>byte</name></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>respos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>n</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>n</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>byte</name> <operator>=</operator> <name><name>key</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>byte</name> <operator>&lt;</operator> <name><name>n</name><operator>-&gt;</operator><name>offset</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>byte</name> <operator>-=</operator> <name><name>n</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>byte</name> <operator>&gt;=</operator> <name><name>n</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>n</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>byte</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>+</operator> <name><name>n</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>byte</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>&gt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>key</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>byte</name></expr>]</index></name><operator>.</operator><name>str</name></expr></argument>,
<argument><expr><name><name>n</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>byte</name></expr>]</index></name><operator>.</operator><name>len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name><name>n</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>byte</name></expr>]</index></name><operator>.</operator><name>len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>n</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>byte</name></expr>]</index></name><operator>.</operator><name>edge</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>n</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>respos</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>int</name></type>
<name>ldns_radix_array_space</name><parameter_list>(<parameter><decl><type><name>ldns_radix_node_t</name><modifier>*</modifier></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>byte</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>node</name><operator>-&gt;</operator><name>array</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>capacity</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>array</name></name> <operator>=</operator> <call><name>LDNS_MALLOC</name><argument_list>(<argument><expr><name>ldns_radix_array_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>node</name><operator>-&gt;</operator><name>array</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ldns_radix_array_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>byte</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>array</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>capacity</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>byte</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>byte</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>offset</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>need</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>offset</name></name> <operator>-</operator> <name>byte</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <name>need</name> <operator>&gt;</operator> <name><name>node</name><operator>-&gt;</operator><name>capacity</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ldns_radix_array_grow</name><argument_list>(<argument><expr><name>node</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator> <operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <name>need</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>need</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>node</name><operator>-&gt;</operator><name>len</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>ldns_radix_array_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>index</name><operator>+</operator><name>need</name></expr>]</index></name><operator>.</operator><name>edge</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>index</name><operator>+</operator><name>need</name></expr>]</index></name><operator>.</operator><name><name>edge</name><operator>-&gt;</operator><name>parent_index</name></name> <operator>=</operator>
<name>index</name> <operator>+</operator> <name>need</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>need</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>ldns_radix_array_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>len</name></name> <operator>+=</operator> <name>need</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>byte</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>byte</name> <operator>-</operator> <name><name>node</name><operator>-&gt;</operator><name>offset</name></name> <operator>&gt;=</operator> <name><name>node</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>need</name> <init>= <expr><operator>(</operator><name>byte</name> <operator>-</operator> <name><name>node</name><operator>-&gt;</operator><name>offset</name></name><operator>)</operator> <operator>-</operator> <name><name>node</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <name>need</name> <operator>&gt;</operator> <name><name>node</name><operator>-&gt;</operator><name>capacity</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ldns_radix_array_grow</name><argument_list>(<argument><expr><name>node</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator> <operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <name>need</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>array</name><index>[<expr><name><name>node</name><operator>-&gt;</operator><name>len</name></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>need</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>ldns_radix_array_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>len</name></name> <operator>+=</operator> <name>need</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>int</name></type>
<name>ldns_radix_array_grow</name><parameter_list>(<parameter><decl><type><name>ldns_radix_node_t</name><modifier>*</modifier></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>need</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>size</name> <init>= <expr><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>node</name><operator>-&gt;</operator><name>capacity</name></name><operator>)</operator><operator>*</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_radix_array_t</name><modifier>*</modifier></type> <name>a</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>need</name> <operator>&gt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name>need</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">256</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">256</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>LDNS_XMALLOC</name><argument_list>(<argument><expr><name>ldns_radix_array_t</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>a</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>len</name></name> <operator>&lt;=</operator> <name><name>node</name><operator>-&gt;</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>capacity</name></name> <operator>&lt;</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>len</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>ldns_radix_array_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>array</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>int</name></type>
<name>ldns_radix_str_create</name><parameter_list>(<parameter><decl><type><name>ldns_radix_array_t</name><modifier>*</modifier></type> <name>array</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>key</name></decl></parameter>,
<parameter><decl><type><name>radix_strlen_t</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>radix_strlen_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>str</name></name> <operator>=</operator> <call><name>LDNS_XMALLOC</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><operator>(</operator><name>len</name><operator>-</operator><name>pos</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>array</name><operator>-&gt;</operator><name>str</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>array</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>key</name><operator>+</operator><name>pos</name></expr></argument>, <argument><expr><name>len</name><operator>-</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <operator>(</operator><name>len</name><operator>-</operator><name>pos</name><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>int</name></type>
<name>ldns_radix_prefix_remainder</name><parameter_list>(<parameter><decl><type><name>radix_strlen_t</name></type> <name>prefix_len</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>longer_str</name></decl></parameter>, <parameter><decl><type><name>radix_strlen_t</name></type> <name>longer_len</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>split_str</name></decl></parameter>, <parameter><decl><type><name>radix_strlen_t</name><modifier>*</modifier></type> <name>split_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>split_len</name> <operator>=</operator> <name>longer_len</name> <operator>-</operator> <name>prefix_len</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>split_str</name> <operator>=</operator> <call><name>LDNS_XMALLOC</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>split_len</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>split_str</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>*</operator><name>split_str</name></expr></argument>, <argument><expr><name>longer_str</name><operator>+</operator><name>prefix_len</name></expr></argument>, <argument><expr><name>longer_len</name><operator>-</operator><name>prefix_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>int</name></type>
<name>ldns_radix_array_split</name><parameter_list>(<parameter><decl><type><name>ldns_radix_array_t</name><modifier>*</modifier></type> <name>array</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>key</name></decl></parameter>,
<parameter><decl><type><name>radix_strlen_t</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>radix_strlen_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>ldns_radix_node_t</name><modifier>*</modifier></type> <name>add</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>str_to_add</name> <init>= <expr><name>key</name> <operator>+</operator> <name>pos</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>radix_strlen_t</name></type> <name>strlen_to_add</name> <init>= <expr><name>len</name> <operator>-</operator> <name>pos</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ldns_radix_str_is_prefix</name><argument_list>(<argument><expr><name>str_to_add</name></expr></argument>, <argument><expr><name>strlen_to_add</name></expr></argument>,
<argument><expr><name><name>array</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>array</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>split_str</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dup_str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>radix_strlen_t</name></type> <name>split_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>








<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>strlen_to_add</name> <operator>&lt;</operator> <name><name>array</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>array</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name>strlen_to_add</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ldns_radix_prefix_remainder</name><argument_list>(<argument><expr><name>strlen_to_add</name><operator>+</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>array</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>array</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>split_str</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>split_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>strlen_to_add</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dup_str</name> <operator>=</operator> <call><name>LDNS_XMALLOC</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>strlen_to_add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dup_str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>split_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dup_str</name></expr></argument>, <argument><expr><name>str_to_add</name></expr></argument>, <argument><expr><name>strlen_to_add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ldns_radix_array_space</name><argument_list>(<argument><expr><name>add</name></expr></argument>,
<argument><expr><name><name>array</name><operator>-&gt;</operator><name>str</name><index>[<expr><name>strlen_to_add</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>split_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>dup_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name><name>add</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name><name>array</name><operator>-&gt;</operator><name>edge</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>add</name><operator>-&gt;</operator><name>parent_index</name></name> <operator>=</operator> <name><name>array</name><operator>-&gt;</operator><name>edge</name><operator>-&gt;</operator><name>parent_index</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>add</name><operator>-&gt;</operator><name>array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>edge</name> <operator>=</operator> <name><name>array</name><operator>-&gt;</operator><name>edge</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>add</name><operator>-&gt;</operator><name>array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>str</name> <operator>=</operator> <name>split_str</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>add</name><operator>-&gt;</operator><name>array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <name>split_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>edge</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>add</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>edge</name><operator>-&gt;</operator><name>parent_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name><name>array</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>edge</name></name> <operator>=</operator> <name>add</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>str</name></name> <operator>=</operator> <name>dup_str</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>strlen_to_add</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ldns_radix_str_is_prefix</name><argument_list>(<argument><expr><name><name>array</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>array</name><operator>-&gt;</operator><name>len</name></name></expr></argument>,
<argument><expr><name>str_to_add</name></expr></argument>, <argument><expr><name>strlen_to_add</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>










<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>split_str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>radix_strlen_t</name></type> <name>split_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>array</name><operator>-&gt;</operator><name>len</name></name> <operator>&lt;</operator> <name>strlen_to_add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>strlen_to_add</name> <operator>-</operator> <name><name>array</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ldns_radix_prefix_remainder</name><argument_list>(<argument><expr><name><name>array</name><operator>-&gt;</operator><name>len</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><name>str_to_add</name></expr></argument>, <argument><expr><name>strlen_to_add</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>split_str</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>split_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ldns_radix_array_space</name><argument_list>(<argument><expr><name><name>array</name><operator>-&gt;</operator><name>edge</name></name></expr></argument>,
<argument><expr><name><name>str_to_add</name><index>[<expr><name><name>array</name><operator>-&gt;</operator><name>len</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>split_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name><name>add</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name><name>array</name><operator>-&gt;</operator><name>edge</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>add</name><operator>-&gt;</operator><name>parent_index</name></name> <operator>=</operator> <name><name>str_to_add</name><index>[<expr><name><name>array</name><operator>-&gt;</operator><name>len</name></name></expr>]</index></name> <operator>-</operator>
<name><name>array</name><operator>-&gt;</operator><name>edge</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>edge</name><operator>-&gt;</operator><name>array</name><index>[<expr><name><name>add</name><operator>-&gt;</operator><name>parent_index</name></name></expr>]</index></name><operator>.</operator><name>edge</name> <operator>=</operator> <name>add</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>edge</name><operator>-&gt;</operator><name>array</name><index>[<expr><name><name>add</name><operator>-&gt;</operator><name>parent_index</name></name></expr>]</index></name><operator>.</operator><name>str</name> <operator>=</operator> <name>split_str</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>edge</name><operator>-&gt;</operator><name>array</name><index>[<expr><name><name>add</name><operator>-&gt;</operator><name>parent_index</name></name></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <name>split_len</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>












<decl_stmt><decl><type><name>ldns_radix_node_t</name><modifier>*</modifier></type> <name>common</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>common_str</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s1</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>radix_strlen_t</name></type> <name>common_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>l1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>l2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>common_len</name> <operator>=</operator> <call><name>ldns_radix_str_common</name><argument_list>(<argument><expr><name><name>array</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>array</name><operator>-&gt;</operator><name>len</name></name></expr></argument>,
<argument><expr><name>str_to_add</name></expr></argument>, <argument><expr><name>strlen_to_add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>common_len</name> <operator>&lt;</operator> <name><name>array</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>common_len</name> <operator>&lt;</operator> <name>strlen_to_add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>common</name> <operator>=</operator> <call><name>ldns_radix_new_node</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>common</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>array</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name>common_len</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ldns_radix_prefix_remainder</name><argument_list>(<argument><expr><name>common_len</name><operator>+</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>array</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>array</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>strlen_to_add</name> <operator>-</operator> <name>common_len</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ldns_radix_prefix_remainder</name><argument_list>(<argument><expr><name>common_len</name><operator>+</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><name>str_to_add</name></expr></argument>, <argument><expr><name>strlen_to_add</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>common_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>common_str</name> <operator>=</operator> <call><name>LDNS_XMALLOC</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>common_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>common_str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>common</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>common_str</name></expr></argument>, <argument><expr><name>str_to_add</name></expr></argument>, <argument><expr><name>common_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ldns_radix_array_space</name><argument_list>(<argument><expr><name>common</name></expr></argument>, <argument><expr><name><name>array</name><operator>-&gt;</operator><name>str</name><index>[<expr><name>common_len</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>ldns_radix_array_space</name><argument_list>(<argument><expr><name>common</name></expr></argument>, <argument><expr><name><name>str_to_add</name><index>[<expr><name>common_len</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name><name>common</name><operator>-&gt;</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>common</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>common_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name><name>common</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name><name>array</name><operator>-&gt;</operator><name>edge</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>common</name><operator>-&gt;</operator><name>parent_index</name></name> <operator>=</operator> <name><name>array</name><operator>-&gt;</operator><name>edge</name><operator>-&gt;</operator><name>parent_index</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>edge</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>common</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>edge</name><operator>-&gt;</operator><name>parent_index</name></name> <operator>=</operator> <name><name>array</name><operator>-&gt;</operator><name>str</name><index>[<expr><name>common_len</name></expr>]</index></name> <operator>-</operator>
<name><name>common</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>add</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>common</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>add</name><operator>-&gt;</operator><name>parent_index</name></name> <operator>=</operator> <name><name>str_to_add</name><index>[<expr><name>common_len</name></expr>]</index></name> <operator>-</operator> <name><name>common</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>common</name><operator>-&gt;</operator><name>array</name><index>[<expr><name><name>array</name><operator>-&gt;</operator><name>edge</name><operator>-&gt;</operator><name>parent_index</name></name></expr>]</index></name><operator>.</operator><name>edge</name> <operator>=</operator> <name><name>array</name><operator>-&gt;</operator><name>edge</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>common</name><operator>-&gt;</operator><name>array</name><index>[<expr><name><name>array</name><operator>-&gt;</operator><name>edge</name><operator>-&gt;</operator><name>parent_index</name></name></expr>]</index></name><operator>.</operator><name>str</name> <operator>=</operator> <name>s1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>common</name><operator>-&gt;</operator><name>array</name><index>[<expr><name><name>array</name><operator>-&gt;</operator><name>edge</name><operator>-&gt;</operator><name>parent_index</name></name></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <name>l1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>common</name><operator>-&gt;</operator><name>array</name><index>[<expr><name><name>add</name><operator>-&gt;</operator><name>parent_index</name></name></expr>]</index></name><operator>.</operator><name>edge</name> <operator>=</operator> <name>add</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>common</name><operator>-&gt;</operator><name>array</name><index>[<expr><name><name>add</name><operator>-&gt;</operator><name>parent_index</name></name></expr>]</index></name><operator>.</operator><name>str</name> <operator>=</operator> <name>s2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>common</name><operator>-&gt;</operator><name>array</name><index>[<expr><name><name>add</name><operator>-&gt;</operator><name>parent_index</name></name></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <name>l2</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name><name>array</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>edge</name></name> <operator>=</operator> <name>common</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>str</name></name> <operator>=</operator> <name>common_str</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>common_len</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>int</name></type>
<name>ldns_radix_str_is_prefix</name><parameter_list>(<parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>str1</name></decl></parameter>, <parameter><decl><type><name>radix_strlen_t</name></type> <name>len1</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>str2</name></decl></parameter>, <parameter><decl><type><name>radix_strlen_t</name></type> <name>len2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len1</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len1</name> <operator>&gt;</operator> <name>len2</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>str1</name></expr></argument>, <argument><expr><name>str2</name></expr></argument>, <argument><expr><name>len1</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>











<function><type><specifier>static</specifier> <name>radix_strlen_t</name></type>
<name>ldns_radix_str_common</name><parameter_list>(<parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>str1</name></decl></parameter>, <parameter><decl><type><name>radix_strlen_t</name></type> <name>len1</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>str2</name></decl></parameter>, <parameter><decl><type><name>radix_strlen_t</name></type> <name>len2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>radix_strlen_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>max</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>len1</name><operator>&lt;</operator><name>len2</name><operator>)</operator></expr>?</condition><then><expr><name>len1</name></expr></then><else>:<expr><name>len2</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>max</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>str1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>str2</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>max</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>ldns_radix_node_t</name><modifier>*</modifier></type>
<name>ldns_radix_next_in_subtree</name><parameter_list>(<parameter><decl><type><name>ldns_radix_node_t</name><modifier>*</modifier></type> <name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_radix_node_t</name><modifier>*</modifier></type> <name>next</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>edge</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>edge</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>node</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>edge</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>ldns_radix_next_in_subtree</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>next</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>next</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>ldns_radix_node_t</name><modifier>*</modifier></type>
<name>ldns_radix_prev_from_index</name><parameter_list>(<parameter><decl><type><name>ldns_radix_node_t</name><modifier>*</modifier></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i</name> <init>= <expr><name>index</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>edge</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ldns_radix_node_t</name><modifier>*</modifier></type> <name>prev</name> <init>=
<expr><call><name>ldns_radix_last_in_subtree_incl_self</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>prev</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>prev</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>ldns_radix_node_t</name><modifier>*</modifier></type>
<name>ldns_radix_last_in_subtree_incl_self</name><parameter_list>(<parameter><decl><type><name>ldns_radix_node_t</name><modifier>*</modifier></type> <name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_radix_node_t</name><modifier>*</modifier></type> <name>last</name> <init>= <expr><call><name>ldns_radix_last_in_subtree</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>last</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>last</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>node</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>ldns_radix_node_t</name><modifier>*</modifier></type>
<name>ldns_radix_last_in_subtree</name><parameter_list>(<parameter><decl><type><name>ldns_radix_node_t</name><modifier>*</modifier></type> <name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>len</name></name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>edge</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>edge</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ldns_radix_node_t</name><modifier>*</modifier></type> <name>last</name> <init>=
<expr><call><name>ldns_radix_last_in_subtree</name><argument_list>(
<argument><expr><name><name>node</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>last</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>last</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>edge</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>node</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>edge</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>void</name></type>
<name>ldns_radix_del_fix</name><parameter_list>(<parameter><decl><type><name>ldns_radix_t</name><modifier>*</modifier></type> <name>tree</name></decl></parameter>, <parameter><decl><type><name>ldns_radix_node_t</name><modifier>*</modifier></type> <name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><name>node</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>

<return>return;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ldns_radix_cleanup_onechild</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ldns_radix_node_t</name><modifier>*</modifier></type> <name>parent</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>parent</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>parent</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ldns_radix_node_free</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tree</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ldns_radix_cleanup_leaf</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>node</name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>




<return>return;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<return>return;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type>
<name>ldns_radix_cleanup_onechild</name><parameter_list>(<parameter><decl><type><name>ldns_radix_node_t</name><modifier>*</modifier></type> <name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>join_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>radix_strlen_t</name></type> <name>join_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>parent_index</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>parent_index</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_radix_node_t</name><modifier>*</modifier></type> <name>child</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>edge</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_radix_node_t</name><modifier>*</modifier></type> <name>parent</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>parent</name></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>parent_index</name> <operator>&lt;</operator> <name><name>parent</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>join_len</name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>parent_index</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>+</operator> <name><name>node</name><operator>-&gt;</operator><name>array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>join_str</name> <operator>=</operator> <call><name>LDNS_XMALLOC</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>join_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>join_str</name></expr>)</condition> <block>{<block_content>





<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>join_str</name></expr></argument>, <argument><expr><name><name>parent</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>parent_index</name></expr>]</index></name><operator>.</operator><name>str</name></expr></argument>,
<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>parent_index</name></expr>]</index></name><operator>.</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>join_str</name><index>[<expr><name><name>parent</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>parent_index</name></expr>]</index></name><operator>.</operator><name>len</name></expr>]</index></name> <operator>=</operator> <name><name>child</name><operator>-&gt;</operator><name>parent_index</name></name> <operator>+</operator>
<name><name>node</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>join_str</name> <operator>+</operator> <name><name>parent</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>parent_index</name></expr>]</index></name><operator>.</operator><name>len</name><operator>+</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><name><name>node</name><operator>-&gt;</operator><name>array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>str</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>parent_index</name></expr>]</index></name><operator>.</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>parent_index</name></expr>]</index></name><operator>.</operator><name>str</name> <operator>=</operator> <name>join_str</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>parent_index</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <name>join_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>parent_index</name></expr>]</index></name><operator>.</operator><name>edge</name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>parent_index</name></name> <operator>=</operator> <name>parent_index</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_radix_node_free</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type>
<name>ldns_radix_cleanup_leaf</name><parameter_list>(<parameter><decl><type><name>ldns_radix_node_t</name><modifier>*</modifier></type> <name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>parent_index</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>parent_index</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_radix_node_t</name><modifier>*</modifier></type> <name>parent</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>parent</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>parent_index</name> <operator>&lt;</operator> <name><name>parent</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_radix_node_free</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>parent_index</name></expr>]</index></name><operator>.</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>parent_index</name></expr>]</index></name><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>parent_index</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>parent_index</name></expr>]</index></name><operator>.</operator><name>edge</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_radix_node_array_free</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>parent_index</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_radix_node_array_free_front</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ldns_radix_node_array_free_end</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>void</name></type>
<name>ldns_radix_node_free</name><parameter_list>(<parameter><decl><type><name>ldns_radix_node_t</name><modifier>*</modifier></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>arg</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>node</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>klen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type>
<name>ldns_radix_node_array_free</name><parameter_list>(<parameter><decl><type><name>ldns_radix_node_t</name><modifier>*</modifier></type> <name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>array</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type>
<name>ldns_radix_node_array_free_front</name><parameter_list>(<parameter><decl><type><name>ldns_radix_node_t</name><modifier>*</modifier></type> <name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>n</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>len</name></name> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>edge</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name><name>node</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_radix_node_array_free</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>n</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>n</name> <operator>&lt;=</operator> <operator>(</operator><literal type="number">255</literal> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>node</name><operator>-&gt;</operator><name>offset</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name>n</name><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>ldns_radix_array_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>len</name></name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>edge</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>edge</name><operator>-&gt;</operator><name>parent_index</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>ldns_radix_array_reduce</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type>
<name>ldns_radix_node_array_free_end</name><parameter_list>(<parameter><decl><type><name>ldns_radix_node_t</name><modifier>*</modifier></type> <name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>n</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>len</name></name> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>array</name><index>[<expr><name><name>node</name><operator>-&gt;</operator><name>len</name></name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>n</name></expr>]</index></name><operator>.</operator><name>edge</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name><name>node</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_radix_node_array_free</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>n</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>len</name></name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_radix_array_reduce</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type>
<name>ldns_radix_array_reduce</name><parameter_list>(<parameter><decl><type><name>ldns_radix_node_t</name><modifier>*</modifier></type> <name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>len</name></name> <operator>&lt;=</operator> <name><name>node</name><operator>-&gt;</operator><name>capacity</name></name><operator>/</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>len</name></name> <operator>!=</operator> <name><name>node</name><operator>-&gt;</operator><name>capacity</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ldns_radix_array_t</name><modifier>*</modifier></type> <name>a</name> <init>= <expr><call><name>LDNS_XMALLOC</name><argument_list>(<argument><expr><name>ldns_radix_array_t</name></expr></argument>,
<argument><expr><name><name>node</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>a</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>array</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ldns_radix_array_t</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name><name>node</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>array</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>void</name></type>
<name>ldns_radix_self_or_prev</name><parameter_list>(<parameter><decl><type><name>ldns_radix_node_t</name><modifier>*</modifier></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>ldns_radix_node_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <call><name>ldns_radix_prev</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return;</return>
</block_content>}</block></function>
</unit>
