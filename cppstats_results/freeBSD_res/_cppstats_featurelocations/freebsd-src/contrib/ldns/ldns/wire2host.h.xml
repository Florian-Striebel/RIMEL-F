<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/ldns/ldns/wire2host.h">
















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LDNS_WIRE2HOST_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_WIRE2HOST_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ldns/rdata.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ldns/common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ldns/error.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ldns/rr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ldns/packet.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_HEADER_SIZE</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_RD_MASK</name></cpp:macro> <cpp:value>0x01U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_RD_SHIFT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_RD_WIRE</name><parameter_list>(<parameter><type><name>wirebuf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(wirebuf+2) &amp; LDNS_RD_MASK)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_RD_SET</name><parameter_list>(<parameter><type><name>wirebuf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(wirebuf+2) |= LDNS_RD_MASK)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_RD_CLR</name><parameter_list>(<parameter><type><name>wirebuf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(wirebuf+2) &amp;= ~LDNS_RD_MASK)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_TC_MASK</name></cpp:macro> <cpp:value>0x02U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_TC_SHIFT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_TC_WIRE</name><parameter_list>(<parameter><type><name>wirebuf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(wirebuf+2) &amp; LDNS_TC_MASK)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_TC_SET</name><parameter_list>(<parameter><type><name>wirebuf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(wirebuf+2) |= LDNS_TC_MASK)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_TC_CLR</name><parameter_list>(<parameter><type><name>wirebuf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(wirebuf+2) &amp;= ~LDNS_TC_MASK)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_AA_MASK</name></cpp:macro> <cpp:value>0x04U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_AA_SHIFT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_AA_WIRE</name><parameter_list>(<parameter><type><name>wirebuf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(wirebuf+2) &amp; LDNS_AA_MASK)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_AA_SET</name><parameter_list>(<parameter><type><name>wirebuf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(wirebuf+2) |= LDNS_AA_MASK)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_AA_CLR</name><parameter_list>(<parameter><type><name>wirebuf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(wirebuf+2) &amp;= ~LDNS_AA_MASK)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_OPCODE_MASK</name></cpp:macro> <cpp:value>0x78U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_OPCODE_SHIFT</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_OPCODE_WIRE</name><parameter_list>(<parameter><type><name>wirebuf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((*(wirebuf+2) &amp; LDNS_OPCODE_MASK) &gt;&gt; LDNS_OPCODE_SHIFT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_OPCODE_SET</name><parameter_list>(<parameter><type><name>wirebuf</name></type></parameter>, <parameter><type><name>opcode</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(wirebuf+2) = ((*(wirebuf+2)) &amp; ~LDNS_OPCODE_MASK) | ((opcode) &lt;&lt; LDNS_OPCODE_SHIFT))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_QR_MASK</name></cpp:macro> <cpp:value>0x80U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_QR_SHIFT</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_QR_WIRE</name><parameter_list>(<parameter><type><name>wirebuf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(wirebuf+2) &amp; LDNS_QR_MASK)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_QR_SET</name><parameter_list>(<parameter><type><name>wirebuf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(wirebuf+2) |= LDNS_QR_MASK)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_QR_CLR</name><parameter_list>(<parameter><type><name>wirebuf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(wirebuf+2) &amp;= ~LDNS_QR_MASK)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_RCODE_MASK</name></cpp:macro> <cpp:value>0x0fU</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_RCODE_SHIFT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_RCODE_WIRE</name><parameter_list>(<parameter><type><name>wirebuf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(wirebuf+3) &amp; LDNS_RCODE_MASK)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_RCODE_SET</name><parameter_list>(<parameter><type><name>wirebuf</name></type></parameter>, <parameter><type><name>rcode</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(wirebuf+3) = ((*(wirebuf+3)) &amp; ~LDNS_RCODE_MASK) | (rcode))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_CD_MASK</name></cpp:macro> <cpp:value>0x10U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_CD_SHIFT</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_CD_WIRE</name><parameter_list>(<parameter><type><name>wirebuf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(wirebuf+3) &amp; LDNS_CD_MASK)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_CD_SET</name><parameter_list>(<parameter><type><name>wirebuf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(wirebuf+3) |= LDNS_CD_MASK)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_CD_CLR</name><parameter_list>(<parameter><type><name>wirebuf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(wirebuf+3) &amp;= ~LDNS_CD_MASK)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_AD_MASK</name></cpp:macro> <cpp:value>0x20U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_AD_SHIFT</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_AD_WIRE</name><parameter_list>(<parameter><type><name>wirebuf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(wirebuf+3) &amp; LDNS_AD_MASK)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_AD_SET</name><parameter_list>(<parameter><type><name>wirebuf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(wirebuf+3) |= LDNS_AD_MASK)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_AD_CLR</name><parameter_list>(<parameter><type><name>wirebuf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(wirebuf+3) &amp;= ~LDNS_AD_MASK)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_Z_MASK</name></cpp:macro> <cpp:value>0x40U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_Z_SHIFT</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_Z_WIRE</name><parameter_list>(<parameter><type><name>wirebuf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(wirebuf+3) &amp; LDNS_Z_MASK)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_Z_SET</name><parameter_list>(<parameter><type><name>wirebuf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(wirebuf+3) |= LDNS_Z_MASK)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_Z_CLR</name><parameter_list>(<parameter><type><name>wirebuf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(wirebuf+3) &amp;= ~LDNS_Z_MASK)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_RA_MASK</name></cpp:macro> <cpp:value>0x80U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_RA_SHIFT</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_RA_WIRE</name><parameter_list>(<parameter><type><name>wirebuf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(wirebuf+3) &amp; LDNS_RA_MASK)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_RA_SET</name><parameter_list>(<parameter><type><name>wirebuf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(wirebuf+3) |= LDNS_RA_MASK)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_RA_CLR</name><parameter_list>(<parameter><type><name>wirebuf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*(wirebuf+3) &amp;= ~LDNS_RA_MASK)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_ID_WIRE</name><parameter_list>(<parameter><type><name>wirebuf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ldns_read_uint16(wirebuf))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_ID_SET</name><parameter_list>(<parameter><type><name>wirebuf</name></type></parameter>, <parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ldns_write_uint16(wirebuf, id))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_QDCOUNT_OFF</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_QDCOUNT</name><parameter_list>(<parameter><type><name>wirebuf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ldns_read_uint16(wirebuf+LDNS_QDCOUNT_OFF))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_ANCOUNT_OFF</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_ANCOUNT</name><parameter_list>(<parameter><type><name>wirebuf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ldns_read_uint16(wirebuf+LDNS_ANCOUNT_OFF))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_NSCOUNT_OFF</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_NSCOUNT</name><parameter_list>(<parameter><type><name>wirebuf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ldns_read_uint16(wirebuf+LDNS_NSCOUNT_OFF))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_ARCOUNT_OFF</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_ARCOUNT</name><parameter_list>(<parameter><type><name>wirebuf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ldns_read_uint16(wirebuf+LDNS_ARCOUNT_OFF))</cpp:value></cpp:define>











<function_decl><type><name>ldns_status</name></type> <name>ldns_wire2pkt</name><parameter_list>(<parameter><decl><type><name>ldns_pkt</name> <modifier>*</modifier><modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>ldns_status</name></type> <name>ldns_buffer2pkt_wire</name><parameter_list>(<parameter><decl><type><name>ldns_pkt</name> <modifier>*</modifier><modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_buffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>;</function_decl>














<function_decl><type><name>ldns_status</name></type> <name>ldns_wire2dname</name><parameter_list>(<parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier><modifier>*</modifier></type><name>dname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>wire</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>max</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>)</parameter_list>;</function_decl>


















<function_decl><type><name>ldns_status</name></type> <name>ldns_wire2rdf</name><parameter_list>(<parameter><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>rr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>wire</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>max</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>)</parameter_list>;</function_decl>
















<function_decl><type><name>ldns_status</name></type> <name>ldns_wire2rr</name><parameter_list>(<parameter><decl><type><name>ldns_rr</name> <modifier>*</modifier><modifier>*</modifier></type><name>rr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>wire</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>max</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>, <parameter><decl><type><name>ldns_pkt_section</name></type> <name>section</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
