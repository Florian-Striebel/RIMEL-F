<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/ldns/ldns/dane.h">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LDNS_DANE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_DANE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ldns/common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ldns/rdata.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ldns/rr.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LDNS_BUILD_CONFIG_HAVE_SSL</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/ssl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/err.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<enum>enum <name>ldns_enum_tlsa_certificate_usage</name>
<block>{

<decl><name>LDNS_TLSA_USAGE_PKIX_TA</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>LDNS_TLSA_USAGE_CA_CONSTRAINT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>LDNS_TLSA_USAGE_PKIX_EE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>LDNS_TLSA_USAGE_SERVICE_CERTIFICATE_CONSTRAINT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>LDNS_TLSA_USAGE_DANE_TA</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>LDNS_TLSA_USAGE_TRUST_ANCHOR_ASSERTION</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>LDNS_TLSA_USAGE_DANE_EE</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>LDNS_TLSA_USAGE_DOMAIN_ISSUED_CERTIFICATE</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,

<decl><name>LDNS_TLSA_USAGE_PRIVCERT</name> <init>= <expr><literal type="number">255</literal></expr></init></decl>
}</block>;</enum>
<typedef>typedef <type><name><name>enum</name> <name>ldns_enum_tlsa_certificate_usage</name></name></type> <name>ldns_tlsa_certificate_usage</name>;</typedef>




<enum>enum <name>ldns_enum_tlsa_selector</name>
<block>{




<decl><name>LDNS_TLSA_SELECTOR_CERT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>LDNS_TLSA_SELECTOR_FULL_CERTIFICATE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,





<decl><name>LDNS_TLSA_SELECTOR_SPKI</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>LDNS_TLSA_SELECTOR_SUBJECTPUBLICKEYINFO</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,


<decl><name>LDNS_TLSA_SELECTOR_PRIVSEL</name> <init>= <expr><literal type="number">255</literal></expr></init></decl>
}</block>;</enum>
<typedef>typedef <type><name><name>enum</name> <name>ldns_enum_tlsa_selector</name></name></type> <name>ldns_tlsa_selector</name>;</typedef>




<enum>enum <name>ldns_enum_tlsa_matching_type</name>
<block>{

<decl><name>LDNS_TLSA_MATCHING_TYPE_FULL</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>LDNS_TLSA_MATCHING_TYPE_NO_HASH_USED</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>LDNS_TLSA_MATCHING_TYPE_SHA2_256</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>LDNS_TLSA_MATCHING_TYPE_SHA256</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>LDNS_TLSA_MATCHING_TYPE_SHA2_512</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>LDNS_TLSA_MATCHING_TYPE_SHA512</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>LDNS_TLSA_MATCHING_TYPE_PRIVMATCH</name> <init>= <expr><literal type="number">255</literal></expr></init></decl>
}</block>;</enum>
<typedef>typedef <type><name><name>enum</name> <name>ldns_enum_tlsa_matching_type</name></name></type> <name>ldns_tlsa_matching_type</name>;</typedef>




<enum>enum <name>ldns_enum_dane_transport</name>
<block>{

<decl><name>LDNS_DANE_TRANSPORT_TCP</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>LDNS_DANE_TRANSPORT_UDP</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>LDNS_DANE_TRANSPORT_SCTP</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>
}</block>;</enum>
<typedef>typedef <type><name><name>enum</name> <name>ldns_enum_dane_transport</name></name></type> <name>ldns_dane_transport</name>;</typedef>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LDNS_BUILD_CONFIG_USE_DANE</name></expr></cpp:if>










<function_decl><type><name>ldns_status</name></type> <name>ldns_dane_create_tlsa_owner</name><parameter_list>(<parameter><decl><type><name>ldns_rdf</name><modifier>*</modifier><modifier>*</modifier></type> <name>tlsa_owner</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name><modifier>*</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>port</name></decl></parameter>,
<parameter><decl><type><name>ldns_dane_transport</name></type> <name>transport</name></decl></parameter>)</parameter_list>;</function_decl>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LDNS_BUILD_CONFIG_HAVE_SSL</name></expr></cpp:if>











<function_decl><type><name>ldns_status</name></type> <name>ldns_dane_cert2rdf</name><parameter_list>(<parameter><decl><type><name>ldns_rdf</name><modifier>*</modifier><modifier>*</modifier></type> <name>rdf</name></decl></parameter>, <parameter><decl><type><name>X509</name><modifier>*</modifier></type> <name>cert</name></decl></parameter>,
<parameter><decl><type><name>ldns_tlsa_selector</name></type> <name>selector</name></decl></parameter>,
<parameter><decl><type><name>ldns_tlsa_matching_type</name></type> <name>matching_type</name></decl></parameter>)</parameter_list>;</function_decl>






























<decl_stmt><decl><type><name>ldns_status</name></type> <name>ldns_dane_select_certificate</name><argument_list>(<argument><expr><name>X509</name><operator>*</operator><operator>*</operator> <name>selected_cert</name></expr></argument>,
<argument><expr><name>X509</name><operator>*</operator> <name>cert</name></expr></argument>, <argument><expr><call><name>STACK_OF</name><argument_list>(<argument><expr><name>X509</name></expr></argument>)</argument_list></call><operator>*</operator> <name>extra_certs</name></expr></argument>,
<argument><expr><name>X509_STORE</name><operator>*</operator> <name>pkix_validation_store</name></expr></argument>,
<argument><expr><name>ldns_tlsa_certificate_usage</name> <name>cert_usage</name></expr></argument>, <argument><expr><name>int</name> <name>index</name></expr></argument>)</argument_list></decl>;</decl_stmt>














<function_decl><type><name>ldns_status</name></type> <name>ldns_dane_create_tlsa_rr</name><parameter_list>(<parameter><decl><type><name>ldns_rr</name><modifier>*</modifier><modifier>*</modifier></type> <name>tlsa</name></decl></parameter>,
<parameter><decl><type><name>ldns_tlsa_certificate_usage</name></type> <name>certificate_usage</name></decl></parameter>,
<parameter><decl><type><name>ldns_tlsa_selector</name></type> <name>selector</name></decl></parameter>,
<parameter><decl><type><name>ldns_tlsa_matching_type</name></type> <name>matching_type</name></decl></parameter>,
<parameter><decl><type><name>X509</name><modifier>*</modifier></type> <name>cert</name></decl></parameter>)</parameter_list>;</function_decl>








































<decl_stmt><decl><type><name>ldns_status</name></type> <name>ldns_dane_verify_rr</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ldns_rr</name><operator>*</operator> <name>tlsa_rr</name></expr></argument>,
<argument><expr><name>X509</name><operator>*</operator> <name>cert</name></expr></argument>, <argument><expr><call><name>STACK_OF</name><argument_list>(<argument><expr><name>X509</name></expr></argument>)</argument_list></call><operator>*</operator> <name>extra_certs</name></expr></argument>,
<argument><expr><name>X509_STORE</name><operator>*</operator> <name>pkix_validation_store</name></expr></argument>)</argument_list></decl>;</decl_stmt>


































<decl_stmt><decl><type><name>ldns_status</name></type> <name>ldns_dane_verify</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ldns_rr_list</name><operator>*</operator> <name>tlsas</name></expr></argument>,
<argument><expr><name>X509</name><operator>*</operator> <name>cert</name></expr></argument>, <argument><expr><call><name>STACK_OF</name><argument_list>(<argument><expr><name>X509</name></expr></argument>)</argument_list></call><operator>*</operator> <name>extra_certs</name></expr></argument>,
<argument><expr><name>X509_STORE</name><operator>*</operator> <name>pkix_validation_store</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
