<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/ldns/ldns/sha2.h">












































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__LDNS_SHA2_H__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__LDNS_SHA2_H__</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LDNS_BUILD_CONFIG_HAVE_INTTYPES_H</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_SHA256_BLOCK_LENGTH</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_SHA256_DIGEST_LENGTH</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_SHA256_DIGEST_STRING_LENGTH</name></cpp:macro> <cpp:value>(LDNS_SHA256_DIGEST_LENGTH * 2 + 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_SHA384_BLOCK_LENGTH</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_SHA384_DIGEST_LENGTH</name></cpp:macro> <cpp:value>48</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_SHA384_DIGEST_STRING_LENGTH</name></cpp:macro> <cpp:value>(LDNS_SHA384_DIGEST_LENGTH * 2 + 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_SHA512_BLOCK_LENGTH</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_SHA512_DIGEST_LENGTH</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_SHA512_DIGEST_STRING_LENGTH</name></cpp:macro> <cpp:value>(LDNS_SHA512_DIGEST_LENGTH * 2 + 1)</cpp:value></cpp:define>




<typedef>typedef <type><struct>struct <name>_ldns_sha256_CTX</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>state</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>bitcount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buffer</name><index>[<expr><name>LDNS_SHA256_BLOCK_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>ldns_sha256_CTX</name>;</typedef>
<typedef>typedef <type><struct>struct <name>_ldns_sha512_CTX</name> <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>state</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>bitcount</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buffer</name><index>[<expr><name>LDNS_SHA512_BLOCK_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>ldns_sha512_CTX</name>;</typedef>

<typedef>typedef <type><name>ldns_sha512_CTX</name></type> <name>ldns_sha384_CTX</name>;</typedef>



<function_decl><type><name>void</name></type> <name>ldns_sha256_init</name><parameter_list>(<parameter><decl><type><name>ldns_sha256_CTX</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ldns_sha256_update</name><parameter_list>(<parameter><decl><type><name>ldns_sha256_CTX</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ldns_sha256_final</name><parameter_list>(<parameter><decl><type><name><name>uint8_t</name><index>[<expr><name>LDNS_SHA256_DIGEST_LENGTH</name></expr>]</index></name></type></decl></parameter>, <parameter><decl><type><name>ldns_sha256_CTX</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ldns_sha384_init</name><parameter_list>(<parameter><decl><type><name>ldns_sha384_CTX</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ldns_sha384_update</name><parameter_list>(<parameter><decl><type><name>ldns_sha384_CTX</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ldns_sha384_final</name><parameter_list>(<parameter><decl><type><name><name>uint8_t</name><index>[<expr><name>LDNS_SHA384_DIGEST_LENGTH</name></expr>]</index></name></type></decl></parameter>, <parameter><decl><type><name>ldns_sha384_CTX</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ldns_sha512_init</name><parameter_list>(<parameter><decl><type><name>ldns_sha512_CTX</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ldns_sha512_update</name><parameter_list>(<parameter><decl><type><name>ldns_sha512_CTX</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ldns_sha512_final</name><parameter_list>(<parameter><decl><type><name><name>uint8_t</name><index>[<expr><name>LDNS_SHA512_DIGEST_LENGTH</name></expr>]</index></name></type></decl></parameter>, <parameter><decl><type><name>ldns_sha512_CTX</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ldns_sha256</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>data_len</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>digest</name></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ldns_sha384</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>data_len</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>digest</name></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ldns_sha512</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>data_len</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>digest</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
