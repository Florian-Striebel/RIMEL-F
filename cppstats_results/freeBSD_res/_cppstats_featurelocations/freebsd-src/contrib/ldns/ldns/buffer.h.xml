<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/ldns/ldns/buffer.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LDNS_BUFFER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_BUFFER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ldns/error.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ldns/common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ldns/util.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_MIN_BUFLEN</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define>
















<struct>struct <name>ldns_struct_buffer</name>
<block>{

<decl_stmt><decl><type><name>size_t</name></type> <name>_position</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>_limit</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>_capacity</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_data</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name></type> <name>_fixed</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>




<decl_stmt><decl><type><name>ldns_status</name></type> <name>_status</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><name><name>struct</name> <name>ldns_struct_buffer</name></name></type> <name>ldns_buffer</name>;</typedef>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>INLINE</name> <name>void</name></type>
<name>ldns_buffer_invariant</name><parameter_list>(<parameter><function_decl><type><specifier>const</specifier> <name>ldns_buffer</name> <modifier>*</modifier></type><name>ATTR_UNUSED</name><parameter_list>(<parameter><decl><type><name>buffer</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><name>INLINE</name> <name>void</name></type>
<name>ldns_buffer_invariant</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_buffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>buffer</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>_position</name></name> <operator>&lt;=</operator> <name><name>buffer</name><operator>-&gt;</operator><name>_limit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>_limit</name></name> <operator>&lt;=</operator> <name><name>buffer</name><operator>-&gt;</operator><name>_capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>_data</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<function_decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>ldns_buffer_new</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>capacity</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>void</name></type> <name>ldns_buffer_new_frm_data</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>






<function><type><name>INLINE</name> <name>void</name></type> <name>ldns_buffer_clear</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_invariant</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>_position</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>_limit</name></name> <operator>=</operator> <name><name>buffer</name><operator>-&gt;</operator><name>_capacity</name></name></expr>;</expr_stmt>
</block_content>}</block></function>









<function><type><name>INLINE</name> <name>void</name></type> <name>ldns_buffer_flip</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_invariant</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>_limit</name></name> <operator>=</operator> <name><name>buffer</name><operator>-&gt;</operator><name>_position</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>_position</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>INLINE</name> <name>void</name></type> <name>ldns_buffer_rewind</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_invariant</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>_position</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>INLINE</name> <name>size_t</name></type>
<name>ldns_buffer_position</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_buffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>buffer</name><operator>-&gt;</operator><name>_position</name></name></expr>;</return>
</block_content>}</block></function>







<function><type><name>INLINE</name> <name>void</name></type>
<name>ldns_buffer_set_position</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>mark</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>mark</name> <operator>&lt;=</operator> <name><name>buffer</name><operator>-&gt;</operator><name>_limit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>_position</name></name> <operator>=</operator> <name>mark</name></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><name>INLINE</name> <name>void</name></type>
<name>ldns_buffer_skip</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>_position</name></name> <operator>+</operator> <name>count</name> <operator>&lt;=</operator> <name><name>buffer</name><operator>-&gt;</operator><name>_limit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>_position</name></name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>INLINE</name> <name>size_t</name></type>
<name>ldns_buffer_limit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_buffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>buffer</name><operator>-&gt;</operator><name>_limit</name></name></expr>;</return>
</block_content>}</block></function>







<function><type><name>INLINE</name> <name>void</name></type>
<name>ldns_buffer_set_limit</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>limit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>limit</name> <operator>&lt;=</operator> <name><name>buffer</name><operator>-&gt;</operator><name>_capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>_limit</name></name> <operator>=</operator> <name>limit</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buffer</name><operator>-&gt;</operator><name>_position</name></name> <operator>&gt;</operator> <name><name>buffer</name><operator>-&gt;</operator><name>_limit</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>_position</name></name> <operator>=</operator> <name><name>buffer</name><operator>-&gt;</operator><name>_limit</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>






<function><type><name>INLINE</name> <name>size_t</name></type>
<name>ldns_buffer_capacity</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_buffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>buffer</name><operator>-&gt;</operator><name>_capacity</name></name></expr>;</return>
</block_content>}</block></function>









<function_decl><type><name>bool</name></type> <name>ldns_buffer_set_capacity</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>capacity</name></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>bool</name></type> <name>ldns_buffer_reserve</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>amount</name></decl></parameter>)</parameter_list>;</function_decl>







<function><type><name>INLINE</name> <name>uint8_t</name> <modifier>*</modifier></type>
<name>ldns_buffer_at</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_buffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>at</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>at</name> <operator>&lt;=</operator> <name><name>buffer</name><operator>-&gt;</operator><name>_limit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>buffer</name><operator>-&gt;</operator><name>_data</name></name> <operator>+</operator> <name>at</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>INLINE</name> <name>uint8_t</name> <modifier>*</modifier></type>
<name>ldns_buffer_begin</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_buffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_buffer_at</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><name>INLINE</name> <name>uint8_t</name> <modifier>*</modifier></type>
<name>ldns_buffer_end</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_buffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_buffer_at</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>_limit</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><name>INLINE</name> <name>uint8_t</name> <modifier>*</modifier></type>
<name>ldns_buffer_current</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_buffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_buffer_at</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>_position</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>








<function><type><name>INLINE</name> <name>size_t</name></type>
<name>ldns_buffer_remaining_at</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_buffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>at</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_invariant</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>at</name> <operator>&lt;=</operator> <name><name>buffer</name><operator>-&gt;</operator><name>_limit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>buffer</name><operator>-&gt;</operator><name>_limit</name></name> <operator>-</operator> <name>at</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>INLINE</name> <name>size_t</name></type>
<name>ldns_buffer_remaining</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_buffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_buffer_remaining_at</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>_position</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>










<function><type><name>INLINE</name> <name>int</name></type>
<name>ldns_buffer_available_at</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_buffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>at</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>count</name> <operator>&lt;=</operator> <call><name>ldns_buffer_remaining_at</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>at</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>







<function><type><name>INLINE</name> <name>int</name></type>
<name>ldns_buffer_available</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_buffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_buffer_available_at</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>_position</name></name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>








<function><type><name>INLINE</name> <name>void</name></type>
<name>ldns_buffer_write_at</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>at</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>ldns_buffer_available_at</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>at</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>_data</name></name> <operator>+</operator> <name>at</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>INLINE</name> <name>void</name></type>
<name>ldns_buffer_write</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_write_at</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>_position</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>_position</name></name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>INLINE</name> <name>void</name></type>
<name>ldns_buffer_write_string_at</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>at</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_write_at</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>at</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>INLINE</name> <name>void</name></type>
<name>ldns_buffer_write_string</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_write</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>INLINE</name> <name>void</name></type>
<name>ldns_buffer_write_u8_at</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>at</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>ldns_buffer_available_at</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>at</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>_data</name><index>[<expr><name>at</name></expr>]</index></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>INLINE</name> <name>void</name></type>
<name>ldns_buffer_write_u8</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_write_u8_at</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>_position</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>_position</name></name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>INLINE</name> <name>void</name></type>
<name>ldns_buffer_write_u16_at</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>at</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>ldns_buffer_available_at</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>at</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_write_uint16</name><argument_list>(<argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>_data</name></name> <operator>+</operator> <name>at</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>INLINE</name> <name>void</name></type>
<name>ldns_buffer_write_u16</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_write_u16_at</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>_position</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>_position</name></name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>INLINE</name> <name>void</name></type>
<name>ldns_buffer_write_u32_at</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>at</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>ldns_buffer_available_at</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>at</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_write_uint32</name><argument_list>(<argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>_data</name></name> <operator>+</operator> <name>at</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>INLINE</name> <name>void</name></type>
<name>ldns_buffer_write_u32</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_write_u32_at</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>_position</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>_position</name></name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><name>INLINE</name> <name>void</name></type>
<name>ldns_buffer_read_at</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_buffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>at</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>ldns_buffer_available_at</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>at</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>_data</name></name> <operator>+</operator> <name>at</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>INLINE</name> <name>void</name></type>
<name>ldns_buffer_read</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_read_at</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>_position</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>_position</name></name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>INLINE</name> <name>uint8_t</name></type>
<name>ldns_buffer_read_u8_at</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_buffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>at</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>ldns_buffer_available_at</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>at</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>buffer</name><operator>-&gt;</operator><name>_data</name><index>[<expr><name>at</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>






<function><type><name>INLINE</name> <name>uint8_t</name></type>
<name>ldns_buffer_read_u8</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>result</name> <init>= <expr><call><name>ldns_buffer_read_u8_at</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>_position</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>_position</name></name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>INLINE</name> <name>uint16_t</name></type>
<name>ldns_buffer_read_u16_at</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>at</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>ldns_buffer_available_at</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>at</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ldns_read_uint16</name><argument_list>(<argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>_data</name></name> <operator>+</operator> <name>at</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><name>INLINE</name> <name>uint16_t</name></type>
<name>ldns_buffer_read_u16</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>result</name> <init>= <expr><call><name>ldns_buffer_read_u16_at</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>_position</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>_position</name></name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>INLINE</name> <name>uint32_t</name></type>
<name>ldns_buffer_read_u32_at</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>at</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>ldns_buffer_available_at</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>at</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ldns_read_uint32</name><argument_list>(<argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>_data</name></name> <operator>+</operator> <name>at</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><name>INLINE</name> <name>uint32_t</name></type>
<name>ldns_buffer_read_u32</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>result</name> <init>= <expr><call><name>ldns_buffer_read_u32_at</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>_position</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>_position</name></name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>INLINE</name> <name>ldns_status</name></type>
<name>ldns_buffer_status</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_buffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>buffer</name><operator>-&gt;</operator><name>_status</name></name></expr>;</return>
</block_content>}</block></function>






<function><type><name>INLINE</name> <name>bool</name></type>
<name>ldns_buffer_status_ok</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_buffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>buffer</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>ldns_buffer_status</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LDNS_STATUS_OK</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>







<function_decl><type><name>int</name></type> <name>ldns_buffer_printf</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>void</name></type> <name>ldns_buffer_free</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>void</name> <modifier>*</modifier></type><name>ldns_buffer_export</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>void</name></type> <name>ldns_buffer_copy</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name><modifier>*</modifier></type> <name>result</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_buffer</name><modifier>*</modifier></type> <name>from</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
