<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/ldns/ldns/rbtree.h">









































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LDNS_RBTREE_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_RBTREE_H_</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<typedef>typedef <type><name><name>struct</name> <name>ldns_rbnode_t</name></name></type> <name>ldns_rbnode_t</name>;</typedef>



<struct>struct <name>ldns_rbnode_t</name> <block>{

<decl_stmt><decl><type><name>ldns_rbnode_t</name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ldns_rbnode_t</name> <modifier>*</modifier></type><name>left</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ldns_rbnode_t</name> <modifier>*</modifier></type><name>right</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>color</name></decl>;</decl_stmt>
}</block>;</struct>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_RBTREE_NULL</name></cpp:macro> <cpp:value>&amp;ldns_rbtree_null_node</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>extern</specifier> <name>ldns_rbnode_t</name></type> <name>ldns_rbtree_null_node</name></decl>;</decl_stmt>


<typedef>typedef <type><name><name>struct</name> <name>ldns_rbtree_t</name></name></type> <name>ldns_rbtree_t</name>;</typedef>

<struct>struct <name>ldns_rbtree_t</name> <block>{

<decl_stmt><decl><type><name>ldns_rbnode_t</name> <modifier>*</modifier></type><name>root</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>;</decl_stmt>





<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>cmp</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>






<function_decl><type><name>ldns_rbtree_t</name> <modifier>*</modifier></type><name>ldns_rbtree_create</name><parameter_list>(<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>cmpf</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>ldns_rbtree_free</name><parameter_list>(<parameter><decl><type><name>ldns_rbtree_t</name> <modifier>*</modifier></type><name>rbtree</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>void</name></type> <name>ldns_rbtree_init</name><parameter_list>(<parameter><decl><type><name>ldns_rbtree_t</name> <modifier>*</modifier></type><name>rbtree</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>cmpf</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>ldns_rbnode_t</name> <modifier>*</modifier></type><name>ldns_rbtree_insert</name><parameter_list>(<parameter><decl><type><name>ldns_rbtree_t</name> <modifier>*</modifier></type><name>rbtree</name></decl></parameter>, <parameter><decl><type><name>ldns_rbnode_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>void</name></type> <name>ldns_rbtree_insert_vref</name><parameter_list>(<parameter><decl><type><name>ldns_rbnode_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>rbtree</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>ldns_rbnode_t</name> <modifier>*</modifier></type><name>ldns_rbtree_delete</name><parameter_list>(<parameter><decl><type><name>ldns_rbtree_t</name> <modifier>*</modifier></type><name>rbtree</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>ldns_rbnode_t</name> <modifier>*</modifier></type><name>ldns_rbtree_search</name><parameter_list>(<parameter><decl><type><name>ldns_rbtree_t</name> <modifier>*</modifier></type><name>rbtree</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>int</name></type> <name>ldns_rbtree_find_less_equal</name><parameter_list>(<parameter><decl><type><name>ldns_rbtree_t</name> <modifier>*</modifier></type><name>rbtree</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
<parameter><decl><type><name>ldns_rbnode_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>ldns_rbnode_t</name> <modifier>*</modifier></type><name>ldns_rbtree_first</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_rbtree_t</name> <modifier>*</modifier></type><name>rbtree</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>ldns_rbnode_t</name> <modifier>*</modifier></type><name>ldns_rbtree_last</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_rbtree_t</name> <modifier>*</modifier></type><name>rbtree</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>ldns_rbnode_t</name> <modifier>*</modifier></type><name>ldns_rbtree_next</name><parameter_list>(<parameter><decl><type><name>ldns_rbnode_t</name> <modifier>*</modifier></type><name>rbtree</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>ldns_rbnode_t</name> <modifier>*</modifier></type><name>ldns_rbtree_previous</name><parameter_list>(<parameter><decl><type><name>ldns_rbnode_t</name> <modifier>*</modifier></type><name>rbtree</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>ldns_rbtree_t</name> <modifier>*</modifier></type><name>ldns_rbtree_split</name><parameter_list>(<parameter><decl><type><name>ldns_rbtree_t</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>elements</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> <name>ldns_rbtree_join</name><parameter_list>(<parameter><decl><type><name>ldns_rbtree_t</name> <modifier>*</modifier></type><name>tree1</name></decl></parameter>, <parameter><decl><type><name>ldns_rbtree_t</name> <modifier>*</modifier></type><name>tree2</name></decl></parameter>)</parameter_list>;</function_decl>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_RBTREE_FOR</name><parameter_list>(<parameter><type><name>node</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>rbtree</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(node=(type)ldns_rbtree_first(rbtree); (ldns_rbnode_t*)node != LDNS_RBTREE_NULL; node = (type)ldns_rbtree_next((ldns_rbnode_t*)node))</cpp:value></cpp:define>















<function_decl><type><name>void</name></type> <name>ldns_traverse_postorder</name><parameter_list>(<parameter><decl><type><name>ldns_rbtree_t</name><modifier>*</modifier></type> <name>tree</name></decl></parameter>,
<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>ldns_rbnode_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
