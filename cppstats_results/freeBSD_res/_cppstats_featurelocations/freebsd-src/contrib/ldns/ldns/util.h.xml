<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/ldns/ldns/util.h">











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_UTIL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_UTIL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ldns/common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dprintf</name><parameter_list>(<parameter><type><name>X</name></type></parameter>,<parameter><type><name>Y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fprintf(stderr, (X), (Y))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_VERSION</name></cpp:macro> <cpp:value>"1.7.0"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_REVISION</name></cpp:macro> <cpp:value>((1&lt;&lt;16)|(7&lt;&lt;8)|(0))</cpp:value></cpp:define>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>S_SPLINT_S</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INLINE</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SWIG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INLINE</name></cpp:macro> <cpp:value>static</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INLINE</name></cpp:macro> <cpp:value>static inline</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_MALLOC</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LDNS_XMALLOC(type, 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_XMALLOC</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>count</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((type *) malloc((count) * sizeof(type)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_CALLOC</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>count</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((type *) calloc((count), sizeof(type)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_REALLOC</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>LDNS_XREALLOC((ptr), type, 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_XREALLOC</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>count</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((type *) realloc((ptr), (count) * sizeof(type)))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_FREE</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { free((ptr)); (ptr) = NULL; } while (0)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_DEP</name></cpp:macro> <cpp:value>printf("DEPRECATED FUNCTION!\n");</cpp:value></cpp:define>





<function><type><name>INLINE</name> <name>uint16_t</name></type>
<name>ldns_read_uint16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLOW_UNALIGNED_ACCESSES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>ntohs</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator> <name>src</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>src</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>INLINE</name> <name>uint32_t</name></type>
<name>ldns_read_uint32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLOW_UNALIGNED_ACCESSES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>ntohl</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>src</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>src</name></expr></init></decl>;</decl_stmt>
<return>return <expr><operator>(</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator>
<operator>|</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>





<function><type><name>INLINE</name> <name>void</name></type>
<name>ldns_write_uint16</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLOW_UNALIGNED_ACCESSES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>*</operator> <operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <name>dst</name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>dst</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>data</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>INLINE</name> <name>void</name></type>
<name>ldns_write_uint32</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ALLOW_UNALIGNED_ACCESSES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>*</operator> <operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>dst</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>dst</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>data</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>data</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>data</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>INLINE</name> <name>void</name></type>
<name>ldns_write_uint64_as_uint48</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>dst</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>data</name> <operator>&gt;&gt;</operator> <literal type="number">40</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>data</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>data</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>data</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>data</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator> <operator>(</operator><name>data</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>








<struct>struct <name>ldns_schwartzian_compare_struct</name> <block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>original_object</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>transformed_object</name></decl>;</decl_stmt>
}</block>;</struct>








<struct>struct <name>ldns_struct_lookup_table</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><name><name>struct</name> <name>ldns_struct_lookup_table</name></name></type> <name>ldns_lookup_table</name>;</typedef>







<function_decl><type><name>ldns_lookup_table</name> <modifier>*</modifier></type><name>ldns_lookup_by_name</name><parameter_list>(<parameter><decl><type><name>ldns_lookup_table</name></type> <name><name>table</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>ldns_lookup_table</name> <modifier>*</modifier></type><name>ldns_lookup_by_id</name><parameter_list>(<parameter><decl><type><name>ldns_lookup_table</name></type> <name><name>table</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>int</name></type> <name>ldns_get_bit</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name><name>bits</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>int</name></type> <name>ldns_get_bit_r</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name><name>bits</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>void</name></type> <name>ldns_set_bit</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>byte</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bit_nr</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>






<function><type><name>INLINE</name> <name>long</name></type>
<name>ldns_power</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>long</name></type> <name>result</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>b</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>*=</operator> <name>a</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>a</name> <operator>*=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>






<function_decl><type><name>int</name></type> <name>ldns_hexdigit_to_int</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>char</name></type> <name>ldns_int_to_hexdigit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>int</name></type>
<name>ldns_hexstring_to_data</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>ldns_version</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>time_t</name></type> <name>ldns_mktime_from_utc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>time_t</name></type> <name>mktime_from_utc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl></parameter>)</parameter_list>;</function_decl>















<function_decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type> <name>ldns_serial_arithmitics_gmtime_r</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>time</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>




















<function_decl><type><name>int</name></type> <name>ldns_init_random</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>uint16_t</name></type> <name>ldns_get_random</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>char</name> <modifier>*</modifier></type><name>ldns_bubblebabble</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><name>INLINE</name> <name>time_t</name></type> <name>ldns_time</name><parameter_list>(<parameter><decl><type><name>time_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>time</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>






<function><type><name>INLINE</name> <name>size_t</name></type> <name>ldns_b32_ntop_calculate_size</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>src_data_length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>src_data_length</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><operator>(</operator><name>src_data_length</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">5</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>INLINE</name> <name>size_t</name></type> <name>ldns_b32_ntop_calculate_size_no_padding</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>src_data_length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>src_data_length</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal> <operator>/</operator> <literal type="number">5</literal><operator>)</operator> <operator>-</operator> <literal type="number">4</literal></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>int</name></type> <name>ldns_b32_ntop</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>src_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>src_data_length</name></decl></parameter>,
<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>target_text_buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>target_text_buffer_size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ldns_b32_ntop_extended_hex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>src_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>src_data_length</name></decl></parameter>,
<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>target_text_buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>target_text_buffer_size</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator> <name>LDNS_BUILD_CONFIG_HAVE_B32_NTOP</name></expr></cpp:if>

<function_decl><type><name>int</name></type> <name>b32_ntop</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>src_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>src_data_length</name></decl></parameter>,
<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>target_text_buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>target_text_buffer_size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>b32_ntop_extended_hex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>src_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>src_data_length</name></decl></parameter>,
<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>target_text_buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>target_text_buffer_size</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<function><type><name>INLINE</name> <name>size_t</name></type> <name>ldns_b32_pton_calculate_size</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>src_text_length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>src_text_length</name> <operator>*</operator> <literal type="number">5</literal> <operator>/</operator> <literal type="number">8</literal></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>int</name></type> <name>ldns_b32_pton</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>src_text</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>src_text_length</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>target_data_buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>target_data_buffer_size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ldns_b32_pton_extended_hex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>src_text</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>src_text_length</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>target_data_buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>target_data_buffer_size</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator> <name>LDNS_BUILD_CONFIG_HAVE_B32_PTON</name></expr></cpp:if>

<function_decl><type><name>int</name></type> <name>b32_pton</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>src_text</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>src_text_length</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>target_data_buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>target_data_buffer_size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>b32_pton_extended_hex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>src_text</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>src_text_length</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>target_data_buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>target_data_buffer_size</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
