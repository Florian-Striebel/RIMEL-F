<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/ldns/compat/fake-rfc2553.c">





































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ldns/config.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ldns/common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compat/fake-rfc2553.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETNAMEINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>getnameinfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sa</name></decl></parameter>, <parameter><function_decl><type><name>size_t</name></type> <name>ATTR_UNUSED</name><parameter_list>(<parameter><decl><type><name>salen</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>hostlen</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>serv</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>servlen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>sin</name> <init>= <expr><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><name>sa</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>hostent</name></name> <modifier>*</modifier></type><name>hp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>tmpserv</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>serv</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>tmpserv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmpserv</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>sin</name><operator>-&gt;</operator><name>sin_port</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>serv</name></expr></argument>, <argument><expr><name>tmpserv</name></expr></argument>, <argument><expr><name>servlen</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>servlen</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>EAI_MEMORY</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>host</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>NI_NUMERICHOST</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><call><name>inet_ntoa</name><argument_list>(<argument><expr><name><name>sin</name><operator>-&gt;</operator><name>sin_addr</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>hostlen</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>hostlen</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>EAI_MEMORY</name><operator>)</operator></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>hp</name> <operator>=</operator> <call><name>gethostbyaddr</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>sin</name><operator>-&gt;</operator><name>sin_addr</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>in_addr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>AF_INET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>EAI_NODATA</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name><name>hp</name><operator>-&gt;</operator><name>h_name</name></name></expr></argument>, <argument><expr><name>hostlen</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>hostlen</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>EAI_MEMORY</name><operator>)</operator></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GAI_STRERROR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONST_GAI_STRERROR_PROTO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name>char</name> <modifier>*</modifier></type>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<name>gai_strerror</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>EAI_NODATA</name></expr>:</case>
<return>return <expr><operator>(</operator><literal type="string">"no address associated with name"</literal><operator>)</operator></expr>;</return>
<case>case <expr><name>EAI_MEMORY</name></expr>:</case>
<return>return <expr><operator>(</operator><literal type="string">"memory allocation failure."</literal><operator>)</operator></expr>;</return>
<case>case <expr><name>EAI_NONAME</name></expr>:</case>
<return>return <expr><operator>(</operator><literal type="string">"nodename nor servname provided, or not known"</literal><operator>)</operator></expr>;</return>
<default>default:</default>
<return>return <expr><operator>(</operator><literal type="string">"unknown/invalid error."</literal><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FREEADDRINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type>
<name>freeaddrinfo</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>ai</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<for>for<control>(<init>;</init> <condition><expr><name>ai</name> <operator>!=</operator> <name>NULL</name></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>ai</name><operator>-&gt;</operator><name>ai_next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ai</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETADDRINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name><name>struct</name>
<name>addrinfo</name></name> <modifier>*</modifier></type><name>malloc_ai</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name>u_long</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>hints</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>ai</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ai</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ai</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ai</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ai</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ai</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_addr</name></name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>ai</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_addrlen</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_addr</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>=</operator> <name><name>ai</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>ai</name><operator>)</operator><operator>-&gt;</operator><name>ai_addr</name><operator>)</operator><operator>-&gt;</operator><name>sin_port</name> <operator>=</operator> <name>port</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>ai</name><operator>)</operator><operator>-&gt;</operator><name>ai_addr</name><operator>)</operator><operator>-&gt;</operator><name><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>hints</name><operator>-&gt;</operator><name>ai_socktype</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_socktype</name></name> <operator>=</operator> <name><name>hints</name><operator>-&gt;</operator><name>ai_socktype</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_STREAM</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hints</name><operator>-&gt;</operator><name>ai_protocol</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_protocol</name></name> <operator>=</operator> <name><name>hints</name><operator>-&gt;</operator><name>ai_protocol</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>ai</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>getaddrinfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>servname</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>hints</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>hostent</name></name> <modifier>*</modifier></type><name>hp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>servent</name></name> <modifier>*</modifier></type><name>sp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>int</name></type> <name>port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_long</name></type> <name>addr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>port</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>servname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>servname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cp</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>port</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>port</name> <operator>&lt;=</operator> <literal type="number">65535</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>sp</name> <operator>=</operator> <call><name>getservbyname</name><argument_list>(<argument><expr><name>servname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>port</name> <operator>=</operator> <name><name>sp</name><operator>-&gt;</operator><name>s_port</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>port</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hints</name> <operator>&amp;&amp;</operator> <name><name>hints</name><operator>-&gt;</operator><name>ai_flags</name></name> <operator>&amp;</operator> <name>AI_PASSIVE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><literal type="number">0x00000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hostname</name> <operator>&amp;&amp;</operator> <call><name>inet_aton</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>addr</name> <operator>=</operator> <name><name>in</name><operator>.</operator><name>s_addr</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <call><name>malloc_ai</name><argument_list>(<argument><expr><name>port</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>hints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>res</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>EAI_MEMORY</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hostname</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <call><name>malloc_ai</name><argument_list>(<argument><expr><name>port</name></expr></argument>, <argument><expr><call><name>htonl</name><argument_list>(<argument><expr><literal type="number">0x7f000001</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>hints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>res</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>EAI_MEMORY</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>inet_aton</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <call><name>malloc_ai</name><argument_list>(<argument><expr><name>port</name></expr></argument>, <argument><expr><name><name>in</name><operator>.</operator><name>s_addr</name></name></expr></argument>, <argument><expr><name>hints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>res</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>EAI_MEMORY</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>hints</name> <operator>&amp;&amp;</operator> <name><name>hints</name><operator>-&gt;</operator><name>ai_flags</name></name> <operator>&amp;</operator> <name>AI_NUMERICHOST</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>EAI_NONAME</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hp</name> <operator>=</operator> <call><name>gethostbyname</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hp</name> <operator>&amp;&amp;</operator> <name><name>hp</name><operator>-&gt;</operator><name>h_name</name></name> <operator>&amp;&amp;</operator> <name><name>hp</name><operator>-&gt;</operator><name>h_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>hp</name><operator>-&gt;</operator><name>h_addr_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>cur</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cur</name> <operator>=</operator> <name>prev</name> <operator>=</operator> <operator>*</operator><name>res</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>hp</name><operator>-&gt;</operator><name>h_addr_list</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name> <modifier>*</modifier></type><name>in</name> <init>= <expr><operator>(</operator>struct <name>in_addr</name> <operator>*</operator><operator>)</operator><name><name>hp</name><operator>-&gt;</operator><name>h_addr_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>cur</name> <operator>=</operator> <call><name>malloc_ai</name><argument_list>(<argument><expr><name>port</name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>s_addr</name></name></expr></argument>, <argument><expr><name>hints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cur</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>res</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><operator>*</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>EAI_MEMORY</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>prev</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>ai_next</name></name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>EAI_NODATA</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
