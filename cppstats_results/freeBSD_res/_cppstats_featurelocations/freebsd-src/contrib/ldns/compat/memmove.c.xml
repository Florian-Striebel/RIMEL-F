<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/ldns/compat/memmove.c">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ldns/config.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<function_decl><type><name>void</name> <modifier>*</modifier></type><name>memmove</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name> <modifier>*</modifier></type><name>memmove</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>from</name> <init>= <expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator> <name>src</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>to</name> <init>= <expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator> <name>dest</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>from</name> <operator>==</operator> <name>to</name> <operator>||</operator> <name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>dest</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>to</name> <operator>&gt;</operator> <name>from</name> <operator>&amp;&amp;</operator> <name>to</name><operator>-</operator><name>from</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>n</name></expr>)</condition> <block>{<block_content>




<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>i</name><operator>=</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>to</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>from</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<return>return <expr><name>dest</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>from</name> <operator>&gt;</operator> <name>to</name> <operator>&amp;&amp;</operator> <name>from</name><operator>-</operator><name>to</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>n</name></expr>)</condition> <block>{<block_content>




<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>to</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>from</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<return>return <expr><name>dest</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>dest</name></expr>;</return>
</block_content>}</block></function>
</unit>
