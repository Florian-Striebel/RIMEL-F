<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/ldns/rr_functions.c">














<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ldns/config.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ldns/ldns.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>








<function><type><specifier>static</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type>
<name>ldns_rr_function</name><parameter_list>(<parameter><decl><type><name>ldns_rr_type</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_rr</name> <modifier>*</modifier></type><name>rr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rr</name> <operator>||</operator> <call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>type</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>rr</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>bool</name></type>
<name>ldns_rr_set_function</name><parameter_list>(<parameter><decl><type><name>ldns_rr_type</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>rr</name></decl></parameter>, <parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>rdf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>pop</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rr</name> <operator>||</operator> <call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>type</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>pop</name> <operator>=</operator> <call><name>ldns_rr_set_rdf</name><argument_list>(<argument><expr><name>rr</name></expr></argument>, <argument><expr><name>rdf</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>pop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>ldns_rdf</name> <modifier>*</modifier></type>
<name>ldns_rr_a_address</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_rr</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>r</name> <operator>||</operator> <operator>(</operator><call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LDNS_RR_TYPE_A</name> <operator>&amp;&amp;</operator>
<call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LDNS_RR_TYPE_AAAA</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ldns_rr_a_set_address</name><parameter_list>(<parameter><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>pop</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>r</name> <operator>||</operator> <operator>(</operator><call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LDNS_RR_TYPE_A</name> <operator>&amp;&amp;</operator>
<call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LDNS_RR_TYPE_AAAA</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>pop</name> <operator>=</operator> <call><name>ldns_rr_set_rdf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pop</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>pop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>ldns_rdf</name> <modifier>*</modifier></type>
<name>ldns_rr_ns_nsdname</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_rr</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_rr_function</name><argument_list>(<argument><expr><name>LDNS_RR_TYPE_NS</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>ldns_rdf</name> <modifier>*</modifier></type>
<name>ldns_rr_mx_preference</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_rr</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_rr_function</name><argument_list>(<argument><expr><name>LDNS_RR_TYPE_MX</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_rdf</name> <modifier>*</modifier></type>
<name>ldns_rr_mx_exchange</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_rr</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_rr_function</name><argument_list>(<argument><expr><name>LDNS_RR_TYPE_MX</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>ldns_rdf</name> <modifier>*</modifier></type>
<name>ldns_rr_rrsig_typecovered</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_rr</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_rr_function</name><argument_list>(<argument><expr><name>LDNS_RR_TYPE_RRSIG</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ldns_rr_rrsig_set_typecovered</name><parameter_list>(<parameter><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_rr_set_function</name><argument_list>(<argument><expr><name>LDNS_RR_TYPE_RRSIG</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_rdf</name> <modifier>*</modifier></type>
<name>ldns_rr_rrsig_algorithm</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_rr</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_rr_function</name><argument_list>(<argument><expr><name>LDNS_RR_TYPE_RRSIG</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ldns_rr_rrsig_set_algorithm</name><parameter_list>(<parameter><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_rr_set_function</name><argument_list>(<argument><expr><name>LDNS_RR_TYPE_RRSIG</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_rdf</name> <modifier>*</modifier></type>
<name>ldns_rr_rrsig_labels</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_rr</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_rr_function</name><argument_list>(<argument><expr><name>LDNS_RR_TYPE_RRSIG</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ldns_rr_rrsig_set_labels</name><parameter_list>(<parameter><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_rr_set_function</name><argument_list>(<argument><expr><name>LDNS_RR_TYPE_RRSIG</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_rdf</name> <modifier>*</modifier></type>
<name>ldns_rr_rrsig_origttl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_rr</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_rr_function</name><argument_list>(<argument><expr><name>LDNS_RR_TYPE_RRSIG</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ldns_rr_rrsig_set_origttl</name><parameter_list>(<parameter><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_rr_set_function</name><argument_list>(<argument><expr><name>LDNS_RR_TYPE_RRSIG</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_rdf</name> <modifier>*</modifier></type>
<name>ldns_rr_rrsig_expiration</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_rr</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_rr_function</name><argument_list>(<argument><expr><name>LDNS_RR_TYPE_RRSIG</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ldns_rr_rrsig_set_expiration</name><parameter_list>(<parameter><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_rr_set_function</name><argument_list>(<argument><expr><name>LDNS_RR_TYPE_RRSIG</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_rdf</name> <modifier>*</modifier></type>
<name>ldns_rr_rrsig_inception</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_rr</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_rr_function</name><argument_list>(<argument><expr><name>LDNS_RR_TYPE_RRSIG</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ldns_rr_rrsig_set_inception</name><parameter_list>(<parameter><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_rr_set_function</name><argument_list>(<argument><expr><name>LDNS_RR_TYPE_RRSIG</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_rdf</name> <modifier>*</modifier></type>
<name>ldns_rr_rrsig_keytag</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_rr</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_rr_function</name><argument_list>(<argument><expr><name>LDNS_RR_TYPE_RRSIG</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ldns_rr_rrsig_set_keytag</name><parameter_list>(<parameter><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_rr_set_function</name><argument_list>(<argument><expr><name>LDNS_RR_TYPE_RRSIG</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_rdf</name> <modifier>*</modifier></type>
<name>ldns_rr_rrsig_signame</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_rr</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_rr_function</name><argument_list>(<argument><expr><name>LDNS_RR_TYPE_RRSIG</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ldns_rr_rrsig_set_signame</name><parameter_list>(<parameter><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_rr_set_function</name><argument_list>(<argument><expr><name>LDNS_RR_TYPE_RRSIG</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_rdf</name> <modifier>*</modifier></type>
<name>ldns_rr_rrsig_sig</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_rr</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_rr_function</name><argument_list>(<argument><expr><name>LDNS_RR_TYPE_RRSIG</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ldns_rr_rrsig_set_sig</name><parameter_list>(<parameter><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_rr_set_function</name><argument_list>(<argument><expr><name>LDNS_RR_TYPE_RRSIG</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>ldns_rdf</name> <modifier>*</modifier></type>
<name>ldns_rr_dnskey_flags</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_rr</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_rr_function</name><argument_list>(<argument><expr><name>LDNS_RR_TYPE_DNSKEY</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ldns_rr_dnskey_set_flags</name><parameter_list>(<parameter><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_rr_set_function</name><argument_list>(<argument><expr><name>LDNS_RR_TYPE_DNSKEY</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_rdf</name> <modifier>*</modifier></type>
<name>ldns_rr_dnskey_protocol</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_rr</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_rr_function</name><argument_list>(<argument><expr><name>LDNS_RR_TYPE_DNSKEY</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ldns_rr_dnskey_set_protocol</name><parameter_list>(<parameter><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_rr_set_function</name><argument_list>(<argument><expr><name>LDNS_RR_TYPE_DNSKEY</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_rdf</name> <modifier>*</modifier></type>
<name>ldns_rr_dnskey_algorithm</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_rr</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_rr_function</name><argument_list>(<argument><expr><name>LDNS_RR_TYPE_DNSKEY</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ldns_rr_dnskey_set_algorithm</name><parameter_list>(<parameter><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_rr_set_function</name><argument_list>(<argument><expr><name>LDNS_RR_TYPE_DNSKEY</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_rdf</name> <modifier>*</modifier></type>
<name>ldns_rr_dnskey_key</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_rr</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_rr_function</name><argument_list>(<argument><expr><name>LDNS_RR_TYPE_DNSKEY</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ldns_rr_dnskey_set_key</name><parameter_list>(<parameter><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_rr_set_function</name><argument_list>(<argument><expr><name>LDNS_RR_TYPE_DNSKEY</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type>
<name>ldns_rr_dnskey_key_size_raw</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>keydata</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_algorithm</name></type> <name>alg</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>t</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint16_t</name></type> <name>exp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>int16</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><operator>(</operator><name>ldns_signing_algorithm</name><operator>)</operator><name>alg</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LDNS_SIGN_DSA</name></expr>:</case>
<case>case <expr><name>LDNS_SIGN_DSA_NSEC3</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>keydata</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">64</literal> <operator>+</operator> <name>t</name><operator>*</operator><literal type="number">8</literal><operator>)</operator><operator>*</operator><literal type="number">8</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_SIGN_RSAMD5</name></expr>:</case>
<case>case <expr><name>LDNS_SIGN_RSASHA1</name></expr>:</case>
<case>case <expr><name>LDNS_SIGN_RSASHA1_NSEC3</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SHA2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>LDNS_SIGN_RSASHA256</name></expr>:</case>
<case>case <expr><name>LDNS_SIGN_RSASHA512</name></expr>:</case>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>keydata</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name>int16</name></expr></argument>, <argument><expr><name>keydata</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>exp</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name>int16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>len</name> <operator>-</operator> <name>exp</name> <operator>-</operator> <literal type="number">3</literal><operator>)</operator><operator>*</operator><literal type="number">8</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>exp</name> <operator>=</operator> <name><name>keydata</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>len</name><operator>-</operator><name>exp</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">8</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GOST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>LDNS_SIGN_ECC_GOST</name></expr>:</case>
<return>return <expr><literal type="number">512</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ECDSA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>LDNS_SIGN_ECDSAP256SHA256</name></expr>:</case>
<return>return <expr><literal type="number">256</literal></expr>;</return>
<case>case <expr><name>LDNS_SIGN_ECDSAP384SHA384</name></expr>:</case>
<return>return <expr><literal type="number">384</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ED25519</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>LDNS_SIGN_ED25519</name></expr>:</case>
<return>return <expr><literal type="number">256</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ED448</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>LDNS_SIGN_ED448</name></expr>:</case>
<return>return <expr><literal type="number">456</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>LDNS_SIGN_HMACMD5</name></expr>:</case>
<return>return <expr><name>len</name></expr>;</return>
<default>default:</default>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>size_t</name></type>
<name>ldns_rr_dnskey_key_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_rr</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>key</name> <operator>||</operator> <operator>!</operator><call><name>ldns_rr_dnskey_key</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call>
<operator>||</operator> <operator>!</operator><call><name>ldns_rr_dnskey_algorithm</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>ldns_rr_dnskey_key_size_raw</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><call><name>ldns_rr_dnskey_key</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ldns_rdf_size</name><argument_list>(<argument><expr><call><name>ldns_rr_dnskey_key</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ldns_rdf2native_int8</name><argument_list>(<argument><expr><call><name>ldns_rr_dnskey_algorithm</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>
)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>ldns_soa_serial_identity</name><parameter_list>(<parameter><function_decl><type><name>uint32_t</name></type> <name>ATTR_UNUSED</name><parameter_list>(<parameter><decl><type><name>unused</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <operator>(</operator><name>intptr_t</name><operator>)</operator> <name>data</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>ldns_soa_serial_increment</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>s</name></decl></parameter>, <parameter><function_decl><type><name>void</name> <modifier>*</modifier></type><name>ATTR_UNUSED</name><parameter_list>(<parameter><decl><type><name>unused</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_soa_serial_increment_by</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>ldns_soa_serial_increment_by</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>s</name> <operator>+</operator> <operator>(</operator><name>intptr_t</name><operator>)</operator> <name>data</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>ldns_soa_serial_datecounter</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>s_str</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>new_s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>t</name> <init>= <expr><ternary><condition><expr><name>data</name></expr> ?</condition><then> <expr><operator>(</operator><name>time_t</name><operator>)</operator> <operator>(</operator><name>intptr_t</name><operator>)</operator> <name>data</name></expr> </then><else>: <expr><call><name>ldns_time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>strftime</name><argument_list>(<argument><expr><name>s_str</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="string">"%Y%m%d00"</literal></expr></argument>, <argument><expr><call><name>localtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>new_s</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>s_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>new_s</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator> <name>s</name><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>s</name><operator>+</operator><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator> <name>new_s</name><operator>)</operator></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>ldns_soa_serial_unixtime</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>new_s</name> <init>= <expr><ternary><condition><expr><name>data</name></expr> ?</condition><then> <expr><operator>(</operator><name>int32_t</name><operator>)</operator> <operator>(</operator><name>intptr_t</name><operator>)</operator> <name>data</name></expr>
</then><else>: <expr><operator>(</operator><name>int32_t</name><operator>)</operator> <call><name>ldns_time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<return>return <expr><ternary><condition><expr><name>new_s</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator> <name>s</name><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>s</name><operator>+</operator><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator> <name>new_s</name><operator>)</operator></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ldns_rr_soa_increment</name><parameter_list>(<parameter><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>soa</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ldns_rr_soa_increment_func_data</name><argument_list>(<argument><expr><name>soa</name></expr></argument>, <argument><expr><name>ldns_soa_serial_increment</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ldns_rr_soa_increment_func</name><parameter_list>(<parameter><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>soa</name></decl></parameter>, <parameter><decl><type><name>ldns_soa_serial_increment_func_t</name></type> <name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ldns_rr_soa_increment_func_data</name><argument_list>(<argument><expr><name>soa</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ldns_rr_soa_increment_func_data</name><parameter_list>(<parameter><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>soa</name></decl></parameter>,
<parameter><decl><type><name>ldns_soa_serial_increment_func_t</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>prev_soa_serial_rdf</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>( <expr><operator>!</operator><name>soa</name> <operator>||</operator> <operator>!</operator><name>f</name> <operator>||</operator> <call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name>soa</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LDNS_RR_TYPE_SOA</name>
<operator>||</operator> <operator>!</operator><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>soa</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>prev_soa_serial_rdf</name> <operator>=</operator> <call><name>ldns_rr_set_rdf</name><argument_list>(
<argument><expr><name>soa</name></expr></argument>
, <argument><expr><call><name>ldns_native2rdf_int32</name><argument_list>(
<argument><expr><name>LDNS_RDF_TYPE_INT32</name></expr></argument>
, <argument><expr><call>(<modifier>*</modifier><name>f</name>)<argument_list>( <argument><expr><call><name>ldns_rdf2native_int32</name><argument_list>(
<argument><expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>soa</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>
, <argument><expr><name>data</name></expr></argument>
)</argument_list></call></expr></argument>
)</argument_list></call></expr></argument>
, <argument><expr><literal type="number">2</literal></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>prev_soa_serial_rdf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ldns_rr_soa_increment_func_int</name><parameter_list>(<parameter><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>soa</name></decl></parameter>,
<parameter><decl><type><name>ldns_soa_serial_increment_func_t</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ldns_rr_soa_increment_func_data</name><argument_list>(<argument><expr><name>soa</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>intptr_t</name><operator>)</operator> <name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
