<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/ldns/rdata.c">











<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ldns/config.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ldns/ldns.h&gt;</cpp:file></cpp:include>







<function><type><name>size_t</name></type>
<name>ldns_rdf_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>rd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>rd</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>rd</name><operator>-&gt;</operator><name>_size</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_rdf_type</name></type>
<name>ldns_rdf_get_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>rd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>rd</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>rd</name><operator>-&gt;</operator><name>_type</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint8_t</name> <modifier>*</modifier></type>
<name>ldns_rdf_data</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>rd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>rd</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>rd</name><operator>-&gt;</operator><name>_data</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>ldns_rdf_set_size</name><parameter_list>(<parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>rd</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>rd</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rd</name><operator>-&gt;</operator><name>_size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ldns_rdf_set_type</name><parameter_list>(<parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>rd</name></decl></parameter>, <parameter><decl><type><name>ldns_rdf_type</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>rd</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rd</name><operator>-&gt;</operator><name>_type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ldns_rdf_set_data</name><parameter_list>(<parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>rd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>rd</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rd</name><operator>-&gt;</operator><name>_data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><name>uint8_t</name></type>
<name>ldns_rdf2native_int8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>rd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>data</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>rd</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LDNS_RDF_SIZE_BYTE</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>rd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>data</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint16_t</name></type>
<name>ldns_rdf2native_int16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>rd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>data</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>rd</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LDNS_RDF_SIZE_WORD</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>rd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ntohs</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type>
<name>ldns_rdf2native_int32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>rd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>data</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>rd</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LDNS_RDF_SIZE_DOUBLEWORD</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>rd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ntohl</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>time_t</name></type>
<name>ldns_rdf2native_time_t</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>rd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>data</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>rd</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LDNS_RDF_SIZE_DOUBLEWORD</name> <operator>||</operator>
<call><name>ldns_rdf_get_type</name><argument_list>(<argument><expr><name>rd</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LDNS_RDF_TYPE_TIME</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>rd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>time_t</name><operator>)</operator><call><name>ntohl</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_rdf</name> <modifier>*</modifier></type>
<name>ldns_native2rdf_int8</name><parameter_list>(<parameter><decl><type><name>ldns_rdf_type</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_rdf_new_frm_data</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>LDNS_RDF_SIZE_BYTE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_rdf</name> <modifier>*</modifier></type>
<name>ldns_native2rdf_int16</name><parameter_list>(<parameter><decl><type><name>ldns_rdf_type</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>rdf_data</name> <init>= <expr><call><name>LDNS_XMALLOC</name><argument_list>(<argument><expr><name>uint16_t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rdf</name><modifier>*</modifier></type> <name>rdf</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rdf_data</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_write_uint16</name><argument_list>(<argument><expr><name>rdf_data</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rdf</name> <operator>=</operator> <call><name>ldns_rdf_new</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>LDNS_RDF_SIZE_WORD</name></expr></argument>, <argument><expr><name>rdf_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>rdf</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>rdf_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>rdf</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_rdf</name> <modifier>*</modifier></type>
<name>ldns_native2rdf_int32</name><parameter_list>(<parameter><decl><type><name>ldns_rdf_type</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>rdf_data</name> <init>= <expr><call><name>LDNS_XMALLOC</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rdf</name><modifier>*</modifier></type> <name>rdf</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rdf_data</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_write_uint32</name><argument_list>(<argument><expr><name>rdf_data</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rdf</name> <operator>=</operator> <call><name>ldns_rdf_new</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>LDNS_RDF_SIZE_DOUBLEWORD</name></expr></argument>, <argument><expr><name>rdf_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>rdf</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>rdf_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>rdf</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_rdf</name> <modifier>*</modifier></type>
<name>ldns_native2rdf_int16_data</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>rdf_data</name> <init>= <expr><call><name>LDNS_XMALLOC</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>size</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rdf</name><modifier>*</modifier></type> <name>rdf</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rdf_data</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_write_uint16</name><argument_list>(<argument><expr><name>rdf_data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>rdf_data</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rdf</name> <operator>=</operator> <call><name>ldns_rdf_new</name><argument_list>(<argument><expr><name>LDNS_RDF_TYPE_INT16_DATA</name></expr></argument>, <argument><expr><name>size</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>rdf_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>rdf</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>rdf_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>rdf</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>ldns_rdf</name> <modifier>*</modifier></type>
<name>ldns_rdf_new</name><parameter_list>(<parameter><decl><type><name>ldns_rdf_type</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>rd</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rd</name> <operator>=</operator> <call><name>LDNS_MALLOC</name><argument_list>(<argument><expr><name>ldns_rdf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rd</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_rdf_set_size</name><argument_list>(<argument><expr><name>rd</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rdf_set_type</name><argument_list>(<argument><expr><name>rd</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rdf_set_data</name><argument_list>(<argument><expr><name>rd</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rd</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_rdf</name> <modifier>*</modifier></type>
<name>ldns_rdf_new_frm_data</name><parameter_list>(<parameter><decl><type><name>ldns_rdf_type</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>rdf</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name>LDNS_MAX_RDFLEN</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>rdf</name> <operator>=</operator> <call><name>LDNS_MALLOC</name><argument_list>(<argument><expr><name>ldns_rdf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rdf</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>rdf</name><operator>-&gt;</operator><name>_data</name></name> <operator>=</operator> <call><name>LDNS_XMALLOC</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rdf</name><operator>-&gt;</operator><name>_data</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>ldns_rdf_set_type</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rdf_set_size</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>rdf</name><operator>-&gt;</operator><name>_data</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rdf</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_rdf</name> <modifier>*</modifier></type>
<name>ldns_rdf_clone</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>rd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>rd</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>ldns_rdf_new_frm_data</name><argument_list>( <argument><expr><call><name>ldns_rdf_get_type</name><argument_list>(<argument><expr><name>rd</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>rd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>rd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ldns_rdf_deep_free</name><parameter_list>(<parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>rd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>rd</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>rd</name><operator>-&gt;</operator><name>_data</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name><name>rd</name><operator>-&gt;</operator><name>_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ldns_rdf_free</name><parameter_list>(<parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>rd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>rd</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>ldns_rdf</name> <modifier>*</modifier></type>
<name>ldns_rdf_new_frm_str</name><parameter_list>(<parameter><decl><type><name>ldns_rdf_type</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>rdf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>status</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LDNS_RDF_TYPE_DNAME</name></expr>:</case>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_str2rdf_dname</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rdf</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_INT8</name></expr>:</case>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_str2rdf_int8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rdf</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_INT16</name></expr>:</case>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_str2rdf_int16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rdf</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_INT32</name></expr>:</case>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_str2rdf_int32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rdf</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_A</name></expr>:</case>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_str2rdf_a</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rdf</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_AAAA</name></expr>:</case>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_str2rdf_aaaa</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rdf</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_STR</name></expr>:</case>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_str2rdf_str</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rdf</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_APL</name></expr>:</case>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_str2rdf_apl</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rdf</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_B64</name></expr>:</case>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_str2rdf_b64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rdf</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_B32_EXT</name></expr>:</case>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_str2rdf_b32_ext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rdf</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_HEX</name></expr>:</case>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_str2rdf_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rdf</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_NSEC</name></expr>:</case>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_str2rdf_nsec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rdf</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_TYPE</name></expr>:</case>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_str2rdf_type</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rdf</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_CLASS</name></expr>:</case>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_str2rdf_class</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rdf</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_CERT_ALG</name></expr>:</case>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_str2rdf_cert_alg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rdf</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_ALG</name></expr>:</case>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_str2rdf_alg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rdf</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_UNKNOWN</name></expr>:</case>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_str2rdf_unknown</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rdf</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_TIME</name></expr>:</case>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_str2rdf_time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rdf</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_PERIOD</name></expr>:</case>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_str2rdf_period</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rdf</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_HIP</name></expr>:</case>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_str2rdf_hip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rdf</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_SERVICE</name></expr>:</case>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_str2rdf_service</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rdf</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_LOC</name></expr>:</case>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_str2rdf_loc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rdf</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_WKS</name></expr>:</case>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_str2rdf_wks</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rdf</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_NSAP</name></expr>:</case>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_str2rdf_nsap</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rdf</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_ATMA</name></expr>:</case>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_str2rdf_atma</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rdf</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_IPSECKEY</name></expr>:</case>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_str2rdf_ipseckey</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rdf</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_NSEC3_SALT</name></expr>:</case>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_str2rdf_nsec3_salt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rdf</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_NSEC3_NEXT_OWNER</name></expr>:</case>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_str2rdf_b32_ext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rdf</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_ILNP64</name></expr>:</case>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_str2rdf_ilnp64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rdf</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_EUI48</name></expr>:</case>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_str2rdf_eui48</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rdf</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_EUI64</name></expr>:</case>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_str2rdf_eui64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rdf</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_TAG</name></expr>:</case>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_str2rdf_tag</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rdf</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_LONG_STR</name></expr>:</case>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_str2rdf_long_str</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rdf</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_CERTIFICATE_USAGE</name></expr>:</case>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_str2rdf_certificate_usage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rdf</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_SELECTOR</name></expr>:</case>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_str2rdf_selector</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rdf</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_MATCHING_TYPE</name></expr>:</case>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_str2rdf_matching_type</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rdf</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_NONE</name></expr>:</case>
<default>default:</default>

<expr_stmt><expr><name>status</name> <operator>=</operator> <name>LDNS_STATUS_ERR</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>LDNS_STATUS_OK</name> <operator>==</operator> <name>status</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_rdf_set_type</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rdf</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>rdf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_rdf_new_frm_fp</name><parameter_list>(<parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier><modifier>*</modifier></type><name>rdf</name></decl></parameter>, <parameter><decl><type><name>ldns_rdf_type</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_rdf_new_frm_fp_l</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_rdf_new_frm_fp_l</name><parameter_list>(<parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier><modifier>*</modifier></type><name>rdf</name></decl></parameter>, <parameter><decl><type><name>ldns_rdf_type</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>line_nr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>LDNS_XMALLOC</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name>LDNS_MAX_LINELEN</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>line</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>t</name> <operator>=</operator> <call><name>ldns_fget_token_l</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>LDNS_PARSE_SKIP_SPACE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>line_nr</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>t</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_SYNTAX_RDATA_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>ldns_rdf_new_frm_str</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator> <name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rdf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>rdf</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_OK</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_NULL</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>ldns_rdf</name> <modifier>*</modifier></type>
<name>ldns_rdf_address_reverse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>rd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buf_4</name><index>[<expr><name>LDNS_IP4ADDRLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buf_6</name><index>[<expr><name>LDNS_IP6ADDRLEN</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>in_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>ret_dname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>octet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>nnibble</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>nibble</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>char_dname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nbit</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ldns_rdf_get_type</name><argument_list>(<argument><expr><name>rd</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LDNS_RDF_TYPE_A</name> <operator>&amp;&amp;</operator>
<call><name>ldns_rdf_get_type</name><argument_list>(<argument><expr><name>rd</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LDNS_RDF_TYPE_AAAA</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>in_addr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret_dname</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<switch>switch<condition>(<expr><call><name>ldns_rdf_get_type</name><argument_list>(<argument><expr><name>rd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LDNS_RDF_TYPE_A</name></expr>:</case>

<expr_stmt><expr><name><name>buf_4</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>rd</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf_4</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>rd</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">1</literal></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf_4</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>rd</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf_4</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>rd</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">3</literal></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><name>in_addr</name> <operator>=</operator> <call><name>ldns_dname_new_frm_str</name><argument_list>(<argument><expr><literal type="string">"in-addr.arpa."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>in_addr</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rev</name> <operator>=</operator> <call><name>ldns_rdf_new_frm_data</name><argument_list>( <argument><expr><name>LDNS_RDF_TYPE_A</name></expr></argument>,
<argument><expr><name>LDNS_IP4ADDRLEN</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>buf_4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rev</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>in_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>char_dname</name> <operator>=</operator> <call><name>ldns_rdf2str</name><argument_list>(<argument><expr><name>rev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>char_dname</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>in_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>rev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret_dname</name> <operator>=</operator> <call><name>ldns_dname_new_frm_str</name><argument_list>(<argument><expr><name>char_dname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret_dname</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>in_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>rev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>char_dname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>rev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>char_dname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_AAAA</name></expr>:</case>


<for>for <control>(<init><expr><name>nbit</name> <operator>=</operator> <literal type="number">127</literal></expr>;</init> <condition><expr><name>nbit</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>nbit</name> <operator>=</operator> <name>nbit</name> <operator>-</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>octet</name> <operator>=</operator> <operator>(</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>nbit</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x78</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>nnibble</name> <operator>=</operator> <operator>(</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>nbit</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x04</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>nibble</name> <operator>=</operator> <operator>(</operator><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>rd</name></expr></argument>)</argument_list></call><index>[<expr><name>octet</name></expr>]</index> <operator>&amp;</operator> <operator>(</operator> <literal type="number">0xf</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator>
<name>nnibble</name><operator>)</operator><operator>)</operator> <operator>)</operator> <operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator> <literal type="number">4</literal> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator>
<name>nnibble</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf_6</name><index>[<expr><operator>(</operator><name>LDNS_IP6ADDRLEN</name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator>
<operator>(</operator><name>octet</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>nnibble</name><operator>)</operator></expr>]</index></name> <operator>=</operator>
<operator>(</operator><name>uint8_t</name><operator>)</operator><call><name>ldns_int_to_hexdigit</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>nibble</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>char_dname</name> <operator>=</operator> <call><name>LDNS_XMALLOC</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><operator>(</operator><name>LDNS_IP6ADDRLEN</name> <operator>*</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>char_dname</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>char_dname</name><index>[<expr><name>LDNS_IP6ADDRLEN</name> <operator>*</operator> <literal type="number">4</literal> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LDNS_IP6ADDRLEN</name> <operator>*</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <name>j</name> <operator>+</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>char_dname</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><name><name>buf_6</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>LDNS_IP6ADDRLEN</name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>char_dname</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>in_addr</name> <operator>=</operator> <call><name>ldns_dname_new_frm_str</name><argument_list>(<argument><expr><literal type="string">"ip6.arpa."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>in_addr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>char_dname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>ret_dname</name> <operator>=</operator> <call><name>ldns_dname_new_frm_str</name><argument_list>(<argument><expr><name>char_dname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>char_dname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret_dname</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>in_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name>rev</name> <operator>=</operator> <call><name>ldns_dname_cat_clone</name><argument_list>(<argument><expr><name>ret_dname</name></expr></argument>, <argument><expr><name>in_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>ret_dname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>in_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rev</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_rdf_hip_get_alg_hit_pk</name><parameter_list>(<parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>rdf</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>alg</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>hit_size</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>hit</name></decl></parameter>,
<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>pk_size</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>pk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>rdf_size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>rdf</name> <operator>||</operator> <operator>!</operator> <name>alg</name> <operator>||</operator> <operator>!</operator> <name>hit</name> <operator>||</operator> <operator>!</operator> <name>hit_size</name> <operator>||</operator> <operator>!</operator> <name>pk</name> <operator>||</operator> <operator>!</operator> <name>pk_size</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_INVALID_POINTER</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ldns_rdf_get_type</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LDNS_RDF_TYPE_HIP</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_INVALID_RDF_TYPE</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>rdf_size</name> <operator>=</operator> <call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_WIRE_RDATA_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>hit_size</name> <operator>=</operator> <name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>alg</name> <operator>=</operator> <name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pk_size</name> <operator>=</operator> <call><name>ldns_read_uint16</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>hit</name> <operator>=</operator> <name>data</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pk</name> <operator>=</operator> <name>data</name> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <operator>*</operator><name>hit_size</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>hit_size</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>*</operator><name>pk_size</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<name>rdf_size</name> <operator>&lt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <operator>*</operator><name>hit_size</name> <operator>+</operator> <operator>*</operator><name>pk_size</name> <operator>+</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_WIRE_RDATA_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>LDNS_STATUS_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_rdf_hip_new_frm_alg_hit_pk</name><parameter_list>(<parameter><decl><type><name>ldns_rdf</name><modifier>*</modifier><modifier>*</modifier></type> <name>rdf</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>alg</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>hit_size</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>hit</name></decl></parameter>,
<parameter><decl><type><name>uint16_t</name></type> <name>pk_size</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>rdf</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_INVALID_POINTER</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">4</literal> <operator>+</operator> <name>hit_size</name> <operator>+</operator> <name>pk_size</name> <operator>&gt;</operator> <name>LDNS_MAX_RDFLEN</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_RDATA_OVERFLOW</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>LDNS_XMALLOC</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>+</operator> <name>hit_size</name> <operator>+</operator> <name>pk_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>hit_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>alg</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_write_uint16</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>pk_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>hit</name></expr></argument>, <argument><expr><name>hit_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <name>hit_size</name></expr></argument>, <argument><expr><name>pk</name></expr></argument>, <argument><expr><name>pk_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>rdf</name> <operator>=</operator> <call><name>ldns_rdf_new</name><argument_list>(<argument><expr><name>LDNS_RDF_TYPE_HIP</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>+</operator> <name>hit_size</name> <operator>+</operator> <name>pk_size</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <operator>*</operator><name>rdf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>LDNS_STATUS_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_octet</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>word</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>length</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <name>p</name> <operator>=</operator> <name>word</name></expr>;</init> <condition><expr><operator>*</operator><name>s</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr><operator>,</operator><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><operator>*</operator><name>s</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'.'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_EMPTY_LABEL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <operator>*</operator><name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>length</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'\\'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><literal type="char">'0'</literal> <operator>&lt;=</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'9'</literal> <operator>&amp;&amp;</operator>
<literal type="char">'0'</literal> <operator>&lt;=</operator> <name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'9'</literal> <operator>&amp;&amp;</operator>
<literal type="char">'0'</literal> <operator>&lt;=</operator> <name><name>s</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>*</operator> <literal type="number">100</literal> <operator>+</operator>
<operator>(</operator><name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <operator>(</operator><name><name>s</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>val</name> <operator>&amp;&amp;</operator> <name>val</name> <operator>&lt;=</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>length</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_DDD_OVERFLOW</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>length</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'\"'</literal></expr>:</case>



<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <operator>*</operator><operator>++</operator><name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>length</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\0'</literal></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <operator>*</operator><name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>length</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>ldns_rdf_compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>rd1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>rd2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>i1</name></decl>, <decl><type ref="prev"/><name>i2</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>d1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>d2</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rd1</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>rd2</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rd1</name> <operator>||</operator> <operator>!</operator><name>rd2</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i1</name> <operator>=</operator> <call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>rd1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i2</name> <operator>=</operator> <call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>rd2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i1</name> <operator>&lt;</operator> <name>i2</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>i1</name> <operator>&gt;</operator> <name>i2</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>+</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>d1</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>rd1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d2</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>rd2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i1</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>d1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name><name>d2</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>d1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name><name>d2</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>+</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type>
<name>ldns_str2period</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>endptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sign</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>seconds</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><operator>*</operator><name>endptr</name> <operator>=</operator> <name>nptr</name></expr>;</init> <condition><expr><operator>*</operator><operator>*</operator><name>endptr</name></expr>;</condition> <incr><expr><operator>(</operator><operator>*</operator><name>endptr</name><operator>)</operator><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><operator>*</operator><operator>*</operator><name>endptr</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">' '</literal></expr>:</case>
<case>case <expr><literal type="char">'\t'</literal></expr>:</case>
<break>break;</break>
<case>case <expr><literal type="char">'-'</literal></expr>:</case>
<if_stmt><if>if<condition>(<expr><name>sign</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>seconds</name></expr>;</return>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'+'</literal></expr>:</case>
<if_stmt><if>if<condition>(<expr><name>sign</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>seconds</name></expr>;</return>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'s'</literal></expr>:</case>
<case>case <expr><literal type="char">'S'</literal></expr>:</case>
<expr_stmt><expr><name>seconds</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'m'</literal></expr>:</case>
<case>case <expr><literal type="char">'M'</literal></expr>:</case>
<expr_stmt><expr><name>seconds</name> <operator>+=</operator> <name>i</name> <operator>*</operator> <literal type="number">60</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'h'</literal></expr>:</case>
<case>case <expr><literal type="char">'H'</literal></expr>:</case>
<expr_stmt><expr><name>seconds</name> <operator>+=</operator> <name>i</name> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'d'</literal></expr>:</case>
<case>case <expr><literal type="char">'D'</literal></expr>:</case>
<expr_stmt><expr><name>seconds</name> <operator>+=</operator> <name>i</name> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'w'</literal></expr>:</case>
<case>case <expr><literal type="char">'W'</literal></expr>:</case>
<expr_stmt><expr><name>seconds</name> <operator>+=</operator> <name>i</name> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">24</literal> <operator>*</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'0'</literal></expr>:</case>
<case>case <expr><literal type="char">'1'</literal></expr>:</case>
<case>case <expr><literal type="char">'2'</literal></expr>:</case>
<case>case <expr><literal type="char">'3'</literal></expr>:</case>
<case>case <expr><literal type="char">'4'</literal></expr>:</case>
<case>case <expr><literal type="char">'5'</literal></expr>:</case>
<case>case <expr><literal type="char">'6'</literal></expr>:</case>
<case>case <expr><literal type="char">'7'</literal></expr>:</case>
<case>case <expr><literal type="char">'8'</literal></expr>:</case>
<case>case <expr><literal type="char">'9'</literal></expr>:</case>
<expr_stmt><expr><name>i</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><operator>*</operator><name>endptr</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>seconds</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>

<return>return <expr><name>seconds</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></for>
<expr_stmt><expr><name>seconds</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>

<return>return <expr><name>seconds</name></expr>;</return>
</block_content>}</block></function>
</unit>
