<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/ldns/dnssec.c">










<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ldns/config.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ldns/ldns.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ldns/dnssec.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/ssl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/evp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/rand.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/err.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/md5.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>ldns_rr</name> <modifier>*</modifier></type>
<name>ldns_dnssec_get_rrsig_for_name_and_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_rr_type</name></type> <name>type</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_rr_list</name> <modifier>*</modifier></type><name>rrs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>candidate</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name> <operator>||</operator> <operator>!</operator><name>rrs</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>rrs</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>candidate</name> <operator>=</operator> <call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>rrs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name>candidate</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LDNS_RR_TYPE_RRSIG</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ldns_dname_compare</name><argument_list>(<argument><expr><call><name>ldns_rr_owner</name><argument_list>(<argument><expr><name>candidate</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>ldns_rdf2rr_type</name><argument_list>(<argument><expr><call><name>ldns_rr_rrsig_typecovered</name><argument_list>(<argument><expr><name>candidate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>==</operator> <name>type</name></expr>
)</condition> <block>{<block_content>
<return>return <expr><name>candidate</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_rr</name> <modifier>*</modifier></type>
<name>ldns_dnssec_get_dnskey_for_rrsig</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_rr</name> <modifier>*</modifier></type><name>rrsig</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_rr_list</name> <modifier>*</modifier></type><name>rrs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>candidate</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rrsig</name> <operator>||</operator> <operator>!</operator><name>rrs</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>rrs</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>candidate</name> <operator>=</operator> <call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>rrs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name>candidate</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LDNS_RR_TYPE_DNSKEY</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ldns_dname_compare</name><argument_list>(<argument><expr><call><name>ldns_rr_owner</name><argument_list>(<argument><expr><name>candidate</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ldns_rr_rrsig_signame</name><argument_list>(<argument><expr><name>rrsig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>ldns_rdf2native_int16</name><argument_list>(<argument><expr><call><name>ldns_rr_rrsig_keytag</name><argument_list>(<argument><expr><name>rrsig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator>
<call><name>ldns_calc_keytag</name><argument_list>(<argument><expr><name>candidate</name></expr></argument>)</argument_list></call></expr>
)</condition> <block>{<block_content>
<return>return <expr><name>candidate</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_rdf</name> <modifier>*</modifier></type>
<name>ldns_nsec_get_bitmap</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_rr</name> <modifier>*</modifier></type><name>nsec</name></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name>nsec</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LDNS_RR_TYPE_NSEC</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>nsec</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name>nsec</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LDNS_RR_TYPE_NSEC3</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>nsec</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>



<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type>
<name>ldns_dnssec_nsec3_closest_encloser</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ldns_rdf</name> <operator>*</operator><name>qname</name></expr></argument>,
<argument><expr><macro><name>ATTR_UNUSED</name><argument_list>(<argument>ldns_rr_type qtype</argument>)</argument_list></macro></expr></argument>,
<argument><expr><specifier>const</specifier> <name>ldns_rr_list</name> <operator>*</operator><name>nsec3s</name></expr></argument>)</argument_list>
<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>algorithm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>iterations</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>salt_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>salt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>sname</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>hashed_sname</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>flag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>exact_match_found</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>in_range_found</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ldns_status</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>zone_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>nsec_i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>nsec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>qname</name> <operator>||</operator> <operator>!</operator><name>nsec3s</name> <operator>||</operator> <call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>nsec3s</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nsec</name> <operator>=</operator> <call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>nsec3s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>algorithm</name> <operator>=</operator> <call><name>ldns_nsec3_algorithm</name><argument_list>(<argument><expr><name>nsec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>salt_length</name> <operator>=</operator> <call><name>ldns_nsec3_salt_length</name><argument_list>(<argument><expr><name>nsec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>salt</name> <operator>=</operator> <call><name>ldns_nsec3_salt_data</name><argument_list>(<argument><expr><name>nsec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>iterations</name> <operator>=</operator> <call><name>ldns_nsec3_iterations</name><argument_list>(<argument><expr><name>nsec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sname</name> <operator>=</operator> <call><name>ldns_rdf_clone</name><argument_list>(<argument><expr><name>qname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>flag</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>zone_name</name> <operator>=</operator> <call><name>ldns_dname_left_chop</name><argument_list>(<argument><expr><call><name>ldns_rr_owner</name><argument_list>(<argument><expr><name>nsec</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<while>while <condition>(<expr><call><name>ldns_dname_label_count</name><argument_list>(<argument><expr><name>sname</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>exact_match_found</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>in_range_found</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>hashed_sname</name> <operator>=</operator> <call><name>ldns_nsec3_hash_name</name><argument_list>(<argument><expr><name>sname</name></expr></argument>,
<argument><expr><name>algorithm</name></expr></argument>,
<argument><expr><name>iterations</name></expr></argument>,
<argument><expr><name>salt_length</name></expr></argument>,
<argument><expr><name>salt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_dname_cat</name><argument_list>(<argument><expr><name>hashed_sname</name></expr></argument>, <argument><expr><name>zone_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>status</name> <operator>!=</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>salt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>zone_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>sname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>nsec_i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>nsec_i</name> <operator>&lt;</operator> <call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>nsec3s</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>nsec_i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>nsec</name> <operator>=</operator> <call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>nsec3s</name></expr></argument>, <argument><expr><name>nsec_i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><call><name>ldns_dname_compare</name><argument_list>(<argument><expr><call><name>ldns_rr_owner</name><argument_list>(<argument><expr><name>nsec</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>hashed_sname</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>exact_match_found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ldns_nsec_covers_name</name><argument_list>(<argument><expr><name>nsec</name></expr></argument>, <argument><expr><name>hashed_sname</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>in_range_found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>exact_match_found</name> <operator>&amp;&amp;</operator> <name>in_range_found</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>exact_match_found</name> <operator>&amp;&amp;</operator> <name>flag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ldns_rdf_clone</name><argument_list>(<argument><expr><name>sname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>hashed_sname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>exact_match_found</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>flag</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>hashed_sname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>hashed_sname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>sname</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sname</name> <operator>=</operator> <call><name>ldns_dname_left_chop</name><argument_list>(<argument><expr><name>sname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<label><name>done</name>:</label>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>salt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>zone_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>sname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>bool</name></type>
<name>ldns_dnssec_pkt_has_rrsigs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_pkt</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ldns_pkt_ancount</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><call><name>ldns_pkt_answer</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator>
<name>LDNS_RR_TYPE_RRSIG</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ldns_pkt_nscount</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><call><name>ldns_pkt_authority</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator>
<name>LDNS_RR_TYPE_RRSIG</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_rr_list</name> <modifier>*</modifier></type>
<name>ldns_dnssec_pkt_get_rrsigs_for_name_and_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_pkt</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>ldns_rr_type</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>t_netorder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type><name>sigs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type><name>sigs_covered</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>rdf_t</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sigs</name> <operator>=</operator> <call><name>ldns_pkt_rr_list_by_name_and_type</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>,
<argument><expr><name>name</name></expr></argument>,
<argument><expr><name>LDNS_RR_TYPE_RRSIG</name></expr></argument>,
<argument><expr><name>LDNS_SECTION_ANY_NOQUESTION</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t_netorder</name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rdf_t</name> <operator>=</operator> <call><name>ldns_rdf_new</name><argument_list>(<argument><expr><name>LDNS_RDF_TYPE_TYPE</name></expr></argument>, <argument><expr><name>LDNS_RDF_SIZE_WORD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t_netorder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sigs_covered</name> <operator>=</operator> <call><name>ldns_rr_list_subtype_by_rdf</name><argument_list>(<argument><expr><name>sigs</name></expr></argument>, <argument><expr><name>rdf_t</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ldns_rdf_free</name><argument_list>(<argument><expr><name>rdf_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rr_list_deep_free</name><argument_list>(<argument><expr><name>sigs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>sigs_covered</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ldns_rr_list</name> <modifier>*</modifier></type>
<name>ldns_dnssec_pkt_get_rrsigs_for_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_pkt</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>ldns_rr_type</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>t_netorder</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type><name>sigs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type><name>sigs_covered</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>rdf_t</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sigs</name> <operator>=</operator> <call><name>ldns_pkt_rr_list_by_type</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>,
<argument><expr><name>LDNS_RR_TYPE_RRSIG</name></expr></argument>,
<argument><expr><name>LDNS_SECTION_ANY_NOQUESTION</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t_netorder</name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rdf_t</name> <operator>=</operator> <call><name>ldns_rdf_new</name><argument_list>(<argument><expr><name>LDNS_RDF_TYPE_TYPE</name></expr></argument>,
<argument><expr><literal type="number">2</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>t_netorder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sigs_covered</name> <operator>=</operator> <call><name>ldns_rr_list_subtype_by_rdf</name><argument_list>(<argument><expr><name>sigs</name></expr></argument>, <argument><expr><name>rdf_t</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ldns_rdf_free</name><argument_list>(<argument><expr><name>rdf_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rr_list_deep_free</name><argument_list>(<argument><expr><name>sigs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>sigs_covered</name></expr>;</return>

</block_content>}</block></function>


<function><type><name>uint16_t</name></type>
<name>ldns_calc_keytag</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_rr</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>ac16</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>keybuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>keysize</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>key</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LDNS_RR_TYPE_DNSKEY</name> <operator>&amp;&amp;</operator>
<call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LDNS_RR_TYPE_KEY</name></expr>
)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>keybuf</name> <operator>=</operator> <call><name>ldns_buffer_new</name><argument_list>(<argument><expr><name>LDNS_MIN_BUFLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>keybuf</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>ldns_rr_rdata2buffer_wire</name><argument_list>(<argument><expr><name>keybuf</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>keysize</name><operator>=</operator> <call><name>ldns_buffer_position</name><argument_list>(<argument><expr><name>keybuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ac16</name> <operator>=</operator> <call><name>ldns_calc_keytag_raw</name><argument_list>(<argument><expr><call><name>ldns_buffer_begin</name><argument_list>(<argument><expr><name>keybuf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>keysize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_free</name><argument_list>(<argument><expr><name>keybuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ac16</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint16_t</name></type> <name>ldns_calc_keytag_raw</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keysize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>ac32</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>ac16</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>keysize</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>key</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <name>LDNS_RSAMD5</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ac16</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>keysize</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ac16</name></expr></argument>, <argument><expr><name>key</name> <operator>+</operator> <name>keysize</name> <operator>-</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ac16</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name>ac16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>uint16_t</name><operator>)</operator> <name>ac16</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ac32</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>i</name> <operator>&lt;</operator> <name>keysize</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>ac32</name> <operator>+=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>key</name><index>[<expr><name>i</name></expr>]</index></name></expr> </then><else>: <expr><name><name>key</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>ac32</name> <operator>+=</operator> <operator>(</operator><name>ac32</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>uint16_t</name><operator>)</operator> <operator>(</operator><name>ac32</name> <operator>&amp;</operator> <literal type="number">0xFFFF</literal><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>DSA</name> <modifier>*</modifier></type>
<name>ldns_key_buf2dsa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_buffer</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_key_buf2dsa_raw</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><call><name>ldns_buffer_begin</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ldns_buffer_position</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>DSA</name> <modifier>*</modifier></type>
<name>ldns_key_buf2dsa_raw</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>T</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DSA</name> <modifier>*</modifier></type><name>dsa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BIGNUM</name> <modifier>*</modifier></type><name>Q</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>BIGNUM</name> <modifier>*</modifier></type><name>P</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BIGNUM</name> <modifier>*</modifier></type><name>G</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>BIGNUM</name> <modifier>*</modifier></type><name>Y</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>T</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>key</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>length</name> <operator>=</operator> <operator>(</operator><literal type="number">64</literal> <operator>+</operator> <name>T</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>T</name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>len</name> <operator>&lt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">1</literal> <operator>+</operator> <name>SHA_DIGEST_LENGTH</name> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><name>length</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>Q</name> <operator>=</operator> <call><name>BN_bin2bn</name><argument_list>(<argument><expr><name>key</name><operator>+</operator><name>offset</name></expr></argument>, <argument><expr><name>SHA_DIGEST_LENGTH</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>SHA_DIGEST_LENGTH</name></expr>;</expr_stmt>

<expr_stmt><expr><name>P</name> <operator>=</operator> <call><name>BN_bin2bn</name><argument_list>(<argument><expr><name>key</name><operator>+</operator><name>offset</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>length</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>length</name></expr>;</expr_stmt>

<expr_stmt><expr><name>G</name> <operator>=</operator> <call><name>BN_bin2bn</name><argument_list>(<argument><expr><name>key</name><operator>+</operator><name>offset</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>length</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>length</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Y</name> <operator>=</operator> <call><name>BN_bin2bn</name><argument_list>(<argument><expr><name>key</name><operator>+</operator><name>offset</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>length</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>length</name></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><name>Q</name> <operator>||</operator> <operator>!</operator><name>P</name> <operator>||</operator> <operator>!</operator><name>G</name> <operator>||</operator> <operator>!</operator><name>Y</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name>dsa</name> <operator>=</operator> <call><name>DSA_new</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>BN_free</name><argument_list>(<argument><expr><name>Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BN_free</name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BN_free</name><argument_list>(<argument><expr><name>G</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BN_free</name><argument_list>(<argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPENSSL_VERSION_NUMBER</name> <operator>&lt;</operator> <literal type="number">0x10100000</literal> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBRESSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>S_SPLINT_S</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>dsa</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name>P</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsa</name><operator>-&gt;</operator><name>q</name></name> <operator>=</operator> <name>Q</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsa</name><operator>-&gt;</operator><name>g</name></name> <operator>=</operator> <name>G</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsa</name><operator>-&gt;</operator><name>pub_key</name></name> <operator>=</operator> <name>Y</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DSA_set0_pqg</name><argument_list>(<argument><expr><name>dsa</name></expr></argument>, <argument><expr><name>P</name></expr></argument>, <argument><expr><name>Q</name></expr></argument>, <argument><expr><name>G</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>BN_free</name><argument_list>(<argument><expr><name>Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BN_free</name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BN_free</name><argument_list>(<argument><expr><name>G</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DSA_free</name><argument_list>(<argument><expr><name>dsa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BN_free</name><argument_list>(<argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DSA_set0_key</name><argument_list>(<argument><expr><name>dsa</name></expr></argument>, <argument><expr><name>Y</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>DSA_free</name><argument_list>(<argument><expr><name>dsa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BN_free</name><argument_list>(<argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>dsa</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>RSA</name> <modifier>*</modifier></type>
<name>ldns_key_buf2rsa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_buffer</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_key_buf2rsa_raw</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><call><name>ldns_buffer_begin</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ldns_buffer_position</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>RSA</name> <modifier>*</modifier></type>
<name>ldns_key_buf2rsa_raw</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>exp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>int16</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RSA</name> <modifier>*</modifier></type><name>rsa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BIGNUM</name> <modifier>*</modifier></type><name>modulus</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BIGNUM</name> <modifier>*</modifier></type><name>exponent</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>key</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name>int16</name></expr></argument>, <argument><expr><name>key</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>exp</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name>int16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>exp</name> <operator>=</operator> <name><name>key</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if<condition>(<expr><name>len</name> <operator>&lt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>offset</name> <operator>+</operator> <name>exp</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>exponent</name> <operator>=</operator> <call><name>BN_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>exponent</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>BN_bin2bn</name><argument_list>(<argument><expr><name>key</name><operator>+</operator><name>offset</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>exp</name></expr></argument>, <argument><expr><name>exponent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>exp</name></expr>;</expr_stmt>


<expr_stmt><expr><name>modulus</name> <operator>=</operator> <call><name>BN_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>modulus</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>BN_free</name><argument_list>(<argument><expr><name>exponent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>BN_bin2bn</name><argument_list>(<argument><expr><name>key</name><operator>+</operator><name>offset</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>len</name> <operator>-</operator> <name>offset</name><operator>)</operator></expr></argument>, <argument><expr><name>modulus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rsa</name> <operator>=</operator> <call><name>RSA_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>rsa</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>BN_free</name><argument_list>(<argument><expr><name>exponent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BN_free</name><argument_list>(<argument><expr><name>modulus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPENSSL_VERSION_NUMBER</name> <operator>&lt;</operator> <literal type="number">0x10100000</literal> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBRESSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>S_SPLINT_S</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>rsa</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <name>modulus</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rsa</name><operator>-&gt;</operator><name>e</name></name> <operator>=</operator> <name>exponent</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RSA_set0_key</name><argument_list>(<argument><expr><name>rsa</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><name>exponent</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>BN_free</name><argument_list>(<argument><expr><name>exponent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BN_free</name><argument_list>(<argument><expr><name>modulus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RSA_free</name><argument_list>(<argument><expr><name>rsa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>rsa</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>ldns_digest_evp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>dest</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>EVP_MD</name><modifier>*</modifier></type> <name>md</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>EVP_MD_CTX</name><modifier>*</modifier></type> <name>ctx</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>EVP_MD_CTX_create</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ctx</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>EVP_DigestInit_ex</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>md</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>EVP_DigestUpdate</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>EVP_DigestFinal_ex</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EVP_MD_CTX_destroy</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>EVP_MD_CTX_destroy</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>ldns_rr</name> <modifier>*</modifier></type>
<name>ldns_key_rr2ds</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_rr</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>ldns_hash</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>ds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>keytag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>sha1hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>digest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>data_buf</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GOST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>EVP_MD</name><modifier>*</modifier></type> <name>md</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LDNS_RR_TYPE_DNSKEY</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ds</name> <operator>=</operator> <call><name>ldns_rr_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ds</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_rr_set_type</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>LDNS_RR_TYPE_DS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rr_set_owner</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><call><name>ldns_rdf_clone</name><argument_list>(
<argument><expr><call><name>ldns_rr_owner</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rr_set_ttl</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><call><name>ldns_rr_ttl</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rr_set_class</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><call><name>ldns_rr_get_class</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>h</name></expr>)</condition> <block>{<block_content>
<default>default:</default>
<case>case <expr><name>LDNS_SHA1</name></expr>:</case>
<expr_stmt><expr><name>digest</name> <operator>=</operator> <call><name>LDNS_XMALLOC</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>LDNS_SHA1_DIGEST_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>digest</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_rr_free</name><argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_SHA256</name></expr>:</case>
<expr_stmt><expr><name>digest</name> <operator>=</operator> <call><name>LDNS_XMALLOC</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>LDNS_SHA256_DIGEST_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>digest</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_rr_free</name><argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_HASH_GOST</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GOST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>ldns_key_EVP_load_gost_id</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>md</name> <operator>=</operator> <call><name>EVP_get_digestbyname</name><argument_list>(<argument><expr><literal type="string">"md_gost94"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>md</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_rr_free</name><argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>digest</name> <operator>=</operator> <call><name>LDNS_XMALLOC</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><call><name>EVP_MD_size</name><argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>digest</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_rr_free</name><argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>ldns_rr_free</name><argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>LDNS_SHA384</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ECDSA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>digest</name> <operator>=</operator> <call><name>LDNS_XMALLOC</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>SHA384_DIGEST_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>digest</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_rr_free</name><argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>ldns_rr_free</name><argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></switch>

<expr_stmt><expr><name>data_buf</name> <operator>=</operator> <call><name>ldns_buffer_new</name><argument_list>(<argument><expr><name>LDNS_MAX_PACKETLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data_buf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rr_free</name><argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>keytag</name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><call><name>ldns_calc_keytag</name><argument_list>(<argument><expr><operator>(</operator><name>ldns_rr</name><operator>*</operator><operator>)</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>ldns_rdf_new_frm_data</name><argument_list>(<argument><expr><name>LDNS_RDF_TYPE_INT16</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><operator>&amp;</operator><name>keytag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rr_push_rdf</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmp</name> <operator>=</operator> <call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_free</name><argument_list>(<argument><expr><name>data_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rr_free</name><argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ldns_rr_push_rdf</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><call><name>ldns_rdf_clone</name><argument_list>( <argument><expr><name>tmp</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>sha1hash</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name>h</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>ldns_rdf_new_frm_data</name><argument_list>(<argument><expr><name>LDNS_RDF_TYPE_INT8</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><operator>&amp;</operator><name>sha1hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rr_push_rdf</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>ldns_rdf_clone</name><argument_list>(<argument><expr><call><name>ldns_rr_owner</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_dname2canonical</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_rdf2buffer_wire</name><argument_list>(<argument><expr><name>data_buf</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_free</name><argument_list>(<argument><expr><name>data_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rr_free</name><argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>ldns_rr_rdata2buffer_wire</name><argument_list>(<argument><expr><name>data_buf</name></expr></argument>,
<argument><expr><operator>(</operator><name>ldns_rr</name><operator>*</operator><operator>)</operator><name>key</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_free</name><argument_list>(<argument><expr><name>data_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rr_free</name><argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<switch>switch<condition>(<expr><name>h</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LDNS_SHA1</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ldns_sha1</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>ldns_buffer_begin</name><argument_list>(<argument><expr><name>data_buf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <call><name>ldns_buffer_position</name><argument_list>(<argument><expr><name>data_buf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>ldns_rdf_new_frm_data</name><argument_list>(<argument><expr><name>LDNS_RDF_TYPE_HEX</name></expr></argument>,
<argument><expr><name>LDNS_SHA1_DIGEST_LENGTH</name></expr></argument>,
<argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rr_push_rdf</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>
<case>case <expr><name>LDNS_SHA256</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ldns_sha256</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>ldns_buffer_begin</name><argument_list>(<argument><expr><name>data_buf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <call><name>ldns_buffer_position</name><argument_list>(<argument><expr><name>data_buf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>ldns_rdf_new_frm_data</name><argument_list>(<argument><expr><name>LDNS_RDF_TYPE_HEX</name></expr></argument>,
<argument><expr><name>LDNS_SHA256_DIGEST_LENGTH</name></expr></argument>,
<argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rr_push_rdf</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_HASH_GOST</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GOST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>ldns_digest_evp</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>ldns_buffer_begin</name><argument_list>(<argument><expr><name>data_buf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <call><name>ldns_buffer_position</name><argument_list>(<argument><expr><name>data_buf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>digest</name></expr></argument>, <argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_free</name><argument_list>(<argument><expr><name>data_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rr_free</name><argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>ldns_rdf_new_frm_data</name><argument_list>(<argument><expr><name>LDNS_RDF_TYPE_HEX</name></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>EVP_MD_size</name><argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rr_push_rdf</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
<case>case <expr><name>LDNS_SHA384</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ECDSA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>SHA384</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>ldns_buffer_begin</name><argument_list>(<argument><expr><name>data_buf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <call><name>ldns_buffer_position</name><argument_list>(<argument><expr><name>data_buf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>ldns_rdf_new_frm_data</name><argument_list>(<argument><expr><name>LDNS_RDF_TYPE_HEX</name></expr></argument>,
<argument><expr><name>SHA384_DIGEST_LENGTH</name></expr></argument>,
<argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rr_push_rdf</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_free</name><argument_list>(<argument><expr><name>data_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ds</name></expr>;</return>
</block_content>}</block></function>




























<function><type><name>ldns_rdf</name> <modifier>*</modifier></type>
<name>ldns_dnssec_create_nsec_bitmap</name><parameter_list>(<parameter><decl><type><name>ldns_rr_type</name></type> <name><name>rr_type_list</name><index>[]</index></name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name>ldns_rr_type</name></type> <name>nsec_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>window</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>subtype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>windows</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>windowpresent</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr_type</name><modifier>*</modifier></type> <name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>dptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rdf</name><modifier>*</modifier></type> <name>rdf</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nsec_type</name> <operator>!=</operator> <name>LDNS_RR_TYPE_NSEC</name> <operator>&amp;&amp;</operator>
<name>nsec_type</name> <operator>!=</operator> <name>LDNS_RR_TYPE_NSEC3</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>windows</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>windowpresent</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<for>for <control>(<init><expr><name>d</name> <operator>=</operator> <name>rr_type_list</name></expr>;</init> <condition><expr><name>d</name> <operator>&lt;</operator> <name>rr_type_list</name> <operator>+</operator> <name>size</name></expr>;</condition> <incr><expr><name>d</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>window</name> <operator>=</operator> <operator>*</operator><name>d</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>subtype</name> <operator>=</operator> <operator>*</operator><name>d</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>windowpresent</name><index>[<expr><name>window</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>windows</name><index>[<expr><name>window</name></expr>]</index></name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>subtype</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>windows</name><index>[<expr><name>window</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>subtype</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>



<expr_stmt><expr><name>sz</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>windowpresent</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sz</name> <operator>+=</operator> <name><name>windows</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>sz</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>dptr</name> <operator>=</operator> <name>data</name> <operator>=</operator> <call><name>LDNS_CALLOC</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>windowpresent</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dptr</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>dptr</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name><name>windows</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>




<expr_stmt><expr><name><name>windows</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>dptr</name> <operator>-</operator> <name>data</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>dptr</name> <operator>+=</operator> <name><name>dptr</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>



<for>for <control>(<init><expr><name>d</name> <operator>=</operator> <name>rr_type_list</name></expr>;</init> <condition><expr><name>d</name> <operator>&lt;</operator> <name>rr_type_list</name> <operator>+</operator> <name>size</name></expr>;</condition> <incr><expr><name>d</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>subtype</name> <operator>=</operator> <operator>*</operator><name>d</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><name><name>windows</name><index>[<expr><operator>*</operator><name>d</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <name>subtype</name><operator>/</operator><literal type="number">8</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator><literal type="number">0x80</literal> <operator>&gt;&gt;</operator> <operator>(</operator><name>subtype</name> <operator>%</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>



<expr_stmt><expr><name>rdf</name> <operator>=</operator> <call><name>ldns_rdf_new</name><argument_list>(<argument><expr><name>LDNS_RDF_TYPE_BITMAP</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rdf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>rdf</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>ldns_dnssec_rrsets_contains_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_dnssec_rrsets</name> <modifier>*</modifier></type><name>rrsets</name></decl></parameter>,
<parameter><decl><type><name>ldns_rr_type</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ldns_dnssec_rrsets</name> <modifier>*</modifier></type><name>cur_rrset</name> <init>= <expr><name>rrsets</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>cur_rrset</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cur_rrset</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>type</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>cur_rrset</name> <operator>=</operator> <name><name>cur_rrset</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_rr</name> <modifier>*</modifier></type>
<name>ldns_dnssec_create_nsec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_dnssec_name</name> <modifier>*</modifier></type><name>from</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_dnssec_name</name> <modifier>*</modifier></type><name>to</name></decl></parameter>,
<parameter><decl><type><name>ldns_rr_type</name></type> <name>nsec_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>nsec_rr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr_type</name></type> <name><name>types</name><index>[<expr><literal type="number">65536</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>type_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_dnssec_rrsets</name> <modifier>*</modifier></type><name>cur_rrsets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>on_delegation_point</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>from</name> <operator>||</operator> <operator>!</operator><name>to</name> <operator>||</operator> <operator>(</operator><name>nsec_type</name> <operator>!=</operator> <name>LDNS_RR_TYPE_NSEC</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nsec_rr</name> <operator>=</operator> <call><name>ldns_rr_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rr_set_type</name><argument_list>(<argument><expr><name>nsec_rr</name></expr></argument>, <argument><expr><name>nsec_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rr_set_owner</name><argument_list>(<argument><expr><name>nsec_rr</name></expr></argument>, <argument><expr><call><name>ldns_rdf_clone</name><argument_list>(<argument><expr><call><name>ldns_dnssec_name_name</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rr_push_rdf</name><argument_list>(<argument><expr><name>nsec_rr</name></expr></argument>, <argument><expr><call><name>ldns_rdf_clone</name><argument_list>(<argument><expr><call><name>ldns_dnssec_name_name</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>on_delegation_point</name> <operator>=</operator> <call><name>ldns_dnssec_rrsets_contains_type</name><argument_list>(
<argument><expr><name><name>from</name><operator>-&gt;</operator><name>rrsets</name></name></expr></argument>, <argument><expr><name>LDNS_RR_TYPE_NS</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>ldns_dnssec_rrsets_contains_type</name><argument_list>(
<argument><expr><name><name>from</name><operator>-&gt;</operator><name>rrsets</name></name></expr></argument>, <argument><expr><name>LDNS_RR_TYPE_SOA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cur_rrsets</name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>rrsets</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>cur_rrsets</name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>on_delegation_point</name> <operator>&amp;&amp;</operator> <operator>(</operator>
<name><name>cur_rrsets</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>LDNS_RR_TYPE_NS</name>
<operator>||</operator> <name><name>cur_rrsets</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>LDNS_RR_TYPE_DS</name><operator>)</operator><operator>)</operator>
<operator>||</operator> <operator>(</operator><operator>!</operator><name>on_delegation_point</name> <operator>&amp;&amp;</operator>
<name><name>cur_rrsets</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>LDNS_RR_TYPE_RRSIG</name>
<operator>&amp;&amp;</operator> <name><name>cur_rrsets</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>LDNS_RR_TYPE_NSEC</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>types</name><index>[<expr><name>type_count</name></expr>]</index></name> <operator>=</operator> <name><name>cur_rrsets</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>type_count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>cur_rrsets</name> <operator>=</operator> <name><name>cur_rrsets</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>
<expr_stmt><expr><name><name>types</name><index>[<expr><name>type_count</name></expr>]</index></name> <operator>=</operator> <name>LDNS_RR_TYPE_RRSIG</name></expr>;</expr_stmt>
<expr_stmt><expr><name>type_count</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>types</name><index>[<expr><name>type_count</name></expr>]</index></name> <operator>=</operator> <name>LDNS_RR_TYPE_NSEC</name></expr>;</expr_stmt>
<expr_stmt><expr><name>type_count</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ldns_rr_push_rdf</name><argument_list>(<argument><expr><name>nsec_rr</name></expr></argument>, <argument><expr><call><name>ldns_dnssec_create_nsec_bitmap</name><argument_list>(<argument><expr><name>types</name></expr></argument>,
<argument><expr><name>type_count</name></expr></argument>,
<argument><expr><name>nsec_type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>nsec_rr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_rr</name> <modifier>*</modifier></type>
<name>ldns_dnssec_create_nsec3</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_dnssec_name</name> <modifier>*</modifier></type><name>from</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_dnssec_name</name> <modifier>*</modifier></type><name>to</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>zone_name</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>algorithm</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><name>uint16_t</name></type> <name>iterations</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>salt_length</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>salt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>nsec_rr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr_type</name></type> <name><name>types</name><index>[<expr><literal type="number">65536</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>type_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_dnssec_rrsets</name> <modifier>*</modifier></type><name>cur_rrsets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>on_delegation_point</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>from</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nsec_rr</name> <operator>=</operator> <call><name>ldns_rr_new_frm_type</name><argument_list>(<argument><expr><name>LDNS_RR_TYPE_NSEC3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rr_set_owner</name><argument_list>(<argument><expr><name>nsec_rr</name></expr></argument>,
<argument><expr><call><name>ldns_nsec3_hash_name</name><argument_list>(<argument><expr><call><name>ldns_dnssec_name_name</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>algorithm</name></expr></argument>,
<argument><expr><name>iterations</name></expr></argument>,
<argument><expr><name>salt_length</name></expr></argument>,
<argument><expr><name>salt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_dname_cat</name><argument_list>(<argument><expr><call><name>ldns_rr_owner</name><argument_list>(<argument><expr><name>nsec_rr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>zone_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>status</name> <operator>!=</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_rr_free</name><argument_list>(<argument><expr><name>nsec_rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_nsec3_add_param_rdfs</name><argument_list>(<argument><expr><name>nsec_rr</name></expr></argument>,
<argument><expr><name>algorithm</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>,
<argument><expr><name>iterations</name></expr></argument>,
<argument><expr><name>salt_length</name></expr></argument>,
<argument><expr><name>salt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>on_delegation_point</name> <operator>=</operator> <call><name>ldns_dnssec_rrsets_contains_type</name><argument_list>(
<argument><expr><name><name>from</name><operator>-&gt;</operator><name>rrsets</name></name></expr></argument>, <argument><expr><name>LDNS_RR_TYPE_NS</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>ldns_dnssec_rrsets_contains_type</name><argument_list>(
<argument><expr><name><name>from</name><operator>-&gt;</operator><name>rrsets</name></name></expr></argument>, <argument><expr><name>LDNS_RR_TYPE_SOA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cur_rrsets</name> <operator>=</operator> <name><name>from</name><operator>-&gt;</operator><name>rrsets</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>cur_rrsets</name></expr>)</condition> <block>{<block_content>






<if_stmt><if>if <condition>(<expr><operator>(</operator><name>on_delegation_point</name> <operator>&amp;&amp;</operator> <operator>(</operator>
<name><name>cur_rrsets</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>LDNS_RR_TYPE_NS</name>
<operator>||</operator> <name><name>cur_rrsets</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>LDNS_RR_TYPE_DS</name><operator>)</operator><operator>)</operator>
<operator>||</operator> <operator>(</operator><operator>!</operator><name>on_delegation_point</name> <operator>&amp;&amp;</operator>
<name><name>cur_rrsets</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>LDNS_RR_TYPE_RRSIG</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>types</name><index>[<expr><name>type_count</name></expr>]</index></name> <operator>=</operator> <name><name>cur_rrsets</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>type_count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>cur_rrsets</name> <operator>=</operator> <name><name>cur_rrsets</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></while>



<if_stmt><if>if <condition>(<expr><name>type_count</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>!</operator><operator>(</operator><name>type_count</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>types</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>LDNS_RR_TYPE_NS</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>types</name><index>[<expr><name>type_count</name></expr>]</index></name> <operator>=</operator> <name>LDNS_RR_TYPE_RRSIG</name></expr>;</expr_stmt>
<expr_stmt><expr><name>type_count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>to</name> <operator>&amp;&amp;</operator> <name><name>to</name><operator>-&gt;</operator><name>hashed_name</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ldns_rr_set_rdf</name><argument_list>(<argument><expr><name>nsec_rr</name></expr></argument>,
<argument><expr><call><name>ldns_rdf_clone</name><argument_list>(<argument><expr><name><name>to</name><operator>-&gt;</operator><name>hashed_name</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ldns_rr_set_rdf</name><argument_list>(<argument><expr><name>nsec_rr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ldns_rr_push_rdf</name><argument_list>(<argument><expr><name>nsec_rr</name></expr></argument>,
<argument><expr><call><name>ldns_dnssec_create_nsec_bitmap</name><argument_list>(<argument><expr><name>types</name></expr></argument>,
<argument><expr><name>type_count</name></expr></argument>,
<argument><expr><name>LDNS_RR_TYPE_NSEC3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>nsec_rr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_rr</name> <modifier>*</modifier></type>
<name>ldns_create_nsec</name><parameter_list>(<parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>cur_owner</name></decl></parameter>, <parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>next_owner</name></decl></parameter>, <parameter><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type><name>rrs</name></decl></parameter>)</parameter_list>
<block>{<block_content>








<decl_stmt><decl><type><name>uint16_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>i_rr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>nsec</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr_type</name></type> <name><name>i_type_list</name><index>[<expr><literal type="number">65536</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>type_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>nsec</name> <operator>=</operator> <call><name>ldns_rr_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rr_set_type</name><argument_list>(<argument><expr><name>nsec</name></expr></argument>, <argument><expr><name>LDNS_RR_TYPE_NSEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rr_set_owner</name><argument_list>(<argument><expr><name>nsec</name></expr></argument>, <argument><expr><call><name>ldns_rdf_clone</name><argument_list>(<argument><expr><name>cur_owner</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rr_push_rdf</name><argument_list>(<argument><expr><name>nsec</name></expr></argument>, <argument><expr><call><name>ldns_rdf_clone</name><argument_list>(<argument><expr><name>next_owner</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>rrs</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>i_rr</name> <operator>=</operator> <call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>rrs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_rdf_compare</name><argument_list>(<argument><expr><name>cur_owner</name></expr></argument>,
<argument><expr><call><name>ldns_rr_owner</name><argument_list>(<argument><expr><name>i_rr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i_type</name> <operator>=</operator> <call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name>i_rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i_type</name> <operator>!=</operator> <name>LDNS_RR_TYPE_RRSIG</name> <operator>&amp;&amp;</operator> <name>i_type</name> <operator>!=</operator> <name>LDNS_RR_TYPE_NSEC</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>type_count</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>i_type_list</name><index>[<expr><name>type_count</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>i_type</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>i_type_list</name><index>[<expr><name>type_count</name></expr>]</index></name> <operator>=</operator> <name>i_type</name></expr>;</expr_stmt>
<expr_stmt><expr><name>type_count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>i_type_list</name><index>[<expr><name>type_count</name></expr>]</index></name> <operator>=</operator> <name>LDNS_RR_TYPE_RRSIG</name></expr>;</expr_stmt>
<expr_stmt><expr><name>type_count</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>i_type_list</name><index>[<expr><name>type_count</name></expr>]</index></name> <operator>=</operator> <name>LDNS_RR_TYPE_NSEC</name></expr>;</expr_stmt>
<expr_stmt><expr><name>type_count</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ldns_rr_push_rdf</name><argument_list>(<argument><expr><name>nsec</name></expr></argument>,
<argument><expr><call><name>ldns_dnssec_create_nsec_bitmap</name><argument_list>(<argument><expr><name>i_type_list</name></expr></argument>,
<argument><expr><name>type_count</name></expr></argument>, <argument><expr><name>LDNS_RR_TYPE_NSEC</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>nsec</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_rdf</name> <modifier>*</modifier></type>
<name>ldns_nsec3_hash_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>algorithm</name></decl></parameter>,
<parameter><decl><type><name>uint16_t</name></type> <name>iterations</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>salt_length</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>salt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>hashed_owner_str_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>cann</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>hashed_owner</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hashed_owner_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hashed_owner_b32</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>hashed_owner_b32_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cur_it</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>hash</name><index>[<expr><name>LDNS_SHA1_DIGEST_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>status</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>algorithm</name> <operator>!=</operator> <name>LDNS_SHA1</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>cann</name> <operator>=</operator> <call><name>ldns_rdf_clone</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>cann</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STDERR_MSGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Memory error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_dname2canonical</name><argument_list>(<argument><expr><name>cann</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hashed_owner_str_len</name> <operator>=</operator> <name>salt_length</name> <operator>+</operator> <call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>cann</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hashed_owner_str</name> <operator>=</operator> <macro><name>LDNS_XMALLOC</name><argument_list>(<argument>unsigned char</argument>, <argument>hashed_owner_str_len</argument>)</argument_list></macro></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>hashed_owner_str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>cann</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>hashed_owner_str</name></expr></argument>, <argument><expr><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>cann</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>cann</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>hashed_owner_str</name> <operator>+</operator> <call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>cann</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><name>salt_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>cann</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>cur_it</name> <operator>=</operator> <name>iterations</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>cur_it</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>cur_it</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ldns_sha1</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>hashed_owner_str</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>hashed_owner_str_len</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>hashed_owner_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hashed_owner_str_len</name> <operator>=</operator> <name>salt_length</name> <operator>+</operator> <name>LDNS_SHA1_DIGEST_LENGTH</name></expr>;</expr_stmt>
<expr_stmt><expr><name>hashed_owner_str</name> <operator>=</operator> <macro><name>LDNS_XMALLOC</name><argument_list>(<argument>unsigned char</argument>, <argument>hashed_owner_str_len</argument>)</argument_list></macro></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hashed_owner_str</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>hashed_owner_str</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>LDNS_SHA1_DIGEST_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>hashed_owner_str</name> <operator>+</operator> <name>LDNS_SHA1_DIGEST_LENGTH</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><name>salt_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hashed_owner_str_len</name> <operator>=</operator> <name>LDNS_SHA1_DIGEST_LENGTH</name> <operator>+</operator> <name>salt_length</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>hashed_owner_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hashed_owner_str</name> <operator>=</operator> <name>hash</name></expr>;</expr_stmt>
<expr_stmt><expr><name>hashed_owner_str_len</name> <operator>=</operator> <name>LDNS_SHA1_DIGEST_LENGTH</name></expr>;</expr_stmt>

<expr_stmt><expr><name>hashed_owner_b32</name> <operator>=</operator> <call><name>LDNS_XMALLOC</name><argument_list>(<argument><expr><name>char</name></expr></argument>,
<argument><expr><call><name>ldns_b32_ntop_calculate_size</name><argument_list>(<argument><expr><name>hashed_owner_str_len</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>hashed_owner_b32</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>hashed_owner_b32_len</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <call><name>ldns_b32_ntop_extended_hex</name><argument_list>(
<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>hashed_owner_str</name></expr></argument>,
<argument><expr><name>hashed_owner_str_len</name></expr></argument>,
<argument><expr><name>hashed_owner_b32</name></expr></argument>,
<argument><expr><call><name>ldns_b32_ntop_calculate_size</name><argument_list>(<argument><expr><name>hashed_owner_str_len</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hashed_owner_b32_len</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STDERR_MSGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Error in base32 extended hex encoding "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"of hashed owner name (name: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rdf_print</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">", return code: %u)\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>hashed_owner_b32_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>hashed_owner_b32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>hashed_owner_b32</name><index>[<expr><name>hashed_owner_b32_len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_str2rdf_dname</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hashed_owner</name></expr></argument>, <argument><expr><name>hashed_owner_b32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STDERR_MSGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Error creating rdf from %s\n"</literal></expr></argument>, <argument><expr><name>hashed_owner_b32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>hashed_owner_b32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>hashed_owner_b32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>hashed_owner</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ldns_nsec3_add_param_rdfs</name><parameter_list>(<parameter><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>rr</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>algorithm</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><name>uint16_t</name></type> <name>iterations</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>salt_length</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>salt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>salt_rdf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>salt_data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>old</name></decl>;</decl_stmt>

<expr_stmt><expr><name>old</name> <operator>=</operator> <call><name>ldns_rr_set_rdf</name><argument_list>(<argument><expr><name>rr</name></expr></argument>,
<argument><expr><call><name>ldns_rdf_new_frm_data</name><argument_list>(<argument><expr><name>LDNS_RDF_TYPE_INT8</name></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>algorithm</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>old</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>old</name> <operator>=</operator> <call><name>ldns_rr_set_rdf</name><argument_list>(<argument><expr><name>rr</name></expr></argument>,
<argument><expr><call><name>ldns_rdf_new_frm_data</name><argument_list>(<argument><expr><name>LDNS_RDF_TYPE_INT8</name></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>flags</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>old</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>old</name> <operator>=</operator> <call><name>ldns_rr_set_rdf</name><argument_list>(<argument><expr><name>rr</name></expr></argument>,
<argument><expr><call><name>ldns_native2rdf_int16</name><argument_list>(<argument><expr><name>LDNS_RDF_TYPE_INT16</name></expr></argument>,
<argument><expr><name>iterations</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>old</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>salt_data</name> <operator>=</operator> <call><name>LDNS_XMALLOC</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>salt_length</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>salt_data</name></expr>)</condition> <block>{<block_content>

<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>salt_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>salt_length</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>salt_data</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><name>salt_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>salt_rdf</name> <operator>=</operator> <call><name>ldns_rdf_new_frm_data</name><argument_list>(<argument><expr><name>LDNS_RDF_TYPE_NSEC3_SALT</name></expr></argument>,
<argument><expr><name>salt_length</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name>salt_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>salt_rdf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>salt_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>old</name> <operator>=</operator> <call><name>ldns_rr_set_rdf</name><argument_list>(<argument><expr><name>rr</name></expr></argument>, <argument><expr><name>salt_rdf</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>old</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>salt_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>rr_list_delegation_only</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>origin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_rr_list</name> <modifier>*</modifier></type><name>rr_list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>cur_rr</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>origin</name> <operator>||</operator> <operator>!</operator><name>rr_list</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>rr_list</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>cur_rr</name> <operator>=</operator> <call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>rr_list</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_dname_compare</name><argument_list>(<argument><expr><call><name>ldns_rr_owner</name><argument_list>(<argument><expr><name>cur_rr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>origin</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name>cur_rr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LDNS_RR_TYPE_NS</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>



<function><type><name>ldns_rr</name> <modifier>*</modifier></type>
<name>ldns_create_nsec3</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>cur_owner</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>cur_zone</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_rr_list</name> <modifier>*</modifier></type><name>rrs</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>algorithm</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><name>uint16_t</name></type> <name>iterations</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>salt_length</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>salt</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>emptynonterminal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>i_rr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>nsec</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>hashed_owner</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ldns_status</name></type> <name>status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ldns_rr_type</name></type> <name><name>i_type_list</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>type_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>hashed_owner</name> <operator>=</operator> <call><name>ldns_nsec3_hash_name</name><argument_list>(<argument><expr><name>cur_owner</name></expr></argument>,
<argument><expr><name>algorithm</name></expr></argument>,
<argument><expr><name>iterations</name></expr></argument>,
<argument><expr><name>salt_length</name></expr></argument>,
<argument><expr><name>salt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_dname_cat</name><argument_list>(<argument><expr><name>hashed_owner</name></expr></argument>, <argument><expr><name>cur_zone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>status</name> <operator>!=</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>hashed_owner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>nsec</name> <operator>=</operator> <call><name>ldns_rr_new_frm_type</name><argument_list>(<argument><expr><name>LDNS_RR_TYPE_NSEC3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>nsec</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>hashed_owner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_rr_set_type</name><argument_list>(<argument><expr><name>nsec</name></expr></argument>, <argument><expr><name>LDNS_RR_TYPE_NSEC3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rr_set_owner</name><argument_list>(<argument><expr><name>nsec</name></expr></argument>, <argument><expr><name>hashed_owner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ldns_nsec3_add_param_rdfs</name><argument_list>(<argument><expr><name>nsec</name></expr></argument>,
<argument><expr><name>algorithm</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>,
<argument><expr><name>iterations</name></expr></argument>,
<argument><expr><name>salt_length</name></expr></argument>,
<argument><expr><name>salt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ldns_rr_set_rdf</name><argument_list>(<argument><expr><name>nsec</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>rrs</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>i_rr</name> <operator>=</operator> <call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>rrs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_rdf_compare</name><argument_list>(<argument><expr><name>cur_owner</name></expr></argument>,
<argument><expr><call><name>ldns_rr_owner</name><argument_list>(<argument><expr><name>i_rr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i_type</name> <operator>=</operator> <call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name>i_rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>type_count</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>i_type_list</name><index>[<expr><name>type_count</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>i_type</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>i_type_list</name><index>[<expr><name>type_count</name></expr>]</index></name> <operator>=</operator> <name>i_type</name></expr>;</expr_stmt>
<expr_stmt><expr><name>type_count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name>emptynonterminal</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>rr_list_delegation_only</name><argument_list>(<argument><expr><name>cur_zone</name></expr></argument>, <argument><expr><name>rrs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>i_type_list</name><index>[<expr><name>type_count</name></expr>]</index></name> <operator>=</operator> <name>LDNS_RR_TYPE_RRSIG</name></expr>;</expr_stmt>
<expr_stmt><expr><name>type_count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>ldns_dname_compare</name><argument_list>(<argument><expr><name>cur_zone</name></expr></argument>, <argument><expr><name>cur_owner</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>i_type_list</name><index>[<expr><name>type_count</name></expr>]</index></name> <operator>=</operator> <name>LDNS_RR_TYPE_SOA</name></expr>;</expr_stmt>
<expr_stmt><expr><name>type_count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ldns_rr_push_rdf</name><argument_list>(<argument><expr><name>nsec</name></expr></argument>,
<argument><expr><call><name>ldns_dnssec_create_nsec_bitmap</name><argument_list>(<argument><expr><name>i_type_list</name></expr></argument>,
<argument><expr><name>type_count</name></expr></argument>, <argument><expr><name>LDNS_RR_TYPE_NSEC3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>nsec</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint8_t</name></type>
<name>ldns_nsec3_algorithm</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_rr</name> <modifier>*</modifier></type><name>nsec3_rr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>nsec3_rr</name> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name>nsec3_rr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LDNS_RR_TYPE_NSEC3</name> <operator>||</operator>
<call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name>nsec3_rr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LDNS_RR_TYPE_NSEC3PARAM</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>nsec3_rr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator>
<operator>&amp;&amp;</operator> <call><name>ldns_rdf_size</name><argument_list>(<argument><expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>nsec3_rr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>ldns_rdf2native_int8</name><argument_list>(<argument><expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>nsec3_rr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint8_t</name></type>
<name>ldns_nsec3_flags</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_rr</name> <modifier>*</modifier></type><name>nsec3_rr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>nsec3_rr</name> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name>nsec3_rr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LDNS_RR_TYPE_NSEC3</name> <operator>||</operator>
<call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name>nsec3_rr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LDNS_RR_TYPE_NSEC3PARAM</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>nsec3_rr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator>
<operator>&amp;&amp;</operator> <call><name>ldns_rdf_size</name><argument_list>(<argument><expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>nsec3_rr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>ldns_rdf2native_int8</name><argument_list>(<argument><expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>nsec3_rr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ldns_nsec3_optout</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_rr</name> <modifier>*</modifier></type><name>nsec3_rr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>ldns_nsec3_flags</name><argument_list>(<argument><expr><name>nsec3_rr</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>LDNS_NSEC3_VARS_OPTOUT_MASK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint16_t</name></type>
<name>ldns_nsec3_iterations</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_rr</name> <modifier>*</modifier></type><name>nsec3_rr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>nsec3_rr</name> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name>nsec3_rr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LDNS_RR_TYPE_NSEC3</name> <operator>||</operator>
<call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name>nsec3_rr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LDNS_RR_TYPE_NSEC3PARAM</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>nsec3_rr</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator>
<operator>&amp;&amp;</operator> <call><name>ldns_rdf_size</name><argument_list>(<argument><expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>nsec3_rr</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>ldns_rdf2native_int16</name><argument_list>(<argument><expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>nsec3_rr</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>ldns_rdf</name> <modifier>*</modifier></type>
<name>ldns_nsec3_salt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_rr</name> <modifier>*</modifier></type><name>nsec3_rr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>nsec3_rr</name> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name>nsec3_rr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LDNS_RR_TYPE_NSEC3</name> <operator>||</operator>
<call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name>nsec3_rr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LDNS_RR_TYPE_NSEC3PARAM</name><operator>)</operator></expr>
)</condition> <block>{<block_content>
<return>return <expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>nsec3_rr</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint8_t</name></type>
<name>ldns_nsec3_salt_length</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_rr</name> <modifier>*</modifier></type><name>nsec3_rr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>salt_rdf</name> <init>= <expr><call><name>ldns_nsec3_salt</name><argument_list>(<argument><expr><name>nsec3_rr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>salt_rdf</name> <operator>&amp;&amp;</operator> <call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>salt_rdf</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>uint8_t</name><operator>)</operator> <call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>salt_rdf</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>uint8_t</name> <modifier>*</modifier></type>
<name>ldns_nsec3_salt_data</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_rr</name> <modifier>*</modifier></type><name>nsec3_rr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>salt_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>salt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>salt_rdf</name> <init>= <expr><call><name>ldns_nsec3_salt</name><argument_list>(<argument><expr><name>nsec3_rr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>salt_rdf</name> <operator>&amp;&amp;</operator> <call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>salt_rdf</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>salt_length</name> <operator>=</operator> <call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>salt_rdf</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><name>salt</name> <operator>=</operator> <call><name>LDNS_XMALLOC</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>salt_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>salt</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>salt</name></expr></argument>, <argument><expr><operator>&amp;</operator><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>salt_rdf</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">1</literal></expr>]</index></expr></argument>, <argument><expr><name>salt_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>salt</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_rdf</name> <modifier>*</modifier></type>
<name>ldns_nsec3_next_owner</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_rr</name> <modifier>*</modifier></type><name>nsec3_rr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nsec3_rr</name> <operator>||</operator> <call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name>nsec3_rr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LDNS_RR_TYPE_NSEC3</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>nsec3_rr</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>ldns_rdf</name> <modifier>*</modifier></type>
<name>ldns_nsec3_bitmap</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_rr</name> <modifier>*</modifier></type><name>nsec3_rr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nsec3_rr</name> <operator>||</operator> <call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name>nsec3_rr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LDNS_RR_TYPE_NSEC3</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>nsec3_rr</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>ldns_rdf</name> <modifier>*</modifier></type>
<name>ldns_nsec3_hash_name_frm_nsec3</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_rr</name> <modifier>*</modifier></type><name>nsec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>algorithm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>iterations</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>salt_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>salt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>hashed_owner</name></decl>;</decl_stmt>

<expr_stmt><expr><name>algorithm</name> <operator>=</operator> <call><name>ldns_nsec3_algorithm</name><argument_list>(<argument><expr><name>nsec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>salt_length</name> <operator>=</operator> <call><name>ldns_nsec3_salt_length</name><argument_list>(<argument><expr><name>nsec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>salt</name> <operator>=</operator> <call><name>ldns_nsec3_salt_data</name><argument_list>(<argument><expr><name>nsec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>iterations</name> <operator>=</operator> <call><name>ldns_nsec3_iterations</name><argument_list>(<argument><expr><name>nsec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hashed_owner</name> <operator>=</operator> <call><name>ldns_nsec3_hash_name</name><argument_list>(<argument><expr><name>name</name></expr></argument>,
<argument><expr><name>algorithm</name></expr></argument>,
<argument><expr><name>iterations</name></expr></argument>,
<argument><expr><name>salt_length</name></expr></argument>,
<argument><expr><name>salt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>salt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>hashed_owner</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ldns_nsec_bitmap_covers_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name><modifier>*</modifier></type> <name>bitmap</name></decl></parameter>, <parameter><decl><type><name>ldns_rr_type</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>dptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>dend</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name>uint8_t</name></type> <name>window</name> <init>= <expr><name>type</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>subtype</name> <init>= <expr><name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>bitmap</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>ldns_rdf_get_type</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LDNS_RDF_TYPE_BITMAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dptr</name> <operator>=</operator> <call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dend</name> <operator>=</operator> <call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<while>while <condition>(<expr><name>dptr</name> <operator>&lt;</operator> <name>dend</name> <operator>&amp;&amp;</operator> <name><name>dptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <name>window</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>dptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>window</name> <operator>&amp;&amp;</operator> <name>subtype</name> <operator>/</operator> <literal type="number">8</literal> <operator>&lt;</operator> <name><name>dptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator>
<name>dptr</name> <operator>+</operator> <name><name>dptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal> <operator>&lt;=</operator> <name>dend</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>dptr</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <name>subtype</name> <operator>/</operator> <literal type="number">8</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">0x80</literal> <operator>&gt;&gt;</operator> <operator>(</operator><name>subtype</name> <operator>%</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dptr</name> <operator>+=</operator> <name><name>dptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_nsec_bitmap_set_type</name><parameter_list>(<parameter><decl><type><name>ldns_rdf</name><modifier>*</modifier></type> <name>bitmap</name></decl></parameter>, <parameter><decl><type><name>ldns_rr_type</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>dptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>dend</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name>uint8_t</name></type> <name>window</name> <init>= <expr><name>type</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>subtype</name> <init>= <expr><name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>bitmap</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>ldns_rdf_get_type</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LDNS_RDF_TYPE_BITMAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dptr</name> <operator>=</operator> <call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dend</name> <operator>=</operator> <call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<while>while <condition>(<expr><name>dptr</name> <operator>&lt;</operator> <name>dend</name> <operator>&amp;&amp;</operator> <name><name>dptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <name>window</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>dptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>window</name> <operator>&amp;&amp;</operator> <name>subtype</name> <operator>/</operator> <literal type="number">8</literal> <operator>&lt;</operator> <name><name>dptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator>
<name>dptr</name> <operator>+</operator> <name><name>dptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal> <operator>&lt;=</operator> <name>dend</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dptr</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <name>subtype</name> <operator>/</operator> <literal type="number">8</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator><literal type="number">0x80</literal> <operator>&gt;&gt;</operator> <operator>(</operator><name>subtype</name> <operator>%</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dptr</name> <operator>+=</operator> <name><name>dptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>LDNS_STATUS_TYPE_NOT_IN_BITMAP</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_nsec_bitmap_clear_type</name><parameter_list>(<parameter><decl><type><name>ldns_rdf</name><modifier>*</modifier></type> <name>bitmap</name></decl></parameter>, <parameter><decl><type><name>ldns_rr_type</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>dptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>dend</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name>uint8_t</name></type> <name>window</name> <init>= <expr><name>type</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>subtype</name> <init>= <expr><name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>bitmap</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>ldns_rdf_get_type</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LDNS_RDF_TYPE_BITMAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dptr</name> <operator>=</operator> <call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dend</name> <operator>=</operator> <call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<while>while <condition>(<expr><name>dptr</name> <operator>&lt;</operator> <name>dend</name> <operator>&amp;&amp;</operator> <name><name>dptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <name>window</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>dptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>window</name> <operator>&amp;&amp;</operator> <name>subtype</name> <operator>/</operator> <literal type="number">8</literal> <operator>&lt;</operator> <name><name>dptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator>
<name>dptr</name> <operator>+</operator> <name><name>dptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal> <operator>&lt;=</operator> <name>dend</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dptr</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <name>subtype</name> <operator>/</operator> <literal type="number">8</literal></expr>]</index></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><literal type="number">0x80</literal> <operator>&gt;&gt;</operator> <operator>(</operator><name>subtype</name> <operator>%</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dptr</name> <operator>+=</operator> <name><name>dptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>LDNS_STATUS_TYPE_NOT_IN_BITMAP</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>bool</name></type>
<name>ldns_nsec_covers_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_rr</name> <modifier>*</modifier></type><name>nsec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>nsec_owner</name> <init>= <expr><call><name>ldns_rr_owner</name><argument_list>(<argument><expr><name>nsec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>hash_next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>next_hash_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>nsec_next</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>chopped_dname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>result</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name>nsec</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LDNS_RR_TYPE_NSEC</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>nsec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nsec_next</name> <operator>=</operator> <call><name>ldns_rdf_clone</name><argument_list>(<argument><expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>nsec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name>nsec</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LDNS_RR_TYPE_NSEC3</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>hash_next</name> <operator>=</operator> <call><name>ldns_nsec3_next_owner</name><argument_list>(<argument><expr><name>nsec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>next_hash_str</name> <operator>=</operator> <call><name>ldns_rdf2str</name><argument_list>(<argument><expr><name>hash_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nsec_next</name> <operator>=</operator> <call><name>ldns_dname_new_frm_str</name><argument_list>(<argument><expr><name>next_hash_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>next_hash_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>chopped_dname</name> <operator>=</operator> <call><name>ldns_dname_left_chop</name><argument_list>(<argument><expr><name>nsec_owner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_dname_cat</name><argument_list>(<argument><expr><name>nsec_next</name></expr></argument>, <argument><expr><name>chopped_dname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>chopped_dname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"error catting: %s\n"</literal></expr></argument>, <argument><expr><call><name>ldns_get_errorstr_by_id</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>nsec_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if<condition>(<expr><call><name>ldns_dname_compare</name><argument_list>(<argument><expr><name>nsec_owner</name></expr></argument>, <argument><expr><name>nsec_next</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><call><name>ldns_dname_compare</name><argument_list>(<argument><expr><name>nsec_owner</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>ldns_dname_compare</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>nsec_next</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><call><name>ldns_dname_compare</name><argument_list>(<argument><expr><name>nsec_owner</name></expr></argument>, <argument><expr><name>nsec_next</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><call><name>ldns_dname_compare</name><argument_list>(<argument><expr><name>nsec_owner</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>ldns_dname_compare</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>nsec_next</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>nsec_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>


<function><type><name>ldns_status</name></type>
<name>ldns_pkt_verify_time</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_pkt</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>ldns_rr_type</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>o</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_rr_list</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_rr_list</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name>time_t</name></type> <name>check_time</name></decl></parameter>, <parameter><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type><name>good_keys</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type><name>rrset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type><name>sigs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type><name>sigs_covered</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>rdf_t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr_type</name></type> <name>t_netorder</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>k</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_ERR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <name>LDNS_RR_TYPE_RRSIG</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>LDNS_STATUS_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sigs</name> <operator>=</operator> <operator>(</operator><name>ldns_rr_list</name> <operator>*</operator><operator>)</operator><name>s</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>sigs</name> <operator>=</operator> <call><name>ldns_pkt_rr_list_by_name_and_type</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>o</name></expr></argument>,
<argument><expr><name>LDNS_RR_TYPE_RRSIG</name></expr></argument>,
<argument><expr><name>LDNS_SECTION_ANY_NOQUESTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sigs</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>LDNS_STATUS_ERR</name></expr>;</return>

</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>




<expr_stmt><expr><name>t_netorder</name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rdf_t</name> <operator>=</operator> <call><name>ldns_rdf_new</name><argument_list>(<argument><expr><name>LDNS_RDF_TYPE_TYPE</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t_netorder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sigs_covered</name> <operator>=</operator> <call><name>ldns_rr_list_subtype_by_rdf</name><argument_list>(<argument><expr><name>sigs</name></expr></argument>, <argument><expr><name>rdf_t</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rdf_free</name><argument_list>(<argument><expr><name>rdf_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>sigs_covered</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>s</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_rr_list_deep_free</name><argument_list>(<argument><expr><name>sigs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>LDNS_STATUS_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_rr_list_deep_free</name><argument_list>(<argument><expr><name>sigs_covered</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rrset</name> <operator>=</operator> <call><name>ldns_pkt_rr_list_by_name_and_type</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><name>t</name></expr></argument>,
<argument><expr><name>LDNS_SECTION_ANY_NOQUESTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rrset</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>s</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_rr_list_deep_free</name><argument_list>(<argument><expr><name>sigs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>LDNS_STATUS_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>ldns_verify_time</name><argument_list>(<argument><expr><name>rrset</name></expr></argument>, <argument><expr><name>sigs</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>check_time</name></expr></argument>, <argument><expr><name>good_keys</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_pkt_verify</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_pkt</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>ldns_rr_type</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>o</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_rr_list</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_rr_list</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type><name>good_keys</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_pkt_verify_time</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>ldns_time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>good_keys</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>ldns_status</name></type>
<name>ldns_dnssec_chain_nsec3_list</name><parameter_list>(<parameter><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type><name>nsec3_rrs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>next_nsec_owner_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>next_nsec_owner_label</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>next_nsec_rdf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>status</name> <init>= <expr><name>LDNS_STATUS_OK</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>nsec3_rrs</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>nsec3_rrs</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>next_nsec_owner_label</name> <operator>=</operator>
<call><name>ldns_dname_label</name><argument_list>(<argument><expr><call><name>ldns_rr_owner</name><argument_list>(<argument><expr><call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>nsec3_rrs</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>next_nsec_owner_str</name> <operator>=</operator> <call><name>ldns_rdf2str</name><argument_list>(<argument><expr><name>next_nsec_owner_label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>next_nsec_owner_str</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>next_nsec_owner_str</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name>
<operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>next_nsec_owner_str</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>next_nsec_owner_str</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name>
<operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_str2rdf_b32_ext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>next_nsec_rdf</name></expr></argument>,
<argument><expr><name>next_nsec_owner_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ldns_rr_set_rdf</name><argument_list>(<argument><expr><call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>nsec3_rrs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>next_nsec_rdf</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>next_nsec_owner_label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>next_nsec_owner_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>next_nsec_owner_label</name> <operator>=</operator>
<call><name>ldns_dname_label</name><argument_list>(<argument><expr><call><name>ldns_rr_owner</name><argument_list>(<argument><expr><call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>nsec3_rrs</name></expr></argument>,
<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>next_nsec_owner_str</name> <operator>=</operator> <call><name>ldns_rdf2str</name><argument_list>(<argument><expr><name>next_nsec_owner_label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>next_nsec_owner_str</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>next_nsec_owner_str</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name>
<operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>next_nsec_owner_str</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>next_nsec_owner_str</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name>
<operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_str2rdf_b32_ext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>next_nsec_rdf</name></expr></argument>,
<argument><expr><name>next_nsec_owner_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>next_nsec_owner_label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>next_nsec_owner_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ldns_rr_set_rdf</name><argument_list>(<argument><expr><call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>nsec3_rrs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>next_nsec_rdf</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>qsort_rr_compare_nsec3</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ldns_rr</name> <modifier>*</modifier></type><name>rr1</name> <init>= <expr><operator>*</operator> <operator>(</operator><specifier>const</specifier> <name>ldns_rr</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ldns_rr</name> <modifier>*</modifier></type><name>rr2</name> <init>= <expr><operator>*</operator> <operator>(</operator><specifier>const</specifier> <name>ldns_rr</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>b</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>rr1</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>rr2</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>rr1</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>rr2</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>ldns_rdf_compare</name><argument_list>(<argument><expr><call><name>ldns_rr_owner</name><argument_list>(<argument><expr><name>rr1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ldns_rr_owner</name><argument_list>(<argument><expr><name>rr2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ldns_rr_list_sort_nsec3</name><parameter_list>(<parameter><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type><name>unsorted</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name><name>unsorted</name><operator>-&gt;</operator><name>_rrs</name></name></expr></argument>,
<argument><expr><call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>unsorted</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ldns_rr</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>qsort_rr_compare_nsec3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>int</name></type>
<name>ldns_dnssec_default_add_to_signatures</name><argument_list>( <argument><expr><call><name>ATTR_UNUSED</name><argument_list>(<argument><expr><name>ldns_rr</name> <operator>*</operator><name>sig</name></expr></argument>)</argument_list></call></expr></argument>
, <argument><expr><call><name>ATTR_UNUSED</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator><name>n</name></expr></argument>)</argument_list></call></expr></argument>
)</argument_list>
<block>{<block_content>
<return>return <expr><name>LDNS_SIGNATURE_LEAVE_ADD_NEW</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>int</name></type>
<name>ldns_dnssec_default_leave_signatures</name><argument_list>( <argument><expr><call><name>ATTR_UNUSED</name><argument_list>(<argument><expr><name>ldns_rr</name> <operator>*</operator><name>sig</name></expr></argument>)</argument_list></call></expr></argument>
, <argument><expr><call><name>ATTR_UNUSED</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator><name>n</name></expr></argument>)</argument_list></call></expr></argument>
)</argument_list>
<block>{<block_content>
<return>return <expr><name>LDNS_SIGNATURE_LEAVE_NO_ADD</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>int</name></type>
<name>ldns_dnssec_default_delete_signatures</name><argument_list>( <argument><expr><call><name>ATTR_UNUSED</name><argument_list>(<argument><expr><name>ldns_rr</name> <operator>*</operator><name>sig</name></expr></argument>)</argument_list></call></expr></argument>
, <argument><expr><call><name>ATTR_UNUSED</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator><name>n</name></expr></argument>)</argument_list></call></expr></argument>
)</argument_list>
<block>{<block_content>
<return>return <expr><name>LDNS_SIGNATURE_REMOVE_NO_ADD</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>int</name></type>
<name>ldns_dnssec_default_replace_signatures</name><argument_list>( <argument><expr><call><name>ATTR_UNUSED</name><argument_list>(<argument><expr><name>ldns_rr</name> <operator>*</operator><name>sig</name></expr></argument>)</argument_list></call></expr></argument>
, <argument><expr><call><name>ATTR_UNUSED</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator><name>n</name></expr></argument>)</argument_list></call></expr></argument>
)</argument_list>
<block>{<block_content>
<return>return <expr><name>LDNS_SIGNATURE_REMOVE_ADD_NEW</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>ldns_rdf</name> <modifier>*</modifier></type>
<name>ldns_convert_dsa_rrsig_asn12rdf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_buffer</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>long</name></type> <name>sig_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_DSA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>sigdata_rdf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DSA_SIG</name> <modifier>*</modifier></type><name>dsasig</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>BIGNUM</name> <modifier>*</modifier></type><name>R</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>S</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dsasig_data</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><call><name>ldns_buffer_begin</name><argument_list>(<argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>byte_offset</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dsasig</name> <operator>=</operator> <call><name>d2i_DSA_SIG</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dsasig_data</name></expr></argument>,
<argument><expr><name>sig_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dsasig</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DSA_SIG_free</name><argument_list>(<argument><expr><name>dsasig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dsasig_data</name> <operator>=</operator> <macro><name>LDNS_XMALLOC</name><argument_list>(<argument>unsigned char</argument>, <argument><literal type="number">41</literal></argument>)</argument_list></macro></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>dsasig_data</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DSA_SIG_free</name><argument_list>(<argument><expr><name>dsasig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>dsasig_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DSA_SIG_GET0</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>DSA_SIG_get0</name><argument_list>(<argument><expr><name>dsasig</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>R</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>R</name> <operator>=</operator> <name><name>dsasig</name><operator>-&gt;</operator><name>r</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>S</name> <operator>=</operator> <name><name>dsasig</name><operator>-&gt;</operator><name>s</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>byte_offset</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><literal type="number">20</literal> <operator>-</operator> <call><name>BN_num_bytes</name><argument_list>(<argument><expr><name>R</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>byte_offset</name> <operator>&gt;</operator> <literal type="number">20</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DSA_SIG_free</name><argument_list>(<argument><expr><name>dsasig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>dsasig_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsasig_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>byte_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BN_bn2bin</name><argument_list>(<argument><expr><name>R</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dsasig_data</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <name>byte_offset</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>byte_offset</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><literal type="number">20</literal> <operator>-</operator> <call><name>BN_num_bytes</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>byte_offset</name> <operator>&gt;</operator> <literal type="number">20</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DSA_SIG_free</name><argument_list>(<argument><expr><name>dsasig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>dsasig_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsasig_data</name><index>[<expr><literal type="number">21</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>byte_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BN_bn2bin</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dsasig_data</name><index>[<expr><literal type="number">21</literal> <operator>+</operator> <name>byte_offset</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sigdata_rdf</name> <operator>=</operator> <call><name>ldns_rdf_new</name><argument_list>(<argument><expr><name>LDNS_RDF_TYPE_B64</name></expr></argument>, <argument><expr><literal type="number">41</literal></expr></argument>, <argument><expr><name>dsasig_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>sigdata_rdf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>dsasig_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>DSA_SIG_free</name><argument_list>(<argument><expr><name>dsasig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>sigdata_rdf</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>sig</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>sig_len</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_convert_dsa_rrsig_rdf2asn1</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>target_buffer</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>sig_rdf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_DSA</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>BIGNUM</name> <modifier>*</modifier></type><name>R</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>S</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DSA_SIG</name> <modifier>*</modifier></type><name>dsasig</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>raw_sig</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>raw_sig_len</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>sig_rdf</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>SHA_DIGEST_LENGTH</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LDNS_STATUS_SYNTAX_RDATA_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>R</name> <operator>=</operator> <call><name>BN_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>R</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>BN_bin2bn</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>sig_rdf</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name>SHA_DIGEST_LENGTH</name></expr></argument>, <argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>S</name> <operator>=</operator> <call><name>BN_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>S</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>BN_free</name><argument_list>(<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>BN_bin2bn</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>sig_rdf</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">21</literal></expr></argument>,
<argument><expr><name>SHA_DIGEST_LENGTH</name></expr></argument>, <argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dsasig</name> <operator>=</operator> <call><name>DSA_SIG_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dsasig</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>BN_free</name><argument_list>(<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BN_free</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DSA_SIG_SET0</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>DSA_SIG_set0</name><argument_list>(<argument><expr><name>dsasig</name></expr></argument>, <argument><expr><name>R</name></expr></argument>, <argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LDNS_STATUS_SSL_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>dsasig</name><operator>-&gt;</operator><name>r</name></name> <operator>=</operator> <name>R</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dsasig</name><operator>-&gt;</operator><name>s</name></name> <operator>=</operator> <name>S</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>raw_sig_len</name> <operator>=</operator> <call><name>i2d_DSA_SIG</name><argument_list>(<argument><expr><name>dsasig</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>raw_sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>raw_sig_len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DSA_SIG_free</name><argument_list>(<argument><expr><name>dsasig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>raw_sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_SSL_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_buffer_reserve</name><argument_list>(<argument><expr><name>target_buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>raw_sig_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_write</name><argument_list>(<argument><expr><name>target_buffer</name></expr></argument>, <argument><expr><name>raw_sig</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>raw_sig_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DSA_SIG_free</name><argument_list>(<argument><expr><name>dsasig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>raw_sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ldns_buffer_status</name><argument_list>(<argument><expr><name>target_buffer</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>target_buffer</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>sig_rdf</name></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_CRYPTO_ALGO_NOT_IMPL</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ECDSA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>S_SPLINT_S</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>ldns_rdf</name> <modifier>*</modifier></type>
<name>ldns_convert_ecdsa_rrsig_asn1len2rdf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_buffer</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>long</name></type> <name>sig_len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_bytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ECDSA_SIG</name><modifier>*</modifier></type> <name>ecdsa_sig</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>BIGNUM</name> <modifier>*</modifier></type><name>r</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><call><name>ldns_buffer_begin</name><argument_list>(<argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rdf</name><modifier>*</modifier></type> <name>rdf</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ecdsa_sig</name> <operator>=</operator> <call><name>d2i_ECDSA_SIG</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>sig_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ecdsa_sig</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ECDSA_SIG_GET0</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ECDSA_SIG_get0</name><argument_list>(<argument><expr><name>ecdsa_sig</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>ecdsa_sig</name><operator>-&gt;</operator><name>r</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>ecdsa_sig</name><operator>-&gt;</operator><name>s</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><call><name>BN_num_bytes</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>num_bytes</name> <operator>||</operator>
<call><name>BN_num_bytes</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>num_bytes</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ECDSA_SIG_free</name><argument_list>(<argument><expr><name>ecdsa_sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <macro><name>LDNS_XMALLOC</name><argument_list>(<argument>unsigned char</argument>, <argument>num_bytes*<literal type="number">2</literal></argument>)</argument_list></macro></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>data</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ECDSA_SIG_free</name><argument_list>(<argument><expr><name>ecdsa_sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>num_bytes</name><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BN_bn2bin</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>data</name><operator>+</operator><name>num_bytes</name><operator>-</operator><call><name>BN_num_bytes</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BN_bn2bin</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>data</name><operator>+</operator><name>num_bytes</name><operator>*</operator><literal type="number">2</literal><operator>-</operator><call><name>BN_num_bytes</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rdf</name> <operator>=</operator> <call><name>ldns_rdf_new</name><argument_list>(<argument><expr><name>LDNS_RDF_TYPE_B64</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>num_bytes</name><operator>*</operator><literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ECDSA_SIG_free</name><argument_list>(<argument><expr><name>ecdsa_sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rdf</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_convert_ecdsa_rrsig_rdf2asn1</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>target_buffer</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>sig_rdf</name></decl></parameter>)</parameter_list>
<block>{<block_content>







<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>pre</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x20</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pre_len</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>mid</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x20</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mid_len</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>raw_sig_len</name></decl>, <decl><type ref="prev"/><name>r_high</name></decl>, <decl><type ref="prev"/><name>s_high</name></decl>, <decl><type ref="prev"/><name>r_rem</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>s_rem</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>bnsize</name> <init>= <expr><operator>(</operator><name>long</name><operator>)</operator><call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>sig_rdf</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>d</name> <init>= <expr><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>sig_rdf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>bnsize</name> <operator>&lt;</operator> <literal type="number">16</literal> <operator>||</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>bnsize</name><operator>*</operator><literal type="number">2</literal> <operator>!=</operator> <call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>sig_rdf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LDNS_STATUS_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<while>while<condition>(<expr><name>r_rem</name> <operator>&lt;</operator> <name>bnsize</name><operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>d</name><index>[<expr><name>r_rem</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r_rem</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<while>while<condition>(<expr><name>s_rem</name> <operator>&lt;</operator> <name>bnsize</name><operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>d</name><index>[<expr><name>bnsize</name><operator>+</operator><name>s_rem</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s_rem</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>r_high</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>d</name><index>[<expr><literal type="number">0</literal><operator>+</operator><name>r_rem</name></expr>]</index></name><operator>&amp;</operator><literal type="number">0x80</literal><operator>)</operator></expr>?</condition><then><expr><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>s_high</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>d</name><index>[<expr><name>bnsize</name><operator>+</operator><name>s_rem</name></expr>]</index></name><operator>&amp;</operator><literal type="number">0x80</literal><operator>)</operator></expr>?</condition><then><expr><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>raw_sig_len</name> <operator>=</operator> <name>pre_len</name> <operator>+</operator> <name>r_high</name> <operator>+</operator> <name>bnsize</name> <operator>-</operator> <name>r_rem</name> <operator>+</operator> <name>mid_len</name> <operator>+</operator>
<name>s_high</name> <operator>+</operator> <name>bnsize</name> <operator>-</operator> <name>s_rem</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>ldns_buffer_reserve</name><argument_list>(<argument><expr><name>target_buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>raw_sig_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_write_u8</name><argument_list>(<argument><expr><name>target_buffer</name></expr></argument>, <argument><expr><name><name>pre</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_write_u8</name><argument_list>(<argument><expr><name>target_buffer</name></expr></argument>, <argument><expr><name>raw_sig_len</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_write_u8</name><argument_list>(<argument><expr><name>target_buffer</name></expr></argument>, <argument><expr><name><name>pre</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_write_u8</name><argument_list>(<argument><expr><name>target_buffer</name></expr></argument>, <argument><expr><name>bnsize</name> <operator>+</operator> <name>r_high</name> <operator>-</operator> <name>r_rem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>r_high</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ldns_buffer_write_u8</name><argument_list>(<argument><expr><name>target_buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_buffer_write</name><argument_list>(<argument><expr><name>target_buffer</name></expr></argument>, <argument><expr><name>d</name><operator>+</operator><name>r_rem</name></expr></argument>, <argument><expr><name>bnsize</name><operator>-</operator><name>r_rem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_write</name><argument_list>(<argument><expr><name>target_buffer</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>, <argument><expr><name>mid_len</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_write_u8</name><argument_list>(<argument><expr><name>target_buffer</name></expr></argument>, <argument><expr><name>bnsize</name> <operator>+</operator> <name>s_high</name> <operator>-</operator> <name>s_rem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>s_high</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ldns_buffer_write_u8</name><argument_list>(<argument><expr><name>target_buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_buffer_write</name><argument_list>(<argument><expr><name>target_buffer</name></expr></argument>, <argument><expr><name>d</name><operator>+</operator><name>bnsize</name><operator>+</operator><name>s_rem</name></expr></argument>, <argument><expr><name>bnsize</name><operator>-</operator><name>s_rem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>ldns_buffer_status</name><argument_list>(<argument><expr><name>target_buffer</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ED25519</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_ED448</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_hex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>hex</name><index>[]</index></name> <init>= <expr><literal type="string">"0123456789abcdef"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s [len=%d]: "</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><operator>(</operator><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name><operator>&amp;</operator><literal type="number">0xf0</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><operator>(</operator><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name><operator>&amp;</operator><literal type="number">0x0f</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c%c"</literal></expr></argument>, <argument><expr><name><name>hex</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>hex</name><index>[<expr><name>y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ED25519</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>ldns_rdf</name> <modifier>*</modifier></type>
<name>ldns_convert_ed25519_rrsig_asn12rdf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_buffer</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>sig_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><call><name>ldns_buffer_begin</name><argument_list>(<argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rdf</name><modifier>*</modifier></type> <name>rdf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>print_hex</name><argument_list>(<argument><expr><literal type="string">"sig in ASN"</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>sig_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rdf</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_convert_ed25519_rrsig_rdf2asn1</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>target_buffer</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>sig_rdf</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<expr_stmt><expr><call><name>print_hex</name><argument_list>(<argument><expr><literal type="string">"sig raw"</literal></expr></argument>, <argument><expr><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>sig_rdf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>sig_rdf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ldns_buffer_status</name><argument_list>(<argument><expr><name>target_buffer</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ED448</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>ldns_rdf</name> <modifier>*</modifier></type>
<name>ldns_convert_ed448_rrsig_asn12rdf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_buffer</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>sig_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><call><name>ldns_buffer_begin</name><argument_list>(<argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rdf</name><modifier>*</modifier></type> <name>rdf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>print_hex</name><argument_list>(<argument><expr><literal type="string">"sig in ASN"</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>sig_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rdf</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_convert_ed448_rrsig_rdf2asn1</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>target_buffer</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>sig_rdf</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<expr_stmt><expr><call><name>print_hex</name><argument_list>(<argument><expr><literal type="string">"sig raw"</literal></expr></argument>, <argument><expr><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>sig_rdf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>sig_rdf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ldns_buffer_status</name><argument_list>(<argument><expr><name>target_buffer</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
