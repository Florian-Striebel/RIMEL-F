<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/ldns/duration.c">






































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ldns/config.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ldns/duration.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>






<function><type><name>ldns_duration_type</name><modifier>*</modifier></type>
<name>ldns_duration_create</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_duration_type</name><modifier>*</modifier></type> <name>duration</name></decl>;</decl_stmt>

<expr_stmt><expr><name>duration</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ldns_duration_type</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>duration</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>duration</name><operator>-&gt;</operator><name>years</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>duration</name><operator>-&gt;</operator><name>months</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>duration</name><operator>-&gt;</operator><name>weeks</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>duration</name><operator>-&gt;</operator><name>days</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>duration</name><operator>-&gt;</operator><name>hours</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>duration</name><operator>-&gt;</operator><name>minutes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>duration</name><operator>-&gt;</operator><name>seconds</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>duration</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type>
<name>ldns_duration_compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_duration_type</name><modifier>*</modifier></type> <name>d1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_duration_type</name><modifier>*</modifier></type> <name>d2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>d1</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>d2</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>d1</name> <operator>||</operator> <operator>!</operator><name>d2</name></expr>)</condition> <block>{<block_content>
<return>return <expr><ternary><condition><expr><name>d1</name></expr>?</condition><then><expr><operator>-</operator><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>d1</name><operator>-&gt;</operator><name>years</name></name> <operator>!=</operator> <name><name>d2</name><operator>-&gt;</operator><name>years</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>d1</name><operator>-&gt;</operator><name>years</name></name> <operator>-</operator> <name><name>d2</name><operator>-&gt;</operator><name>years</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>d1</name><operator>-&gt;</operator><name>months</name></name> <operator>!=</operator> <name><name>d2</name><operator>-&gt;</operator><name>months</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>d1</name><operator>-&gt;</operator><name>months</name></name> <operator>-</operator> <name><name>d2</name><operator>-&gt;</operator><name>months</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>d1</name><operator>-&gt;</operator><name>weeks</name></name> <operator>!=</operator> <name><name>d2</name><operator>-&gt;</operator><name>weeks</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>d1</name><operator>-&gt;</operator><name>weeks</name></name> <operator>-</operator> <name><name>d2</name><operator>-&gt;</operator><name>weeks</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>d1</name><operator>-&gt;</operator><name>days</name></name> <operator>!=</operator> <name><name>d2</name><operator>-&gt;</operator><name>days</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>d1</name><operator>-&gt;</operator><name>days</name></name> <operator>-</operator> <name><name>d2</name><operator>-&gt;</operator><name>days</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>d1</name><operator>-&gt;</operator><name>hours</name></name> <operator>!=</operator> <name><name>d2</name><operator>-&gt;</operator><name>hours</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>d1</name><operator>-&gt;</operator><name>hours</name></name> <operator>-</operator> <name><name>d2</name><operator>-&gt;</operator><name>hours</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>d1</name><operator>-&gt;</operator><name>minutes</name></name> <operator>!=</operator> <name><name>d2</name><operator>-&gt;</operator><name>minutes</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>d1</name><operator>-&gt;</operator><name>minutes</name></name> <operator>-</operator> <name><name>d2</name><operator>-&gt;</operator><name>minutes</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>d1</name><operator>-&gt;</operator><name>seconds</name></name> <operator>!=</operator> <name><name>d2</name><operator>-&gt;</operator><name>seconds</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>d1</name><operator>-&gt;</operator><name>seconds</name></name> <operator>-</operator> <name><name>d2</name><operator>-&gt;</operator><name>seconds</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>






<function><type><name>ldns_duration_type</name><modifier>*</modifier></type>
<name>ldns_duration_create_from_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_duration_type</name><modifier>*</modifier></type> <name>duration</name> <init>= <expr><call><name>ldns_duration_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>P</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>X</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>T</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>W</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>not_weeks</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>duration</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>duration</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>P</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="char">'P'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>P</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_duration_cleanup</name><argument_list>(<argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>T</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="char">'T'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>X</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="char">'Y'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>X</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>duration</name><operator>-&gt;</operator><name>years</name></name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>str</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <name>X</name></expr>;</expr_stmt>
<expr_stmt><expr><name>not_weeks</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>X</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="char">'M'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>X</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>T</name> <operator>||</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name>X</name><operator>-</operator><name>P</name><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name>T</name><operator>-</operator><name>P</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>duration</name><operator>-&gt;</operator><name>months</name></name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>str</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <name>X</name></expr>;</expr_stmt>
<expr_stmt><expr><name>not_weeks</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>X</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="char">'D'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>X</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>duration</name><operator>-&gt;</operator><name>days</name></name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>str</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <name>X</name></expr>;</expr_stmt>
<expr_stmt><expr><name>not_weeks</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>T</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <name>T</name></expr>;</expr_stmt>
<expr_stmt><expr><name>not_weeks</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>X</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="char">'H'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>X</name> <operator>&amp;&amp;</operator> <name>T</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>duration</name><operator>-&gt;</operator><name>hours</name></name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>str</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <name>X</name></expr>;</expr_stmt>
<expr_stmt><expr><name>not_weeks</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>X</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="char">'M'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>X</name> <operator>&amp;&amp;</operator> <name>T</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name>X</name><operator>-</operator><name>P</name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name>T</name><operator>-</operator><name>P</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>duration</name><operator>-&gt;</operator><name>minutes</name></name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>str</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <name>X</name></expr>;</expr_stmt>
<expr_stmt><expr><name>not_weeks</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>X</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>X</name> <operator>&amp;&amp;</operator> <name>T</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>duration</name><operator>-&gt;</operator><name>seconds</name></name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>str</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <name>X</name></expr>;</expr_stmt>
<expr_stmt><expr><name>not_weeks</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>W</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="char">'W'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>W</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>not_weeks</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_duration_cleanup</name><argument_list>(<argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>duration</name><operator>-&gt;</operator><name>weeks</name></name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>str</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <name>W</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>duration</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>digits_in_number</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>duration</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>period</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <name>duration</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>period</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>period</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>char</name><modifier>*</modifier></type>
<name>ldns_duration2string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_duration_type</name><modifier>*</modifier></type> <name>duration</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>str</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>num</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>T</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>duration</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>duration</name><operator>-&gt;</operator><name>years</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>count</name> <operator>=</operator> <name>count</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>digits_in_number</name><argument_list>(<argument><expr><name><name>duration</name><operator>-&gt;</operator><name>years</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>duration</name><operator>-&gt;</operator><name>months</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>count</name> <operator>=</operator> <name>count</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>digits_in_number</name><argument_list>(<argument><expr><name><name>duration</name><operator>-&gt;</operator><name>months</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>duration</name><operator>-&gt;</operator><name>weeks</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>count</name> <operator>=</operator> <name>count</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>digits_in_number</name><argument_list>(<argument><expr><name><name>duration</name><operator>-&gt;</operator><name>weeks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>duration</name><operator>-&gt;</operator><name>days</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>count</name> <operator>=</operator> <name>count</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>digits_in_number</name><argument_list>(<argument><expr><name><name>duration</name><operator>-&gt;</operator><name>days</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>duration</name><operator>-&gt;</operator><name>hours</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>count</name> <operator>=</operator> <name>count</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>digits_in_number</name><argument_list>(<argument><expr><name><name>duration</name><operator>-&gt;</operator><name>hours</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>T</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>duration</name><operator>-&gt;</operator><name>minutes</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>count</name> <operator>=</operator> <name>count</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>digits_in_number</name><argument_list>(<argument><expr><name><name>duration</name><operator>-&gt;</operator><name>minutes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>T</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>duration</name><operator>-&gt;</operator><name>seconds</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>count</name> <operator>=</operator> <name>count</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>digits_in_number</name><argument_list>(<argument><expr><name><name>duration</name><operator>-&gt;</operator><name>seconds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>T</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>T</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>duration</name><operator>-&gt;</operator><name>years</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>digits_in_number</name><argument_list>(<argument><expr><name><name>duration</name><operator>-&gt;</operator><name>years</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>num</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>count</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>count</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"%uY"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name><name>duration</name><operator>-&gt;</operator><name>years</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>strncat</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>count</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>duration</name><operator>-&gt;</operator><name>months</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>digits_in_number</name><argument_list>(<argument><expr><name><name>duration</name><operator>-&gt;</operator><name>months</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>num</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>count</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>count</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"%uM"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name><name>duration</name><operator>-&gt;</operator><name>months</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>strncat</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>count</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>duration</name><operator>-&gt;</operator><name>weeks</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>digits_in_number</name><argument_list>(<argument><expr><name><name>duration</name><operator>-&gt;</operator><name>weeks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>num</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>count</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>count</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"%uW"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name><name>duration</name><operator>-&gt;</operator><name>weeks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>strncat</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>count</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>duration</name><operator>-&gt;</operator><name>days</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>digits_in_number</name><argument_list>(<argument><expr><name><name>duration</name><operator>-&gt;</operator><name>days</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>num</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>count</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>count</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"%uD"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name><name>duration</name><operator>-&gt;</operator><name>days</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>strncat</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>count</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>T</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>strncat</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"T"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>duration</name><operator>-&gt;</operator><name>hours</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>digits_in_number</name><argument_list>(<argument><expr><name><name>duration</name><operator>-&gt;</operator><name>hours</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>num</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>count</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>count</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"%uH"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name><name>duration</name><operator>-&gt;</operator><name>hours</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>strncat</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>count</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>duration</name><operator>-&gt;</operator><name>minutes</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>digits_in_number</name><argument_list>(<argument><expr><name><name>duration</name><operator>-&gt;</operator><name>minutes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>num</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>count</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>count</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"%uM"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name><name>duration</name><operator>-&gt;</operator><name>minutes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>strncat</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>count</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>duration</name><operator>-&gt;</operator><name>seconds</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>digits_in_number</name><argument_list>(<argument><expr><name><name>duration</name><operator>-&gt;</operator><name>seconds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>num</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>count</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>count</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"%uS"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name><name>duration</name><operator>-&gt;</operator><name>seconds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>strncat</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>count</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>time_t</name></type>
<name>ldns_duration2time</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_duration_type</name><modifier>*</modifier></type> <name>duration</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>time_t</name></type> <name>period</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>duration</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>period</name> <operator>+=</operator> <operator>(</operator><name><name>duration</name><operator>-&gt;</operator><name>seconds</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>period</name> <operator>+=</operator> <operator>(</operator><name><name>duration</name><operator>-&gt;</operator><name>minutes</name></name><operator>)</operator><operator>*</operator><literal type="number">60</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>period</name> <operator>+=</operator> <operator>(</operator><name><name>duration</name><operator>-&gt;</operator><name>hours</name></name><operator>)</operator><operator>*</operator><literal type="number">3600</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>period</name> <operator>+=</operator> <operator>(</operator><name><name>duration</name><operator>-&gt;</operator><name>days</name></name><operator>)</operator><operator>*</operator><literal type="number">86400</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>period</name> <operator>+=</operator> <operator>(</operator><name><name>duration</name><operator>-&gt;</operator><name>weeks</name></name><operator>)</operator><operator>*</operator><literal type="number">86400</literal><operator>*</operator><literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>period</name> <operator>+=</operator> <operator>(</operator><name><name>duration</name><operator>-&gt;</operator><name>months</name></name><operator>)</operator><operator>*</operator><literal type="number">86400</literal><operator>*</operator><literal type="number">31</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>period</name> <operator>+=</operator> <operator>(</operator><name><name>duration</name><operator>-&gt;</operator><name>years</name></name><operator>)</operator><operator>*</operator><literal type="number">86400</literal><operator>*</operator><literal type="number">365</literal></expr>;</expr_stmt>






</block_content>}</block></if></if_stmt>
<return>return <expr><name>period</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>void</name></type>
<name>ldns_duration_cleanup</name><parameter_list>(<parameter><decl><type><name>ldns_duration_type</name><modifier>*</modifier></type> <name>duration</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>duration</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></function>
</unit>
