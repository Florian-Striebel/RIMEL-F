<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/ldns/dnssec_zone.c">



<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ldns/config.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ldns/ldns.h&gt;</cpp:file></cpp:include>

<function><type><name>ldns_dnssec_rrs</name> <modifier>*</modifier></type>
<name>ldns_dnssec_rrs_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_dnssec_rrs</name> <modifier>*</modifier></type><name>new_rrs</name></decl>;</decl_stmt>
<expr_stmt><expr><name>new_rrs</name> <operator>=</operator> <call><name>LDNS_MALLOC</name><argument_list>(<argument><expr><name>ldns_dnssec_rrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>new_rrs</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>new_rrs</name><operator>-&gt;</operator><name>rr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_rrs</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>new_rrs</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>INLINE</name> <name>void</name></type>
<name>ldns_dnssec_rrs_free_internal</name><parameter_list>(<parameter><decl><type><name>ldns_dnssec_rrs</name> <modifier>*</modifier></type><name>rrs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>deep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_dnssec_rrs</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<while>while <condition>(<expr><name>rrs</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>rrs</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>deep</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_rr_free</name><argument_list>(<argument><expr><name><name>rrs</name><operator>-&gt;</operator><name>rr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>rrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rrs</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ldns_dnssec_rrs_free</name><parameter_list>(<parameter><decl><type><name>ldns_dnssec_rrs</name> <modifier>*</modifier></type><name>rrs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ldns_dnssec_rrs_free_internal</name><argument_list>(<argument><expr><name>rrs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ldns_dnssec_rrs_deep_free</name><parameter_list>(<parameter><decl><type><name>ldns_dnssec_rrs</name> <modifier>*</modifier></type><name>rrs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ldns_dnssec_rrs_free_internal</name><argument_list>(<argument><expr><name>rrs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_dnssec_rrs_add_rr</name><parameter_list>(<parameter><decl><type><name>ldns_dnssec_rrs</name> <modifier>*</modifier></type><name>rrs</name></decl></parameter>, <parameter><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>rr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_dnssec_rrs</name> <modifier>*</modifier></type><name>new_rrs</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rrs</name> <operator>||</operator> <operator>!</operator><name>rr</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>cmp</name> <operator>=</operator> <call><name>ldns_rr_compare</name><argument_list>(<argument><expr><name><name>rrs</name><operator>-&gt;</operator><name>rr</name></name></expr></argument>, <argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>rrs</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>ldns_dnssec_rrs_add_rr</name><argument_list>(<argument><expr><name><name>rrs</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>new_rrs</name> <operator>=</operator> <call><name>ldns_dnssec_rrs_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_rrs</name><operator>-&gt;</operator><name>rr</name></name> <operator>=</operator> <name>rr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rrs</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>new_rrs</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cmp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>new_rrs</name> <operator>=</operator> <call><name>ldns_dnssec_rrs_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_rrs</name><operator>-&gt;</operator><name>rr</name></name> <operator>=</operator> <name><name>rrs</name><operator>-&gt;</operator><name>rr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_rrs</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>rrs</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rrs</name><operator>-&gt;</operator><name>rr</name></name> <operator>=</operator> <name>rr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rrs</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>new_rrs</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>LDNS_STATUS_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ldns_dnssec_rrs_print_fmt</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_output_format</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_dnssec_rrs</name> <modifier>*</modifier></type><name>rrs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rrs</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fmt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>LDNS_COMMENT_LAYOUT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"; &lt;void&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>rrs</name><operator>-&gt;</operator><name>rr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_rr_print_fmt</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name><name>rrs</name><operator>-&gt;</operator><name>rr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rrs</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_dnssec_rrs_print_fmt</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name><name>rrs</name><operator>-&gt;</operator><name>next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ldns_dnssec_rrs_print</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_dnssec_rrs</name> <modifier>*</modifier></type><name>rrs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ldns_dnssec_rrs_print_fmt</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>ldns_output_format_default</name></expr></argument>, <argument><expr><name>rrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>ldns_dnssec_rrsets</name> <modifier>*</modifier></type>
<name>ldns_dnssec_rrsets_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_dnssec_rrsets</name> <modifier>*</modifier></type><name>new_rrsets</name></decl>;</decl_stmt>
<expr_stmt><expr><name>new_rrsets</name> <operator>=</operator> <call><name>LDNS_MALLOC</name><argument_list>(<argument><expr><name>ldns_dnssec_rrsets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>new_rrsets</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>new_rrsets</name><operator>-&gt;</operator><name>rrs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_rrsets</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_rrsets</name><operator>-&gt;</operator><name>signatures</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_rrsets</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>new_rrsets</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>INLINE</name> <name>void</name></type>
<name>ldns_dnssec_rrsets_free_internal</name><parameter_list>(<parameter><decl><type><name>ldns_dnssec_rrsets</name> <modifier>*</modifier></type><name>rrsets</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>deep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>rrsets</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>rrsets</name><operator>-&gt;</operator><name>rrs</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_dnssec_rrs_free_internal</name><argument_list>(<argument><expr><name><name>rrsets</name><operator>-&gt;</operator><name>rrs</name></name></expr></argument>, <argument><expr><name>deep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rrsets</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_dnssec_rrsets_free_internal</name><argument_list>(<argument><expr><name><name>rrsets</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name>deep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rrsets</name><operator>-&gt;</operator><name>signatures</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_dnssec_rrs_free_internal</name><argument_list>(<argument><expr><name><name>rrsets</name><operator>-&gt;</operator><name>signatures</name></name></expr></argument>, <argument><expr><name>deep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>rrsets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ldns_dnssec_rrsets_free</name><parameter_list>(<parameter><decl><type><name>ldns_dnssec_rrsets</name> <modifier>*</modifier></type><name>rrsets</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ldns_dnssec_rrsets_free_internal</name><argument_list>(<argument><expr><name>rrsets</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ldns_dnssec_rrsets_deep_free</name><parameter_list>(<parameter><decl><type><name>ldns_dnssec_rrsets</name> <modifier>*</modifier></type><name>rrsets</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ldns_dnssec_rrsets_free_internal</name><argument_list>(<argument><expr><name>rrsets</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>ldns_rr_type</name></type>
<name>ldns_dnssec_rrsets_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_dnssec_rrsets</name> <modifier>*</modifier></type><name>rrsets</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>rrsets</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>rrsets</name><operator>-&gt;</operator><name>type</name></name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_dnssec_rrsets_set_type</name><parameter_list>(<parameter><decl><type><name>ldns_dnssec_rrsets</name> <modifier>*</modifier></type><name>rrsets</name></decl></parameter>,
<parameter><decl><type><name>ldns_rr_type</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>rrsets</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rrsets</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>LDNS_STATUS_ERR</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ldns_dnssec_rrsets</name> <modifier>*</modifier></type>
<name>ldns_dnssec_rrsets_new_frm_rr</name><parameter_list>(<parameter><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>rr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_dnssec_rrsets</name> <modifier>*</modifier></type><name>new_rrsets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr_type</name></type> <name>rr_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>rrsig</name></decl>;</decl_stmt>

<expr_stmt><expr><name>new_rrsets</name> <operator>=</operator> <call><name>ldns_dnssec_rrsets_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rr_type</name> <operator>=</operator> <call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rr_type</name> <operator>==</operator> <name>LDNS_RR_TYPE_RRSIG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rrsig</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rr_type</name> <operator>=</operator> <call><name>ldns_rdf2rr_type</name><argument_list>(<argument><expr><call><name>ldns_rr_rrsig_typecovered</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>rrsig</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rrsig</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>new_rrsets</name><operator>-&gt;</operator><name>rrs</name></name> <operator>=</operator> <call><name>ldns_dnssec_rrs_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_rrsets</name><operator>-&gt;</operator><name>rrs</name><operator>-&gt;</operator><name>rr</name></name> <operator>=</operator> <name>rr</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>new_rrsets</name><operator>-&gt;</operator><name>signatures</name></name> <operator>=</operator> <call><name>ldns_dnssec_rrs_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_rrsets</name><operator>-&gt;</operator><name>signatures</name><operator>-&gt;</operator><name>rr</name></name> <operator>=</operator> <name>rr</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>new_rrsets</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>rr_type</name></expr>;</expr_stmt>
<return>return <expr><name>new_rrsets</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_dnssec_rrsets_add_rr</name><parameter_list>(<parameter><decl><type><name>ldns_dnssec_rrsets</name> <modifier>*</modifier></type><name>rrsets</name></decl></parameter>, <parameter><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>rr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_dnssec_rrsets</name> <modifier>*</modifier></type><name>new_rrsets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr_type</name></type> <name>rr_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>rrsig</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>result</name> <init>= <expr><name>LDNS_STATUS_OK</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rrsets</name> <operator>||</operator> <operator>!</operator><name>rr</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rr_type</name> <operator>=</operator> <call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rr_type</name> <operator>==</operator> <name>LDNS_RR_TYPE_RRSIG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rrsig</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rr_type</name> <operator>=</operator> <call><name>ldns_rdf2rr_type</name><argument_list>(<argument><expr><call><name>ldns_rr_rrsig_typecovered</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rrsets</name><operator>-&gt;</operator><name>rrs</name></name> <operator>&amp;&amp;</operator> <name><name>rrsets</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>rrsets</name><operator>-&gt;</operator><name>signatures</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rrsig</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rrsets</name><operator>-&gt;</operator><name>rrs</name></name> <operator>=</operator> <call><name>ldns_dnssec_rrs_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rrsets</name><operator>-&gt;</operator><name>rrs</name><operator>-&gt;</operator><name>rr</name></name> <operator>=</operator> <name>rr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rrsets</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>rr_type</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>rrsets</name><operator>-&gt;</operator><name>signatures</name></name> <operator>=</operator> <call><name>ldns_dnssec_rrs_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rrsets</name><operator>-&gt;</operator><name>signatures</name><operator>-&gt;</operator><name>rr</name></name> <operator>=</operator> <name>rr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rrsets</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>rr_type</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>LDNS_STATUS_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rr_type</name> <operator>&gt;</operator> <call><name>ldns_dnssec_rrsets_type</name><argument_list>(<argument><expr><name>rrsets</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>rrsets</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ldns_dnssec_rrsets_add_rr</name><argument_list>(<argument><expr><name><name>rrsets</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>new_rrsets</name> <operator>=</operator> <call><name>ldns_dnssec_rrsets_new_frm_rr</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rrsets</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>new_rrsets</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rr_type</name> <operator>&lt;</operator> <call><name>ldns_dnssec_rrsets_type</name><argument_list>(<argument><expr><name>rrsets</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>new_rrsets</name> <operator>=</operator> <call><name>ldns_dnssec_rrsets_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_rrsets</name><operator>-&gt;</operator><name>rrs</name></name> <operator>=</operator> <name><name>rrsets</name><operator>-&gt;</operator><name>rrs</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_rrsets</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>rrsets</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_rrsets</name><operator>-&gt;</operator><name>signatures</name></name> <operator>=</operator> <name><name>rrsets</name><operator>-&gt;</operator><name>signatures</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_rrsets</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>rrsets</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rrsig</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rrsets</name><operator>-&gt;</operator><name>rrs</name></name> <operator>=</operator> <call><name>ldns_dnssec_rrs_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rrsets</name><operator>-&gt;</operator><name>rrs</name><operator>-&gt;</operator><name>rr</name></name> <operator>=</operator> <name>rr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rrsets</name><operator>-&gt;</operator><name>signatures</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>rrsets</name><operator>-&gt;</operator><name>rrs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rrsets</name><operator>-&gt;</operator><name>signatures</name></name> <operator>=</operator> <call><name>ldns_dnssec_rrs_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rrsets</name><operator>-&gt;</operator><name>signatures</name><operator>-&gt;</operator><name>rr</name></name> <operator>=</operator> <name>rr</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>rrsets</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>rr_type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rrsets</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>new_rrsets</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>rrsig</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>rrsets</name><operator>-&gt;</operator><name>signatures</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ldns_dnssec_rrs_add_rr</name><argument_list>(<argument><expr><name><name>rrsets</name><operator>-&gt;</operator><name>signatures</name></name></expr></argument>, <argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>rrsets</name><operator>-&gt;</operator><name>signatures</name></name> <operator>=</operator> <call><name>ldns_dnssec_rrs_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rrsets</name><operator>-&gt;</operator><name>signatures</name><operator>-&gt;</operator><name>rr</name></name> <operator>=</operator> <name>rr</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>rrsets</name><operator>-&gt;</operator><name>rrs</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ldns_dnssec_rrs_add_rr</name><argument_list>(<argument><expr><name><name>rrsets</name><operator>-&gt;</operator><name>rrs</name></name></expr></argument>, <argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>rrsets</name><operator>-&gt;</operator><name>rrs</name></name> <operator>=</operator> <call><name>ldns_dnssec_rrs_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rrsets</name><operator>-&gt;</operator><name>rrs</name><operator>-&gt;</operator><name>rr</name></name> <operator>=</operator> <name>rr</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ldns_dnssec_rrsets_print_soa_fmt</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_output_format</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_dnssec_rrsets</name> <modifier>*</modifier></type><name>rrsets</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>follow</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>show_soa</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rrsets</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fmt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>LDNS_COMMENT_LAYOUT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"; &lt;void&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>rrsets</name><operator>-&gt;</operator><name>rrs</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>show_soa</name> <operator>||</operator>
<call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name><name>rrsets</name><operator>-&gt;</operator><name>rrs</name><operator>-&gt;</operator><name>rr</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LDNS_RR_TYPE_SOA</name>
<operator>)</operator></expr>
)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_dnssec_rrs_print_fmt</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name><name>rrsets</name><operator>-&gt;</operator><name>rrs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>rrsets</name><operator>-&gt;</operator><name>signatures</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_dnssec_rrs_print_fmt</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>,
<argument><expr><name><name>rrsets</name><operator>-&gt;</operator><name>signatures</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>follow</name> <operator>&amp;&amp;</operator> <name><name>rrsets</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_dnssec_rrsets_print_soa_fmt</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>,
<argument><expr><name><name>rrsets</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name>follow</name></expr></argument>, <argument><expr><name>show_soa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>ldns_dnssec_rrsets_print_fmt</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_output_format</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_dnssec_rrsets</name> <modifier>*</modifier></type><name>rrsets</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>follow</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ldns_dnssec_rrsets_print_soa_fmt</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>rrsets</name></expr></argument>, <argument><expr><name>follow</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ldns_dnssec_rrsets_print</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_dnssec_rrsets</name> <modifier>*</modifier></type><name>rrsets</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>follow</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ldns_dnssec_rrsets_print_fmt</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>ldns_output_format_default</name></expr></argument>,
<argument><expr><name>rrsets</name></expr></argument>, <argument><expr><name>follow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>ldns_dnssec_name</name> <modifier>*</modifier></type>
<name>ldns_dnssec_name_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_dnssec_name</name> <modifier>*</modifier></type><name>new_name</name></decl>;</decl_stmt>

<expr_stmt><expr><name>new_name</name> <operator>=</operator> <call><name>LDNS_CALLOC</name><argument_list>(<argument><expr><name>ldns_dnssec_name</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_name</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>













<return>return <expr><name>new_name</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_dnssec_name</name> <modifier>*</modifier></type>
<name>ldns_dnssec_name_new_frm_rr</name><parameter_list>(<parameter><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>rr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_dnssec_name</name> <modifier>*</modifier></type><name>new_name</name> <init>= <expr><call><name>ldns_dnssec_name_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>new_name</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>ldns_rr_owner</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>ldns_dnssec_name_add_rr</name><argument_list>(<argument><expr><name>new_name</name></expr></argument>, <argument><expr><name>rr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_dnssec_name_free</name><argument_list>(<argument><expr><name>new_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>new_name</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>INLINE</name> <name>void</name></type>
<name>ldns_dnssec_name_free_internal</name><parameter_list>(<parameter><decl><type><name>ldns_dnssec_name</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>deep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>name</name><operator>-&gt;</operator><name>name_alloced</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name><name>name</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>name</name><operator>-&gt;</operator><name>rrsets</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_dnssec_rrsets_free_internal</name><argument_list>(<argument><expr><name><name>name</name><operator>-&gt;</operator><name>rrsets</name></name></expr></argument>, <argument><expr><name>deep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>name</name><operator>-&gt;</operator><name>nsec</name></name> <operator>&amp;&amp;</operator> <name>deep</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_rr_free</name><argument_list>(<argument><expr><name><name>name</name><operator>-&gt;</operator><name>nsec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>name</name><operator>-&gt;</operator><name>nsec_signatures</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_dnssec_rrs_free_internal</name><argument_list>(<argument><expr><name><name>name</name><operator>-&gt;</operator><name>nsec_signatures</name></name></expr></argument>, <argument><expr><name>deep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>name</name><operator>-&gt;</operator><name>hashed_name</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>deep</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name><name>name</name><operator>-&gt;</operator><name>hashed_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ldns_dnssec_name_free</name><parameter_list>(<parameter><decl><type><name>ldns_dnssec_name</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ldns_dnssec_name_free_internal</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ldns_dnssec_name_deep_free</name><parameter_list>(<parameter><decl><type><name>ldns_dnssec_name</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ldns_dnssec_name_free_internal</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>ldns_rdf</name> <modifier>*</modifier></type>
<name>ldns_dnssec_name_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_dnssec_name</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>name</name><operator>-&gt;</operator><name>name</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ldns_dnssec_name_is_glue</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_dnssec_name</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>name</name><operator>-&gt;</operator><name>is_glue</name></name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ldns_dnssec_name_set_name</name><parameter_list>(<parameter><decl><type><name>ldns_dnssec_name</name> <modifier>*</modifier></type><name>rrset</name></decl></parameter>,
<parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>dname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>rrset</name> <operator>&amp;&amp;</operator> <name>dname</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rrset</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>dname</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>ldns_dnssec_name_set_nsec</name><parameter_list>(<parameter><decl><type><name>ldns_dnssec_name</name> <modifier>*</modifier></type><name>rrset</name></decl></parameter>, <parameter><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>nsec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>rrset</name> <operator>&amp;&amp;</operator> <name>nsec</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>rrset</name><operator>-&gt;</operator><name>nsec</name></name> <operator>=</operator> <name>nsec</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>ldns_dnssec_name_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_dnssec_name</name> <modifier>*</modifier></type><name>na</name> <init>= <expr><operator>(</operator><name>ldns_dnssec_name</name> <operator>*</operator><operator>)</operator> <name>a</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_dnssec_name</name> <modifier>*</modifier></type><name>nb</name> <init>= <expr><operator>(</operator><name>ldns_dnssec_name</name> <operator>*</operator><operator>)</operator> <name>b</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>na</name> <operator>&amp;&amp;</operator> <name>nb</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>ldns_dname_compare</name><argument_list>(<argument><expr><call><name>ldns_dnssec_name_name</name><argument_list>(<argument><expr><name>na</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ldns_dnssec_name_name</name><argument_list>(<argument><expr><name>nb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>na</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>nb</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_dnssec_name_add_rr</name><parameter_list>(<parameter><decl><type><name>ldns_dnssec_name</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>rr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>result</name> <init>= <expr><name>LDNS_STATUS_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr_type</name></type> <name>rr_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr_type</name></type> <name>typecovered</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name> <operator>||</operator> <operator>!</operator><name>rr</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rr_type</name> <operator>=</operator> <call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rr_type</name> <operator>==</operator> <name>LDNS_RR_TYPE_RRSIG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>typecovered</name> <operator>=</operator> <call><name>ldns_rdf2rr_type</name><argument_list>(<argument><expr><call><name>ldns_rr_rrsig_typecovered</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rr_type</name> <operator>==</operator> <name>LDNS_RR_TYPE_NSEC</name> <operator>||</operator>
<name>rr_type</name> <operator>==</operator> <name>LDNS_RR_TYPE_NSEC3</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>name</name><operator>-&gt;</operator><name>nsec</name></name> <operator>=</operator> <name>rr</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>typecovered</name> <operator>==</operator> <name>LDNS_RR_TYPE_NSEC</name> <operator>||</operator>
<name>typecovered</name> <operator>==</operator> <name>LDNS_RR_TYPE_NSEC3</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>name</name><operator>-&gt;</operator><name>nsec_signatures</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ldns_dnssec_rrs_add_rr</name><argument_list>(<argument><expr><name><name>name</name><operator>-&gt;</operator><name>nsec_signatures</name></name></expr></argument>, <argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>name</name><operator>-&gt;</operator><name>nsec_signatures</name></name> <operator>=</operator> <call><name>ldns_dnssec_rrs_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>name</name><operator>-&gt;</operator><name>nsec_signatures</name><operator>-&gt;</operator><name>rr</name></name> <operator>=</operator> <name>rr</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>name</name><operator>-&gt;</operator><name>rrsets</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ldns_dnssec_rrsets_add_rr</name><argument_list>(<argument><expr><name><name>name</name><operator>-&gt;</operator><name>rrsets</name></name></expr></argument>, <argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>name</name><operator>-&gt;</operator><name>rrsets</name></name> <operator>=</operator> <call><name>ldns_dnssec_rrsets_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ldns_dnssec_rrsets_add_rr</name><argument_list>(<argument><expr><name><name>name</name><operator>-&gt;</operator><name>rrsets</name></name></expr></argument>, <argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_dnssec_rrsets</name> <modifier>*</modifier></type>
<name>ldns_dnssec_name_find_rrset</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_dnssec_name</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>ldns_rr_type</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ldns_dnssec_rrsets</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>name</name><operator>-&gt;</operator><name>rrsets</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>type</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>result</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_dnssec_rrsets</name> <modifier>*</modifier></type>
<name>ldns_dnssec_zone_find_rrset</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_dnssec_zone</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>dname</name></decl></parameter>,
<parameter><decl><type><name>ldns_rr_type</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_rbnode_t</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>zone</name> <operator>||</operator> <operator>!</operator><name>dname</name> <operator>||</operator> <operator>!</operator><name><name>zone</name><operator>-&gt;</operator><name>names</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>ldns_rbtree_search</name><argument_list>(<argument><expr><name><name>zone</name><operator>-&gt;</operator><name>names</name></name></expr></argument>, <argument><expr><name>dname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>node</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>ldns_dnssec_name_find_rrset</name><argument_list>(<argument><expr><operator>(</operator><name>ldns_dnssec_name</name> <operator>*</operator><operator>)</operator><name><name>node</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,
<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ldns_dnssec_name_print_soa_fmt</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_output_format</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_dnssec_name</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>show_soa</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>name</name><operator>-&gt;</operator><name>rrsets</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_dnssec_rrsets_print_soa_fmt</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>,
<argument><expr><name><name>name</name><operator>-&gt;</operator><name>rrsets</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>show_soa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>fmt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>LDNS_COMMENT_LAYOUT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">";; Empty nonterminal: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rdf_print</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>name</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name><name>name</name><operator>-&gt;</operator><name>nsec</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_rr_print_fmt</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name><name>name</name><operator>-&gt;</operator><name>nsec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>name</name><operator>-&gt;</operator><name>nsec_signatures</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_dnssec_rrs_print_fmt</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>,
<argument><expr><name><name>name</name><operator>-&gt;</operator><name>nsec_signatures</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>fmt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>LDNS_COMMENT_LAYOUT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"; &lt;void&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>ldns_dnssec_name_print_fmt</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_output_format</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_dnssec_name</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ldns_dnssec_name_print_soa_fmt</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ldns_dnssec_name_print</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_dnssec_name</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ldns_dnssec_name_print_fmt</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>ldns_output_format_default</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>ldns_dnssec_zone</name> <modifier>*</modifier></type>
<name>ldns_dnssec_zone_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_dnssec_zone</name> <modifier>*</modifier></type><name>zone</name> <init>= <expr><call><name>LDNS_MALLOC</name><argument_list>(<argument><expr><name>ldns_dnssec_zone</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>zone</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>zone</name><operator>-&gt;</operator><name>soa</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zone</name><operator>-&gt;</operator><name>names</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zone</name><operator>-&gt;</operator><name>hashed_names</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zone</name><operator>-&gt;</operator><name>_nsec3params</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>zone</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>rr_is_rrsig_covering</name><parameter_list>(<parameter><decl><type><name>ldns_rr</name><modifier>*</modifier></type> <name>rr</name></decl></parameter>, <parameter><decl><type><name>ldns_rr_type</name></type> <name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LDNS_RR_TYPE_RRSIG</name>
<operator>&amp;&amp;</operator> <call><name>ldns_rdf2rr_type</name><argument_list>(<argument><expr><call><name>ldns_rr_rrsig_typecovered</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>t</name></expr>;</return>
</block_content>}</block></function>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FASTER_DNSSEC_ZONE_NEW_FRM_FP</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>ldns_status</name></type>
<name>ldns_dnssec_zone_add_empty_nonterminals_nsec3</name><parameter_list>(
<parameter><decl><type><name>ldns_dnssec_zone</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>, <parameter><decl><type><name>ldns_rbtree_t</name> <modifier>*</modifier></type><name>nsec3s</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ldns_todo_nsec3_ents_node_free</name><parameter_list>(<parameter><decl><type><name>ldns_rbnode_t</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>arg</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><operator>(</operator><name>ldns_rdf</name> <operator>*</operator><operator>)</operator><name><name>node</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_dnssec_zone_new_frm_fp_l</name><parameter_list>(<parameter><decl><type><name>ldns_dnssec_zone</name><modifier>*</modifier><modifier>*</modifier></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>FILE</name><modifier>*</modifier></type> <name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name><modifier>*</modifier></type> <name>origin</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>ttl</name></decl></parameter>, <parameter><function_decl><type><name>ldns_rr_class</name></type> <name>ATTR_UNUSED</name><parameter_list>(<parameter><decl><type><name>c</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>line_nr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_rr</name><modifier>*</modifier></type> <name>cur_rr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>my_origin</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>my_prev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ldns_dnssec_zone</name> <modifier>*</modifier></type><name>newzone</name> <init>= <expr><call><name>ldns_dnssec_zone_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>



<decl_stmt><decl><type><name>ldns_rr_list</name><modifier>*</modifier></type> <name>todo_nsec3s</name> <init>= <expr><call><name>ldns_rr_list_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>








<decl_stmt><decl><type><name>ldns_rbtree_t</name></type> <name>todo_nsec3_ents</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rbnode_t</name> <modifier>*</modifier></type><name>new_node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr_list</name><modifier>*</modifier></type> <name>todo_nsec3_rrsigs</name> <init>= <expr><call><name>ldns_rr_list_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ldns_status</name></type> <name>status</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FASTER_DNSSEC_ZONE_NEW_FRM_FP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>ldns_zone</name><modifier>*</modifier></type> <name>zone</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>my_ttl</name> <init>= <expr><name>ttl</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>ldns_rbtree_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>todo_nsec3_ents</name></expr></argument>, <argument><expr><name>ldns_dname_compare_v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FASTER_DNSSEC_ZONE_NEW_FRM_FP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_zone_new_frm_fp_l</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zone</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>origin</name></expr></argument>,<argument><expr><name>ttl</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>line_nr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>LDNS_STATUS_OK</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>newzone</name> <operator>||</operator> <operator>!</operator><name>todo_nsec3s</name> <operator>||</operator> <operator>!</operator><name>todo_nsec3_rrsigs</name></expr> )</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>LDNS_STATUS_MEM_ERR</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>origin</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>my_origin</name> <operator>=</operator> <call><name>ldns_rdf_clone</name><argument_list>(<argument><expr><name>origin</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>LDNS_STATUS_MEM_ERR</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>my_prev</name> <operator>=</operator> <call><name>ldns_rdf_clone</name><argument_list>(<argument><expr><name>origin</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>LDNS_STATUS_MEM_ERR</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FASTER_DNSSEC_ZONE_NEW_FRM_FP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>ldns_zone_soa</name><argument_list>(<argument><expr><name>zone</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_dnssec_zone_add_rr</name><argument_list>(<argument><expr><name>newzone</name></expr></argument>, <argument><expr><call><name>ldns_zone_soa</name><argument_list>(<argument><expr><name>zone</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>LDNS_STATUS_OK</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><call><name>ldns_zone_rrs</name><argument_list>(<argument><expr><name>zone</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>cur_rr</name> <operator>=</operator> <call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><call><name>ldns_zone_rrs</name><argument_list>(<argument><expr><name>zone</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>LDNS_STATUS_OK</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<while>while <condition>(<expr><operator>!</operator><call><name>feof</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_rr_new_frm_fp_l</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur_rr</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>my_ttl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>my_origin</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>my_prev</name></expr></argument>, <argument><expr><name>line_nr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<switch>switch <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LDNS_STATUS_OK</name></expr>:</case>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_dnssec_zone_add_rr</name><argument_list>(<argument><expr><name>newzone</name></expr></argument>, <argument><expr><name>cur_rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator>
<name>LDNS_STATUS_DNSSEC_NSEC3_ORIGINAL_NOT_FOUND</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>rr_is_rrsig_covering</name><argument_list>(<argument><expr><name>cur_rr</name></expr></argument>,
<argument><expr><name>LDNS_RR_TYPE_NSEC3</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>ldns_rr_list_push_rr</name><argument_list>(<argument><expr><name>todo_nsec3_rrsigs</name></expr></argument>,
<argument><expr><name>cur_rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ldns_rr_list_push_rr</name><argument_list>(<argument><expr><name>todo_nsec3s</name></expr></argument>,
<argument><expr><name>cur_rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>LDNS_STATUS_OK</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>status</name> <operator>!=</operator> <name>LDNS_STATUS_OK</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<break>break;</break>


<case>case <expr><name>LDNS_STATUS_SYNTAX_EMPTY</name></expr>:</case>
<case>case <expr><name>LDNS_STATUS_SYNTAX_TTL</name></expr>:</case>
<case>case <expr><name>LDNS_STATUS_SYNTAX_ORIGIN</name></expr>:</case>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>LDNS_STATUS_OK</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LDNS_STATUS_SYNTAX_INCLUDE</name></expr>:</case>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>LDNS_STATUS_SYNTAX_INCLUDE_ERR_NOTIMPL</name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></switch>
</block_content>}</block></while>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>status</name> <operator>==</operator> <name>LDNS_STATUS_OK</name> <operator>&amp;&amp;</operator>
<name>i</name> <operator>&lt;</operator> <call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>todo_nsec3s</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>cur_rr</name> <operator>=</operator> <call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>todo_nsec3s</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_dnssec_zone_add_rr</name><argument_list>(<argument><expr><name>newzone</name></expr></argument>, <argument><expr><name>cur_rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>LDNS_STATUS_DNSSEC_NSEC3_ORIGINAL_NOT_FOUND</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>new_node</name> <operator>=</operator> <call><name>LDNS_MALLOC</name><argument_list>(<argument><expr><name>ldns_rbnode_t</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>LDNS_STATUS_MEM_ERR</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>new_node</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <call><name>ldns_dname_label</name><argument_list>(<argument><expr><call><name>ldns_rr_owner</name><argument_list>(<argument><expr><name>cur_rr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_node</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>cur_rr</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ldns_rbtree_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>todo_nsec3_ents</name></expr></argument>, <argument><expr><name>new_node</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>new_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>LDNS_STATUS_MEM_ERR</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>LDNS_STATUS_OK</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>todo_nsec3_ents</name><operator>.</operator><name>count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ldns_dnssec_zone_add_empty_nonterminals_nsec3</name><argument_list>(
<argument><expr><name>newzone</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>todo_nsec3_ents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>status</name> <operator>==</operator> <name>LDNS_STATUS_OK</name> <operator>&amp;&amp;</operator>
<name>i</name> <operator>&lt;</operator> <call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>todo_nsec3_rrsigs</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>cur_rr</name> <operator>=</operator> <call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>todo_nsec3_rrsigs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_dnssec_zone_add_rr</name><argument_list>(<argument><expr><name>newzone</name></expr></argument>, <argument><expr><name>cur_rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>z</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>z</name> <operator>=</operator> <name>newzone</name></expr>;</expr_stmt>
<expr_stmt><expr><name>newzone</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ldns_dnssec_zone_free</name><argument_list>(<argument><expr><name>newzone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<label><name>error</name>:</label>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FASTER_DNSSEC_ZONE_NEW_FRM_FP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>zone</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_zone_free</name><argument_list>(<argument><expr><name>zone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>ldns_rr_list_free</name><argument_list>(<argument><expr><name>todo_nsec3_rrsigs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_traverse_postorder</name><argument_list>(<argument><expr><operator>&amp;</operator><name>todo_nsec3_ents</name></expr></argument>,
<argument><expr><name>ldns_todo_nsec3_ents_node_free</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rr_list_free</name><argument_list>(<argument><expr><name>todo_nsec3s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>my_origin</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>my_origin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>my_prev</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>my_prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>newzone</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_dnssec_zone_free</name><argument_list>(<argument><expr><name>newzone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></for>

<function><type><name>ldns_status</name></type>
<name>ldns_dnssec_zone_new_frm_fp</name><parameter_list>(<parameter><decl><type><name>ldns_dnssec_zone</name><modifier>*</modifier><modifier>*</modifier></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>FILE</name><modifier>*</modifier></type> <name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name><modifier>*</modifier></type> <name>origin</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>ttl</name></decl></parameter>, <parameter><function_decl><type><name>ldns_rr_class</name></type> <name>ATTR_UNUSED</name><parameter_list>(<parameter><decl><type><name>c</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_dnssec_zone_new_frm_fp_l</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name>origin</name></expr></argument>, <argument><expr><name>ttl</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ldns_dnssec_name_node_free</name><parameter_list>(<parameter><decl><type><name>ldns_rbnode_t</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>arg</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_dnssec_name_free</name><argument_list>(<argument><expr><operator>(</operator><name>ldns_dnssec_name</name> <operator>*</operator><operator>)</operator><name><name>node</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ldns_dnssec_name_node_deep_free</name><parameter_list>(<parameter><decl><type><name>ldns_rbnode_t</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>arg</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_dnssec_name_deep_free</name><argument_list>(<argument><expr><operator>(</operator><name>ldns_dnssec_name</name> <operator>*</operator><operator>)</operator><name><name>node</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ldns_dnssec_zone_free</name><parameter_list>(<parameter><decl><type><name>ldns_dnssec_zone</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>zone</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>zone</name><operator>-&gt;</operator><name>names</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ldns_traverse_postorder</name><argument_list>(<argument><expr><name><name>zone</name><operator>-&gt;</operator><name>names</name></name></expr></argument>,
<argument><expr><name>ldns_dnssec_name_node_free</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name><name>zone</name><operator>-&gt;</operator><name>names</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>zone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ldns_dnssec_zone_deep_free</name><parameter_list>(<parameter><decl><type><name>ldns_dnssec_zone</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>zone</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>zone</name><operator>-&gt;</operator><name>names</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ldns_traverse_postorder</name><argument_list>(<argument><expr><name><name>zone</name><operator>-&gt;</operator><name>names</name></name></expr></argument>,
<argument><expr><name>ldns_dnssec_name_node_deep_free</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name><name>zone</name><operator>-&gt;</operator><name>names</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>zone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>ldns_dname_compare_v</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
<return>return <expr><call><name>ldns_dname_compare</name><argument_list>(<argument><expr><operator>(</operator><name>ldns_rdf</name> <operator>*</operator><operator>)</operator><name>a</name></expr></argument>, <argument><expr><operator>(</operator><name>ldns_rdf</name> <operator>*</operator><operator>)</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type>
<name>ldns_dnssec_name_make_hashed_name</name><argument_list>(<argument><expr><name>ldns_dnssec_zone</name> <operator>*</operator><name>zone</name></expr></argument>,
<argument><expr><name>ldns_dnssec_name</name><operator>*</operator> <name>name</name></expr></argument>, <argument><expr><name>ldns_rr</name><operator>*</operator> <name>nsec3rr</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ldns_hashed_names_node_free</name><parameter_list>(<parameter><decl><type><name>ldns_rbnode_t</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>arg</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ldns_dnssec_zone_hashed_names_from_nsec3</name><parameter_list>(
<parameter><decl><type><name>ldns_dnssec_zone</name><modifier>*</modifier></type> <name>zone</name></decl></parameter>, <parameter><decl><type><name>ldns_rr</name><modifier>*</modifier></type> <name>nsec3rr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_rbnode_t</name><modifier>*</modifier></type> <name>current_node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_dnssec_name</name><modifier>*</modifier></type> <name>current_name</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>zone</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>nsec3rr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>zone</name><operator>-&gt;</operator><name>hashed_names</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_traverse_postorder</name><argument_list>(<argument><expr><name><name>zone</name><operator>-&gt;</operator><name>hashed_names</name></name></expr></argument>,
<argument><expr><name>ldns_hashed_names_node_free</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name><name>zone</name><operator>-&gt;</operator><name>hashed_names</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>zone</name><operator>-&gt;</operator><name>_nsec3params</name></name> <operator>=</operator> <name>nsec3rr</name></expr>;</expr_stmt>




<expr_stmt><expr><name><name>zone</name><operator>-&gt;</operator><name>hashed_names</name></name> <operator>=</operator> <call><name>ldns_rbtree_create</name><argument_list>(<argument><expr><name>ldns_dname_compare_v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>zone</name><operator>-&gt;</operator><name>hashed_names</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>( <init><expr><name>current_node</name> <operator>=</operator> <call><name>ldns_rbtree_first</name><argument_list>(<argument><expr><name><name>zone</name><operator>-&gt;</operator><name>names</name></name></expr></argument>)</argument_list></call></expr>
;</init> <condition><expr><name>current_node</name> <operator>!=</operator> <name>LDNS_RBTREE_NULL</name></expr>
;</condition> <incr><expr><name>current_node</name> <operator>=</operator> <call><name>ldns_rbtree_next</name><argument_list>(<argument><expr><name>current_node</name></expr></argument>)</argument_list></call></expr></incr>
)</control> <block>{<block_content>
<expr_stmt><expr><name>current_name</name> <operator>=</operator> <operator>(</operator><name>ldns_dnssec_name</name> <operator>*</operator><operator>)</operator> <name><name>current_node</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_dnssec_name_make_hashed_name</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><name>current_name</name></expr></argument>, <argument><expr><name>nsec3rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ldns_dnssec_name_make_hashed_name</name><parameter_list>(<parameter><decl><type><name>ldns_dnssec_zone</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>,
<parameter><decl><type><name>ldns_dnssec_name</name><modifier>*</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>ldns_rr</name><modifier>*</modifier></type> <name>nsec3rr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_rbnode_t</name><modifier>*</modifier></type> <name>new_node</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <name><name>zone</name><operator>-&gt;</operator><name>_nsec3params</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>nsec3rr</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_dnssec_zone_hashed_names_from_nsec3</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><name>nsec3rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator> <name>nsec3rr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nsec3rr</name> <operator>=</operator> <name><name>zone</name><operator>-&gt;</operator><name>_nsec3params</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>name</name><operator>-&gt;</operator><name>hashed_name</name></name> <operator>=</operator> <call><name>ldns_nsec3_hash_name_frm_nsec3</name><argument_list>(<argument><expr><name>nsec3rr</name></expr></argument>, <argument><expr><name><name>name</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>new_node</name> <operator>=</operator> <call><name>LDNS_MALLOC</name><argument_list>(<argument><expr><name>ldns_rbnode_t</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>new_node</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name><name>name</name><operator>-&gt;</operator><name>hashed_name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_node</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ldns_rbtree_insert</name><argument_list>(<argument><expr><name><name>zone</name><operator>-&gt;</operator><name>hashed_names</name></name></expr></argument>, <argument><expr><name>new_node</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>new_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>ldns_rbnode_t</name> <modifier>*</modifier></type>
<name>ldns_dnssec_zone_find_nsec3_original</name><parameter_list>(<parameter><decl><type><name>ldns_dnssec_zone</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>, <parameter><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>rr</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>hashed_name</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hashed_name</name> <operator>=</operator> <call><name>ldns_dname_label</name><argument_list>(<argument><expr><call><name>ldns_rr_owner</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hashed_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LDNS_RR_TYPE_NSEC3</name> <operator>&amp;&amp;</operator> <operator>!</operator> <name><name>zone</name><operator>-&gt;</operator><name>_nsec3params</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>ldns_dnssec_zone_hashed_names_from_nsec3</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>zone</name><operator>-&gt;</operator><name>hashed_names</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>hashed_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>ldns_rbtree_search</name><argument_list>(<argument><expr><name><name>zone</name><operator>-&gt;</operator><name>hashed_names</name></name></expr></argument>, <argument><expr><name>hashed_name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_dnssec_zone_add_rr</name><parameter_list>(<parameter><decl><type><name>ldns_dnssec_zone</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>, <parameter><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>rr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>result</name> <init>= <expr><name>LDNS_STATUS_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_dnssec_name</name> <modifier>*</modifier></type><name>cur_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rbnode_t</name> <modifier>*</modifier></type><name>cur_node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr_type</name></type> <name>type_covered</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>zone</name> <operator>||</operator> <operator>!</operator><name>rr</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>zone</name><operator>-&gt;</operator><name>names</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>zone</name><operator>-&gt;</operator><name>names</name></name> <operator>=</operator> <call><name>ldns_rbtree_create</name><argument_list>(<argument><expr><name>ldns_dname_compare_v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>zone</name><operator>-&gt;</operator><name>names</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LDNS_RR_TYPE_RRSIG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>type_covered</name> <operator>=</operator> <call><name>ldns_rdf2rr_type</name><argument_list>(<argument><expr><call><name>ldns_rr_rrsig_typecovered</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LDNS_RR_TYPE_NSEC3</name> <operator>||</operator>
<name>type_covered</name> <operator>==</operator> <name>LDNS_RR_TYPE_NSEC3</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cur_node</name> <operator>=</operator> <call><name>ldns_dnssec_zone_find_nsec3_original</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cur_node</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_DNSSEC_NSEC3_ORIGINAL_NOT_FOUND</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>cur_node</name> <operator>=</operator> <call><name>ldns_rbtree_search</name><argument_list>(<argument><expr><name><name>zone</name><operator>-&gt;</operator><name>names</name></name></expr></argument>, <argument><expr><call><name>ldns_rr_owner</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cur_node</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cur_name</name> <operator>=</operator> <call><name>ldns_dnssec_name_new_frm_rr</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>cur_name</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>cur_node</name> <operator>=</operator> <call><name>LDNS_MALLOC</name><argument_list>(<argument><expr><name>ldns_rbnode_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>cur_node</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_dnssec_name_free</name><argument_list>(<argument><expr><name>cur_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>cur_node</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <call><name>ldns_rr_owner</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur_node</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>cur_name</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>ldns_rbtree_insert</name><argument_list>(<argument><expr><name><name>zone</name><operator>-&gt;</operator><name>names</name></name></expr></argument>, <argument><expr><name>cur_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_dnssec_name_make_hashed_name</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><name>cur_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>cur_name</name> <operator>=</operator> <operator>(</operator><name>ldns_dnssec_name</name> <operator>*</operator><operator>)</operator> <name><name>cur_node</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ldns_dnssec_name_add_rr</name><argument_list>(<argument><expr><name>cur_name</name></expr></argument>, <argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LDNS_RR_TYPE_SOA</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>zone</name><operator>-&gt;</operator><name>soa</name></name> <operator>=</operator> <name>cur_name</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ldns_dnssec_zone_names_print_fmt</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_output_format</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_rbtree_t</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>print_soa</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_rbnode_t</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_dnssec_name</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>ldns_rbtree_first</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>node</name> <operator>!=</operator> <name>LDNS_RBTREE_NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <operator>(</operator><name>ldns_dnssec_name</name> <operator>*</operator><operator>)</operator> <name><name>node</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_dnssec_name_print_soa_fmt</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>print_soa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fmt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>LDNS_COMMENT_LAYOUT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">";\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>ldns_rbtree_next</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ldns_dnssec_zone_names_print</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_rbtree_t</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>print_soa</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ldns_dnssec_zone_names_print_fmt</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>ldns_output_format_default</name></expr></argument>,
<argument><expr><name>tree</name></expr></argument>, <argument><expr><name>print_soa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ldns_dnssec_zone_print_fmt</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_output_format</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_dnssec_zone</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>zone</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>zone</name><operator>-&gt;</operator><name>soa</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fmt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>LDNS_COMMENT_LAYOUT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">";; Zone: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rdf_print</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>ldns_dnssec_name_name</name><argument_list>(
<argument><expr><name><name>zone</name><operator>-&gt;</operator><name>soa</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"\n;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_dnssec_rrsets_print_fmt</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>,
<argument><expr><call><name>ldns_dnssec_name_find_rrset</name><argument_list>(
<argument><expr><name><name>zone</name><operator>-&gt;</operator><name>soa</name></name></expr></argument>,
<argument><expr><name>LDNS_RR_TYPE_SOA</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fmt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>LDNS_COMMENT_LAYOUT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">";\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>zone</name><operator>-&gt;</operator><name>names</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_dnssec_zone_names_print_fmt</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>,
<argument><expr><name><name>zone</name><operator>-&gt;</operator><name>names</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ldns_dnssec_zone_print</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_dnssec_zone</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ldns_dnssec_zone_print_fmt</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>ldns_output_format_default</name></expr></argument>, <argument><expr><name>zone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ldns_status</name></type>
<name>ldns_dnssec_zone_add_empty_nonterminals_nsec3</name><parameter_list>(
<parameter><decl><type><name>ldns_dnssec_zone</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>, <parameter><decl><type><name>ldns_rbtree_t</name> <modifier>*</modifier></type><name>nsec3s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_dnssec_name</name> <modifier>*</modifier></type><name>new_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>cur_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>next_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rbnode_t</name> <modifier>*</modifier></type><name>cur_node</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next_node</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>new_node</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>uint16_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>cur_label_count</name></decl>, <decl><type ref="prev"/><name>next_label_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>soa_label_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>l1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>l2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lpos</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>zone</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>zone</name><operator>-&gt;</operator><name>soa</name></name> <operator>&amp;&amp;</operator> <name><name>zone</name><operator>-&gt;</operator><name>soa</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>soa_label_count</name> <operator>=</operator> <call><name>ldns_dname_label_count</name><argument_list>(<argument><expr><name><name>zone</name><operator>-&gt;</operator><name>soa</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cur_node</name> <operator>=</operator> <call><name>ldns_rbtree_first</name><argument_list>(<argument><expr><name><name>zone</name><operator>-&gt;</operator><name>names</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>cur_node</name> <operator>!=</operator> <name>LDNS_RBTREE_NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>next_node</name> <operator>=</operator> <call><name>ldns_rbtree_next</name><argument_list>(<argument><expr><name>cur_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<while>while <condition>(<expr><name>next_node</name> <operator>!=</operator> <name>LDNS_RBTREE_NULL</name> <operator>&amp;&amp;</operator>
<name><name>next_node</name><operator>-&gt;</operator><name>data</name></name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name>ldns_dnssec_name</name> <operator>*</operator><operator>)</operator><name><name>next_node</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator><operator>-&gt;</operator><name>is_glue</name></expr>
)</condition> <block>{<block_content>
<expr_stmt><expr><name>next_node</name> <operator>=</operator> <call><name>ldns_rbtree_next</name><argument_list>(<argument><expr><name>next_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>next_node</name> <operator>==</operator> <name>LDNS_RBTREE_NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>next_node</name> <operator>=</operator> <call><name>ldns_rbtree_first</name><argument_list>(<argument><expr><name><name>zone</name><operator>-&gt;</operator><name>names</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <name><name>cur_node</name><operator>-&gt;</operator><name>data</name></name> <operator>||</operator> <operator>!</operator> <name><name>next_node</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>cur_name</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ldns_dnssec_name</name> <operator>*</operator><operator>)</operator><name><name>cur_node</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><name>next_name</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ldns_dnssec_name</name> <operator>*</operator><operator>)</operator><name><name>next_node</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cur_label_count</name> <operator>=</operator> <call><name>ldns_dname_label_count</name><argument_list>(<argument><expr><name>cur_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>next_label_count</name> <operator>=</operator> <call><name>ldns_dname_label_count</name><argument_list>(<argument><expr><name>next_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>








<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>next_label_count</name> <operator>-</operator> <name>soa_label_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>lpos</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>cur_label_count</name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name>next_label_count</name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><name>i</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>lpos</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>l1</name> <operator>=</operator> <call><name>ldns_dname_clone_from</name><argument_list>(<argument><expr><name>cur_name</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name>lpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>l1</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>l2</name> <operator>=</operator> <call><name>ldns_dname_clone_from</name><argument_list>(<argument><expr><name>next_name</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>l1</name> <operator>||</operator> <call><name>ldns_dname_compare</name><argument_list>(<argument><expr><name>l1</name></expr></argument>, <argument><expr><name>l2</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<decl_stmt><decl><type><name>ldns_rbnode_t</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>ent_name</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ent_name</name> <operator>=</operator> <call><name>ldns_dname_clone_from</name><argument_list>(
<argument><expr><name>next_name</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nsec3s</name> <operator>&amp;&amp;</operator> <name><name>zone</name><operator>-&gt;</operator><name>_nsec3params</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>ent_hashed_name</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ent_hashed_name</name> <operator>=</operator>
<call><name>ldns_nsec3_hash_name_frm_nsec3</name><argument_list>(
<argument><expr><name><name>zone</name><operator>-&gt;</operator><name>_nsec3params</name></name></expr></argument>,
<argument><expr><name>ent_name</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>ldns_rbtree_search</name><argument_list>(<argument><expr><name>nsec3s</name></expr></argument>,
<argument><expr><name>ent_hashed_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>node</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>l2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>new_name</name> <operator>=</operator> <call><name>ldns_dnssec_name_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_name</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>new_name</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>ent_name</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>new_name</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_dnssec_name_free</name><argument_list>(<argument><expr><name>new_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>new_name</name><operator>-&gt;</operator><name>name_alloced</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>new_node</name> <operator>=</operator> <call><name>LDNS_MALLOC</name><argument_list>(<argument><expr><name>ldns_rbnode_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_node</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_dnssec_name_free</name><argument_list>(<argument><expr><name>new_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>new_node</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name><name>new_name</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_node</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>new_name</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>ldns_rbtree_insert</name><argument_list>(<argument><expr><name><name>zone</name><operator>-&gt;</operator><name>names</name></name></expr></argument>, <argument><expr><name>new_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_dnssec_name_make_hashed_name</name><argument_list>(
<argument><expr><name>zone</name></expr></argument>, <argument><expr><name>new_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>node</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ldns_dnssec_zone_add_rr</name><argument_list>(<argument><expr><name>zone</name></expr></argument>,
<argument><expr><operator>(</operator><name>ldns_rr</name> <operator>*</operator><operator>)</operator><name><name>node</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>l2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>




<if_stmt><if>if <condition>(<expr><name>next_node</name> <operator>!=</operator> <call><name>ldns_rbtree_first</name><argument_list>(<argument><expr><name><name>zone</name><operator>-&gt;</operator><name>names</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cur_node</name> <operator>=</operator> <name>next_node</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>cur_node</name> <operator>=</operator> <name>LDNS_RBTREE_NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>LDNS_STATUS_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_dnssec_zone_add_empty_nonterminals</name><parameter_list>(<parameter><decl><type><name>ldns_dnssec_zone</name> <modifier>*</modifier></type><name>zone</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_dnssec_zone_add_empty_nonterminals_nsec3</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ldns_dnssec_zone_is_nsec3_optout</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_dnssec_zone</name><modifier>*</modifier></type> <name>zone</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_rr</name><modifier>*</modifier></type> <name>nsec3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rbnode_t</name><modifier>*</modifier></type> <name>node</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ldns_dnssec_name_find_rrset</name><argument_list>(<argument><expr><name><name>zone</name><operator>-&gt;</operator><name>soa</name></name></expr></argument>, <argument><expr><name>LDNS_RR_TYPE_NSEC3PARAM</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>ldns_rbtree_first</name><argument_list>(<argument><expr><name><name>zone</name><operator>-&gt;</operator><name>names</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>node</name> <operator>!=</operator> <name>LDNS_RBTREE_NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nsec3</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ldns_dnssec_name</name><operator>*</operator><operator>)</operator><name><name>node</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator><operator>-&gt;</operator><name>nsec</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nsec3</name> <operator>&amp;&amp;</operator><call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name>nsec3</name></expr></argument>)</argument_list></call>
<operator>==</operator> <name>LDNS_RR_TYPE_NSEC3</name> <operator>&amp;&amp;</operator>
<call><name>ldns_nsec3_optout</name><argument_list>(<argument><expr><name>nsec3</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>ldns_rbtree_next</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function></block_content></block></function>
</unit>
