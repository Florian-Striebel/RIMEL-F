<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/ldns/str2host.c">











<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ldns/config.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ldns/ldns.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_SOCKET_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ARPA_INET_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETDB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_PARAM_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>ldns_status</name></type>
<name>ldns_str2rdf_int16</name><parameter_list>(<parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier><modifier>*</modifier></type><name>rd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>shortstr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>LDNS_MALLOC</name><argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>r</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator><call><name>strtol</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>shortstr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>end</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_INVALID_INT</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>rd</name> <operator>=</operator> <call><name>ldns_rdf_new_frm_data</name><argument_list>(
<argument><expr><name>LDNS_RDF_TYPE_INT16</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><operator>*</operator><name>rd</name></expr>?</condition><then><expr><name>LDNS_STATUS_OK</name></expr></then><else>:<expr><name>LDNS_STATUS_MEM_ERR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_str2rdf_time</name><parameter_list>(<parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier><modifier>*</modifier></type><name>rd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>


<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><call><name>LDNS_MALLOC</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>r</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tm</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">14</literal> <operator>&amp;&amp;</operator>
<call><name>sscanf</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><literal type="string">"%4d%2d%2d%2d%2d%2d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tm</name><operator>.</operator><name>tm_year</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tm</name><operator>.</operator><name>tm_mon</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tm</name><operator>.</operator><name>tm_mday</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tm</name><operator>.</operator><name>tm_hour</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tm</name><operator>.</operator><name>tm_min</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tm</name><operator>.</operator><name>tm_sec</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">6</literal></expr>
)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_year</name></name> <operator>-=</operator> <literal type="number">1900</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_mon</name></name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tm</name><operator>.</operator><name>tm_year</name></name> <operator>&lt;</operator> <literal type="number">70</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>bad_format</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tm</name><operator>.</operator><name>tm_mon</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>tm</name><operator>.</operator><name>tm_mon</name></name> <operator>&gt;</operator> <literal type="number">11</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>bad_format</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tm</name><operator>.</operator><name>tm_mday</name></name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>tm</name><operator>.</operator><name>tm_mday</name></name> <operator>&gt;</operator> <literal type="number">31</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>bad_format</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tm</name><operator>.</operator><name>tm_hour</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>tm</name><operator>.</operator><name>tm_hour</name></name> <operator>&gt;</operator> <literal type="number">23</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>bad_format</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tm</name><operator>.</operator><name>tm_min</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>tm</name><operator>.</operator><name>tm_min</name></name> <operator>&gt;</operator> <literal type="number">59</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>bad_format</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tm</name><operator>.</operator><name>tm_sec</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>tm</name><operator>.</operator><name>tm_sec</name></name> <operator>&gt;</operator> <literal type="number">59</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>bad_format</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><call><name>ldns_mktime_from_utc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>rd</name> <operator>=</operator> <call><name>ldns_rdf_new_frm_data</name><argument_list>(
<argument><expr><name>LDNS_RDF_TYPE_TIME</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><operator>*</operator><name>rd</name></expr>?</condition><then><expr><name>LDNS_STATUS_OK</name></expr></then><else>:<expr><name>LDNS_STATUS_MEM_ERR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>strtol</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>time</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>*</operator><name>end</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_ERR</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>rd</name> <operator>=</operator> <call><name>ldns_rdf_new_frm_data</name><argument_list>(
<argument><expr><name>LDNS_RDF_TYPE_INT32</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><operator>*</operator><name>rd</name></expr>?</condition><then><expr><name>LDNS_STATUS_OK</name></expr></then><else>:<expr><name>LDNS_STATUS_MEM_ERR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<label><name>bad_format</name>:</label>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_INVALID_TIME</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_str2rdf_nsec3_salt</name><parameter_list>(<parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier><modifier>*</modifier></type><name>rd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>salt_str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>salt_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>salt_length_str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>salt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>rd</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>salt_length_str</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>salt_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>salt_length_str</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>salt_str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>salt_length_str</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>salt_length_str</name> <operator>%</operator> <literal type="number">2</literal> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_INVALID_HEX</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>salt_length_str</name> <operator>&gt;</operator> <literal type="number">512</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_INVALID_HEX</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>salt</name> <operator>=</operator> <call><name>LDNS_XMALLOC</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>salt_length_str</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>salt</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>salt_length_str</name></expr>;</condition> <incr><expr><name>c</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>isxdigit</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>salt_str</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isxdigit</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>salt_str</name><index>[<expr><name>c</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>salt</name><index>[<expr><name>c</name><operator>/</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator> <call><name>ldns_hexdigit_to_int</name><argument_list>(<argument><expr><name><name>salt_str</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator>
<call><name>ldns_hexdigit_to_int</name><argument_list>(<argument><expr><name><name>salt_str</name><index>[<expr><name>c</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>salt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_INVALID_HEX</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>salt_length</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator> <operator>(</operator><name>salt_length_str</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>LDNS_XMALLOC</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <name>salt_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>data</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>salt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>salt_length</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><name>salt_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>rd</name> <operator>=</operator> <call><name>ldns_rdf_new_frm_data</name><argument_list>(<argument><expr><name>LDNS_RDF_TYPE_NSEC3_SALT</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <name>salt_length</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>salt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><operator>*</operator><name>rd</name></expr>?</condition><then><expr><name>LDNS_STATUS_OK</name></expr></then><else>:<expr><name>LDNS_STATUS_MEM_ERR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_str2rdf_period</name><parameter_list>(<parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier><modifier>*</modifier></type><name>rd</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>period</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>


<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ldns_str2period</name><argument_list>(<argument><expr><name>period</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>end</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_ERR</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>rd</name> <operator>=</operator> <call><name>ldns_rdf_new_frm_data</name><argument_list>(
<argument><expr><name>LDNS_RDF_TYPE_PERIOD</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><ternary><condition><expr><operator>*</operator><name>rd</name></expr>?</condition><then><expr><name>LDNS_STATUS_OK</name></expr></then><else>:<expr><name>LDNS_STATUS_MEM_ERR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_str2rdf_int32</name><parameter_list>(<parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier><modifier>*</modifier></type><name>rd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>longstr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>l</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><call><name>LDNS_MALLOC</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>r</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>longstr</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>strtol</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>longstr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>strtoul</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>longstr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>end</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_ERR</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ERANGE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_SYNTAX_INTEGER_OVERFLOW</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>rd</name> <operator>=</operator> <call><name>ldns_rdf_new_frm_data</name><argument_list>(
<argument><expr><name>LDNS_RDF_TYPE_INT32</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><operator>*</operator><name>rd</name></expr>?</condition><then><expr><name>LDNS_STATUS_OK</name></expr></then><else>:<expr><name>LDNS_STATUS_MEM_ERR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_str2rdf_int8</name><parameter_list>(<parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier><modifier>*</modifier></type><name>rd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bytestr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>LDNS_MALLOC</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>r</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><call><name>strtol</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>bytestr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>end</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_ERR</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>rd</name> <operator>=</operator> <call><name>ldns_rdf_new_frm_data</name><argument_list>(
<argument><expr><name>LDNS_RDF_TYPE_INT8</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><operator>*</operator><name>rd</name></expr>?</condition><then><expr><name>LDNS_STATUS_OK</name></expr></then><else>:<expr><name>LDNS_STATUS_MEM_ERR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>












<function><type><name>INLINE</name> <name>bool</name></type>
<name>parse_escape</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ch_p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>str_p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>val</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>str_p</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>&amp;&amp;</operator> <call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>*</operator><name>str_p</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>*</operator><name>str_p</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>&amp;&amp;</operator> <call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>*</operator><name>str_p</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>*</operator><name>str_p</name><operator>)</operator><index>[<expr><literal type="number">2</literal></expr>]</index> <operator>&amp;&amp;</operator> <call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>*</operator><name>str_p</name><operator>)</operator><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>*</operator><name>str_p</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>*</operator> <literal type="number">100</literal> <operator>+</operator>
<operator>(</operator><operator>(</operator><operator>*</operator><name>str_p</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator>
<operator>(</operator><operator>(</operator><operator>*</operator><name>str_p</name><operator>)</operator><index>[<expr><literal type="number">2</literal></expr>]</index> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>ch_p</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>str_p</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>*</operator><name>str_p</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>*</operator><name>str_p</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ch_p</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>*</operator><operator>(</operator><operator>*</operator><name>str_p</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<label><name>error</name>:</label>
<expr_stmt><expr><operator>*</operator><name>str_p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>INLINE</name> <name>bool</name></type>
<name>parse_char</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ch_p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>str_p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><operator>*</operator><operator>*</operator><name>str_p</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'\0'</literal></expr>:</case> <return>return <expr><name>false</name></expr>;</return>

<case>case <expr><literal type="char">'\\'</literal></expr>:</case> <expr_stmt><expr><operator>*</operator><name>str_p</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><call><name>parse_escape</name><argument_list>(<argument><expr><name>ch_p</name></expr></argument>, <argument><expr><name>str_p</name></expr></argument>)</argument_list></call></expr>;</return>

<default>default:</default> <expr_stmt><expr><operator>*</operator><name>ch_p</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>*</operator><operator>(</operator><operator>*</operator><name>str_p</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>






<function><type><name>ldns_status</name></type>
<name>ldns_str2rdf_dname</name><parameter_list>(<parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier><modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>q</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pq</name></decl>, <decl><type ref="prev"/><name>label_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buf</name><index>[<expr><name>LDNS_MAX_DOMAINLEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>LDNS_MAX_DOMAINLEN</name> <operator>*</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_DOMAINNAME_OVERFLOW</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_DOMAINNAME_UNDERFLOW</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>==</operator> <name>len</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <call><name>ldns_rdf_new_frm_data</name><argument_list>(<argument><expr><name>LDNS_RDF_TYPE_DNAME</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"\0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>








<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>q</name> <operator>=</operator> <name>buf</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pq</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>label_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <name>str</name></expr>;</init> <condition><expr><operator>*</operator><name>s</name></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr><operator>,</operator> <expr><name>q</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>q</name> <operator>&gt;</operator> <name>buf</name> <operator>+</operator> <name>LDNS_MAX_DOMAINLEN</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_DOMAINNAME_OVERFLOW</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>q</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<switch>switch <condition>(<expr><operator>*</operator><name>s</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'.'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>label_len</name> <operator>&gt;</operator> <name>LDNS_MAX_LABELLEN</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_LABEL_OVERFLOW</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>label_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_EMPTY_LABEL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>label_len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pq</name> <operator>=</operator> <name>label_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>label_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>pq</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'\\'</literal></expr>:</case>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>parse_escape</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_SYNTAX_BAD_ESCAPE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>label_len</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><operator>*</operator><name>q</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>*</operator><name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>label_len</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ldns_dname_str_absolute</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>q</name> <operator>&gt;</operator> <name>buf</name> <operator>+</operator> <name>LDNS_MAX_DOMAINLEN</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_DOMAINNAME_OVERFLOW</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>label_len</name> <operator>&gt;</operator> <name>LDNS_MAX_LABELLEN</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_LABEL_OVERFLOW</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>label_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_EMPTY_LABEL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>label_len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pq</name> <operator>=</operator> <name>label_len</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>q</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>d</name> <operator>=</operator> <call><name>ldns_rdf_new_frm_data</name><argument_list>(<argument><expr><name>LDNS_RDF_TYPE_DNAME</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_str2rdf_a</name><parameter_list>(<parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier><modifier>*</modifier></type><name>rd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>in_addr_t</name></type> <name>address</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>address</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_INVALID_IP4</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>rd</name> <operator>=</operator> <call><name>ldns_rdf_new_frm_data</name><argument_list>(
<argument><expr><name>LDNS_RDF_TYPE_A</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><ternary><condition><expr><operator>*</operator><name>rd</name></expr>?</condition><then><expr><name>LDNS_STATUS_OK</name></expr></then><else>:<expr><name>LDNS_STATUS_MEM_ERR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_str2rdf_aaaa</name><parameter_list>(<parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier><modifier>*</modifier></type><name>rd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>address</name><index>[<expr><name>LDNS_IP6ADDRLEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>str</name></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_INVALID_IP6</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>rd</name> <operator>=</operator> <call><name>ldns_rdf_new_frm_data</name><argument_list>(
<argument><expr><name>LDNS_RDF_TYPE_AAAA</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><ternary><condition><expr><operator>*</operator><name>rd</name></expr>?</condition><then><expr><name>LDNS_STATUS_OK</name></expr></then><else>:<expr><name>LDNS_STATUS_MEM_ERR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_str2rdf_str</name><parameter_list>(<parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier><modifier>*</modifier></type><name>rd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dp</name></decl>, <decl><type ref="prev"/><name>ch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>length</name></decl>;</decl_stmt>


<expr_stmt><expr><name>dp</name> <operator>=</operator> <name>data</name> <operator>=</operator> <call><name>LDNS_XMALLOC</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">255</literal></expr> ?</condition><then> <expr><literal type="number">256</literal></expr> </then><else>: <expr><operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>data</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<while>while <condition>(<expr><call><name>parse_char</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dp</name> <operator>-</operator> <name>data</name> <operator>&gt;=</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_INVALID_STR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><operator>++</operator><name>dp</name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>str</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_SYNTAX_BAD_ESCAPE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>length</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>dp</name> <operator>-</operator> <name>data</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name>length</name></expr>;</expr_stmt>


<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>LDNS_XREALLOC</name><argument_list>(<argument><expr><name>dp</name> <operator>=</operator> <name>data</name></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>length</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>data</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><operator>*</operator><name>rd</name> <operator>=</operator> <call><name>ldns_rdf_new</name><argument_list>(<argument><expr><name>LDNS_RDF_TYPE_STR</name></expr></argument>, <argument><expr><name>length</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <operator>*</operator><name>rd</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>LDNS_STATUS_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_str2rdf_apl</name><parameter_list>(<parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier><modifier>*</modifier></type><name>rd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>my_str</name> <init>= <expr><name>str</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>my_ip_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>ip_str_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>family</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>negation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>afdlength</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>afdpart</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>prefix</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>my_str</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal>
<operator>||</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>my_str</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>my_str</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>my_str</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>my_str</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_INVALID_STR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>my_str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'!'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>negation</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<expr_stmt><expr><name>my_str</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>negation</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>family</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>my_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>my_str</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>my_str</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>ip_str_len</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><call><name>strchr</name><argument_list>(<argument><expr><name>my_str</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call> <operator>-</operator> <name>my_str</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>my_ip_str</name> <operator>=</operator> <call><name>LDNS_XMALLOC</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name>ip_str_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>my_ip_str</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>my_ip_str</name></expr></argument>, <argument><expr><name>my_str</name></expr></argument>, <argument><expr><name>ip_str_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>my_ip_str</name><index>[<expr><name>ip_str_len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>family</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>afdpart</name> <operator>=</operator> <call><name>LDNS_XMALLOC</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>afdpart</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>my_ip_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>my_ip_str</name></expr></argument>, <argument><expr><name>afdpart</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>my_ip_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>afdpart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_INVALID_STR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>afdpart</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>afdlength</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>family</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>afdpart</name> <operator>=</operator> <call><name>LDNS_XMALLOC</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>afdpart</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>my_ip_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>my_ip_str</name></expr></argument>, <argument><expr><name>afdpart</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>my_ip_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>afdpart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_INVALID_STR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>afdpart</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>afdlength</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>my_ip_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_INVALID_STR</name></expr>;</return>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>my_str</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>my_str</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>prefix</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>my_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>LDNS_XMALLOC</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>+</operator> <name>afdlength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>data</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>afdpart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>my_ip_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_INVALID_STR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_write_uint16</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>family</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>prefix</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>afdlength</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>negation</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>|</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>afdpart</name></expr></argument>, <argument><expr><name>afdlength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>rd</name> <operator>=</operator> <call><name>ldns_rdf_new_frm_data</name><argument_list>(<argument><expr><name>LDNS_RDF_TYPE_APL</name></expr></argument>, <argument><expr><name>afdlength</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>afdpart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>my_ip_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><operator>*</operator><name>rd</name></expr>?</condition><then><expr><name>LDNS_STATUS_OK</name></expr></then><else>:<expr><name>LDNS_STATUS_MEM_ERR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_str2rdf_b64</name><parameter_list>(<parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier><modifier>*</modifier></type><name>rd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>LDNS_XMALLOC</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><call><name>ldns_b64_ntop_calculate_size</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>buffer</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><call><name>ldns_b64_pton</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>str</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>,
<argument><expr><call><name>ldns_b64_ntop_calculate_size</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <name>i</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_INVALID_B64</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>rd</name> <operator>=</operator> <call><name>ldns_rdf_new_frm_data</name><argument_list>(
<argument><expr><name>LDNS_RDF_TYPE_B64</name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator> <name>i</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><operator>*</operator><name>rd</name></expr>?</condition><then><expr><name>LDNS_STATUS_OK</name></expr></then><else>:<expr><name>LDNS_STATUS_MEM_ERR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_str2rdf_b32_ext</name><parameter_list>(<parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier><modifier>*</modifier></type><name>rd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>len</name> <init>= <expr><call><name>ldns_b32_pton_calculate_size</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>LDNS_XMALLOC</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>buffer</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>ldns_b32_pton_extended_hex</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>str</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buffer</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><call><name>ldns_b32_ntop_calculate_size</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_INVALID_B32_EXT</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>rd</name> <operator>=</operator> <call><name>ldns_rdf_new_frm_data</name><argument_list>(
<argument><expr><name>LDNS_RDF_TYPE_B32_EXT</name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><operator>*</operator><name>rd</name></expr>?</condition><then><expr><name>LDNS_STATUS_OK</name></expr></then><else>:<expr><name>LDNS_STATUS_MEM_ERR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_str2rdf_hex</name><parameter_list>(<parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier><modifier>*</modifier></type><name>rd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>t</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>t_orig</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>LDNS_MAX_RDFLEN</name> <operator>*</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_LABEL_OVERFLOW</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>LDNS_XMALLOC</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><operator>(</operator><name>len</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>t</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>t_orig</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>t</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>*</operator><name>str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>str</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">16</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name> <operator>-=</operator> <literal type="number">15</literal></expr></incr>)</control> <block>{<block_content>
<while>while <condition>(<expr><operator>*</operator><name>str</name> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>*</operator><name>str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>str</name><operator>++</operator></expr>;</expr_stmt> </block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>isxdigit</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>*</operator><name>str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>t</name> <operator>+=</operator> <call><name>ldns_hexdigit_to_int</name><argument_list>(<argument><expr><operator>*</operator><name>str</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>t_orig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_ERR</name></expr>;</return>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>++</operator><name>str</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>++</operator><name>t</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>rd</name> <operator>=</operator> <call><name>ldns_rdf_new_frm_data</name><argument_list>(<argument><expr><name>LDNS_RDF_TYPE_HEX</name></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name>t</name> <operator>-</operator> <name>t_orig</name><operator>)</operator></expr></argument>,
<argument><expr><name>t_orig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>t_orig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><ternary><condition><expr><operator>*</operator><name>rd</name></expr>?</condition><then><expr><name>LDNS_STATUS_OK</name></expr></then><else>:<expr><name>LDNS_STATUS_MEM_ERR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_str2rdf_nsec</name><parameter_list>(<parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier><modifier>*</modifier></type><name>rd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>delimiters</name> <init>= <expr><literal type="string">"\n\t "</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>token</name> <init>= <expr><call><name>LDNS_XMALLOC</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name>LDNS_MAX_RDFLEN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>str_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>cur_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>type_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr_type</name></type> <name><name>type_list</name><index>[<expr><literal type="number">65536</literal></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>token</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>rd</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>str_buf</name> <operator>=</operator> <call><name>LDNS_MALLOC</name><argument_list>(<argument><expr><name>ldns_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>str_buf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_buffer_new_frm_data</name><argument_list>(<argument><expr><name>str_buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>str</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>ldns_buffer_status</name><argument_list>(<argument><expr><name>str_buf</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>str_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>ldns_bget_token</name><argument_list>(<argument><expr><name>str_buf</name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>delimiters</name></expr></argument>, <argument><expr><name>LDNS_MAX_RDFLEN</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>type_count</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>type_list</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>str_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>cur_type</name> <operator>=</operator> <call><name>ldns_get_rr_type_by_name</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>type_list</name><index>[<expr><name>type_count</name></expr>]</index></name> <operator>=</operator> <name>cur_type</name></expr>;</expr_stmt>
<expr_stmt><expr><name>type_count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>rd</name> <operator>=</operator> <call><name>ldns_dnssec_create_nsec_bitmap</name><argument_list>(<argument><expr><name>type_list</name></expr></argument>,
<argument><expr><name>type_count</name></expr></argument>,
<argument><expr><name>LDNS_RR_TYPE_NSEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_free</name><argument_list>(<argument><expr><name>str_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><operator>*</operator><name>rd</name></expr>?</condition><then><expr><name>LDNS_STATUS_OK</name></expr></then><else>:<expr><name>LDNS_STATUS_MEM_ERR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_str2rdf_type</name><parameter_list>(<parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier><modifier>*</modifier></type><name>rd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>type</name></decl>;</decl_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><call><name>ldns_get_rr_type_by_name</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>rd</name> <operator>=</operator> <call><name>ldns_rdf_new_frm_data</name><argument_list>(
<argument><expr><name>LDNS_RDF_TYPE_TYPE</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><operator>*</operator><name>rd</name></expr>?</condition><then><expr><name>LDNS_STATUS_OK</name></expr></then><else>:<expr><name>LDNS_STATUS_MEM_ERR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_str2rdf_class</name><parameter_list>(<parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier><modifier>*</modifier></type><name>rd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>klass</name></decl>;</decl_stmt>
<expr_stmt><expr><name>klass</name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><call><name>ldns_get_rr_class_by_name</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>rd</name> <operator>=</operator> <call><name>ldns_rdf_new_frm_data</name><argument_list>(
<argument><expr><name>LDNS_RDF_TYPE_CLASS</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>klass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><operator>*</operator><name>rd</name></expr>?</condition><then><expr><name>LDNS_STATUS_OK</name></expr></then><else>:<expr><name>LDNS_STATUS_MEM_ERR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>




<function><type><name>ldns_status</name></type>
<name>ldns_str2rdf_cert_alg</name><parameter_list>(<parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier><modifier>*</modifier></type><name>rd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_lookup_table</name> <modifier>*</modifier></type><name>lt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>idd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>lt</name> <operator>=</operator> <call><name>ldns_lookup_by_name</name><argument_list>(<argument><expr><name>ldns_cert_algorithms</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>st</name> <operator>=</operator> <name>LDNS_STATUS_OK</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_write_uint16</name><argument_list>(<argument><expr><name>idd</name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator> <name><name>lt</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>rd</name> <operator>=</operator> <call><name>ldns_rdf_new_frm_data</name><argument_list>(
<argument><expr><name>LDNS_RDF_TYPE_INT16</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>idd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>rd</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>st</name> <operator>=</operator> <name>LDNS_STATUS_ERR</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>ldns_str2rdf_int16</name><argument_list>(<argument><expr><name>rd</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>st</name> <operator>==</operator> <name>LDNS_STATUS_OK</name> <operator>&amp;&amp;</operator>
<call><name>ldns_rdf2native_int16</name><argument_list>(<argument><expr><operator>*</operator><name>rd</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>st</name> <operator>=</operator> <name>LDNS_STATUS_CERT_BAD_ALGORITHM</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>st</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>ldns_lookup_table</name></type> <name><name>ldns_tlsa_certificate_usages</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>LDNS_TLSA_USAGE_PKIX_TA</name></expr> , <expr><literal type="string">"PKIX-TA"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>LDNS_TLSA_USAGE_PKIX_EE</name></expr> , <expr><literal type="string">"PKIX-EE"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>LDNS_TLSA_USAGE_DANE_TA</name></expr> , <expr><literal type="string">"DANE-TA"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>LDNS_TLSA_USAGE_DANE_EE</name></expr> , <expr><literal type="string">"DANE-EE"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>LDNS_TLSA_USAGE_PRIVCERT</name></expr> , <expr><literal type="string">"PrivCert"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ldns_lookup_table</name></type> <name><name>ldns_tlsa_selectors</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>LDNS_TLSA_SELECTOR_CERT</name></expr> , <expr><literal type="string">"Cert"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>LDNS_TLSA_SELECTOR_SPKI</name></expr> , <expr><literal type="string">"SPKI"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>LDNS_TLSA_SELECTOR_PRIVSEL</name></expr> , <expr><literal type="string">"PrivSel"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ldns_lookup_table</name></type> <name><name>ldns_tlsa_matching_types</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>LDNS_TLSA_MATCHING_TYPE_FULL</name></expr> , <expr><literal type="string">"Full"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>LDNS_TLSA_MATCHING_TYPE_SHA2_256</name></expr> , <expr><literal type="string">"SHA2-256"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>LDNS_TLSA_MATCHING_TYPE_SHA2_512</name></expr> , <expr><literal type="string">"SHA2-512"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>LDNS_TLSA_MATCHING_TYPE_PRIVMATCH</name></expr> , <expr><literal type="string">"PrivMatch"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>ldns_status</name></type>
<name>ldns_str2rdf_mnemonic4int8</name><parameter_list>(<parameter><decl><type><name>ldns_lookup_table</name> <modifier>*</modifier></type><name>lt</name></decl></parameter>,
<parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier><modifier>*</modifier></type><name>rd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>lt</name> <operator>=</operator> <call><name>ldns_lookup_by_name</name><argument_list>(<argument><expr><name>lt</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>rd</name> <operator>=</operator> <call><name>ldns_native2rdf_int8</name><argument_list>(<argument><expr><name>LDNS_RDF_TYPE_INT8</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator> <name><name>lt</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>rd</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LDNS_STATUS_ERR</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><name>LDNS_STATUS_OK</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>ldns_str2rdf_int8</name><argument_list>(<argument><expr><name>rd</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>ldns_status</name></type>
<name>ldns_str2rdf_alg</name><parameter_list>(<parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier><modifier>*</modifier></type><name>rd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_str2rdf_mnemonic4int8</name><argument_list>(<argument><expr><name>ldns_algorithms</name></expr></argument>, <argument><expr><name>rd</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_str2rdf_certificate_usage</name><parameter_list>(<parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier><modifier>*</modifier></type><name>rd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_str2rdf_mnemonic4int8</name><argument_list>(
<argument><expr><name>ldns_tlsa_certificate_usages</name></expr></argument>, <argument><expr><name>rd</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_str2rdf_selector</name><parameter_list>(<parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier><modifier>*</modifier></type><name>rd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_str2rdf_mnemonic4int8</name><argument_list>(<argument><expr><name>ldns_tlsa_selectors</name></expr></argument>, <argument><expr><name>rd</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_str2rdf_matching_type</name><parameter_list>(<parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier><modifier>*</modifier></type><name>rd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_str2rdf_mnemonic4int8</name><argument_list>(<argument><expr><name>ldns_tlsa_matching_types</name></expr></argument>, <argument><expr><name>rd</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>ldns_status</name></type>
<name>ldns_str2rdf_unknown</name><argument_list>( <argument><expr><call><name>ATTR_UNUSED</name><argument_list>(<argument><expr><name>ldns_rdf</name> <operator>*</operator><operator>*</operator><name>rd</name></expr></argument>)</argument_list></call></expr></argument>
, <argument><expr><call><name>ATTR_UNUSED</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>str</name></expr></argument>)</argument_list></call></expr></argument>
)</argument_list>
<block>{<block_content>


<return>return <expr><name>LDNS_STATUS_NOT_IMPL</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>ldns_status</name></type>
<name>ldns_str2rdf_service</name><argument_list>( <argument><expr><call><name>ATTR_UNUSED</name><argument_list>(<argument><expr><name>ldns_rdf</name> <operator>*</operator><operator>*</operator><name>rd</name></expr></argument>)</argument_list></call></expr></argument>
, <argument><expr><call><name>ATTR_UNUSED</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>str</name></expr></argument>)</argument_list></call></expr></argument>
)</argument_list>
<block>{<block_content>

<return>return <expr><name>LDNS_STATUS_NOT_IMPL</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>loc_parse_cm</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>my_str</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>endstr</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>


<decl_stmt><decl><type><name>uint32_t</name></type> <name>meters</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>cm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>val</name></decl>;</decl_stmt>
<while>while <condition>(<expr><call><name>isblank</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>my_str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>my_str</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>meters</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>strtol</name><argument_list>(<argument><expr><name>my_str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>my_str</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>my_str</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>my_str</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>cm</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>strtol</name><argument_list>(<argument><expr><name>my_str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>my_str</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>meters</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>e</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <name>meters</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>e</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <name>cm</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<while>while<condition>(<expr><name>val</name> <operator>&gt;=</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>e</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>m</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><name>val</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>e</name> <operator>&gt;</operator> <literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>my_str</name> <operator>==</operator> <literal type="char">'m'</literal> <operator>||</operator> <operator>*</operator><name>my_str</name> <operator>==</operator> <literal type="char">'M'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>my_str</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>endstr</name> <operator>=</operator> <name>my_str</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_str2rdf_loc</name><parameter_list>(<parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier><modifier>*</modifier></type><name>rd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>latitude</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>longitude</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>altitude</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>equator</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <call><name>ldns_power</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>h</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>size_b</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>size_e</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>horiz_pre_b</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>horiz_pre_e</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>vert_pre_b</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>vert_pre_e</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>s</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>northerness</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>easterness</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>my_str</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>str</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>*</operator><name>my_str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>my_str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>my_str</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_INVALID_STR</name></expr>;</return>
</block_content>}</block></else></if_stmt>

<while>while <condition>(<expr><call><name>isblank</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>*</operator><name>my_str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>my_str</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>*</operator><name>my_str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>my_str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>my_str</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>my_str</name> <operator>==</operator> <literal type="char">'N'</literal> <operator>||</operator> <operator>*</operator><name>my_str</name> <operator>==</operator> <literal type="char">'S'</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>north</name>;</goto>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_INVALID_STR</name></expr>;</return>
</block_content>}</block></else></if_stmt>

<while>while <condition>(<expr><call><name>isblank</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>*</operator><name>my_str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>my_str</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>*</operator><name>my_str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>strtod</name><argument_list>(<argument><expr><name>my_str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>my_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<label><name>north</name>:</label>
<while>while <condition>(<expr><call><name>isblank</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>*</operator><name>my_str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>my_str</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>my_str</name> <operator>==</operator> <literal type="char">'N'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>northerness</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>my_str</name> <operator>==</operator> <literal type="char">'S'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>northerness</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_INVALID_STR</name></expr>;</return>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>my_str</name><operator>++</operator></expr>;</expr_stmt>


<expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="number">1000.0</literal> <operator>*</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="number">0.0005</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>latitude</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>latitude</name> <operator>+=</operator> <literal type="number">1000</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <name>m</name></expr>;</expr_stmt>
<expr_stmt><expr><name>latitude</name> <operator>+=</operator> <literal type="number">1000</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <name>h</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>northerness</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>latitude</name> <operator>=</operator> <name>equator</name> <operator>+</operator> <name>latitude</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>latitude</name> <operator>=</operator> <name>equator</name> <operator>-</operator> <name>latitude</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<while>while <condition>(<expr><call><name>isblank</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>my_str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>my_str</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>*</operator><name>my_str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>my_str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>my_str</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_INVALID_STR</name></expr>;</return>
</block_content>}</block></else></if_stmt>

<while>while <condition>(<expr><call><name>isblank</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>*</operator><name>my_str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>my_str</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>*</operator><name>my_str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>my_str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>my_str</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>my_str</name> <operator>==</operator> <literal type="char">'E'</literal> <operator>||</operator> <operator>*</operator><name>my_str</name> <operator>==</operator> <literal type="char">'W'</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>east</name>;</goto>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_INVALID_STR</name></expr>;</return>
</block_content>}</block></else></if_stmt>

<while>while <condition>(<expr><call><name>isblank</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>my_str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>my_str</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>*</operator><name>my_str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>strtod</name><argument_list>(<argument><expr><name>my_str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>my_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<label><name>east</name>:</label>
<while>while <condition>(<expr><call><name>isblank</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>my_str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>my_str</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>my_str</name> <operator>==</operator> <literal type="char">'E'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>easterness</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>my_str</name> <operator>==</operator> <literal type="char">'W'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>easterness</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_INVALID_STR</name></expr>;</return>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>my_str</name><operator>++</operator></expr>;</expr_stmt>


<expr_stmt><expr><name>s</name> <operator>*=</operator> <literal type="number">1000.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="number">0.0005</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>longitude</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>longitude</name> <operator>+=</operator> <literal type="number">1000</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <name>m</name></expr>;</expr_stmt>
<expr_stmt><expr><name>longitude</name> <operator>+=</operator> <literal type="number">1000</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <name>h</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>easterness</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>longitude</name> <operator>+=</operator> <name>equator</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>longitude</name> <operator>=</operator> <name>equator</name> <operator>-</operator> <name>longitude</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>altitude</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><call><name>strtod</name><argument_list>(<argument><expr><name>my_str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>my_str</name></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">100.0</literal> <operator>+</operator>
<literal type="number">10000000.0</literal> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>my_str</name> <operator>==</operator> <literal type="char">'m'</literal> <operator>||</operator> <operator>*</operator><name>my_str</name> <operator>==</operator> <literal type="char">'M'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>my_str</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>my_str</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>loc_parse_cm</name><argument_list>(<argument><expr><name>my_str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>my_str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size_b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size_e</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LDNS_STATUS_INVALID_STR</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>my_str</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>loc_parse_cm</name><argument_list>(<argument><expr><name>my_str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>my_str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>horiz_pre_b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>horiz_pre_e</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LDNS_STATUS_INVALID_STR</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>my_str</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>loc_parse_cm</name><argument_list>(<argument><expr><name>my_str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>my_str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vert_pre_b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vert_pre_e</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LDNS_STATUS_INVALID_STR</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>LDNS_XMALLOC</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>data</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>size_b</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>size_e</name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>horiz_pre_b</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>horiz_pre_e</name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>vert_pre_b</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>vert_pre_e</name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_write_uint32</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>latitude</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_write_uint32</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>longitude</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_write_uint32</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>altitude</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>rd</name> <operator>=</operator> <call><name>ldns_rdf_new_frm_data</name><argument_list>(
<argument><expr><name>LDNS_RDF_TYPE_LOC</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><operator>*</operator><name>rd</name></expr>?</condition><then><expr><name>LDNS_STATUS_OK</name></expr></then><else>:<expr><name>LDNS_STATUS_MEM_ERR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_str2rdf_wks</name><parameter_list>(<parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier><modifier>*</modifier></type><name>rd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>bitmap</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bm_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>protoent</name></name> <modifier>*</modifier></type><name>proto</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>servent</name></name> <modifier>*</modifier></type><name>serv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>serv_port</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>str_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>proto_str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>LDNS_XMALLOC</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>LDNS_XMALLOC</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>token</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>str_buf</name> <operator>=</operator> <call><name>LDNS_MALLOC</name><argument_list>(<argument><expr><name>ldns_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>str_buf</name></expr>)</condition> <block>{<block_content><expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return></block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_buffer_new_frm_data</name><argument_list>(<argument><expr><name>str_buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>str</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>ldns_buffer_status</name><argument_list>(<argument><expr><name>str_buf</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>str_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<while>while<condition>(<expr><call><name>ldns_bget_token</name><argument_list>(<argument><expr><name>str_buf</name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><literal type="string">"\t\n "</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>proto_str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>proto_str</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>proto_str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_free</name><argument_list>(<argument><expr><name>str_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_INVALID_STR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>serv</name> <operator>=</operator> <call><name>getservbyname</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>proto_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>serv</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>serv_port</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>ntohs</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator> <name><name>serv</name><operator>-&gt;</operator><name>s_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>serv_port</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>serv_port</name> <operator>/</operator> <literal type="number">8</literal> <operator>&gt;=</operator> <name>bm_len</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>b2</name> <init>= <expr><call><name>LDNS_XREALLOC</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><operator>(</operator><name>serv_port</name> <operator>/</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>b2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_free</name><argument_list>(<argument><expr><name>str_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>proto_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_INVALID_STR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bitmap</name> <operator>=</operator> <name>b2</name></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>bm_len</name> <operator>&lt;=</operator> <name>serv_port</name> <operator>/</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>bm_len</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>bitmap</name><index>[<expr><name>bm_len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_set_bit</name><argument_list>(<argument><expr><name>bitmap</name> <operator>+</operator> <operator>(</operator><name>serv_port</name> <operator>/</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">7</literal> <operator>-</operator> <operator>(</operator><name>serv_port</name> <operator>%</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>proto_str</name> <operator>||</operator> <operator>!</operator><name>bitmap</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_free</name><argument_list>(<argument><expr><name>str_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>proto_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_INVALID_STR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>LDNS_XMALLOC</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>bm_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>data</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_free</name><argument_list>(<argument><expr><name>str_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>proto_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_INVALID_STR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>proto_str</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>proto</name> <operator>=</operator> <call><name>getprotobyname</name><argument_list>(<argument><expr><name>proto_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>proto</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator> <name><name>proto</name><operator>-&gt;</operator><name>p_proto</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>proto_str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>proto_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>bitmap</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>bm_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>rd</name> <operator>=</operator> <call><name>ldns_rdf_new_frm_data</name><argument_list>(<argument><expr><name>LDNS_RDF_TYPE_WKS</name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator> <operator>(</operator><name>bm_len</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_free</name><argument_list>(<argument><expr><name>str_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>proto_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ENDSERVENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>endservent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ENDPROTOENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>endprotoent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name>rd</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>LDNS_STATUS_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_str2rdf_nsap</name><parameter_list>(<parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier><modifier>*</modifier></type><name>rd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>nsap_str</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>str</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'0'</literal> <operator>||</operator> <name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'x'</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_INVALID_STR</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>nsap_str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>nsap_str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><call><name>ldns_str2rdf_hex</name><argument_list>(<argument><expr><name>rd</name></expr></argument>, <argument><expr><name>str</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_str2rdf_atma</name><parameter_list>(<parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier><modifier>*</modifier></type><name>rd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>atma_str</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>str</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>status</name></decl>;</decl_stmt>


<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>atma_str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>atma_str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_str2rdf_hex</name><argument_list>(<argument><expr><name>rd</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<empty_stmt>;</empty_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_str2rdf_ipseckey</name><parameter_list>(<parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier><modifier>*</modifier></type><name>rd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>precedence</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>gateway_type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>algorithm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>gateway</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>publickey</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>str_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>token_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ipseckey_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rdf</name><modifier>*</modifier></type> <name>gateway_rdf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rdf</name><modifier>*</modifier></type> <name>publickey_rdf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>status</name> <init>= <expr><name>LDNS_STATUS_OK</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>LDNS_XMALLOC</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>LDNS_XMALLOC</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>token</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>str_buf</name> <operator>=</operator> <call><name>LDNS_MALLOC</name><argument_list>(<argument><expr><name>ldns_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>str_buf</name></expr>)</condition> <block>{<block_content><expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return></block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_buffer_new_frm_data</name><argument_list>(<argument><expr><name>str_buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>str</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>ldns_buffer_status</name><argument_list>(<argument><expr><name>str_buf</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>str_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<while>while<condition>(<expr><call><name>ldns_bget_token</name><argument_list>(<argument><expr><name>str_buf</name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><literal type="string">"\t\n "</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>token_count</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name>precedence</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><call><name>atoi</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>gateway_type</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><call><name>atoi</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name>algorithm</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><call><name>atoi</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><name>gateway</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>gateway</name> <operator>||</operator> <operator>(</operator><name>gateway_type</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'.'</literal> <operator>||</operator> <name><name>token</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>gateway</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_free</name><argument_list>(<argument><expr><name>str_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_INVALID_STR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<expr_stmt><expr><name>publickey</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_free</name><argument_list>(<argument><expr><name>str_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_INVALID_STR</name></expr>;</return>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name>token_count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>gateway</name> <operator>||</operator> <operator>!</operator><name>publickey</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>gateway</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>gateway</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>publickey</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>publickey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_free</name><argument_list>(<argument><expr><name>str_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_INVALID_STR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>gateway_type</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_str2rdf_a</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gateway_rdf</name></expr></argument>, <argument><expr><name>gateway</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>gateway_type</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_str2rdf_aaaa</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gateway_rdf</name></expr></argument>, <argument><expr><name>gateway</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>gateway_type</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_str2rdf_dname</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gateway_rdf</name></expr></argument>, <argument><expr><name>gateway</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>gateway</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>gateway</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>publickey</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>publickey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_free</name><argument_list>(<argument><expr><name>str_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_INVALID_STR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_str2rdf_b64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>publickey_rdf</name></expr></argument>, <argument><expr><name>publickey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>gateway</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>gateway</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>publickey</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>publickey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_free</name><argument_list>(<argument><expr><name>str_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>gateway_rdf</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ldns_rdf_free</name><argument_list>(<argument><expr><name>gateway_rdf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>LDNS_STATUS_INVALID_STR</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>gateway_type</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ipseckey_len</name> <operator>=</operator> <literal type="number">3</literal> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>gateway_rdf</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>publickey_rdf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ipseckey_len</name> <operator>=</operator> <literal type="number">3</literal> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>publickey_rdf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>LDNS_XMALLOC</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>ipseckey_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>data</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>gateway</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>gateway</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>publickey</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>publickey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_free</name><argument_list>(<argument><expr><name>str_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>gateway_rdf</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ldns_rdf_free</name><argument_list>(<argument><expr><name>gateway_rdf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>publickey_rdf</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ldns_rdf_free</name><argument_list>(<argument><expr><name>publickey_rdf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>precedence</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>gateway_type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>algorithm</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>gateway_type</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>,
<argument><expr><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>gateway_rdf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>gateway_rdf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>gateway_rdf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>publickey_rdf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>publickey_rdf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>,
<argument><expr><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>publickey_rdf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>publickey_rdf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>rd</name> <operator>=</operator> <call><name>ldns_rdf_new_frm_data</name><argument_list>(<argument><expr><name>LDNS_RDF_TYPE_IPSECKEY</name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator> <name>ipseckey_len</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>gateway</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>gateway</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>publickey</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>publickey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_free</name><argument_list>(<argument><expr><name>str_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rdf_free</name><argument_list>(<argument><expr><name>gateway_rdf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rdf_free</name><argument_list>(<argument><expr><name>publickey_rdf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name>rd</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>LDNS_STATUS_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_str2rdf_ilnp64</name><parameter_list>(<parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier><modifier>*</modifier></type><name>rd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>shorts</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%4x:%4x:%4x:%4x%n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">4</literal> <operator>||</operator>
<name>l</name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>strpbrk</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"+-"</literal></expr></argument>)</argument_list></call></expr>
)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_INVALID_ILNP64</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>shorts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shorts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shorts</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shorts</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>rd</name> <operator>=</operator> <call><name>ldns_rdf_new_frm_data</name><argument_list>(
<argument><expr><name>LDNS_RDF_TYPE_ILNP64</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>shorts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><ternary><condition><expr><operator>*</operator><name>rd</name></expr> ?</condition><then> <expr><name>LDNS_STATUS_OK</name></expr> </then><else>: <expr><name>LDNS_STATUS_MEM_ERR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_str2rdf_eui48</name><parameter_list>(<parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier><modifier>*</modifier></type><name>rd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>e</name></decl>, <decl><type ref="prev"/><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>bytes</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%2x-%2x-%2x-%2x-%2x-%2x%n"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">6</literal> <operator>||</operator>
<name>l</name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_INVALID_EUI48</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bytes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bytes</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bytes</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bytes</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>rd</name> <operator>=</operator> <call><name>ldns_rdf_new_frm_data</name><argument_list>(<argument><expr><name>LDNS_RDF_TYPE_EUI48</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><ternary><condition><expr><operator>*</operator><name>rd</name></expr> ?</condition><then> <expr><name>LDNS_STATUS_OK</name></expr> </then><else>: <expr><name>LDNS_STATUS_MEM_ERR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_str2rdf_eui64</name><parameter_list>(<parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier><modifier>*</modifier></type><name>rd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>e</name></decl>, <decl><type ref="prev"/><name>f</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>bytes</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%2x-%2x-%2x-%2x-%2x-%2x-%2x-%2x%n"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">8</literal> <operator>||</operator>
<name>l</name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_INVALID_EUI64</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bytes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bytes</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bytes</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bytes</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bytes</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bytes</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>rd</name> <operator>=</operator> <call><name>ldns_rdf_new_frm_data</name><argument_list>(<argument><expr><name>LDNS_RDF_TYPE_EUI64</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><ternary><condition><expr><operator>*</operator><name>rd</name></expr> ?</condition><then> <expr><name>LDNS_STATUS_OK</name></expr> </then><else>: <expr><name>LDNS_STATUS_MEM_ERR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_str2rdf_tag</name><parameter_list>(<parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier><modifier>*</modifier></type><name>rd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>ptr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_INVALID_TAG</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>ptr</name> <operator>=</operator> <name>str</name></expr>;</init> <condition><expr><operator>*</operator><name>ptr</name></expr>;</condition> <incr><expr><name>ptr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>isalnum</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_INVALID_TAG</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>LDNS_XMALLOC</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>rd</name> <operator>=</operator> <call><name>ldns_rdf_new</name><argument_list>(<argument><expr><name>LDNS_RDF_TYPE_TAG</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>rd</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>LDNS_STATUS_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_str2rdf_long_str</name><parameter_list>(<parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier><modifier>*</modifier></type><name>rd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dp</name></decl>, <decl><type ref="prev"/><name>ch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>length</name></decl>;</decl_stmt>


<expr_stmt><expr><name>dp</name> <operator>=</operator> <name>data</name> <operator>=</operator> <call><name>LDNS_XMALLOC</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>data</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<while>while <condition>(<expr><call><name>parse_char</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dp</name> <operator>-</operator> <name>data</name> <operator>&gt;</operator> <name>LDNS_MAX_RDFLEN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_INVALID_STR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>str</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_SYNTAX_BAD_ESCAPE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>length</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>dp</name> <operator>-</operator> <name>data</name><operator>)</operator></expr>;</expr_stmt>


<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>LDNS_XREALLOC</name><argument_list>(<argument><expr><name>dp</name> <operator>=</operator> <name>data</name></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>data</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><operator>*</operator><name>rd</name> <operator>=</operator> <call><name>ldns_rdf_new</name><argument_list>(<argument><expr><name>LDNS_RDF_TYPE_LONG_STR</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <operator>*</operator><name>rd</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>LDNS_STATUS_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_str2rdf_hip</name><parameter_list>(<parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier><modifier>*</modifier></type><name>rd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hit</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pk</name> <init>= <expr><ternary><condition><expr><name>hit</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>strchr</name><argument_list>(<argument><expr><name>hit</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>hit_size</name> <init>= <expr><ternary><condition><expr><name>hit</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr>
</then><else>: <expr><ternary><condition><expr><name>pk</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name>hit</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name>pk</name> <operator>-</operator> <name>hit</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>pk_size</name> <init>= <expr><ternary><condition><expr><name>pk</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>strlen</name><argument_list>(<argument><expr><name>pk</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>hit_wire_size</name> <init>= <expr><operator>(</operator><name>hit_size</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>pk_wire_size</name> <init>= <expr><call><name>ldns_b64_pton_calculate_size</name><argument_list>(<argument><expr><name>pk_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>rdf_size</name> <init>= <expr><literal type="number">4</literal> <operator>+</operator> <name>hit_wire_size</name> <operator>+</operator> <name>pk_wire_size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>endptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>algorithm</name> <init>= <expr><call><name>strtol</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endptr</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hi</name></decl>, <decl><type ref="prev"/><name>lo</name></decl>, <decl><type ref="prev"/><name>written</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hit_size</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>pk_size</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>hit_size</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>&gt;</operator> <literal type="number">255</literal>
<operator>||</operator> <name>rdf_size</name> <operator>&gt;</operator> <name>LDNS_MAX_RDFLEN</name>
<operator>||</operator> <name><name>algorithm</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>algorithm</name></expr></argument> &gt;</argument_list></name> <literal type="number">255</literal>
<operator>||</operator> <operator>(</operator><name>errno</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>algorithm</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator>
<operator>||</operator> <name>endptr</name> <operator>==</operator> <name>str</name></expr> )</condition> <block>{<block_content>

<return>return <expr><name>LDNS_STATUS_SYNTAX_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>data</name> <operator>=</operator> <call><name>LDNS_XMALLOC</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>rdf_size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>



























<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator> <name>hit_wire_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator> <name>algorithm</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>dp</name> <operator>=</operator> <name>data</name> <operator>+</operator> <literal type="number">4</literal></expr>;</init> <condition><expr><operator>*</operator><name>hit</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>hit</name> <operator>!=</operator> <literal type="char">' '</literal></expr>;</condition> <incr><expr><name>dp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>hi</name> <operator>=</operator> <call><name>ldns_hexdigit_to_int</name><argument_list>(<argument><expr><operator>*</operator><name>hit</name><operator>++</operator></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator>
<operator>(</operator><name>lo</name> <operator>=</operator> <call><name>ldns_hexdigit_to_int</name><argument_list>(<argument><expr><operator>*</operator><name>hit</name><operator>++</operator></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_INVALID_HEX</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>dp</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator> <name>hi</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal> <operator>|</operator> <name>lo</name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>written</name> <operator>=</operator> <call><name>ldns_b64_pton</name><argument_list>(<argument><expr><name>pk</name></expr></argument>, <argument><expr><name>dp</name></expr></argument>, <argument><expr><name>pk_wire_size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_INVALID_B64</name></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>pk_wire_size</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator> <name>written</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_write_uint16</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>pk_wire_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rdf_size</name> <operator>=</operator> <literal type="number">4</literal> <operator>+</operator> <name>hit_wire_size</name> <operator>+</operator> <name>pk_wire_size</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator> <operator>(</operator><operator>*</operator><name>rd</name> <operator>=</operator> <call><name>ldns_rdf_new</name><argument_list>(<argument><expr><name>LDNS_RDF_TYPE_HIP</name></expr></argument>, <argument><expr><name>rdf_size</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>LDNS_STATUS_OK</name></expr>;</return>
</block_content>}</block></function>
</unit>
