<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/ldns/dane.c">








<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ldns/config.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_DANE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ldns/ldns.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ldns/dane.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_SOCKET_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETDB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/ssl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/err.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/x509v3.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>ldns_status</name></type>
<name>ldns_dane_create_tlsa_owner</name><parameter_list>(<parameter><decl><type><name>ldns_rdf</name><modifier>*</modifier><modifier>*</modifier></type> <name>tlsa_owner</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name><modifier>*</modifier></type> <name>name</name></decl></parameter>,
<parameter><decl><type><name>uint16_t</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name>ldns_dane_transport</name></type> <name>transport</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>LDNS_MAX_DOMAINLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>tlsa_owner</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>ldns_rdf_get_type</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LDNS_RDF_TYPE_DNAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>LDNS_MAX_DOMAINLEN</name></expr></argument>, <argument><expr><literal type="string">"X_%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><name>s</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>transport</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LDNS_DANE_TRANSPORT_TCP</name></expr>:</case>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>s</name></expr></argument>, <argument><expr><name>LDNS_MAX_DOMAINLEN</name> <operator>-</operator> <name>s</name></expr></argument>, <argument><expr><literal type="string">"\004_tcp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LDNS_DANE_TRANSPORT_UDP</name></expr>:</case>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>s</name></expr></argument>, <argument><expr><name>LDNS_MAX_DOMAINLEN</name> <operator>-</operator> <name>s</name></expr></argument>, <argument><expr><literal type="string">"\004_udp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LDNS_DANE_TRANSPORT_SCTP</name></expr>:</case>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>s</name></expr></argument>, <argument><expr><name>LDNS_MAX_DOMAINLEN</name> <operator>-</operator> <name>s</name></expr></argument>, <argument><expr><literal type="string">"\005_sctp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<return>return <expr><name>LDNS_STATUS_DANE_UNKNOWN_TRANSPORT</name></expr>;</return>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>+</operator> <call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>LDNS_MAX_DOMAINLEN</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_DOMAINNAME_OVERFLOW</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>s</name></expr></argument>, <argument><expr><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>tlsa_owner</name> <operator>=</operator> <call><name>ldns_rdf_new_frm_data</name><argument_list>(<argument><expr><name>LDNS_RDF_TYPE_DNAME</name></expr></argument>,
<argument><expr><name>s</name> <operator>+</operator> <call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>tlsa_owner</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>LDNS_STATUS_OK</name></expr>;</return>
</block_content>}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>ldns_status</name></type>
<name>ldns_dane_cert2rdf</name><parameter_list>(<parameter><decl><type><name>ldns_rdf</name><modifier>*</modifier><modifier>*</modifier></type> <name>rdf</name></decl></parameter>, <parameter><decl><type><name>X509</name><modifier>*</modifier></type> <name>cert</name></decl></parameter>,
<parameter><decl><type><name>ldns_tlsa_selector</name></type> <name>selector</name></decl></parameter>,
<parameter><decl><type><name>ldns_tlsa_matching_type</name></type> <name>matching_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>X509_PUBKEY</name><modifier>*</modifier></type> <name>xpubkey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>EVP_PKEY</name><modifier>*</modifier></type> <name>epubkey</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>digest</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>rdf</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>cert</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>selector</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LDNS_TLSA_SELECTOR_FULL_CERTIFICATE</name></expr>:</case>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>i2d_X509</name><argument_list>(<argument><expr><name>cert</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LDNS_TLSA_SELECTOR_SUBJECTPUBLICKEYINFO</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>S_SPLINT_S</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>xpubkey</name> <operator>=</operator> <call><name>X509_get_X509_PUBKEY</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>xpubkey</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_SSL_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>epubkey</name> <operator>=</operator> <call><name>X509_PUBKEY_get</name><argument_list>(<argument><expr><name>xpubkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>epubkey</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_SSL_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>i2d_PUBKEY</name><argument_list>(<argument><expr><name>epubkey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<return>return <expr><name>LDNS_STATUS_DANE_UNKNOWN_SELECTOR</name></expr>;</return>
</block_content>}</block></switch>

<switch>switch<condition>(<expr><name>matching_type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LDNS_TLSA_MATCHING_TYPE_NO_HASH_USED</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>rdf</name> <operator>=</operator> <call><name>ldns_rdf_new</name><argument_list>(<argument><expr><name>LDNS_RDF_TYPE_HEX</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><operator>*</operator><name>rdf</name></expr> ?</condition><then> <expr><name>LDNS_STATUS_OK</name></expr> </then><else>: <expr><name>LDNS_STATUS_MEM_ERR</name></expr></else></ternary></expr>;</return>
<break>break;</break>

<case>case <expr><name>LDNS_TLSA_MATCHING_TYPE_SHA256</name></expr>:</case>

<expr_stmt><expr><name>digest</name> <operator>=</operator> <macro><name>LDNS_XMALLOC</name><argument_list>(<argument>unsigned char</argument>, <argument>LDNS_SHA256_DIGEST_LENGTH</argument>)</argument_list></macro></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>digest</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ldns_sha256</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>len</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>rdf</name> <operator>=</operator> <call><name>ldns_rdf_new</name><argument_list>(<argument><expr><name>LDNS_RDF_TYPE_HEX</name></expr></argument>, <argument><expr><name>LDNS_SHA256_DIGEST_LENGTH</name></expr></argument>,
<argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><operator>*</operator><name>rdf</name></expr> ?</condition><then> <expr><name>LDNS_STATUS_OK</name></expr> </then><else>: <expr><name>LDNS_STATUS_MEM_ERR</name></expr></else></ternary></expr>;</return>
<break>break;</break>

<case>case <expr><name>LDNS_TLSA_MATCHING_TYPE_SHA512</name></expr>:</case>

<expr_stmt><expr><name>digest</name> <operator>=</operator> <macro><name>LDNS_XMALLOC</name><argument_list>(<argument>unsigned char</argument>, <argument>LDNS_SHA512_DIGEST_LENGTH</argument>)</argument_list></macro></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>digest</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ldns_sha512</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>len</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>rdf</name> <operator>=</operator> <call><name>ldns_rdf_new</name><argument_list>(<argument><expr><name>LDNS_RDF_TYPE_HEX</name></expr></argument>, <argument><expr><name>LDNS_SHA512_DIGEST_LENGTH</name></expr></argument>,
<argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><operator>*</operator><name>rdf</name></expr> ?</condition><then> <expr><name>LDNS_STATUS_OK</name></expr> </then><else>: <expr><name>LDNS_STATUS_MEM_ERR</name></expr></else></ternary></expr>;</return>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_DANE_UNKNOWN_MATCHING_TYPE</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>





<decl_stmt><decl><type><specifier>static</specifier> <name>ldns_status</name></type>
<name>ldns_dane_pkix_validate</name><argument_list>(<argument><expr><name>X509</name><operator>*</operator> <name>cert</name></expr></argument>, <argument><expr><call><name>STACK_OF</name><argument_list>(<argument><expr><name>X509</name></expr></argument>)</argument_list></call><operator>*</operator> <name>extra_certs</name></expr></argument>,
<argument><expr><name>X509_STORE</name><operator>*</operator> <name>store</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>X509_STORE_CTX</name><modifier>*</modifier></type> <name>vrfy_ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>s</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>store</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_DANE_PKIX_DID_NOT_VALIDATE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>vrfy_ctx</name> <operator>=</operator> <call><name>X509_STORE_CTX_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>vrfy_ctx</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>LDNS_STATUS_SSL_ERR</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>X509_STORE_CTX_init</name><argument_list>(<argument><expr><name>vrfy_ctx</name></expr></argument>, <argument><expr><name>store</name></expr></argument>,
<argument><expr><name>cert</name></expr></argument>, <argument><expr><name>extra_certs</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>LDNS_STATUS_SSL_ERR</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>X509_verify_cert</name><argument_list>(<argument><expr><name>vrfy_ctx</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>LDNS_STATUS_OK</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>LDNS_STATUS_DANE_PKIX_DID_NOT_VALIDATE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>X509_STORE_CTX_free</name><argument_list>(<argument><expr><name>vrfy_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>





<decl_stmt><decl><type><specifier>static</specifier> <name>ldns_status</name></type>
<name>ldns_dane_pkix_validate_and_get_chain</name><argument_list>(<argument><expr><call><name>STACK_OF</name><argument_list>(<argument><expr><name>X509</name></expr></argument>)</argument_list></call><operator>*</operator><operator>*</operator> <name>chain</name></expr></argument>, <argument><expr><name>X509</name><operator>*</operator> <name>cert</name></expr></argument>,
<argument><expr><call><name>STACK_OF</name><argument_list>(<argument><expr><name>X509</name></expr></argument>)</argument_list></call><operator>*</operator> <name>extra_certs</name></expr></argument>, <argument><expr><name>X509_STORE</name><operator>*</operator> <name>store</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>X509_STORE</name><modifier>*</modifier></type> <name>empty_store</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>X509_STORE_CTX</name><modifier>*</modifier></type> <name>vrfy_ctx</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>chain</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>store</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>store</name> <operator>=</operator> <name>empty_store</name> <operator>=</operator> <call><name>X509_STORE_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>LDNS_STATUS_SSL_ERR</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vrfy_ctx</name> <operator>=</operator> <call><name>X509_STORE_CTX_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>vrfy_ctx</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>exit_free_empty_store</name>;</goto>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>X509_STORE_CTX_init</name><argument_list>(<argument><expr><name>vrfy_ctx</name></expr></argument>, <argument><expr><name>store</name></expr></argument>,
<argument><expr><name>cert</name></expr></argument>, <argument><expr><name>extra_certs</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>exit_free_vrfy_ctx</name>;</goto>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>X509_verify_cert</name><argument_list>(<argument><expr><name>vrfy_ctx</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>LDNS_STATUS_OK</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>LDNS_STATUS_DANE_PKIX_DID_NOT_VALIDATE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>*</operator><name>chain</name> <operator>=</operator> <call><name>X509_STORE_CTX_get1_chain</name><argument_list>(<argument><expr><name>vrfy_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <operator>*</operator><name>chain</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>LDNS_STATUS_SSL_ERR</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<label><name>exit_free_vrfy_ctx</name>:</label>
<expr_stmt><expr><call><name>X509_STORE_CTX_free</name><argument_list>(<argument><expr><name>vrfy_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>exit_free_empty_store</name>:</label>
<if_stmt><if>if <condition>(<expr><name>empty_store</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>X509_STORE_free</name><argument_list>(<argument><expr><name>empty_store</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>




<decl_stmt><decl><type><specifier>static</specifier> <name>ldns_status</name></type>
<name>ldns_dane_pkix_get_chain</name><argument_list>(<argument><expr><call><name>STACK_OF</name><argument_list>(<argument><expr><name>X509</name></expr></argument>)</argument_list></call><operator>*</operator><operator>*</operator> <name>chain</name></expr></argument>,
<argument><expr><name>X509</name><operator>*</operator> <name>cert</name></expr></argument>, <argument><expr><call><name>STACK_OF</name><argument_list>(<argument><expr><name>X509</name></expr></argument>)</argument_list></call><operator>*</operator> <name>extra_certs</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>X509_STORE</name><modifier>*</modifier></type> <name>empty_store</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>X509_STORE_CTX</name><modifier>*</modifier></type> <name>vrfy_ctx</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>chain</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>empty_store</name> <operator>=</operator> <call><name>X509_STORE_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>LDNS_STATUS_SSL_ERR</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vrfy_ctx</name> <operator>=</operator> <call><name>X509_STORE_CTX_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>vrfy_ctx</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>exit_free_empty_store</name>;</goto>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>X509_STORE_CTX_init</name><argument_list>(<argument><expr><name>vrfy_ctx</name></expr></argument>, <argument><expr><name>empty_store</name></expr></argument>,
<argument><expr><name>cert</name></expr></argument>, <argument><expr><name>extra_certs</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>exit_free_vrfy_ctx</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>X509_verify_cert</name><argument_list>(<argument><expr><name>vrfy_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>chain</name> <operator>=</operator> <call><name>X509_STORE_CTX_get1_chain</name><argument_list>(<argument><expr><name>vrfy_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <operator>*</operator><name>chain</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>LDNS_STATUS_SSL_ERR</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>LDNS_STATUS_OK</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<label><name>exit_free_vrfy_ctx</name>:</label>
<expr_stmt><expr><call><name>X509_STORE_CTX_free</name><argument_list>(<argument><expr><name>vrfy_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>exit_free_empty_store</name>:</label>
<expr_stmt><expr><call><name>X509_STORE_free</name><argument_list>(<argument><expr><name>empty_store</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>




<decl_stmt><decl><type><specifier>static</specifier> <name>ldns_status</name></type>
<name>ldns_dane_get_nth_cert_from_validation_chain</name><argument_list>(
<argument><expr><name>X509</name><operator>*</operator><operator>*</operator> <name>cert</name></expr></argument>, <argument><expr><call><name>STACK_OF</name><argument_list>(<argument><expr><name>X509</name></expr></argument>)</argument_list></call><operator>*</operator> <name>chain</name></expr></argument>, <argument><expr><name>int</name> <name>n</name></expr></argument>, <argument><expr><name>bool</name> <name>ca</name></expr></argument>)</argument_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <call><name>sk_X509_num</name><argument_list>(<argument><expr><name>chain</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_DANE_OFFSET_OUT_OF_RANGE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>cert</name> <operator>=</operator> <call><name>sk_X509_pop</name><argument_list>(<argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>n</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>X509_free</name><argument_list>(<argument><expr><operator>*</operator><name>cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>cert</name> <operator>=</operator> <call><name>sk_X509_pop</name><argument_list>(<argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>ca</name> <operator>&amp;&amp;</operator> <operator>!</operator> <call><name>X509_check_ca</name><argument_list>(<argument><expr><operator>*</operator><name>cert</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_DANE_NON_CA_CERTIFICATE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>LDNS_STATUS_OK</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>





<decl_stmt><decl><type><specifier>static</specifier> <name>ldns_status</name></type>
<name>ldns_dane_pkix_get_last_self_signed</name><argument_list>(<argument><expr><name>X509</name><operator>*</operator><operator>*</operator> <name>out_cert</name></expr></argument>,
<argument><expr><name>X509</name><operator>*</operator> <name>cert</name></expr></argument>, <argument><expr><call><name>STACK_OF</name><argument_list>(<argument><expr><name>X509</name></expr></argument>)</argument_list></call><operator>*</operator> <name>extra_certs</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>X509_STORE</name><modifier>*</modifier></type> <name>empty_store</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>X509_STORE_CTX</name><modifier>*</modifier></type> <name>vrfy_ctx</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>out_cert</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>empty_store</name> <operator>=</operator> <call><name>X509_STORE_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>LDNS_STATUS_SSL_ERR</name></expr>;</expr_stmt>
<expr_stmt><expr><name>vrfy_ctx</name> <operator>=</operator> <call><name>X509_STORE_CTX_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>vrfy_ctx</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>exit_free_empty_store</name>;</goto>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>X509_STORE_CTX_init</name><argument_list>(<argument><expr><name>vrfy_ctx</name></expr></argument>, <argument><expr><name>empty_store</name></expr></argument>,
<argument><expr><name>cert</name></expr></argument>, <argument><expr><name>extra_certs</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>exit_free_vrfy_ctx</name>;</goto>

</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>X509_verify_cert</name><argument_list>(<argument><expr><name>vrfy_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>X509_STORE_CTX_get_error</name><argument_list>(<argument><expr><name>vrfy_ctx</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN</name> <operator>||</operator>
<call><name>X509_STORE_CTX_get_error</name><argument_list>(<argument><expr><name>vrfy_ctx</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>out_cert</name> <operator>=</operator> <call><name>X509_STORE_CTX_get_current_cert</name><argument_list>( <argument><expr><name>vrfy_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>LDNS_STATUS_OK</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>LDNS_STATUS_DANE_PKIX_NO_SELF_SIGNED_TRUST_ANCHOR</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<label><name>exit_free_vrfy_ctx</name>:</label>
<expr_stmt><expr><call><name>X509_STORE_CTX_free</name><argument_list>(<argument><expr><name>vrfy_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>exit_free_empty_store</name>:</label>
<expr_stmt><expr><call><name>X509_STORE_free</name><argument_list>(<argument><expr><name>empty_store</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>ldns_status</name></type>
<name>ldns_dane_select_certificate</name><argument_list>(<argument><expr><name>X509</name><operator>*</operator><operator>*</operator> <name>selected_cert</name></expr></argument>,
<argument><expr><name>X509</name><operator>*</operator> <name>cert</name></expr></argument>, <argument><expr><call><name>STACK_OF</name><argument_list>(<argument><expr><name>X509</name></expr></argument>)</argument_list></call><operator>*</operator> <name>extra_certs</name></expr></argument>,
<argument><expr><name>X509_STORE</name><operator>*</operator> <name>pkix_validation_store</name></expr></argument>,
<argument><expr><name>ldns_tlsa_certificate_usage</name> <name>cert_usage</name></expr></argument>, <argument><expr><name>int</name> <name>offset</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>s</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>STACK_OF</name><argument_list>(<argument><expr><name>X509</name></expr></argument>)</argument_list></call><operator>*</operator> <name>pkix_validation_chain</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>selected_cert</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>cert</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><name>pkix_validation_store</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>cert_usage</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LDNS_TLSA_USAGE_CA_CONSTRAINT</name></expr>:</case>

<expr_stmt><expr><name>cert_usage</name> <operator>=</operator> <name>LDNS_TLSA_USAGE_TRUST_ANCHOR_ASSERTION</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LDNS_TLSA_USAGE_SERVICE_CERTIFICATE_CONSTRAINT</name></expr>:</case>

<expr_stmt><expr><name>cert_usage</name> <operator>=</operator> <name>LDNS_TLSA_USAGE_DOMAIN_ISSUED_CERTIFICATE</name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>



<switch>switch <condition>(<expr><name>cert_usage</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LDNS_TLSA_USAGE_CA_CONSTRAINT</name></expr>:</case>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>ldns_dane_pkix_validate_and_get_chain</name><argument_list>(
<argument><expr><operator>&amp;</operator><name>pkix_validation_chain</name></expr></argument>,
<argument><expr><name>cert</name></expr></argument>, <argument><expr><name>extra_certs</name></expr></argument>,
<argument><expr><name>pkix_validation_store</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>pkix_validation_chain</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>ldns_dane_get_nth_cert_from_validation_chain</name><argument_list>(
<argument><expr><name>selected_cert</name></expr></argument>, <argument><expr><name>pkix_validation_chain</name></expr></argument>,
<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>sk_X509_pop_free</name><argument_list>(<argument><expr><name>pkix_validation_chain</name></expr></argument>, <argument><expr><name>X509_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>s</name></expr>;</return>
<break>break;</break>


<case>case <expr><name>LDNS_TLSA_USAGE_SERVICE_CERTIFICATE_CONSTRAINT</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>selected_cert</name> <operator>=</operator> <name>cert</name></expr>;</expr_stmt>
<return>return <expr><call><name>ldns_dane_pkix_validate</name><argument_list>(<argument><expr><name>cert</name></expr></argument>, <argument><expr><name>extra_certs</name></expr></argument>,
<argument><expr><name>pkix_validation_store</name></expr></argument>)</argument_list></call></expr>;</return>
<break>break;</break>


<case>case <expr><name>LDNS_TLSA_USAGE_TRUST_ANCHOR_ASSERTION</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>ldns_dane_pkix_get_last_self_signed</name><argument_list>(
<argument><expr><name>selected_cert</name></expr></argument>, <argument><expr><name>cert</name></expr></argument>, <argument><expr><name>extra_certs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>ldns_dane_pkix_get_chain</name><argument_list>(
<argument><expr><operator>&amp;</operator><name>pkix_validation_chain</name></expr></argument>,
<argument><expr><name>cert</name></expr></argument>, <argument><expr><name>extra_certs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator>
<call><name>ldns_dane_get_nth_cert_from_validation_chain</name><argument_list>(
<argument><expr><name>selected_cert</name></expr></argument>, <argument><expr><name>pkix_validation_chain</name></expr></argument>,
<argument><expr><name>offset</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator> <name>pkix_validation_chain</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>sk_X509_pop_free</name><argument_list>(<argument><expr><name>pkix_validation_chain</name></expr></argument>, <argument><expr><name>X509_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></else></if_stmt>
<break>break;</break>


<case>case <expr><name>LDNS_TLSA_USAGE_DOMAIN_ISSUED_CERTIFICATE</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>selected_cert</name> <operator>=</operator> <name>cert</name></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_OK</name></expr>;</return>
<break>break;</break>

<default>default:</default>
<return>return <expr><name>LDNS_STATUS_DANE_UNKNOWN_CERTIFICATE_USAGE</name></expr>;</return>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></decl></decl_stmt>


<function><type><name>ldns_status</name></type>
<name>ldns_dane_create_tlsa_rr</name><parameter_list>(<parameter><decl><type><name>ldns_rr</name><modifier>*</modifier><modifier>*</modifier></type> <name>tlsa</name></decl></parameter>,
<parameter><decl><type><name>ldns_tlsa_certificate_usage</name></type> <name>certificate_usage</name></decl></parameter>,
<parameter><decl><type><name>ldns_tlsa_selector</name></type> <name>selector</name></decl></parameter>,
<parameter><decl><type><name>ldns_tlsa_matching_type</name></type> <name>matching_type</name></decl></parameter>,
<parameter><decl><type><name>X509</name><modifier>*</modifier></type> <name>cert</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_rdf</name><modifier>*</modifier></type> <name>rdf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>tlsa</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>cert</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><operator>*</operator><name>tlsa</name> <operator>=</operator> <call><name>ldns_rr_new_frm_type</name><argument_list>(<argument><expr><name>LDNS_RR_TYPE_TLSA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>tlsa</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rdf</name> <operator>=</operator> <call><name>ldns_native2rdf_int8</name><argument_list>(<argument><expr><name>LDNS_RDF_TYPE_INT8</name></expr></argument>,
<argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name>certificate_usage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rdf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>memerror</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ldns_rr_set_rdf</name><argument_list>(<argument><expr><operator>*</operator><name>tlsa</name></expr></argument>, <argument><expr><name>rdf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rdf</name> <operator>=</operator> <call><name>ldns_native2rdf_int8</name><argument_list>(<argument><expr><name>LDNS_RDF_TYPE_INT8</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rdf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>memerror</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ldns_rr_set_rdf</name><argument_list>(<argument><expr><operator>*</operator><name>tlsa</name></expr></argument>, <argument><expr><name>rdf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rdf</name> <operator>=</operator> <call><name>ldns_native2rdf_int8</name><argument_list>(<argument><expr><name>LDNS_RDF_TYPE_INT8</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name>matching_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rdf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>memerror</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ldns_rr_set_rdf</name><argument_list>(<argument><expr><operator>*</operator><name>tlsa</name></expr></argument>, <argument><expr><name>rdf</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>ldns_dane_cert2rdf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rdf</name></expr></argument>, <argument><expr><name>cert</name></expr></argument>, <argument><expr><name>selector</name></expr></argument>, <argument><expr><name>matching_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ldns_rr_set_rdf</name><argument_list>(<argument><expr><operator>*</operator><name>tlsa</name></expr></argument>, <argument><expr><name>rdf</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_rr_free</name><argument_list>(<argument><expr><operator>*</operator><name>tlsa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>tlsa</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>s</name></expr>;</return>

<label><name>memerror</name>:</label>
<expr_stmt><expr><call><name>ldns_rr_free</name><argument_list>(<argument><expr><operator>*</operator><name>tlsa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>tlsa</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return>
</block_content>}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_DANE_VERIFY</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><specifier>static</specifier> <name>ldns_rr_list</name><modifier>*</modifier></type>
<name>ldns_dane_filter_unusable_records</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_rr_list</name><modifier>*</modifier></type> <name>tlsas</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr_list</name><modifier>*</modifier></type> <name>r</name> <init>= <expr><call><name>ldns_rr_list_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr</name><modifier>*</modifier></type> <name>tlsa_rr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>r</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>tlsas</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>tlsa_rr</name> <operator>=</operator> <call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>tlsas</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name>tlsa_rr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LDNS_RR_TYPE_TLSA</name> <operator>&amp;&amp;</operator>
<call><name>ldns_rr_rd_count</name><argument_list>(<argument><expr><name>tlsa_rr</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator>
<call><name>ldns_rdf2native_int8</name><argument_list>(<argument><expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>tlsa_rr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator>
<call><name>ldns_rdf2native_int8</name><argument_list>(<argument><expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>tlsa_rr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
<call><name>ldns_rdf2native_int8</name><argument_list>(<argument><expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>tlsa_rr</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>ldns_rr_list_push_rr</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>tlsa_rr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_rr_list_free</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_DANE_TA_USAGE</name></expr></argument>)</argument_list></call></expr></cpp:if>


<function><type><specifier>static</specifier> <name>ldns_status</name></type>
<name>ldns_dane_match_cert_with_data</name><parameter_list>(<parameter><decl><type><name>X509</name><modifier>*</modifier></type> <name>cert</name></decl></parameter>, <parameter><decl><type><name>ldns_tlsa_selector</name></type> <name>selector</name></decl></parameter>,
<parameter><decl><type><name>ldns_tlsa_matching_type</name></type> <name>matching_type</name></decl></parameter>, <parameter><decl><type><name>ldns_rdf</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rdf</name><modifier>*</modifier></type> <name>match_data</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>ldns_dane_cert2rdf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>match_data</name></expr></argument>, <argument><expr><name>cert</name></expr></argument>, <argument><expr><name>selector</name></expr></argument>, <argument><expr><name>matching_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ldns_rdf_compare</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>match_data</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>LDNS_STATUS_DANE_TLSA_DID_NOT_MATCH</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_rdf_free</name><argument_list>(<argument><expr><name>match_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>






<decl_stmt><decl><type><specifier>static</specifier> <name>ldns_status</name></type>
<name>ldns_dane_match_any_cert_with_data</name><argument_list>(<argument><expr><call><name>STACK_OF</name><argument_list>(<argument><expr><name>X509</name></expr></argument>)</argument_list></call><operator>*</operator> <name>chain</name></expr></argument>,
<argument><expr><name>ldns_tlsa_selector</name> <name>selector</name></expr></argument>,
<argument><expr><name>ldns_tlsa_matching_type</name> <name>matching_type</name></expr></argument>,
<argument><expr><name>ldns_rdf</name><operator>*</operator> <name>data</name></expr></argument>, <argument><expr><name>bool</name> <name>ca</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>s</name> <init>= <expr><name>LDNS_STATUS_DANE_TLSA_DID_NOT_MATCH</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>X509</name><modifier>*</modifier></type> <name>cert</name></decl>;</decl_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>sk_X509_num</name><argument_list>(<argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>cert</name> <operator>=</operator> <call><name>sk_X509_pop</name><argument_list>(<argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>cert</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>LDNS_STATUS_SSL_ERR</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>ldns_dane_match_cert_with_data</name><argument_list>(<argument><expr><name>cert</name></expr></argument>,
<argument><expr><name>selector</name></expr></argument>, <argument><expr><name>matching_type</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ca</name> <operator>&amp;&amp;</operator> <name>s</name> <operator>==</operator> <name>LDNS_STATUS_OK</name> <operator>&amp;&amp;</operator> <operator>!</operator> <call><name>X509_check_ca</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>LDNS_STATUS_DANE_NON_CA_CERTIFICATE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>X509_free</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>LDNS_STATUS_DANE_TLSA_DID_NOT_MATCH</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>



</block_content>}</block></for>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_DANE_VERIFY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>ldns_status</name></type>
<name>ldns_dane_verify_rr</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ldns_rr</name><operator>*</operator> <name>tlsa_rr</name></expr></argument>,
<argument><expr><name>X509</name><operator>*</operator> <name>cert</name></expr></argument>, <argument><expr><call><name>STACK_OF</name><argument_list>(<argument><expr><name>X509</name></expr></argument>)</argument_list></call><operator>*</operator> <name>extra_certs</name></expr></argument>,
<argument><expr><name>X509_STORE</name><operator>*</operator> <name>pkix_validation_store</name></expr></argument>)</argument_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_DANE_TA_USAGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>SSL_CTX</name> <modifier>*</modifier></type><name>ssl_ctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SSL</name> <modifier>*</modifier></type><name>ssl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>X509_STORE_CTX</name> <modifier>*</modifier></type><name>store_ctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>STACK_OF</name><argument_list>(<argument><expr><name>X509</name></expr></argument>)</argument_list></call><operator>*</operator> <name>pkix_validation_chain</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>s</name> <init>= <expr><name>LDNS_STATUS_OK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ldns_tlsa_certificate_usage</name></type> <name>usage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_tlsa_selector</name></type> <name>selector</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_tlsa_matching_type</name></type> <name>mtype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rdf</name><modifier>*</modifier></type> <name>data</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>tlsa_rr</name> <operator>||</operator> <call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name>tlsa_rr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LDNS_RR_TYPE_TLSA</name> <operator>||</operator>
<call><name>ldns_rr_rd_count</name><argument_list>(<argument><expr><name>tlsa_rr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">4</literal> <operator>||</operator>
<call><name>ldns_rdf2native_int8</name><argument_list>(<argument><expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>tlsa_rr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">3</literal> <operator>||</operator>
<call><name>ldns_rdf2native_int8</name><argument_list>(<argument><expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>tlsa_rr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator>
<call><name>ldns_rdf2native_int8</name><argument_list>(<argument><expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>tlsa_rr</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal></expr> )</condition> <block>{<block_content>


<return>return <expr><call><name>ldns_dane_pkix_validate</name><argument_list>(<argument><expr><name>cert</name></expr></argument>, <argument><expr><name>extra_certs</name></expr></argument>,
<argument><expr><name>pkix_validation_store</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>usage</name> <operator>=</operator> <call><name>ldns_rdf2native_int8</name><argument_list>(<argument><expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>tlsa_rr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>selector</name> <operator>=</operator> <call><name>ldns_rdf2native_int8</name><argument_list>(<argument><expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>tlsa_rr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mtype</name> <operator>=</operator> <call><name>ldns_rdf2native_int8</name><argument_list>(<argument><expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>tlsa_rr</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>tlsa_rr</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_DANE_TA_USAGE</name></expr></argument>)</argument_list></call></expr></cpp:if>









<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ssl_ctx</name> <operator>=</operator> <call><name>SSL_CTX_new</name><argument_list>(<argument><expr><call><name>TLS_client_method</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>LDNS_STATUS_MEM_ERR</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>SSL_CTX_dane_enable</name><argument_list>(<argument><expr><name>ssl_ctx</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>LDNS_STATUS_SSL_ERR</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>SSL_CTX_dane_set_flags</name><argument_list>(
<argument><expr><name>ssl_ctx</name></expr></argument>, <argument><expr><name>DANE_FLAG_NO_DANE_EE_NAMECHECKS</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><operator>!</operator><operator>(</operator><name>ssl</name> <operator>=</operator> <call><name>SSL_new</name><argument_list>(<argument><expr><name>ssl_ctx</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>LDNS_STATUS_MEM_ERR</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>SSL_set_connect_state</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><operator>(</operator><call><name>SSL_dane_enable</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>LDNS_STATUS_SSL_ERR</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>SSL_dane_tlsa_add</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>usage</name></expr></argument>, <argument><expr><name>selector</name></expr></argument>, <argument><expr><name>mtype</name></expr></argument>,
<argument><expr><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>LDNS_STATUS_SSL_ERR</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>store_ctx</name> <operator>=</operator> <call><name>X509_STORE_CTX_new</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>LDNS_STATUS_MEM_ERR</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>X509_STORE_CTX_init</name><argument_list>(<argument><expr><name>store_ctx</name></expr></argument>, <argument><expr><name>pkix_validation_store</name></expr></argument>, <argument><expr><name>cert</name></expr></argument>, <argument><expr><name>extra_certs</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>LDNS_STATUS_SSL_ERR</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>X509_STORE_CTX_set_default</name><argument_list>(<argument><expr><name>store_ctx</name></expr></argument>,
<argument><expr><ternary><condition><expr><call><name>SSL_is_server</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"ssl_client"</literal></expr> </then><else>: <expr><literal type="string">"ssl_server"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>X509_VERIFY_PARAM_set1</name><argument_list>(<argument><expr><call><name>X509_STORE_CTX_get0_param</name><argument_list>(<argument><expr><name>store_ctx</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>SSL_get0_param</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>X509_STORE_CTX_set0_dane</name><argument_list>(<argument><expr><name>store_ctx</name></expr></argument>, <argument><expr><call><name>SSL_get0_dane</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>SSL_get_verify_callback</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>X509_STORE_CTX_set_verify_cb</name><argument_list>(<argument><expr><name>store_ctx</name></expr></argument>, <argument><expr><call><name>SSL_get_verify_callback</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>X509_verify_cert</name><argument_list>(<argument><expr><name>store_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>X509_STORE_CTX_get_error</name><argument_list>(<argument><expr><name>store_ctx</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>X509_V_ERR_DANE_NO_MATCH</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>LDNS_STATUS_DANE_TLSA_DID_NOT_MATCH</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>LDNS_STATUS_DANE_PKIX_DID_NOT_VALIDATE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>X509_STORE_CTX_cleanup</name><argument_list>(<argument><expr><name>store_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>store_ctx</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>X509_STORE_CTX_free</name><argument_list>(<argument><expr><name>store_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ssl</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SSL_free</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ssl_ctx</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SSL_CTX_free</name><argument_list>(<argument><expr><name>ssl_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>s</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<switch>switch <condition>(<expr><name>usage</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LDNS_TLSA_USAGE_CA_CONSTRAINT</name></expr>:</case>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>ldns_dane_pkix_validate_and_get_chain</name><argument_list>(
<argument><expr><operator>&amp;</operator><name>pkix_validation_chain</name></expr></argument>,
<argument><expr><name>cert</name></expr></argument>, <argument><expr><name>extra_certs</name></expr></argument>,
<argument><expr><name>pkix_validation_store</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>pkix_validation_chain</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>LDNS_STATUS_DANE_PKIX_DID_NOT_VALIDATE</name></expr>)</condition> <block>{<block_content>








<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>ldns_dane_match_any_cert_with_data</name><argument_list>(
<argument><expr><name>pkix_validation_chain</name></expr></argument>,
<argument><expr><name>selector</name></expr></argument>, <argument><expr><name>mtype</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name>s</name> <operator>=</operator> <name>LDNS_STATUS_DANE_PKIX_DID_NOT_VALIDATE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>s</name> <operator>==</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>ldns_dane_match_any_cert_with_data</name><argument_list>(
<argument><expr><name>pkix_validation_chain</name></expr></argument>,
<argument><expr><name>selector</name></expr></argument>, <argument><expr><name>mtype</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>sk_X509_pop_free</name><argument_list>(<argument><expr><name>pkix_validation_chain</name></expr></argument>, <argument><expr><name>X509_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>s</name></expr>;</return>
<break>break;</break>

<case>case <expr><name>LDNS_TLSA_USAGE_SERVICE_CERTIFICATE_CONSTRAINT</name></expr>:</case>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>ldns_dane_match_cert_with_data</name><argument_list>(<argument><expr><name>cert</name></expr></argument>,
<argument><expr><name>selector</name></expr></argument>, <argument><expr><name>mtype</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>ldns_dane_pkix_validate</name><argument_list>(<argument><expr><name>cert</name></expr></argument>, <argument><expr><name>extra_certs</name></expr></argument>,
<argument><expr><name>pkix_validation_store</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>s</name></expr>;</return>
<break>break;</break>

<case>case <expr><name>LDNS_TLSA_USAGE_TRUST_ANCHOR_ASSERTION</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
s = ldns_dane_pkix_get_chain(&amp;pkix_validation_chain,
cert, extra_certs);

if (s == LDNS_STATUS_OK) {
s = ldns_dane_match_any_cert_with_data(
pkix_validation_chain,
selector, mtype, data, false);

} else if (! pkix_validation_chain) {
return s;
}
sk_X509_pop_free(pkix_validation_chain, X509_free);
return s;
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name>LDNS_STATUS_DANE_NEED_OPENSSL_GE_1_1_FOR_DANE_TA</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>

<case>case <expr><name>LDNS_TLSA_USAGE_DOMAIN_ISSUED_CERTIFICATE</name></expr>:</case>
<return>return <expr><call><name>ldns_dane_match_cert_with_data</name><argument_list>(<argument><expr><name>cert</name></expr></argument>,
<argument><expr><name>selector</name></expr></argument>, <argument><expr><name>mtype</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
<break>break;</break>

<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>LDNS_STATUS_DANE_UNKNOWN_CERTIFICATE_USAGE</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>ldns_status</name></type>
<name>ldns_dane_verify</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ldns_rr_list</name><operator>*</operator> <name>tlsas</name></expr></argument>,
<argument><expr><name>X509</name><operator>*</operator> <name>cert</name></expr></argument>, <argument><expr><call><name>STACK_OF</name><argument_list>(<argument><expr><name>X509</name></expr></argument>)</argument_list></call><operator>*</operator> <name>extra_certs</name></expr></argument>,
<argument><expr><name>X509_STORE</name><operator>*</operator> <name>pkix_validation_store</name></expr></argument>)</argument_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_DANE_TA_USAGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>SSL_CTX</name> <modifier>*</modifier></type><name>ssl_ctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>basename_rdf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>basename</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SSL</name> <modifier>*</modifier></type><name>ssl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>X509_STORE_CTX</name> <modifier>*</modifier></type><name>store_ctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>ps</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr</name><modifier>*</modifier></type> <name>tlsa_rr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type><name>usable_tlsas</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>s</name> <init>= <expr><name>LDNS_STATUS_OK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>cert</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>tlsas</name> <operator>||</operator> <call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>tlsas</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>


<return>return <expr><call><name>ldns_dane_pkix_validate</name><argument_list>(<argument><expr><name>cert</name></expr></argument>, <argument><expr><name>extra_certs</name></expr></argument>,
<argument><expr><name>pkix_validation_store</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_DANE_TA_USAGE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <literal type="number">0</literal></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>basename_rdf</name> <operator>=</operator> <call><name>ldns_dname_clone_from</name><argument_list>(
<argument><expr><call><name>ldns_rr_list_owner</name><argument_list>(<argument><expr><name>tlsas</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>LDNS_STATUS_ERR</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>basename</name> <operator>=</operator> <call><name>ldns_rdf2str</name><argument_list>(<argument><expr><name>basename_rdf</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>LDNS_STATUS_MEM_ERR</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>basename</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>basename</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>basename</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>LDNS_STATUS_ERR</name></expr>;</expr_stmt></block_content></block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>usable_tlsas</name> <operator>=</operator> <call><name>ldns_dane_filter_unusable_records</name><argument_list>(<argument><expr><name>tlsas</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>usable_tlsas</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>ldns_rr_list_free</name><argument_list>(<argument><expr><name>usable_tlsas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ldns_dane_pkix_validate</name><argument_list>(<argument><expr><name>cert</name></expr></argument>, <argument><expr><name>extra_certs</name></expr></argument>,
<argument><expr><name>pkix_validation_store</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_DANE_TA_USAGE</name></expr></argument>)</argument_list></call></expr></cpp:if>









<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ssl_ctx</name> <operator>=</operator> <call><name>SSL_CTX_new</name><argument_list>(<argument><expr><call><name>TLS_client_method</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>LDNS_STATUS_MEM_ERR</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>SSL_CTX_dane_enable</name><argument_list>(<argument><expr><name>ssl_ctx</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>LDNS_STATUS_SSL_ERR</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>SSL_CTX_dane_set_flags</name><argument_list>(
<argument><expr><name>ssl_ctx</name></expr></argument>, <argument><expr><name>DANE_FLAG_NO_DANE_EE_NAMECHECKS</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><operator>!</operator><operator>(</operator><name>ssl</name> <operator>=</operator> <call><name>SSL_new</name><argument_list>(<argument><expr><name>ssl_ctx</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>LDNS_STATUS_MEM_ERR</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>SSL_set_connect_state</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr><operator>,</operator>
<expr><operator>(</operator><call><name>SSL_dane_enable</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>basename</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>LDNS_STATUS_SSL_ERR</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>usable_tlsas</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ldns_tlsa_certificate_usage</name></type> <name>usage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_tlsa_selector</name></type> <name>selector</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_tlsa_matching_type</name></type> <name>mtype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rdf</name><modifier>*</modifier></type> <name>data</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tlsa_rr</name> <operator>=</operator> <call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>usable_tlsas</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>usage</name> <operator>=</operator> <call><name>ldns_rdf2native_int8</name><argument_list>(<argument><expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>tlsa_rr</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>selector</name><operator>=</operator> <call><name>ldns_rdf2native_int8</name><argument_list>(<argument><expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>tlsa_rr</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mtype</name> <operator>=</operator> <call><name>ldns_rdf2native_int8</name><argument_list>(<argument><expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>tlsa_rr</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>tlsa_rr</name></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SSL_dane_tlsa_add</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>usage</name></expr></argument>, <argument><expr><name>selector</name></expr></argument>, <argument><expr><name>mtype</name></expr></argument>,
<argument><expr><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>LDNS_STATUS_SSL_ERR</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>store_ctx</name> <operator>=</operator> <call><name>X509_STORE_CTX_new</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>LDNS_STATUS_MEM_ERR</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>X509_STORE_CTX_init</name><argument_list>(<argument><expr><name>store_ctx</name></expr></argument>, <argument><expr><name>pkix_validation_store</name></expr></argument>, <argument><expr><name>cert</name></expr></argument>, <argument><expr><name>extra_certs</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>LDNS_STATUS_SSL_ERR</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>X509_STORE_CTX_set_default</name><argument_list>(<argument><expr><name>store_ctx</name></expr></argument>,
<argument><expr><ternary><condition><expr><call><name>SSL_is_server</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"ssl_client"</literal></expr> </then><else>: <expr><literal type="string">"ssl_server"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>X509_VERIFY_PARAM_set1</name><argument_list>(<argument><expr><call><name>X509_STORE_CTX_get0_param</name><argument_list>(<argument><expr><name>store_ctx</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>SSL_get0_param</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>X509_STORE_CTX_set0_dane</name><argument_list>(<argument><expr><name>store_ctx</name></expr></argument>, <argument><expr><call><name>SSL_get0_dane</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>SSL_get_verify_callback</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>X509_STORE_CTX_set_verify_cb</name><argument_list>(<argument><expr><name>store_ctx</name></expr></argument>, <argument><expr><call><name>SSL_get_verify_callback</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>X509_verify_cert</name><argument_list>(<argument><expr><name>store_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>X509_STORE_CTX_get_error</name><argument_list>(<argument><expr><name>store_ctx</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>X509_V_ERR_DANE_NO_MATCH</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>LDNS_STATUS_DANE_TLSA_DID_NOT_MATCH</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name>LDNS_STATUS_DANE_PKIX_DID_NOT_VALIDATE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>X509_STORE_CTX_cleanup</name><argument_list>(<argument><expr><name>store_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>store_ctx</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>X509_STORE_CTX_free</name><argument_list>(<argument><expr><name>store_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ssl</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SSL_free</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ssl_ctx</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>SSL_CTX_free</name><argument_list>(<argument><expr><name>ssl_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>basename</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>basename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>basename_rdf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>usable_tlsas</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>tlsa_rr</name> <operator>=</operator> <call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>usable_tlsas</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ps</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>ldns_dane_verify_rr</name><argument_list>(<argument><expr><name>tlsa_rr</name></expr></argument>, <argument><expr><name>cert</name></expr></argument>, <argument><expr><name>extra_certs</name></expr></argument>,
<argument><expr><name>pkix_validation_store</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>LDNS_STATUS_DANE_TLSA_DID_NOT_MATCH</name> <operator>&amp;&amp;</operator>
<name>s</name> <operator>!=</operator> <name>LDNS_STATUS_DANE_PKIX_DID_NOT_VALIDATE</name> <operator>&amp;&amp;</operator>
<name>s</name> <operator>!=</operator> <name>LDNS_STATUS_DANE_NEED_OPENSSL_GE_1_1_FOR_DANE_TA</name></expr>)</condition> <block>{<block_content>





<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>s</name> <operator>&gt;</operator> <name>ps</name></expr> ?</condition><then> <expr><name>s</name></expr> </then><else>: <expr><name>ps</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>



</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>ldns_rr_list_free</name><argument_list>(<argument><expr><name>usable_tlsas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
