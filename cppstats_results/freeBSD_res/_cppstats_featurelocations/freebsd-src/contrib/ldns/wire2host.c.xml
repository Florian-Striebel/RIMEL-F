<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/ldns/wire2host.c">















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ldns/config.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ldns/ldns.h&gt;</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>































<function><type><name>ldns_status</name></type>
<name>ldns_wire2dname</name><parameter_list>(<parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier><modifier>*</modifier></type><name>dname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>wire</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>max</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>label_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>pointer_target</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>pointer_target_buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>dname_pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>uncompressed_length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>compression_pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>tmp_dname</name><index>[<expr><name>LDNS_MAX_DOMAINLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>pointer_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_WIRE_RDATA_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pos</name> <operator>&gt;=</operator> <name>max</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_PACKET_OVERFLOW</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>label_size</name> <operator>=</operator> <name><name>wire</name><index>[<expr><operator>*</operator><name>pos</name></expr>]</index></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>label_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name>label_size</name> <operator>&gt;=</operator> <literal type="number">192</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>compression_pos</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>compression_pos</name> <operator>=</operator> <operator>*</operator><name>pos</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pointer_count</name><operator>++</operator></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pos</name> <operator>+</operator> <literal type="number">2</literal> <operator>&gt;</operator> <name>max</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_PACKET_OVERFLOW</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>pointer_target_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>wire</name><index>[<expr><operator>*</operator><name>pos</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">63</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pointer_target_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>wire</name><index>[<expr><operator>*</operator><name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>pointer_target</name> <operator>=</operator> <call><name>ldns_read_uint16</name><argument_list>(<argument><expr><name>pointer_target_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pointer_target</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_INVALID_POINTER</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pointer_target</name> <operator>&gt;=</operator> <name>max</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_INVALID_POINTER</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pointer_count</name> <operator>&gt;</operator> <name>LDNS_MAX_POINTERS</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_INVALID_POINTER</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>pos</name> <operator>=</operator> <name>pointer_target</name></expr>;</expr_stmt>
<expr_stmt><expr><name>label_size</name> <operator>=</operator> <name><name>wire</name><index>[<expr><operator>*</operator><name>pos</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if<condition>(<expr><name>label_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>label_size</name> <operator>&gt;</operator> <name>LDNS_MAX_LABELLEN</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_LABEL_OVERFLOW</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pos</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>label_size</name> <operator>&gt;</operator> <name>max</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_LABEL_OVERFLOW</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>dname_pos</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>LDNS_MAX_DOMAINLEN</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_DOMAINNAME_OVERFLOW</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>tmp_dname</name><index>[<expr><name>dname_pos</name></expr>]</index></name> <operator>=</operator> <name>label_size</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>label_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dname_pos</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>pos</name> <operator>=</operator> <operator>*</operator><name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dname_pos</name> <operator>+</operator> <name>label_size</name> <operator>&gt;</operator> <name>LDNS_MAX_DOMAINLEN</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_DOMAINNAME_OVERFLOW</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmp_dname</name><index>[<expr><name>dname_pos</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>wire</name><index>[<expr><operator>*</operator><name>pos</name></expr>]</index></name></expr></argument>, <argument><expr><name>label_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>uncompressed_length</name> <operator>+=</operator> <name>label_size</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dname_pos</name> <operator>+=</operator> <name>label_size</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pos</name> <operator>=</operator> <operator>*</operator><name>pos</name> <operator>+</operator> <name>label_size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pos</name> <operator>&lt;</operator> <name>max</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>label_size</name> <operator>=</operator> <name><name>wire</name><index>[<expr><operator>*</operator><name>pos</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>compression_pos</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pos</name> <operator>=</operator> <name>compression_pos</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>pos</name> <operator>=</operator> <operator>*</operator><name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dname_pos</name> <operator>&gt;=</operator> <name>LDNS_MAX_DOMAINLEN</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_DOMAINNAME_OVERFLOW</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>tmp_dname</name><index>[<expr><name>dname_pos</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>dname_pos</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dname</name> <operator>=</operator> <call><name>ldns_rdf_new_frm_data</name><argument_list>(<argument><expr><name>LDNS_RDF_TYPE_DNAME</name></expr></argument>,
<argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator> <name>dname_pos</name></expr></argument>, <argument><expr><name>tmp_dname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>dname</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>LDNS_STATUS_OK</name></expr>;</return>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_STATUS_CHECK_RETURN</name><parameter_list>(<parameter><type><name>st</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{if (st != LDNS_STATUS_OK) { return st; }}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDNS_STATUS_CHECK_GOTO</name><parameter_list>(<parameter><type><name>st</name></type></parameter>, <parameter><type><name>label</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{if (st != LDNS_STATUS_OK) { goto label; }}</cpp:value></cpp:define>

<function><type><name>ldns_status</name></type>
<name>ldns_wire2rdf</name><parameter_list>(<parameter><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>rr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>wire</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>max</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>cur_rdf_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>rdf_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>rd_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>cur_rdf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rdf_type</name></type> <name>cur_rdf_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ldns_rr_descriptor</name> <modifier>*</modifier></type><name>descriptor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>status</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>rr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>descriptor</name> <operator>=</operator> <call><name>ldns_rr_descript</name><argument_list>(<argument><expr><call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pos</name> <operator>+</operator> <literal type="number">2</literal> <operator>&gt;</operator> <name>max</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_PACKET_OVERFLOW</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rd_length</name> <operator>=</operator> <call><name>ldns_read_uint16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wire</name><index>[<expr><operator>*</operator><name>pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pos</name> <operator>=</operator> <operator>*</operator><name>pos</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pos</name> <operator>+</operator> <name>rd_length</name> <operator>&gt;</operator> <name>max</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_PACKET_OVERFLOW</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <operator>*</operator><name>pos</name> <operator>+</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>rd_length</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rdf_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>pos</name> <operator>&lt;</operator> <name>end</name> <operator>&amp;&amp;</operator>
<name>rdf_index</name> <operator>&lt;</operator> <call><name>ldns_rr_descriptor_maximum</name><argument_list>(<argument><expr><name>descriptor</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cur_rdf_length</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cur_rdf_type</name> <operator>=</operator> <call><name>ldns_rr_descriptor_field_type</name><argument_list>(
<argument><expr><name>descriptor</name></expr></argument>, <argument><expr><name>rdf_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<switch>switch <condition>(<expr><name>cur_rdf_type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LDNS_RDF_TYPE_DNAME</name></expr>:</case>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_wire2dname</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur_rdf</name></expr></argument>, <argument><expr><name>wire</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_STATUS_CHECK_RETURN</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_CLASS</name></expr>:</case>
<case>case <expr><name>LDNS_RDF_TYPE_ALG</name></expr>:</case>
<case>case <expr><name>LDNS_RDF_TYPE_CERTIFICATE_USAGE</name></expr>:</case>
<case>case <expr><name>LDNS_RDF_TYPE_SELECTOR</name></expr>:</case>
<case>case <expr><name>LDNS_RDF_TYPE_MATCHING_TYPE</name></expr>:</case>
<case>case <expr><name>LDNS_RDF_TYPE_INT8</name></expr>:</case>
<expr_stmt><expr><name>cur_rdf_length</name> <operator>=</operator> <name>LDNS_RDF_SIZE_BYTE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_TYPE</name></expr>:</case>
<case>case <expr><name>LDNS_RDF_TYPE_INT16</name></expr>:</case>
<case>case <expr><name>LDNS_RDF_TYPE_CERT_ALG</name></expr>:</case>
<expr_stmt><expr><name>cur_rdf_length</name> <operator>=</operator> <name>LDNS_RDF_SIZE_WORD</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_TIME</name></expr>:</case>
<case>case <expr><name>LDNS_RDF_TYPE_INT32</name></expr>:</case>
<case>case <expr><name>LDNS_RDF_TYPE_A</name></expr>:</case>
<case>case <expr><name>LDNS_RDF_TYPE_PERIOD</name></expr>:</case>
<expr_stmt><expr><name>cur_rdf_length</name> <operator>=</operator> <name>LDNS_RDF_SIZE_DOUBLEWORD</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_TSIGTIME</name></expr>:</case>
<case>case <expr><name>LDNS_RDF_TYPE_EUI48</name></expr>:</case>
<expr_stmt><expr><name>cur_rdf_length</name> <operator>=</operator> <name>LDNS_RDF_SIZE_6BYTES</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_ILNP64</name></expr>:</case>
<case>case <expr><name>LDNS_RDF_TYPE_EUI64</name></expr>:</case>
<expr_stmt><expr><name>cur_rdf_length</name> <operator>=</operator> <name>LDNS_RDF_SIZE_8BYTES</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_AAAA</name></expr>:</case>
<expr_stmt><expr><name>cur_rdf_length</name> <operator>=</operator> <name>LDNS_RDF_SIZE_16BYTES</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_STR</name></expr>:</case>
<case>case <expr><name>LDNS_RDF_TYPE_NSEC3_SALT</name></expr>:</case>
<case>case <expr><name>LDNS_RDF_TYPE_TAG</name></expr>:</case>




<expr_stmt><expr><name>cur_rdf_length</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator> <name><name>wire</name><index>[<expr><operator>*</operator><name>pos</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LDNS_RDF_TYPE_INT16_DATA</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pos</name> <operator>+</operator> <literal type="number">2</literal> <operator>&gt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_PACKET_OVERFLOW</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>cur_rdf_length</name> <operator>=</operator>
<operator>(</operator><name>size_t</name><operator>)</operator> <call><name>ldns_read_uint16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wire</name><index>[<expr><operator>*</operator><name>pos</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_HIP</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pos</name> <operator>+</operator> <literal type="number">4</literal> <operator>&gt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_PACKET_OVERFLOW</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>cur_rdf_length</name> <operator>=</operator>
<operator>(</operator><name>size_t</name><operator>)</operator> <name><name>wire</name><index>[<expr><operator>*</operator><name>pos</name></expr>]</index></name> <operator>+</operator>
<operator>(</operator><name>size_t</name><operator>)</operator> <call><name>ldns_read_uint16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wire</name><index>[<expr><operator>*</operator><name>pos</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_B32_EXT</name></expr>:</case>
<case>case <expr><name>LDNS_RDF_TYPE_NSEC3_NEXT_OWNER</name></expr>:</case>

<expr_stmt><expr><name>cur_rdf_length</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator> <name><name>wire</name><index>[<expr><operator>*</operator><name>pos</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_APL</name></expr>:</case>
<case>case <expr><name>LDNS_RDF_TYPE_B64</name></expr>:</case>
<case>case <expr><name>LDNS_RDF_TYPE_HEX</name></expr>:</case>
<case>case <expr><name>LDNS_RDF_TYPE_NSEC</name></expr>:</case>
<case>case <expr><name>LDNS_RDF_TYPE_UNKNOWN</name></expr>:</case>
<case>case <expr><name>LDNS_RDF_TYPE_SERVICE</name></expr>:</case>
<case>case <expr><name>LDNS_RDF_TYPE_LOC</name></expr>:</case>
<case>case <expr><name>LDNS_RDF_TYPE_WKS</name></expr>:</case>
<case>case <expr><name>LDNS_RDF_TYPE_NSAP</name></expr>:</case>
<case>case <expr><name>LDNS_RDF_TYPE_ATMA</name></expr>:</case>
<case>case <expr><name>LDNS_RDF_TYPE_IPSECKEY</name></expr>:</case>
<case>case <expr><name>LDNS_RDF_TYPE_LONG_STR</name></expr>:</case>
<case>case <expr><name>LDNS_RDF_TYPE_NONE</name></expr>:</case>



<expr_stmt><expr><name>cur_rdf_length</name> <operator>=</operator> <name>end</name> <operator>-</operator> <operator>*</operator><name>pos</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>


<if_stmt><if>if <condition>(<expr><name>cur_rdf_length</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cur_rdf_length</name> <operator>+</operator> <operator>*</operator><name>pos</name> <operator>&gt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_PACKET_OVERFLOW</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>LDNS_XMALLOC</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>rd_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>wire</name><index>[<expr><operator>*</operator><name>pos</name></expr>]</index></name></expr></argument>, <argument><expr><name>cur_rdf_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cur_rdf</name> <operator>=</operator> <call><name>ldns_rdf_new</name><argument_list>(<argument><expr><name>cur_rdf_type</name></expr></argument>,
<argument><expr><name>cur_rdf_length</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pos</name> <operator>=</operator> <operator>*</operator><name>pos</name> <operator>+</operator> <name>cur_rdf_length</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cur_rdf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_rr_push_rdf</name><argument_list>(<argument><expr><name>rr</name></expr></argument>, <argument><expr><name>cur_rdf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cur_rdf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rdf_index</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>


<return>return <expr><name>LDNS_STATUS_OK</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>ldns_status</name></type>
<name>ldns_wire2rr</name><parameter_list>(<parameter><decl><type><name>ldns_rr</name> <modifier>*</modifier><modifier>*</modifier></type><name>rr_p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>wire</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>max</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>, <parameter><decl><type><name>ldns_pkt_section</name></type> <name>section</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>owner</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>rr</name> <init>= <expr><call><name>ldns_rr_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>status</name></decl>;</decl_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_wire2dname</name><argument_list>(<argument><expr><operator>&amp;</operator><name>owner</name></expr></argument>, <argument><expr><name>wire</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_STATUS_CHECK_GOTO</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>status_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ldns_rr_set_owner</name><argument_list>(<argument><expr><name>rr</name></expr></argument>, <argument><expr><name>owner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pos</name> <operator>+</operator> <literal type="number">4</literal> <operator>&gt;</operator> <name>max</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>LDNS_STATUS_PACKET_OVERFLOW</name></expr>;</expr_stmt>
<goto>goto <name>status_error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ldns_rr_set_type</name><argument_list>(<argument><expr><name>rr</name></expr></argument>, <argument><expr><call><name>ldns_read_uint16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wire</name><index>[<expr><operator>*</operator><name>pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pos</name> <operator>=</operator> <operator>*</operator><name>pos</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ldns_rr_set_class</name><argument_list>(<argument><expr><name>rr</name></expr></argument>, <argument><expr><call><name>ldns_read_uint16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wire</name><index>[<expr><operator>*</operator><name>pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>pos</name> <operator>=</operator> <operator>*</operator><name>pos</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>section</name> <operator>!=</operator> <name>LDNS_SECTION_QUESTION</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pos</name> <operator>+</operator> <literal type="number">4</literal> <operator>&gt;</operator> <name>max</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>LDNS_STATUS_PACKET_OVERFLOW</name></expr>;</expr_stmt>
<goto>goto <name>status_error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_rr_set_ttl</name><argument_list>(<argument><expr><name>rr</name></expr></argument>, <argument><expr><call><name>ldns_read_uint32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wire</name><index>[<expr><operator>*</operator><name>pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pos</name> <operator>=</operator> <operator>*</operator><name>pos</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_wire2rdf</name><argument_list>(<argument><expr><name>rr</name></expr></argument>, <argument><expr><name>wire</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LDNS_STATUS_CHECK_GOTO</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>status_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rr_set_question</name><argument_list>(<argument><expr><name>rr</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ldns_rr_set_question</name><argument_list>(<argument><expr><name>rr</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>rr_p</name> <operator>=</operator> <name>rr</name></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_OK</name></expr>;</return>

<label><name>status_error</name>:</label>
<expr_stmt><expr><call><name>ldns_rr_free</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ldns_status</name></type>
<name>ldns_wire2pkt_hdr</name><parameter_list>(<parameter><decl><type><name>ldns_pkt</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>wire</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>max</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pos</name> <operator>+</operator> <name>LDNS_HEADER_SIZE</name> <operator>&gt;</operator> <name>max</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_WIRE_INCOMPLETE_HEADER</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ldns_pkt_set_id</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><call><name>LDNS_ID_WIRE</name><argument_list>(<argument><expr><name>wire</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_pkt_set_qr</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><call><name>LDNS_QR_WIRE</name><argument_list>(<argument><expr><name>wire</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_pkt_set_opcode</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><call><name>LDNS_OPCODE_WIRE</name><argument_list>(<argument><expr><name>wire</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_pkt_set_aa</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><call><name>LDNS_AA_WIRE</name><argument_list>(<argument><expr><name>wire</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_pkt_set_tc</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><call><name>LDNS_TC_WIRE</name><argument_list>(<argument><expr><name>wire</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_pkt_set_rd</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><call><name>LDNS_RD_WIRE</name><argument_list>(<argument><expr><name>wire</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_pkt_set_ra</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><call><name>LDNS_RA_WIRE</name><argument_list>(<argument><expr><name>wire</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_pkt_set_ad</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><call><name>LDNS_AD_WIRE</name><argument_list>(<argument><expr><name>wire</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_pkt_set_cd</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><call><name>LDNS_CD_WIRE</name><argument_list>(<argument><expr><name>wire</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_pkt_set_rcode</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><call><name>LDNS_RCODE_WIRE</name><argument_list>(<argument><expr><name>wire</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ldns_pkt_set_qdcount</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><call><name>LDNS_QDCOUNT</name><argument_list>(<argument><expr><name>wire</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_pkt_set_ancount</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><call><name>LDNS_ANCOUNT</name><argument_list>(<argument><expr><name>wire</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_pkt_set_nscount</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><call><name>LDNS_NSCOUNT</name><argument_list>(<argument><expr><name>wire</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_pkt_set_arcount</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><call><name>LDNS_ARCOUNT</name><argument_list>(<argument><expr><name>wire</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pos</name> <operator>+=</operator> <name>LDNS_HEADER_SIZE</name></expr>;</expr_stmt>

<return>return <expr><name>LDNS_STATUS_OK</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_buffer2pkt_wire</name><parameter_list>(<parameter><decl><type><name>ldns_pkt</name> <modifier>*</modifier><modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_buffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><call><name>ldns_wire2pkt</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><call><name>ldns_buffer_begin</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ldns_buffer_limit</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_wire2pkt</name><parameter_list>(<parameter><decl><type><name>ldns_pkt</name> <modifier>*</modifier><modifier>*</modifier></type><name>packet_p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>wire</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>max</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>rr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_pkt</name> <modifier>*</modifier></type><name>packet</name> <init>= <expr><call><name>ldns_pkt_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>status</name> <init>= <expr><name>LDNS_STATUS_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>have_edns</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_wire2pkt_hdr</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>wire</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_STATUS_CHECK_GOTO</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>status_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ldns_pkt_qdcount</name><argument_list>(<argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_wire2rr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rr</name></expr></argument>, <argument><expr><name>wire</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><name>LDNS_SECTION_QUESTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>LDNS_STATUS_PACKET_OVERFLOW</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>LDNS_STATUS_WIRE_INCOMPLETE_QUESTION</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>LDNS_STATUS_CHECK_GOTO</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>status_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ldns_rr_list_push_rr</name><argument_list>(<argument><expr><call><name>ldns_pkt_question</name><argument_list>(<argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_pkt_free</name><argument_list>(<argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_INTERNAL_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ldns_pkt_ancount</name><argument_list>(<argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_wire2rr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rr</name></expr></argument>, <argument><expr><name>wire</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><name>LDNS_SECTION_ANSWER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>LDNS_STATUS_PACKET_OVERFLOW</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>LDNS_STATUS_WIRE_INCOMPLETE_ANSWER</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>LDNS_STATUS_CHECK_GOTO</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>status_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ldns_rr_list_push_rr</name><argument_list>(<argument><expr><call><name>ldns_pkt_answer</name><argument_list>(<argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_pkt_free</name><argument_list>(<argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_INTERNAL_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ldns_pkt_nscount</name><argument_list>(<argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_wire2rr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rr</name></expr></argument>, <argument><expr><name>wire</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><name>LDNS_SECTION_AUTHORITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>LDNS_STATUS_PACKET_OVERFLOW</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>LDNS_STATUS_WIRE_INCOMPLETE_AUTHORITY</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>LDNS_STATUS_CHECK_GOTO</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>status_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ldns_rr_list_push_rr</name><argument_list>(<argument><expr><call><name>ldns_pkt_authority</name><argument_list>(<argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_pkt_free</name><argument_list>(<argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_INTERNAL_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ldns_pkt_arcount</name><argument_list>(<argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_wire2rr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rr</name></expr></argument>, <argument><expr><name>wire</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><name>LDNS_SECTION_ADDITIONAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>LDNS_STATUS_PACKET_OVERFLOW</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>LDNS_STATUS_WIRE_INCOMPLETE_ADDITIONAL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>LDNS_STATUS_CHECK_GOTO</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>status_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LDNS_RR_TYPE_OPT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_pkt_set_edns_udp_size</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><call><name>ldns_rr_get_class</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_write_uint32</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><call><name>ldns_rr_ttl</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_pkt_set_edns_extended_rcode</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_pkt_set_edns_version</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_pkt_set_edns_z</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><call><name>ldns_read_uint16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>rr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_pkt_set_edns_data</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><call><name>ldns_rdf_clone</name><argument_list>(<argument><expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>rr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_rr_free</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>have_edns</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LDNS_RR_TYPE_TSIG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_pkt_set_tsig</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_pkt_set_arcount</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><call><name>ldns_pkt_arcount</name><argument_list>(<argument><expr><name>packet</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>ldns_rr_list_push_rr</name><argument_list>(<argument><expr><call><name>ldns_pkt_additional</name><argument_list>(<argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_pkt_free</name><argument_list>(<argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_INTERNAL_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>ldns_pkt_set_size</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>have_edns</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ldns_pkt_set_arcount</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><call><name>ldns_pkt_arcount</name><argument_list>(<argument><expr><name>packet</name></expr></argument>)</argument_list></call>
<operator>-</operator> <name>have_edns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>packet</name><operator>-&gt;</operator><name>_edns_present</name></name> <operator>=</operator> <name>have_edns</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>packet_p</name> <operator>=</operator> <name>packet</name></expr>;</expr_stmt>
<return>return <expr><name>status</name></expr>;</return>

<label><name>status_error</name>:</label>
<expr_stmt><expr><call><name>ldns_pkt_free</name><argument_list>(<argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>
</unit>
