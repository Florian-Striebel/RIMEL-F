<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/ldns/net.c">












<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ldns/config.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ldns/ldns.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETINET_IN_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_SOCKET_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETDB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ARPA_INET_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_POLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;poll.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>ldns_status</name></type>
<name>ldns_send</name><parameter_list>(<parameter><decl><type><name>ldns_pkt</name> <modifier>*</modifier><modifier>*</modifier></type><name>result_packet</name></decl></parameter>, <parameter><decl><type><name>ldns_resolver</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_pkt</name> <modifier>*</modifier></type><name>query_pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>qb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>tsig_mac</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>qb</name> <operator>=</operator> <call><name>ldns_buffer_new</name><argument_list>(<argument><expr><name>LDNS_MIN_BUFLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>query_pkt</name> <operator>&amp;&amp;</operator> <call><name>ldns_pkt_tsig</name><argument_list>(<argument><expr><name>query_pkt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tsig_mac</name> <operator>=</operator> <call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><call><name>ldns_pkt_tsig</name><argument_list>(<argument><expr><name>query_pkt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>query_pkt</name> <operator>||</operator>
<call><name>ldns_pkt2buffer_wire</name><argument_list>(<argument><expr><name>qb</name></expr></argument>, <argument><expr><name>query_pkt</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>LDNS_STATUS_ERR</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ldns_send_buffer</name><argument_list>(<argument><expr><name>result_packet</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>qb</name></expr></argument>, <argument><expr><name>tsig_mac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ldns_buffer_free</name><argument_list>(<argument><expr><name>qb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier></type>
<name>ldns_rdf2native_sockaddr_storage_port</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>rd</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>data_in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name> <modifier>*</modifier></type><name>data_in6</name></decl>;</decl_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>LDNS_MALLOC</name><argument_list>(<argument><expr>struct <name>sockaddr_storage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_storage</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><call><name>ldns_rdf_get_type</name><argument_list>(<argument><expr><name>rd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LDNS_RDF_TYPE_A</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>S_SPLINT_S</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>ss_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>data_in</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr_in</name><operator>*</operator><operator>)</operator> <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data_in</name><operator>-&gt;</operator><name>sin_port</name></name> <operator>=</operator> <operator>(</operator><name>in_port_t</name><operator>)</operator><call><name>htons</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>data_in</name><operator>-&gt;</operator><name>sin_addr</name></name><operator>)</operator></expr></argument>, <argument><expr><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>rd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>rd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<return>return <expr><name>data</name></expr>;</return>
<case>case <expr><name>LDNS_RDF_TYPE_AAAA</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>S_SPLINT_S</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>ss_family</name></name> <operator>=</operator> <name>AF_INET6</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>data_in6</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr_in6</name><operator>*</operator><operator>)</operator> <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data_in6</name><operator>-&gt;</operator><name>sin6_port</name></name> <operator>=</operator> <operator>(</operator><name>in_port_t</name><operator>)</operator><call><name>htons</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data_in6</name><operator>-&gt;</operator><name>sin6_addr</name></name></expr></argument>, <argument><expr><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>rd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>rd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in6</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<return>return <expr><name>data</name></expr>;</return>
<default>default:</default>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier></type>
<name>ldns_rdf2native_sockaddr_storage</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>rd</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_rdf2native_sockaddr_storage_port</name><argument_list>(
<argument><expr><name>rd</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>port</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><name>uint16_t</name><operator>)</operator><name>LDNS_PORT</name></expr> </then><else>: <expr><name>port</name></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>ldns_sock_nonblock</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sockfd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FCNTL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>flag</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>flag</name> <operator>=</operator> <call><name>fcntl</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>F_GETFL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flag</name> <operator>|=</operator> <name>O_NONBLOCK</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>fcntl</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>F_SETFL</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_IOCTLSOCKET</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>on</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><call><name>ioctlsocket</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>FIONBIO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>on</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>ldns_sock_block</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sockfd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FCNTL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>flag</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>flag</name> <operator>=</operator> <call><name>fcntl</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>F_GETFL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flag</name> <operator>&amp;=</operator> <operator>~</operator><name>O_NONBLOCK</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>fcntl</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>F_SETFL</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_IOCTLSOCKET</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><call><name>ioctlsocket</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>FIONBIO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>off</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>ldns_sock_wait</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sockfd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>timeout</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>write</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_POLL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>S_SPLINT_S</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>fd_set</name></type> <name>fds</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>FD_SET</name><argument_list>(<argument>FD_SET_T sockfd</argument>, <argument>&amp;fds</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<if_stmt><if>if<condition>(<expr><name>write</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>select</name><argument_list>(<argument><expr><name>sockfd</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fds</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>select</name><argument_list>(<argument><expr><name>sockfd</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fds</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name></type> <name><name>pfds</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pfds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pfds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pfds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <name>sockfd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pfds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>events</name> <operator>=</operator> <name>POLLIN</name><operator>|</operator><name>POLLERR</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>write</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pfds</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>events</name> <operator>|=</operator> <name>POLLOUT</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>poll</name><argument_list>(<argument><expr><name>pfds</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>timeout</name><operator>.</operator><name>tv_sec</name></name> <operator>*</operator> <literal type="number">1000</literal>
<operator>+</operator> <name><name>timeout</name><operator>.</operator><name>tv_usec</name></name> <operator>/</operator> <literal type="number">1000</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>ldns_tcp_connect_from</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier></type><name>to</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name></type> <name>tolen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name></type> <name>fromlen</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sockfd</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>S_SPLINT_S</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>sockfd</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator><name>to</name><operator>)</operator><operator>-&gt;</operator><name>sa_family</name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>,
<argument><expr><name>IPPROTO_TCP</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>SOCK_INVALID</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>from</name> <operator>&amp;&amp;</operator> <call><name>bind</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> struct <name>sockaddr</name><operator>*</operator><operator>)</operator><name>from</name></expr></argument>, <argument><expr><name>fromlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SOCK_INVALID</name></expr>)</condition><block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>ldns_sock_nonblock</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>connect</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator><name>to</name></expr></argument>, <argument><expr><name>tolen</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SOCK_INVALID</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_WINSOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EINPROGRESS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>errno</name> <operator>!=</operator> <name>EINPROGRESS</name></expr>)</condition> <block>{<block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>close_socket</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if<condition>(<expr><call><name>WSAGetLastError</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>WSAEINPROGRESS</name> <operator>&amp;&amp;</operator>
<call><name>WSAGetLastError</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>WSAEWOULDBLOCK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close_socket</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>


<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>socklen_t</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>socklen_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>ldns_sock_wait</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close_socket</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><call><name>getsockopt</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_ERROR</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>error</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_WINSOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>WSAGetLastError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>USE_WINSOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EINPROGRESS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>EWOULDBLOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name>error</name> <operator>==</operator> <name>EINPROGRESS</name> <operator>||</operator> <name>error</name> <operator>==</operator> <name>EWOULDBLOCK</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if type="elseif">else if<condition>(<expr><name>error</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close_socket</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>error</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if<condition>(<expr><name>error</name> <operator>==</operator> <name>WSAEINPROGRESS</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>error</name> <operator>==</operator> <name>WSAEWOULDBLOCK</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>error</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close_socket</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>error</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>
</block_content>}</block></while>


<expr_stmt><expr><call><name>ldns_sock_block</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>sockfd</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<function><type><name>int</name></type>
<name>ldns_tcp_connect</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier></type><name>to</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name></type> <name>tolen</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_tcp_connect_from</name><argument_list>(<argument><expr><name>to</name></expr></argument>, <argument><expr><name>tolen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>ldns_tcp_bgsend_from</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>qbin</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier></type><name>to</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name></type> <name>tolen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name></type> <name>fromlen</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sockfd</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sockfd</name> <operator>=</operator> <call><name>ldns_tcp_connect_from</name><argument_list>(<argument><expr><name>to</name></expr></argument>, <argument><expr><name>tolen</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>fromlen</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sockfd</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ldns_tcp_send_query</name><argument_list>(<argument><expr><name>qbin</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><name>tolen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close_socket</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>sockfd</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>ldns_tcp_bgsend</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>qbin</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier></type><name>to</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name></type> <name>tolen</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_tcp_bgsend_from</name><argument_list>(<argument><expr><name>qbin</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><name>tolen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>ldns_status</name></type>
<name>ldns_tcp_send_from</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>qbin</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier></type><name>to</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name></type> <name>tolen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name></type> <name>fromlen</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>timeout</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>answer_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sockfd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>answer</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sockfd</name> <operator>=</operator> <call><name>ldns_tcp_bgsend_from</name><argument_list>(<argument><expr><name>qbin</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><name>tolen</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>fromlen</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sockfd</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>answer</name> <operator>=</operator> <call><name>ldns_tcp_read_wire_timeout</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>answer_size</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close_socket</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>answer_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>LDNS_STATUS_NETWORK_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <call><name>LDNS_XREALLOC</name><argument_list>(<argument><expr><name>answer</name></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>*</operator><name>answer_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>*</operator><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>answer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>LDNS_STATUS_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_tcp_send</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>qbin</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier></type><name>to</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name></type> <name>tolen</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>timeout</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>answer_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_tcp_send_from</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>qbin</name></expr></argument>,
<argument><expr><name>to</name></expr></argument>, <argument><expr><name>tolen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>answer_size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>int</name></type>
<name>ldns_udp_connect</name><argument_list>(<argument><expr><specifier>const</specifier> struct <name>sockaddr_storage</name> <operator>*</operator><name>to</name></expr></argument>, <argument><expr>struct <name>timeval</name> <call><name>ATTR_UNUSED</name><argument_list>(<argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sockfd</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>S_SPLINT_S</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>sockfd</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator><name>to</name><operator>)</operator><operator>-&gt;</operator><name>sa_family</name></expr></argument>, <argument><expr><name>SOCK_DGRAM</name></expr></argument>,
<argument><expr><name>IPPROTO_UDP</name></expr></argument>)</argument_list></call><operator>)</operator>
<operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>sockfd</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>ldns_udp_bgsend_from</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>qbin</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier></type><name>to</name></decl></parameter> , <parameter><decl><type><name>socklen_t</name></type> <name>tolen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name></type> <name>fromlen</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sockfd</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sockfd</name> <operator>=</operator> <call><name>ldns_udp_connect</name><argument_list>(<argument><expr><name>to</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sockfd</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>from</name> <operator>&amp;&amp;</operator> <call><name>bind</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> struct <name>sockaddr</name><operator>*</operator><operator>)</operator><name>from</name></expr></argument>, <argument><expr><name>fromlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ldns_udp_send_query</name><argument_list>(<argument><expr><name>qbin</name></expr></argument>, <argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><name>tolen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close_socket</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>sockfd</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>ldns_udp_bgsend</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>qbin</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier></type><name>to</name></decl></parameter> , <parameter><decl><type><name>socklen_t</name></type> <name>tolen</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_udp_bgsend_from</name><argument_list>(<argument><expr><name>qbin</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><name>tolen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ldns_status</name></type>
<name>ldns_udp_send_from</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>qbin</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier></type><name>to</name></decl></parameter> , <parameter><decl><type><name>socklen_t</name></type> <name>tolen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name></type> <name>fromlen</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>timeout</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>answer_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sockfd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>answer</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sockfd</name> <operator>=</operator> <call><name>ldns_udp_bgsend_from</name><argument_list>(<argument><expr><name>qbin</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><name>tolen</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>fromlen</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sockfd</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_SOCKET_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>ldns_sock_wait</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close_socket</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_NETWORK_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><call><name>ldns_sock_nonblock</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>answer</name> <operator>=</operator> <call><name>ldns_udp_read_wire</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>answer_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close_socket</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>answer_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>LDNS_STATUS_NETWORK_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>answer</name></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_udp_send</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>qbin</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier></type><name>to</name></decl></parameter> , <parameter><decl><type><name>socklen_t</name></type> <name>tolen</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>timeout</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>answer_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_udp_send_from</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>qbin</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><name>tolen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>answer_size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_send_buffer</name><parameter_list>(<parameter><decl><type><name>ldns_pkt</name> <modifier>*</modifier><modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>ldns_resolver</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>qb</name></decl></parameter>, <parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>tsig_mac</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>src_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier></type><name>ns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>ns_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv_s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv_e</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier><modifier>*</modifier></type><name>ns_array</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name> <modifier>*</modifier></type><name>rtt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_pkt</name> <modifier>*</modifier></type><name>reply</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>all_servers_rtt_inf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>retries</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>reply_bytes</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>reply_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>status</name></decl>, <decl><type ref="prev"/><name>send_status</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>r</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <name>LDNS_STATUS_OK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rtt</name> <operator>=</operator> <call><name>ldns_resolver_rtt</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ns_array</name> <operator>=</operator> <call><name>ldns_resolver_nameservers</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reply</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ns_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>all_servers_rtt_inf</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ldns_resolver_random</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_resolver_nameservers_randomize</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>ldns_resolver_source</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>ldns_rdf2native_sockaddr_storage_port</name><argument_list>(
<argument><expr><call><name>ldns_resolver_source</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>src_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ldns_resolver_nameserver_count</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>rtt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>LDNS_RESOLV_RTT_INF</name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>
</block_content>}</block></if></if_stmt>






<expr_stmt><expr><name>ns</name> <operator>=</operator> <call><name>ldns_rdf2native_sockaddr_storage</name><argument_list>(<argument><expr><name><name>ns_array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>ldns_resolver_port</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>ns_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>S_SPLINT_S</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ns</name><operator>-&gt;</operator><name>ss_family</name></name> <operator>==</operator> <name>AF_INET</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>ldns_resolver_ip6</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LDNS_RESOLV_INET6</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ns</name><operator>-&gt;</operator><name>ss_family</name></name> <operator>==</operator> <name>AF_INET6</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>ldns_resolver_ip6</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LDNS_RESOLV_INET</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>all_servers_rtt_inf</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv_s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>send_status</name> <operator>=</operator> <name>LDNS_STATUS_ERR</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>ldns_resolver_usevc</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>retries</name> <operator>=</operator> <call><name>ldns_resolver_retry</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>retries</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>retries</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>send_status</name> <operator>=</operator>
<call><name>ldns_tcp_send_from</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reply_bytes</name></expr></argument>, <argument><expr><name>qb</name></expr></argument>,
<argument><expr><name>ns</name></expr></argument>, <argument><expr><operator>(</operator><name>socklen_t</name><operator>)</operator><name>ns_len</name></expr></argument>,
<argument><expr><name>src</name></expr></argument>, <argument><expr><operator>(</operator><name>socklen_t</name><operator>)</operator><name>src_len</name></expr></argument>,
<argument><expr><call><name>ldns_resolver_timeout</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>&amp;</operator><name>reply_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>send_status</name> <operator>==</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>retries</name> <operator>=</operator> <call><name>ldns_resolver_retry</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>retries</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>retries</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>send_status</name> <operator>=</operator>
<call><name>ldns_udp_send_from</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reply_bytes</name></expr></argument>, <argument><expr><name>qb</name></expr></argument>,
<argument><expr><name>ns</name></expr></argument>, <argument><expr><operator>(</operator><name>socklen_t</name><operator>)</operator><name>ns_len</name></expr></argument>,
<argument><expr><name>src</name></expr></argument>, <argument><expr><operator>(</operator><name>socklen_t</name><operator>)</operator><name>src_len</name></expr></argument>,
<argument><expr><call><name>ldns_resolver_timeout</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>&amp;</operator><name>reply_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>send_status</name> <operator>==</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>send_status</name> <operator>!=</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_resolver_set_nameserver_rtt</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>LDNS_RESOLV_RTT_INF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>send_status</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><name>reply_bytes</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ldns_resolver_fail</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_ERR</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_wire2pkt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reply</name></expr></argument>, <argument><expr><name>reply_bytes</name></expr></argument>, <argument><expr><name>reply_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>reply_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv_e</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>reply</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_pkt_set_querytime</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator>
<operator>(</operator><operator>(</operator><name><name>tv_e</name><operator>.</operator><name>tv_sec</name></name> <operator>-</operator> <name><name>tv_s</name><operator>.</operator><name>tv_sec</name></name><operator>)</operator> <operator>*</operator> <literal type="number">1000</literal><operator>)</operator> <operator>+</operator>
<operator>(</operator><name><name>tv_e</name><operator>.</operator><name>tv_usec</name></name> <operator>-</operator> <name><name>tv_s</name><operator>.</operator><name>tv_usec</name></name><operator>)</operator> <operator>/</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_pkt_set_answerfrom</name><argument_list>(<argument><expr><name>reply</name></expr></argument>,
<argument><expr><call><name>ldns_rdf_clone</name><argument_list>(<argument><expr><name><name>ns_array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_pkt_set_timestamp</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><name>tv_s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_pkt_set_size</name><argument_list>(<argument><expr><name>reply</name></expr></argument>, <argument><expr><name>reply_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ldns_resolver_fail</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <call><name>ldns_resolver_retrans</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>src</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>all_servers_rtt_inf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>reply_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_RES_NO_NS</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>tsig_mac</name> <operator>&amp;&amp;</operator> <name>reply</name> <operator>&amp;&amp;</operator> <name>reply_bytes</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ldns_pkt_tsig_verify</name><argument_list>(<argument><expr><name>reply</name></expr></argument>,
<argument><expr><name>reply_bytes</name></expr></argument>,
<argument><expr><name>reply_size</name></expr></argument>,
<argument><expr><call><name>ldns_resolver_tsig_keyname</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ldns_resolver_tsig_keydata</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tsig_mac</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>LDNS_STATUS_CRYPTO_TSIG_BOGUS</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>tsig_mac</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>reply_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>reply</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ssize_t</name></type>
<name>ldns_tcp_send_query</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>qbin</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockfd</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier></type><name>to</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name></type> <name>tolen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>sendbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>bytes</name></decl>;</decl_stmt>


<expr_stmt><expr><name>sendbuf</name> <operator>=</operator> <call><name>LDNS_XMALLOC</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><call><name>ldns_buffer_position</name><argument_list>(<argument><expr><name>qbin</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>sendbuf</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_write_uint16</name><argument_list>(<argument><expr><name>sendbuf</name></expr></argument>, <argument><expr><call><name>ldns_buffer_position</name><argument_list>(<argument><expr><name>qbin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>sendbuf</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name>ldns_buffer_begin</name><argument_list>(<argument><expr><name>qbin</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ldns_buffer_position</name><argument_list>(<argument><expr><name>qbin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bytes</name> <operator>=</operator> <call><name>sendto</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>sendbuf</name></expr></argument>,
<argument><expr><call><name>ldns_buffer_position</name><argument_list>(<argument><expr><name>qbin</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><name>to</name></expr></argument>, <argument><expr><name>tolen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>sendbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>bytes</name> <operator>!=</operator> <call><name>ldns_buffer_position</name><argument_list>(<argument><expr><name>qbin</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr> )</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>bytes</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>ssize_t</name></type>
<name>ldns_udp_send_query</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>qbin</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sockfd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier></type><name>to</name></decl></parameter>,
<parameter><decl><type><name>socklen_t</name></type> <name>tolen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>bytes</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bytes</name> <operator>=</operator> <call><name>sendto</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><call><name>ldns_buffer_begin</name><argument_list>(<argument><expr><name>qbin</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ldns_buffer_position</name><argument_list>(<argument><expr><name>qbin</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><name>to</name></expr></argument>, <argument><expr><name>tolen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>bytes</name> <operator>!=</operator> <call><name>ldns_buffer_position</name><argument_list>(<argument><expr><name>qbin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>bytes</name> <operator>!=</operator> <call><name>ldns_buffer_position</name><argument_list>(<argument><expr><name>qbin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>bytes</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint8_t</name> <modifier>*</modifier></type>
<name>ldns_udp_read_wire</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sockfd</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier></type><name>from</name></decl></parameter>,
<parameter><decl><type><name>socklen_t</name> <modifier>*</modifier></type><name>fromlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>wire</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>wireout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>wire_size</name></decl>;</decl_stmt>

<expr_stmt><expr><name>wire</name> <operator>=</operator> <call><name>LDNS_XMALLOC</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>LDNS_MAX_PACKETLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>wire</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>wire_size</name> <operator>=</operator> <call><name>recvfrom</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>wire</name></expr></argument>, <argument><expr><name>LDNS_MAX_PACKETLEN</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><name>from</name></expr></argument>, <argument><expr><name>fromlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>wire_size</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>wire_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>wire</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>wire_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>wireout</name> <operator>=</operator> <call><name>LDNS_XREALLOC</name><argument_list>(<argument><expr><name>wire</name></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>wire_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>wireout</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>wire</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>wireout</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint8_t</name> <modifier>*</modifier></type>
<name>ldns_tcp_read_wire_timeout</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sockfd</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>wire</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>wire_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>bytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>wire</name> <operator>=</operator> <call><name>LDNS_XMALLOC</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>wire</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>bytes</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>ldns_sock_wait</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>wire</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>recv</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <operator>(</operator><name>wire</name> <operator>+</operator> <name>bytes</name><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><literal type="number">2</literal> <operator>-</operator> <name>bytes</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>wire</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bytes</name> <operator>+=</operator> <name>rc</name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>wire_size</name> <operator>=</operator> <call><name>ldns_read_uint16</name><argument_list>(<argument><expr><name>wire</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>wire</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>wire</name> <operator>=</operator> <call><name>LDNS_XMALLOC</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>wire_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>wire</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bytes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>bytes</name> <operator>&lt;</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator> <name>wire_size</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>ldns_sock_wait</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>wire</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>recv</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <operator>(</operator><name>wire</name> <operator>+</operator> <name>bytes</name><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name>wire_size</name> <operator>-</operator> <name>bytes</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>wire</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bytes</name> <operator>+=</operator> <name>rc</name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>bytes</name></expr>;</expr_stmt>
<return>return <expr><name>wire</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint8_t</name> <modifier>*</modifier></type>
<name>ldns_tcp_read_wire</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sockfd</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>wire</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>wire_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>bytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>wire</name> <operator>=</operator> <call><name>LDNS_XMALLOC</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>wire</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>bytes</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>recv</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <operator>(</operator><name>wire</name> <operator>+</operator> <name>bytes</name><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><literal type="number">2</literal> <operator>-</operator> <name>bytes</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>wire</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bytes</name> <operator>+=</operator> <name>rc</name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>wire_size</name> <operator>=</operator> <call><name>ldns_read_uint16</name><argument_list>(<argument><expr><name>wire</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>wire</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>wire</name> <operator>=</operator> <call><name>LDNS_XMALLOC</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>wire_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>wire</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bytes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>bytes</name> <operator>&lt;</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator> <name>wire_size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>recv</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <operator>(</operator><name>wire</name> <operator>+</operator> <name>bytes</name><operator>)</operator></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name>wire_size</name> <operator>-</operator> <name>bytes</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>wire</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bytes</name> <operator>+=</operator> <name>rc</name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>bytes</name></expr>;</expr_stmt>
<return>return <expr><name>wire</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>S_SPLINT_S</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>ldns_rdf</name> <modifier>*</modifier></type>
<name>ldns_sockaddr_storage2rdf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier></type><name>sock</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>data_in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name> <modifier>*</modifier></type><name>data_in6</name></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name><name>sock</name><operator>-&gt;</operator><name>ss_family</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>AF_INET</name></expr>:</case>
<expr_stmt><expr><name>data_in</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr_in</name><operator>*</operator><operator>)</operator><name>sock</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>port</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>port</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator><name><name>data_in</name><operator>-&gt;</operator><name>sin_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>ldns_rdf_new_frm_data</name><argument_list>(<argument><expr><name>LDNS_RDF_TYPE_A</name></expr></argument>,
<argument><expr><name>LDNS_IP4ADDRLEN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data_in</name><operator>-&gt;</operator><name>sin_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>AF_INET6</name></expr>:</case>
<expr_stmt><expr><name>data_in6</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr_in6</name><operator>*</operator><operator>)</operator><name>sock</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>port</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>port</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator><name><name>data_in6</name><operator>-&gt;</operator><name>sin6_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>ldns_rdf_new_frm_data</name><argument_list>(<argument><expr><name>LDNS_RDF_TYPE_AAAA</name></expr></argument>,
<argument><expr><name>LDNS_IP6ADDRLEN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data_in6</name><operator>-&gt;</operator><name>sin6_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><name>port</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>port</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>addr</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><name>ldns_status</name></type>
<name>ldns_axfr_start</name><parameter_list>(<parameter><decl><type><name>ldns_resolver</name> <modifier>*</modifier></type><name>resolver</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>domain</name></decl></parameter>, <parameter><decl><type><name>ldns_rr_class</name></type> <name>class</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_pkt</name> <modifier>*</modifier></type><name>query</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>query_wire</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>src_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier></type><name>ns</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>ns_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>ns_i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>status</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>resolver</name> <operator>||</operator> <call><name>ldns_resolver_nameserver_count</name><argument_list>(<argument><expr><name>resolver</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>query</name> <operator>=</operator> <call><name>ldns_pkt_query_new</name><argument_list>(<argument><expr><call><name>ldns_rdf_clone</name><argument_list>(<argument><expr><name>domain</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LDNS_RR_TYPE_AXFR</name></expr></argument>, <argument><expr><name>class</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>query</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_ADDRESS_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>ldns_resolver_source</name><argument_list>(<argument><expr><name>resolver</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>ldns_rdf2native_sockaddr_storage_port</name><argument_list>(
<argument><expr><call><name>ldns_resolver_source</name><argument_list>(<argument><expr><name>resolver</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>src_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<for>for <control>(<init><expr><name>ns_i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init>
<condition><expr><name>ns_i</name> <operator>&lt;</operator> <call><name>ldns_resolver_nameserver_count</name><argument_list>(<argument><expr><name>resolver</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name><name>resolver</name><operator>-&gt;</operator><name>_socket</name></name> <operator>==</operator> <name>SOCK_INVALID</name></expr>;</condition>
<incr><expr><name>ns_i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ns</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ns</name> <operator>=</operator> <call><name>ldns_rdf2native_sockaddr_storage</name><argument_list>(
<argument><expr><name><name>resolver</name><operator>-&gt;</operator><name>_nameservers</name><index>[<expr><name>ns_i</name></expr>]</index></name></expr></argument>,
<argument><expr><call><name>ldns_resolver_port</name><argument_list>(<argument><expr><name>resolver</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>ns_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>S_SPLINT_S</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ns</name><operator>-&gt;</operator><name>ss_family</name></name> <operator>==</operator> <name>AF_INET</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>ldns_resolver_ip6</name><argument_list>(<argument><expr><name>resolver</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LDNS_RESOLV_INET6</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ns</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ns</name><operator>-&gt;</operator><name>ss_family</name></name> <operator>==</operator> <name>AF_INET6</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>ldns_resolver_ip6</name><argument_list>(<argument><expr><name>resolver</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LDNS_RESOLV_INET</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ns</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>resolver</name><operator>-&gt;</operator><name>_socket</name></name> <operator>=</operator> <call><name>ldns_tcp_connect_from</name><argument_list>(
<argument><expr><name>ns</name></expr></argument>, <argument><expr><operator>(</operator><name>socklen_t</name><operator>)</operator><name>ns_len</name></expr></argument>,
<argument><expr><name>src</name></expr></argument>, <argument><expr><operator>(</operator><name>socklen_t</name><operator>)</operator><name>src_len</name></expr></argument>,
<argument><expr><call><name>ldns_resolver_timeout</name><argument_list>(<argument><expr><name>resolver</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>resolver</name><operator>-&gt;</operator><name>_socket</name></name> <operator>==</operator> <name>SOCK_INVALID</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_pkt_free</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_NETWORK_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>ldns_resolver_tsig_keyname</name><argument_list>(<argument><expr><name>resolver</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>ldns_resolver_tsig_keydata</name><argument_list>(<argument><expr><name>resolver</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_pkt_tsig_sign</name><argument_list>(<argument><expr><name>query</name></expr></argument>,
<argument><expr><call><name>ldns_resolver_tsig_keyname</name><argument_list>(<argument><expr><name>resolver</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ldns_resolver_tsig_keydata</name><argument_list>(<argument><expr><name>resolver</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="number">300</literal></expr></argument>, <argument><expr><call><name>ldns_resolver_tsig_algorithm</name><argument_list>(<argument><expr><name>resolver</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>close_socket</name><argument_list>(<argument><expr><name><name>resolver</name><operator>-&gt;</operator><name>_socket</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>resolver</name><operator>-&gt;</operator><name>_socket</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ldns_pkt_free</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>LDNS_STATUS_CRYPTO_TSIG_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<expr_stmt><expr><name>query_wire</name> <operator>=</operator> <call><name>ldns_buffer_new</name><argument_list>(<argument><expr><name>LDNS_MAX_PACKETLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>query_wire</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_pkt_free</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close_socket</name><argument_list>(<argument><expr><name><name>resolver</name><operator>-&gt;</operator><name>_socket</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_pkt2buffer_wire</name><argument_list>(<argument><expr><name>query_wire</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_pkt_free</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_free</name><argument_list>(<argument><expr><name>query_wire</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>close_socket</name><argument_list>(<argument><expr><name><name>resolver</name><operator>-&gt;</operator><name>_socket</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>resolver</name><operator>-&gt;</operator><name>_socket</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ldns_tcp_send_query</name><argument_list>(<argument><expr><name>query_wire</name></expr></argument>, <argument><expr><name><name>resolver</name><operator>-&gt;</operator><name>_socket</name></name></expr></argument>, <argument><expr><name>ns</name></expr></argument>,
<argument><expr><operator>(</operator><name>socklen_t</name><operator>)</operator><name>ns_len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_pkt_free</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_free</name><argument_list>(<argument><expr><name>query_wire</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>close_socket</name><argument_list>(<argument><expr><name><name>resolver</name><operator>-&gt;</operator><name>_socket</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>LDNS_STATUS_NETWORK_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ldns_pkt_free</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_free</name><argument_list>(<argument><expr><name>query_wire</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name><name>resolver</name><operator>-&gt;</operator><name>_axfr_soa_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_OK</name></expr>;</return>
</block_content>}</block></function></block_content></block></function>
</unit>
