<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/ldns/dnssec_verify.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ldns/config.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ldns/ldns.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>



<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/ssl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/evp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/rand.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/err.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/md5.h&gt;</cpp:file></cpp:include>

<function><type><name>ldns_dnssec_data_chain</name> <modifier>*</modifier></type>
<name>ldns_dnssec_data_chain_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_dnssec_data_chain</name> <modifier>*</modifier></type><name>nc</name> <init>= <expr><call><name>LDNS_CALLOC</name><argument_list>(<argument><expr><name>ldns_dnssec_data_chain</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>nc</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>












<return>return <expr><name>nc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ldns_dnssec_data_chain_free</name><parameter_list>(<parameter><decl><type><name>ldns_dnssec_data_chain</name> <modifier>*</modifier></type><name>chain</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ldns_dnssec_data_chain_deep_free</name><parameter_list>(<parameter><decl><type><name>ldns_dnssec_data_chain</name> <modifier>*</modifier></type><name>chain</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ldns_rr_list_deep_free</name><argument_list>(<argument><expr><name><name>chain</name><operator>-&gt;</operator><name>rrset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rr_list_deep_free</name><argument_list>(<argument><expr><name><name>chain</name><operator>-&gt;</operator><name>signatures</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>chain</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_dnssec_data_chain_deep_free</name><argument_list>(<argument><expr><name><name>chain</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ldns_dnssec_data_chain_print_fmt</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_output_format</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_dnssec_data_chain</name> <modifier>*</modifier></type><name>chain</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_lookup_table</name> <modifier>*</modifier></type><name>rcode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ldns_rr_descriptor</name> <modifier>*</modifier></type><name>rr_descriptor</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>chain</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_dnssec_data_chain_print_fmt</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name><name>chain</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name><name>chain</name><operator>-&gt;</operator><name>rrset</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rcode</name> <operator>=</operator> <call><name>ldns_lookup_by_id</name><argument_list>(<argument><expr><name>ldns_rcodes</name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>chain</name><operator>-&gt;</operator><name>packet_rcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rcode</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">";; rcode: %s\n"</literal></expr></argument>, <argument><expr><name><name>rcode</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rr_descriptor</name> <operator>=</operator> <call><name>ldns_rr_descript</name><argument_list>(<argument><expr><name><name>chain</name><operator>-&gt;</operator><name>packet_qtype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rr_descriptor</name> <operator>&amp;&amp;</operator> <name><name>rr_descriptor</name><operator>-&gt;</operator><name>_name</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">";; qtype: %s\n"</literal></expr></argument>, <argument><expr><name><name>rr_descriptor</name><operator>-&gt;</operator><name>_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>chain</name><operator>-&gt;</operator><name>packet_qtype</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"TYPE%u"</literal></expr></argument>,
<argument><expr><name><name>chain</name><operator>-&gt;</operator><name>packet_qtype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>chain</name><operator>-&gt;</operator><name>packet_nodata</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">";; NODATA response\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"rrset:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rr_list_print_fmt</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name><name>chain</name><operator>-&gt;</operator><name>rrset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"sigs:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rr_list_print_fmt</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name><name>chain</name><operator>-&gt;</operator><name>signatures</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"---\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"&lt;no data&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>ldns_dnssec_data_chain_print</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_dnssec_data_chain</name> <modifier>*</modifier></type><name>chain</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ldns_dnssec_data_chain_print_fmt</name><argument_list>(
<argument><expr><name>out</name></expr></argument>, <argument><expr><name>ldns_output_format_default</name></expr></argument>, <argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>ldns_dnssec_build_data_chain_dnskey</name><parameter_list>(<parameter><decl><type><name>ldns_resolver</name> <modifier>*</modifier></type><name>res</name></decl></parameter>,
<parameter><decl><type><name>uint16_t</name></type> <name>qflags</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_pkt</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>,
<parameter><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type><name>signatures</name></decl></parameter>,
<parameter><decl><type><name>ldns_dnssec_data_chain</name> <modifier>*</modifier></type><name>new_chain</name></decl></parameter>,
<parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>key_name</name></decl></parameter>,
<parameter><decl><type><name>ldns_rr_class</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type><name>keys</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_pkt</name> <modifier>*</modifier></type><name>my_pkt</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>signatures</name> <operator>&amp;&amp;</operator> <call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>signatures</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>new_chain</name><operator>-&gt;</operator><name>signatures</name></name> <operator>=</operator> <call><name>ldns_rr_list_clone</name><argument_list>(<argument><expr><name>signatures</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_chain</name><operator>-&gt;</operator><name>parent_type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>keys</name> <operator>=</operator> <call><name>ldns_pkt_rr_list_by_name_and_type</name><argument_list>(
<argument><expr><name>pkt</name></expr></argument>,
<argument><expr><name>key_name</name></expr></argument>,
<argument><expr><name>LDNS_RR_TYPE_DNSKEY</name></expr></argument>,
<argument><expr><name>LDNS_SECTION_ANY_NOQUESTION</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>keys</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>my_pkt</name> <operator>=</operator> <call><name>ldns_resolver_query</name><argument_list>(<argument><expr><name>res</name></expr></argument>,
<argument><expr><name>key_name</name></expr></argument>,
<argument><expr><name>LDNS_RR_TYPE_DNSKEY</name></expr></argument>,
<argument><expr><name>c</name></expr></argument>,
<argument><expr><name>qflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>my_pkt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>keys</name> <operator>=</operator> <call><name>ldns_pkt_rr_list_by_name_and_type</name><argument_list>(
<argument><expr><name>my_pkt</name></expr></argument>,
<argument><expr><name>key_name</name></expr></argument>,
<argument><expr><name>LDNS_RR_TYPE_DNSKEY</name></expr></argument>,
<argument><expr><name>LDNS_SECTION_ANY_NOQUESTION</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_chain</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <call><name>ldns_dnssec_build_data_chain</name><argument_list>(<argument><expr><name>res</name></expr></argument>,
<argument><expr><name>qflags</name></expr></argument>,
<argument><expr><name>keys</name></expr></argument>,
<argument><expr><name>my_pkt</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_chain</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>packet_qtype</name></name> <operator>=</operator> <name>LDNS_RR_TYPE_DNSKEY</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_pkt_free</name><argument_list>(<argument><expr><name>my_pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>new_chain</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <call><name>ldns_dnssec_build_data_chain</name><argument_list>(<argument><expr><name>res</name></expr></argument>,
<argument><expr><name>qflags</name></expr></argument>,
<argument><expr><name>keys</name></expr></argument>,
<argument><expr><name>pkt</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_chain</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>packet_qtype</name></name> <operator>=</operator> <name>LDNS_RR_TYPE_DNSKEY</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>ldns_rr_list_deep_free</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ldns_dnssec_build_data_chain_other</name><parameter_list>(<parameter><decl><type><name>ldns_resolver</name> <modifier>*</modifier></type><name>res</name></decl></parameter>,
<parameter><decl><type><name>uint16_t</name></type> <name>qflags</name></decl></parameter>,
<parameter><decl><type><name>ldns_dnssec_data_chain</name> <modifier>*</modifier></type><name>new_chain</name></decl></parameter>,
<parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>key_name</name></decl></parameter>,
<parameter><decl><type><name>ldns_rr_class</name></type> <name>c</name></decl></parameter>,
<parameter><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type><name>dss</name></decl></parameter>)</parameter_list>
<block>{<block_content>










<decl_stmt><decl><type><name>ldns_pkt</name> <modifier>*</modifier></type><name>my_pkt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type><name>signatures2</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>new_chain</name><operator>-&gt;</operator><name>parent_type</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>my_pkt</name> <operator>=</operator> <call><name>ldns_resolver_query</name><argument_list>(<argument><expr><name>res</name></expr></argument>,
<argument><expr><name>key_name</name></expr></argument>,
<argument><expr><name>LDNS_RR_TYPE_DS</name></expr></argument>,
<argument><expr><name>c</name></expr></argument>,
<argument><expr><name>qflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>my_pkt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dss</name> <operator>=</operator> <call><name>ldns_pkt_rr_list_by_name_and_type</name><argument_list>(<argument><expr><name>my_pkt</name></expr></argument>,
<argument><expr><name>key_name</name></expr></argument>,
<argument><expr><name>LDNS_RR_TYPE_DS</name></expr></argument>,
<argument><expr><name>LDNS_SECTION_ANY_NOQUESTION</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dss</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>new_chain</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <call><name>ldns_dnssec_build_data_chain</name><argument_list>(<argument><expr><name>res</name></expr></argument>,
<argument><expr><name>qflags</name></expr></argument>,
<argument><expr><name>dss</name></expr></argument>,
<argument><expr><name>my_pkt</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_chain</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>packet_qtype</name></name> <operator>=</operator> <name>LDNS_RR_TYPE_DS</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rr_list_deep_free</name><argument_list>(<argument><expr><name>dss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_pkt_free</name><argument_list>(<argument><expr><name>my_pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>my_pkt</name> <operator>=</operator> <call><name>ldns_resolver_query</name><argument_list>(<argument><expr><name>res</name></expr></argument>,
<argument><expr><name>key_name</name></expr></argument>,
<argument><expr><name>LDNS_RR_TYPE_DNSKEY</name></expr></argument>,
<argument><expr><name>c</name></expr></argument>,
<argument><expr><name>qflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>my_pkt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>signatures2</name> <operator>=</operator> <call><name>ldns_pkt_rr_list_by_name_and_type</name><argument_list>(<argument><expr><name>my_pkt</name></expr></argument>,
<argument><expr><name>key_name</name></expr></argument>,
<argument><expr><name>LDNS_RR_TYPE_RRSIG</name></expr></argument>,
<argument><expr><name>LDNS_SECTION_ANSWER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>signatures2</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>new_chain</name><operator>-&gt;</operator><name>signatures</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"There were already sigs!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rr_list_deep_free</name><argument_list>(<argument><expr><name><name>new_chain</name><operator>-&gt;</operator><name>signatures</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"replacing the old sigs\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>new_chain</name><operator>-&gt;</operator><name>signatures</name></name> <operator>=</operator> <name>signatures2</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_pkt_free</name><argument_list>(<argument><expr><name>my_pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ldns_dnssec_data_chain</name> <modifier>*</modifier></type>
<name>ldns_dnssec_build_data_chain_nokeyname</name><parameter_list>(<parameter><decl><type><name>ldns_resolver</name> <modifier>*</modifier></type><name>res</name></decl></parameter>,
<parameter><decl><type><name>uint16_t</name></type> <name>qflags</name></decl></parameter>,
<parameter><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>orig_rr</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_rr_list</name> <modifier>*</modifier></type><name>rrset</name></decl></parameter>,
<parameter><decl><type><name>ldns_dnssec_data_chain</name> <modifier>*</modifier></type><name>new_chain</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>possible_parent_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_pkt</name> <modifier>*</modifier></type><name>my_pkt</name></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name>orig_rr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>possible_parent_name</name> <operator>=</operator> <call><name>ldns_rr_owner</name><argument_list>(<argument><expr><name>orig_rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rrset</name> <operator>&amp;&amp;</operator> <call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>rrset</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>possible_parent_name</name> <operator>=</operator> <call><name>ldns_rr_owner</name><argument_list>(<argument><expr><call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>rrset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>new_chain</name></expr>;</return>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>my_pkt</name> <operator>=</operator> <call><name>ldns_resolver_query</name><argument_list>(<argument><expr><name>res</name></expr></argument>,
<argument><expr><name>possible_parent_name</name></expr></argument>,
<argument><expr><name>LDNS_RR_TYPE_DS</name></expr></argument>,
<argument><expr><name>LDNS_RR_CLASS_IN</name></expr></argument>,
<argument><expr><name>qflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>my_pkt</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>new_chain</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ldns_pkt_ancount</name><argument_list>(<argument><expr><name>my_pkt</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>ldns_pkt_free</name><argument_list>(<argument><expr><name>my_pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>new_chain</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <call><name>ldns_dnssec_build_data_chain</name><argument_list>(<argument><expr><name>res</name></expr></argument>,
<argument><expr><name>qflags</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>my_pkt</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_chain</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>packet_qtype</name></name> <operator>=</operator> <name>LDNS_RR_TYPE_DS</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>
<return>return <expr><name>new_chain</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>ldns_dnssec_data_chain</name> <modifier>*</modifier></type>
<name>ldns_dnssec_build_data_chain</name><parameter_list>(<parameter><decl><type><name>ldns_resolver</name> <modifier>*</modifier></type><name>res</name></decl></parameter>,
<parameter><decl><type><name>uint16_t</name></type> <name>qflags</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_rr_list</name> <modifier>*</modifier></type><name>rrset</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_pkt</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>,
<parameter><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>orig_rr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type><name>signatures</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type><name>dss</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type><name>my_rrset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ldns_pkt</name> <modifier>*</modifier></type><name>my_pkt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>key_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr_type</name></type> <name>type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr_class</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>other_rrset</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ldns_dnssec_data_chain</name> <modifier>*</modifier></type><name>new_chain</name> <init>= <expr><call><name>ldns_dnssec_data_chain_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pkt</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ldns_dnssec_pkt_has_rrsigs</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


<return>return <expr><name>new_chain</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>orig_rr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>new_chain</name><operator>-&gt;</operator><name>rrset</name></name> <operator>=</operator> <call><name>ldns_rr_list_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rr_list_push_rr</name><argument_list>(<argument><expr><name><name>new_chain</name><operator>-&gt;</operator><name>rrset</name></name></expr></argument>, <argument><expr><name>orig_rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_chain</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <call><name>ldns_dnssec_build_data_chain</name><argument_list>(<argument><expr><name>res</name></expr></argument>,
<argument><expr><name>qflags</name></expr></argument>,
<argument><expr><name>rrset</name></expr></argument>,
<argument><expr><name>pkt</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_chain</name><operator>-&gt;</operator><name>packet_rcode</name></name> <operator>=</operator> <call><name>ldns_pkt_get_rcode</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_chain</name><operator>-&gt;</operator><name>packet_qtype</name></name> <operator>=</operator> <call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name>orig_rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_pkt_ancount</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>new_chain</name><operator>-&gt;</operator><name>packet_nodata</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>new_chain</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rrset</name> <operator>||</operator> <call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>rrset</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name><name>new_chain</name><operator>-&gt;</operator><name>packet_nodata</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pkt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>my_rrset</name> <operator>=</operator> <call><name>ldns_pkt_rr_list_by_type</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>,
<argument><expr><name>LDNS_RR_TYPE_NSEC</name></expr></argument>,
<argument><expr><name>LDNS_SECTION_ANY_NOQUESTION</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>my_rrset</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>my_rrset</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>LDNS_RR_TYPE_NSEC</name></expr>;</expr_stmt>
<expr_stmt><expr><name>other_rrset</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ldns_rr_list_deep_free</name><argument_list>(<argument><expr><name>my_rrset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>my_rrset</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>my_rrset</name> <operator>=</operator> <call><name>ldns_pkt_rr_list_by_type</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>,
<argument><expr><name>LDNS_RR_TYPE_NSEC3</name></expr></argument>,
<argument><expr><name>LDNS_SECTION_ANY_NOQUESTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>my_rrset</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>my_rrset</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>LDNS_RR_TYPE_NSEC3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>other_rrset</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ldns_rr_list_deep_free</name><argument_list>(<argument><expr><name>my_rrset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>my_rrset</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


<return>return <expr><name>new_chain</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>new_chain</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>my_rrset</name> <operator>=</operator> <operator>(</operator><name>ldns_rr_list</name> <operator>*</operator><operator>)</operator> <name>rrset</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>my_rrset</name> <operator>&amp;&amp;</operator> <call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>my_rrset</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>new_chain</name><operator>-&gt;</operator><name>rrset</name></name> <operator>=</operator> <call><name>ldns_rr_list_clone</name><argument_list>(<argument><expr><name>my_rrset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>ldns_rr_owner</name><argument_list>(<argument><expr><call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>my_rrset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>my_rrset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>ldns_rr_get_class</name><argument_list>(<argument><expr><call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>my_rrset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>other_rrset</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_rr_list_deep_free</name><argument_list>(<argument><expr><name>my_rrset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>LDNS_RR_TYPE_NSEC</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>LDNS_RR_TYPE_NSEC3</name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>pkt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>signatures</name> <operator>=</operator> <call><name>ldns_dnssec_pkt_get_rrsigs_for_type</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>my_pkt</name> <operator>=</operator> <call><name>ldns_resolver_query</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>qflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>my_pkt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>signatures</name> <operator>=</operator> <call><name>ldns_dnssec_pkt_get_rrsigs_for_type</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_pkt_free</name><argument_list>(<argument><expr><name>my_pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pkt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>signatures</name> <operator>=</operator>
<call><name>ldns_dnssec_pkt_get_rrsigs_for_name_and_type</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>,
<argument><expr><name>name</name></expr></argument>,
<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>signatures</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>my_pkt</name> <operator>=</operator> <call><name>ldns_resolver_query</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>qflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>my_pkt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>signatures</name> <operator>=</operator>
<call><name>ldns_dnssec_pkt_get_rrsigs_for_name_and_type</name><argument_list>(<argument><expr><name>my_pkt</name></expr></argument>,
<argument><expr><name>name</name></expr></argument>,
<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_pkt_free</name><argument_list>(<argument><expr><name>my_pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>signatures</name> <operator>&amp;&amp;</operator> <call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>signatures</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>key_name</name> <operator>=</operator> <call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>signatures</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>key_name</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>signatures</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_rr_list_deep_free</name><argument_list>(<argument><expr><name>signatures</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>ldns_dnssec_build_data_chain_nokeyname</name><argument_list>(<argument><expr><name>res</name></expr></argument>,
<argument><expr><name>qflags</name></expr></argument>,
<argument><expr><name>orig_rr</name></expr></argument>,
<argument><expr><name>rrset</name></expr></argument>,
<argument><expr><name>new_chain</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>LDNS_RR_TYPE_DNSKEY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_dnssec_build_data_chain_dnskey</name><argument_list>(<argument><expr><name>res</name></expr></argument>,
<argument><expr><name>qflags</name></expr></argument>,
<argument><expr><name>pkt</name></expr></argument>,
<argument><expr><name>signatures</name></expr></argument>,
<argument><expr><name>new_chain</name></expr></argument>,
<argument><expr><name>key_name</name></expr></argument>,
<argument><expr><name>c</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ldns_dnssec_build_data_chain_other</name><argument_list>(<argument><expr><name>res</name></expr></argument>,
<argument><expr><name>qflags</name></expr></argument>,
<argument><expr><name>new_chain</name></expr></argument>,
<argument><expr><name>key_name</name></expr></argument>,
<argument><expr><name>c</name></expr></argument>,
<argument><expr><name>dss</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>signatures</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_rr_list_deep_free</name><argument_list>(<argument><expr><name>signatures</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>new_chain</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_dnssec_trust_tree</name> <modifier>*</modifier></type>
<name>ldns_dnssec_trust_tree_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_dnssec_trust_tree</name> <modifier>*</modifier></type><name>new_tree</name> <init>= <expr><call><name>LDNS_XMALLOC</name><argument_list>(<argument><expr><name>ldns_dnssec_trust_tree</name></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>new_tree</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>new_tree</name><operator>-&gt;</operator><name>rr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_tree</name><operator>-&gt;</operator><name>rrset</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_tree</name><operator>-&gt;</operator><name>parent_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>new_tree</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ldns_dnssec_trust_tree_free</name><parameter_list>(<parameter><decl><type><name>ldns_dnssec_trust_tree</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>tree</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>tree</name><operator>-&gt;</operator><name>parent_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_dnssec_trust_tree_free</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>parents</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>size_t</name></type>
<name>ldns_dnssec_trust_tree_depth</name><parameter_list>(<parameter><decl><type><name>ldns_dnssec_trust_tree</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>parent</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>tree</name><operator>-&gt;</operator><name>parent_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>parent</name> <operator>=</operator> <call><name>ldns_dnssec_trust_tree_depth</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>parents</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>parent</name> <operator>&gt;</operator> <name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">1</literal> <operator>+</operator> <name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_tabs</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nr</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>treedepth</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nr</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>nr</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"|---"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>map</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>treedepth</name> <operator>&amp;&amp;</operator> <name><name>map</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"| "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ldns_dnssec_trust_tree_print_sm_fmt</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>out</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_output_format</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,
<parameter><decl><type><name>ldns_dnssec_trust_tree</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>tabs</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>extended</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>sibmap</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>treedepth</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ldns_rr_descriptor</name> <modifier>*</modifier></type><name>descriptor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>mapset</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sibmap</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>treedepth</name> <operator>=</operator> <call><name>ldns_dnssec_trust_tree_depth</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sibmap</name> <operator>=</operator> <call><name>LDNS_XMALLOC</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>treedepth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>sibmap</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>sibmap</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>treedepth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mapset</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tree</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tree</name><operator>-&gt;</operator><name>rr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_tabs</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>tabs</name></expr></argument>, <argument><expr><name>sibmap</name></expr></argument>, <argument><expr><name>treedepth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rdf_print</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>ldns_rr_owner</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>rr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>descriptor</name> <operator>=</operator> <call><name>ldns_rr_descript</name><argument_list>(<argument><expr><call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>rr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>descriptor</name><operator>-&gt;</operator><name>_name</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">" (%s"</literal></expr></argument>, <argument><expr><name><name>descriptor</name><operator>-&gt;</operator><name>_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">" (TYPE%d"</literal></expr></argument>,
<argument><expr><call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>rr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>tabs</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>rr</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LDNS_RR_TYPE_DNSKEY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">" keytag: %u"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <call><name>ldns_calc_keytag</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>rr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">" alg: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rdf_print</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>rr</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">" flags: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rdf_print</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>rr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>rr</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LDNS_RR_TYPE_DS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">" keytag: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rdf_print</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>rr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">" digest type: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rdf_print</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>rr</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>rr</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LDNS_RR_TYPE_NSEC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rdf_print</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>rr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rdf_print</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>rr</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">")\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>tree</name><operator>-&gt;</operator><name>parent_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tree</name><operator>-&gt;</operator><name>parent_count</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>tree</name><operator>-&gt;</operator><name>parent_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>sibmap</name><index>[<expr><name>tabs</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>sibmap</name><index>[<expr><name>tabs</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>parents</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>rr</name></expr></argument>)</argument_list></call> <operator>==</operator>
<name>LDNS_RR_TYPE_NSEC</name> <operator>||</operator>
<call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>parents</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>rr</name></expr></argument>)</argument_list></call> <operator>==</operator>
<name>LDNS_RR_TYPE_NSEC3</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tree</name><operator>-&gt;</operator><name>parent_status</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_tabs</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>tabs</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>sibmap</name></expr></argument>, <argument><expr><name>treedepth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tabs</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>rr</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LDNS_RR_TYPE_NS</name> <operator>&amp;&amp;</operator>
<call><name>ldns_rr_rd_count</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>rr</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"Existence of DS is denied by:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"Existence is denied by:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>rr</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LDNS_RR_TYPE_NS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"Existence of DS is denied by:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>print_tabs</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>tabs</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>sibmap</name></expr></argument>, <argument><expr><name>treedepth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>,
<argument><expr><literal type="string">"Error in denial of existence: %s\n"</literal></expr></argument>,
<argument><expr><call><name>ldns_get_errorstr_by_id</name><argument_list>(
<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>parent_status</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else
if <condition>(<expr><name><name>tree</name><operator>-&gt;</operator><name>parent_status</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>print_tabs</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>tabs</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>sibmap</name></expr></argument>, <argument><expr><name>treedepth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>,
<argument><expr><literal type="string">"%s:\n"</literal></expr></argument>,
<argument><expr><call><name>ldns_get_errorstr_by_id</name><argument_list>(
<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>parent_status</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tree</name><operator>-&gt;</operator><name>parent_status</name><index>[<expr><name>i</name></expr>]</index></name>
<operator>==</operator> <name>LDNS_STATUS_SSL_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"; SSL Error: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ERR_load_crypto_strings</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ERR_print_errors_fp</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_rr_print_fmt</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>,
<argument><expr><name><name>tree</name><operator>-&gt;</operator>
<name>parent_signature</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"For RRset:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rr_list_print_fmt</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>,
<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>rrset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"With key:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rr_print_fmt</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>,
<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>parents</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_dnssec_trust_tree_print_sm_fmt</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>,
<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>parents</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name>tabs</name><operator>+</operator><literal type="number">1</literal></expr></argument>,
<argument><expr><name>extended</name></expr></argument>,
<argument><expr><name>sibmap</name></expr></argument>,
<argument><expr><name>treedepth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>print_tabs</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>tabs</name></expr></argument>, <argument><expr><name>sibmap</name></expr></argument>, <argument><expr><name>treedepth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"&lt;no data&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"&lt;null pointer&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mapset</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>sibmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ldns_dnssec_trust_tree_print_fmt</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_output_format</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,
<parameter><decl><type><name>ldns_dnssec_trust_tree</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>tabs</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>extended</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ldns_dnssec_trust_tree_print_sm_fmt</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>,
<argument><expr><name>tree</name></expr></argument>, <argument><expr><name>tabs</name></expr></argument>, <argument><expr><name>extended</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ldns_dnssec_trust_tree_print</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>out</name></decl></parameter>,
<parameter><decl><type><name>ldns_dnssec_trust_tree</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>tabs</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>extended</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ldns_dnssec_trust_tree_print_fmt</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>ldns_output_format_default</name></expr></argument>,
<argument><expr><name>tree</name></expr></argument>, <argument><expr><name>tabs</name></expr></argument>, <argument><expr><name>extended</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>ldns_status</name></type>
<name>ldns_dnssec_trust_tree_add_parent</name><parameter_list>(<parameter><decl><type><name>ldns_dnssec_trust_tree</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_dnssec_trust_tree</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_rr</name> <modifier>*</modifier></type><name>signature</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_status</name></type> <name>parent_status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>tree</name>
<operator>&amp;&amp;</operator> <name>parent</name>
<operator>&amp;&amp;</operator> <name><name>tree</name><operator>-&gt;</operator><name>parent_count</name></name> <operator>&lt;</operator> <name>LDNS_DNSSEC_TRUST_TREE_MAX_PARENTS</name></expr>)</condition> <block>{<block_content>






<expr_stmt><expr><name><name>tree</name><operator>-&gt;</operator><name>parents</name><index>[<expr><name><name>tree</name><operator>-&gt;</operator><name>parent_count</name></name></expr>]</index></name> <operator>=</operator>
<operator>(</operator><name>ldns_dnssec_trust_tree</name> <operator>*</operator><operator>)</operator> <name>parent</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tree</name><operator>-&gt;</operator><name>parent_status</name><index>[<expr><name><name>tree</name><operator>-&gt;</operator><name>parent_count</name></name></expr>]</index></name> <operator>=</operator> <name>parent_status</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tree</name><operator>-&gt;</operator><name>parent_signature</name><index>[<expr><name><name>tree</name><operator>-&gt;</operator><name>parent_count</name></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ldns_rr</name> <operator>*</operator><operator>)</operator> <name>signature</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tree</name><operator>-&gt;</operator><name>parent_count</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_OK</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_ERR</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>ldns_dnssec_trust_tree</name> <modifier>*</modifier></type>
<name>ldns_dnssec_derive_trust_tree_time</name><parameter_list>(
<parameter><decl><type><name>ldns_dnssec_data_chain</name> <modifier>*</modifier></type><name>data_chain</name></decl></parameter>,
<parameter><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>rr</name></decl></parameter>,
<parameter><decl><type><name>time_t</name></type> <name>check_time</name></decl></parameter>
)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type><name>cur_rrset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type><name>cur_sigs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>cur_rr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>cur_sig_rr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ldns_dnssec_trust_tree</name> <modifier>*</modifier></type><name>new_tree</name> <init>= <expr><call><name>ldns_dnssec_trust_tree_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>new_tree</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>data_chain</name> <operator>&amp;&amp;</operator> <name><name>data_chain</name><operator>-&gt;</operator><name>rrset</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cur_rrset</name> <operator>=</operator> <name><name>data_chain</name><operator>-&gt;</operator><name>rrset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>cur_sigs</name> <operator>=</operator> <name><name>data_chain</name><operator>-&gt;</operator><name>signatures</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cur_rr</name> <operator>=</operator> <name>rr</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cur_rr</name> <operator>&amp;&amp;</operator> <call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>cur_rrset</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cur_rr</name> <operator>=</operator> <call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>cur_rrset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cur_rr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>new_tree</name><operator>-&gt;</operator><name>rr</name></name> <operator>=</operator> <name>cur_rr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_tree</name><operator>-&gt;</operator><name>rrset</name></name> <operator>=</operator> <name>cur_rrset</name></expr>;</expr_stmt>








<if_stmt><if>if <condition>(<expr><name>cur_sigs</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>cur_sigs</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>cur_sig_rr</name> <operator>=</operator> <call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>cur_sigs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name>cur_rr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LDNS_RR_TYPE_NSEC</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ldns_dname_compare</name><argument_list>(<argument><expr><call><name>ldns_rr_owner</name><argument_list>(<argument><expr><name>cur_sig_rr</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ldns_rr_owner</name><argument_list>(<argument><expr><name>cur_rr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>


<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init>
<condition><expr><name>j</name> <operator>&lt;</operator> <call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>cur_rrset</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>ldns_dname_compare</name><argument_list>(<argument><expr><call><name>ldns_rr_owner</name><argument_list>(<argument><expr><name>cur_sig_rr</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>ldns_rr_owner</name><argument_list>(<argument><expr><name>cur_rr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition>
<incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>cur_rr</name> <operator>=</operator> <call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>cur_rrset</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><call><name>ldns_dname_compare</name><argument_list>(<argument><expr><call><name>ldns_rr_owner</name><argument_list>(<argument><expr><name>cur_sig_rr</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ldns_rr_owner</name><argument_list>(<argument><expr><name>cur_rr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data_chain</name><operator>-&gt;</operator><name>parent</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_dnssec_derive_trust_tree_normal_rrset_time</name><argument_list>(
<argument><expr><name>new_tree</name></expr></argument>,
<argument><expr><name>data_chain</name></expr></argument>,
<argument><expr><name>cur_sig_rr</name></expr></argument>,
<argument><expr><name>check_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>ldns_dnssec_derive_trust_tree_dnskey_rrset_time</name><argument_list>(
<argument><expr><name>new_tree</name></expr></argument>,
<argument><expr><name>data_chain</name></expr></argument>,
<argument><expr><name>cur_rr</name></expr></argument>,
<argument><expr><name>cur_sig_rr</name></expr></argument>,
<argument><expr><name>check_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>ldns_dnssec_derive_trust_tree_ds_rrset_time</name><argument_list>(
<argument><expr><name>new_tree</name></expr></argument>, <argument><expr><name>data_chain</name></expr></argument>,
<argument><expr><name>cur_rr</name></expr></argument>, <argument><expr><name>check_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>



<expr_stmt><expr><call><name>ldns_dnssec_derive_trust_tree_no_sig_time</name><argument_list>(
<argument><expr><name>new_tree</name></expr></argument>, <argument><expr><name>data_chain</name></expr></argument>, <argument><expr><name>check_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>new_tree</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_dnssec_trust_tree</name> <modifier>*</modifier></type>
<name>ldns_dnssec_derive_trust_tree</name><parameter_list>(<parameter><decl><type><name>ldns_dnssec_data_chain</name> <modifier>*</modifier></type><name>data_chain</name></decl></parameter>, <parameter><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>rr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_dnssec_derive_trust_tree_time</name><argument_list>(<argument><expr><name>data_chain</name></expr></argument>, <argument><expr><name>rr</name></expr></argument>, <argument><expr><call><name>ldns_time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ldns_dnssec_derive_trust_tree_normal_rrset_time</name><parameter_list>(
<parameter><decl><type><name>ldns_dnssec_trust_tree</name> <modifier>*</modifier></type><name>new_tree</name></decl></parameter>,
<parameter><decl><type><name>ldns_dnssec_data_chain</name> <modifier>*</modifier></type><name>data_chain</name></decl></parameter>,
<parameter><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>cur_sig_rr</name></decl></parameter>,
<parameter><decl><type><name>time_t</name></type> <name>check_time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type><name>cur_rrset</name> <init>= <expr><call><name>ldns_rr_list_clone</name><argument_list>(<argument><expr><name><name>data_chain</name><operator>-&gt;</operator><name>rrset</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_dnssec_trust_tree</name> <modifier>*</modifier></type><name>cur_parent_tree</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>cur_parent_rr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>cur_keytag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type><name>tmp_rrset</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>cur_status</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cur_keytag</name> <operator>=</operator> <call><name>ldns_rdf2native_int16</name><argument_list>(<argument><expr><call><name>ldns_rr_rrsig_keytag</name><argument_list>(<argument><expr><name>cur_sig_rr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name><name>data_chain</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>rrset</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>cur_parent_rr</name> <operator>=</operator> <call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name><name>data_chain</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>rrset</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name>cur_parent_rr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LDNS_RR_TYPE_DNSKEY</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ldns_calc_keytag</name><argument_list>(<argument><expr><name>cur_parent_rr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>cur_keytag</name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><name>cur_rrset</name> <operator>&amp;&amp;</operator> <call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>cur_rrset</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tmp_rrset</name> <operator>=</operator> <name>cur_rrset</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>cur_rrset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>==</operator> <name>LDNS_RR_TYPE_NSEC</name> <operator>||</operator>
<call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>cur_rrset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>==</operator> <name>LDNS_RR_TYPE_NSEC3</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><call><name>ldns_rr_list_sort</name><argument_list>(<argument><expr><name>cur_rrset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>tmp_rrset</name> <operator>==</operator> <name>cur_rrset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_rrset</name> <operator>=</operator> <call><name>ldns_rr_list_pop_rrset</name><argument_list>(<argument><expr><name>cur_rrset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<while>while <condition>(<expr><name>tmp_rrset</name> <operator>&amp;&amp;</operator>
<call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>cur_rrset</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>ldns_dname_compare</name><argument_list>(
<argument><expr><call><name>ldns_rr_owner</name><argument_list>(<argument><expr><call><name>ldns_rr_list_rr</name><argument_list>(
<argument><expr><name>tmp_rrset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ldns_rr_owner</name><argument_list>(<argument><expr><name>cur_sig_rr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_rr_list_deep_free</name><argument_list>(<argument><expr><name>tmp_rrset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_rrset</name> <operator>=</operator>
<call><name>ldns_rr_list_pop_rrset</name><argument_list>(<argument><expr><name>cur_rrset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>cur_status</name> <operator>=</operator> <call><name>ldns_verify_rrsig_time</name><argument_list>(
<argument><expr><name>tmp_rrset</name></expr></argument>,
<argument><expr><name>cur_sig_rr</name></expr></argument>,
<argument><expr><name>cur_parent_rr</name></expr></argument>,
<argument><expr><name>check_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp_rrset</name> <operator>&amp;&amp;</operator> <name>tmp_rrset</name> <operator>!=</operator> <name>cur_rrset</name></expr>
)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_rr_list_deep_free</name><argument_list>(
<argument><expr><name>tmp_rrset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_rrset</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>new_tree</name><operator>-&gt;</operator><name>parent_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cur_parent_rr</name> <operator>==</operator> <name><name>new_tree</name><operator>-&gt;</operator><name>parents</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>rr</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>cur_parent_tree</name> <operator>=</operator>
<call><name>ldns_dnssec_derive_trust_tree_time</name><argument_list>(
<argument><expr><name><name>data_chain</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>,
<argument><expr><name>cur_parent_rr</name></expr></argument>,
<argument><expr><name>check_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>ldns_dnssec_trust_tree_add_parent</name><argument_list>(<argument><expr><name>new_tree</name></expr></argument>,
<argument><expr><name>cur_parent_tree</name></expr></argument>,
<argument><expr><name>cur_sig_rr</name></expr></argument>,
<argument><expr><name>cur_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<label><name>done</name>:</label>
<expr_stmt><expr><call><name>ldns_rr_list_deep_free</name><argument_list>(<argument><expr><name>cur_rrset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ldns_dnssec_derive_trust_tree_normal_rrset</name><parameter_list>(<parameter><decl><type><name>ldns_dnssec_trust_tree</name> <modifier>*</modifier></type><name>new_tree</name></decl></parameter>,
<parameter><decl><type><name>ldns_dnssec_data_chain</name> <modifier>*</modifier></type><name>data_chain</name></decl></parameter>,
<parameter><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>cur_sig_rr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ldns_dnssec_derive_trust_tree_normal_rrset_time</name><argument_list>(
<argument><expr><name>new_tree</name></expr></argument>, <argument><expr><name>data_chain</name></expr></argument>, <argument><expr><name>cur_sig_rr</name></expr></argument>, <argument><expr><call><name>ldns_time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ldns_dnssec_derive_trust_tree_dnskey_rrset_time</name><parameter_list>(
<parameter><decl><type><name>ldns_dnssec_trust_tree</name> <modifier>*</modifier></type><name>new_tree</name></decl></parameter>,
<parameter><decl><type><name>ldns_dnssec_data_chain</name> <modifier>*</modifier></type><name>data_chain</name></decl></parameter>,
<parameter><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>cur_rr</name></decl></parameter>,
<parameter><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>cur_sig_rr</name></decl></parameter>,
<parameter><decl><type><name>time_t</name></type> <name>check_time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type><name>cur_rrset</name> <init>= <expr><name><name>data_chain</name><operator>-&gt;</operator><name>rrset</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_dnssec_trust_tree</name> <modifier>*</modifier></type><name>cur_parent_tree</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>cur_parent_rr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>cur_keytag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>cur_status</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cur_keytag</name> <operator>=</operator> <call><name>ldns_rdf2native_int16</name><argument_list>(<argument><expr><call><name>ldns_rr_rrsig_keytag</name><argument_list>(<argument><expr><name>cur_sig_rr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>cur_rrset</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>cur_parent_rr</name> <operator>=</operator> <call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>cur_rrset</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cur_parent_rr</name> <operator>!=</operator> <name>cur_rr</name> <operator>&amp;&amp;</operator>
<call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name>cur_parent_rr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LDNS_RR_TYPE_DNSKEY</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ldns_calc_keytag</name><argument_list>(<argument><expr><name>cur_parent_rr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>cur_keytag</name></expr>
)</condition> <block>{<block_content>
<expr_stmt><expr><name>cur_parent_tree</name> <operator>=</operator> <call><name>ldns_dnssec_trust_tree_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur_parent_tree</name><operator>-&gt;</operator><name>rr</name></name> <operator>=</operator> <name>cur_parent_rr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur_parent_tree</name><operator>-&gt;</operator><name>rrset</name></name> <operator>=</operator> <name>cur_rrset</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cur_status</name> <operator>=</operator> <call><name>ldns_verify_rrsig_time</name><argument_list>(
<argument><expr><name>cur_rrset</name></expr></argument>, <argument><expr><name>cur_sig_rr</name></expr></argument>,
<argument><expr><name>cur_parent_rr</name></expr></argument>, <argument><expr><name>check_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ldns_dnssec_trust_tree_add_parent</name><argument_list>(<argument><expr><name>new_tree</name></expr></argument>,
<argument><expr><name>cur_parent_tree</name></expr></argument>, <argument><expr><name>cur_sig_rr</name></expr></argument>, <argument><expr><name>cur_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ldns_dnssec_derive_trust_tree_dnskey_rrset</name><parameter_list>(<parameter><decl><type><name>ldns_dnssec_trust_tree</name> <modifier>*</modifier></type><name>new_tree</name></decl></parameter>,
<parameter><decl><type><name>ldns_dnssec_data_chain</name> <modifier>*</modifier></type><name>data_chain</name></decl></parameter>,
<parameter><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>cur_rr</name></decl></parameter>,
<parameter><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>cur_sig_rr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ldns_dnssec_derive_trust_tree_dnskey_rrset_time</name><argument_list>(
<argument><expr><name>new_tree</name></expr></argument>, <argument><expr><name>data_chain</name></expr></argument>, <argument><expr><name>cur_rr</name></expr></argument>, <argument><expr><name>cur_sig_rr</name></expr></argument>, <argument><expr><call><name>ldns_time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ldns_dnssec_derive_trust_tree_ds_rrset_time</name><parameter_list>(
<parameter><decl><type><name>ldns_dnssec_trust_tree</name> <modifier>*</modifier></type><name>new_tree</name></decl></parameter>,
<parameter><decl><type><name>ldns_dnssec_data_chain</name> <modifier>*</modifier></type><name>data_chain</name></decl></parameter>,
<parameter><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>cur_rr</name></decl></parameter>,
<parameter><decl><type><name>time_t</name></type> <name>check_time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type><name>cur_rrset</name> <init>= <expr><name><name>data_chain</name><operator>-&gt;</operator><name>rrset</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_dnssec_trust_tree</name> <modifier>*</modifier></type><name>cur_parent_tree</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>cur_parent_rr</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name>cur_rr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LDNS_RR_TYPE_DNSKEY</name> <operator>&amp;&amp;</operator>
<name><name>data_chain</name><operator>-&gt;</operator><name>parent</name></name> <operator>&amp;&amp;</operator>
<name><name>data_chain</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>rrset</name></name></expr>
)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init>
<condition><expr><name>j</name> <operator>&lt;</operator> <call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name><name>data_chain</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>rrset</name></name></expr></argument>)</argument_list></call></expr>;</condition>
<incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>cur_parent_rr</name> <operator>=</operator> <call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name><name>data_chain</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>rrset</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name>cur_parent_rr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LDNS_RR_TYPE_DS</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>h</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>h</name> <operator>&lt;</operator> <call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>cur_rrset</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>h</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>cur_rr</name> <operator>=</operator> <call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>cur_rrset</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_rr_compare_ds</name><argument_list>(<argument><expr><name>cur_rr</name></expr></argument>, <argument><expr><name>cur_parent_rr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cur_parent_tree</name> <operator>=</operator>
<call><name>ldns_dnssec_derive_trust_tree_time</name><argument_list>(
<argument><expr><name><name>data_chain</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>,
<argument><expr><name>cur_parent_rr</name></expr></argument>,
<argument><expr><name>check_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ldns_dnssec_trust_tree_add_parent</name><argument_list>(
<argument><expr><name>new_tree</name></expr></argument>,
<argument><expr><name>cur_parent_tree</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>LDNS_STATUS_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ldns_dnssec_derive_trust_tree_ds_rrset</name><parameter_list>(<parameter><decl><type><name>ldns_dnssec_trust_tree</name> <modifier>*</modifier></type><name>new_tree</name></decl></parameter>,
<parameter><decl><type><name>ldns_dnssec_data_chain</name> <modifier>*</modifier></type><name>data_chain</name></decl></parameter>,
<parameter><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>cur_rr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ldns_dnssec_derive_trust_tree_ds_rrset_time</name><argument_list>(
<argument><expr><name>new_tree</name></expr></argument>, <argument><expr><name>data_chain</name></expr></argument>, <argument><expr><name>cur_rr</name></expr></argument>, <argument><expr><call><name>ldns_time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ldns_dnssec_derive_trust_tree_no_sig_time</name><parameter_list>(
<parameter><decl><type><name>ldns_dnssec_trust_tree</name> <modifier>*</modifier></type><name>new_tree</name></decl></parameter>,
<parameter><decl><type><name>ldns_dnssec_data_chain</name> <modifier>*</modifier></type><name>data_chain</name></decl></parameter>,
<parameter><decl><type><name>time_t</name></type> <name>check_time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type><name>cur_rrset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>cur_parent_rr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_dnssec_trust_tree</name> <modifier>*</modifier></type><name>cur_parent_tree</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>result</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data_chain</name><operator>-&gt;</operator><name>parent</name></name> <operator>&amp;&amp;</operator> <name><name>data_chain</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>rrset</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>cur_rrset</name> <operator>=</operator> <name><name>data_chain</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>rrset</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cur_rrset</name> <operator>&amp;&amp;</operator> <call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>cur_rrset</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>cur_rrset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator>
<name>LDNS_RR_TYPE_NSEC3</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ldns_dnssec_verify_denial_nsec3</name><argument_list>(
<argument><expr><name><name>new_tree</name><operator>-&gt;</operator><name>rr</name></name></expr></argument>,
<argument><expr><name>cur_rrset</name></expr></argument>,
<argument><expr><name><name>data_chain</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>signatures</name></name></expr></argument>,
<argument><expr><name><name>data_chain</name><operator>-&gt;</operator><name>packet_rcode</name></name></expr></argument>,
<argument><expr><name><name>data_chain</name><operator>-&gt;</operator><name>packet_qtype</name></name></expr></argument>,
<argument><expr><name><name>data_chain</name><operator>-&gt;</operator><name>packet_nodata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>cur_rrset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator>
<name>LDNS_RR_TYPE_NSEC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ldns_dnssec_verify_denial</name><argument_list>(
<argument><expr><name><name>new_tree</name><operator>-&gt;</operator><name>rr</name></name></expr></argument>,
<argument><expr><name>cur_rrset</name></expr></argument>,
<argument><expr><name><name>data_chain</name><operator>-&gt;</operator><name>parent</name><operator>-&gt;</operator><name>signatures</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>LDNS_STATUS_OK</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>LDNS_STATUS_DNSSEC_NSEC_RR_NOT_COVERED</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>cur_rrset</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>cur_parent_rr</name> <operator>=</operator> <call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>cur_rrset</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cur_parent_tree</name> <operator>=</operator>
<call><name>ldns_dnssec_derive_trust_tree_time</name><argument_list>(
<argument><expr><name><name>data_chain</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>,
<argument><expr><name>cur_parent_rr</name></expr></argument>,
<argument><expr><name>check_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ldns_dnssec_trust_tree_add_parent</name><argument_list>(<argument><expr><name>new_tree</name></expr></argument>,
<argument><expr><name>cur_parent_tree</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ldns_dnssec_derive_trust_tree_no_sig</name><parameter_list>(<parameter><decl><type><name>ldns_dnssec_trust_tree</name> <modifier>*</modifier></type><name>new_tree</name></decl></parameter>,
<parameter><decl><type><name>ldns_dnssec_data_chain</name> <modifier>*</modifier></type><name>data_chain</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ldns_dnssec_derive_trust_tree_no_sig_time</name><argument_list>(
<argument><expr><name>new_tree</name></expr></argument>, <argument><expr><name>data_chain</name></expr></argument>, <argument><expr><call><name>ldns_time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>ldns_status</name></type>
<name>ldns_dnssec_trust_tree_contains_keys</name><parameter_list>(<parameter><decl><type><name>ldns_dnssec_trust_tree</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>,
<parameter><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type><name>trusted_keys</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>result</name> <init>= <expr><name>LDNS_STATUS_CRYPTO_NO_DNSKEY</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>equal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>parent_result</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>tree</name> <operator>&amp;&amp;</operator> <name>trusted_keys</name> <operator>&amp;&amp;</operator> <call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>trusted_keys</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content> <if_stmt><if>if <condition>(<expr><name><name>tree</name><operator>-&gt;</operator><name>rr</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>trusted_keys</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>equal</name> <operator>=</operator> <call><name>ldns_rr_compare_ds</name><argument_list>(
<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>rr</name></name></expr></argument>,
<argument><expr><call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>trusted_keys</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>equal</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>LDNS_STATUS_OK</name></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>tree</name><operator>-&gt;</operator><name>parent_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>parent_result</name> <operator>=</operator>
<call><name>ldns_dnssec_trust_tree_contains_keys</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>parents</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
<argument><expr><name>trusted_keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>parent_result</name> <operator>!=</operator> <name>LDNS_STATUS_CRYPTO_NO_DNSKEY</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tree</name><operator>-&gt;</operator><name>parent_status</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>tree</name><operator>-&gt;</operator><name>parent_status</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>tree</name><operator>-&gt;</operator><name>rr</name></name> <operator>&amp;&amp;</operator>
<call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>rr</name></name></expr></argument>)</argument_list></call>
<operator>==</operator> <name>LDNS_RR_TYPE_NSEC</name> <operator>&amp;&amp;</operator>
<name>parent_result</name> <operator>==</operator> <name>LDNS_STATUS_OK</name></expr>
)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator>
<name>LDNS_STATUS_DNSSEC_EXISTENCE_DENIED</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>parent_result</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>LDNS_STATUS_ERR</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_verify_time</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>ldns_rr_list</name> <modifier>*</modifier></type><name>rrset</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_rr_list</name> <modifier>*</modifier></type><name>rrsig</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_rr_list</name> <modifier>*</modifier></type><name>keys</name></decl></parameter>,
<parameter><decl><type><name>time_t</name></type> <name>check_time</name></decl></parameter>,
<parameter><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type><name>good_keys</name></decl></parameter>
)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>verify_result</name> <init>= <expr><name>LDNS_STATUS_ERR</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rrset</name> <operator>||</operator> <operator>!</operator><name>rrsig</name> <operator>||</operator> <operator>!</operator><name>keys</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>rrset</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>rrsig</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_CRYPTO_NO_RRSIG</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>verify_result</name> <operator>=</operator> <name>LDNS_STATUS_CRYPTO_NO_TRUSTED_DNSKEY</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>rrsig</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>s</name> <init>= <expr><call><name>ldns_verify_rrsig_keylist_time</name><argument_list>(
<argument><expr><name>rrset</name></expr></argument>, <argument><expr><call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>rrsig</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>keys</name></expr></argument>, <argument><expr><name>check_time</name></expr></argument>, <argument><expr><name>good_keys</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>s</name> <operator>==</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>verify_result</name> <operator>=</operator> <name>LDNS_STATUS_OK</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>verify_result</name> <operator>==</operator> <name>LDNS_STATUS_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>verify_result</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><name>s</name> <operator>!=</operator> <name>LDNS_STATUS_ERR</name> <operator>&amp;&amp;</operator> <name>verify_result</name> <operator>==</operator>
<name>LDNS_STATUS_CRYPTO_NO_MATCHING_KEYTAG_DNSKEY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>verify_result</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>verify_result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_verify</name><parameter_list>(<parameter><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type><name>rrset</name></decl></parameter>, <parameter><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type><name>rrsig</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_rr_list</name> <modifier>*</modifier></type><name>keys</name></decl></parameter>,
<parameter><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type><name>good_keys</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_verify_time</name><argument_list>(<argument><expr><name>rrset</name></expr></argument>, <argument><expr><name>rrsig</name></expr></argument>, <argument><expr><name>keys</name></expr></argument>, <argument><expr><call><name>ldns_time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>good_keys</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_verify_notime</name><parameter_list>(<parameter><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type><name>rrset</name></decl></parameter>, <parameter><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type><name>rrsig</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_rr_list</name> <modifier>*</modifier></type><name>keys</name></decl></parameter>, <parameter><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type><name>good_keys</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>verify_result</name> <init>= <expr><name>LDNS_STATUS_ERR</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rrset</name> <operator>||</operator> <operator>!</operator><name>rrsig</name> <operator>||</operator> <operator>!</operator><name>keys</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>rrset</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>rrsig</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_CRYPTO_NO_RRSIG</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>verify_result</name> <operator>=</operator> <name>LDNS_STATUS_CRYPTO_NO_TRUSTED_DNSKEY</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>rrsig</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>s</name> <init>= <expr><call><name>ldns_verify_rrsig_keylist_notime</name><argument_list>(<argument><expr><name>rrset</name></expr></argument>,
<argument><expr><call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>rrsig</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>keys</name></expr></argument>, <argument><expr><name>good_keys</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>verify_result</name> <operator>=</operator> <name>LDNS_STATUS_OK</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>verify_result</name> <operator>==</operator> <name>LDNS_STATUS_ERR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>verify_result</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>s</name> <operator>!=</operator> <name>LDNS_STATUS_ERR</name> <operator>&amp;&amp;</operator> <name>verify_result</name> <operator>==</operator>
<name>LDNS_STATUS_CRYPTO_NO_MATCHING_KEYTAG_DNSKEY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>verify_result</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>verify_result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_rr_list</name> <modifier>*</modifier></type>
<name>ldns_fetch_valid_domain_keys_time</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_resolver</name> <modifier>*</modifier></type><name>res</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>domain</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_rr_list</name> <modifier>*</modifier></type><name>keys</name></decl></parameter>,
<parameter><decl><type><name>time_t</name></type> <name>check_time</name></decl></parameter>,
<parameter><decl><type><name>ldns_status</name> <modifier>*</modifier></type><name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type> <name>trusted_keys</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type> <name>ds_keys</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type> <name>prev_parent_domain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type> <name>parent_domain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type> <name>parent_keys</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&amp;&amp;</operator> <name>domain</name> <operator>&amp;&amp;</operator> <name>keys</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>trusted_keys</name> <operator>=</operator> <call><name>ldns_validate_domain_dnskey_time</name><argument_list>(<argument><expr><name>res</name></expr></argument>,
<argument><expr><name>domain</name></expr></argument>, <argument><expr><name>keys</name></expr></argument>, <argument><expr><name>check_time</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>status</name> <operator>=</operator> <name>LDNS_STATUS_OK</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>status</name> <operator>=</operator> <name>LDNS_STATUS_CRYPTO_NO_TRUSTED_DNSKEY</name></expr>;</expr_stmt>

<expr_stmt><expr><name>parent_domain</name> <operator>=</operator> <call><name>ldns_dname_left_chop</name><argument_list>(<argument><expr><name>domain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>parent_domain</name> <operator>&amp;&amp;</operator>
<call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>parent_domain</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>parent_keys</name> <operator>=</operator>
<call><name>ldns_fetch_valid_domain_keys_time</name><argument_list>(<argument><expr><name>res</name></expr></argument>,
<argument><expr><name>parent_domain</name></expr></argument>,
<argument><expr><name>keys</name></expr></argument>,
<argument><expr><name>check_time</name></expr></argument>,
<argument><expr><name>status</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ds_keys</name> <operator>=</operator>
<call><name>ldns_validate_domain_ds_time</name><argument_list>(<argument><expr><name>res</name></expr></argument>,
<argument><expr><name>domain</name></expr></argument>,
<argument><expr><name>parent_keys</name></expr></argument>,
<argument><expr><name>check_time</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>trusted_keys</name> <operator>=</operator>
<call><name>ldns_fetch_valid_domain_keys_time</name><argument_list>(
<argument><expr><name>res</name></expr></argument>,
<argument><expr><name>domain</name></expr></argument>,
<argument><expr><name>ds_keys</name></expr></argument>,
<argument><expr><name>check_time</name></expr></argument>,
<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rr_list_deep_free</name><argument_list>(<argument><expr><name>ds_keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>status</name> <operator>=</operator> <name>LDNS_STATUS_CRYPTO_NO_TRUSTED_DS</name></expr> ;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>ldns_rr_list_deep_free</name><argument_list>(<argument><expr><name>parent_keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>parent_domain</name> <operator>=</operator> <call><name>ldns_dname_left_chop</name><argument_list>(<argument><expr><operator>(</operator>
<name>prev_parent_domain</name>
<operator>=</operator> <name>parent_domain</name>
<operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>prev_parent_domain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>parent_domain</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>parent_domain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>trusted_keys</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_rr_list</name> <modifier>*</modifier></type>
<name>ldns_fetch_valid_domain_keys</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_resolver</name> <modifier>*</modifier></type><name>res</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>domain</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_rr_list</name> <modifier>*</modifier></type><name>keys</name></decl></parameter>,
<parameter><decl><type><name>ldns_status</name> <modifier>*</modifier></type><name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_fetch_valid_domain_keys_time</name><argument_list>(
<argument><expr><name>res</name></expr></argument>, <argument><expr><name>domain</name></expr></argument>, <argument><expr><name>keys</name></expr></argument>, <argument><expr><call><name>ldns_time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_rr_list</name> <modifier>*</modifier></type>
<name>ldns_validate_domain_dnskey_time</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>ldns_resolver</name> <modifier>*</modifier></type> <name>res</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type> <name>domain</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_rr_list</name> <modifier>*</modifier></type> <name>keys</name></decl></parameter>,
<parameter><decl><type><name>time_t</name></type> <name>check_time</name></decl></parameter>
)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_pkt</name> <modifier>*</modifier></type> <name>keypkt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr</name> <modifier>*</modifier></type> <name>cur_key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>key_i</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>uint16_t</name></type> <name>key_j</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>uint16_t</name></type> <name>key_k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>sig_i</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>ldns_rr</name> <modifier>*</modifier></type> <name>cur_sig</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type> <name>domain_keys</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type> <name>domain_sigs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type> <name>trusted_keys</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>keypkt</name> <operator>=</operator> <call><name>ldns_resolver_query</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>domain</name></expr></argument>,
<argument><expr><name>LDNS_RR_TYPE_DNSKEY</name></expr></argument>, <argument><expr><name>LDNS_RR_CLASS_IN</name></expr></argument>, <argument><expr><name>LDNS_RD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>keypkt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>domain_keys</name> <operator>=</operator> <call><name>ldns_pkt_rr_list_by_type</name><argument_list>(<argument><expr><name>keypkt</name></expr></argument>,
<argument><expr><name>LDNS_RR_TYPE_DNSKEY</name></expr></argument>,
<argument><expr><name>LDNS_SECTION_ANSWER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>domain_sigs</name> <operator>=</operator> <call><name>ldns_pkt_rr_list_by_type</name><argument_list>(<argument><expr><name>keypkt</name></expr></argument>,
<argument><expr><name>LDNS_RR_TYPE_RRSIG</name></expr></argument>,
<argument><expr><name>LDNS_SECTION_ANSWER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>key_i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>key_i</name><operator>&lt;</operator> <call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>domain_keys</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>key_i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>cur_key</name> <operator>=</operator> <call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>domain_keys</name></expr></argument>, <argument><expr><name>key_i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>key_j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>key_j</name><operator>&lt;</operator><call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>key_j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ldns_rr_compare_ds</name><argument_list>(<argument><expr><call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>keys</name></expr></argument>, <argument><expr><name>key_j</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>cur_key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>trusted_keys</name> <operator>=</operator> <call><name>ldns_rr_list_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>sig_i</name><operator>=</operator><literal type="number">0</literal></expr>;</init>
<condition><expr><name>sig_i</name><operator>&lt;</operator><call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>domain_sigs</name></expr></argument>)</argument_list></call></expr>;</condition>
<incr><expr><name>sig_i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>cur_sig</name> <operator>=</operator> <call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>domain_sigs</name></expr></argument>, <argument><expr><name>sig_i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ldns_rdf2native_int16</name><argument_list>(
<argument><expr><call><name>ldns_rr_rrsig_keytag</name><argument_list>(<argument><expr><name>cur_sig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>==</operator> <call><name>ldns_calc_keytag</name><argument_list>(<argument><expr><name>cur_key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ldns_verify_rrsig_time</name><argument_list>(
<argument><expr><name>domain_keys</name></expr></argument>,
<argument><expr><name>cur_sig</name></expr></argument>,
<argument><expr><name>cur_key</name></expr></argument>,
<argument><expr><name>check_time</name></expr></argument>)</argument_list></call>
<operator>==</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>



<for>for <control>(<init><expr><name>key_k</name><operator>=</operator><literal type="number">0</literal></expr>;</init>
<condition><expr><name>key_k</name><operator>&lt;</operator><call><name>ldns_rr_list_rr_count</name><argument_list>(
<argument><expr><name>domain_keys</name></expr></argument>)</argument_list></call></expr>;</condition>
<incr><expr><name>key_k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_rr_list_push_rr</name><argument_list>(
<argument><expr><name>trusted_keys</name></expr></argument>,
<argument><expr><call><name>ldns_rr_clone</name><argument_list>(
<argument><expr><call><name>ldns_rr_list_rr</name><argument_list>(
<argument><expr><name>domain_keys</name></expr></argument>,
<argument><expr><name>key_k</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>ldns_rr_list_deep_free</name><argument_list>(<argument><expr><name>domain_keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rr_list_deep_free</name><argument_list>(<argument><expr><name>domain_sigs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_pkt_free</name><argument_list>(<argument><expr><name>keypkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>trusted_keys</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>ldns_rr_list_push_rr</name><argument_list>(<argument><expr><name>trusted_keys</name></expr></argument>,
<argument><expr><call><name>ldns_rr_clone</name><argument_list>(<argument><expr><name>cur_key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><call><name>ldns_rr_list_deep_free</name><argument_list>(<argument><expr><name>domain_keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rr_list_deep_free</name><argument_list>(<argument><expr><name>domain_sigs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_pkt_free</name><argument_list>(<argument><expr><name>keypkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>trusted_keys</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_rr_list</name> <modifier>*</modifier></type>
<name>ldns_validate_domain_dnskey</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_resolver</name> <modifier>*</modifier></type> <name>res</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type> <name>domain</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_rr_list</name> <modifier>*</modifier></type> <name>keys</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_validate_domain_dnskey_time</name><argument_list>(
<argument><expr><name>res</name></expr></argument>, <argument><expr><name>domain</name></expr></argument>, <argument><expr><name>keys</name></expr></argument>, <argument><expr><call><name>ldns_time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_rr_list</name> <modifier>*</modifier></type>
<name>ldns_validate_domain_ds_time</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>ldns_resolver</name> <modifier>*</modifier></type><name>res</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type> <name>domain</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_rr_list</name> <modifier>*</modifier></type> <name>keys</name></decl></parameter>,
<parameter><decl><type><name>time_t</name></type> <name>check_time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_pkt</name> <modifier>*</modifier></type> <name>dspkt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>key_i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type> <name>rrset</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type> <name>sigs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type> <name>trusted_keys</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>dspkt</name> <operator>=</operator> <call><name>ldns_resolver_query</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>domain</name></expr></argument>,
<argument><expr><name>LDNS_RR_TYPE_DS</name></expr></argument>, <argument><expr><name>LDNS_RR_CLASS_IN</name></expr></argument>, <argument><expr><name>LDNS_RD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dspkt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rrset</name> <operator>=</operator> <call><name>ldns_pkt_rr_list_by_type</name><argument_list>(<argument><expr><name>dspkt</name></expr></argument>,
<argument><expr><name>LDNS_RR_TYPE_DS</name></expr></argument>,
<argument><expr><name>LDNS_SECTION_ANSWER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sigs</name> <operator>=</operator> <call><name>ldns_pkt_rr_list_by_type</name><argument_list>(<argument><expr><name>dspkt</name></expr></argument>,
<argument><expr><name>LDNS_RR_TYPE_RRSIG</name></expr></argument>,
<argument><expr><name>LDNS_SECTION_ANSWER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>ldns_verify_time</name><argument_list>(<argument><expr><name>rrset</name></expr></argument>, <argument><expr><name>sigs</name></expr></argument>, <argument><expr><name>keys</name></expr></argument>, <argument><expr><name>check_time</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call>
<operator>==</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>trusted_keys</name> <operator>=</operator> <call><name>ldns_rr_list_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>key_i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>key_i</name><operator>&lt;</operator><call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>rrset</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>key_i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_rr_list_push_rr</name><argument_list>(<argument><expr><name>trusted_keys</name></expr></argument>,
<argument><expr><call><name>ldns_rr_clone</name><argument_list>(<argument><expr><call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>rrset</name></expr></argument>,
<argument><expr><name>key_i</name></expr></argument>)</argument_list></call></expr></argument>
)</argument_list></call></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ldns_rr_list_deep_free</name><argument_list>(<argument><expr><name>rrset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rr_list_deep_free</name><argument_list>(<argument><expr><name>sigs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_pkt_free</name><argument_list>(<argument><expr><name>dspkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>trusted_keys</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_rr_list</name> <modifier>*</modifier></type>
<name>ldns_validate_domain_ds</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_resolver</name> <modifier>*</modifier></type><name>res</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type> <name>domain</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_rr_list</name> <modifier>*</modifier></type> <name>keys</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_validate_domain_ds_time</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>domain</name></expr></argument>, <argument><expr><name>keys</name></expr></argument>, <argument><expr><call><name>ldns_time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_verify_trusted_time</name><parameter_list>(
<parameter><decl><type><name>ldns_resolver</name> <modifier>*</modifier></type><name>res</name></decl></parameter>,
<parameter><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type><name>rrset</name></decl></parameter>,
<parameter><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type> <name>rrsigs</name></decl></parameter>,
<parameter><decl><type><name>time_t</name></type> <name>check_time</name></decl></parameter>,
<parameter><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type> <name>validating_keys</name></decl></parameter>
)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>sig_i</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>uint16_t</name></type> <name>key_i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr</name> <modifier>*</modifier></type> <name>cur_sig</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>ldns_rr</name> <modifier>*</modifier></type> <name>cur_key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type> <name>trusted_keys</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>result</name> <init>= <expr><name>LDNS_STATUS_ERR</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name> <operator>||</operator> <operator>!</operator><name>rrset</name> <operator>||</operator> <operator>!</operator><name>rrsigs</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>rrset</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>rrsigs</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_CRYPTO_NO_RRSIG</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>sig_i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>sig_i</name> <operator>&lt;</operator> <call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>rrsigs</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>sig_i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>cur_sig</name> <operator>=</operator> <call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>rrsigs</name></expr></argument>, <argument><expr><name>sig_i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>trusted_keys</name> <operator>=</operator> <call><name>ldns_fetch_valid_domain_keys_time</name><argument_list>(
<argument><expr><name>res</name></expr></argument>,
<argument><expr><call><name>ldns_rr_rrsig_signame</name><argument_list>(<argument><expr><name>cur_sig</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ldns_resolver_dnssec_anchors</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>check_time</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>key_i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init>
<condition><expr><name>key_i</name> <operator>&lt;</operator> <call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>trusted_keys</name></expr></argument>)</argument_list></call></expr>;</condition>
<incr><expr><name>key_i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>cur_key</name> <operator>=</operator> <call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>trusted_keys</name></expr></argument>, <argument><expr><name>key_i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>result</name> <operator>=</operator> <call><name>ldns_verify_rrsig_time</name><argument_list>(<argument><expr><name>rrset</name></expr></argument>,
<argument><expr><name>cur_sig</name></expr></argument>,
<argument><expr><name>cur_key</name></expr></argument>,
<argument><expr><name>check_time</name></expr></argument>)</argument_list></call><operator>)</operator>
<operator>==</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>validating_keys</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_rr_list_push_rr</name><argument_list>(<argument><expr><name>validating_keys</name></expr></argument>,
<argument><expr><call><name>ldns_rr_clone</name><argument_list>(<argument><expr><name>cur_key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_rr_list_deep_free</name><argument_list>(<argument><expr><name>trusted_keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>ldns_rr_list_deep_free</name><argument_list>(<argument><expr><name>trusted_keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_verify_trusted</name><parameter_list>(
<parameter><decl><type><name>ldns_resolver</name> <modifier>*</modifier></type><name>res</name></decl></parameter>,
<parameter><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type><name>rrset</name></decl></parameter>,
<parameter><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type> <name>rrsigs</name></decl></parameter>,
<parameter><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type> <name>validating_keys</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_verify_trusted_time</name><argument_list>(
<argument><expr><name>res</name></expr></argument>, <argument><expr><name>rrset</name></expr></argument>, <argument><expr><name>rrsigs</name></expr></argument>, <argument><expr><call><name>ldns_time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>validating_keys</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>ldns_status</name></type>
<name>ldns_dnssec_verify_denial</name><parameter_list>(<parameter><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>rr</name></decl></parameter>,
<parameter><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type><name>nsecs</name></decl></parameter>,
<parameter><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type><name>rrsigs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>rr_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>wildcard_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>chopped_dname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>cur_nsec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>rrsig</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>name_covered</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>type_covered</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>wildcard_covered</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>wildcard_type_covered</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>wildcard_name</name> <operator>=</operator> <call><name>ldns_dname_new_frm_str</name><argument_list>(<argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rr_name</name> <operator>=</operator> <call><name>ldns_rr_owner</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>chopped_dname</name> <operator>=</operator> <call><name>ldns_dname_left_chop</name><argument_list>(<argument><expr><name>rr_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ldns_dname_cat</name><argument_list>(<argument><expr><name>wildcard_name</name></expr></argument>, <argument><expr><name>chopped_dname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>chopped_dname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>nsecs</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>cur_nsec</name> <operator>=</operator> <call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>nsecs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_dname_compare</name><argument_list>(<argument><expr><name>rr_name</name></expr></argument>, <argument><expr><call><name>ldns_rr_owner</name><argument_list>(<argument><expr><name>cur_nsec</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>rrsig</name> <operator>=</operator> <call><name>ldns_dnssec_get_rrsig_for_name_and_type</name><argument_list>(
<argument><expr><call><name>ldns_rr_owner</name><argument_list>(<argument><expr><name>cur_nsec</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name>cur_nsec</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>rrsigs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rrsig</name> <operator>&amp;&amp;</operator> <call><name>ldns_rdf2native_int8</name><argument_list>(<argument><expr><call><name>ldns_rr_rrsig_labels</name><argument_list>(<argument><expr><name>rrsig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>==</operator> <call><name>ldns_dname_label_count</name><argument_list>(<argument><expr><name>rr_name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>wildcard_covered</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ldns_nsec_bitmap_covers_type</name><argument_list>(<argument><expr><call><name>ldns_nsec_get_bitmap</name><argument_list>(<argument><expr><name>cur_nsec</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>type_covered</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_nsec_covers_name</name><argument_list>(<argument><expr><name>cur_nsec</name></expr></argument>, <argument><expr><name>rr_name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>name_covered</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ldns_dname_compare</name><argument_list>(<argument><expr><name>wildcard_name</name></expr></argument>,
<argument><expr><call><name>ldns_rr_owner</name><argument_list>(<argument><expr><name>cur_nsec</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ldns_nsec_bitmap_covers_type</name><argument_list>(<argument><expr><call><name>ldns_nsec_get_bitmap</name><argument_list>(<argument><expr><name>cur_nsec</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>wildcard_type_covered</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ldns_nsec_covers_name</name><argument_list>(<argument><expr><name>cur_nsec</name></expr></argument>, <argument><expr><name>wildcard_name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>wildcard_covered</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>wildcard_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type_covered</name> <operator>||</operator> <operator>!</operator><name>name_covered</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_DNSSEC_NSEC_RR_NOT_COVERED</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>wildcard_type_covered</name> <operator>||</operator> <operator>!</operator><name>wildcard_covered</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_DNSSEC_NSEC_WILDCARD_NOT_COVERED</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>LDNS_STATUS_OK</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>ldns_status</name></type>
<name>ldns_dnssec_verify_denial_nsec3_match</name><argument_list>( <argument><expr><name>ldns_rr</name> <operator>*</operator><name>rr</name></expr></argument>
, <argument><expr><name>ldns_rr_list</name> <operator>*</operator><name>nsecs</name></expr></argument>
, <argument><expr><call><name>ATTR_UNUSED</name><argument_list>(<argument><expr><name>ldns_rr_list</name> <operator>*</operator><name>rrsigs</name></expr></argument>)</argument_list></call></expr></argument>
, <argument><expr><name>ldns_pkt_rcode</name> <name>packet_rcode</name></expr></argument>
, <argument><expr><name>ldns_rr_type</name> <name>packet_qtype</name></expr></argument>
, <argument><expr><name>bool</name> <name>packet_nodata</name></expr></argument>
, <argument><expr><name>ldns_rr</name> <operator>*</operator><operator>*</operator><name>match</name></expr></argument>
)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>closest_encloser</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>wildcard</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>hashed_wildcard_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>wildcard_covered</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>zone_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>hashed_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>next_closer</name> <init>= <expr><name>next_closer</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>hashed_next_closer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>result</name> <init>= <expr><name>LDNS_STATUS_DNSSEC_NSEC_RR_NOT_COVERED</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>match</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>match</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>zone_name</name> <operator>=</operator> <call><name>ldns_dname_left_chop</name><argument_list>(<argument><expr><call><name>ldns_rr_owner</name><argument_list>(<argument><expr><call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>nsecs</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>packet_rcode</name> <operator>==</operator> <name>LDNS_RCODE_NXDOMAIN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>closest_encloser</name> <operator>=</operator> <call><name>ldns_dnssec_nsec3_closest_encloser</name><argument_list>(
<argument><expr><call><name>ldns_rr_owner</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>nsecs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>closest_encloser</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>LDNS_STATUS_DNSSEC_NSEC_RR_NOT_COVERED</name></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>wildcard</name> <operator>=</operator> <call><name>ldns_dname_new_frm_str</name><argument_list>(<argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ldns_dname_cat</name><argument_list>(<argument><expr><name>wildcard</name></expr></argument>, <argument><expr><name>closest_encloser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>nsecs</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>hashed_wildcard_name</name> <operator>=</operator>
<call><name>ldns_nsec3_hash_name_frm_nsec3</name><argument_list>(<argument><expr><call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>nsecs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>wildcard</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ldns_dname_cat</name><argument_list>(<argument><expr><name>hashed_wildcard_name</name></expr></argument>, <argument><expr><name>zone_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ldns_nsec_covers_name</name><argument_list>(<argument><expr><call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>nsecs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>hashed_wildcard_name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>wildcard_covered</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>match</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>match</name> <operator>=</operator> <call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>nsecs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>hashed_wildcard_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <name>wildcard_covered</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>LDNS_STATUS_DNSSEC_NSEC_WILDCARD_NOT_COVERED</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>LDNS_STATUS_OK</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>closest_encloser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>wildcard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>packet_nodata</name> <operator>&amp;&amp;</operator> <name>packet_qtype</name> <operator>!=</operator> <name>LDNS_RR_TYPE_DS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hashed_name</name> <operator>=</operator> <call><name>ldns_nsec3_hash_name_frm_nsec3</name><argument_list>(
<argument><expr><call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>nsecs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ldns_rr_owner</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ldns_dname_cat</name><argument_list>(<argument><expr><name>hashed_name</name></expr></argument>, <argument><expr><name>zone_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>nsecs</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ldns_dname_compare</name><argument_list>(<argument><expr><name>hashed_name</name></expr></argument>,
<argument><expr><call><name>ldns_rr_owner</name><argument_list>(<argument><expr><call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>nsecs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ldns_nsec_bitmap_covers_type</name><argument_list>(
<argument><expr><call><name>ldns_nsec3_bitmap</name><argument_list>(<argument><expr><call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>nsecs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>packet_qtype</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator>
<operator>!</operator><call><name>ldns_nsec_bitmap_covers_type</name><argument_list>(
<argument><expr><call><name>ldns_nsec3_bitmap</name><argument_list>(<argument><expr><call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>nsecs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>LDNS_RR_TYPE_CNAME</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>LDNS_STATUS_OK</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>match</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>match</name> <operator>=</operator> <call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>nsecs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>LDNS_STATUS_DNSSEC_NSEC_RR_NOT_COVERED</name></expr>;</expr_stmt>

<expr_stmt><expr><name>closest_encloser</name> <operator>=</operator> <call><name>ldns_dnssec_nsec3_closest_encloser</name><argument_list>(
<argument><expr><call><name>ldns_rr_owner</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>nsecs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>closest_encloser</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>LDNS_STATUS_NSEC3_ERR</name></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>wildcard</name> <operator>=</operator> <call><name>ldns_dname_new_frm_str</name><argument_list>(<argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ldns_dname_cat</name><argument_list>(<argument><expr><name>wildcard</name></expr></argument>, <argument><expr><name>closest_encloser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>nsecs</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>hashed_wildcard_name</name> <operator>=</operator>
<call><name>ldns_nsec3_hash_name_frm_nsec3</name><argument_list>(<argument><expr><call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>nsecs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>wildcard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ldns_dname_cat</name><argument_list>(<argument><expr><name>hashed_wildcard_name</name></expr></argument>, <argument><expr><name>zone_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ldns_dname_compare</name><argument_list>(<argument><expr><name>hashed_wildcard_name</name></expr></argument>,
<argument><expr><call><name>ldns_rr_owner</name><argument_list>(<argument><expr><call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>nsecs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ldns_nsec_bitmap_covers_type</name><argument_list>(
<argument><expr><call><name>ldns_nsec3_bitmap</name><argument_list>(<argument><expr><call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>nsecs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>packet_qtype</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator>
<operator>!</operator><call><name>ldns_nsec_bitmap_covers_type</name><argument_list>(
<argument><expr><call><name>ldns_nsec3_bitmap</name><argument_list>(<argument><expr><call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>nsecs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>LDNS_RR_TYPE_CNAME</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>LDNS_STATUS_OK</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>match</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>match</name> <operator>=</operator> <call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>nsecs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>hashed_wildcard_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>closest_encloser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>wildcard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>packet_nodata</name> <operator>&amp;&amp;</operator> <name>packet_qtype</name> <operator>==</operator> <name>LDNS_RR_TYPE_DS</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>hashed_name</name> <operator>=</operator> <call><name>ldns_nsec3_hash_name_frm_nsec3</name><argument_list>(<argument><expr><call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>nsecs</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ldns_rr_owner</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ldns_dname_cat</name><argument_list>(<argument><expr><name>hashed_name</name></expr></argument>, <argument><expr><name>zone_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>nsecs</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ldns_dname_compare</name><argument_list>(<argument><expr><name>hashed_name</name></expr></argument>,
<argument><expr><call><name>ldns_rr_owner</name><argument_list>(<argument><expr><call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>nsecs</name></expr></argument>,
<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ldns_nsec_bitmap_covers_type</name><argument_list>(
<argument><expr><call><name>ldns_nsec3_bitmap</name><argument_list>(<argument><expr><call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>nsecs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>LDNS_RR_TYPE_DS</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator>
<operator>!</operator><call><name>ldns_nsec_bitmap_covers_type</name><argument_list>(
<argument><expr><call><name>ldns_nsec3_bitmap</name><argument_list>(<argument><expr><call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>nsecs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>LDNS_RR_TYPE_CNAME</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>LDNS_STATUS_OK</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>match</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>match</name> <operator>=</operator> <call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>nsecs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name>result</name> <operator>=</operator> <name>LDNS_STATUS_DNSSEC_NSEC_RR_NOT_COVERED</name></expr>;</expr_stmt>

<expr_stmt><expr><name>closest_encloser</name> <operator>=</operator> <call><name>ldns_dnssec_nsec3_closest_encloser</name><argument_list>(
<argument><expr><call><name>ldns_rr_owner</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>nsecs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>closest_encloser</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>LDNS_STATUS_NSEC3_ERR</name></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>ldns_dname_label_count</name><argument_list>(<argument><expr><name>closest_encloser</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal>
<operator>&gt;=</operator> <call><name>ldns_dname_label_count</name><argument_list>(<argument><expr><call><name>ldns_rr_owner</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>hashed_next_closer</name> <operator>=</operator> <name>hashed_name</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>




<expr_stmt><expr><name>next_closer</name> <operator>=</operator> <call><name>ldns_dname_clone_from</name><argument_list>(
<argument><expr><call><name>ldns_rr_owner</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ldns_dname_label_count</name><argument_list>(<argument><expr><call><name>ldns_rr_owner</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>-</operator> <operator>(</operator><call><name>ldns_dname_label_count</name><argument_list>(<argument><expr><name>closest_encloser</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hashed_next_closer</name> <operator>=</operator> <call><name>ldns_nsec3_hash_name_frm_nsec3</name><argument_list>(
<argument><expr><call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>nsecs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>next_closer</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ldns_dname_cat</name><argument_list>(<argument><expr><name>hashed_next_closer</name></expr></argument>, <argument><expr><name>zone_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>nsecs</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ldns_nsec_covers_name</name><argument_list>(<argument><expr><call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>nsecs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>hashed_next_closer</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>ldns_nsec3_optout</name><argument_list>(<argument><expr><call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>nsecs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>LDNS_STATUS_OK</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>match</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>match</name> <operator>=</operator> <call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>nsecs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><call><name>ldns_dname_label_count</name><argument_list>(<argument><expr><name>closest_encloser</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal>
<operator>&lt;</operator> <call><name>ldns_dname_label_count</name><argument_list>(<argument><expr><call><name>ldns_rr_owner</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>hashed_next_closer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>next_closer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>closest_encloser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<label><name>done</name>:</label>
<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>zone_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>ldns_status</name></type>
<name>ldns_dnssec_verify_denial_nsec3</name><parameter_list>(<parameter><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>rr</name></decl></parameter>,
<parameter><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type><name>nsecs</name></decl></parameter>,
<parameter><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type><name>rrsigs</name></decl></parameter>,
<parameter><decl><type><name>ldns_pkt_rcode</name></type> <name>packet_rcode</name></decl></parameter>,
<parameter><decl><type><name>ldns_rr_type</name></type> <name>packet_qtype</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>packet_nodata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_dnssec_verify_denial_nsec3_match</name><argument_list>(
<argument><expr><name>rr</name></expr></argument>, <argument><expr><name>nsecs</name></expr></argument>, <argument><expr><name>rrsigs</name></expr></argument>, <argument><expr><name>packet_rcode</name></expr></argument>,
<argument><expr><name>packet_qtype</name></expr></argument>, <argument><expr><name>packet_nodata</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>
)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GOST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>EVP_PKEY</name><modifier>*</modifier></type>
<name>ldns_gost2pkey_raw</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keylen</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>asn</name><index>[<expr><literal type="number">37</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0x85</literal></expr>,
<expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0x85</literal></expr>,
<expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x03</literal></expr>,
<expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x40</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>encoded</name><index>[<expr><literal type="number">37</literal><operator>+</operator><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>pp</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>keylen</name> <operator>!=</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>encoded</name></expr></argument>, <argument><expr><name>asn</name></expr></argument>, <argument><expr><literal type="number">37</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>encoded</name><operator>+</operator><literal type="number">37</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pp</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>encoded</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><call><name>d2i_PUBKEY</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pp</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>encoded</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ldns_status</name></type>
<name>ldns_verify_rrsig_gost_raw</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>sig</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>siglen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_buffer</name><modifier>*</modifier></type> <name>rrset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keylen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>EVP_PKEY</name> <modifier>*</modifier></type><name>evp_key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ldns_key_EVP_load_gost_id</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>evp_key</name> <operator>=</operator> <call><name>ldns_gost2pkey_raw</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>evp_key</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>LDNS_STATUS_CRYPTO_BOGUS</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ldns_verify_rrsig_evp_raw</name><argument_list>(<argument><expr><name>sig</name></expr></argument>, <argument><expr><name>siglen</name></expr></argument>, <argument><expr><name>rrset</name></expr></argument>,
<argument><expr><name>evp_key</name></expr></argument>, <argument><expr><call><name>EVP_get_digestbyname</name><argument_list>(<argument><expr><literal type="string">"md_gost94"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVP_PKEY_free</name><argument_list>(<argument><expr><name>evp_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ED25519</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>EVP_PKEY</name><modifier>*</modifier></type>
<name>ldns_ed255192pkey_raw</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keylen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>pp</name> <init>= <expr><name>key</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>EVP_PKEY</name> <modifier>*</modifier></type><name>evp_key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>EC_KEY</name> <modifier>*</modifier></type><name>ec</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>keylen</name> <operator>!=</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ec</name> <operator>=</operator> <call><name>EC_KEY_new_by_curve_name</name><argument_list>(<argument><expr><name>NID_X25519</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ec</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>o2i_ECPublicKey</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pp</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>keylen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EC_KEY_free</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>evp_key</name> <operator>=</operator> <call><name>EVP_PKEY_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>evp_key</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EC_KEY_free</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EVP_PKEY_assign_EC_KEY</name><argument_list>(<argument><expr><name>evp_key</name></expr></argument>, <argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EVP_PKEY_free</name><argument_list>(<argument><expr><name>evp_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EC_KEY_free</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>evp_key</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ldns_status</name></type>
<name>ldns_verify_rrsig_ed25519_raw</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>sig</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>siglen</name></decl></parameter>,
<parameter><decl><type><name>ldns_buffer</name><modifier>*</modifier></type> <name>rrset</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keylen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>EVP_PKEY</name> <modifier>*</modifier></type><name>evp_key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name>evp_key</name> <operator>=</operator> <call><name>ldns_ed255192pkey_raw</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>evp_key</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>LDNS_STATUS_CRYPTO_BOGUS</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ldns_verify_rrsig_evp_raw</name><argument_list>(<argument><expr><name>sig</name></expr></argument>, <argument><expr><name>siglen</name></expr></argument>, <argument><expr><name>rrset</name></expr></argument>, <argument><expr><name>evp_key</name></expr></argument>,
<argument><expr><call><name>EVP_sha512</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVP_PKEY_free</name><argument_list>(<argument><expr><name>evp_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ED448</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>EVP_PKEY</name><modifier>*</modifier></type>
<name>ldns_ed4482pkey_raw</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keylen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>pp</name> <init>= <expr><name>key</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>EVP_PKEY</name> <modifier>*</modifier></type><name>evp_key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>EC_KEY</name> <modifier>*</modifier></type><name>ec</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>keylen</name> <operator>!=</operator> <literal type="number">57</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ec</name> <operator>=</operator> <call><name>EC_KEY_new_by_curve_name</name><argument_list>(<argument><expr><name>NID_X448</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ec</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>o2i_ECPublicKey</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pp</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>keylen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EC_KEY_free</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>evp_key</name> <operator>=</operator> <call><name>EVP_PKEY_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>evp_key</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EC_KEY_free</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EVP_PKEY_assign_EC_KEY</name><argument_list>(<argument><expr><name>evp_key</name></expr></argument>, <argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EVP_PKEY_free</name><argument_list>(<argument><expr><name>evp_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EC_KEY_free</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>evp_key</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ldns_status</name></type>
<name>ldns_verify_rrsig_ed448_raw</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>sig</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>siglen</name></decl></parameter>,
<parameter><decl><type><name>ldns_buffer</name><modifier>*</modifier></type> <name>rrset</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keylen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>EVP_PKEY</name> <modifier>*</modifier></type><name>evp_key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name>evp_key</name> <operator>=</operator> <call><name>ldns_ed4482pkey_raw</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>evp_key</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>LDNS_STATUS_CRYPTO_BOGUS</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ldns_verify_rrsig_evp_raw</name><argument_list>(<argument><expr><name>sig</name></expr></argument>, <argument><expr><name>siglen</name></expr></argument>, <argument><expr><name>rrset</name></expr></argument>, <argument><expr><name>evp_key</name></expr></argument>,
<argument><expr><call><name>EVP_sha512</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVP_PKEY_free</name><argument_list>(<argument><expr><name>evp_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ECDSA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>EVP_PKEY</name><modifier>*</modifier></type>
<name>ldns_ecdsa2pkey_raw</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>algo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">256</literal><operator>+</operator><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>pp</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>EVP_PKEY</name> <modifier>*</modifier></type><name>evp_key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>EC_KEY</name> <modifier>*</modifier></type><name>ec</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>algo</name> <operator>==</operator> <name>LDNS_ECDSAP256SHA256</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>keylen</name> <operator>!=</operator> <literal type="number">2</literal><operator>*</operator><literal type="number">256</literal><operator>/</operator><literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ec</name> <operator>=</operator> <call><name>EC_KEY_new_by_curve_name</name><argument_list>(<argument><expr><name>NID_X9_62_prime256v1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>algo</name> <operator>==</operator> <name>LDNS_ECDSAP384SHA384</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>keylen</name> <operator>!=</operator> <literal type="number">2</literal><operator>*</operator><literal type="number">384</literal><operator>/</operator><literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ec</name> <operator>=</operator> <call><name>EC_KEY_new_by_curve_name</name><argument_list>(<argument><expr><name>NID_secp384r1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>ec</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ec</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>keylen</name><operator>+</operator><literal type="number">1</literal> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>POINT_CONVERSION_UNCOMPRESSED</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>buf</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>o2i_ECPublicKey</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pp</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>keylen</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EC_KEY_free</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>evp_key</name> <operator>=</operator> <call><name>EVP_PKEY_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>evp_key</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EC_KEY_free</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EVP_PKEY_assign_EC_KEY</name><argument_list>(<argument><expr><name>evp_key</name></expr></argument>, <argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>EVP_PKEY_free</name><argument_list>(<argument><expr><name>evp_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EC_KEY_free</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>evp_key</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ldns_status</name></type>
<name>ldns_verify_rrsig_ecdsa_raw</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>sig</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>siglen</name></decl></parameter>,
<parameter><decl><type><name>ldns_buffer</name><modifier>*</modifier></type> <name>rrset</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>algo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>EVP_PKEY</name> <modifier>*</modifier></type><name>evp_key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>EVP_MD</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>

<expr_stmt><expr><name>evp_key</name> <operator>=</operator> <call><name>ldns_ecdsa2pkey_raw</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>algo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>evp_key</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>LDNS_STATUS_CRYPTO_BOGUS</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>algo</name> <operator>==</operator> <name>LDNS_ECDSAP256SHA256</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>EVP_sha256</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>EVP_sha384</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ldns_verify_rrsig_evp_raw</name><argument_list>(<argument><expr><name>sig</name></expr></argument>, <argument><expr><name>siglen</name></expr></argument>, <argument><expr><name>rrset</name></expr></argument>, <argument><expr><name>evp_key</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVP_PKEY_free</name><argument_list>(<argument><expr><name>evp_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>ldns_status</name></type>
<name>ldns_verify_rrsig_buffers</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>rawsig_buf</name></decl></parameter>, <parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>verify_buf</name></decl></parameter>,
<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>key_buf</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>algo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_verify_rrsig_buffers_raw</name><argument_list>(
<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><call><name>ldns_buffer_begin</name><argument_list>(<argument><expr><name>rawsig_buf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ldns_buffer_position</name><argument_list>(<argument><expr><name>rawsig_buf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>verify_buf</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><call><name>ldns_buffer_begin</name><argument_list>(<argument><expr><name>key_buf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ldns_buffer_position</name><argument_list>(<argument><expr><name>key_buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>algo</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_verify_rrsig_buffers_raw</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>sig</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>siglen</name></decl></parameter>,
<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>verify_buf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keylen</name></decl></parameter>,
<parameter><decl><type><name>uint8_t</name></type> <name>algo</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<switch>switch<condition>(<expr><name>algo</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_DSA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>LDNS_DSA</name></expr>:</case>
<case>case <expr><name>LDNS_DSA_NSEC3</name></expr>:</case>
<return>return <expr><call><name>ldns_verify_rrsig_dsa_raw</name><argument_list>(<argument><expr><name>sig</name></expr></argument>,
<argument><expr><name>siglen</name></expr></argument>,
<argument><expr><name>verify_buf</name></expr></argument>,
<argument><expr><name>key</name></expr></argument>,
<argument><expr><name>keylen</name></expr></argument>)</argument_list></call></expr>;</return>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>LDNS_RSASHA1</name></expr>:</case>
<case>case <expr><name>LDNS_RSASHA1_NSEC3</name></expr>:</case>
<return>return <expr><call><name>ldns_verify_rrsig_rsasha1_raw</name><argument_list>(<argument><expr><name>sig</name></expr></argument>,
<argument><expr><name>siglen</name></expr></argument>,
<argument><expr><name>verify_buf</name></expr></argument>,
<argument><expr><name>key</name></expr></argument>,
<argument><expr><name>keylen</name></expr></argument>)</argument_list></call></expr>;</return>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SHA2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>LDNS_RSASHA256</name></expr>:</case>
<return>return <expr><call><name>ldns_verify_rrsig_rsasha256_raw</name><argument_list>(<argument><expr><name>sig</name></expr></argument>,
<argument><expr><name>siglen</name></expr></argument>,
<argument><expr><name>verify_buf</name></expr></argument>,
<argument><expr><name>key</name></expr></argument>,
<argument><expr><name>keylen</name></expr></argument>)</argument_list></call></expr>;</return>
<break>break;</break>
<case>case <expr><name>LDNS_RSASHA512</name></expr>:</case>
<return>return <expr><call><name>ldns_verify_rrsig_rsasha512_raw</name><argument_list>(<argument><expr><name>sig</name></expr></argument>,
<argument><expr><name>siglen</name></expr></argument>,
<argument><expr><name>verify_buf</name></expr></argument>,
<argument><expr><name>key</name></expr></argument>,
<argument><expr><name>keylen</name></expr></argument>)</argument_list></call></expr>;</return>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GOST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>LDNS_ECC_GOST</name></expr>:</case>
<return>return <expr><call><name>ldns_verify_rrsig_gost_raw</name><argument_list>(<argument><expr><name>sig</name></expr></argument>, <argument><expr><name>siglen</name></expr></argument>, <argument><expr><name>verify_buf</name></expr></argument>,
<argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>)</argument_list></call></expr>;</return>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ECDSA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>LDNS_ECDSAP256SHA256</name></expr>:</case>
<case>case <expr><name>LDNS_ECDSAP384SHA384</name></expr>:</case>
<return>return <expr><call><name>ldns_verify_rrsig_ecdsa_raw</name><argument_list>(<argument><expr><name>sig</name></expr></argument>, <argument><expr><name>siglen</name></expr></argument>, <argument><expr><name>verify_buf</name></expr></argument>,
<argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>algo</name></expr></argument>)</argument_list></call></expr>;</return>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ED25519</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>LDNS_ED25519</name></expr>:</case>
<return>return <expr><call><name>ldns_verify_rrsig_ed25519_raw</name><argument_list>(<argument><expr><name>sig</name></expr></argument>, <argument><expr><name>siglen</name></expr></argument>, <argument><expr><name>verify_buf</name></expr></argument>,
<argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>)</argument_list></call></expr>;</return>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ED448</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>LDNS_ED448</name></expr>:</case>
<return>return <expr><call><name>ldns_verify_rrsig_ed448_raw</name><argument_list>(<argument><expr><name>sig</name></expr></argument>, <argument><expr><name>siglen</name></expr></argument>, <argument><expr><name>verify_buf</name></expr></argument>,
<argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>)</argument_list></call></expr>;</return>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>LDNS_RSAMD5</name></expr>:</case>
<return>return <expr><call><name>ldns_verify_rrsig_rsamd5_raw</name><argument_list>(<argument><expr><name>sig</name></expr></argument>,
<argument><expr><name>siglen</name></expr></argument>,
<argument><expr><name>verify_buf</name></expr></argument>,
<argument><expr><name>key</name></expr></argument>,
<argument><expr><name>keylen</name></expr></argument>)</argument_list></call></expr>;</return>
<break>break;</break>
<default>default:</default>

<return>return <expr><name>LDNS_STATUS_CRYPTO_UNKNOWN_ALGO</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>void</name></type>
<name>ldns_rrset_use_signature_ttl</name><parameter_list>(<parameter><decl><type><name>ldns_rr_list</name><modifier>*</modifier></type> <name>rrset_clone</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_rr</name><modifier>*</modifier></type> <name>rrsig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>orig_ttl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>label_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>wildcard_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>wildcard_chopped</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>wildcard_chopped_tmp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rrsig</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <call><name>ldns_rr_rd_count</name><argument_list>(<argument><expr><name>rrsig</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>orig_ttl</name> <operator>=</operator> <call><name>ldns_rdf2native_int32</name><argument_list>( <argument><expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>rrsig</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>label_count</name> <operator>=</operator> <call><name>ldns_rdf2native_int8</name><argument_list>(<argument><expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>rrsig</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>rrset_clone</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>label_count</name> <operator>&lt;</operator>
<call><name>ldns_dname_label_count</name><argument_list>(
<argument><expr><call><name>ldns_rr_owner</name><argument_list>(<argument><expr><call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>rrset_clone</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ldns_str2rdf_dname</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wildcard_name</name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>wildcard_chopped</name> <operator>=</operator> <call><name>ldns_rdf_clone</name><argument_list>(<argument><expr><call><name>ldns_rr_owner</name><argument_list>(
<argument><expr><call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>rrset_clone</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>label_count</name> <operator>&lt;</operator> <call><name>ldns_dname_label_count</name><argument_list>(<argument><expr><name>wildcard_chopped</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>wildcard_chopped_tmp</name> <operator>=</operator> <call><name>ldns_dname_left_chop</name><argument_list>(
<argument><expr><name>wildcard_chopped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>wildcard_chopped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>wildcard_chopped</name> <operator>=</operator> <name>wildcard_chopped_tmp</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ldns_dname_cat</name><argument_list>(<argument><expr><name>wildcard_name</name></expr></argument>, <argument><expr><name>wildcard_chopped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>wildcard_chopped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><call><name>ldns_rr_owner</name><argument_list>(<argument><expr><call><name>ldns_rr_list_rr</name><argument_list>(
<argument><expr><name>rrset_clone</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rr_set_owner</name><argument_list>(<argument><expr><call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>rrset_clone</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>wildcard_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_rr_set_ttl</name><argument_list>(<argument><expr><call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>rrset_clone</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>orig_ttl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ldns_rr2canonical</name><argument_list>(<argument><expr><call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>rrset_clone</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>ldns_status</name></type>
<name>ldns_rrsig2rawsig_buffer</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name><modifier>*</modifier></type> <name>rawsig_buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_rr</name><modifier>*</modifier></type> <name>rrsig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>sig_algo</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>rrsig</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_CRYPTO_NO_RRSIG</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>rrsig</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_MISSING_RDATA_FIELDS_RRSIG</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sig_algo</name> <operator>=</operator> <call><name>ldns_rdf2native_int8</name><argument_list>(<argument><expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>rrsig</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<switch>switch<condition>(<expr><name>sig_algo</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LDNS_RSAMD5</name></expr>:</case>
<case>case <expr><name>LDNS_RSASHA1</name></expr>:</case>
<case>case <expr><name>LDNS_RSASHA1_NSEC3</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SHA2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>LDNS_RSASHA256</name></expr>:</case>
<case>case <expr><name>LDNS_RSASHA512</name></expr>:</case>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GOST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>LDNS_ECC_GOST</name></expr>:</case>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>rrsig</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_MISSING_RDATA_FIELDS_RRSIG</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_rdf2buffer_wire</name><argument_list>(<argument><expr><name>rawsig_buf</name></expr></argument>, <argument><expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>rrsig</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>!=</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_DSA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>LDNS_DSA</name></expr>:</case>
<case>case <expr><name>LDNS_DSA_NSEC3</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>rrsig</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_MISSING_RDATA_FIELDS_RRSIG</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_convert_dsa_rrsig_rdf2asn1</name><argument_list>(
<argument><expr><name>rawsig_buf</name></expr></argument>, <argument><expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>rrsig</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>!=</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>




<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ECDSA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>LDNS_ECDSAP256SHA256</name></expr>:</case>
<case>case <expr><name>LDNS_ECDSAP384SHA384</name></expr>:</case>


<if_stmt><if>if <condition>(<expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>rrsig</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_MISSING_RDATA_FIELDS_RRSIG</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_convert_ecdsa_rrsig_rdf2asn1</name><argument_list>(
<argument><expr><name>rawsig_buf</name></expr></argument>, <argument><expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>rrsig</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>!=</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ED25519</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>LDNS_ED25519</name></expr>:</case>


<if_stmt><if>if <condition>(<expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>rrsig</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_MISSING_RDATA_FIELDS_RRSIG</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_convert_ed25519_rrsig_rdf2asn1</name><argument_list>(
<argument><expr><name>rawsig_buf</name></expr></argument>, <argument><expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>rrsig</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ED448</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>LDNS_ED448</name></expr>:</case>


<if_stmt><if>if <condition>(<expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>rrsig</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_MISSING_RDATA_FIELDS_RRSIG</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_convert_ed448_rrsig_rdf2asn1</name><argument_list>(
<argument><expr><name>rawsig_buf</name></expr></argument>, <argument><expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>rrsig</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>LDNS_DH</name></expr>:</case>
<case>case <expr><name>LDNS_ECC</name></expr>:</case>
<case>case <expr><name>LDNS_INDIRECT</name></expr>:</case>
<return>return <expr><name>LDNS_STATUS_CRYPTO_ALGO_NOT_IMPL</name></expr>;</return>
<default>default:</default>
<return>return <expr><name>LDNS_STATUS_CRYPTO_UNKNOWN_ALGO</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>LDNS_STATUS_OK</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>ldns_status</name></type>
<name>ldns_rrsig_check_timestamps</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_rr</name><modifier>*</modifier></type> <name>rrsig</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>inception</name></decl>, <decl><type ref="prev"/><name>expiration</name></decl>;</decl_stmt>


<expr_stmt><expr><name>inception</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>ldns_rdf2native_time_t</name><argument_list>(
<argument><expr><call><name>ldns_rr_rrsig_inception</name><argument_list>(<argument><expr><name>rrsig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>expiration</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>ldns_rdf2native_time_t</name><argument_list>(
<argument><expr><call><name>ldns_rr_rrsig_expiration</name><argument_list>(<argument><expr><name>rrsig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>expiration</name> <operator>-</operator> <name>inception</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>LDNS_STATUS_CRYPTO_EXPIRATION_BEFORE_INCEPTION</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator> <name>now</name><operator>)</operator> <operator>-</operator> <name>inception</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>LDNS_STATUS_CRYPTO_SIG_NOT_INCEPTED</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>expiration</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator> <name>now</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>LDNS_STATUS_CRYPTO_SIG_EXPIRED</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>LDNS_STATUS_OK</name></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>ldns_status</name></type>
<name>ldns_prepare_for_verify</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name><modifier>*</modifier></type> <name>rawsig_buf</name></decl></parameter>, <parameter><decl><type><name>ldns_buffer</name><modifier>*</modifier></type> <name>verify_buf</name></decl></parameter>,
<parameter><decl><type><name>ldns_rr_list</name><modifier>*</modifier></type> <name>rrset_clone</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_rr</name><modifier>*</modifier></type> <name>rrsig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>result</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>ldns_dname2canonical</name><argument_list>(<argument><expr><call><name>ldns_rr_owner</name><argument_list>(<argument><expr><name>rrsig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>ldns_rdf2rr_type</name><argument_list>(<argument><expr><call><name>ldns_rr_rrsig_typecovered</name><argument_list>(<argument><expr><name>rrsig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator>
<call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>rrset_clone</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LDNS_STATUS_CRYPTO_TYPE_COVERED_ERR</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ldns_rrsig2rawsig_buffer</name><argument_list>(<argument><expr><name>rawsig_buf</name></expr></argument>, <argument><expr><name>rrsig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name> <operator>!=</operator> <name>LDNS_STATUS_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><call><name>ldns_rrset_use_signature_ttl</name><argument_list>(<argument><expr><name>rrset_clone</name></expr></argument>, <argument><expr><name>rrsig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ldns_rr_list_sort</name><argument_list>(<argument><expr><name>rrset_clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>ldns_rrsig2buffer_wire</name><argument_list>(<argument><expr><name>verify_buf</name></expr></argument>, <argument><expr><name>rrsig</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LDNS_STATUS_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><call><name>ldns_rr_list2buffer_wire</name><argument_list>(<argument><expr><name>verify_buf</name></expr></argument>, <argument><expr><name>rrset_clone</name></expr></argument>)</argument_list></call>
<operator>!=</operator> <name>LDNS_STATUS_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>LDNS_STATUS_OK</name></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>ldns_status</name></type>
<name>ldns_verify_test_sig_key</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name><modifier>*</modifier></type> <name>rawsig_buf</name></decl></parameter>, <parameter><decl><type><name>ldns_buffer</name><modifier>*</modifier></type> <name>verify_buf</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_rr</name><modifier>*</modifier></type> <name>rrsig</name></decl></parameter>, <parameter><decl><type><name>ldns_rr</name><modifier>*</modifier></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>sig_algo</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>rrsig</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_CRYPTO_NO_RRSIG</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>rrsig</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_MISSING_RDATA_FIELDS_RRSIG</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sig_algo</name> <operator>=</operator> <call><name>ldns_rdf2native_int8</name><argument_list>(<argument><expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>rrsig</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>ldns_calc_keytag</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call>
<operator>==</operator>
<call><name>ldns_rdf2native_int16</name><argument_list>(<argument><expr><call><name>ldns_rr_rrsig_keytag</name><argument_list>(<argument><expr><name>rrsig</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>
)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ldns_buffer</name><modifier>*</modifier></type> <name>key_buf</name> <init>= <expr><call><name>ldns_buffer_new</name><argument_list>(<argument><expr><name>LDNS_MAX_PACKETLEN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>result</name> <init>= <expr><name>LDNS_STATUS_ERR</name></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_free</name><argument_list>(<argument><expr><name>key_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_MISSING_RDATA_FIELDS_KEY</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_rdf2buffer_wire</name><argument_list>(<argument><expr><name>key_buf</name></expr></argument>, <argument><expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>!=</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_free</name><argument_list>(<argument><expr><name>key_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<return>return <expr><name>LDNS_STATUS_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>LDNS_STATUS_MISSING_RDATA_FIELDS_KEY</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>sig_algo</name> <operator>==</operator> <call><name>ldns_rdf2native_int8</name><argument_list>(
<argument><expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ldns_verify_rrsig_buffers</name><argument_list>(<argument><expr><name>rawsig_buf</name></expr></argument>,
<argument><expr><name>verify_buf</name></expr></argument>, <argument><expr><name>key_buf</name></expr></argument>, <argument><expr><name>sig_algo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>LDNS_STATUS_CRYPTO_NO_MATCHING_KEYTAG_DNSKEY</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ldns_buffer_free</name><argument_list>(<argument><expr><name>key_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if>
<else>else <block>{<block_content>

<return>return <expr><name>LDNS_STATUS_CRYPTO_NO_MATCHING_KEYTAG_DNSKEY</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>










<function><type><name>ldns_status</name></type>
<name>ldns_verify_rrsig_keylist_time</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>ldns_rr_list</name> <modifier>*</modifier></type><name>rrset</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_rr</name> <modifier>*</modifier></type><name>rrsig</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_rr_list</name> <modifier>*</modifier></type><name>keys</name></decl></parameter>,
<parameter><decl><type><name>time_t</name></type> <name>check_time</name></decl></parameter>,
<parameter><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type><name>good_keys</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type><name>valid</name> <init>= <expr><call><name>ldns_rr_list_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>valid</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ldns_verify_rrsig_keylist_notime</name><argument_list>(<argument><expr><name>rrset</name></expr></argument>, <argument><expr><name>rrsig</name></expr></argument>, <argument><expr><name>keys</name></expr></argument>, <argument><expr><name>valid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name> <operator>!=</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_rr_list_free</name><argument_list>(<argument><expr><name>valid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ldns_rrsig_check_timestamps</name><argument_list>(<argument><expr><name>rrsig</name></expr></argument>, <argument><expr><name>check_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name> <operator>!=</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_rr_list_free</name><argument_list>(<argument><expr><name>valid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ldns_rr_list_cat</name><argument_list>(<argument><expr><name>good_keys</name></expr></argument>, <argument><expr><name>valid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rr_list_free</name><argument_list>(<argument><expr><name>valid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_OK</name></expr>;</return>
</block_content>}</block></function>










<function><type><name>ldns_status</name></type>
<name>ldns_verify_rrsig_keylist</name><parameter_list>(<parameter><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type><name>rrset</name></decl></parameter>,
<parameter><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>rrsig</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_rr_list</name> <modifier>*</modifier></type><name>keys</name></decl></parameter>,
<parameter><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type><name>good_keys</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_verify_rrsig_keylist_time</name><argument_list>(
<argument><expr><name>rrset</name></expr></argument>, <argument><expr><name>rrsig</name></expr></argument>, <argument><expr><name>keys</name></expr></argument>, <argument><expr><call><name>ldns_time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>good_keys</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_verify_rrsig_keylist_notime</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_rr_list</name> <modifier>*</modifier></type><name>rrset</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_rr</name> <modifier>*</modifier></type><name>rrsig</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_rr_list</name> <modifier>*</modifier></type><name>keys</name></decl></parameter>,
<parameter><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type><name>good_keys</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>rawsig_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>verify_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>result</name></decl>, <decl><type ref="prev"/><name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type><name>rrset_clone</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type><name>validkeys</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rrset</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>validkeys</name> <operator>=</operator> <call><name>ldns_rr_list_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>validkeys</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>rrset_clone</name> <operator>=</operator> <call><name>ldns_rr_list_clone</name><argument_list>(<argument><expr><name>rrset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>rawsig_buf</name> <operator>=</operator> <call><name>ldns_buffer_new</name><argument_list>(<argument><expr><name>LDNS_MAX_PACKETLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>verify_buf</name> <operator>=</operator> <call><name>ldns_buffer_new</name><argument_list>(<argument><expr><name>LDNS_MAX_PACKETLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ldns_prepare_for_verify</name><argument_list>(<argument><expr><name>rawsig_buf</name></expr></argument>, <argument><expr><name>verify_buf</name></expr></argument>,
<argument><expr><name>rrset_clone</name></expr></argument>, <argument><expr><name>rrsig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name> <operator>!=</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_free</name><argument_list>(<argument><expr><name>verify_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_free</name><argument_list>(<argument><expr><name>rawsig_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rr_list_deep_free</name><argument_list>(<argument><expr><name>rrset_clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rr_list_free</name><argument_list>(<argument><expr><name>validkeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>LDNS_STATUS_CRYPTO_NO_MATCHING_KEYTAG_DNSKEY</name></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_verify_test_sig_key</name><argument_list>(<argument><expr><name>rawsig_buf</name></expr></argument>, <argument><expr><name>verify_buf</name></expr></argument>,
<argument><expr><name>rrsig</name></expr></argument>, <argument><expr><call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>keys</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ldns_rr_list_push_rr</name><argument_list>(<argument><expr><name>validkeys</name></expr></argument>,
<argument><expr><call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>keys</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ldns_buffer_free</name><argument_list>(<argument><expr><name>rawsig_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_free</name><argument_list>(<argument><expr><name>verify_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rr_list_deep_free</name><argument_list>(<argument><expr><name>rrset_clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rr_list_free</name><argument_list>(<argument><expr><name>validkeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>status</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>LDNS_STATUS_CRYPTO_NO_MATCHING_KEYTAG_DNSKEY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>status</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>ldns_rr_list_deep_free</name><argument_list>(<argument><expr><name>rrset_clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_free</name><argument_list>(<argument><expr><name>rawsig_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_free</name><argument_list>(<argument><expr><name>verify_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>validkeys</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ldns_rr_list_free</name><argument_list>(<argument><expr><name>validkeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><call><name>ldns_rr_list_cat</name><argument_list>(<argument><expr><name>good_keys</name></expr></argument>, <argument><expr><name>validkeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rr_list_free</name><argument_list>(<argument><expr><name>validkeys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_verify_rrsig_time</name><parameter_list>(
<parameter><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type><name>rrset</name></decl></parameter>,
<parameter><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>rrsig</name></decl></parameter>,
<parameter><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
<parameter><decl><type><name>time_t</name></type> <name>check_time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>rawsig_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>verify_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type><name>rrset_clone</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rrset</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_NO_DATA</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rrset_clone</name> <operator>=</operator> <call><name>ldns_rr_list_clone</name><argument_list>(<argument><expr><name>rrset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rawsig_buf</name> <operator>=</operator> <call><name>ldns_buffer_new</name><argument_list>(<argument><expr><name>LDNS_MAX_PACKETLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>verify_buf</name> <operator>=</operator> <call><name>ldns_buffer_new</name><argument_list>(<argument><expr><name>LDNS_MAX_PACKETLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ldns_prepare_for_verify</name><argument_list>(<argument><expr><name>rawsig_buf</name></expr></argument>, <argument><expr><name>verify_buf</name></expr></argument>,
<argument><expr><name>rrset_clone</name></expr></argument>, <argument><expr><name>rrsig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>result</name> <operator>!=</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_rr_list_deep_free</name><argument_list>(<argument><expr><name>rrset_clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_free</name><argument_list>(<argument><expr><name>rawsig_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_free</name><argument_list>(<argument><expr><name>verify_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ldns_verify_test_sig_key</name><argument_list>(<argument><expr><name>rawsig_buf</name></expr></argument>, <argument><expr><name>verify_buf</name></expr></argument>,
<argument><expr><name>rrsig</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ldns_rr_list_deep_free</name><argument_list>(<argument><expr><name>rrset_clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_free</name><argument_list>(<argument><expr><name>rawsig_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_free</name><argument_list>(<argument><expr><name>verify_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><name>result</name> <operator>==</operator> <name>LDNS_STATUS_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ldns_rrsig_check_timestamps</name><argument_list>(<argument><expr><name>rrsig</name></expr></argument>, <argument><expr><name>check_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_verify_rrsig</name><parameter_list>(<parameter><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type><name>rrset</name></decl></parameter>, <parameter><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>rrsig</name></decl></parameter>, <parameter><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_verify_rrsig_time</name><argument_list>(<argument><expr><name>rrset</name></expr></argument>, <argument><expr><name>rrsig</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>ldns_time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>ldns_status</name></type>
<name>ldns_verify_rrsig_evp</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>,
<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>rrset</name></decl></parameter>,
<parameter><decl><type><name>EVP_PKEY</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>EVP_MD</name> <modifier>*</modifier></type><name>digest_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_verify_rrsig_evp_raw</name><argument_list>(
<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><call><name>ldns_buffer_begin</name><argument_list>(<argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ldns_buffer_position</name><argument_list>(<argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>rrset</name></expr></argument>,
<argument><expr><name>key</name></expr></argument>,
<argument><expr><name>digest_type</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_verify_rrsig_evp_raw</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>siglen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_buffer</name> <modifier>*</modifier></type><name>rrset</name></decl></parameter>, <parameter><decl><type><name>EVP_PKEY</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>EVP_MD</name> <modifier>*</modifier></type><name>digest_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>EVP_MD_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_EVP_MD_CTX_NEW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>EVP_MD_CTX_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>ctx</name> <operator>=</operator> <operator>(</operator><name>EVP_MD_CTX</name><operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ctx</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>EVP_MD_CTX_init</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ctx</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>EVP_VerifyInit</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>digest_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EVP_VerifyUpdate</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,
<argument><expr><call><name>ldns_buffer_begin</name><argument_list>(<argument><expr><name>rrset</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ldns_buffer_position</name><argument_list>(<argument><expr><name>rrset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>EVP_VerifyFinal</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name>siglen</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EVP_MD_CTX_destroy</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_OK</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>res</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_CRYPTO_BOGUS</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<return>return <expr><name>LDNS_STATUS_SSL_ERR</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_verify_rrsig_dsa</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>, <parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>rrset</name></decl></parameter>, <parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_verify_rrsig_dsa_raw</name><argument_list>(
<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <call><name>ldns_buffer_begin</name><argument_list>(<argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ldns_buffer_position</name><argument_list>(<argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>rrset</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <call><name>ldns_buffer_begin</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ldns_buffer_position</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_verify_rrsig_rsasha1</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>, <parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>rrset</name></decl></parameter>, <parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_verify_rrsig_rsasha1_raw</name><argument_list>(
<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><call><name>ldns_buffer_begin</name><argument_list>(<argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ldns_buffer_position</name><argument_list>(<argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>rrset</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <call><name>ldns_buffer_begin</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ldns_buffer_position</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_verify_rrsig_rsamd5</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>, <parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>rrset</name></decl></parameter>, <parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_verify_rrsig_rsamd5_raw</name><argument_list>(
<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><call><name>ldns_buffer_begin</name><argument_list>(<argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ldns_buffer_position</name><argument_list>(<argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>rrset</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <call><name>ldns_buffer_begin</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ldns_buffer_position</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_verify_rrsig_dsa_raw</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>sig</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>siglen</name></decl></parameter>,
<parameter><decl><type><name>ldns_buffer</name><modifier>*</modifier></type> <name>rrset</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keylen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_DSA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EVP_PKEY</name> <modifier>*</modifier></type><name>evp_key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name>evp_key</name> <operator>=</operator> <call><name>EVP_PKEY_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>EVP_PKEY_assign_DSA</name><argument_list>(<argument><expr><name>evp_key</name></expr></argument>, <argument><expr><call><name>ldns_key_buf2dsa_raw</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ldns_verify_rrsig_evp_raw</name><argument_list>(<argument><expr><name>sig</name></expr></argument>,
<argument><expr><name>siglen</name></expr></argument>,
<argument><expr><name>rrset</name></expr></argument>,
<argument><expr><name>evp_key</name></expr></argument>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_EVP_DSS1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument><expr><macro><name>EVP_dss1</name><argument_list>()</argument_list></macro>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<call><name>EVP_sha1</name><argument_list>()</argument_list></call></expr></argument>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>LDNS_STATUS_SSL_ERR</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>EVP_PKEY_free</name><argument_list>(<argument><expr><name>evp_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>sig</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>siglen</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>rrset</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>key</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>keylen</name></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_CRYPTO_ALGO_NOT_IMPL</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_verify_rrsig_rsasha1_raw</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>sig</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>siglen</name></decl></parameter>,
<parameter><decl><type><name>ldns_buffer</name><modifier>*</modifier></type> <name>rrset</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keylen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>EVP_PKEY</name> <modifier>*</modifier></type><name>evp_key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name>evp_key</name> <operator>=</operator> <call><name>EVP_PKEY_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>EVP_PKEY_assign_RSA</name><argument_list>(<argument><expr><name>evp_key</name></expr></argument>, <argument><expr><call><name>ldns_key_buf2rsa_raw</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ldns_verify_rrsig_evp_raw</name><argument_list>(<argument><expr><name>sig</name></expr></argument>,
<argument><expr><name>siglen</name></expr></argument>,
<argument><expr><name>rrset</name></expr></argument>,
<argument><expr><name>evp_key</name></expr></argument>,
<argument><expr><call><name>EVP_sha1</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>LDNS_STATUS_SSL_ERR</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>EVP_PKEY_free</name><argument_list>(<argument><expr><name>evp_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_verify_rrsig_rsasha256_raw</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>sig</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>siglen</name></decl></parameter>,
<parameter><decl><type><name>ldns_buffer</name><modifier>*</modifier></type> <name>rrset</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>key</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>keylen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SHA2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EVP_PKEY</name> <modifier>*</modifier></type><name>evp_key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name>evp_key</name> <operator>=</operator> <call><name>EVP_PKEY_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>EVP_PKEY_assign_RSA</name><argument_list>(<argument><expr><name>evp_key</name></expr></argument>, <argument><expr><call><name>ldns_key_buf2rsa_raw</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ldns_verify_rrsig_evp_raw</name><argument_list>(<argument><expr><name>sig</name></expr></argument>,
<argument><expr><name>siglen</name></expr></argument>,
<argument><expr><name>rrset</name></expr></argument>,
<argument><expr><name>evp_key</name></expr></argument>,
<argument><expr><call><name>EVP_sha256</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>LDNS_STATUS_SSL_ERR</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>EVP_PKEY_free</name><argument_list>(<argument><expr><name>evp_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>sig</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>siglen</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>rrset</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>keylen</name></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_CRYPTO_UNKNOWN_ALGO</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_verify_rrsig_rsasha512_raw</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>sig</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>siglen</name></decl></parameter>,
<parameter><decl><type><name>ldns_buffer</name><modifier>*</modifier></type> <name>rrset</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>key</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>keylen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SHA2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EVP_PKEY</name> <modifier>*</modifier></type><name>evp_key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name>evp_key</name> <operator>=</operator> <call><name>EVP_PKEY_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>EVP_PKEY_assign_RSA</name><argument_list>(<argument><expr><name>evp_key</name></expr></argument>, <argument><expr><call><name>ldns_key_buf2rsa_raw</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ldns_verify_rrsig_evp_raw</name><argument_list>(<argument><expr><name>sig</name></expr></argument>,
<argument><expr><name>siglen</name></expr></argument>,
<argument><expr><name>rrset</name></expr></argument>,
<argument><expr><name>evp_key</name></expr></argument>,
<argument><expr><call><name>EVP_sha512</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>LDNS_STATUS_SSL_ERR</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>EVP_PKEY_free</name><argument_list>(<argument><expr><name>evp_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>sig</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>siglen</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>rrset</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>keylen</name></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_CRYPTO_UNKNOWN_ALGO</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>ldns_status</name></type>
<name>ldns_verify_rrsig_rsamd5_raw</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>sig</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>siglen</name></decl></parameter>,
<parameter><decl><type><name>ldns_buffer</name><modifier>*</modifier></type> <name>rrset</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>key</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>keylen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>EVP_PKEY</name> <modifier>*</modifier></type><name>evp_key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name>evp_key</name> <operator>=</operator> <call><name>EVP_PKEY_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>EVP_PKEY_assign_RSA</name><argument_list>(<argument><expr><name>evp_key</name></expr></argument>, <argument><expr><call><name>ldns_key_buf2rsa_raw</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ldns_verify_rrsig_evp_raw</name><argument_list>(<argument><expr><name>sig</name></expr></argument>,
<argument><expr><name>siglen</name></expr></argument>,
<argument><expr><name>rrset</name></expr></argument>,
<argument><expr><name>evp_key</name></expr></argument>,
<argument><expr><call><name>EVP_md5</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>LDNS_STATUS_SSL_ERR</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>EVP_PKEY_free</name><argument_list>(<argument><expr><name>evp_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
