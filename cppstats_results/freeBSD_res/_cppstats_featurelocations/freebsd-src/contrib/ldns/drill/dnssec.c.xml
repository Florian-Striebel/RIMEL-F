<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/ldns/drill/dnssec.c">









<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"drill.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ldns/ldns.h&gt;</cpp:file></cpp:include>


<function><type><name>ldns_rr_list</name> <modifier>*</modifier></type>
<name>get_rr</name><parameter_list>(<parameter><decl><type><name>ldns_resolver</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>zname</name></decl></parameter>, <parameter><decl><type><name>ldns_rr_type</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>ldns_rr_class</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>ldns_pkt</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type><name>found</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ldns_pkt_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>found</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ldns_resolver_send</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>zname</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>found</name> <operator>=</operator> <call><name>ldns_pkt_rr_list_by_type</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>LDNS_SECTION_ANY_NOQUESTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_pkt_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>found</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>drill_pkt_print</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>ldns_resolver</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>ldns_pkt</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type><name>new_nss</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type><name>hostnames</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>answerfrom_str</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>verbosity</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hostnames</name> <operator>=</operator> <call><name>ldns_get_rr_list_name_by_addr</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>ldns_pkt_answerfrom</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>new_nss</name> <operator>=</operator> <call><name>ldns_pkt_rr_list_by_type</name><argument_list>(<argument><expr><name>p</name></expr></argument>,
<argument><expr><name>LDNS_RR_TYPE_NS</name></expr></argument>, <argument><expr><name>LDNS_SECTION_ANSWER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rr_list_print</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>new_nss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rr_list_deep_free</name><argument_list>(<argument><expr><name>new_nss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">";; Received %d bytes from %s#%d("</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>ldns_pkt_size</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ldns_rdf2str</name><argument_list>(<argument><expr><call><name>ldns_pkt_answerfrom</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>ldns_resolver_port</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hostnames</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_rdf_print</name><argument_list>(<argument><expr><name>fd</name></expr></argument>,
<argument><expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>hostnames</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rr_list_deep_free</name><argument_list>(<argument><expr><name>hostnames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>answerfrom_str</name> <operator>=</operator> <call><name>ldns_rdf2str</name><argument_list>(<argument><expr><call><name>ldns_pkt_answerfrom</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>answerfrom_str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>answerfrom_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>answerfrom_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">") in %u ms\n\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>ldns_pkt_querytime</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>drill_pkt_print_footer</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name>ldns_resolver</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>ldns_pkt</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type><name>hostnames</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>answerfrom_str</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>verbosity</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hostnames</name> <operator>=</operator> <call><name>ldns_get_rr_list_name_by_addr</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>ldns_pkt_answerfrom</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">";; Received %d bytes from %s#%d("</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>ldns_pkt_size</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ldns_rdf2str</name><argument_list>(<argument><expr><call><name>ldns_pkt_answerfrom</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>ldns_resolver_port</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hostnames</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_rdf_print</name><argument_list>(<argument><expr><name>fd</name></expr></argument>,
<argument><expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>hostnames</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rr_list_deep_free</name><argument_list>(<argument><expr><name>hostnames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>answerfrom_str</name> <operator>=</operator> <call><name>ldns_rdf2str</name><argument_list>(<argument><expr><call><name>ldns_pkt_answerfrom</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>answerfrom_str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>answerfrom_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>answerfrom_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">") in %u ms\n\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>ldns_pkt_querytime</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>ldns_pkt_type</name></type>
<name>get_dnssec_rr</name><parameter_list>(<parameter><decl><type><name>ldns_pkt</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>ldns_rr_type</name></type> <name>t</name></decl></parameter>,
<parameter><decl><type><name>ldns_rr_list</name> <modifier>*</modifier><modifier>*</modifier></type><name>rrlist</name></decl></parameter>, <parameter><decl><type><name>ldns_rr_list</name> <modifier>*</modifier><modifier>*</modifier></type><name>sig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_pkt_type</name></type> <name>pt</name> <init>= <expr><name>LDNS_PACKET_UNKNOWN</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type><name>sigs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>rrlist</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>rrlist</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>LDNS_PACKET_UNKNOWN</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pt</name> <operator>=</operator> <call><name>ldns_pkt_reply_type</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>rrlist</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>rrlist</name> <operator>=</operator> <call><name>ldns_pkt_rr_list_by_name_and_type</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>t</name></expr></argument>,
<argument><expr><name>LDNS_SECTION_ANSWER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>rrlist</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>rrlist</name> <operator>=</operator> <call><name>ldns_pkt_rr_list_by_name_and_type</name><argument_list>(
<argument><expr><name>p</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>t</name></expr></argument>,
<argument><expr><name>LDNS_SECTION_AUTHORITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>sig</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sigs</name> <operator>=</operator> <call><name>ldns_pkt_rr_list_by_name_and_type</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>name</name></expr></argument>,
<argument><expr><name>LDNS_RR_TYPE_RRSIG</name></expr></argument>,
<argument><expr><name>LDNS_SECTION_ANSWER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sigs</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sigs</name> <operator>=</operator> <call><name>ldns_pkt_rr_list_by_name_and_type</name><argument_list>(
<argument><expr><name>p</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>LDNS_RR_TYPE_RRSIG</name></expr></argument>,
<argument><expr><name>LDNS_SECTION_AUTHORITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>rrlist</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>rrlist</name> <operator>=</operator> <call><name>ldns_pkt_rr_list_by_type</name><argument_list>(
<argument><expr><name>p</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>LDNS_SECTION_AUTHORITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>sig</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>sigs</name> <operator>=</operator> <call><name>ldns_pkt_rr_list_by_type</name><argument_list>(<argument><expr><name>p</name></expr></argument>,
<argument><expr><name>LDNS_RR_TYPE_RRSIG</name></expr></argument>,
<argument><expr><name>LDNS_SECTION_AUTHORITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>sig</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>sig</name> <operator>=</operator> <call><name>ldns_rr_list_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>sigs</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <call><name>ldns_rdf2rr_type</name><argument_list>(<argument><expr><call><name>ldns_rr_rrsig_typecovered</name><argument_list>(
<argument><expr><call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>sigs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ldns_rr_list_push_rr</name><argument_list>(<argument><expr><operator>*</operator><name>sig</name></expr></argument>,
<argument><expr><call><name>ldns_rr_clone</name><argument_list>(
<argument><expr><call><name>ldns_rr_list_rr</name><argument_list>(
<argument><expr><name>sigs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_rr_list_deep_free</name><argument_list>(<argument><expr><name>sigs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pt</name> <operator>==</operator> <name>LDNS_PACKET_NXDOMAIN</name> <operator>||</operator> <name>pt</name> <operator>==</operator> <name>LDNS_PACKET_NODATA</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>pt</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>LDNS_PACKET_ANSWER</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>ldns_status</name></type>
<name>ldns_verify_denial</name><parameter_list>(<parameter><decl><type><name>ldns_pkt</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>ldns_rr_type</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>ldns_rr_list</name> <modifier>*</modifier><modifier>*</modifier></type><name>nsec_rrs</name></decl></parameter>, <parameter><decl><type><name>ldns_rr_list</name> <modifier>*</modifier><modifier>*</modifier></type><name>nsec_rr_sigs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>nsec_i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type><name>nsecs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>result</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>verbosity</name> <operator>&gt;=</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"VERIFY DENIAL FROM:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_pkt_print</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>LDNS_STATUS_CRYPTO_NO_RRSIG</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nsecs</name> <operator>=</operator> <call><name>ldns_pkt_rr_list_by_type</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>LDNS_RR_TYPE_NSEC</name></expr></argument>, <argument><expr><name>LDNS_SECTION_ANY_NOQUESTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nsecs</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>nsec_i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>nsec_i</name> <operator>&lt;</operator> <call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>nsecs</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>nsec_i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>






<if_stmt><if>if <condition>(<expr><call><name>ldns_dname_compare</name><argument_list>(<argument><expr><call><name>ldns_rr_owner</name><argument_list>(<argument><expr><call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>nsecs</name></expr></argument>, <argument><expr><name>nsec_i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>





<if_stmt><if>if <condition>(<expr><call><name>ldns_nsec_bitmap_covers_type</name><argument_list>(
<argument><expr><call><name>ldns_nsec_get_bitmap</name><argument_list>(<argument><expr><call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>nsecs</name></expr></argument>,
<argument><expr><name>nsec_i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>LDNS_STATUS_CRYPTO_NO_RRSIG</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>verbosity</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">";; Existence of data set with this type denied by NSEC\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nsec_rrs</name> <operator>&amp;&amp;</operator> <name>nsec_rr_sigs</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>get_dnssec_rr</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><call><name>ldns_rr_owner</name><argument_list>(<argument><expr><call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>nsecs</name></expr></argument>, <argument><expr><name>nsec_i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LDNS_RR_TYPE_NSEC</name></expr></argument>, <argument><expr><name>nsec_rrs</name></expr></argument>, <argument><expr><name>nsec_rr_sigs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_rr_list_deep_free</name><argument_list>(<argument><expr><name>nsecs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_OK</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ldns_nsec_covers_name</name><argument_list>(<argument><expr><call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>nsecs</name></expr></argument>, <argument><expr><name>nsec_i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>verbosity</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">";; Existence of data set with this name denied by NSEC\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nsec_rrs</name> <operator>&amp;&amp;</operator> <name>nsec_rr_sigs</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>get_dnssec_rr</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><call><name>ldns_rr_owner</name><argument_list>(<argument><expr><call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>nsecs</name></expr></argument>, <argument><expr><name>nsec_i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LDNS_RR_TYPE_NSEC</name></expr></argument>, <argument><expr><name>nsec_rrs</name></expr></argument>, <argument><expr><name>nsec_rr_sigs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_rr_list_deep_free</name><argument_list>(<argument><expr><name>nsecs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_OK</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>

</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>ldns_rr_list_deep_free</name><argument_list>(<argument><expr><name>nsecs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>( <expr><operator>(</operator><name>nsecs</name> <operator>=</operator> <call><name>ldns_pkt_rr_list_by_type</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>LDNS_RR_TYPE_NSEC3</name></expr></argument>, <argument><expr><name>LDNS_SECTION_ANY_NOQUESTION</name></expr></argument>)</argument_list></call><operator>)</operator></expr> )</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ldns_rr_list</name><modifier>*</modifier></type> <name>sigs</name> <init>= <expr><call><name>ldns_pkt_rr_list_by_type</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>LDNS_RR_TYPE_RRSIG</name></expr></argument>, <argument><expr><name>LDNS_SECTION_ANY_NOQUESTION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr</name><modifier>*</modifier></type> <name>q</name> <init>= <expr><call><name>ldns_rr_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr</name><modifier>*</modifier></type> <name>match</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>sigs</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>q</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_rr_free</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_rr_list_deep_free</name><argument_list>(<argument><expr><name>nsecs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>q</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_rr_list_deep_free</name><argument_list>(<argument><expr><name>nsecs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rr_list_deep_free</name><argument_list>(<argument><expr><name>sigs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_rr_set_question</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rr_set_ttl</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rr_set_owner</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><call><name>ldns_rdf_clone</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>ldns_rr_owner</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_rr_free</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rr_list_deep_free</name><argument_list>(<argument><expr><name>sigs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rr_list_deep_free</name><argument_list>(<argument><expr><name>nsecs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_rr_set_type</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ldns_dnssec_verify_denial_nsec3_match</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>nsecs</name></expr></argument>, <argument><expr><name>sigs</name></expr></argument>, <argument><expr><call><name>ldns_pkt_get_rcode</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><call><name>ldns_pkt_ancount</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>LDNS_STATUS_OK</name> <operator>&amp;&amp;</operator> <name>match</name> <operator>&amp;&amp;</operator> <name>nsec_rrs</name> <operator>&amp;&amp;</operator> <name>nsec_rr_sigs</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>get_dnssec_rr</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><call><name>ldns_rr_owner</name><argument_list>(<argument><expr><name>match</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LDNS_RR_TYPE_NSEC3</name></expr></argument>, <argument><expr><name>nsec_rrs</name></expr></argument>, <argument><expr><name>nsec_rr_sigs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_rr_free</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rr_list_deep_free</name><argument_list>(<argument><expr><name>nsecs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rr_list_deep_free</name><argument_list>(<argument><expr><name>sigs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>pkt</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>nsec_rrs</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>nsec_rr_sigs</name></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_ERR</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>



<function><type><name>ldns_rr</name> <modifier>*</modifier></type>
<name>ldns_nsec3_exact_match</name><parameter_list>(<parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>qname</name></decl></parameter>, <parameter><decl><type><name>ldns_rr_type</name></type> <name>qtype</name></decl></parameter>, <parameter><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type><name>nsec3s</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>algorithm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>iterations</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>salt_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>salt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>sname</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>hashed_sname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>nsec_i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>nsec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ldns_rr_descriptor</name> <modifier>*</modifier></type><name>descriptor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>zone_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>verbosity</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">";; finding exact match for "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>descriptor</name> <operator>=</operator> <call><name>ldns_rr_descript</name><argument_list>(<argument><expr><name>qtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>descriptor</name> <operator>&amp;&amp;</operator> <name><name>descriptor</name><operator>-&gt;</operator><name>_name</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s "</literal></expr></argument>, <argument><expr><name><name>descriptor</name><operator>-&gt;</operator><name>_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"TYPE%d "</literal></expr></argument>, <argument><expr><name>qtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>ldns_rdf_print</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><name>qname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>qname</name> <operator>||</operator> <operator>!</operator><name>nsec3s</name> <operator>||</operator> <call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>nsec3s</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>verbosity</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"no qname, nsec3s or list empty\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nsec</name> <operator>=</operator> <call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>nsec3s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>algorithm</name> <operator>=</operator> <call><name>ldns_nsec3_algorithm</name><argument_list>(<argument><expr><name>nsec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>salt_length</name> <operator>=</operator> <call><name>ldns_nsec3_salt_length</name><argument_list>(<argument><expr><name>nsec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>salt</name> <operator>=</operator> <call><name>ldns_nsec3_salt_data</name><argument_list>(<argument><expr><name>nsec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>iterations</name> <operator>=</operator> <call><name>ldns_nsec3_iterations</name><argument_list>(<argument><expr><name>nsec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>salt</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sname</name> <operator>=</operator> <call><name>ldns_rdf_clone</name><argument_list>(<argument><expr><name>qname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sname</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>verbosity</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">";; owner name hashes to: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>hashed_sname</name> <operator>=</operator> <call><name>ldns_nsec3_hash_name</name><argument_list>(<argument><expr><name>sname</name></expr></argument>, <argument><expr><name>algorithm</name></expr></argument>, <argument><expr><name>iterations</name></expr></argument>, <argument><expr><name>salt_length</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hashed_sname</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>zone_name</name> <operator>=</operator> <call><name>ldns_dname_left_chop</name><argument_list>(<argument><expr><call><name>ldns_rr_owner</name><argument_list>(<argument><expr><name>nsec</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>zone_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_dname_cat</name><argument_list>(<argument><expr><name>hashed_sname</name></expr></argument>, <argument><expr><name>zone_name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>

<if_stmt><if>if <condition>(<expr><name>verbosity</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_rdf_print</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><name>hashed_sname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>nsec_i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>nsec_i</name> <operator>&lt;</operator> <call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>nsec3s</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>nsec_i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>nsec</name> <operator>=</operator> <call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>nsec3s</name></expr></argument>, <argument><expr><name>nsec_i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><call><name>ldns_dname_compare</name><argument_list>(<argument><expr><call><name>ldns_rr_owner</name><argument_list>(<argument><expr><name>nsec</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>hashed_sname</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>nsec</name></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<label><name>done</name>:</label>
<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>zone_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>sname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>hashed_sname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>salt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>verbosity</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">";; Found.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">";; Not foud.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>ldns_rdf</name> <modifier>*</modifier></type>
<name>ldns_nsec3_closest_encloser</name><parameter_list>(<parameter><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>qname</name></decl></parameter>, <parameter><decl><type><name>ldns_rr_type</name></type> <name>qtype</name></decl></parameter>, <parameter><decl><type><name>ldns_rr_list</name> <modifier>*</modifier></type><name>nsec3s</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>algorithm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>iterations</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>salt_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>salt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>sname</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>hashed_sname</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>flag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>exact_match_found</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>in_range_found</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>zone_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>nsec_i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rr</name> <modifier>*</modifier></type><name>nsec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>qname</name> <operator>||</operator> <operator>!</operator><name>nsec3s</name> <operator>||</operator> <call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>nsec3s</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>verbosity</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">";; finding closest encloser for type %d "</literal></expr></argument>, <argument><expr><name>qtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rdf_print</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><name>qname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nsec</name> <operator>=</operator> <call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>nsec3s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>algorithm</name> <operator>=</operator> <call><name>ldns_nsec3_algorithm</name><argument_list>(<argument><expr><name>nsec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>salt_length</name> <operator>=</operator> <call><name>ldns_nsec3_salt_length</name><argument_list>(<argument><expr><name>nsec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>salt</name> <operator>=</operator> <call><name>ldns_nsec3_salt_data</name><argument_list>(<argument><expr><name>nsec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>iterations</name> <operator>=</operator> <call><name>ldns_nsec3_iterations</name><argument_list>(<argument><expr><name>nsec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>salt</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sname</name> <operator>=</operator> <call><name>ldns_rdf_clone</name><argument_list>(<argument><expr><name>qname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sname</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>flag</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>zone_name</name> <operator>=</operator> <call><name>ldns_dname_left_chop</name><argument_list>(<argument><expr><call><name>ldns_rr_owner</name><argument_list>(<argument><expr><name>nsec</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>zone_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>


<while>while <condition>(<expr><call><name>ldns_dname_label_count</name><argument_list>(<argument><expr><name>sname</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>exact_match_found</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<expr_stmt><expr><name>in_range_found</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>verbosity</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">";; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rdf_print</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><name>sname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" hashes to: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>hashed_sname</name> <operator>=</operator> <call><name>ldns_nsec3_hash_name</name><argument_list>(<argument><expr><name>sname</name></expr></argument>, <argument><expr><name>algorithm</name></expr></argument>, <argument><expr><name>iterations</name></expr></argument>, <argument><expr><name>salt_length</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hashed_sname</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ldns_dname_cat</name><argument_list>(<argument><expr><name>hashed_sname</name></expr></argument>, <argument><expr><name>zone_name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LDNS_STATUS_OK</name></expr>)</condition><block>{<block_content>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>verbosity</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_rdf_print</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><name>hashed_sname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>nsec_i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>nsec_i</name> <operator>&lt;</operator> <call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>nsec3s</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>nsec_i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>nsec</name> <operator>=</operator> <call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>nsec3s</name></expr></argument>, <argument><expr><name>nsec_i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><call><name>ldns_dname_compare</name><argument_list>(<argument><expr><call><name>ldns_rr_owner</name><argument_list>(<argument><expr><name>nsec</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>hashed_sname</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>verbosity</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">";; exact match found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>exact_match_found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ldns_nsec_covers_name</name><argument_list>(<argument><expr><name>nsec</name></expr></argument>, <argument><expr><name>hashed_sname</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>verbosity</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">";; in range of an nsec\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>in_range_found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>exact_match_found</name> <operator>&amp;&amp;</operator> <name>in_range_found</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>exact_match_found</name> <operator>&amp;&amp;</operator> <name>flag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ldns_rdf_clone</name><argument_list>(<argument><expr><name>sname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>exact_match_found</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>flag</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>verbosity</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">";; the closest encloser is the same name (ie. this is an exact match, ie there is no closest encloser)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>hashed_sname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>flag</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>hashed_sname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>sname</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sname</name> <operator>=</operator> <call><name>ldns_dname_left_chop</name><argument_list>(<argument><expr><name>sname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sname</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<label><name>done</name>:</label>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>salt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>zone_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>sname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>verbosity</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">";; no closest encloser found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
</unit>
