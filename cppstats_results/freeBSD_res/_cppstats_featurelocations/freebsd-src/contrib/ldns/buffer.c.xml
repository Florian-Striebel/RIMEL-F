<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/ldns/buffer.c">








<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ldns/config.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ldns/ldns.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ldns/buffer.h&gt;</cpp:file></cpp:include>

<function><type><name>ldns_buffer</name> <modifier>*</modifier></type>
<name>ldns_buffer_new</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>capacity</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><call><name>LDNS_MALLOC</name><argument_list>(<argument><expr><name>ldns_buffer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buffer</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>_data</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <call><name>LDNS_XMALLOC</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>capacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>buffer</name><operator>-&gt;</operator><name>_data</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>_position</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>_limit</name></name> <operator>=</operator> <name><name>buffer</name><operator>-&gt;</operator><name>_capacity</name></name> <operator>=</operator> <name>capacity</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>_fixed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>_status</name></name> <operator>=</operator> <name>LDNS_STATUS_OK</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ldns_buffer_invariant</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>buffer</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ldns_buffer_new_frm_data</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>data</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>_position</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>_limit</name></name> <operator>=</operator> <name><name>buffer</name><operator>-&gt;</operator><name>_capacity</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>_fixed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>_data</name></name> <operator>=</operator> <call><name>LDNS_XMALLOC</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>buffer</name><operator>-&gt;</operator><name>_data</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>_status</name></name> <operator>=</operator> <name>LDNS_STATUS_MEM_ERR</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>_data</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>_status</name></name> <operator>=</operator> <name>LDNS_STATUS_OK</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ldns_buffer_invariant</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ldns_buffer_set_capacity</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>capacity</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ldns_buffer_invariant</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>_position</name></name> <operator>&lt;=</operator> <name>capacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <call><name>LDNS_XREALLOC</name><argument_list>(<argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>_data</name></name></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>capacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>_status</name></name> <operator>=</operator> <name>LDNS_STATUS_MEM_ERR</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>_data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>_limit</name></name> <operator>=</operator> <name><name>buffer</name><operator>-&gt;</operator><name>_capacity</name></name> <operator>=</operator> <name>capacity</name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ldns_buffer_reserve</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>amount</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_invariant</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>buffer</name><operator>-&gt;</operator><name>_fixed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>buffer</name><operator>-&gt;</operator><name>_capacity</name></name> <operator>&lt;</operator> <name><name>buffer</name><operator>-&gt;</operator><name>_position</name></name> <operator>+</operator> <name>amount</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>new_capacity</name> <init>= <expr><name><name>buffer</name><operator>-&gt;</operator><name>_capacity</name></name> <operator>*</operator> <literal type="number">3</literal> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>new_capacity</name> <operator>&lt;</operator> <name><name>buffer</name><operator>-&gt;</operator><name>_position</name></name> <operator>+</operator> <name>amount</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>new_capacity</name> <operator>=</operator> <name><name>buffer</name><operator>-&gt;</operator><name>_position</name></name> <operator>+</operator> <name>amount</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ldns_buffer_set_capacity</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>new_capacity</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>_status</name></name> <operator>=</operator> <name>LDNS_STATUS_MEM_ERR</name></expr>;</expr_stmt>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>_limit</name></name> <operator>=</operator> <name><name>buffer</name><operator>-&gt;</operator><name>_capacity</name></name></expr>;</expr_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>ldns_buffer_printf</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>written</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>remaining</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ldns_buffer_status_ok</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_invariant</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>_limit</name></name> <operator>==</operator> <name><name>buffer</name><operator>-&gt;</operator><name>_capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>remaining</name> <operator>=</operator> <call><name>ldns_buffer_remaining</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>written</name> <operator>=</operator> <call><name>vsnprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>ldns_buffer_current</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>remaining</name></expr></argument>,
<argument><expr><name>format</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>written</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>_status</name></name> <operator>=</operator> <name>LDNS_STATUS_INTERNAL_ERR</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>written</name> <operator>&gt;=</operator> <name>remaining</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ldns_buffer_reserve</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>written</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>_status</name></name> <operator>=</operator> <name>LDNS_STATUS_MEM_ERR</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>written</name> <operator>=</operator> <call><name>vsnprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>ldns_buffer_current</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ldns_buffer_remaining</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>written</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>_status</name></name> <operator>=</operator> <name>LDNS_STATUS_INTERNAL_ERR</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>_position</name></name> <operator>+=</operator> <name>written</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>written</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ldns_buffer_free</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buffer</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>buffer</name><operator>-&gt;</operator><name>_fixed</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type>
<name>ldns_buffer_export</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>_fixed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name><name>buffer</name><operator>-&gt;</operator><name>_data</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>ldns_bgetc</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ldns_buffer_available_at</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>_position</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_set_position</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><call><name>ldns_buffer_limit</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>EOF</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>ldns_buffer_read_u8</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ldns_buffer_copy</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name><modifier>*</modifier></type> <name>result</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_buffer</name><modifier>*</modifier></type> <name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>tocopy</name> <init>= <expr><call><name>ldns_buffer_limit</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>tocopy</name> <operator>&gt;</operator> <call><name>ldns_buffer_capacity</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>tocopy</name> <operator>=</operator> <call><name>ldns_buffer_capacity</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_buffer_clear</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_write</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>ldns_buffer_begin</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tocopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_flip</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
