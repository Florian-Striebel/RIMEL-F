<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/ldns/host2str.c">











<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ldns/config.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ldns/ldns.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_SOCKET_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ARPA_INET_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NETDB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>INET_ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INET_ADDRSTRLEN</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>INET6_ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INET6_ADDRSTRLEN</name></cpp:macro> <cpp:value>46</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<decl_stmt><decl><type><name>ldns_lookup_table</name></type> <name><name>ldns_algorithms</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>LDNS_RSAMD5</name></expr>, <expr><literal type="string">"RSAMD5"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>LDNS_DH</name></expr>, <expr><literal type="string">"DH"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>LDNS_DSA</name></expr>, <expr><literal type="string">"DSA"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>LDNS_ECC</name></expr>, <expr><literal type="string">"ECC"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>LDNS_RSASHA1</name></expr>, <expr><literal type="string">"RSASHA1"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>LDNS_DSA_NSEC3</name></expr>, <expr><literal type="string">"DSA-NSEC3-SHA1"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>LDNS_RSASHA1_NSEC3</name></expr>, <expr><literal type="string">"RSASHA1-NSEC3-SHA1"</literal></expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SHA2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><name>LDNS_RSASHA256</name></expr>, <expr><literal type="string">"RSASHA256"</literal></expr>}</block></expr>,
<expr><block>{ <expr><name>LDNS_RSASHA512</name></expr>, <expr><literal type="string">"RSASHA512"</literal></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GOST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><name>LDNS_ECC_GOST</name></expr>, <expr><literal type="string">"ECC-GOST"</literal></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ECDSA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><name>LDNS_ECDSAP256SHA256</name></expr>, <expr><literal type="string">"ECDSAP256SHA256"</literal></expr>}</block></expr>,
<expr><block>{ <expr><name>LDNS_ECDSAP384SHA384</name></expr>, <expr><literal type="string">"ECDSAP384SHA384"</literal></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ED25519</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><name>LDNS_ED25519</name></expr>, <expr><literal type="string">"ED25519"</literal></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ED448</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><name>LDNS_ED448</name></expr>, <expr><literal type="string">"ED448"</literal></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr><name>LDNS_INDIRECT</name></expr>, <expr><literal type="string">"INDIRECT"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>LDNS_PRIVATEDNS</name></expr>, <expr><literal type="string">"PRIVATEDNS"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>LDNS_PRIVATEOID</name></expr>, <expr><literal type="string">"PRIVATEOID"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>ldns_lookup_table</name></type> <name><name>ldns_cert_algorithms</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>LDNS_CERT_PKIX</name></expr>, <expr><literal type="string">"PKIX"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>LDNS_CERT_SPKI</name></expr>, <expr><literal type="string">"SPKI"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>LDNS_CERT_PGP</name></expr>, <expr><literal type="string">"PGP"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>LDNS_CERT_IPKIX</name></expr>, <expr><literal type="string">"IPKIX"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>LDNS_CERT_ISPKI</name></expr>, <expr><literal type="string">"ISPKI"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>LDNS_CERT_IPGP</name></expr>, <expr><literal type="string">"IPGP"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>LDNS_CERT_ACPKIX</name></expr>, <expr><literal type="string">"ACPKIX"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>LDNS_CERT_IACPKIX</name></expr>, <expr><literal type="string">"IACPKIX"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>LDNS_CERT_URI</name></expr>, <expr><literal type="string">"URI"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>LDNS_CERT_OID</name></expr>, <expr><literal type="string">"OID"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>ldns_lookup_table</name></type> <name><name>ldns_rr_classes</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>LDNS_RR_CLASS_IN</name></expr>, <expr><literal type="string">"IN"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>LDNS_RR_CLASS_CH</name></expr>, <expr><literal type="string">"CH"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>LDNS_RR_CLASS_HS</name></expr>, <expr><literal type="string">"HS"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>LDNS_RR_CLASS_NONE</name></expr>, <expr><literal type="string">"NONE"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>LDNS_RR_CLASS_ANY</name></expr>, <expr><literal type="string">"ANY"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>ldns_lookup_table</name></type> <name><name>ldns_rcodes</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>LDNS_RCODE_NOERROR</name></expr>, <expr><literal type="string">"NOERROR"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>LDNS_RCODE_FORMERR</name></expr>, <expr><literal type="string">"FORMERR"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>LDNS_RCODE_SERVFAIL</name></expr>, <expr><literal type="string">"SERVFAIL"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>LDNS_RCODE_NXDOMAIN</name></expr>, <expr><literal type="string">"NXDOMAIN"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>LDNS_RCODE_NOTIMPL</name></expr>, <expr><literal type="string">"NOTIMPL"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>LDNS_RCODE_REFUSED</name></expr>, <expr><literal type="string">"REFUSED"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>LDNS_RCODE_YXDOMAIN</name></expr>, <expr><literal type="string">"YXDOMAIN"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>LDNS_RCODE_YXRRSET</name></expr>, <expr><literal type="string">"YXRRSET"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>LDNS_RCODE_NXRRSET</name></expr>, <expr><literal type="string">"NXRRSET"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>LDNS_RCODE_NOTAUTH</name></expr>, <expr><literal type="string">"NOTAUTH"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>LDNS_RCODE_NOTZONE</name></expr>, <expr><literal type="string">"NOTZONE"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ldns_lookup_table</name></type> <name><name>ldns_opcodes</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>LDNS_PACKET_QUERY</name></expr>, <expr><literal type="string">"QUERY"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>LDNS_PACKET_IQUERY</name></expr>, <expr><literal type="string">"IQUERY"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>LDNS_PACKET_STATUS</name></expr>, <expr><literal type="string">"STATUS"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>LDNS_PACKET_NOTIFY</name></expr>, <expr><literal type="string">"NOTIFY"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>LDNS_PACKET_UPDATE</name></expr>, <expr><literal type="string">"UPDATE"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ldns_output_format</name></type> <name>ldns_output_format_nocomments_record</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ldns_output_format</name> <modifier>*</modifier></type><name>ldns_output_format_nocomments</name>
<init>= <expr><operator>&amp;</operator><name>ldns_output_format_nocomments_record</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ldns_output_format</name></type> <name>ldns_output_format_onlykeyids_record</name> <init>= <expr><block>{
<expr><name>LDNS_COMMENT_KEY</name></expr>, <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ldns_output_format</name> <modifier>*</modifier></type><name>ldns_output_format_onlykeyids</name>
<init>= <expr><operator>&amp;</operator><name>ldns_output_format_onlykeyids_record</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ldns_output_format</name> <modifier>*</modifier></type><name>ldns_output_format_default</name>
<init>= <expr><operator>&amp;</operator><name>ldns_output_format_onlykeyids_record</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ldns_output_format</name></type> <name>ldns_output_format_bubblebabble_record</name> <init>= <expr><block>{
<expr><name>LDNS_COMMENT_KEY</name> <operator>|</operator> <name>LDNS_COMMENT_BUBBLEBABBLE</name> <operator>|</operator> <name>LDNS_COMMENT_FLAGS</name></expr>, <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ldns_output_format</name> <modifier>*</modifier></type><name>ldns_output_format_bubblebabble</name>
<init>= <expr><operator>&amp;</operator><name>ldns_output_format_bubblebabble_record</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>ldns_output_format_covers_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_output_format</name><modifier>*</modifier></type> <name>fmt</name></decl></parameter>, <parameter><decl><type><name>ldns_rr_type</name></type> <name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>fmt</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>fmt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>LDNS_FMT_RFC3597</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name>ldns_output_format_storage</name><operator>*</operator><operator>)</operator><name>fmt</name><operator>)</operator><operator>-&gt;</operator><name>bitmap</name> <operator>&amp;&amp;</operator>
<call><name>ldns_nsec_bitmap_covers_type</name><argument_list>(
<argument><expr><operator>(</operator><operator>(</operator><name>ldns_output_format_storage</name><operator>*</operator><operator>)</operator><name>fmt</name><operator>)</operator><operator>-&gt;</operator><name>bitmap</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_output_format_set_type</name><parameter_list>(<parameter><decl><type><name>ldns_output_format</name><modifier>*</modifier></type> <name>fmt</name></decl></parameter>, <parameter><decl><type><name>ldns_rr_type</name></type> <name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_output_format_storage</name><modifier>*</modifier></type> <name>fmt_st</name> <init>= <expr><operator>(</operator><name>ldns_output_format_storage</name><operator>*</operator><operator>)</operator><name>fmt</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>fmt</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>fmt_st</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>LDNS_FMT_RFC3597</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_output_format_set</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>LDNS_FMT_RFC3597</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <name><name>fmt_st</name><operator>-&gt;</operator><name>bitmap</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>ldns_rdf_bitmap_known_rr_types_space</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fmt_st</name><operator>-&gt;</operator><name>bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>ldns_nsec_bitmap_set_type</name><argument_list>(<argument><expr><name><name>fmt_st</name><operator>-&gt;</operator><name>bitmap</name></name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_output_format_clear_type</name><parameter_list>(<parameter><decl><type><name>ldns_output_format</name><modifier>*</modifier></type> <name>fmt</name></decl></parameter>, <parameter><decl><type><name>ldns_rr_type</name></type> <name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_output_format_storage</name><modifier>*</modifier></type> <name>fmt_st</name> <init>= <expr><operator>(</operator><name>ldns_output_format_storage</name><operator>*</operator><operator>)</operator><name>fmt</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>fmt</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>fmt_st</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>LDNS_FMT_RFC3597</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_output_format_set</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>LDNS_FMT_RFC3597</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <name><name>fmt_st</name><operator>-&gt;</operator><name>bitmap</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>ldns_rdf_bitmap_known_rr_types</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fmt_st</name><operator>-&gt;</operator><name>bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>ldns_nsec_bitmap_clear_type</name><argument_list>(<argument><expr><name><name>fmt_st</name><operator>-&gt;</operator><name>bitmap</name></name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_pkt_opcode2buffer_str</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>ldns_pkt_opcode</name></type> <name>opcode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_lookup_table</name> <modifier>*</modifier></type><name>lt</name> <init>= <expr><call><name>ldns_lookup_by_id</name><argument_list>(<argument><expr><name>ldns_opcodes</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>lt</name> <operator>&amp;&amp;</operator> <name><name>lt</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>lt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"OPCODE%u"</literal></expr></argument>, <argument><expr><name>opcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><call><name>ldns_buffer_status</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_pkt_rcode2buffer_str</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>ldns_pkt_rcode</name></type> <name>rcode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_lookup_table</name> <modifier>*</modifier></type><name>lt</name> <init>= <expr><call><name>ldns_lookup_by_id</name><argument_list>(<argument><expr><name>ldns_rcodes</name></expr></argument>, <argument><expr><name>rcode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>lt</name> <operator>&amp;&amp;</operator> <name><name>lt</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>lt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"RCODE%u"</literal></expr></argument>, <argument><expr><name>rcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><call><name>ldns_buffer_status</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_algorithm2buffer_str</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>output</name></decl></parameter>,
<parameter><decl><type><name>ldns_algorithm</name></type> <name>algorithm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_lookup_table</name> <modifier>*</modifier></type><name>lt</name> <init>= <expr><call><name>ldns_lookup_by_id</name><argument_list>(<argument><expr><name>ldns_algorithms</name></expr></argument>,
<argument><expr><name>algorithm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>lt</name> <operator>&amp;&amp;</operator> <name><name>lt</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>lt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"ALG%u"</literal></expr></argument>, <argument><expr><name>algorithm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><call><name>ldns_buffer_status</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_cert_algorithm2buffer_str</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>output</name></decl></parameter>,
<parameter><decl><type><name>ldns_cert_algorithm</name></type> <name>cert_algorithm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_lookup_table</name> <modifier>*</modifier></type><name>lt</name> <init>= <expr><call><name>ldns_lookup_by_id</name><argument_list>(<argument><expr><name>ldns_cert_algorithms</name></expr></argument>,
<argument><expr><name>cert_algorithm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>lt</name> <operator>&amp;&amp;</operator> <name><name>lt</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>lt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"CERT_ALG%u"</literal></expr></argument>,
<argument><expr><name>cert_algorithm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><call><name>ldns_buffer_status</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>ldns_pkt_opcode2str</name><parameter_list>(<parameter><decl><type><name>ldns_pkt_opcode</name></type> <name>opcode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>ldns_buffer_new</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_pkt_opcode2buffer_str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>ldns_buffer_export2str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ldns_buffer_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>ldns_pkt_rcode2str</name><parameter_list>(<parameter><decl><type><name>ldns_pkt_rcode</name></type> <name>rcode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>ldns_buffer_new</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_pkt_rcode2buffer_str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>rcode</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>ldns_buffer_export2str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ldns_buffer_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>ldns_pkt_algorithm2str</name><parameter_list>(<parameter><decl><type><name>ldns_algorithm</name></type> <name>algorithm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>ldns_buffer_new</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_algorithm2buffer_str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>algorithm</name></expr></argument>)</argument_list></call>
<operator>==</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>ldns_buffer_export2str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ldns_buffer_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>ldns_pkt_cert_algorithm2str</name><parameter_list>(<parameter><decl><type><name>ldns_cert_algorithm</name></type> <name>cert_algorithm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>ldns_buffer_new</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_cert_algorithm2buffer_str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>cert_algorithm</name></expr></argument>)</argument_list></call>
<operator>==</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>ldns_buffer_export2str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ldns_buffer_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>ldns_status</name></type>
<name>ldns_rdf2buffer_str_dname</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>dname</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>src_pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>dname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>data</name><index>[<expr><name>src_pos</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>dname</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>LDNS_MAX_DOMAINLEN</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>LDNS_STATUS_DOMAINNAME_OVERFLOW</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>==</operator> <call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>dname</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<while>while <condition>(<expr><operator>(</operator><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>src_pos</name> <operator>&lt;</operator> <call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>dname</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>src_pos</name><operator>++</operator></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>



<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>data</name><index>[<expr><name>src_pos</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'.'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">';'</literal> <operator>||</operator>
<name>c</name> <operator>==</operator> <literal type="char">'('</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">')'</literal> <operator>||</operator>
<name>c</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"\\%c"</literal></expr></argument>,
<argument><expr><name><name>data</name><index>[<expr><name>src_pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>isascii</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isgraph</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"\\%03u"</literal></expr></argument>,
<argument><expr><name><name>data</name><index>[<expr><name>src_pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><name>src_pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>src_pos</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>src_pos</name> <operator>&lt;</operator> <call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>dname</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>data</name><index>[<expr><name>src_pos</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>
<return>return <expr><call><name>ldns_buffer_status</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_rdf2buffer_str_int8</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>rdf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>data</name> <init>= <expr><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ldns_buffer_status</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_rdf2buffer_str_int16</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>rdf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>data</name> <init>= <expr><call><name>ldns_read_uint16</name><argument_list>(<argument><expr><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ldns_buffer_status</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_rdf2buffer_str_int32</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>rdf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>data</name> <init>= <expr><call><name>ldns_read_uint32</name><argument_list>(<argument><expr><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ldns_buffer_status</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_rdf2buffer_str_time</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>rdf</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>date_buf</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tm</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_serial_arithmitics_gmtime_r</name><argument_list>(<argument><expr><call><name>ldns_rdf2native_int32</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call>
<operator>&amp;&amp;</operator> <call><name>strftime</name><argument_list>(<argument><expr><name>date_buf</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="string">"%Y%m%d%H%M%S"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>date_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>ldns_buffer_status</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_rdf2buffer_str_a</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>rdf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><name>INET_ADDRSTRLEN</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>INET_ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>ldns_buffer_status</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_rdf2buffer_str_aaaa</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>rdf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><name>INET6_ADDRSTRLEN</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>INET6_ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>ldns_buffer_status</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ldns_characters2buffer_str</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name><modifier>*</modifier></type> <name>output</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>amount</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>characters</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>ch</name></decl>;</decl_stmt>
<while>while <condition>(<expr><name>amount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>*</operator><name>characters</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isprint</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>ch</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'\"'</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"\\%c"</literal></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"\\%03u"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>uint8_t</name><operator>)</operator> <name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>amount</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_rdf2buffer_str_str</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>rdf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_WIRE_RDATA_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_WIRE_RDATA_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_characters2buffer_str</name><argument_list>(<argument><expr><name>output</name></expr></argument>,
<argument><expr><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>, <argument><expr><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ldns_buffer_status</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_rdf2buffer_str_b64</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>rdf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><call><name>ldns_b64_ntop_calculate_size</name><argument_list>(<argument><expr><call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>b64</name> <init>= <expr><call><name>LDNS_XMALLOC</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>b64</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_b64_ntop</name><argument_list>(<argument><expr><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>b64</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>b64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>b64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ldns_buffer_status</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_rdf2buffer_str_b32_ext</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>rdf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>b32</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LDNS_STATUS_OK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>ldns_b32_ntop_calculate_size</name><argument_list>(<argument><expr><call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b32</name> <operator>=</operator> <call><name>LDNS_XMALLOC</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name>size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>b32</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <call><name>ldns_b32_ntop_extended_hex</name><argument_list>(<argument><expr><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>b32</name></expr></argument>, <argument><expr><name>size</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>b32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>b32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ldns_buffer_status</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_rdf2buffer_str_hex</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>rdf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><call><name>ldns_buffer_status</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ldns_status</name></type>
<name>ldns_rdf2buffer_str_type_fmt</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>output</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_output_format</name><modifier>*</modifier></type> <name>fmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>rdf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>data</name> <init>= <expr><call><name>ldns_read_uint16</name><argument_list>(<argument><expr><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>ldns_output_format_covers_type</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>ldns_rr_descript</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>ldns_rr_descript</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>_name</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><call><name>ldns_rr_descript</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"TYPE%u"</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><call><name>ldns_buffer_status</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_rdf2buffer_str_type</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>rdf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_rdf2buffer_str_type_fmt</name><argument_list>(<argument><expr><name>output</name></expr></argument>,
<argument><expr><name>ldns_output_format_default</name></expr></argument>, <argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_rdf2buffer_str_class</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>rdf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>data</name> <init>= <expr><call><name>ldns_read_uint16</name><argument_list>(<argument><expr><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_lookup_table</name> <modifier>*</modifier></type><name>lt</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lt</name> <operator>=</operator> <call><name>ldns_lookup_by_id</name><argument_list>(<argument><expr><name>ldns_rr_classes</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>lt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"\t%s"</literal></expr></argument>, <argument><expr><name><name>lt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"\tCLASS%d"</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><call><name>ldns_buffer_status</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_rdf2buffer_str_cert_alg</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>rdf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>data</name> <init>= <expr><call><name>ldns_read_uint16</name><argument_list>(<argument><expr><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_lookup_table</name> <modifier>*</modifier></type><name>lt</name></decl>;</decl_stmt>
<expr_stmt><expr><name>lt</name> <operator>=</operator> <call><name>ldns_lookup_by_id</name><argument_list>(<argument><expr><name>ldns_cert_algorithms</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>lt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>lt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><call><name>ldns_buffer_status</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_rdf2buffer_str_alg</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>rdf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_rdf2buffer_str_int8</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>loc_cm_print</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>mantissa</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>exponent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>exponent</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>exponent</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mantissa</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"0.%02ld"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>mantissa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>mantissa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>exponent</name><operator>-</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_rr_type2buffer_str</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_rr_type</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ldns_rr_descriptor</name> <modifier>*</modifier></type><name>descriptor</name></decl>;</decl_stmt>

<expr_stmt><expr><name>descriptor</name> <operator>=</operator> <call><name>ldns_rr_descript</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LDNS_RR_TYPE_IXFR</name></expr>:</case>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"IXFR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RR_TYPE_AXFR</name></expr>:</case>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"AXFR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RR_TYPE_MAILA</name></expr>:</case>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"MAILA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RR_TYPE_MAILB</name></expr>:</case>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"MAILB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RR_TYPE_ANY</name></expr>:</case>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"ANY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><name>descriptor</name> <operator>&amp;&amp;</operator> <name><name>descriptor</name><operator>-&gt;</operator><name>_name</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>descriptor</name><operator>-&gt;</operator><name>_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"TYPE%u"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></switch>
<return>return <expr><call><name>ldns_buffer_status</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>ldns_rr_type2str</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_rr_type</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>ldns_buffer_new</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_rr_type2buffer_str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>ldns_buffer_export2str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ldns_buffer_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>ldns_status</name></type>
<name>ldns_rr_class2buffer_str</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>output</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_rr_class</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_lookup_table</name> <modifier>*</modifier></type><name>lt</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lt</name> <operator>=</operator> <call><name>ldns_lookup_by_id</name><argument_list>(<argument><expr><name>ldns_rr_classes</name></expr></argument>, <argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>lt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>lt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"CLASS%d"</literal></expr></argument>, <argument><expr><name>klass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><call><name>ldns_buffer_status</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>ldns_rr_class2str</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_rr_class</name></type> <name>klass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>ldns_buffer_new</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_rr_class2buffer_str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>klass</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>ldns_buffer_export2str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_buffer_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_rdf2buffer_str_loc</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>rdf</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>horizontal_precision</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>vertical_precision</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>longitude</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>latitude</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>altitude</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>northerness</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>easterness</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>equator</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <call><name>ldns_power</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_WIRE_RDATA_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>version</name> <operator>=</operator> <call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>version</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_WIRE_RDATA_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">1</literal></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><name>horizontal_precision</name> <operator>=</operator> <call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><name>vertical_precision</name> <operator>=</operator> <call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">3</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><name>latitude</name> <operator>=</operator> <call><name>ldns_read_uint32</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">4</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>longitude</name> <operator>=</operator> <call><name>ldns_read_uint32</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">8</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>altitude</name> <operator>=</operator> <call><name>ldns_read_uint32</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">12</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>latitude</name> <operator>&gt;</operator> <name>equator</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>northerness</name> <operator>=</operator> <literal type="char">'N'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>latitude</name> <operator>=</operator> <name>latitude</name> <operator>-</operator> <name>equator</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>northerness</name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>latitude</name> <operator>=</operator> <name>equator</name> <operator>-</operator> <name>latitude</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <name>latitude</name> <operator>/</operator> <operator>(</operator><literal type="number">1000</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>latitude</name> <operator>=</operator> <name>latitude</name> <operator>%</operator> <operator>(</operator><literal type="number">1000</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <name>latitude</name> <operator>/</operator> <operator>(</operator><literal type="number">1000</literal> <operator>*</operator> <literal type="number">60</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>latitude</name> <operator>=</operator> <name>latitude</name> <operator>%</operator> <operator>(</operator><literal type="number">1000</literal> <operator>*</operator> <literal type="number">60</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>latitude</name> <operator>/</operator> <literal type="number">1000.0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"%02u %02u %0.3f %c "</literal></expr></argument>,
<argument><expr><name>h</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>northerness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>longitude</name> <operator>&gt;</operator> <name>equator</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>easterness</name> <operator>=</operator> <literal type="char">'E'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>longitude</name> <operator>=</operator> <name>longitude</name> <operator>-</operator> <name>equator</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>easterness</name> <operator>=</operator> <literal type="char">'W'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>longitude</name> <operator>=</operator> <name>equator</name> <operator>-</operator> <name>longitude</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <name>longitude</name> <operator>/</operator> <operator>(</operator><literal type="number">1000</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>longitude</name> <operator>=</operator> <name>longitude</name> <operator>%</operator> <operator>(</operator><literal type="number">1000</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <name>longitude</name> <operator>/</operator> <operator>(</operator><literal type="number">1000</literal> <operator>*</operator> <literal type="number">60</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>longitude</name> <operator>=</operator> <name>longitude</name> <operator>%</operator> <operator>(</operator><literal type="number">1000</literal> <operator>*</operator> <literal type="number">60</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>longitude</name> <operator>/</operator> <operator>(</operator><literal type="number">1000.0</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"%02u %02u %0.3f %c "</literal></expr></argument>,
<argument><expr><name>h</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>easterness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name>altitude</name><operator>)</operator> <operator>/</operator> <literal type="number">100</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>-=</operator> <literal type="number">100000</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>altitude</name><operator>%</operator><literal type="number">100</literal> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"%.2f"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"%.0f"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"m "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>loc_cm_print</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><operator>(</operator><name>size</name> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>size</name> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"m "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>loc_cm_print</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><operator>(</operator><name>horizontal_precision</name> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>,
<argument><expr><name>horizontal_precision</name> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"m "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>loc_cm_print</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><operator>(</operator><name>vertical_precision</name> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>,
<argument><expr><name>vertical_precision</name> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ldns_buffer_status</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><call><name>ldns_rdf2buffer_str_hex</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_rdf2buffer_str_unknown</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>rdf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"\\#%u "</literal></expr></argument>, <argument><expr><call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ldns_rdf2buffer_str_hex</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_rdf2buffer_str_nsap</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>rdf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"0x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ldns_rdf2buffer_str_hex</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_rdf2buffer_str_atma</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>rdf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_rdf2buffer_str_hex</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_rdf2buffer_str_wks</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>rdf</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>protoent</name></name> <modifier>*</modifier></type><name>protocol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>proto_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>protocol_nr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>servent</name></name> <modifier>*</modifier></type><name>service</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>current_service</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_WIRE_RDATA_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>protocol_nr</name> <operator>=</operator> <call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</expr_stmt>
<expr_stmt><expr><name>protocol</name> <operator>=</operator> <call><name>getprotobynumber</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>protocol_nr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>protocol</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>protocol</name><operator>-&gt;</operator><name>p_name</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>proto_name</name> <operator>=</operator> <name><name>protocol</name><operator>-&gt;</operator><name>p_name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"%s "</literal></expr></argument>, <argument><expr><name><name>protocol</name><operator>-&gt;</operator><name>p_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"%u "</literal></expr></argument>, <argument><expr><name>protocol_nr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ENDPROTOENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>endprotoent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>current_service</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init>
<condition><expr><name>current_service</name> <operator>&lt;</operator> <operator>(</operator><call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>current_service</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ldns_get_bit</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">1</literal></expr>]</index><operator>)</operator></expr></argument>, <argument><expr><name>current_service</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>service</name> <operator>=</operator> <call><name>getservbyport</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>htons</name><argument_list>(<argument><expr><name>current_service</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>proto_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>service</name> <operator>&amp;&amp;</operator> <name><name>service</name><operator>-&gt;</operator><name>s_name</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"%s "</literal></expr></argument>, <argument><expr><name><name>service</name><operator>-&gt;</operator><name>s_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"%u "</literal></expr></argument>, <argument><expr><name>current_service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ENDSERVENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>endservent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><call><name>ldns_buffer_status</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ldns_status</name></type>
<name>ldns_rdf2buffer_str_nsec_fmt</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>output</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_output_format</name><modifier>*</modifier></type> <name>fmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>rdf</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<decl_stmt><decl><type><name>uint8_t</name></type> <name>window_block_nr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>bitmap_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>bit_pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>pos</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;</operator> <call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>window_block_nr</name> <operator>=</operator> <name><name>data</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>bitmap_length</name> <operator>=</operator> <name><name>data</name><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>pos</name> <operator>+</operator> <name>bitmap_length</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_WIRE_RDATA_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>bit_pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>bit_pos</name> <operator>&lt;</operator> <operator>(</operator><name>bitmap_length</name><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>bit_pos</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>ldns_get_bit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>, <argument><expr><name>bit_pos</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">256</literal> <operator>*</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator> <name>window_block_nr</name> <operator>+</operator> <name>bit_pos</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>ldns_output_format_covers_type</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>ldns_rr_descript</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>ldns_rr_descript</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>_name</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"%s "</literal></expr></argument>,
<argument><expr><call><name>ldns_rr_descript</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"TYPE%u "</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>pos</name> <operator>+=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator> <name>bitmap_length</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><call><name>ldns_buffer_status</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_rdf2buffer_str_nsec</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>rdf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_rdf2buffer_str_nsec_fmt</name><argument_list>(<argument><expr><name>output</name></expr></argument>,
<argument><expr><name>ldns_output_format_default</name></expr></argument>, <argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_rdf2buffer_str_nsec3_salt</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>rdf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>salt_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>salt_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_WIRE_RDATA_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>salt_length</name> <operator>=</operator> <name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>salt_length</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator><name>salt_length</name><operator>)</operator><operator>+</operator><literal type="number">1</literal> <operator>&gt;</operator> <call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"- "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>salt_pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>salt_pos</name> <operator>&lt;</operator> <name>salt_length</name></expr>;</condition> <incr><expr><name>salt_pos</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <name>salt_pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><call><name>ldns_buffer_status</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_rdf2buffer_str_period</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>rdf</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_WIRE_RDATA_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><call><name>ldns_read_uint32</name><argument_list>(<argument><expr><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ldns_buffer_status</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_rdf2buffer_str_tsigtime</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>output</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>rdf</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>tsigtime</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>d0</name></decl>, <decl><type ref="prev"/><name>d1</name></decl>, <decl><type ref="prev"/><name>d2</name></decl>, <decl><type ref="prev"/><name>d3</name></decl>, <decl><type ref="prev"/><name>d4</name></decl>, <decl><type ref="prev"/><name>d5</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_WIRE_RDATA_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>d0</name> <operator>=</operator> <name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d1</name> <operator>=</operator> <name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d2</name> <operator>=</operator> <name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d3</name> <operator>=</operator> <name><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d4</name> <operator>=</operator> <name><name>data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d5</name> <operator>=</operator> <name><name>data</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tsigtime</name> <operator>=</operator> <operator>(</operator><name>d0</name><operator>&lt;&lt;</operator><literal type="number">40</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>d1</name><operator>&lt;&lt;</operator><literal type="number">32</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>d2</name><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>d3</name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>d4</name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name>d5</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"%llu "</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name>tsigtime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ldns_buffer_status</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_rdf2buffer_str_apl</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>rdf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>address_family</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>prefix</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>negation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>adf_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>pos</name> <operator>&lt;</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>pos</name> <operator>+</operator> <literal type="number">3</literal> <operator>&gt;=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LDNS_STATUS_WIRE_RDATA_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>address_family</name> <operator>=</operator> <call><name>ldns_read_uint16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prefix</name> <operator>=</operator> <name><name>data</name><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>negation</name> <operator>=</operator> <name><name>data</name><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <name>LDNS_APL_NEGATION</name></expr>;</expr_stmt>
<expr_stmt><expr><name>adf_length</name> <operator>=</operator> <name><name>data</name><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <name>LDNS_APL_MASK</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>address_family</name> <operator>==</operator> <name>LDNS_APL_IP4</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>negation</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"%u:"</literal></expr></argument>, <argument><expr><name>address_family</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator> <name>adf_length</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>pos</name><operator>+</operator><name>i</name><operator>+</operator><literal type="number">4</literal> <operator>&gt;=</operator> <call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LDNS_STATUS_WIRE_RDATA_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>,
<argument><expr><name><name>data</name><index>[<expr><name>pos</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"/%u "</literal></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>address_family</name> <operator>==</operator> <name>LDNS_APL_IP6</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>negation</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"%u:"</literal></expr></argument>, <argument><expr><name>address_family</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator> <name>adf_length</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>pos</name><operator>+</operator><name>i</name><operator>+</operator><literal type="number">4</literal> <operator>&gt;=</operator> <call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LDNS_STATUS_WIRE_RDATA_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"%02x"</literal></expr></argument>,
<argument><expr><name><name>data</name><index>[<expr><name>pos</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"00"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"/%u "</literal></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>,
<argument><expr><literal type="string">"Unknown address family: %u data: "</literal></expr></argument>,
<argument><expr><name>address_family</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator> <operator>(</operator><literal type="number">4</literal> <operator>+</operator> <name>adf_length</name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>pos</name><operator>+</operator><name>i</name> <operator>&gt;=</operator> <call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LDNS_STATUS_WIRE_RDATA_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>pos</name> <operator>+=</operator> <literal type="number">4</literal> <operator>+</operator> <name>adf_length</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><call><name>ldns_buffer_status</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_rdf2buffer_str_int16_data</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>rdf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>b64</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_WIRE_RDATA_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>ldns_b64_ntop_calculate_size</name><argument_list>(<argument><expr><call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"%u "</literal></expr></argument>, <argument><expr><call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>b64</name> <operator>=</operator> <call><name>LDNS_XMALLOC</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>b64</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator>
<call><name>ldns_b64_ntop</name><argument_list>(<argument><expr><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><name>b64</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>b64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>b64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>ldns_buffer_status</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_rdf2buffer_str_ipseckey</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>rdf</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>precedence</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>gateway_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>algorithm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>gateway</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>gateway_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>public_key_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>public_key_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>public_key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>status</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_WIRE_RDATA_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>precedence</name> <operator>=</operator> <name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>gateway_type</name> <operator>=</operator> <name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>algorithm</name> <operator>=</operator> <name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>gateway_type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>

<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>gateway_data</name> <operator>=</operator> <call><name>LDNS_XMALLOC</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>LDNS_IP4ADDRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>gateway_data</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>offset</name> <operator>+</operator> <name>LDNS_IP4ADDRLEN</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>gateway_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>offset</name></expr>]</index></name></expr></argument>, <argument><expr><name>LDNS_IP4ADDRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>gateway</name> <operator>=</operator> <call><name>ldns_rdf_new</name><argument_list>(<argument><expr><name>LDNS_RDF_TYPE_A</name></expr></argument>,
<argument><expr><name>LDNS_IP4ADDRLEN</name></expr></argument> , <argument><expr><name>gateway_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>LDNS_IP4ADDRLEN</name></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>gateway</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>gateway_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name>gateway_data</name> <operator>=</operator> <call><name>LDNS_XMALLOC</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>LDNS_IP6ADDRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>gateway_data</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>offset</name> <operator>+</operator> <name>LDNS_IP6ADDRLEN</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>gateway_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>offset</name></expr>]</index></name></expr></argument>, <argument><expr><name>LDNS_IP6ADDRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>LDNS_IP6ADDRLEN</name></expr>;</expr_stmt>
<expr_stmt><expr><name>gateway</name> <operator>=</operator>
<call><name>ldns_rdf_new</name><argument_list>(<argument><expr><name>LDNS_RDF_TYPE_AAAA</name></expr></argument>,
<argument><expr><name>LDNS_IP6ADDRLEN</name></expr></argument>, <argument><expr><name>gateway_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>gateway</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>gateway_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_wire2dname</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gateway</name></expr></argument>, <argument><expr><name>data</name></expr></argument>,
<argument><expr><call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>status</name> <operator>!=</operator> <name>LDNS_STATUS_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>status</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default>

<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>offset</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>public_key_size</name> <operator>=</operator> <call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name>public_key_data</name> <operator>=</operator> <call><name>LDNS_XMALLOC</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>public_key_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>public_key_data</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>gateway</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>public_key_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>offset</name></expr>]</index></name></expr></argument>, <argument><expr><name>public_key_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>public_key</name> <operator>=</operator> <call><name>ldns_rdf_new</name><argument_list>(<argument><expr><name>LDNS_RDF_TYPE_B64</name></expr></argument>,
<argument><expr><name>public_key_size</name></expr></argument>, <argument><expr><name>public_key_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>public_key</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>public_key_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>gateway</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_MEM_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"%u %u %u "</literal></expr></argument>, <argument><expr><name>precedence</name></expr></argument>, <argument><expr><name>gateway_type</name></expr></argument>, <argument><expr><name>algorithm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>gateway</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ldns_rdf2buffer_str</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>gateway</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ldns_rdf2buffer_str</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>public_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>gateway</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>public_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ldns_buffer_status</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_rdf2buffer_str_ilnp64</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>rdf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_WIRE_RDATA_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>,<argument><expr><literal type="string">"%.4x:%.4x:%.4x:%.4x"</literal></expr></argument>,
<argument><expr><call><name>ldns_read_uint16</name><argument_list>(<argument><expr><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ldns_read_uint16</name><argument_list>(<argument><expr><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ldns_read_uint16</name><argument_list>(<argument><expr><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ldns_read_uint16</name><argument_list>(<argument><expr><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ldns_buffer_status</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_rdf2buffer_str_eui48</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>rdf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_WIRE_RDATA_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>,<argument><expr><literal type="string">"%.2x-%.2x-%.2x-%.2x-%.2x-%.2x"</literal></expr></argument>,
<argument><expr><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>, <argument><expr><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">1</literal></expr>]</index></expr></argument>,
<argument><expr><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">3</literal></expr>]</index></expr></argument>,
<argument><expr><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">4</literal></expr>]</index></expr></argument>, <argument><expr><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">5</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ldns_buffer_status</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_rdf2buffer_str_eui64</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>rdf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_WIRE_RDATA_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>,<argument><expr><literal type="string">"%.2x-%.2x-%.2x-%.2x-%.2x-%.2x-%.2x-%.2x"</literal></expr></argument>,
<argument><expr><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>, <argument><expr><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">1</literal></expr>]</index></expr></argument>,
<argument><expr><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">3</literal></expr>]</index></expr></argument>,
<argument><expr><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">4</literal></expr>]</index></expr></argument>, <argument><expr><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">5</literal></expr>]</index></expr></argument>,
<argument><expr><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">6</literal></expr>]</index></expr></argument>, <argument><expr><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">7</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ldns_buffer_status</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_rdf2buffer_str_tag</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>rdf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>nchars</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>chars</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>ch</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_WIRE_RDATA_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>nchars</name> <operator>=</operator> <call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nchars</name> <operator>&gt;=</operator> <call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call> <operator>||</operator>
<name>nchars</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_WIRE_RDATA_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>chars</name> <operator>=</operator> <call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>nchars</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>*</operator><name>chars</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>isalnum</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_WIRE_RDATA_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nchars</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><call><name>ldns_buffer_status</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_rdf2buffer_str_long_str</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>rdf</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_characters2buffer_str</name><argument_list>(<argument><expr><name>output</name></expr></argument>,
<argument><expr><call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ldns_buffer_status</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_rdf2buffer_str_hip</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>rdf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>rdf_size</name> <init>= <expr><call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>hit_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>pk_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>written</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>rdf_size</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_WIRE_RDATA_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>hit_size</name> <operator>=</operator> <name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<operator>(</operator><name>pk_size</name> <operator>=</operator> <call><name>ldns_read_uint16</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<name>rdf_size</name> <operator>&lt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>hit_size</name> <operator>+</operator> <name>pk_size</name> <operator>+</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>LDNS_STATUS_WIRE_RDATA_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"%d "</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>data</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</init> <condition><expr><name>hit_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>hit_size</name><operator>--</operator></expr><operator>,</operator> <expr><name>data</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>*</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>ldns_buffer_write_u8</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator> <literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ldns_buffer_reserve</name><argument_list>(<argument><expr><name>output</name></expr></argument>,
<argument><expr><call><name>ldns_b64_ntop_calculate_size</name><argument_list>(<argument><expr><name>pk_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>written</name> <operator>=</operator> <call><name>ldns_b64_ntop</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>pk_size</name></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>ldns_buffer_current</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ldns_buffer_remaining</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>written</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name>written</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>ldns_buffer_remaining</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>_position</name></name> <operator>+=</operator> <name>written</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>ldns_buffer_status</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ldns_status</name></type>
<name>ldns_rdf2buffer_str_fmt</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_output_format</name><modifier>*</modifier></type> <name>fmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>rdf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>res</name> <init>= <expr><name>LDNS_STATUS_OK</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>rdf</name></expr>)</condition> <block>{<block_content>
<switch>switch<condition>(<expr><call><name>ldns_rdf_get_type</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LDNS_RDF_TYPE_NONE</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_DNAME</name></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ldns_rdf2buffer_str_dname</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_INT8</name></expr>:</case>
<case>case <expr><name>LDNS_RDF_TYPE_ALG</name></expr>:</case>
<case>case <expr><name>LDNS_RDF_TYPE_CERTIFICATE_USAGE</name></expr>:</case>
<case>case <expr><name>LDNS_RDF_TYPE_SELECTOR</name></expr>:</case>
<case>case <expr><name>LDNS_RDF_TYPE_MATCHING_TYPE</name></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ldns_rdf2buffer_str_int8</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_INT16</name></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ldns_rdf2buffer_str_int16</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_INT32</name></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ldns_rdf2buffer_str_int32</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_PERIOD</name></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ldns_rdf2buffer_str_period</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_TSIGTIME</name></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ldns_rdf2buffer_str_tsigtime</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_A</name></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ldns_rdf2buffer_str_a</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_AAAA</name></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ldns_rdf2buffer_str_aaaa</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_STR</name></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ldns_rdf2buffer_str_str</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_APL</name></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ldns_rdf2buffer_str_apl</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_B32_EXT</name></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ldns_rdf2buffer_str_b32_ext</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_B64</name></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ldns_rdf2buffer_str_b64</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_HEX</name></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ldns_rdf2buffer_str_hex</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_NSEC</name></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ldns_rdf2buffer_str_nsec_fmt</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_NSEC3_SALT</name></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ldns_rdf2buffer_str_nsec3_salt</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_TYPE</name></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ldns_rdf2buffer_str_type_fmt</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_CLASS</name></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ldns_rdf2buffer_str_class</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_CERT_ALG</name></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ldns_rdf2buffer_str_cert_alg</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_UNKNOWN</name></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ldns_rdf2buffer_str_unknown</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_TIME</name></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ldns_rdf2buffer_str_time</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_HIP</name></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ldns_rdf2buffer_str_hip</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_LOC</name></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ldns_rdf2buffer_str_loc</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_WKS</name></expr>:</case>
<case>case <expr><name>LDNS_RDF_TYPE_SERVICE</name></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ldns_rdf2buffer_str_wks</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_NSAP</name></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ldns_rdf2buffer_str_nsap</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_ATMA</name></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ldns_rdf2buffer_str_atma</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_IPSECKEY</name></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ldns_rdf2buffer_str_ipseckey</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_INT16_DATA</name></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ldns_rdf2buffer_str_int16_data</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_NSEC3_NEXT_OWNER</name></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ldns_rdf2buffer_str_b32_ext</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_ILNP64</name></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ldns_rdf2buffer_str_ilnp64</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_EUI48</name></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ldns_rdf2buffer_str_eui48</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_EUI64</name></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ldns_rdf2buffer_str_eui64</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_TAG</name></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ldns_rdf2buffer_str_tag</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RDF_TYPE_LONG_STR</name></expr>:</case>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ldns_rdf2buffer_str_long_str</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"(null) "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> <operator>=</operator> <name>LDNS_STATUS_ERR</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_rdf2buffer_str</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>rdf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_rdf2buffer_str_fmt</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>,<argument><expr><name>ldns_output_format_default</name></expr></argument>,<argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type>
<name>ldns_b32_ext2dname</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>rdf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>b32</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>ldns_b32_ntop_calculate_size</name><argument_list>(<argument><expr><call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b32</name> <operator>=</operator> <call><name>LDNS_XMALLOC</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name>size</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>b32</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ldns_b32_ntop_extended_hex</name><argument_list>(<argument><expr><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><call><name>ldns_rdf_size</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>b32</name></expr></argument>, <argument><expr><name>size</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>b32</name><index>[<expr><name>size</name></expr>]</index></name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b32</name><index>[<expr><name>size</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_str2rdf_dname</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><name>b32</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>b32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>out</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>b32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ldns_status</name></type>
<name>ldns_rr2buffer_str_rfc3597</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_rr</name> <modifier>*</modifier></type><name>rr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>total_rdfsize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"TYPE%u\t"</literal></expr></argument>, <argument><expr><call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ldns_rr_rd_count</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>total_rdfsize</name> <operator>+=</operator> <call><name>ldns_rdf_size</name><argument_list>(<argument><expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>rr</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>total_rdfsize</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"\\#0\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ldns_buffer_status</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"\\#%d "</literal></expr></argument>, <argument><expr><name>total_rdfsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ldns_rr_rd_count</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name>ldns_rdf_size</name><argument_list>(<argument><expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>rr</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"%.2x"</literal></expr></argument>,
<argument><expr><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>rr</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><index>[<expr><name>j</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ldns_buffer_status</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_rr2buffer_str_fmt</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>output</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_output_format</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_rr</name> <modifier>*</modifier></type><name>rr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>status</name> <init>= <expr><name>LDNS_STATUS_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_output_format_storage</name><modifier>*</modifier></type> <name>fmt_st</name> <init>= <expr><operator>(</operator><name>ldns_output_format_storage</name><operator>*</operator><operator>)</operator><name>fmt</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fmt_st</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fmt_st</name> <operator>=</operator> <operator>(</operator><name>ldns_output_format_storage</name><operator>*</operator><operator>)</operator>
<name>ldns_output_format_default</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rr</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>LDNS_COMMENT_NULLS</name> <operator>&amp;</operator> <name><name>fmt_st</name><operator>-&gt;</operator><name>flags</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"; (null)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>ldns_buffer_status</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_rr_owner</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_rdf2buffer_str_dname</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><call><name>ldns_rr_owner</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ldns_rr_is_question</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"\t%d"</literal></expr></argument>, <argument><expr><call><name>ldns_rr_ttl</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_rr_class2buffer_str</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><call><name>ldns_rr_get_class</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ldns_output_format_covers_type</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>ldns_rr2buffer_str_rfc3597</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_rr_type2buffer_str</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ldns_rr_rd_count</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>ldns_rr_is_question</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"\t\\#0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ldns_rr_rd_count</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fmt_st</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>LDNS_FMT_ZEROIZE_RRSIGS</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LDNS_RR_TYPE_RRSIG</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator> <name>i</name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator>
<call><name>ldns_rdf_get_type</name><argument_list>(<argument><expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>rr</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator>
<name>LDNS_RDF_TYPE_TIME</name><operator>)</operator> <operator>||</operator>
<operator>(</operator> <name>i</name> <operator>==</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator>
<call><name>ldns_rdf_get_type</name><argument_list>(<argument><expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>rr</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator>
<name>LDNS_RDF_TYPE_TIME</name><operator>)</operator> <operator>||</operator>
<operator>(</operator> <name>i</name> <operator>==</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator>
<call><name>ldns_rdf_get_type</name><argument_list>(<argument><expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>rr</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator>
<name>LDNS_RDF_TYPE_B64</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"(null)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_buffer_status</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>fmt_st</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>LDNS_FMT_PAD_SOA_SERIAL</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LDNS_RR_TYPE_SOA</name><operator>)</operator> <operator>&amp;&amp;</operator>
<name>i</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator>
<call><name>ldns_rdf_get_type</name><argument_list>(<argument><expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>rr</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator>
<name>LDNS_RDF_TYPE_INT32</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"%10lu"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <call><name>ldns_read_uint32</name><argument_list>(
<argument><expr><call><name>ldns_rdf_data</name><argument_list>(<argument><expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>rr</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_buffer_status</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_rdf2buffer_str_fmt</name><argument_list>(<argument><expr><name>output</name></expr></argument>,
<argument><expr><name>fmt</name></expr></argument>, <argument><expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>rr</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if<condition>(<expr><name>status</name> <operator>!=</operator> <name>LDNS_STATUS_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>status</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <call><name>ldns_rr_rd_count</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>



<if_stmt><if>if <condition>(<expr><call><name>ldns_rr_rd_count</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><call><name>ldns_rr_get_type</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LDNS_RR_TYPE_DNSKEY</name></expr>:</case>


<if_stmt><if>if <condition>(<expr><operator>!</operator> <operator>(</operator><name><name>fmt_st</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>LDNS_COMMENT_KEY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>ldns_rdf2native_int16</name><argument_list>(<argument><expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>rr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">" ;{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fmt_st</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>LDNS_COMMENT_KEY_ID</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"id = %u"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <call><name>ldns_calc_keytag</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fmt_st</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>LDNS_COMMENT_KEY_TYPE</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>LDNS_KEY_ZONE_KEY</name><operator>)</operator></expr>)</condition><block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>LDNS_KEY_SEP_KEY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">" (ksk)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">" (zsk)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fmt_st</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>LDNS_COMMENT_KEY_SIZE</name></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>fmt_st</name><operator>-&gt;</operator><name>flags</name></name>
<operator>&amp;</operator> <operator>(</operator><name>LDNS_COMMENT_KEY_ID</name>
<operator>|</operator><name>LDNS_COMMENT_KEY_SIZE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>( <argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fmt_st</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>LDNS_COMMENT_KEY_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"size = %db"</literal></expr></argument>,
<argument><expr><call><name>ldns_rr_dnskey_key_size</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RR_TYPE_RRSIG</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fmt_st</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>LDNS_COMMENT_KEY</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>fmt_st</name><operator>-&gt;</operator><name>flags</name></name><operator>&amp;</operator> <name>LDNS_COMMENT_RRSIGS</name><operator>)</operator>
<operator>&amp;&amp;</operator> <call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>rr</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">" ;{id = %d}"</literal></expr></argument>,
<argument><expr><call><name>ldns_rdf2native_int16</name><argument_list>(
<argument><expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>rr</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RR_TYPE_DS</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fmt_st</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>LDNS_COMMENT_BUBBLEBABBLE</name><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>rr</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>ldns_rdf_data</name><argument_list>(
<argument><expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>rr</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>ldns_rdf_size</name><argument_list>(<argument><expr><call><name>ldns_rr_rdf</name><argument_list>(<argument><expr><name>rr</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>babble</name> <init>= <expr><call><name>ldns_bubblebabble</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name>babble</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>,
<argument><expr><literal type="string">" ;{%s}"</literal></expr></argument>, <argument><expr><name>babble</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>babble</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RR_TYPE_NSEC3</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator> <operator>(</operator><name><name>fmt_st</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>LDNS_COMMENT_FLAGS</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator> <operator>(</operator><name><name>fmt_st</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>LDNS_COMMENT_NSEC3_CHAIN</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">" ;{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fmt_st</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>LDNS_COMMENT_FLAGS</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ldns_nsec3_optout</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>,
<argument><expr><literal type="string">" flags: optout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>,<argument><expr><literal type="string">" flags: -"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fmt_st</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>LDNS_COMMENT_NSEC3_CHAIN</name> <operator>&amp;&amp;</operator>
<name><name>fmt_st</name><operator>-&gt;</operator><name>hashmap</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fmt_st</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>LDNS_COMMENT_NSEC3_CHAIN</name> <operator>&amp;&amp;</operator>
<name><name>fmt_st</name><operator>-&gt;</operator><name>hashmap</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ldns_rbnode_t</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>ldns_dname_label</name><argument_list>(
<argument><expr><call><name>ldns_rr_owner</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>ldns_rbtree_search</name><argument_list>(
<argument><expr><name><name>fmt_st</name><operator>-&gt;</operator><name>hashmap</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>,
<argument><expr><literal type="string">"from: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ldns_rdf2buffer_str</name><argument_list>(
<argument><expr><name>output</name></expr></argument>,
<argument><expr><call><name>ldns_dnssec_name_name</name><argument_list>(
<argument><expr><operator>(</operator><name>ldns_dnssec_name</name><operator>*</operator><operator>)</operator>
<name><name>node</name><operator>-&gt;</operator><name>data</name></name></expr></argument>
)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_rdf_free</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>ldns_b32_ext2dname</name><argument_list>(
<argument><expr><call><name>ldns_nsec3_next_owner</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>ldns_rbtree_search</name><argument_list>(
<argument><expr><name><name>fmt_st</name><operator>-&gt;</operator><name>hashmap</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>,
<argument><expr><literal type="string">" to: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ldns_rdf2buffer_str</name><argument_list>(
<argument><expr><name>output</name></expr></argument>,
<argument><expr><call><name>ldns_dnssec_name_name</name><argument_list>(
<argument><expr><operator>(</operator><name>ldns_dnssec_name</name><operator>*</operator><operator>)</operator>
<name><name>node</name><operator>-&gt;</operator><name>data</name></name></expr></argument>
)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_rdf_free</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>

</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ldns_buffer_status</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_rr2buffer_str</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_rr</name> <modifier>*</modifier></type><name>rr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_rr2buffer_str_fmt</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>ldns_output_format_default</name></expr></argument>, <argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_rr_list2buffer_str_fmt</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>output</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_output_format</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_rr_list</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ldns_rr2buffer_str_fmt</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>,
<argument><expr><call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><call><name>ldns_buffer_status</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_rr_list2buffer_str</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_rr_list</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_rr_list2buffer_str_fmt</name><argument_list>(
<argument><expr><name>output</name></expr></argument>, <argument><expr><name>ldns_output_format_default</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_pktheader2buffer_str</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_pkt</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_lookup_table</name> <modifier>*</modifier></type><name>opcode</name> <init>= <expr><call><name>ldns_lookup_by_id</name><argument_list>(<argument><expr><name>ldns_opcodes</name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>ldns_pkt_get_opcode</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_lookup_table</name> <modifier>*</modifier></type><name>rcode</name> <init>= <expr><call><name>ldns_lookup_by_id</name><argument_list>(<argument><expr><name>ldns_rcodes</name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>ldns_pkt_get_rcode</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">";; -&gt;&gt;HEADER&lt;&lt;- "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>opcode</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"opcode: %s, "</literal></expr></argument>, <argument><expr><name><name>opcode</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"opcode: ?? (%u), "</literal></expr></argument>,
<argument><expr><call><name>ldns_pkt_get_opcode</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>rcode</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"rcode: %s, "</literal></expr></argument>, <argument><expr><name><name>rcode</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"rcode: ?? (%u), "</literal></expr></argument>, <argument><expr><call><name>ldns_pkt_get_rcode</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"id: %d\n"</literal></expr></argument>, <argument><expr><call><name>ldns_pkt_id</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">";; flags: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ldns_pkt_qr</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"qr "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_pkt_aa</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"aa "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_pkt_tc</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"tc "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_pkt_rd</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"rd "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_pkt_cd</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"cd "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_pkt_ra</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"ra "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_pkt_ad</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"ad "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"QUERY: %u, "</literal></expr></argument>, <argument><expr><call><name>ldns_pkt_qdcount</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"ANSWER: %u, "</literal></expr></argument>, <argument><expr><call><name>ldns_pkt_ancount</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"AUTHORITY: %u, "</literal></expr></argument>, <argument><expr><call><name>ldns_pkt_nscount</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"ADDITIONAL: %u "</literal></expr></argument>, <argument><expr><call><name>ldns_pkt_arcount</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ldns_buffer_status</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_pkt2buffer_str_fmt</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>output</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_output_format</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_pkt</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>status</name> <init>= <expr><name>LDNS_STATUS_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>time_tt</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pkt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ldns_buffer_status_ok</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_pktheader2buffer_str</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">";; QUESTION SECTION:\n;; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ldns_pkt_qdcount</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_rr2buffer_str_fmt</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>,
<argument><expr><call><name>ldns_rr_list_rr</name><argument_list>(
<argument><expr><call><name>ldns_pkt_question</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">";; ANSWER SECTION:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ldns_pkt_ancount</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_rr2buffer_str_fmt</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>,
<argument><expr><call><name>ldns_rr_list_rr</name><argument_list>(
<argument><expr><call><name>ldns_pkt_answer</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></if></if_stmt>

</block_content>}</block></for>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">";; AUTHORITY SECTION:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ldns_pkt_nscount</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_rr2buffer_str_fmt</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>,
<argument><expr><call><name>ldns_rr_list_rr</name><argument_list>(
<argument><expr><call><name>ldns_pkt_authority</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">";; ADDITIONAL SECTION:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ldns_pkt_arcount</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_rr2buffer_str_fmt</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>,
<argument><expr><call><name>ldns_rr_list_rr</name><argument_list>(
<argument><expr><call><name>ldns_pkt_additional</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></if></if_stmt>

</block_content>}</block></for>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">";; Query time: %d msec\n"</literal></expr></argument>,
<argument><expr><call><name>ldns_pkt_querytime</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_pkt_edns</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>,
<argument><expr><literal type="string">";; EDNS: version %u; flags:"</literal></expr></argument>,
<argument><expr><call><name>ldns_pkt_edns_version</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_pkt_edns_do</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">" do"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>ldns_pkt_edns_extended_rcode</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">" ; ext-rcode: %d"</literal></expr></argument>,
<argument><expr><operator>(</operator><call><name>ldns_pkt_edns_extended_rcode</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal> <operator>|</operator> <call><name>ldns_pkt_get_rcode</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">" ; udp: %u\n"</literal></expr></argument>,
<argument><expr><call><name>ldns_pkt_edns_udp_size</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ldns_pkt_edns_data</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">";; Data: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>ldns_rdf2buffer_str</name><argument_list>(<argument><expr><name>output</name></expr></argument>,
<argument><expr><call><name>ldns_pkt_edns_data</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_pkt_tsig</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">";; TSIG:\n;; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ldns_rr2buffer_str_fmt</name><argument_list>(
<argument><expr><name>output</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><call><name>ldns_pkt_tsig</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_pkt_answerfrom</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>ldns_rdf2str</name><argument_list>(<argument><expr><call><name>ldns_pkt_answerfrom</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">";; SERVER: %s\n"</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>time</name> <operator>=</operator> <call><name>ldns_pkt_timestamp</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>time_tt</name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator><name><name>time</name><operator>.</operator><name>tv_sec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">";; WHEN: %s"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>ctime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>time_tt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">";; MSG SIZE rcvd: %d\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>ldns_pkt_size</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><call><name>ldns_buffer_status</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_pkt2buffer_str</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_pkt</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_pkt2buffer_str_fmt</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>ldns_output_format_default</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>ldns_status</name></type>
<name>ldns_hmac_key2buffer_str</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_key</name> <modifier>*</modifier></type><name>k</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>b64_bignum</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"Key: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>ldns_key_hmac_size</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b64_bignum</name> <operator>=</operator> <call><name>ldns_rdf_new_frm_data</name><argument_list>(<argument><expr><name>LDNS_RDF_TYPE_B64</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>ldns_key_hmac_key</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_rdf2buffer_str</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>b64_bignum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>b64_bignum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SSL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_GOST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>ldns_status</name></type>
<name>ldns_gost_key2buffer_str</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>EVP_PKEY</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>pp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>b64_bignum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>status</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"GostAsn1: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>i2d_PrivateKey</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b64_bignum</name> <operator>=</operator> <call><name>ldns_rdf_new_frm_data</name><argument_list>(<argument><expr><name>LDNS_RDF_TYPE_B64</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>ret</name></expr></argument>, <argument><expr><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_rdf2buffer_str</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>b64_bignum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>b64_bignum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>OPENSSL_free</name><argument_list>(<argument><expr><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>ldns_print_bignum_b64_line</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name><modifier>*</modifier></type> <name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>label</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BIGNUM</name><modifier>*</modifier></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>bignumbuf</name> <init>= <macro><name>LDNS_XMALLOC</name><argument_list>(<argument>unsigned char</argument>, <argument>LDNS_MAX_KEYLEN</argument>)</argument_list></macro></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>bignumbuf</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"%s: "</literal></expr></argument>, <argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>num</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier></type><name>b64_bignum</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name>BN_bn2bin</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>bignumbuf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <name>LDNS_MAX_KEYLEN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>bignumbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>b64_bignum</name> <operator>=</operator> <call><name>ldns_rdf_new_frm_data</name><argument_list>(<argument><expr><name>LDNS_RDF_TYPE_B64</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>i</name></expr></argument>, <argument><expr><name>bignumbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_rdf2buffer_str</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>b64_bignum</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>b64_bignum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>bignumbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_rdf_deep_free</name><argument_list>(<argument><expr><name>b64_bignum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"(Not available)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>bignumbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>ldns_status</name></type>
<name>ldns_key2buffer_str</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_key</name> <modifier>*</modifier></type><name>k</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ldns_status</name></type> <name>status</name> <init>= <expr><name>LDNS_STATUS_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>bignum</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>RSA</name> <modifier>*</modifier></type><name>rsa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DSA</name> <modifier>*</modifier></type><name>dsa</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>k</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bignum</name> <operator>=</operator> <macro><name>LDNS_XMALLOC</name><argument_list>(<argument>unsigned char</argument>, <argument>LDNS_MAX_KEYLEN</argument>)</argument_list></macro></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bignum</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>LDNS_STATUS_ERR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ldns_buffer_status_ok</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<switch>switch<condition>(<expr><call><name>ldns_key_algorithm</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LDNS_SIGN_RSASHA1</name></expr>:</case>
<case>case <expr><name>LDNS_SIGN_RSASHA1_NSEC3</name></expr>:</case>
<case>case <expr><name>LDNS_SIGN_RSASHA256</name></expr>:</case>
<case>case <expr><name>LDNS_SIGN_RSASHA512</name></expr>:</case>
<case>case <expr><name>LDNS_SIGN_RSAMD5</name></expr>:</case>


<expr_stmt><expr><name>rsa</name> <operator>=</operator> <call><name>ldns_key_rsa_key</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>,<argument><expr><literal type="string">"Private-key-format: v1.2\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch<condition>(<expr><call><name>ldns_key_algorithm</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LDNS_SIGN_RSAMD5</name></expr>:</case>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>,
<argument><expr><literal type="string">"Algorithm: %u (RSA)\n"</literal></expr></argument>,
<argument><expr><name>LDNS_RSAMD5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_SIGN_RSASHA1</name></expr>:</case>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>,
<argument><expr><literal type="string">"Algorithm: %u (RSASHA1)\n"</literal></expr></argument>,
<argument><expr><name>LDNS_RSASHA1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_SIGN_RSASHA1_NSEC3</name></expr>:</case>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>,
<argument><expr><literal type="string">"Algorithm: %u (RSASHA1_NSEC3)\n"</literal></expr></argument>,
<argument><expr><name>LDNS_RSASHA1_NSEC3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_SHA2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>LDNS_SIGN_RSASHA256</name></expr>:</case>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>,
<argument><expr><literal type="string">"Algorithm: %u (RSASHA256)\n"</literal></expr></argument>,
<argument><expr><name>LDNS_RSASHA256</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_SIGN_RSASHA512</name></expr>:</case>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>,
<argument><expr><literal type="string">"Algorithm: %u (RSASHA512)\n"</literal></expr></argument>,
<argument><expr><name>LDNS_RSASHA512</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<default>default:</default>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STDERR_MSGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Warning: unknown signature "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"algorithm type %u\n"</literal></expr></argument>,
<argument><expr><call><name>ldns_key_algorithm</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>,
<argument><expr><literal type="string">"Algorithm: %u (Unknown)\n"</literal></expr></argument>,
<argument><expr><call><name>ldns_key_algorithm</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>S_SPLINT_S</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>BIGNUM</name> <modifier>*</modifier></type><name>n</name><init>=<expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>e</name><init>=<expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>d</name><init>=<expr><name>NULL</name></expr></init></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>p</name><init>=<expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name><init>=<expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dmp1</name><init>=<expr><name>NULL</name></expr></init></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>dmq1</name><init>=<expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iqmp</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPENSSL_VERSION_NUMBER</name> <operator>&lt;</operator> <literal type="number">0x10100000</literal> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBRESSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>rsa</name><operator>-&gt;</operator><name>n</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>rsa</name><operator>-&gt;</operator><name>e</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>rsa</name><operator>-&gt;</operator><name>d</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>rsa</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>q</name> <operator>=</operator> <name><name>rsa</name><operator>-&gt;</operator><name>q</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dmp1</name> <operator>=</operator> <name><name>rsa</name><operator>-&gt;</operator><name>dmp1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dmq1</name> <operator>=</operator> <name><name>rsa</name><operator>-&gt;</operator><name>dmq1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>iqmp</name> <operator>=</operator> <name><name>rsa</name><operator>-&gt;</operator><name>iqmp</name></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>RSA_get0_key</name><argument_list>(<argument><expr><name>rsa</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RSA_get0_factors</name><argument_list>(<argument><expr><name>rsa</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RSA_get0_crt_params</name><argument_list>(<argument><expr><name>rsa</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dmp1</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>dmq1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iqmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>ldns_print_bignum_b64_line</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"Modulus"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>ldns_print_bignum_b64_line</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"PublicExponent"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>ldns_print_bignum_b64_line</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"PrivateExponent"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>ldns_print_bignum_b64_line</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"Prime1"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>ldns_print_bignum_b64_line</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"Prime2"</literal></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>ldns_print_bignum_b64_line</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"Exponent1"</literal></expr></argument>, <argument><expr><name>dmp1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>ldns_print_bignum_b64_line</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"Exponent2"</literal></expr></argument>, <argument><expr><name>dmq1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>ldns_print_bignum_b64_line</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"Coefficient"</literal></expr></argument>, <argument><expr><name>iqmp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>RSA_free</name><argument_list>(<argument><expr><name>rsa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_SIGN_DSA</name></expr>:</case>
<case>case <expr><name>LDNS_SIGN_DSA_NSEC3</name></expr>:</case>
<expr_stmt><expr><name>dsa</name> <operator>=</operator> <call><name>ldns_key_dsa_key</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>,<argument><expr><literal type="string">"Private-key-format: v1.2\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_key_algorithm</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LDNS_SIGN_DSA</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>,<argument><expr><literal type="string">"Algorithm: 3 (DSA)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ldns_key_algorithm</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LDNS_SIGN_DSA_NSEC3</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>,<argument><expr><literal type="string">"Algorithm: 6 (DSA_NSEC3)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>BIGNUM</name> <modifier>*</modifier></type><name>p</name><init>=<expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name><init>=<expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>g</name><init>=<expr><name>NULL</name></expr></init></decl>,
<decl><type ref="prev"><modifier>*</modifier></type><name>priv_key</name><init>=<expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pub_key</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPENSSL_VERSION_NUMBER</name> <operator>&lt;</operator> <literal type="number">0x10100000</literal> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBRESSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>S_SPLINT_S</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>dsa</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>q</name> <operator>=</operator> <name><name>dsa</name><operator>-&gt;</operator><name>q</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <name><name>dsa</name><operator>-&gt;</operator><name>g</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>priv_key</name> <operator>=</operator> <name><name>dsa</name><operator>-&gt;</operator><name>priv_key</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>pub_key</name> <operator>=</operator> <name><name>dsa</name><operator>-&gt;</operator><name>pub_key</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>DSA_get0_pqg</name><argument_list>(<argument><expr><name>dsa</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DSA_get0_key</name><argument_list>(<argument><expr><name>dsa</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pub_key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>priv_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>ldns_print_bignum_b64_line</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"Prime(p)"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>ldns_print_bignum_b64_line</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"Subprime(q)"</literal></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>ldns_print_bignum_b64_line</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"Base(g)"</literal></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>ldns_print_bignum_b64_line</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"Private_value(x)"</literal></expr></argument>, <argument><expr><name>priv_key</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>ldns_print_bignum_b64_line</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"Public_value(y)"</literal></expr></argument>, <argument><expr><name>pub_key</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_SIGN_ECC_GOST</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SSL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>USE_GOST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"Private-key-format: v1.2\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"Algorithm: %d (ECC-GOST)\n"</literal></expr></argument>, <argument><expr><name>LDNS_SIGN_ECC_GOST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <macro><name>ldns_gost_key2buffer_str</name><argument_list>(<argument>output</argument>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>S_SPLINT_S</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument>k-&gt;_key.key
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
NULL</argument>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</argument_list></macro></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<goto>goto <name>error</name>;</goto>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
<case>case <expr><name>LDNS_SIGN_ECDSAP256SHA256</name></expr>:</case>
<case>case <expr><name>LDNS_SIGN_ECDSAP384SHA384</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ECDSA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"Private-key-format: v1.2\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"Algorithm: %d ("</literal></expr></argument>, <argument><expr><call><name>ldns_key_algorithm</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name><operator>=</operator><call><name>ldns_algorithm2buffer_str</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><operator>(</operator><name>ldns_algorithm</name><operator>)</operator><call><name>ldns_key_algorithm</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>S_SPLINT_S</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">")\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>k</name><operator>-&gt;</operator><name>_key</name><operator>.</operator><name>key</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>EC_KEY</name><modifier>*</modifier></type> <name>ec</name> <init>= <expr><call><name>EVP_PKEY_get1_EC_KEY</name><argument_list>(<argument><expr><name><name>k</name><operator>-&gt;</operator><name>_key</name><operator>.</operator><name>key</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>BIGNUM</name><modifier>*</modifier></type> <name>b</name> <init>= <expr><call><name>EC_KEY_get0_private_key</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>ldns_print_bignum_b64_line</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"PrivateKey"</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>EC_KEY_free</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<goto>goto <name>error</name>;</goto>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ED25519</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>LDNS_SIGN_ED25519</name></expr>:</case>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"Private-key-format: v1.2\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"Algorithm: %d ("</literal></expr></argument>, <argument><expr><call><name>ldns_key_algorithm</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name><operator>=</operator><call><name>ldns_algorithm2buffer_str</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><operator>(</operator><name>ldns_algorithm</name><operator>)</operator><call><name>ldns_key_algorithm</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">")\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>k</name><operator>-&gt;</operator><name>_key</name><operator>.</operator><name>key</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>EC_KEY</name><modifier>*</modifier></type> <name>ec</name> <init>= <expr><call><name>EVP_PKEY_get1_EC_KEY</name><argument_list>(<argument><expr><name><name>k</name><operator>-&gt;</operator><name>_key</name><operator>.</operator><name>key</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>BIGNUM</name><modifier>*</modifier></type> <name>b</name> <init>= <expr><call><name>EC_KEY_get0_private_key</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>ldns_print_bignum_b64_line</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"PrivateKey"</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>EC_KEY_free</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_ED448</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>LDNS_SIGN_ED448</name></expr>:</case>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"Private-key-format: v1.2\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"Algorithm: %d ("</literal></expr></argument>, <argument><expr><call><name>ldns_key_algorithm</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name><operator>=</operator><call><name>ldns_algorithm2buffer_str</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><operator>(</operator><name>ldns_algorithm</name><operator>)</operator><call><name>ldns_key_algorithm</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">")\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>k</name><operator>-&gt;</operator><name>_key</name><operator>.</operator><name>key</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>EC_KEY</name><modifier>*</modifier></type> <name>ec</name> <init>= <expr><call><name>EVP_PKEY_get1_EC_KEY</name><argument_list>(<argument><expr><name><name>k</name><operator>-&gt;</operator><name>_key</name><operator>.</operator><name>key</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>BIGNUM</name><modifier>*</modifier></type> <name>b</name> <init>= <expr><call><name>EC_KEY_get0_private_key</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>ldns_print_bignum_b64_line</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"PrivateKey"</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>EC_KEY_free</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>LDNS_SIGN_HMACMD5</name></expr>:</case>


<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"Private-key-format: v1.2\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"Algorithm: 157 (HMAC_MD5)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_hmac_key2buffer_str</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_SIGN_HMACSHA1</name></expr>:</case>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"Private-key-format: v1.2\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"Algorithm: 158 (HMAC_SHA1)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_hmac_key2buffer_str</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_SIGN_HMACSHA224</name></expr>:</case>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"Private-key-format: v1.2\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"Algorithm: 162 (HMAC_SHA224)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_hmac_key2buffer_str</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_SIGN_HMACSHA256</name></expr>:</case>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"Private-key-format: v1.2\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"Algorithm: 159 (HMAC_SHA256)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_hmac_key2buffer_str</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_SIGN_HMACSHA384</name></expr>:</case>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"Private-key-format: v1.2\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"Algorithm: 164 (HMAC_SHA384)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_hmac_key2buffer_str</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_SIGN_HMACSHA512</name></expr>:</case>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"Private-key-format: v1.2\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"Algorithm: 165 (HMAC_SHA512)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ldns_hmac_key2buffer_str</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>bignum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ldns_buffer_status</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>bignum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>status</name></expr>;</return>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SSL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>bignum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDNS_STATUS_ERR</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>




<function><type><name>char</name> <modifier>*</modifier></type>
<name>ldns_buffer2str</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><call><name>ldns_buffer_at</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><call><name>ldns_buffer_position</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ldns_buffer_reserve</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_buffer_write_u8</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator> <literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ldns_buffer_set_capacity</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><call><name>ldns_buffer_position</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>ldns_buffer_begin</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>str</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>char</name> <modifier>*</modifier></type>
<name>ldns_buffer_export2str</name><parameter_list>(<parameter><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>ldns_buffer_reserve</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_buffer_write_u8</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ldns_buffer_set_capacity</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><call><name>ldns_buffer_position</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ldns_buffer_export</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>ldns_rdf2str</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>rdf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>tmp_buffer</name> <init>= <expr><call><name>ldns_buffer_new</name><argument_list>(<argument><expr><name>LDNS_MAX_PACKETLEN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp_buffer</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_rdf2buffer_str</name><argument_list>(<argument><expr><name>tmp_buffer</name></expr></argument>, <argument><expr><name>rdf</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ldns_buffer_export2str</name><argument_list>(<argument><expr><name>tmp_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_buffer_free</name><argument_list>(<argument><expr><name>tmp_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>ldns_rr2str_fmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_output_format</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_rr</name> <modifier>*</modifier></type><name>rr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>tmp_buffer</name> <init>= <expr><call><name>ldns_buffer_new</name><argument_list>(<argument><expr><name>LDNS_MAX_PACKETLEN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp_buffer</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_rr2buffer_str_fmt</name><argument_list>(<argument><expr><name>tmp_buffer</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>rr</name></expr></argument>)</argument_list></call>
<operator>==</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ldns_buffer_export2str</name><argument_list>(<argument><expr><name>tmp_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_buffer_free</name><argument_list>(<argument><expr><name>tmp_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>ldns_rr2str</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_rr</name> <modifier>*</modifier></type><name>rr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_rr2str_fmt</name><argument_list>(<argument><expr><name>ldns_output_format_default</name></expr></argument>, <argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>ldns_pkt2str_fmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_output_format</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_pkt</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>tmp_buffer</name> <init>= <expr><call><name>ldns_buffer_new</name><argument_list>(<argument><expr><name>LDNS_MAX_PACKETLEN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp_buffer</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_pkt2buffer_str_fmt</name><argument_list>(<argument><expr><name>tmp_buffer</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call>
<operator>==</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ldns_buffer_export2str</name><argument_list>(<argument><expr><name>tmp_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ldns_buffer_free</name><argument_list>(<argument><expr><name>tmp_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>ldns_pkt2str</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_pkt</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_pkt2str_fmt</name><argument_list>(<argument><expr><name>ldns_output_format_default</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>ldns_key2str</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_key</name> <modifier>*</modifier></type><name>k</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>tmp_buffer</name> <init>= <expr><call><name>ldns_buffer_new</name><argument_list>(<argument><expr><name>LDNS_MAX_PACKETLEN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp_buffer</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ldns_key2buffer_str</name><argument_list>(<argument><expr><name>tmp_buffer</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ldns_buffer_export2str</name><argument_list>(<argument><expr><name>tmp_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_buffer_free</name><argument_list>(<argument><expr><name>tmp_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>ldns_rr_list2str_fmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_output_format</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_rr_list</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_buffer</name> <modifier>*</modifier></type><name>tmp_buffer</name> <init>= <expr><call><name>ldns_buffer_new</name><argument_list>(<argument><expr><name>LDNS_MAX_PACKETLEN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp_buffer</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>list</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ldns_rr_list2buffer_str_fmt</name><argument_list>(
<argument><expr><name>tmp_buffer</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call>
<operator>==</operator> <name>LDNS_STATUS_OK</name></expr>)</condition> <block>{<block_content>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>fmt</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fmt</name> <operator>=</operator> <name>ldns_output_format_default</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>LDNS_COMMENT_NULLS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_buffer_printf</name><argument_list>(<argument><expr><name>tmp_buffer</name></expr></argument>, <argument><expr><literal type="string">"; (null)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ldns_buffer_export2str</name><argument_list>(<argument><expr><name>tmp_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_buffer_free</name><argument_list>(<argument><expr><name>tmp_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>ldns_rr_list2str</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ldns_rr_list</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>ldns_rr_list2str_fmt</name><argument_list>(<argument><expr><name>ldns_output_format_default</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ldns_rdf_print</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_rdf</name> <modifier>*</modifier></type><name>rdf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>ldns_rdf2str</name><argument_list>(<argument><expr><name>rdf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">";Unable to convert rdf to string\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ldns_rr_print_fmt</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>output</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_output_format</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_rr</name> <modifier>*</modifier></type><name>rr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>ldns_rr2str_fmt</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">";Unable to convert rr to string\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ldns_rr_print</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_rr</name> <modifier>*</modifier></type><name>rr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ldns_rr_print_fmt</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>ldns_output_format_default</name></expr></argument>, <argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ldns_pkt_print_fmt</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>output</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_output_format</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_pkt</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>ldns_pkt2str_fmt</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">";Unable to convert packet to string\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>LDNS_FREE</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ldns_pkt_print</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_pkt</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ldns_pkt_print_fmt</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>ldns_output_format_default</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ldns_rr_list_print_fmt</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>output</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_output_format</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_rr_list</name> <modifier>*</modifier></type><name>lst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><name>lst</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ldns_rr_print_fmt</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><call><name>ldns_rr_list_rr</name><argument_list>(<argument><expr><name>lst</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ldns_rr_list_print</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_rr_list</name> <modifier>*</modifier></type><name>lst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ldns_rr_list_print_fmt</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>ldns_output_format_default</name></expr></argument>, <argument><expr><name>lst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ldns_resolver_print_fmt</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>output</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_output_format</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_resolver</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier><modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ldns_rdf</name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name> <modifier>*</modifier></type><name>rtt</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>r</name></expr>)</condition> <block>{<block_content>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>ldns_resolver_nameservers</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>ldns_resolver_searchlist</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rtt</name> <operator>=</operator> <call><name>ldns_resolver_rtt</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"port: %d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>ldns_resolver_port</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"edns0 size: %d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>ldns_resolver_edns_udp_size</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"use ip6: %d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>ldns_resolver_ip6</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"recursive: %d\n"</literal></expr></argument>, <argument><expr><call><name>ldns_resolver_recursive</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"usevc: %d\n"</literal></expr></argument>, <argument><expr><call><name>ldns_resolver_usevc</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"igntc: %d\n"</literal></expr></argument>, <argument><expr><call><name>ldns_resolver_igntc</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"fail: %d\n"</literal></expr></argument>, <argument><expr><call><name>ldns_resolver_fail</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"retry: %d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>ldns_resolver_retry</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"retrans: %d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>ldns_resolver_retrans</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"fallback: %d\n"</literal></expr></argument>, <argument><expr><call><name>ldns_resolver_fallback</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"random: %d\n"</literal></expr></argument>, <argument><expr><call><name>ldns_resolver_random</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"timeout: %d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>ldns_resolver_timeout</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call><operator>.</operator><name>tv_sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"dnssec: %d\n"</literal></expr></argument>, <argument><expr><call><name>ldns_resolver_dnssec</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"dnssec cd: %d\n"</literal></expr></argument>, <argument><expr><call><name>ldns_resolver_dnssec_cd</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"trust anchors (%d listed):\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>ldns_rr_list_rr_count</name><argument_list>(<argument><expr><call><name>ldns_resolver_dnssec_anchors</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rr_list_print_fmt</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><call><name>ldns_resolver_dnssec_anchors</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"tsig: %s %s\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><call><name>ldns_resolver_tsig_keyname</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>?</condition><then><expr><call><name>ldns_resolver_tsig_keyname</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></then><else>:<expr><literal type="string">"-"</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><call><name>ldns_resolver_tsig_algorithm</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>?</condition><then><expr><call><name>ldns_resolver_tsig_algorithm</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></then><else>:<expr><literal type="string">"-"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"debug: %d\n"</literal></expr></argument>, <argument><expr><call><name>ldns_resolver_debug</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"default domain: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rdf_print</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><call><name>ldns_resolver_domain</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"apply default domain: %d\n"</literal></expr></argument>, <argument><expr><call><name>ldns_resolver_defnames</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"searchlist (%d listed):\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>ldns_resolver_searchlist_count</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ldns_resolver_searchlist_count</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rdf_print</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"apply search list: %d\n"</literal></expr></argument>, <argument><expr><call><name>ldns_resolver_dnsrch</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"nameservers (%d listed):\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>ldns_resolver_nameserver_count</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ldns_resolver_nameserver_count</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldns_rdf_print</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name><name>n</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>rtt</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LDNS_RESOLV_RTT_MIN</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">" - reachable\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LDNS_RESOLV_RTT_INF</name></expr>:</case>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">" - unreachable\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ldns_resolver_print</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_resolver</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ldns_resolver_print_fmt</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>ldns_output_format_default</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ldns_zone_print_fmt</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>output</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ldns_output_format</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_zone</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>ldns_zone_soa</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ldns_rr_print_fmt</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><call><name>ldns_zone_soa</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ldns_rr_list_print_fmt</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><call><name>ldns_zone_rrs</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type>
<name>ldns_zone_print</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ldns_zone</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>ldns_zone_print_fmt</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>ldns_output_format_default</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
