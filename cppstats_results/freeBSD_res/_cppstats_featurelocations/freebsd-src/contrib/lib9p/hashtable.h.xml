<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/lib9p/hashtable.h">


























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LIB9P_HASHTABLE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIB9P_HASHTABLE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/queue.h&gt;</cpp:file></cpp:include>

<struct>struct <name>ht</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>ht_entry</name></name> <modifier>*</modifier></type> <name>ht_entries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>ht_nentries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_rwlock_t</name></type> <name>ht_rwlock</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>ht_entry</name> <block>{
<macro><name>TAILQ_HEAD</name><argument_list>(<argument/>, <argument>ht_item</argument>)</argument_list></macro> <expr_stmt><expr><name>hte_items</name></expr>;</expr_stmt>
}</block>;</struct>

<struct>struct <name>ht_item</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>hti_hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>hti_data</name></decl>;</decl_stmt>
<macro><name>TAILQ_ENTRY</name><argument_list>(<argument>ht_item</argument>)</argument_list></macro> <expr_stmt><expr><name>hti_link</name></expr>;</expr_stmt>
}</block>;</struct>

<struct>struct <name>ht_iter</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>ht</name></name> <modifier>*</modifier></type> <name>htit_parent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ht_item</name></name> <modifier>*</modifier></type> <name>htit_curr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ht_item</name></name> <modifier>*</modifier></type> <name>htit_next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>htit_slot</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>clang</name> <name>diagnostic</name> <name>push</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>clang</name> <name>diagnostic</name> <name>ignored</name> <cpp:literal>"-Wthread-safety-analysis"</cpp:literal></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>ht_rdlock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ht</name></name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><operator>(</operator><call><name>pthread_rwlock_rdlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>ht_rwlock</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>ht_wrlock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ht</name></name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><operator>(</operator><call><name>pthread_rwlock_wrlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>ht_rwlock</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>ht_unlock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ht</name></name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><operator>(</operator><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>ht_rwlock</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>clang</name> <name>diagnostic</name> <name>pop</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>void</name></type> <name>ht_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ht</name></name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ht_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ht</name></name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>ht_find</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ht</name></name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>hash</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>ht_find_locked</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ht</name></name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>hash</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ht_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ht</name></name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>hash</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ht_remove</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ht</name></name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>hash</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ht_remove_locked</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ht</name></name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>hash</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ht_remove_at_iter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ht_iter</name></name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ht_iter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ht</name></name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ht_iter</name></name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>ht_next</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ht_iter</name></name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
