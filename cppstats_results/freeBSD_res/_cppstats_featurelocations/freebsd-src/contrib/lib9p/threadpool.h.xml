<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/lib9p/threadpool.h">


























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LIB9P_THREADPOOL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIB9P_THREADPOOL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/queue.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib9p.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>STAILQ_HEAD</name><argument_list>(<argument><expr><name>l9p_request_queue</name></expr></argument>, <argument><expr><name>l9p_request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>









<struct>struct <name>l9p_threadpool</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_connection</name></name> <modifier>*</modifier></type> <name>ltp_conn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_request_queue</name></name></type> <name>ltp_workq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_request_queue</name></name></type> <name>ltp_replyq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>ltp_mtx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_cond_t</name></type> <name>ltp_work_cv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_cond_t</name></type> <name>ltp_reply_cv</name></decl>;</decl_stmt>
<macro><name>LIST_HEAD</name><argument_list>(<argument/>, <argument>l9p_worker</argument>)</argument_list></macro> <expr_stmt><expr><name>ltp_workers</name></expr>;</expr_stmt>
}</block>;</struct>







<struct>struct <name>l9p_worker</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_threadpool</name></name> <modifier>*</modifier></type> <name>ltw_tp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_t</name></type> <name>ltw_thread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ltw_exiting</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ltw_responder</name></decl>;</decl_stmt>
<macro><name>LIST_ENTRY</name><argument_list>(<argument>l9p_worker</argument>)</argument_list></macro> <expr_stmt><expr><name>ltw_link</name></expr>;</expr_stmt>
}</block>;</struct>







<enum>enum <name>l9p_workstate</name> <block>{
<decl><name>L9P_WS_NOTSTARTED</name></decl>,
<decl><name>L9P_WS_IMMEDIATE</name></decl>,
<decl><name>L9P_WS_INPROGRESS</name></decl>,
<decl><name>L9P_WS_RESPQUEUED</name></decl>,
<decl><name>L9P_WS_REPLYING</name></decl>,
}</block>;</enum>






















<enum>enum <name>l9p_flushstate</name> <block>{
<decl><name>L9P_FLUSH_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>L9P_FLUSH_REQUESTED_PRE_START</name></decl>,
<decl><name>L9P_FLUSH_REQUESTED_POST_START</name></decl>,
<decl><name>L9P_FLUSH_TOOLATE</name></decl>
}</block>;</enum>

<function_decl><type><name>void</name></type> <name>l9p_threadpool_flushee_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>l9p_threadpool_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_threadpool</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>l9p_threadpool_run</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_threadpool</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>l9p_threadpool_shutdown</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_threadpool</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>l9p_threadpool_tflush</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
