<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/lib9p/rfuncs.h">


























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LIB9P_RFUNCS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIB9P_RFUNCS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pwd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WITH_CASPER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libcasper.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function_decl><type><name>char</name> <modifier>*</modifier></type><name>r_basename</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>r_dirname</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>















<struct>struct <name>r_pgdata</name> <block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>r_pgbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>r_pgbufsize</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>passwd</name></name></type> <name>un_pw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>group</name></name></type> <name>un_gr</name></decl>;</decl_stmt>
}</block> <decl><name>r_pgun</name></decl>;</union>
}</block>;</struct>


<function_decl><type><name>void</name></type> <name>r_pgfree</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>r_pgdata</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>passwd</name></name> <modifier>*</modifier></type><name>r_getpwuid</name><parameter_list>(<parameter><decl><type><name>uid_t</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>r_pgdata</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>group</name></name> <modifier>*</modifier></type><name>r_getgrgid</name><parameter_list>(<parameter><decl><type><name>gid_t</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>r_pgdata</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WITH_CASPER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name><name>struct</name> <name>passwd</name></name> <modifier>*</modifier></type><name>r_cap_getpwuid</name><parameter_list>(<parameter><decl><type><name>cap_channel_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uid_t</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>r_pgdata</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>group</name></name> <modifier>*</modifier></type><name>r_cap_getgrgid</name><parameter_list>(<parameter><decl><type><name>cap_channel_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>gid_t</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>r_pgdata</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
