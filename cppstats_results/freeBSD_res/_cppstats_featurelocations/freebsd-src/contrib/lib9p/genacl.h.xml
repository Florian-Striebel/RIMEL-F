<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/lib9p/genacl.h">









































































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_POSIX_ACLS</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_DARWIN_ACLS</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_POSIX_ACLS</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_FREEBSD_ACLS</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/acl.h&gt;</cpp:file></cpp:include>




















<struct_decl>struct <name>l9p_acl</name>;</struct_decl>
<struct_decl>struct <name>l9p_fid</name>;</struct_decl>

<function_decl><type><name>void</name></type> <name>l9p_acl_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_acl</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L9P_ACE_READ_DATA</name></cpp:macro> <cpp:value>0x00001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L9P_ACE_LIST_DIRECTORY</name></cpp:macro> <cpp:value>0x00001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L9P_ACE_WRITE_DATA</name></cpp:macro> <cpp:value>0x00002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L9P_ACE_ADD_FILE</name></cpp:macro> <cpp:value>0x00002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L9P_ACE_APPEND_DATA</name></cpp:macro> <cpp:value>0x00004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L9P_ACE_ADD_SUBDIRECTORY</name></cpp:macro> <cpp:value>0x00004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L9P_ACE_READ_NAMED_ATTRS</name></cpp:macro> <cpp:value>0x00008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L9P_ACE_WRITE_NAMED_ATTRS</name></cpp:macro> <cpp:value>0x00010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L9P_ACE_EXECUTE</name></cpp:macro> <cpp:value>0x00020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L9P_ACE_DELETE_CHILD</name></cpp:macro> <cpp:value>0x00040</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L9P_ACE_READ_ATTRIBUTES</name></cpp:macro> <cpp:value>0x00080</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L9P_ACE_WRITE_ATTRIBUTES</name></cpp:macro> <cpp:value>0x00100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L9P_ACE_WRITE_RETENTION</name></cpp:macro> <cpp:value>0x00200</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L9P_ACE_WRITE_RETENTION_HOLD</name></cpp:macro> <cpp:value>0x00400</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L9P_ACE_DELETE</name></cpp:macro> <cpp:value>0x01000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L9P_ACE_READ_ACL</name></cpp:macro> <cpp:value>0x02000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L9P_ACE_WRITE_ACL</name></cpp:macro> <cpp:value>0x04000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L9P_ACE_WRITE_OWNER</name></cpp:macro> <cpp:value>0x08000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L9P_ACE_SYNCHRONIZE</name></cpp:macro> <cpp:value>0x10000</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L9P_ACOP_UNLINK</name></cpp:macro> <cpp:value>(L9P_ACE_DELETE_CHILD | L9P_ACE_DELETE)</cpp:value></cpp:define>















<struct>struct <name>l9p_acl_check_args</name> <block>{
<decl_stmt><decl><type><name>uid_t</name></type> <name>aca_uid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gid_t</name></type> <name>aca_gid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gid_t</name> <modifier>*</modifier></type><name>aca_groups</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>aca_ngroups</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_acl</name></name> <modifier>*</modifier></type><name>aca_parent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>aca_pstat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_acl</name></name> <modifier>*</modifier></type><name>aca_child</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>aca_cstat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>aca_aclmode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>aca_superuser</name></decl>;</decl_stmt>
}</block>;</struct>













<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L9P_ACM_NFS_ACL</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L9P_ACM_ZFS_ACL</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L9P_ACM_POSIX_ACL</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L9P_ACM_STAT_MODE</name></cpp:macro> <cpp:value>0x0008</cpp:value></cpp:define>



















<function_decl><type><name>int</name></type> <name>l9p_acl_check_access</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_acl_check_args</name></name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>int</name></type> <name>l9p_ace_mask_to_rwx</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type></decl></parameter>)</parameter_list>;</function_decl>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L9P_ACET_ACCESS_ALLOWED</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L9P_ACET_ACCESS_DENIED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L9P_ACET_SYSTEM_AUDIT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L9P_ACET_SYSTEM_ALARM</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L9P_ACEF_FILE_INHERIT_ACE</name></cpp:macro> <cpp:value>0x001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L9P_ACEF_DIRECTORY_INHERIT_ACE</name></cpp:macro> <cpp:value>0x002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L9P_ACEF_NO_PROPAGATE_INHERIT_ACE</name></cpp:macro> <cpp:value>0x004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L9P_ACEF_INHERIT_ONLY_ACE</name></cpp:macro> <cpp:value>0x008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L9P_ACEF_SUCCESSFUL_ACCESS_ACE_FLAG</name></cpp:macro> <cpp:value>0x010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L9P_ACEF_FAILED_ACCESS_ACE_FLAG</name></cpp:macro> <cpp:value>0x020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L9P_ACEF_IDENTIFIER_GROUP</name></cpp:macro> <cpp:value>0x040</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L9P_ACEF_OWNER</name></cpp:macro> <cpp:value>0x080</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L9P_ACEF_GROUP</name></cpp:macro> <cpp:value>0x100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L9P_ACEF_EVERYONE</name></cpp:macro> <cpp:value>0x200</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L9P_ACE_IDSIZE</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L9P_ACE_IDSIZE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>l9p_ace</name> <block>{
<decl_stmt><decl><type><name>uint16_t</name></type> <name>ace_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>ace_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>ace_mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>ace_idsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>ace_idbytes</name><index>[<expr><name>L9P_ACE_IDSIZE</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L9P_ACLTYPE_NFSv4</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<struct>struct <name>l9p_acl</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>acl_acetype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>acl_nace</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>acl_aceasize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_ace</name></name></type> <name><name>acl_aces</name><index>[]</index></name></decl>;</decl_stmt>
}</block>;</struct>








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DARWIN_ACLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name><name>struct</name> <name>l9p_acl</name></name> <modifier>*</modifier></type><name>l9p_darwin_nfsv4acl_to_acl</name><parameter_list>(<parameter><decl><type><name>acl_t</name></type> <name>acl</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FREEBSD_ACLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name><name>struct</name> <name>l9p_acl</name></name> <modifier>*</modifier></type><name>l9p_freebsd_nfsv4acl_to_acl</name><parameter_list>(<parameter><decl><type><name>acl_t</name></type> <name>acl</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_POSIX_ACLS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <literal type="number">0</literal></expr></cpp:if>
<function_decl><type><name><name>struct</name> <name>l9p_acl</name></name> <modifier>*</modifier></type><name>l9p_posix_acl_to_acl</name><parameter_list>(<parameter><decl><type><name>acl_t</name></type> <name>acl</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
