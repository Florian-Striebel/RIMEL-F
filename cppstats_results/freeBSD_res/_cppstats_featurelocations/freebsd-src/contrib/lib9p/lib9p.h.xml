<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/lib9p/lib9p.h">



























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LIB9P_LIB9P_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIB9P_LIB9P_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/queue.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/uio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sbuf.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sbuf/sbuf.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fcall.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"threadpool.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hashtable.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L9P_DEFAULT_MSIZE</name></cpp:macro> <cpp:value>8192</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L9P_MAX_IOV</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L9P_NUMTHREADS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<struct_decl>struct <name>l9p_request</name>;</struct_decl>
<struct_decl>struct <name>l9p_backend</name>;</struct_decl>
<struct_decl>struct <name>l9p_fid</name>;</struct_decl>





















<struct>struct <name>l9p_transport</name> <block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>lt_aux</name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>lt_get_response_buffer</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>iovec</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>lt_send_response</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iovec</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>lt_drop_response</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iovec</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>

<enum>enum <name>l9p_pack_mode</name> <block>{
<decl><name>L9P_PACK</name></decl>,
<decl><name>L9P_UNPACK</name></decl>
}</block>;</enum>

<enum>enum <name>l9p_integer_type</name> <block>{
<decl><name>L9P_BYTE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>L9P_WORD</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>L9P_DWORD</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>L9P_QWORD</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>
}</block>;</enum>

<enum>enum <name>l9p_version</name> <block>{
<decl><name>L9P_INVALID_VERSION</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>L9P_2000</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>L9P_2000U</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>L9P_2000L</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>
}</block>;</enum>









<struct>struct <name>l9p_message</name> <block>{
<decl_stmt><decl><type><name><name>enum</name> <name>l9p_pack_mode</name></name></type> <name>lm_mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>iovec</name></name></type> <name><name>lm_iov</name><index>[<expr><name>L9P_MAX_IOV</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>lm_niov</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>lm_cursor_iov</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>lm_cursor_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>lm_size</name></decl>;</decl_stmt>
}</block>;</struct>






















<struct>struct <name>l9p_request</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_message</name></name></type> <name>lr_req_msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_message</name></name></type> <name>lr_resp_msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>union</name> <name>l9p_fcall</name></name></type> <name>lr_req</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>union</name> <name>l9p_fcall</name></name></type> <name>lr_resp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>l9p_fid</name></name> <modifier>*</modifier></type><name>lr_fid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_fid</name></name> <modifier>*</modifier></type><name>lr_fid2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_fid</name></name> <modifier>*</modifier></type><name>lr_newfid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>l9p_connection</name></name> <modifier>*</modifier></type><name>lr_conn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>lr_aux</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>iovec</name></name></type> <name><name>lr_data_iov</name><index>[<expr><name>L9P_MAX_IOV</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>lr_data_niov</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lr_error</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>enum</name> <name>l9p_workstate</name></name></type> <name>lr_workstate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>l9p_flushstate</name></name></type> <name>lr_flushstate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_worker</name></name> <modifier>*</modifier></type><name>lr_worker</name></decl>;</decl_stmt>
<macro><name>STAILQ_ENTRY</name><argument_list>(<argument>l9p_request</argument>)</argument_list></macro> <expr_stmt><expr><name>lr_worklink</name></expr>;</expr_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>l9p_request_queue</name></name></type> <name>lr_flushq</name></decl>;</decl_stmt>
<macro><name>STAILQ_ENTRY</name><argument_list>(<argument>l9p_request</argument>)</argument_list></macro> <expr_stmt><expr><name>lr_flushlink</name></expr>;</expr_stmt>
}</block>;</struct>


<struct>struct <name>l9p_dirent</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_qid</name></name></type> <name>qid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
}</block>;</struct>














<struct>struct <name>l9p_connection</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_server</name></name> <modifier>*</modifier></type><name>lc_server</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_transport</name></name></type> <name>lc_lt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_threadpool</name></name></type> <name>lc_tp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>l9p_version</name></name></type> <name>lc_version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>lc_msize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>lc_max_io_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ht</name></name></type> <name>lc_files</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ht</name></name></type> <name>lc_requests</name></decl>;</decl_stmt>
<macro><name>LIST_ENTRY</name><argument_list>(<argument>l9p_connection</argument>)</argument_list></macro> <expr_stmt><expr><name>lc_link</name></expr>;</expr_stmt>
}</block>;</struct>

<struct>struct <name>l9p_server</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_backend</name></name> <modifier>*</modifier></type><name>ls_backend</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>l9p_version</name></name></type> <name>ls_max_version</name></decl>;</decl_stmt>
<macro><name>LIST_HEAD</name><argument_list>(<argument/>, <argument>l9p_connection</argument>)</argument_list></macro> <expr_stmt><expr><name>ls_conns</name></expr>;</expr_stmt>
}</block>;</struct>

<function_decl><type><name>int</name></type> <name>l9p_pufcall</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_message</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>l9p_fcall</name></name> <modifier>*</modifier></type><name>fcall</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>l9p_version</name></name></type> <name>version</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ssize_t</name></type> <name>l9p_pustat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_message</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_stat</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>l9p_version</name></name></type> <name>version</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uint16_t</name></type> <name>l9p_sizeof_stat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_stat</name></name> <modifier>*</modifier></type><name>stat</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>l9p_version</name></name></type> <name>version</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>l9p_pack_stat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_message</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>l9p_stat</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ssize_t</name></type> <name>l9p_pudirent</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_message</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_dirent</name></name> <modifier>*</modifier></type><name>de</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>l9p_server_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_server</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>serverp</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_backend</name></name> <modifier>*</modifier></type><name>backend</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>l9p_connection_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_server</name></name> <modifier>*</modifier></type><name>server</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>l9p_connection</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>connp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>l9p_connection_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_connection</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>l9p_connection_recv</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_connection</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>iovec</name></name> <modifier>*</modifier></type><name>iov</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>niov</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>aux</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>l9p_connection_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_connection</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>struct</name> <name>l9p_fid</name></name> <modifier>*</modifier></type><name>l9p_connection_alloc_fid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_connection</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>fid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>l9p_connection_remove_fid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_connection</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>l9p_fid</name></name> <modifier>*</modifier></type><name>fid</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>l9p_dispatch_request</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>l9p_respond</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>drop</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>rmtag</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>l9p_init_msg</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_message</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>l9p_pack_mode</name></name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>l9p_seek_iov</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iovec</name></name> <modifier>*</modifier></type><name>iov1</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>niov1</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>iovec</name></name> <modifier>*</modifier></type><name>iov2</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>niov2</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>seek</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> <name>l9p_truncate_iov</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iovec</name></name> <modifier>*</modifier></type><name>iov</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>niov</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>l9p_describe_fcall</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>l9p_fcall</name></name> <modifier>*</modifier></type><name>fcall</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>l9p_version</name></name></type> <name>version</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>sbuf</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>l9p_freefcall</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>l9p_fcall</name></name> <modifier>*</modifier></type><name>fcall</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>l9p_freestat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_stat</name></name> <modifier>*</modifier></type><name>stat</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>gid_t</name> <modifier>*</modifier></type><name>l9p_getgrlist</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>gid_t</name></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
