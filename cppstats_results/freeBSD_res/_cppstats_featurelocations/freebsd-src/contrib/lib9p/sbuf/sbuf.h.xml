<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/lib9p/sbuf/sbuf.h">






























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LIB9P_SBUF_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIB9P_SBUF_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>

<struct>struct <name>sbuf</name>
<block>{
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>s_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>s_capacity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>s_position</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><name><name>struct</name> <name>sbuf</name></name> <modifier>*</modifier></type><name>sbuf_new_auto</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sbuf_cat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sbuf</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sbuf_printf</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sbuf</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sbuf_vprintf</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sbuf</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sbuf_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sbuf</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sbuf_delete</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sbuf</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sbuf_finish</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sbuf</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>sbuf_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sbuf</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
