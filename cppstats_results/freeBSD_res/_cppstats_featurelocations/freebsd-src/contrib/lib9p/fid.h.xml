<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/lib9p/fid.h">


























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LIB9P_FID_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIB9P_FID_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>










































<struct>struct <name>l9p_fid</name> <block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>lo_aux</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>lo_fid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>lo_flags</name></decl>;</decl_stmt>
}</block>;</struct>

<enum>enum <name>l9p_lo_flags</name> <block>{
<decl><name>L9P_LO_ISAUTH</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>,
<decl><name>L9P_LO_ISDIR</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>,
<decl><name>L9P_LO_ISOPEN</name> <init>= <expr><literal type="number">0x04</literal></expr></init></decl>,
<decl><name>L9P_LO_ISVALID</name> <init>= <expr><literal type="number">0x08</literal></expr></init></decl>,
<decl><name>L9P_LO_ISXATTR</name> <init>= <expr><literal type="number">0x10</literal></expr></init></decl>,
}</block>;</enum>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>
<name>l9p_fid_isauth</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_fid</name></name> <modifier>*</modifier></type><name>fid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name><name>fid</name><operator>-&gt;</operator><name>lo_flags</name></name> <operator>&amp;</operator> <name>L9P_LO_ISAUTH</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>l9p_fid_setauth</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_fid</name></name> <modifier>*</modifier></type><name>fid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>fid</name><operator>-&gt;</operator><name>lo_flags</name></name> <operator>|=</operator> <name>L9P_LO_ISAUTH</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>
<name>l9p_fid_isdir</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_fid</name></name> <modifier>*</modifier></type><name>fid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name><name>fid</name><operator>-&gt;</operator><name>lo_flags</name></name> <operator>&amp;</operator> <name>L9P_LO_ISDIR</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>l9p_fid_setdir</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_fid</name></name> <modifier>*</modifier></type><name>fid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>fid</name><operator>-&gt;</operator><name>lo_flags</name></name> <operator>|=</operator> <name>L9P_LO_ISDIR</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>l9p_fid_unsetdir</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_fid</name></name> <modifier>*</modifier></type><name>fid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>fid</name><operator>-&gt;</operator><name>lo_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>L9P_LO_ISDIR</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>
<name>l9p_fid_isopen</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_fid</name></name> <modifier>*</modifier></type><name>fid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name><name>fid</name><operator>-&gt;</operator><name>lo_flags</name></name> <operator>&amp;</operator> <name>L9P_LO_ISOPEN</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>l9p_fid_setopen</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_fid</name></name> <modifier>*</modifier></type><name>fid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>fid</name><operator>-&gt;</operator><name>lo_flags</name></name> <operator>|=</operator> <name>L9P_LO_ISOPEN</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>
<name>l9p_fid_isvalid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_fid</name></name> <modifier>*</modifier></type><name>fid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name><name>fid</name><operator>-&gt;</operator><name>lo_flags</name></name> <operator>&amp;</operator> <name>L9P_LO_ISVALID</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>l9p_fid_setvalid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_fid</name></name> <modifier>*</modifier></type><name>fid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>fid</name><operator>-&gt;</operator><name>lo_flags</name></name> <operator>|=</operator> <name>L9P_LO_ISVALID</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>l9p_fid_unsetvalid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_fid</name></name> <modifier>*</modifier></type><name>fid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>fid</name><operator>-&gt;</operator><name>lo_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>L9P_LO_ISVALID</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>
<name>l9p_fid_isxattr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_fid</name></name> <modifier>*</modifier></type><name>fid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name><name>fid</name><operator>-&gt;</operator><name>lo_flags</name></name> <operator>&amp;</operator> <name>L9P_LO_ISXATTR</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>l9p_fid_setxattr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_fid</name></name> <modifier>*</modifier></type><name>fid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>fid</name><operator>-&gt;</operator><name>lo_flags</name></name> <operator>|=</operator> <name>L9P_LO_ISXATTR</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
