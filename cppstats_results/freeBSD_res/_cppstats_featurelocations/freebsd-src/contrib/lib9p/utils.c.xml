<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/lib9p/utils.c">


























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/uio.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sbuf.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sbuf/sbuf.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib9p.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fcall.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"linux_errno.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GETGROUPS_GROUP_TYPE_IS_INT</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name><parameter_list>(<parameter><type><name>ary</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(sizeof(ary) / sizeof(*ary))</cpp:value></cpp:define>


<struct>struct <name>descbits</name> <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>db_mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>db_match</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>db_name</name></decl>;</decl_stmt>
}</block>;</struct>


<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>l9p_describe_bits</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>descbits</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sbuf</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>l9p_describe_fid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sbuf</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>l9p_describe_mode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sbuf</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>l9p_describe_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sbuf</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>l9p_describe_perm</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sbuf</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>l9p_describe_lperm</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sbuf</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>l9p_describe_qid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_qid</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sbuf</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>l9p_describe_l9stat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_stat</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>l9p_version</name></name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sbuf</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>l9p_describe_statfs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_statfs</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>sbuf</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>l9p_describe_time</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sbuf</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>l9p_describe_readdir</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sbuf</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_f_io</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>l9p_describe_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sbuf</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>l9p_describe_ugid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sbuf</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>l9p_describe_getattr_mask</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sbuf</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>l9p_describe_unlinkat_flags</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sbuf</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lookup_linux_errno</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type></decl></parameter>)</parameter_list>;</function_decl>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X</name><parameter_list>(<parameter><type><name>NAME</name></type></parameter>, <parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>[L9P_T##NAME - L9P__FIRST] = "T" name, [L9P_R##NAME - L9P__FIRST] = "R" name</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>ftype_names</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>X</name><argument_list>(<argument><expr><name>VERSION</name></expr></argument>, <argument><expr><literal type="string">"version"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>AUTH</name></expr></argument>, <argument><expr><literal type="string">"auth"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>ATTACH</name></expr></argument>, <argument><expr><literal type="string">"attach"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"error"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LERROR</name></expr></argument>, <argument><expr><literal type="string">"lerror"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>FLUSH</name></expr></argument>, <argument><expr><literal type="string">"flush"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>WALK</name></expr></argument>, <argument><expr><literal type="string">"walk"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>OPEN</name></expr></argument>, <argument><expr><literal type="string">"open"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>CREATE</name></expr></argument>, <argument><expr><literal type="string">"create"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>READ</name></expr></argument>, <argument><expr><literal type="string">"read"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>WRITE</name></expr></argument>, <argument><expr><literal type="string">"write"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>CLUNK</name></expr></argument>, <argument><expr><literal type="string">"clunk"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>REMOVE</name></expr></argument>, <argument><expr><literal type="string">"remove"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>STAT</name></expr></argument>, <argument><expr><literal type="string">"stat"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>WSTAT</name></expr></argument>, <argument><expr><literal type="string">"wstat"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>STATFS</name></expr></argument>, <argument><expr><literal type="string">"statfs"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LOPEN</name></expr></argument>, <argument><expr><literal type="string">"lopen"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LCREATE</name></expr></argument>, <argument><expr><literal type="string">"lcreate"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>SYMLINK</name></expr></argument>, <argument><expr><literal type="string">"symlink"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>MKNOD</name></expr></argument>, <argument><expr><literal type="string">"mknod"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>RENAME</name></expr></argument>, <argument><expr><literal type="string">"rename"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>READLINK</name></expr></argument>, <argument><expr><literal type="string">"readlink"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>GETATTR</name></expr></argument>, <argument><expr><literal type="string">"getattr"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>SETATTR</name></expr></argument>, <argument><expr><literal type="string">"setattr"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>XATTRWALK</name></expr></argument>, <argument><expr><literal type="string">"xattrwalk"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>XATTRCREATE</name></expr></argument>, <argument><expr><literal type="string">"xattrcreate"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>READDIR</name></expr></argument>, <argument><expr><literal type="string">"readdir"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>FSYNC</name></expr></argument>, <argument><expr><literal type="string">"fsync"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LOCK</name></expr></argument>, <argument><expr><literal type="string">"lock"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>GETLOCK</name></expr></argument>, <argument><expr><literal type="string">"getlock"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINK</name></expr></argument>, <argument><expr><literal type="string">"link"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>MKDIR</name></expr></argument>, <argument><expr><literal type="string">"mkdir"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>RENAMEAT</name></expr></argument>, <argument><expr><literal type="string">"renameat"</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>UNLINKAT</name></expr></argument>, <argument><expr><literal type="string">"unlinkat"</literal></expr></argument>)</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>X</name></cpp:undef>

<function><type><name>void</name></type>
<name>l9p_seek_iov</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iovec</name></name> <modifier>*</modifier></type><name>iov1</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>niov1</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>iovec</name></name> <modifier>*</modifier></type><name>iov2</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>niov2</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>seek</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>remainder</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>left</name> <init>= <expr><name>seek</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>niov1</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>toseek</name> <init>= <expr><call><name>MIN</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name><name>iov1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>left</name> <operator>-=</operator> <name>toseek</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>toseek</name> <operator>==</operator> <name><name>iov1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_len</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>left</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>remainder</name> <operator>=</operator> <name>toseek</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>niov1</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>iov2</name><index>[<expr><name>j</name> <operator>-</operator> <name>i</name></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>iov1</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>+</operator> <name>remainder</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iov2</name><index>[<expr><name>j</name> <operator>-</operator> <name>i</name></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>=</operator> <name><name>iov1</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>-</operator> <name>remainder</name></expr>;</expr_stmt>
<expr_stmt><expr><name>remainder</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>niov2</name> <operator>=</operator> <name>j</name> <operator>-</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>size_t</name></type>
<name>l9p_truncate_iov</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>iovec</name></name> <modifier>*</modifier></type><name>iov</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>niov</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>done</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>niov</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>toseek</name> <init>= <expr><call><name>MIN</name><argument_list>(<argument><expr><name>length</name> <operator>-</operator> <name>done</name></expr></argument>, <argument><expr><name><name>iov</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>done</name> <operator>+=</operator> <name>toseek</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>toseek</name> <operator>&lt;</operator> <name><name>iov</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>iov</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>=</operator> <name>toseek</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><operator>(</operator><name>niov</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>










<function><type><name>gid_t</name> <modifier>*</modifier></type>
<name>l9p_getgrlist</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>gid_t</name></type> <name>basegid</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>angroups</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GETGROUPS_GROUP_TYPE_IS_INT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>int_groups</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>gid_t</name> <modifier>*</modifier></type><name>groups</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ngroups</name></decl>;</decl_stmt>





<expr_stmt><expr><name>ngroups</name> <operator>=</operator> <name>NGROUPS_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name>groups</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>ngroups</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>groups</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GETGROUPS_GROUP_TYPE_IS_INT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>int_groups</name> <operator>=</operator> <ternary><condition><expr><name>groups</name></expr> ?</condition><then> <expr><call><name>malloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>ngroups</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>int_groups</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> </then><else>:
<expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>int_groups</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>groups</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>groups</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>groups</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>angroups</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GETGROUPS_GROUP_TYPE_IS_INT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>getgrouplist</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>basegid</name></expr></argument>, <argument><expr><name>int_groups</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ngroups</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ngroups</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>groups</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>gid_t</name><operator>)</operator><name><name>int_groups</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>getgrouplist</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>basegid</name></expr></argument>, <argument><expr><name>groups</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ngroups</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>*</operator><name>angroups</name> <operator>=</operator> <name>ngroups</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>groups</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


































<function><type><specifier>static</specifier> <name>bool</name></type>
<name>l9p_describe_bits</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>oc</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>descbits</name></name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sbuf</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>bracketbuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>printed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>str</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sbuf_printf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%s0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>oc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bracketbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>oc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>sep</name> <operator>=</operator> <name>bracketbuf</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><name><name>db</name><operator>-&gt;</operator><name>db_name</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>db</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>value</name> <operator>&amp;</operator> <name><name>db</name><operator>-&gt;</operator><name>db_mask</name></name><operator>)</operator> <operator>==</operator> <name><name>db</name><operator>-&gt;</operator><name>db_match</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sbuf_printf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>db_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sep</name> <operator>=</operator> <literal type="string">","</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>printed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>






<expr_stmt><expr><name>value</name> <operator>&amp;=</operator> <operator>~</operator><name><name>db</name><operator>-&gt;</operator><name>db_mask</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>db</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>db_mask</name> <operator>==</operator> <name><name>db</name><operator>-&gt;</operator><name>db_mask</name></name> <operator>&amp;&amp;</operator>
<name><name>db</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>db_name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>db</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>value</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sbuf_printf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%s?0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>printed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>printed</name> <operator>&amp;&amp;</operator> <name>oc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>bracketbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>oc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sbuf_cat</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>bracketbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>printed</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>l9p_describe_fid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>fid</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sbuf</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>sbuf_printf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%s%"</literal> <name>PRIu32</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>fid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>l9p_describe_ugid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>ugid</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sbuf</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>sbuf_printf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%s%"</literal> <name>PRIu32</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>ugid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>l9p_describe_mode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sbuf</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>descbits</name></name></type> <name><name>bits</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>L9P_OACCMODE</name></expr>, <expr><name>L9P_OREAD</name></expr>, <expr><literal type="string">"OREAD"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>L9P_OACCMODE</name></expr>, <expr><name>L9P_OWRITE</name></expr>, <expr><literal type="string">"OWRITE"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>L9P_OACCMODE</name></expr>, <expr><name>L9P_ORDWR</name></expr>, <expr><literal type="string">"ORDWR"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>L9P_OACCMODE</name></expr>, <expr><name>L9P_OEXEC</name></expr>, <expr><literal type="string">"OEXEC"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>L9P_OCEXEC</name></expr>, <expr><name>L9P_OCEXEC</name></expr>, <expr><literal type="string">"OCEXEC"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>L9P_ODIRECT</name></expr>, <expr><name>L9P_ODIRECT</name></expr>, <expr><literal type="string">"ODIRECT"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>L9P_ORCLOSE</name></expr>, <expr><name>L9P_ORCLOSE</name></expr>, <expr><literal type="string">"ORCLOSE"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>L9P_OTRUNC</name></expr>, <expr><name>L9P_OTRUNC</name></expr>, <expr><literal type="string">"OTRUNC"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>l9p_describe_bits</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="string">"[]"</literal></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>l9p_describe_lflags</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sbuf</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>descbits</name></name></type> <name><name>bits</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>L9P_OACCMODE</name></expr>, <expr><name>L9P_OREAD</name></expr>, <expr><literal type="string">"O_READ"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>L9P_OACCMODE</name></expr>, <expr><name>L9P_OWRITE</name></expr>, <expr><literal type="string">"O_WRITE"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>L9P_OACCMODE</name></expr>, <expr><name>L9P_ORDWR</name></expr>, <expr><literal type="string">"O_RDWR"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>L9P_OACCMODE</name></expr>, <expr><name>L9P_OEXEC</name></expr>, <expr><literal type="string">"O_EXEC"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>L9P_L_O_APPEND</name></expr>, <expr><name>L9P_L_O_APPEND</name></expr>, <expr><literal type="string">"O_APPEND"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>L9P_L_O_CLOEXEC</name></expr>, <expr><name>L9P_L_O_CLOEXEC</name></expr>, <expr><literal type="string">"O_CLOEXEC"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>L9P_L_O_CREAT</name></expr>, <expr><name>L9P_L_O_CREAT</name></expr>, <expr><literal type="string">"O_CREAT"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>L9P_L_O_DIRECT</name></expr>, <expr><name>L9P_L_O_DIRECT</name></expr>, <expr><literal type="string">"O_DIRECT"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>L9P_L_O_DIRECTORY</name></expr>, <expr><name>L9P_L_O_DIRECTORY</name></expr>, <expr><literal type="string">"O_DIRECTORY"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>L9P_L_O_DSYNC</name></expr>, <expr><name>L9P_L_O_DSYNC</name></expr>, <expr><literal type="string">"O_DSYNC"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>L9P_L_O_EXCL</name></expr>, <expr><name>L9P_L_O_EXCL</name></expr>, <expr><literal type="string">"O_EXCL"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>L9P_L_O_FASYNC</name></expr>, <expr><name>L9P_L_O_FASYNC</name></expr>, <expr><literal type="string">"O_FASYNC"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>L9P_L_O_LARGEFILE</name></expr>, <expr><name>L9P_L_O_LARGEFILE</name></expr>, <expr><literal type="string">"O_LARGEFILE"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>L9P_L_O_NOATIME</name></expr>, <expr><name>L9P_L_O_NOATIME</name></expr>, <expr><literal type="string">"O_NOATIME"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>L9P_L_O_NOCTTY</name></expr>, <expr><name>L9P_L_O_NOCTTY</name></expr>, <expr><literal type="string">"O_NOCTTY"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>L9P_L_O_NOFOLLOW</name></expr>, <expr><name>L9P_L_O_NOFOLLOW</name></expr>, <expr><literal type="string">"O_NOFOLLOW"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>L9P_L_O_NONBLOCK</name></expr>, <expr><name>L9P_L_O_NONBLOCK</name></expr>, <expr><literal type="string">"O_NONBLOCK"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>L9P_L_O_PATH</name></expr>, <expr><name>L9P_L_O_PATH</name></expr>, <expr><literal type="string">"O_PATH"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>L9P_L_O_SYNC</name></expr>, <expr><name>L9P_L_O_SYNC</name></expr>, <expr><literal type="string">"O_SYNC"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>L9P_L_O_TMPFILE</name></expr>, <expr><name>L9P_L_O_TMPFILE</name></expr>, <expr><literal type="string">"O_TMPFILE"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>L9P_L_O_TMPFILE</name></expr>, <expr><name>L9P_L_O_TMPFILE</name></expr>, <expr><literal type="string">"O_TMPFILE"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>L9P_L_O_TRUNC</name></expr>, <expr><name>L9P_L_O_TRUNC</name></expr>, <expr><literal type="string">"O_TRUNC"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>l9p_describe_bits</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="string">"[]"</literal></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>l9p_describe_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sbuf</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sbuf_printf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%s&lt;null&gt;"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sbuf_printf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%s\"%.*s...\""</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="number">32</literal> <operator>-</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sbuf_printf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%s\"%.*s\""</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>l9p_describe_perm</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sbuf</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>pbuf</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strmode</name><argument_list>(<argument><expr><name>mode</name> <operator>&amp;</operator> <literal type="number">0777</literal></expr></argument>, <argument><expr><name>pbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mode</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0777</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sbuf_printf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%s0x%"</literal> <name>PRIx32</name> <literal type="string">"&lt;%.9s&gt;"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>pbuf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sbuf_printf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%s&lt;%.9s&gt;"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>pbuf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>l9p_describe_ext_perm</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sbuf</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>descbits</name></name></type> <name><name>bits</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>L9P_DMDIR</name></expr>, <expr><name>L9P_DMDIR</name></expr>, <expr><literal type="string">"DMDIR"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>L9P_DMAPPEND</name></expr>, <expr><name>L9P_DMAPPEND</name></expr>, <expr><literal type="string">"DMAPPEND"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>L9P_DMEXCL</name></expr>, <expr><name>L9P_DMEXCL</name></expr>, <expr><literal type="string">"DMEXCL"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>L9P_DMMOUNT</name></expr>, <expr><name>L9P_DMMOUNT</name></expr>, <expr><literal type="string">"DMMOUNT"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>L9P_DMAUTH</name></expr>, <expr><name>L9P_DMAUTH</name></expr>, <expr><literal type="string">"DMAUTH"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>L9P_DMTMP</name></expr>, <expr><name>L9P_DMTMP</name></expr>, <expr><literal type="string">"DMTMP"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>L9P_DMSYMLINK</name></expr>, <expr><name>L9P_DMSYMLINK</name></expr>, <expr><literal type="string">"DMSYMLINK"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>L9P_DMDEVICE</name></expr>, <expr><name>L9P_DMDEVICE</name></expr>, <expr><literal type="string">"DMDEVICE"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>L9P_DMNAMEDPIPE</name></expr>, <expr><name>L9P_DMNAMEDPIPE</name></expr>, <expr><literal type="string">"DMNAMEDPIPE"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>L9P_DMSOCKET</name></expr>, <expr><name>L9P_DMSOCKET</name></expr>, <expr><literal type="string">"DMSOCKET"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>L9P_DMSETUID</name></expr>, <expr><name>L9P_DMSETUID</name></expr>, <expr><literal type="string">"DMSETUID"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>L9P_DMSETGID</name></expr>, <expr><name>L9P_DMSETGID</name></expr>, <expr><literal type="string">"DMSETGID"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>need_sep</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sbuf_printf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%s["</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>need_sep</name> <operator>=</operator> <call><name>l9p_describe_bits</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>mode</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0777</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>bits</name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_describe_perm</name><argument_list>(<argument><expr><ternary><condition><expr><name>need_sep</name></expr> ?</condition><then> <expr><literal type="string">","</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>mode</name> <operator>&amp;</operator> <literal type="number">0777</literal></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sbuf_cat</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>l9p_describe_lperm</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sbuf</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>descbits</name></name></type> <name><name>bits</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>S_IFMT</name></expr>, <expr><name>S_IFIFO</name></expr>, <expr><literal type="string">"S_IFIFO"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>S_IFMT</name></expr>, <expr><name>S_IFCHR</name></expr>, <expr><literal type="string">"S_IFCHR"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>S_IFMT</name></expr>, <expr><name>S_IFDIR</name></expr>, <expr><literal type="string">"S_IFDIR"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>S_IFMT</name></expr>, <expr><name>S_IFBLK</name></expr>, <expr><literal type="string">"S_IFBLK"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>S_IFMT</name></expr>, <expr><name>S_IFREG</name></expr>, <expr><literal type="string">"S_IFREG"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>S_IFMT</name></expr>, <expr><name>S_IFLNK</name></expr>, <expr><literal type="string">"S_IFLNK"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>S_IFMT</name></expr>, <expr><name>S_IFSOCK</name></expr>, <expr><literal type="string">"S_IFSOCK"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>need_sep</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sbuf_printf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%s["</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>need_sep</name> <operator>=</operator> <call><name>l9p_describe_bits</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>mode</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">0777</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>bits</name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_describe_perm</name><argument_list>(<argument><expr><ternary><condition><expr><name>need_sep</name></expr> ?</condition><then> <expr><literal type="string">","</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>mode</name> <operator>&amp;</operator> <literal type="number">0777</literal></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sbuf_cat</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>l9p_describe_qid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_qid</name></name> <modifier>*</modifier></type><name>qid</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sbuf</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>descbits</name></name></type> <name><name>bits</name><index>[]</index></name> <init>= <expr><block>{








<expr><block>{ <expr><literal type="number">0xff</literal></expr>, <expr><name>L9P_QTFILE</name></expr>, <expr><literal type="string">"FILE"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>L9P_QTDIR</name></expr>, <expr><name>L9P_QTDIR</name></expr>, <expr><literal type="string">"DIR"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>L9P_QTAPPEND</name></expr>, <expr><name>L9P_QTAPPEND</name></expr>, <expr><literal type="string">"APPEND"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>L9P_QTEXCL</name></expr>, <expr><name>L9P_QTEXCL</name></expr>, <expr><literal type="string">"EXCL"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>L9P_QTMOUNT</name></expr>, <expr><name>L9P_QTMOUNT</name></expr>, <expr><literal type="string">"MOUNT"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>L9P_QTAUTH</name></expr>, <expr><name>L9P_QTAUTH</name></expr>, <expr><literal type="string">"AUTH"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>L9P_QTTMP</name></expr>, <expr><name>L9P_QTTMP</name></expr>, <expr><literal type="string">"TMP"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>L9P_QTSYMLINK</name></expr>, <expr><name>L9P_QTSYMLINK</name></expr>, <expr><literal type="string">"SYMLINK"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>qid</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sbuf_cat</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>l9p_describe_bits</name><argument_list>(<argument><expr><literal type="string">"&lt;"</literal></expr></argument>, <argument><expr><name><name>qid</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><literal type="string">"[]"</literal></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sbuf_printf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">",%"</literal> <name>PRIu32</name> <literal type="string">",0x%016"</literal> <name>PRIx64</name> <literal type="string">"&gt;"</literal></expr></argument>,
<argument><expr><name><name>qid</name><operator>-&gt;</operator><name>version</name></name></expr></argument>, <argument><expr><name><name>qid</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>l9p_describe_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sbuf</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>sbuf_printf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%s%"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>l9p_describe_l9stat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_stat</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>l9p_version</name></name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sbuf</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bool</name></type> <name>dotu</name> <init>= <expr><name>version</name> <operator>&gt;=</operator> <name>L9P_2000U</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>st</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sbuf_printf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%stype=0x%04"</literal> <name>PRIx32</name> <literal type="string">" dev=0x%08"</literal> <name>PRIx32</name></expr></argument>, <argument><expr><name>str</name></expr></argument>,
<argument><expr><name><name>st</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>dev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_describe_qid</name><argument_list>(<argument><expr><literal type="string">" qid="</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>st</name><operator>-&gt;</operator><name>qid</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_describe_ext_perm</name><argument_list>(<argument><expr><literal type="string">" mode="</literal></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>atime</name></name> <operator>!=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sbuf_printf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">" atime=%"</literal> <name>PRIu32</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>atime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>mtime</name></name> <operator>!=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sbuf_printf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">" mtime=%"</literal> <name>PRIu32</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>mtime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>length</name></name> <operator>!=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sbuf_printf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">" length=%"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>l9p_describe_name</name><argument_list>(<argument><expr><literal type="string">" name="</literal></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>uid</name></name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><name>dotu</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>l9p_describe_name</name><argument_list>(<argument><expr><literal type="string">" uid="</literal></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>gid</name></name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><name>dotu</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>l9p_describe_name</name><argument_list>(<argument><expr><literal type="string">" gid="</literal></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>muid</name></name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><name>dotu</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>l9p_describe_name</name><argument_list>(<argument><expr><literal type="string">" muid="</literal></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>muid</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dotu</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>extension</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>l9p_describe_name</name><argument_list>(<argument><expr><literal type="string">" extension="</literal></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>extension</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>sbuf_printf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>,
<argument><expr><literal type="string">" n_uid=%"</literal> <name>PRIu32</name> <literal type="string">" n_gid=%"</literal> <name>PRIu32</name> <literal type="string">" n_muid=%"</literal> <name>PRIu32</name></expr></argument>,
<argument><expr><name><name>st</name><operator>-&gt;</operator><name>n_uid</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>n_gid</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>n_muid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>l9p_describe_statfs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_statfs</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sbuf</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>st</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sbuf_printf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%stype=0x%04lx bsize=%lu blocks=%"</literal> <name>PRIu64</name>
<literal type="string">" bfree=%"</literal> <name>PRIu64</name> <literal type="string">" bavail=%"</literal> <name>PRIu64</name> <literal type="string">" files=%"</literal> <name>PRIu64</name>
<literal type="string">" ffree=%"</literal> <name>PRIu64</name> <literal type="string">" fsid=0x%"</literal> <name>PRIx64</name> <literal type="string">" namelen=%"</literal> <name>PRIu32</name> <literal type="string">"&gt;"</literal></expr></argument>,
<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>(</operator><name>u_long</name><operator>)</operator><name><name>st</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><operator>(</operator><name>u_long</name><operator>)</operator><name><name>st</name><operator>-&gt;</operator><name>bsize</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>blocks</name></name></expr></argument>,
<argument><expr><name><name>st</name><operator>-&gt;</operator><name>bfree</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>bavail</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>files</name></name></expr></argument>,
<argument><expr><name><name>st</name><operator>-&gt;</operator><name>ffree</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>fsid</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>namelen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>l9p_describe_time</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sbuf</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>sec</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>nsec</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>sbuf_cat</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nsec</name> <operator>&gt;</operator> <literal type="number">999999999</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sbuf_printf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRIu64</name> <literal type="string">".&lt;invalid nsec %"</literal> <name>PRIu64</name> <literal type="string">"&gt;)"</literal></expr></argument>,
<argument><expr><name>sec</name></expr></argument>, <argument><expr><name>nsec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sbuf_printf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRIu64</name> <literal type="string">".%09"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><name>sec</name></expr></argument>, <argument><expr><name>nsec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>l9p_describe_readdir</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sbuf</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_f_io</name></name> <modifier>*</modifier></type><name>io</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>count</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>notyet</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_message</name></name></type> <name>msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_dirent</name></name></type> <name>de</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>count</name> <operator>=</operator> <name><name>io</name><operator>-&gt;</operator><name>count</name></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sbuf_printf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">" EOF (count=0)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>notyet</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>sbuf_printf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">" count=%"</literal> <name>PRIu32</name> <literal type="string">" ["</literal></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>l9p_init_msg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name>L9P_UNPACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>msg</name><operator>.</operator><name>lm_size</name></name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>l9p_pudirent</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>de</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sbuf_printf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">" bad count"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sbuf_printf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><ternary><condition><expr><name>i</name></expr> ?</condition><then> <expr><literal type="string">", "</literal></expr> </then><else>: <expr><literal type="string">" "</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_describe_qid</name><argument_list>(<argument><expr><literal type="string">" qid="</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>de</name><operator>.</operator><name>qid</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sbuf_printf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">" offset=%"</literal> <name>PRIu64</name> <literal type="string">" type=%d"</literal></expr></argument>,
<argument><expr><name><name>de</name><operator>.</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>de</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_describe_name</name><argument_list>(<argument><expr><literal type="string">" name="</literal></expr></argument>, <argument><expr><name><name>de</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>de</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>sbuf_printf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"]=%d dir entries"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>sbuf_printf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">" count=%"</literal> <name>PRIu32</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>l9p_describe_getattr_mask</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>request_mask</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sbuf</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>descbits</name></name></type> <name><name>bits</name><index>[]</index></name> <init>= <expr><block>{














<expr><block>{ <expr><name>L9PL_GETATTR_ALL</name></expr>, <expr><name>L9PL_GETATTR_ALL</name></expr>, <expr><literal type="string">"ALL"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>L9PL_GETATTR_BASIC</name></expr>, <expr><name>L9PL_GETATTR_BASIC</name></expr>, <expr><literal type="string">"BASIC"</literal></expr> }</block></expr>,


<expr><block>{ <expr><name>L9PL_GETATTR_MODE</name></expr>, <expr><name>L9PL_GETATTR_MODE</name></expr>, <expr><literal type="string">"MODE"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>L9PL_GETATTR_NLINK</name></expr>, <expr><name>L9PL_GETATTR_NLINK</name></expr>, <expr><literal type="string">"NLINK"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>L9PL_GETATTR_UID</name></expr>, <expr><name>L9PL_GETATTR_UID</name></expr>, <expr><literal type="string">"UID"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>L9PL_GETATTR_GID</name></expr>, <expr><name>L9PL_GETATTR_GID</name></expr>, <expr><literal type="string">"GID"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>L9PL_GETATTR_RDEV</name></expr>, <expr><name>L9PL_GETATTR_RDEV</name></expr>, <expr><literal type="string">"RDEV"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>L9PL_GETATTR_ATIME</name></expr>, <expr><name>L9PL_GETATTR_ATIME</name></expr>, <expr><literal type="string">"ATIME"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>L9PL_GETATTR_MTIME</name></expr>, <expr><name>L9PL_GETATTR_MTIME</name></expr>, <expr><literal type="string">"MTIME"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>L9PL_GETATTR_CTIME</name></expr>, <expr><name>L9PL_GETATTR_CTIME</name></expr>, <expr><literal type="string">"CTIME"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>L9PL_GETATTR_INO</name></expr>, <expr><name>L9PL_GETATTR_INO</name></expr>, <expr><literal type="string">"INO"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>L9PL_GETATTR_SIZE</name></expr>, <expr><name>L9PL_GETATTR_SIZE</name></expr>, <expr><literal type="string">"SIZE"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>L9PL_GETATTR_BLOCKS</name></expr>, <expr><name>L9PL_GETATTR_BLOCKS</name></expr>, <expr><literal type="string">"BLOCKS"</literal></expr> }</block></expr>,


<expr><block>{ <expr><name>L9PL_GETATTR_BTIME</name></expr>, <expr><name>L9PL_GETATTR_BTIME</name></expr>, <expr><literal type="string">"BTIME"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>L9PL_GETATTR_GEN</name></expr>, <expr><name>L9PL_GETATTR_GEN</name></expr>, <expr><literal type="string">"GEN"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>L9PL_GETATTR_DATA_VERSION</name></expr>, <expr><name>L9PL_GETATTR_DATA_VERSION</name></expr>,
<expr><literal type="string">"DATA_VERSION"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>l9p_describe_bits</name><argument_list>(<argument><expr><literal type="string">" request_mask="</literal></expr></argument>, <argument><expr><name>request_mask</name></expr></argument>, <argument><expr><literal type="string">"[]"</literal></expr></argument>, <argument><expr><name>bits</name></expr></argument>,
<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>l9p_describe_unlinkat_flags</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sbuf</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>descbits</name></name></type> <name><name>bits</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>L9PL_AT_REMOVEDIR</name></expr>, <expr><name>L9PL_AT_REMOVEDIR</name></expr>, <expr><literal type="string">"AT_REMOVEDIR"</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>l9p_describe_bits</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="string">"[]"</literal></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>lookup_linux_errno</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>linux_errno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>unknown</name><index>[<expr><literal type="number">50</literal></expr>]</index></name></decl>;</decl_stmt>







<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>table</name><index>[]</index></name> <init>= <expr><block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X0</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>[name] = name ##_STR</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>[name] = name ##_STR</cpp:value></cpp:define>
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_EAGAIN</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_EDEADLK</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_ENAMETOOLONG</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_ENOLCK</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_ENOSYS</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_ENOTEMPTY</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_ELOOP</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_ENOMSG</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_EIDRM</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_ECHRNG</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_EL2NSYNC</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_EL3HLT</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_EL3RST</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_ELNRNG</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_EUNATCH</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_ENOCSI</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_EL2HLT</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_EBADE</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_EBADR</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_EXFULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_ENOANO</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_EBADRQC</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_EBADSLT</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_EBFONT</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_ENOSTR</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_ENODATA</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_ETIME</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_ENOSR</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_ENONET</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_ENOPKG</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_EREMOTE</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_ENOLINK</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_EADV</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_ESRMNT</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_ECOMM</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_EPROTO</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_EMULTIHOP</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_EDOTDOT</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_EBADMSG</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_EOVERFLOW</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_ENOTUNIQ</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_EBADFD</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_EREMCHG</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_ELIBACC</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_ELIBBAD</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_ELIBSCN</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_ELIBMAX</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_ELIBEXEC</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_EILSEQ</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_ERESTART</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_ESTRPIPE</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_EUSERS</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_ENOTSOCK</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_EDESTADDRREQ</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_EMSGSIZE</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_EPROTOTYPE</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_ENOPROTOOPT</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_EPROTONOSUPPORT</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_ESOCKTNOSUPPORT</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_EOPNOTSUPP</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_EPFNOSUPPORT</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_EAFNOSUPPORT</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_EADDRINUSE</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_EADDRNOTAVAIL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_ENETDOWN</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_ENETUNREACH</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_ENETRESET</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_ECONNABORTED</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_ECONNRESET</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_ENOBUFS</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_EISCONN</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_ENOTCONN</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_ESHUTDOWN</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_ETOOMANYREFS</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_ETIMEDOUT</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_ECONNREFUSED</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_EHOSTDOWN</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_EHOSTUNREACH</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_EALREADY</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_EINPROGRESS</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_ESTALE</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_EUCLEAN</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_ENOTNAM</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_ENAVAIL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_EISNAM</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_EREMOTEIO</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_EDQUOT</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_ENOMEDIUM</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_EMEDIUMTYPE</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_ECANCELED</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_ENOKEY</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_EKEYEXPIRED</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_EKEYREVOKED</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_EKEYREJECTED</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_EOWNERDEAD</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_ENOTRECOVERABLE</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_ERFKILL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>X</name><argument_list>(<argument><expr><name>LINUX_EHWPOISON</name></expr></argument>)</argument_list></call></expr>,
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>X0</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>X</name></cpp:undef>
}</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name>linux_errno</name> <operator>&lt;</operator> <call><name>N</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>table</name><index>[<expr><name>linux_errno</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name><name>table</name><index>[<expr><name>linux_errno</name></expr>]</index></name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>linux_errno</name> <operator>&lt;=</operator> <name>ERANGE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name>strerror</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>linux_errno</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>unknown</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>unknown</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"Unknown error %d"</literal></expr></argument>, <argument><expr><name>linux_errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>unknown</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>l9p_describe_fcall</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>l9p_fcall</name></name> <modifier>*</modifier></type><name>fcall</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>l9p_version</name></name></type> <name>version</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>sbuf</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>fcall</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>sb</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>version</name> <operator>&lt;=</operator> <name>L9P_2000L</name> <operator>&amp;&amp;</operator> <name>version</name> <operator>&gt;=</operator> <name>L9P_INVALID_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>fcall</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>type</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&lt;</operator> <name>L9P__FIRST</name> <operator>||</operator> <name>type</name> <operator>&gt;=</operator> <name>L9P__LAST_PLUS_1</name> <operator>||</operator>
<name><name>ftype_names</name><index>[<expr><name>type</name> <operator>-</operator> <name>L9P__FIRST</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rr</name></decl>;</decl_stmt>







<expr_stmt><expr><name>rr</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">"response"</literal></expr> </then><else>: <expr><literal type="string">"request"</literal></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sbuf_printf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"&lt;unknown %s %d&gt; tag=%d"</literal></expr></argument>, <argument><expr><name>rr</name></expr></argument>, <argument><expr><name>type</name></expr></argument>,
<argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>sbuf_printf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%s tag=%d"</literal></expr></argument>, <argument><expr><name><name>ftype_names</name><index>[<expr><name>type</name> <operator>-</operator> <name>L9P__FIRST</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>L9P_TVERSION</name></expr>:</case>
<case>case <expr><name>L9P_RVERSION</name></expr>:</case>
<expr_stmt><expr><call><name>sbuf_printf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">" version=\"%s\" msize=%d"</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>version</name><operator>.</operator><name>version</name></name></expr></argument>,
<argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>version</name><operator>.</operator><name>msize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>L9P_TAUTH</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_describe_fid</name><argument_list>(<argument><expr><literal type="string">" afid="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sbuf_printf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">" uname=\"%s\" aname=\"%s\""</literal></expr></argument>,
<argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>tauth</name><operator>.</operator><name>uname</name></name></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>tauth</name><operator>.</operator><name>aname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>L9P_TATTACH</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_describe_fid</name><argument_list>(<argument><expr><literal type="string">" fid="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_describe_fid</name><argument_list>(<argument><expr><literal type="string">" afid="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>tattach</name><operator>.</operator><name>afid</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sbuf_printf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">" uname=\"%s\" aname=\"%s\""</literal></expr></argument>,
<argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>tattach</name><operator>.</operator><name>uname</name></name></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>tattach</name><operator>.</operator><name>aname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>version</name> <operator>&gt;=</operator> <name>L9P_2000U</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sbuf_printf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">" n_uname=%d"</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>tattach</name><operator>.</operator><name>n_uname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>

<case>case <expr><name>L9P_RATTACH</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_describe_qid</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>rattach</name><operator>.</operator><name>qid</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>L9P_RERROR</name></expr>:</case>
<expr_stmt><expr><call><name>sbuf_printf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">" ename=\"%s\" errnum=%d"</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>error</name><operator>.</operator><name>ename</name></name></expr></argument>,
<argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>error</name><operator>.</operator><name>errnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>L9P_RLERROR</name></expr>:</case>
<expr_stmt><expr><call><name>sbuf_printf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">" errnum=%d (%s)"</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>error</name><operator>.</operator><name>errnum</name></name></expr></argument>,
<argument><expr><call><name>lookup_linux_errno</name><argument_list>(<argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>error</name><operator>.</operator><name>errnum</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>L9P_TFLUSH</name></expr>:</case>
<expr_stmt><expr><call><name>sbuf_printf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">" oldtag=%d"</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>tflush</name><operator>.</operator><name>oldtag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>L9P_RFLUSH</name></expr>:</case>
<return>return;</return>

<case>case <expr><name>L9P_TWALK</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_describe_fid</name><argument_list>(<argument><expr><literal type="string">" fid="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_describe_fid</name><argument_list>(<argument><expr><literal type="string">" newfid="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>twalk</name><operator>.</operator><name>newfid</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>fcall</name><operator>-&gt;</operator><name>twalk</name><operator>.</operator><name>nwname</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sbuf_cat</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">" wname=\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fcall</name><operator>-&gt;</operator><name>twalk</name><operator>.</operator><name>nwname</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sbuf_printf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"/"</literal></expr></else></ternary></expr></argument>,
<argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>twalk</name><operator>.</operator><name>wname</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>sbuf_cat</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return;</return>

<case>case <expr><name>L9P_RWALK</name></expr>:</case>
<expr_stmt><expr><call><name>sbuf_printf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">" wqid=["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fcall</name><operator>-&gt;</operator><name>rwalk</name><operator>.</operator><name>nwqid</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>l9p_describe_qid</name><argument_list>(<argument><expr><ternary><condition><expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">","</literal></expr></else></ternary></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>rwalk</name><operator>.</operator><name>wqid</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>sbuf_cat</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>L9P_TOPEN</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_describe_fid</name><argument_list>(<argument><expr><literal type="string">" fid="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_describe_mode</name><argument_list>(<argument><expr><literal type="string">" mode="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>tcreate</name><operator>.</operator><name>mode</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>L9P_ROPEN</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_describe_qid</name><argument_list>(<argument><expr><literal type="string">" qid="</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>ropen</name><operator>.</operator><name>qid</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sbuf_printf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">" iounit=%d"</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>ropen</name><operator>.</operator><name>iounit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>L9P_TCREATE</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_describe_fid</name><argument_list>(<argument><expr><literal type="string">" fid="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_describe_name</name><argument_list>(<argument><expr><literal type="string">" name="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>tcreate</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_describe_ext_perm</name><argument_list>(<argument><expr><literal type="string">" perm="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>tcreate</name><operator>.</operator><name>perm</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_describe_mode</name><argument_list>(<argument><expr><literal type="string">" mode="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>tcreate</name><operator>.</operator><name>mode</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>version</name> <operator>&gt;=</operator> <name>L9P_2000U</name> <operator>&amp;&amp;</operator> <name><name>fcall</name><operator>-&gt;</operator><name>tcreate</name><operator>.</operator><name>extension</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>l9p_describe_name</name><argument_list>(<argument><expr><literal type="string">" extension="</literal></expr></argument>,
<argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>tcreate</name><operator>.</operator><name>extension</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>

<case>case <expr><name>L9P_RCREATE</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_describe_qid</name><argument_list>(<argument><expr><literal type="string">" qid="</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>rcreate</name><operator>.</operator><name>qid</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sbuf_printf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">" iounit=%d"</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>rcreate</name><operator>.</operator><name>iounit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>L9P_TREAD</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_describe_fid</name><argument_list>(<argument><expr><literal type="string">" fid="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sbuf_printf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">" offset=%"</literal> <name>PRIu64</name> <literal type="string">" count=%"</literal> <name>PRIu32</name></expr></argument>,
<argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>L9P_RREAD</name></expr>:</case>
<case>case <expr><name>L9P_RWRITE</name></expr>:</case>
<expr_stmt><expr><call><name>sbuf_printf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">" count=%"</literal> <name>PRIu32</name></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>L9P_TWRITE</name></expr>:</case>
<case>case <expr><name>L9P_TREADDIR</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_describe_fid</name><argument_list>(<argument><expr><literal type="string">" fid="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sbuf_printf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">" offset=%"</literal> <name>PRIu64</name> <literal type="string">" count=%"</literal> <name>PRIu32</name></expr></argument>,
<argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>L9P_TCLUNK</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_describe_fid</name><argument_list>(<argument><expr><literal type="string">" fid="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>L9P_RCLUNK</name></expr>:</case>
<return>return;</return>

<case>case <expr><name>L9P_TREMOVE</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_describe_fid</name><argument_list>(<argument><expr><literal type="string">" fid="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>L9P_RREMOVE</name></expr>:</case>
<return>return;</return>

<case>case <expr><name>L9P_TSTAT</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_describe_fid</name><argument_list>(<argument><expr><literal type="string">" fid="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>L9P_RSTAT</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_describe_l9stat</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>rstat</name><operator>.</operator><name>stat</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>L9P_TWSTAT</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_describe_fid</name><argument_list>(<argument><expr><literal type="string">" fid="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_describe_l9stat</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>twstat</name><operator>.</operator><name>stat</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>L9P_RWSTAT</name></expr>:</case>
<return>return;</return>

<case>case <expr><name>L9P_TSTATFS</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_describe_fid</name><argument_list>(<argument><expr><literal type="string">" fid="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>L9P_RSTATFS</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_describe_statfs</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>rstatfs</name><operator>.</operator><name>statfs</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>L9P_TLOPEN</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_describe_fid</name><argument_list>(<argument><expr><literal type="string">" fid="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_describe_lflags</name><argument_list>(<argument><expr><literal type="string">" flags="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>tlcreate</name><operator>.</operator><name>flags</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>L9P_RLOPEN</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_describe_qid</name><argument_list>(<argument><expr><literal type="string">" qid="</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>rlopen</name><operator>.</operator><name>qid</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sbuf_printf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">" iounit=%d"</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>rlopen</name><operator>.</operator><name>iounit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>L9P_TLCREATE</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_describe_fid</name><argument_list>(<argument><expr><literal type="string">" fid="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_describe_name</name><argument_list>(<argument><expr><literal type="string">" name="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>tlcreate</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>l9p_describe_lflags</name><argument_list>(<argument><expr><literal type="string">" flags="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>tlcreate</name><operator>.</operator><name>flags</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>l9p_describe_lperm</name><argument_list>(<argument><expr><literal type="string">" mode="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>tlcreate</name><operator>.</operator><name>mode</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_describe_ugid</name><argument_list>(<argument><expr><literal type="string">" gid="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>tlcreate</name><operator>.</operator><name>gid</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>L9P_RLCREATE</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_describe_qid</name><argument_list>(<argument><expr><literal type="string">" qid="</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>rlcreate</name><operator>.</operator><name>qid</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sbuf_printf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">" iounit=%d"</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>rlcreate</name><operator>.</operator><name>iounit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>L9P_TSYMLINK</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_describe_fid</name><argument_list>(<argument><expr><literal type="string">" fid="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_describe_name</name><argument_list>(<argument><expr><literal type="string">" name="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>tsymlink</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_describe_name</name><argument_list>(<argument><expr><literal type="string">" symtgt="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>tsymlink</name><operator>.</operator><name>symtgt</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_describe_ugid</name><argument_list>(<argument><expr><literal type="string">" gid="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>tsymlink</name><operator>.</operator><name>gid</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>L9P_RSYMLINK</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_describe_qid</name><argument_list>(<argument><expr><literal type="string">" qid="</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>ropen</name><operator>.</operator><name>qid</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>L9P_TMKNOD</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_describe_fid</name><argument_list>(<argument><expr><literal type="string">" dfid="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_describe_name</name><argument_list>(<argument><expr><literal type="string">" name="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>tmknod</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>l9p_describe_lperm</name><argument_list>(<argument><expr><literal type="string">" mode="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>tmknod</name><operator>.</operator><name>mode</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sbuf_printf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">" major=%u minor=%u"</literal></expr></argument>,
<argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>tmknod</name><operator>.</operator><name>major</name></name></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>tmknod</name><operator>.</operator><name>minor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_describe_ugid</name><argument_list>(<argument><expr><literal type="string">" gid="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>tmknod</name><operator>.</operator><name>gid</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>L9P_RMKNOD</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_describe_qid</name><argument_list>(<argument><expr><literal type="string">" qid="</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>rmknod</name><operator>.</operator><name>qid</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>L9P_TRENAME</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_describe_fid</name><argument_list>(<argument><expr><literal type="string">" fid="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_describe_fid</name><argument_list>(<argument><expr><literal type="string">" dfid="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>trename</name><operator>.</operator><name>dfid</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_describe_name</name><argument_list>(<argument><expr><literal type="string">" name="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>trename</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>L9P_RRENAME</name></expr>:</case>
<return>return;</return>

<case>case <expr><name>L9P_TREADLINK</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_describe_fid</name><argument_list>(<argument><expr><literal type="string">" fid="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>L9P_RREADLINK</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_describe_name</name><argument_list>(<argument><expr><literal type="string">" target="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>rreadlink</name><operator>.</operator><name>target</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>L9P_TGETATTR</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_describe_fid</name><argument_list>(<argument><expr><literal type="string">" fid="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_describe_getattr_mask</name><argument_list>(<argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>tgetattr</name><operator>.</operator><name>request_mask</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>L9P_RGETATTR</name></expr>:</case>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <name><name>fcall</name><operator>-&gt;</operator><name>rgetattr</name><operator>.</operator><name>valid</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sbuf_printf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">" valid=0x%016"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_describe_qid</name><argument_list>(<argument><expr><literal type="string">" qid="</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>rgetattr</name><operator>.</operator><name>qid</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>L9PL_GETATTR_MODE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>l9p_describe_lperm</name><argument_list>(<argument><expr><literal type="string">" mode="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>rgetattr</name><operator>.</operator><name>mode</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>L9PL_GETATTR_UID</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>l9p_describe_ugid</name><argument_list>(<argument><expr><literal type="string">" uid="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>rgetattr</name><operator>.</operator><name>uid</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>L9PL_GETATTR_GID</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>l9p_describe_ugid</name><argument_list>(<argument><expr><literal type="string">" gid="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>rgetattr</name><operator>.</operator><name>gid</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>L9PL_GETATTR_NLINK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sbuf_printf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">" nlink=%"</literal> <name>PRIu64</name></expr></argument>,
<argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>rgetattr</name><operator>.</operator><name>nlink</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>L9PL_GETATTR_RDEV</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sbuf_printf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">" rdev=0x%"</literal> <name>PRIx64</name></expr></argument>,
<argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>rgetattr</name><operator>.</operator><name>rdev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>L9PL_GETATTR_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>l9p_describe_size</name><argument_list>(<argument><expr><literal type="string">" size="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>rgetattr</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>L9PL_GETATTR_BLOCKS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sbuf_printf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">" blksize=%"</literal> <name>PRIu64</name> <literal type="string">" blocks=%"</literal> <name>PRIu64</name></expr></argument>,
<argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>rgetattr</name><operator>.</operator><name>blksize</name></name></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>rgetattr</name><operator>.</operator><name>blocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>L9PL_GETATTR_ATIME</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>l9p_describe_time</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">" atime="</literal></expr></argument>,
<argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>rgetattr</name><operator>.</operator><name>atime_sec</name></name></expr></argument>,
<argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>rgetattr</name><operator>.</operator><name>atime_nsec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>L9PL_GETATTR_MTIME</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>l9p_describe_time</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">" mtime="</literal></expr></argument>,
<argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>rgetattr</name><operator>.</operator><name>mtime_sec</name></name></expr></argument>,
<argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>rgetattr</name><operator>.</operator><name>mtime_nsec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>L9PL_GETATTR_CTIME</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>l9p_describe_time</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">" ctime="</literal></expr></argument>,
<argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>rgetattr</name><operator>.</operator><name>ctime_sec</name></name></expr></argument>,
<argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>rgetattr</name><operator>.</operator><name>ctime_nsec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>L9PL_GETATTR_BTIME</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>l9p_describe_time</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">" btime="</literal></expr></argument>,
<argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>rgetattr</name><operator>.</operator><name>btime_sec</name></name></expr></argument>,
<argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>rgetattr</name><operator>.</operator><name>btime_nsec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>L9PL_GETATTR_GEN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sbuf_printf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">" gen=0x%"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>rgetattr</name><operator>.</operator><name>gen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>L9PL_GETATTR_DATA_VERSION</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sbuf_printf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">" data_version=0x%"</literal> <name>PRIx64</name></expr></argument>,
<argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>rgetattr</name><operator>.</operator><name>data_version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>

<case>case <expr><name>L9P_TSETATTR</name></expr>:</case>

<expr_stmt><expr><call><name>l9p_describe_fid</name><argument_list>(<argument><expr><literal type="string">" fid="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mask</name> <operator>=</operator> <name><name>fcall</name><operator>-&gt;</operator><name>tsetattr</name><operator>.</operator><name>valid</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sbuf_printf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">" valid=0x%08"</literal> <name>PRIx64</name></expr></argument>, <argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>L9PL_SETATTR_MODE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>l9p_describe_lperm</name><argument_list>(<argument><expr><literal type="string">" mode="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>tsetattr</name><operator>.</operator><name>mode</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>L9PL_SETATTR_UID</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>l9p_describe_ugid</name><argument_list>(<argument><expr><literal type="string">" uid="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>tsetattr</name><operator>.</operator><name>uid</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>L9PL_SETATTR_GID</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>l9p_describe_ugid</name><argument_list>(<argument><expr><literal type="string">" uid="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>tsetattr</name><operator>.</operator><name>gid</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>L9PL_SETATTR_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>l9p_describe_size</name><argument_list>(<argument><expr><literal type="string">" size="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>tsetattr</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>L9PL_SETATTR_ATIME</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>L9PL_SETATTR_ATIME_SET</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>l9p_describe_time</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">" atime="</literal></expr></argument>,
<argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>tsetattr</name><operator>.</operator><name>atime_sec</name></name></expr></argument>,
<argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>tsetattr</name><operator>.</operator><name>atime_nsec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sbuf_cat</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">" atime=now"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>L9PL_SETATTR_MTIME</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>L9PL_SETATTR_MTIME_SET</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>l9p_describe_time</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">" mtime="</literal></expr></argument>,
<argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>tsetattr</name><operator>.</operator><name>mtime_sec</name></name></expr></argument>,
<argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>tsetattr</name><operator>.</operator><name>mtime_nsec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sbuf_cat</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">" mtime=now"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>L9PL_SETATTR_CTIME</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sbuf_cat</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">" ctime=now"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return;</return>

<case>case <expr><name>L9P_RSETATTR</name></expr>:</case>
<return>return;</return>

<case>case <expr><name>L9P_TXATTRWALK</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_describe_fid</name><argument_list>(<argument><expr><literal type="string">" fid="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_describe_fid</name><argument_list>(<argument><expr><literal type="string">" newfid="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>txattrwalk</name><operator>.</operator><name>newfid</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_describe_name</name><argument_list>(<argument><expr><literal type="string">" name="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>txattrwalk</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>L9P_RXATTRWALK</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_describe_size</name><argument_list>(<argument><expr><literal type="string">" size="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>rxattrwalk</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>L9P_TXATTRCREATE</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_describe_fid</name><argument_list>(<argument><expr><literal type="string">" fid="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_describe_name</name><argument_list>(<argument><expr><literal type="string">" name="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>txattrcreate</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_describe_size</name><argument_list>(<argument><expr><literal type="string">" size="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>txattrcreate</name><operator>.</operator><name>attr_size</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sbuf_printf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">" flags=%"</literal> <name>PRIu32</name></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>txattrcreate</name><operator>.</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>L9P_RXATTRCREATE</name></expr>:</case>
<return>return;</return>

<case>case <expr><name>L9P_RREADDIR</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_describe_readdir</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>io</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>L9P_TFSYNC</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_describe_fid</name><argument_list>(<argument><expr><literal type="string">" fid="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>L9P_RFSYNC</name></expr>:</case>
<return>return;</return>

<case>case <expr><name>L9P_TLOCK</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_describe_fid</name><argument_list>(<argument><expr><literal type="string">" fid="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sbuf_printf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">" type=%d flags=0x%"</literal> <name>PRIx32</name>
<literal type="string">" start=%"</literal> <name>PRIu64</name> <literal type="string">" length=%"</literal> <name>PRIu64</name>
<literal type="string">" proc_id=0x%"</literal> <name>PRIx32</name> <literal type="string">" client_id=\"%s\""</literal></expr></argument>,
<argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>tlock</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>tlock</name><operator>.</operator><name>flags</name></name></expr></argument>,
<argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>tlock</name><operator>.</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>tlock</name><operator>.</operator><name>length</name></name></expr></argument>,
<argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>tlock</name><operator>.</operator><name>proc_id</name></name></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>tlock</name><operator>.</operator><name>client_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>L9P_RLOCK</name></expr>:</case>
<expr_stmt><expr><call><name>sbuf_printf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">" status=%d"</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>rlock</name><operator>.</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>L9P_TGETLOCK</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_describe_fid</name><argument_list>(<argument><expr><literal type="string">" fid="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<case>case <expr><name>L9P_RGETLOCK</name></expr>:</case>

<expr_stmt><expr><call><name>sbuf_printf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">" type=%d "</literal>
<literal type="string">" start=%"</literal> <name>PRIu64</name> <literal type="string">" length=%"</literal> <name>PRIu64</name>
<literal type="string">" proc_id=0x%"</literal> <name>PRIx32</name> <literal type="string">" client_id=\"%s\""</literal></expr></argument>,
<argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>getlock</name><operator>.</operator><name>type</name></name></expr></argument>,
<argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>getlock</name><operator>.</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>getlock</name><operator>.</operator><name>length</name></name></expr></argument>,
<argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>getlock</name><operator>.</operator><name>proc_id</name></name></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>getlock</name><operator>.</operator><name>client_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>L9P_TLINK</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_describe_fid</name><argument_list>(<argument><expr><literal type="string">" dfid="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>tlink</name><operator>.</operator><name>dfid</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_describe_fid</name><argument_list>(<argument><expr><literal type="string">" fid="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_describe_name</name><argument_list>(<argument><expr><literal type="string">" name="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>tlink</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>L9P_RLINK</name></expr>:</case>
<return>return;</return>

<case>case <expr><name>L9P_TMKDIR</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_describe_fid</name><argument_list>(<argument><expr><literal type="string">" fid="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_describe_name</name><argument_list>(<argument><expr><literal type="string">" name="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>tmkdir</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>l9p_describe_lperm</name><argument_list>(<argument><expr><literal type="string">" mode="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>tmkdir</name><operator>.</operator><name>mode</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_describe_ugid</name><argument_list>(<argument><expr><literal type="string">" gid="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>tmkdir</name><operator>.</operator><name>gid</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>L9P_RMKDIR</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_describe_qid</name><argument_list>(<argument><expr><literal type="string">" qid="</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>rmkdir</name><operator>.</operator><name>qid</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>L9P_TRENAMEAT</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_describe_fid</name><argument_list>(<argument><expr><literal type="string">" olddirfid="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_describe_name</name><argument_list>(<argument><expr><literal type="string">" oldname="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>trenameat</name><operator>.</operator><name>oldname</name></name></expr></argument>,
<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_describe_fid</name><argument_list>(<argument><expr><literal type="string">" newdirfid="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>trenameat</name><operator>.</operator><name>newdirfid</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_describe_name</name><argument_list>(<argument><expr><literal type="string">" newname="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>trenameat</name><operator>.</operator><name>newname</name></name></expr></argument>,
<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>L9P_RRENAMEAT</name></expr>:</case>
<return>return;</return>

<case>case <expr><name>L9P_TUNLINKAT</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_describe_fid</name><argument_list>(<argument><expr><literal type="string">" dirfd="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_describe_name</name><argument_list>(<argument><expr><literal type="string">" name="</literal></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>tunlinkat</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_describe_unlinkat_flags</name><argument_list>(<argument><expr><literal type="string">" flags="</literal></expr></argument>,
<argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>tunlinkat</name><operator>.</operator><name>flags</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>L9P_RUNLINKAT</name></expr>:</case>
<return>return;</return>

<default>default:</default>
<expr_stmt><expr><call><name>sbuf_printf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">" &lt;missing case in %s()&gt;"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></function>
</unit>
