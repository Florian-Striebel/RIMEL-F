<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/lib9p/hashtable.c">


























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/queue.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib9p_impl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hashtable.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>ht_item</name></name> <modifier>*</modifier></type><name>ht_iter_advance</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ht_iter</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ht_item</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type>
<name>ht_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ht</name></name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ht</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>ht_nentries</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>ht_entries</name></name> <operator>=</operator> <call><name>l9p_calloc</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ht_entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_rwlock_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>ht_rwlock</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>TAILQ_INIT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>ht_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hte_items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ht_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ht</name></name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ht_entry</name></name> <modifier>*</modifier></type><name>he</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ht_item</name></name> <modifier>*</modifier></type><name>item</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>h</name><operator>-&gt;</operator><name>ht_nentries</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>he</name> <operator>=</operator> <operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>ht_entries</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<macro><name>TAILQ_FOREACH_SAFE</name><argument_list>(<argument>item</argument>, <argument>&amp;he-&gt;hte_items</argument>, <argument>hti_link</argument>, <argument>tmp</argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></for>

<expr_stmt><expr><call><name>pthread_rwlock_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>ht_rwlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>ht_entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>ht_entries</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type>
<name>ht_find</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ht</name></name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ht_rdlock</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ht_find_locked</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ht_unlock</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type>
<name>ht_find_locked</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ht</name></name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ht_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ht_item</name></name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

<expr_stmt><expr><name>entry</name> <operator>=</operator> <operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>ht_entries</name><index>[<expr><name>hash</name> <operator>%</operator> <name><name>h</name><operator>-&gt;</operator><name>ht_nentries</name></name></expr>]</index></name></expr>;</expr_stmt>

<macro><name>TAILQ_FOREACH</name><argument_list>(<argument>item</argument>, <argument>&amp;entry-&gt;hte_items</argument>, <argument>hti_link</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>hti_hash</name></name> <operator>==</operator> <name>hash</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name><name>item</name><operator>-&gt;</operator><name>hti_data</name></name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block>

<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>ht_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ht</name></name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>hash</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ht_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ht_item</name></name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ht_wrlock</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>entry</name> <operator>=</operator> <operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>ht_entries</name><index>[<expr><name>hash</name> <operator>%</operator> <name><name>h</name><operator>-&gt;</operator><name>ht_nentries</name></name></expr>]</index></name></expr>;</expr_stmt>

<macro><name>TAILQ_FOREACH</name><argument_list>(<argument>item</argument>, <argument>&amp;entry-&gt;hte_items</argument>, <argument>hti_link</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>hti_hash</name></name> <operator>==</operator> <name>hash</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EEXIST</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ht_unlock</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>l9p_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ht_item</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>hti_hash</name></name> <operator>=</operator> <name>hash</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>hti_data</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAILQ_INSERT_TAIL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>hte_items</name></name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>hti_link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ht_unlock</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>ht_remove</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ht</name></name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ht_wrlock</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ht_remove_locked</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ht_unlock</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>ht_remove_locked</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ht</name></name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>hash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ht_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ht_item</name></name> <modifier>*</modifier></type><name>item</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>slot</name> <init>= <expr><name>hash</name> <operator>%</operator> <name><name>h</name><operator>-&gt;</operator><name>ht_nentries</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>entry</name> <operator>=</operator> <operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>ht_entries</name><index>[<expr><name>slot</name></expr>]</index></name></expr>;</expr_stmt>

<macro><name>TAILQ_FOREACH_SAFE</name><argument_list>(<argument>item</argument>, <argument>&amp;entry-&gt;hte_items</argument>, <argument>hti_link</argument>, <argument>tmp</argument>)</argument_list></macro> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>hti_hash</name></name> <operator>==</operator> <name>hash</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>TAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>hte_items</name></name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>hti_link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOENT</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name><name>struct</name> <name>ht_item</name></name> <modifier>*</modifier></type>
<name>ht_iter_advance</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ht_iter</name></name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ht_item</name></name> <modifier>*</modifier></type><name>cur</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ht_item</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ht</name></name> <modifier>*</modifier></type><name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>slot</name></decl>;</decl_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>htit_parent</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cur</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>next</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>TAILQ_NEXT</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>hti_link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>next</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>slot</name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>htit_slot</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>++</operator><name>slot</name> <operator>&lt;</operator> <name><name>h</name><operator>-&gt;</operator><name>ht_nentries</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>TAILQ_FIRST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>ht_entries</name><index>[<expr><name>slot</name></expr>]</index></name><operator>.</operator><name>hte_items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>next</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>htit_slot</name></name> <operator>=</operator> <name>slot</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>next</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type>
<name>ht_remove_at_iter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ht_iter</name></name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ht_item</name></name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ht</name></name> <modifier>*</modifier></type><name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>slot</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>iter</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>item</name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>htit_curr</name></name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>htit_parent</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ht_wrlock</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>slot</name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>htit_slot</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>htit_next</name></name> <operator>=</operator> <call><name>ht_iter_advance</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TAILQ_REMOVE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>ht_entries</name><index>[<expr><name>slot</name></expr>]</index></name><operator>.</operator><name>hte_items</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>hti_link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ht_unlock</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>htit_curr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>







<function><type><name>void</name></type>
<name>ht_iter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ht</name></name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ht_iter</name></name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>htit_parent</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>htit_curr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>htit_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>htit_slot</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>void</name> <modifier>*</modifier></type>
<name>ht_next</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ht_iter</name></name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ht_item</name></name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ht</name></name> <modifier>*</modifier></type><name>h</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>item</name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>htit_next</name></name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>htit_parent</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ht_rdlock</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>ht_iter_advance</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>htit_curr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ht_unlock</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>htit_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>htit_curr</name></name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><ternary><condition><expr><name>item</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name><name>item</name><operator>-&gt;</operator><name>hti_data</name></name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
