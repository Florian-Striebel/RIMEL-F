<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/lib9p/genacl.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/acl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib9p.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib9p_impl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"genacl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fid.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log.h"</cpp:file></cpp:include>

<typedef>typedef <function_decl><type><name>int</name></type> <name>econvertfn</name><parameter_list>(<parameter><decl><type><name>acl_entry_t</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_ace</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>l9p_acl</name></name> <modifier>*</modifier></type><name>l9p_new_acl</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>acetype</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>aceasize</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>l9p_acl</name></name> <modifier>*</modifier></type><name>l9p_growacl</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_acl</name></name> <modifier>*</modifier></type><name>acl</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>aceasize</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>l9p_count_aces</name><parameter_list>(<parameter><decl><type><name>acl_t</name></type> <name>sysacl</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>l9p_acl</name></name> <modifier>*</modifier></type><name>l9p_sysacl_to_acl</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>acl_t</name></type></decl></parameter>, <parameter><decl><type><name>econvertfn</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>l9p_ingroup</name><parameter_list>(<parameter><decl><type><name>gid_t</name></type> <name>tid</name></decl></parameter>, <parameter><decl><type><name>gid_t</name></type> <name>gid</name></decl></parameter>, <parameter><decl><type><name>gid_t</name> <modifier>*</modifier></type><name>gids</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ngids</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>l9p_check_aces</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_acl</name></name> <modifier>*</modifier></type><name>acl</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>,
<parameter><decl><type><name>uid_t</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>gid_t</name></type> <name>gid</name></decl></parameter>, <parameter><decl><type><name>gid_t</name> <modifier>*</modifier></type><name>gids</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ngids</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type>
<name>l9p_acl_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_acl</name></name> <modifier>*</modifier></type><name>acl</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>acl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>bool</name></type>
<name>l9p_ingroup</name><parameter_list>(<parameter><decl><type><name>gid_t</name></type> <name>tid</name></decl></parameter>, <parameter><decl><type><name>gid_t</name></type> <name>gid</name></decl></parameter>, <parameter><decl><type><name>gid_t</name> <modifier>*</modifier></type><name>gids</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ngids</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>tid</name> <operator>==</operator> <name>gid</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ngids</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>tid</name> <operator>==</operator> <name><name>gids</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





















<function><type><specifier>static</specifier> <name>int</name></type>
<name>l9p_check_aces</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_acl</name></name> <modifier>*</modifier></type><name>acl</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>,
<parameter><decl><type><name>uid_t</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>gid_t</name></type> <name>gid</name></decl></parameter>, <parameter><decl><type><name>gid_t</name> <modifier>*</modifier></type><name>gids</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ngids</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_ace</name></name> <modifier>*</modifier></type><name>ace</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACE_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>acetype</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>allowdeny</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>show_tid</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>bool</name></type> <name>match</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uid_t</name></type> <name>tid</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>mask</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>acl</name><operator>-&gt;</operator><name>acl_nace</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>ace</name> <operator>=</operator> <operator>&amp;</operator><name><name>acl</name><operator>-&gt;</operator><name>acl_aces</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>ace</name><operator>-&gt;</operator><name>ace_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>L9P_ACET_ACCESS_ALLOWED</name></expr>:</case>
<case>case <expr><name>L9P_ACET_ACCESS_DENIED</name></expr>:</case>
<break>break;</break>
<default>default:</default>

<continue>continue;</continue>
</block_content>}</block></switch>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACE_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>show_tid</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>ace</name><operator>-&gt;</operator><name>ace_flags</name></name> <operator>&amp;</operator> <name>L9P_ACEF_OWNER</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACE_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>acetype</name> <operator>=</operator> <literal type="string">"OWNER@"</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>match</name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>st_uid</name></name> <operator>==</operator> <name>uid</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ace</name><operator>-&gt;</operator><name>ace_flags</name></name> <operator>&amp;</operator> <name>L9P_ACEF_GROUP</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACE_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>acetype</name> <operator>=</operator> <literal type="string">"GROUP@"</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>match</name> <operator>=</operator> <call><name>l9p_ingroup</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>st_gid</name></name></expr></argument>, <argument><expr><name>gid</name></expr></argument>, <argument><expr><name>gids</name></expr></argument>, <argument><expr><name>ngids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ace</name><operator>-&gt;</operator><name>ace_flags</name></name> <operator>&amp;</operator> <name>L9P_ACEF_EVERYONE</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACE_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>acetype</name> <operator>=</operator> <literal type="string">"EVERYONE@"</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>match</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ace</name><operator>-&gt;</operator><name>ace_idsize</name></name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tid</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACE_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>show_tid</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ace</name><operator>-&gt;</operator><name>ace_idbytes</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ace</name><operator>-&gt;</operator><name>ace_flags</name></name> <operator>&amp;</operator> <name>L9P_ACEF_IDENTIFIER_GROUP</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACE_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>acetype</name> <operator>=</operator> <literal type="string">"group"</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>match</name> <operator>=</operator> <call><name>l9p_ingroup</name><argument_list>(<argument><expr><name>tid</name></expr></argument>, <argument><expr><name>gid</name></expr></argument>, <argument><expr><name>gids</name></expr></argument>, <argument><expr><name>ngids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACE_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>acetype</name> <operator>=</operator> <literal type="string">"user"</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>match</name> <operator>=</operator> <name>tid</name> <operator>==</operator> <name>uid</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACE_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>allowdeny</name> <operator>=</operator> <ternary><condition><expr><name><name>ace</name><operator>-&gt;</operator><name>ace_type</name></name> <operator>==</operator> <name>L9P_ACET_ACCESS_DENIED</name></expr> ?</condition><then>
<expr><literal type="string">"deny"</literal></expr> </then><else>: <expr><literal type="string">"allow"</literal></expr></else></ternary></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>match</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ace</name><operator>-&gt;</operator><name>ace_mask</name></name> <operator>&amp;</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>mask</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACE_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>show_tid</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>L9P_LOG</name><argument_list>(<argument><expr><name>L9P_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"ACE: %s %s %d: mask 0x%x ace_mask 0x%x"</literal></expr></argument>,
<argument><expr><name>allowdeny</name></expr></argument>, <argument><expr><name>acetype</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>tid</name></expr></argument>,
<argument><expr><operator>(</operator><name>u_int</name><operator>)</operator><name>mask</name></expr></argument>, <argument><expr><operator>(</operator><name>u_int</name><operator>)</operator><name><name>ace</name><operator>-&gt;</operator><name>ace_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>L9P_LOG</name><argument_list>(<argument><expr><name>L9P_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"ACE: %s %s: mask 0x%x ace_mask 0x%x"</literal></expr></argument>,
<argument><expr><name>allowdeny</name></expr></argument>, <argument><expr><name>acetype</name></expr></argument>,
<argument><expr><operator>(</operator><name>u_int</name><operator>)</operator><name>mask</name></expr></argument>, <argument><expr><operator>(</operator><name>u_int</name><operator>)</operator><name><name>ace</name><operator>-&gt;</operator><name>ace_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>ace</name><operator>-&gt;</operator><name>ace_type</name></name> <operator>==</operator> <name>L9P_ACET_ACCESS_DENIED</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>mask</name> <operator>&amp;=</operator> <operator>~</operator><name><name>ace</name><operator>-&gt;</operator><name>ace_mask</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACE_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>L9P_LOG</name><argument_list>(<argument><expr><name>L9P_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"clear 0x%x: now mask=0x%x"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>u_int</name><operator>)</operator><name><name>ace</name><operator>-&gt;</operator><name>ace_mask</name></name></expr></argument>, <argument><expr><operator>(</operator><name>u_int</name><operator>)</operator><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if> <else>else <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACE_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>show_tid</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>L9P_LOG</name><argument_list>(<argument><expr><name>L9P_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"ACE: SKIP %s %s %d: "</literal>
<literal type="string">"match %d mask 0x%x ace_mask 0x%x"</literal></expr></argument>,
<argument><expr><name>allowdeny</name></expr></argument>, <argument><expr><name>acetype</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>tid</name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>match</name></expr></argument>, <argument><expr><operator>(</operator><name>u_int</name><operator>)</operator><name>mask</name></expr></argument>,
<argument><expr><operator>(</operator><name>u_int</name><operator>)</operator><name><name>ace</name><operator>-&gt;</operator><name>ace_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>L9P_LOG</name><argument_list>(<argument><expr><name>L9P_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"ACE: SKIP %s %s: "</literal>
<literal type="string">"match %d mask 0x%x ace_mask 0x%x"</literal></expr></argument>,
<argument><expr><name>allowdeny</name></expr></argument>, <argument><expr><name>acetype</name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>match</name></expr></argument>, <argument><expr><operator>(</operator><name>u_int</name><operator>)</operator><name>mask</name></expr></argument>,
<argument><expr><operator>(</operator><name>u_int</name><operator>)</operator><name><name>ace</name><operator>-&gt;</operator><name>ace_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACE_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>L9P_LOG</name><argument_list>(<argument><expr><name>L9P_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"ACE: end of ACEs, mask now 0x%x: %s"</literal></expr></argument>,
<argument><expr><name>mask</name></expr></argument>, <argument><expr><ternary><condition><expr><name>mask</name></expr> ?</condition><then> <expr><literal type="string">"no-definitive-answer"</literal></expr> </then><else>: <expr><literal type="string">"ALLOW"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><operator>(</operator><ternary><condition><expr><name>mask</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>



























<function><type><name>int</name></type> <name>l9p_acl_check_access</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>opmask</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_acl_check_args</name></name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_acl</name></name> <modifier>*</modifier></type><name>parent</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>child</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>pstat</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cstat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>pop</name></decl>, <decl><type ref="prev"/><name>cop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>ngids</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uid_t</name></type> <name>uid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gid_t</name></type> <name>gid</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>gids</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>panswer</name></decl>, <decl><type ref="prev"/><name>canswer</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>opmask</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>parent</name> <operator>=</operator> <name><name>args</name><operator>-&gt;</operator><name>aca_parent</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>pstat</name> <operator>=</operator> <name><name>args</name><operator>-&gt;</operator><name>aca_pstat</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>child</name> <operator>=</operator> <name><name>args</name><operator>-&gt;</operator><name>aca_child</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cstat</name> <operator>=</operator> <name><name>args</name><operator>-&gt;</operator><name>aca_cstat</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>uid</name> <operator>=</operator> <name><name>args</name><operator>-&gt;</operator><name>aca_uid</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>gid</name> <operator>=</operator> <name><name>args</name><operator>-&gt;</operator><name>aca_gid</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>gids</name> <operator>=</operator> <name><name>args</name><operator>-&gt;</operator><name>aca_groups</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ngids</name> <operator>=</operator> <name><name>args</name><operator>-&gt;</operator><name>aca_ngroups</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ACE_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>L9P_LOG</name><argument_list>(<argument><expr><name>L9P_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"l9p_acl_check_access: opmask=0x%x uid=%ld gid=%ld ngids=%zd"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>u_int</name><operator>)</operator><name>opmask</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>uid</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>gid</name></expr></argument>, <argument><expr><name>ngids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<if_stmt><if>if <condition>(<expr><name>uid</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>args</name><operator>-&gt;</operator><name>aca_superuser</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>args</name><operator>-&gt;</operator><name>aca_aclmode</name></name> <operator>&amp;</operator> <name>L9P_ACM_NFS_ACL</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>parent</name> <operator>=</operator> <name>child</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>parent</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>parent</name><operator>-&gt;</operator><name>acl_acetype</name></name> <operator>==</operator> <name>L9P_ACLTYPE_NFSv4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>parent</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pstat</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>child</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>child</name><operator>-&gt;</operator><name>acl_acetype</name></name> <operator>==</operator> <name>L9P_ACLTYPE_NFSv4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>child</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>cstat</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pstat</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name>cstat</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>












<expr_stmt><expr><name>pop</name> <operator>=</operator> <name>cop</name> <operator>=</operator> <name>opmask</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>parent</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name>pstat</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>












<expr_stmt><expr><name>pop</name> <operator>&amp;=</operator> <operator>~</operator><name>L9P_ACE_DELETE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cop</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>L9P_ACE_DELETE_CHILD</name> <operator>|</operator> <name>L9P_ACE_LIST_DIRECTORY</name> <operator>|</operator>
<name>L9P_ACE_ADD_FILE</name> <operator>|</operator> <name>L9P_ACE_ADD_SUBDIRECTORY</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>








</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>panswer</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>canswer</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>parent</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>panswer</name> <operator>=</operator> <call><name>l9p_check_aces</name><argument_list>(<argument><expr><name>pop</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>pstat</name></expr></argument>,
<argument><expr><name>uid</name></expr></argument>, <argument><expr><name>gid</name></expr></argument>, <argument><expr><name>gids</name></expr></argument>, <argument><expr><name>ngids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>child</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>canswer</name> <operator>=</operator> <call><name>l9p_check_aces</name><argument_list>(<argument><expr><name>cop</name></expr></argument>, <argument><expr><name>child</name></expr></argument>, <argument><expr><name>cstat</name></expr></argument>,
<argument><expr><name>uid</name></expr></argument>, <argument><expr><name>gid</name></expr></argument>, <argument><expr><name>gids</name></expr></argument>, <argument><expr><name>ngids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>panswer</name> <operator>||</operator> <name>canswer</name></expr>)</condition> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><name>opmask</name> <operator>==</operator> <name>L9P_ACOP_UNLINK</name></expr>)</condition> <block>{<block_content>









<if_stmt><if>if <condition>(<expr><name>panswer</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>canswer</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>panswer</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>canswer</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>EPERM</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>





<if_stmt><if>if <condition>(<expr><name>panswer</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><ternary><condition><expr><name>panswer</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>EPERM</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><ternary><condition><expr><name>canswer</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>EPERM</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>















<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>args</name><operator>-&gt;</operator><name>aca_aclmode</name></name> <operator>&amp;</operator> <name>L9P_ACM_ZFS_ACL</name><operator>)</operator> <operator>&amp;&amp;</operator>
<name>opmask</name> <operator>==</operator> <name>L9P_ACOP_UNLINK</name> <operator>&amp;&amp;</operator> <name>parent</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>panswer</name> <operator>=</operator> <call><name>l9p_check_aces</name><argument_list>(<argument><expr><name>L9P_ACE_ADD_FILE</name> <operator>|</operator> <name>L9P_ACE_EXECUTE</name></expr></argument>,
<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>pstat</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><name>gid</name></expr></argument>, <argument><expr><name>gids</name></expr></argument>, <argument><expr><name>ngids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>panswer</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><ternary><condition><expr><name>panswer</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>EPERM</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>













<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>aca_aclmode</name></name> <operator>&amp;</operator> <name>L9P_ACM_STAT_MODE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rwx</name></decl>, <decl><type ref="prev"/><name>bits</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rwx</name> <operator>=</operator> <call><name>l9p_ace_mask_to_rwx</name><argument_list>(<argument><expr><name>opmask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>st</name> <operator>=</operator> <name>cstat</name><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name>opmask</name> <operator>&amp;</operator> <name>L9P_ACE_DELETE_CHILD</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>st</name> <operator>=</operator> <name>pstat</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>uid</name> <operator>==</operator> <name><name>st</name><operator>-&gt;</operator><name>st_uid</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>st_mode</name></name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><call><name>l9p_ingroup</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>st_gid</name></name></expr></argument>, <argument><expr><name>gid</name></expr></argument>, <argument><expr><name>gids</name></expr></argument>, <argument><expr><name>ngids</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>st_mode</name></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>bits</name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>st_mode</name></name> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rwx</name> <operator>&amp;</operator> <name>bits</name><operator>)</operator> <operator>==</operator> <name>rwx</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<return>return <expr><operator>(</operator><name>EPERM</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>









<function><type><name>int</name></type>
<name>l9p_ace_mask_to_rwx</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>opmask</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rwx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>opmask</name> <operator>&amp;</operator>
<operator>(</operator><name>L9P_ACE_READ_DATA</name> <operator>|</operator> <name>L9P_ACE_READ_NAMED_ATTRS</name> <operator>|</operator>
<name>L9P_ACE_READ_ATTRIBUTES</name> <operator>|</operator> <name>L9P_ACE_READ_ACL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rwx</name> <operator>|=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>opmask</name> <operator>&amp;</operator>
<operator>(</operator><name>L9P_ACE_WRITE_DATA</name> <operator>|</operator> <name>L9P_ACE_APPEND_DATA</name> <operator>|</operator>
<name>L9P_ACE_ADD_FILE</name> <operator>|</operator> <name>L9P_ACE_ADD_SUBDIRECTORY</name> <operator>|</operator>
<name>L9P_ACE_DELETE</name> <operator>|</operator> <name>L9P_ACE_DELETE_CHILD</name> <operator>|</operator>
<name>L9P_ACE_WRITE_NAMED_ATTRS</name> <operator>|</operator> <name>L9P_ACE_WRITE_ATTRIBUTES</name> <operator>|</operator>
<name>L9P_ACE_WRITE_ACL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rwx</name> <operator>|=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>opmask</name> <operator>&amp;</operator> <name>L9P_ACE_EXECUTE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>rwx</name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>rwx</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><specifier>static</specifier> <name><name>struct</name> <name>l9p_acl</name></name> <modifier>*</modifier></type>
<name>l9p_new_acl</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>acetype</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>aceasize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_acl</name></name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>asize</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>

<expr_stmt><expr><name>asize</name> <operator>=</operator> <name>aceasize</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>l9p_ace</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>l9p_acl</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>asize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>acl_acetype</name></name> <operator>=</operator> <name>acetype</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>acl_nace</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>acl_aceasize</name></name> <operator>=</operator> <name>aceasize</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name><name>struct</name> <name>l9p_acl</name></name> <modifier>*</modifier></type>
<name>l9p_growacl</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_acl</name></name> <modifier>*</modifier></type><name>acl</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>aceasize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_acl</name></name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>asize</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>acl</name><operator>-&gt;</operator><name>acl_aceasize</name></name> <operator>&lt;</operator> <name>aceasize</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>asize</name> <operator>=</operator> <name>aceasize</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>l9p_ace</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>l9p_acl</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>asize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>acl</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>acl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>acl</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>acl</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>int</name></type>
<name>l9p_count_aces</name><parameter_list>(<parameter><decl><type><name>acl_t</name></type> <name>sysacl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>acl_entry_t</name></type> <name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>

<expr_stmt><expr><name>id</name> <operator>=</operator> <name>ACL_FIRST_ENTRY</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>acl_get_entry</name><argument_list>(<argument><expr><name>sysacl</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>id</name> <operator>=</operator> <name>ACL_NEXT_ENTRY</name></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name>n</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name><name>struct</name> <name>l9p_acl</name></name> <modifier>*</modifier></type>
<name>l9p_sysacl_to_acl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>acetype</name></decl></parameter>, <parameter><decl><type><name>acl_t</name></type> <name>sysacl</name></decl></parameter>, <parameter><decl><type><name>econvertfn</name> <modifier>*</modifier></type><name>convert</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_acl</name></name> <modifier>*</modifier></type><name>acl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>acl_entry_t</name></type> <name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>, <decl><type ref="prev"/><name>id</name></decl>;</decl_stmt>

<expr_stmt><expr><name>acl</name> <operator>=</operator> <call><name>l9p_new_acl</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>acetype</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>l9p_count_aces</name><argument_list>(<argument><expr><name>sysacl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>acl</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>id</name> <operator>=</operator> <name>ACL_FIRST_ENTRY</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>acl_get_entry</name><argument_list>(<argument><expr><name>sysacl</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>acl</name> <operator>=</operator> <call><name>l9p_growacl</name><argument_list>(<argument><expr><name>acl</name></expr></argument>, <argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>acl</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call>(<modifier>*</modifier><name>convert</name>)<argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>acl</name><operator>-&gt;</operator><name>acl_aces</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id</name> <operator>=</operator> <name>ACL_NEXT_ENTRY</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>acl</name><operator>-&gt;</operator><name>acl_nace</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>acl</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_POSIX_ACLS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <literal type="number">0</literal></expr></cpp:if>
<function><type><name><name>struct</name> <name>l9p_acl</name></name> <modifier>*</modifier></type>
<name>l9p_posix_acl_to_acl</name><parameter_list>(<parameter><decl><type><name>acl_t</name></type> <name>sysacl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FREEBSD_ACLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>l9p_frombsdnfs4</name><parameter_list>(<parameter><decl><type><name>acl_entry_t</name></type> <name>sysace</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_ace</name></name> <modifier>*</modifier></type><name>ace</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>acl_tag_t</name></type> <name>tag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>acl_entry_type_t</name></type> <name>entry_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>acl_permset_t</name></type> <name>absdperm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>acl_flagset_t</name></type> <name>absdflag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>acl_perm_t</name></type> <name>bsdperm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>acl_flag_t</name></type> <name>bsdflag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>flags</name></decl>, <decl><type ref="prev"/><name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uid_t</name></type> <name>uid</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>aid</name></decl>;</decl_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>acl_get_tag_type</name><argument_list>(<argument><expr><name>sysace</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>acl_get_entry_type_np</name><argument_list>(<argument><expr><name>sysace</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>acl_get_flagset_np</name><argument_list>(<argument><expr><name>sysace</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>absdflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>acl_get_permset</name><argument_list>(<argument><expr><name>sysace</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>absdperm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>uid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>aid</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<switch>switch <condition>(<expr><name>tag</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>ACL_USER_OBJ</name></expr>:</case>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>L9P_ACEF_OWNER</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ACL_GROUP_OBJ</name></expr>:</case>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>L9P_ACEF_GROUP</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ACL_EVERYONE</name></expr>:</case>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>L9P_ACEF_EVERYONE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>ACL_GROUP</name></expr>:</case>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>L9P_ACEF_IDENTIFIER_GROUP</name></expr>;</expr_stmt>

<case>case <expr><name>ACL_USER</name></expr>:</case>
<expr_stmt><expr><name>aid</name> <operator>=</operator> <call><name>acl_get_qualifier</name><argument_list>(<argument><expr><name>sysace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>aid</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ENOMEM</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>uid</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uid_t</name> <operator>*</operator><operator>)</operator><name>aid</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>aid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>aid</name> <operator>=</operator> <operator>&amp;</operator><name>uid</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><operator>(</operator><name>EINVAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>

<switch>switch <condition>(<expr><name>entry_type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ACL_ENTRY_TYPE_ALLOW</name></expr>:</case>
<expr_stmt><expr><name><name>ace</name><operator>-&gt;</operator><name>ace_type</name></name> <operator>=</operator> <name>L9P_ACET_ACCESS_ALLOWED</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ACL_ENTRY_TYPE_DENY</name></expr>:</case>
<expr_stmt><expr><name><name>ace</name><operator>-&gt;</operator><name>ace_type</name></name> <operator>=</operator> <name>L9P_ACET_ACCESS_DENIED</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ACL_ENTRY_TYPE_AUDIT</name></expr>:</case>
<expr_stmt><expr><name><name>ace</name><operator>-&gt;</operator><name>ace_type</name></name> <operator>=</operator> <name>L9P_ACET_SYSTEM_AUDIT</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ACL_ENTRY_TYPE_ALARM</name></expr>:</case>
<expr_stmt><expr><name><name>ace</name><operator>-&gt;</operator><name>ace_type</name></name> <operator>=</operator> <name>L9P_ACET_SYSTEM_ALARM</name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<return>return <expr><operator>(</operator><name>EINVAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>


<expr_stmt><expr><name>bsdflag</name> <operator>=</operator> <operator>*</operator><name>absdflag</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bsdflag</name> <operator>&amp;</operator> <name>ACL_ENTRY_FILE_INHERIT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>L9P_ACEF_FILE_INHERIT_ACE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bsdflag</name> <operator>&amp;</operator> <name>ACL_ENTRY_DIRECTORY_INHERIT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>L9P_ACEF_DIRECTORY_INHERIT_ACE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bsdflag</name> <operator>&amp;</operator> <name>ACL_ENTRY_NO_PROPAGATE_INHERIT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>L9P_ACEF_NO_PROPAGATE_INHERIT_ACE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bsdflag</name> <operator>&amp;</operator> <name>ACL_ENTRY_INHERIT_ONLY</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>L9P_ACEF_INHERIT_ONLY_ACE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bsdflag</name> <operator>&amp;</operator> <name>ACL_ENTRY_SUCCESSFUL_ACCESS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>L9P_ACEF_SUCCESSFUL_ACCESS_ACE_FLAG</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bsdflag</name> <operator>&amp;</operator> <name>ACL_ENTRY_FAILED_ACCESS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>L9P_ACEF_FAILED_ACCESS_ACE_FLAG</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ace</name><operator>-&gt;</operator><name>ace_flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>









<expr_stmt><expr><name>mask</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bsdperm</name> <operator>=</operator> <operator>*</operator><name>absdperm</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bsdperm</name> <operator>&amp;</operator> <name>ACL_READ_DATA</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mask</name> <operator>|=</operator> <name>L9P_ACE_READ_DATA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bsdperm</name> <operator>&amp;</operator> <name>ACL_WRITE_DATA</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mask</name> <operator>|=</operator> <name>L9P_ACE_WRITE_DATA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bsdperm</name> <operator>&amp;</operator> <name>ACL_APPEND_DATA</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mask</name> <operator>|=</operator> <name>L9P_ACE_APPEND_DATA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bsdperm</name> <operator>&amp;</operator> <name>ACL_READ_NAMED_ATTRS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mask</name> <operator>|=</operator> <name>L9P_ACE_READ_NAMED_ATTRS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bsdperm</name> <operator>&amp;</operator> <name>ACL_WRITE_NAMED_ATTRS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mask</name> <operator>|=</operator> <name>L9P_ACE_WRITE_NAMED_ATTRS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bsdperm</name> <operator>&amp;</operator> <name>ACL_EXECUTE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mask</name> <operator>|=</operator> <name>L9P_ACE_EXECUTE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bsdperm</name> <operator>&amp;</operator> <name>ACL_DELETE_CHILD</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mask</name> <operator>|=</operator> <name>L9P_ACE_DELETE_CHILD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bsdperm</name> <operator>&amp;</operator> <name>ACL_READ_ATTRIBUTES</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mask</name> <operator>|=</operator> <name>L9P_ACE_READ_ATTRIBUTES</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bsdperm</name> <operator>&amp;</operator> <name>ACL_WRITE_ATTRIBUTES</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mask</name> <operator>|=</operator> <name>L9P_ACE_WRITE_ATTRIBUTES</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>bsdperm</name> <operator>&amp;</operator> <name>ACL_DELETE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mask</name> <operator>|=</operator> <name>L9P_ACE_DELETE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bsdperm</name> <operator>&amp;</operator> <name>ACL_READ_ACL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mask</name> <operator>|=</operator> <name>L9P_ACE_READ_ACL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bsdperm</name> <operator>&amp;</operator> <name>ACL_WRITE_ACL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mask</name> <operator>|=</operator> <name>L9P_ACE_WRITE_ACL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bsdperm</name> <operator>&amp;</operator> <name>ACL_WRITE_OWNER</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mask</name> <operator>|=</operator> <name>L9P_ACE_WRITE_OWNER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bsdperm</name> <operator>&amp;</operator> <name>ACL_SYNCHRONIZE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>mask</name> <operator>|=</operator> <name>L9P_ACE_SYNCHRONIZE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ace</name><operator>-&gt;</operator><name>ace_mask</name></name> <operator>=</operator> <name>mask</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>aid</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ace</name><operator>-&gt;</operator><name>ace_idsize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>ace</name><operator>-&gt;</operator><name>ace_idsize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uid</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ace</name><operator>-&gt;</operator><name>ace_idbytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>aid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>l9p_acl</name></name> <modifier>*</modifier></type>
<name>l9p_freebsd_nfsv4acl_to_acl</name><parameter_list>(<parameter><decl><type><name>acl_t</name></type> <name>sysacl</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><operator>(</operator><call><name>l9p_sysacl_to_acl</name><argument_list>(<argument><expr><name>L9P_ACLTYPE_NFSv4</name></expr></argument>, <argument><expr><name>sysacl</name></expr></argument>, <argument><expr><name>l9p_frombsdnfs4</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DARWIN_ACLS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <literal type="number">0</literal></expr></cpp:if>
<function><type><name><name>struct</name> <name>l9p_acl</name></name> <modifier>*</modifier></type>
<name>l9p_darwin_nfsv4acl_to_acl</name><parameter_list>(<parameter><decl><type><name>acl_t</name></type> <name>sysacl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
