<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/lib9p/request.c">


























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/uio.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sbuf.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sbuf/sbuf.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib9p.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib9p_impl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fcall.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fid.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hashtable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"linux_errno.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"backend/backend.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"threadpool.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(sizeof(x) / sizeof(x[0]))</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>l9p_dispatch_tversion</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>l9p_dispatch_tattach</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>l9p_dispatch_tclunk</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>l9p_dispatch_tcreate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>l9p_dispatch_topen</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>l9p_dispatch_tread</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>l9p_dispatch_tremove</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>l9p_dispatch_tstat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>l9p_dispatch_twalk</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>l9p_dispatch_twrite</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>l9p_dispatch_twstat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>l9p_dispatch_tstatfs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>l9p_dispatch_tlopen</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>l9p_dispatch_tlcreate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>l9p_dispatch_tsymlink</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>l9p_dispatch_tmknod</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>l9p_dispatch_trename</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>l9p_dispatch_treadlink</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>l9p_dispatch_tgetattr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>l9p_dispatch_tsetattr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>l9p_dispatch_txattrwalk</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>l9p_dispatch_txattrcreate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>l9p_dispatch_treaddir</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>l9p_dispatch_tfsync</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>l9p_dispatch_tlock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>l9p_dispatch_tgetlock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>l9p_dispatch_tlink</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>l9p_dispatch_tmkdir</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>l9p_dispatch_trenameat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>l9p_dispatch_tunlinkat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>;</function_decl>
















<struct>struct <name>l9p_handler</name> <block>{
<decl_stmt><decl><type><name><name>enum</name> <name>l9p_ftype</name></name></type> <name>type</name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>handler</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>bool</name></type> <name>must_run</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>l9p_handler</name></name></type> <name><name>l9p_handlers_no_version</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><name>L9P_TVERSION</name></expr>, <expr><name>l9p_dispatch_tversion</name></expr>, <expr><name>true</name></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>l9p_handler</name></name></type> <name><name>l9p_handlers_base</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><name>L9P_TVERSION</name></expr>, <expr><name>l9p_dispatch_tversion</name></expr>, <expr><name>true</name></expr>}</block></expr>,
<expr><block>{<expr><name>L9P_TATTACH</name></expr>, <expr><name>l9p_dispatch_tattach</name></expr>, <expr><name>true</name></expr>}</block></expr>,
<expr><block>{<expr><name>L9P_TCLUNK</name></expr>, <expr><name>l9p_dispatch_tclunk</name></expr>, <expr><name>true</name></expr>}</block></expr>,
<expr><block>{<expr><name>L9P_TFLUSH</name></expr>, <expr><name>l9p_threadpool_tflush</name></expr>, <expr><name>true</name></expr>}</block></expr>,
<expr><block>{<expr><name>L9P_TCREATE</name></expr>, <expr><name>l9p_dispatch_tcreate</name></expr>, <expr><name>false</name></expr>}</block></expr>,
<expr><block>{<expr><name>L9P_TOPEN</name></expr>, <expr><name>l9p_dispatch_topen</name></expr>, <expr><name>false</name></expr>}</block></expr>,
<expr><block>{<expr><name>L9P_TREAD</name></expr>, <expr><name>l9p_dispatch_tread</name></expr>, <expr><name>false</name></expr>}</block></expr>,
<expr><block>{<expr><name>L9P_TWRITE</name></expr>, <expr><name>l9p_dispatch_twrite</name></expr>, <expr><name>false</name></expr>}</block></expr>,
<expr><block>{<expr><name>L9P_TREMOVE</name></expr>, <expr><name>l9p_dispatch_tremove</name></expr>, <expr><name>true</name></expr>}</block></expr>,
<expr><block>{<expr><name>L9P_TSTAT</name></expr>, <expr><name>l9p_dispatch_tstat</name></expr>, <expr><name>false</name></expr>}</block></expr>,
<expr><block>{<expr><name>L9P_TWALK</name></expr>, <expr><name>l9p_dispatch_twalk</name></expr>, <expr><name>false</name></expr>}</block></expr>,
<expr><block>{<expr><name>L9P_TWSTAT</name></expr>, <expr><name>l9p_dispatch_twstat</name></expr>, <expr><name>false</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>l9p_handler</name></name></type> <name><name>l9p_handlers_dotu</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><name>L9P_TVERSION</name></expr>, <expr><name>l9p_dispatch_tversion</name></expr>, <expr><name>true</name></expr>}</block></expr>,
<expr><block>{<expr><name>L9P_TATTACH</name></expr>, <expr><name>l9p_dispatch_tattach</name></expr>, <expr><name>true</name></expr>}</block></expr>,
<expr><block>{<expr><name>L9P_TCLUNK</name></expr>, <expr><name>l9p_dispatch_tclunk</name></expr>, <expr><name>true</name></expr>}</block></expr>,
<expr><block>{<expr><name>L9P_TFLUSH</name></expr>, <expr><name>l9p_threadpool_tflush</name></expr>, <expr><name>true</name></expr>}</block></expr>,
<expr><block>{<expr><name>L9P_TCREATE</name></expr>, <expr><name>l9p_dispatch_tcreate</name></expr>, <expr><name>false</name></expr>}</block></expr>,
<expr><block>{<expr><name>L9P_TOPEN</name></expr>, <expr><name>l9p_dispatch_topen</name></expr>, <expr><name>false</name></expr>}</block></expr>,
<expr><block>{<expr><name>L9P_TREAD</name></expr>, <expr><name>l9p_dispatch_tread</name></expr>, <expr><name>false</name></expr>}</block></expr>,
<expr><block>{<expr><name>L9P_TWRITE</name></expr>, <expr><name>l9p_dispatch_twrite</name></expr>, <expr><name>false</name></expr>}</block></expr>,
<expr><block>{<expr><name>L9P_TREMOVE</name></expr>, <expr><name>l9p_dispatch_tremove</name></expr>, <expr><name>true</name></expr>}</block></expr>,
<expr><block>{<expr><name>L9P_TSTAT</name></expr>, <expr><name>l9p_dispatch_tstat</name></expr>, <expr><name>false</name></expr>}</block></expr>,
<expr><block>{<expr><name>L9P_TWALK</name></expr>, <expr><name>l9p_dispatch_twalk</name></expr>, <expr><name>false</name></expr>}</block></expr>,
<expr><block>{<expr><name>L9P_TWSTAT</name></expr>, <expr><name>l9p_dispatch_twstat</name></expr>, <expr><name>false</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>l9p_handler</name></name></type> <name><name>l9p_handlers_dotL</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><name>L9P_TVERSION</name></expr>, <expr><name>l9p_dispatch_tversion</name></expr>, <expr><name>true</name></expr>}</block></expr>,
<expr><block>{<expr><name>L9P_TATTACH</name></expr>, <expr><name>l9p_dispatch_tattach</name></expr>, <expr><name>true</name></expr>}</block></expr>,
<expr><block>{<expr><name>L9P_TCLUNK</name></expr>, <expr><name>l9p_dispatch_tclunk</name></expr>, <expr><name>true</name></expr>}</block></expr>,
<expr><block>{<expr><name>L9P_TFLUSH</name></expr>, <expr><name>l9p_threadpool_tflush</name></expr>, <expr><name>true</name></expr>}</block></expr>,
<expr><block>{<expr><name>L9P_TCREATE</name></expr>, <expr><name>l9p_dispatch_tcreate</name></expr>, <expr><name>false</name></expr>}</block></expr>,
<expr><block>{<expr><name>L9P_TOPEN</name></expr>, <expr><name>l9p_dispatch_topen</name></expr>, <expr><name>false</name></expr>}</block></expr>,
<expr><block>{<expr><name>L9P_TREAD</name></expr>, <expr><name>l9p_dispatch_tread</name></expr>, <expr><name>false</name></expr>}</block></expr>,
<expr><block>{<expr><name>L9P_TWRITE</name></expr>, <expr><name>l9p_dispatch_twrite</name></expr>, <expr><name>false</name></expr>}</block></expr>,
<expr><block>{<expr><name>L9P_TREMOVE</name></expr>, <expr><name>l9p_dispatch_tremove</name></expr>, <expr><name>true</name></expr>}</block></expr>,
<expr><block>{<expr><name>L9P_TSTAT</name></expr>, <expr><name>l9p_dispatch_tstat</name></expr>, <expr><name>false</name></expr>}</block></expr>,
<expr><block>{<expr><name>L9P_TWALK</name></expr>, <expr><name>l9p_dispatch_twalk</name></expr>, <expr><name>false</name></expr>}</block></expr>,
<expr><block>{<expr><name>L9P_TWSTAT</name></expr>, <expr><name>l9p_dispatch_twstat</name></expr>, <expr><name>false</name></expr>}</block></expr>,
<expr><block>{<expr><name>L9P_TSTATFS</name></expr>, <expr><name>l9p_dispatch_tstatfs</name></expr>, <expr><name>false</name></expr>}</block></expr>,
<expr><block>{<expr><name>L9P_TLOPEN</name></expr>, <expr><name>l9p_dispatch_tlopen</name></expr>, <expr><name>false</name></expr>}</block></expr>,
<expr><block>{<expr><name>L9P_TLCREATE</name></expr>, <expr><name>l9p_dispatch_tlcreate</name></expr>, <expr><name>false</name></expr>}</block></expr>,
<expr><block>{<expr><name>L9P_TSYMLINK</name></expr>, <expr><name>l9p_dispatch_tsymlink</name></expr>, <expr><name>false</name></expr>}</block></expr>,
<expr><block>{<expr><name>L9P_TMKNOD</name></expr>, <expr><name>l9p_dispatch_tmknod</name></expr>, <expr><name>false</name></expr>}</block></expr>,
<expr><block>{<expr><name>L9P_TRENAME</name></expr>, <expr><name>l9p_dispatch_trename</name></expr>, <expr><name>false</name></expr>}</block></expr>,
<expr><block>{<expr><name>L9P_TREADLINK</name></expr>, <expr><name>l9p_dispatch_treadlink</name></expr>, <expr><name>false</name></expr>}</block></expr>,
<expr><block>{<expr><name>L9P_TGETATTR</name></expr>, <expr><name>l9p_dispatch_tgetattr</name></expr>, <expr><name>false</name></expr>}</block></expr>,
<expr><block>{<expr><name>L9P_TSETATTR</name></expr>, <expr><name>l9p_dispatch_tsetattr</name></expr>, <expr><name>false</name></expr>}</block></expr>,
<expr><block>{<expr><name>L9P_TXATTRWALK</name></expr>, <expr><name>l9p_dispatch_txattrwalk</name></expr>, <expr><name>false</name></expr>}</block></expr>,
<expr><block>{<expr><name>L9P_TXATTRCREATE</name></expr>, <expr><name>l9p_dispatch_txattrcreate</name></expr>, <expr><name>false</name></expr>}</block></expr>,
<expr><block>{<expr><name>L9P_TREADDIR</name></expr>, <expr><name>l9p_dispatch_treaddir</name></expr>, <expr><name>false</name></expr>}</block></expr>,
<expr><block>{<expr><name>L9P_TFSYNC</name></expr>, <expr><name>l9p_dispatch_tfsync</name></expr>, <expr><name>false</name></expr>}</block></expr>,
<expr><block>{<expr><name>L9P_TLOCK</name></expr>, <expr><name>l9p_dispatch_tlock</name></expr>, <expr><name>true</name></expr>}</block></expr>,
<expr><block>{<expr><name>L9P_TGETLOCK</name></expr>, <expr><name>l9p_dispatch_tgetlock</name></expr>, <expr><name>true</name></expr>}</block></expr>,
<expr><block>{<expr><name>L9P_TLINK</name></expr>, <expr><name>l9p_dispatch_tlink</name></expr>, <expr><name>false</name></expr>}</block></expr>,
<expr><block>{<expr><name>L9P_TMKDIR</name></expr>, <expr><name>l9p_dispatch_tmkdir</name></expr>, <expr><name>false</name></expr>}</block></expr>,
<expr><block>{<expr><name>L9P_TRENAMEAT</name></expr>, <expr><name>l9p_dispatch_trenameat</name></expr>, <expr><name>false</name></expr>}</block></expr>,
<expr><block>{<expr><name>L9P_TUNLINKAT</name></expr>, <expr><name>l9p_dispatch_tunlinkat</name></expr>, <expr><name>false</name></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>






<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>l9p_handler</name></name> <modifier>*</modifier></type><name>handlers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n_handlers</name></decl>;</decl_stmt>
}</block> <decl><name><name>l9p_versions</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"&lt;none&gt;"</literal></expr>, <expr><name>l9p_handlers_no_version</name></expr>, <macro><name>N</name><argument_list>(<argument>l9p_handlers_no_version</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"9P2000"</literal></expr>, <expr><name>l9p_handlers_base</name></expr>, <macro><name>N</name><argument_list>(<argument>l9p_handlers_base</argument>)</argument_list></macro> }</block></expr>,
<expr><block>{ <expr><literal type="string">"9P2000.u"</literal></expr>, <expr><name>l9p_handlers_dotu</name></expr>, <expr><call><name>N</name><argument_list>(<argument><expr><name>l9p_handlers_dotu</name></expr></argument>)</argument_list></call></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="string">"9P2000.L"</literal></expr>, <expr><name>l9p_handlers_dotL</name></expr>, <expr><call><name>N</name><argument_list>(<argument><expr><name>l9p_handlers_dotL</name></expr></argument>)</argument_list></call></expr>, }</block></expr>,
}</block></expr></init></decl>;</struct>





<function><type><name>int</name></type>
<name>l9p_dispatch_request</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_connection</name></name> <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>L9P_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>sbuf</name></name> <modifier>*</modifier></type><name>sb</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>l9p_handler</name></name> <modifier>*</modifier></type><name>handlers</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>hp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>flush_requested</name></decl>;</decl_stmt>

<expr_stmt><expr><name>conn</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_conn</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>flush_requested</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_flushstate</name></name> <operator>==</operator> <name>L9P_FLUSH_REQUESTED_PRE_START</name></expr>;</expr_stmt>

<expr_stmt><expr><name>handlers</name> <operator>=</operator> <name><name>l9p_versions</name><index>[<expr><name><name>conn</name><operator>-&gt;</operator><name>lc_version</name></name></expr>]</index></name><operator>.</operator><name>handlers</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>l9p_versions</name><index>[<expr><name><name>conn</name><operator>-&gt;</operator><name>lc_version</name></name></expr>]</index></name><operator>.</operator><name>n_handlers</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>hp</name> <operator>=</operator> <name>handlers</name></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>hp</name><operator>++</operator></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>hdr</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name><name>hp</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>found</name>;</goto></block_content></block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><name>hp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<label><name>found</name>:</label>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>L9P_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>sb</name> <operator>=</operator> <call><name>sbuf_new_auto</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flush_requested</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sbuf_cat</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"FLUSH requested pre-dispatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>hp</name><operator>-&gt;</operator><name>must_run</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sbuf_cat</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">", but must run"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>sbuf_cat</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">": "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>l9p_describe_fcall</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>lr_req</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>lc_version</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sbuf_finish</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>L9P_LOG</name><argument_list>(<argument><expr><name>L9P_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>sbuf_data</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sbuf_delete</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>hp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>flush_requested</name> <operator>||</operator> <name><name>hp</name><operator>-&gt;</operator><name>must_run</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><call><name><name>hp</name><operator>-&gt;</operator><name>handler</name></name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>EINTR</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>L9P_LOG</name><argument_list>(<argument><expr><name>L9P_WARNING</name></expr></argument>, <argument><expr><literal type="string">"unknown request of type %d"</literal></expr></argument>,
<argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>hdr</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ENOSYS</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>e29p</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>errnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name> <specifier>const</specifier></type> <name><name>table</name><index>[]</index></name> <init>= <expr><block>{
<expr><index>[<expr><name>ENOTEMPTY</name></expr>]</index> <operator>=</operator> <name>EPERM</name></expr>,
<expr><index>[<expr><name>EDQUOT</name></expr>]</index> <operator>=</operator> <name>EPERM</name></expr>,
<expr><index>[<expr><name>ENOSYS</name></expr>]</index> <operator>=</operator> <name>EPERM</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name>errnum</name> <operator>&lt;</operator> <call><name>N</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>table</name><index>[<expr><name>errnum</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name><name>table</name><index>[<expr><name>errnum</name></expr>]</index></name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>errnum</name> <operator>&lt;=</operator> <name>ERANGE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>errnum</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>EIO</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>e2linux</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>errnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name> <specifier>const</specifier></type> <name><name>table</name><index>[]</index></name> <init>= <expr><block>{
<expr><index>[<expr><name>EDEADLK</name></expr>]</index> <operator>=</operator> <name>LINUX_EDEADLK</name></expr>,
<expr><index>[<expr><name>EAGAIN</name></expr>]</index> <operator>=</operator> <name>LINUX_EAGAIN</name></expr>,
<expr><index>[<expr><name>EINPROGRESS</name></expr>]</index> <operator>=</operator> <name>LINUX_EINPROGRESS</name></expr>,
<expr><index>[<expr><name>EALREADY</name></expr>]</index> <operator>=</operator> <name>LINUX_EALREADY</name></expr>,
<expr><index>[<expr><name>ENOTSOCK</name></expr>]</index> <operator>=</operator> <name>LINUX_ENOTSOCK</name></expr>,
<expr><index>[<expr><name>EDESTADDRREQ</name></expr>]</index> <operator>=</operator> <name>LINUX_EDESTADDRREQ</name></expr>,
<expr><index>[<expr><name>EMSGSIZE</name></expr>]</index> <operator>=</operator> <name>LINUX_EMSGSIZE</name></expr>,
<expr><index>[<expr><name>EPROTOTYPE</name></expr>]</index> <operator>=</operator> <name>LINUX_EPROTOTYPE</name></expr>,
<expr><index>[<expr><name>ENOPROTOOPT</name></expr>]</index> <operator>=</operator> <name>LINUX_ENOPROTOOPT</name></expr>,
<expr><index>[<expr><name>EPROTONOSUPPORT</name></expr>]</index> <operator>=</operator> <name>LINUX_EPROTONOSUPPORT</name></expr>,
<expr><index>[<expr><name>ESOCKTNOSUPPORT</name></expr>]</index> <operator>=</operator> <name>LINUX_ESOCKTNOSUPPORT</name></expr>,
<expr><index>[<expr><name>EOPNOTSUPP</name></expr>]</index> <operator>=</operator> <name>LINUX_EOPNOTSUPP</name></expr>,
<expr><index>[<expr><name>EPFNOSUPPORT</name></expr>]</index> <operator>=</operator> <name>LINUX_EPFNOSUPPORT</name></expr>,
<expr><index>[<expr><name>EAFNOSUPPORT</name></expr>]</index> <operator>=</operator> <name>LINUX_EAFNOSUPPORT</name></expr>,
<expr><index>[<expr><name>EADDRINUSE</name></expr>]</index> <operator>=</operator> <name>LINUX_EADDRINUSE</name></expr>,
<expr><index>[<expr><name>EADDRNOTAVAIL</name></expr>]</index> <operator>=</operator> <name>LINUX_EADDRNOTAVAIL</name></expr>,
<expr><index>[<expr><name>ENETDOWN</name></expr>]</index> <operator>=</operator> <name>LINUX_ENETDOWN</name></expr>,
<expr><index>[<expr><name>ENETUNREACH</name></expr>]</index> <operator>=</operator> <name>LINUX_ENETUNREACH</name></expr>,
<expr><index>[<expr><name>ENETRESET</name></expr>]</index> <operator>=</operator> <name>LINUX_ENETRESET</name></expr>,
<expr><index>[<expr><name>ECONNABORTED</name></expr>]</index> <operator>=</operator> <name>LINUX_ECONNABORTED</name></expr>,
<expr><index>[<expr><name>ECONNRESET</name></expr>]</index> <operator>=</operator> <name>LINUX_ECONNRESET</name></expr>,
<expr><index>[<expr><name>ENOBUFS</name></expr>]</index> <operator>=</operator> <name>LINUX_ENOBUFS</name></expr>,
<expr><index>[<expr><name>EISCONN</name></expr>]</index> <operator>=</operator> <name>LINUX_EISCONN</name></expr>,
<expr><index>[<expr><name>ENOTCONN</name></expr>]</index> <operator>=</operator> <name>LINUX_ENOTCONN</name></expr>,
<expr><index>[<expr><name>ESHUTDOWN</name></expr>]</index> <operator>=</operator> <name>LINUX_ESHUTDOWN</name></expr>,
<expr><index>[<expr><name>ETOOMANYREFS</name></expr>]</index> <operator>=</operator> <name>LINUX_ETOOMANYREFS</name></expr>,
<expr><index>[<expr><name>ETIMEDOUT</name></expr>]</index> <operator>=</operator> <name>LINUX_ETIMEDOUT</name></expr>,
<expr><index>[<expr><name>ECONNREFUSED</name></expr>]</index> <operator>=</operator> <name>LINUX_ECONNREFUSED</name></expr>,
<expr><index>[<expr><name>ELOOP</name></expr>]</index> <operator>=</operator> <name>LINUX_ELOOP</name></expr>,
<expr><index>[<expr><name>ENAMETOOLONG</name></expr>]</index> <operator>=</operator> <name>LINUX_ENAMETOOLONG</name></expr>,
<expr><index>[<expr><name>EHOSTDOWN</name></expr>]</index> <operator>=</operator> <name>LINUX_EHOSTDOWN</name></expr>,
<expr><index>[<expr><name>EHOSTUNREACH</name></expr>]</index> <operator>=</operator> <name>LINUX_EHOSTUNREACH</name></expr>,
<expr><index>[<expr><name>ENOTEMPTY</name></expr>]</index> <operator>=</operator> <name>LINUX_ENOTEMPTY</name></expr>,
<expr><index>[<expr><name>EPROCLIM</name></expr>]</index> <operator>=</operator> <name>LINUX_EAGAIN</name></expr>,
<expr><index>[<expr><name>EUSERS</name></expr>]</index> <operator>=</operator> <name>LINUX_EUSERS</name></expr>,
<expr><index>[<expr><name>EDQUOT</name></expr>]</index> <operator>=</operator> <name>LINUX_EDQUOT</name></expr>,
<expr><index>[<expr><name>ESTALE</name></expr>]</index> <operator>=</operator> <name>LINUX_ESTALE</name></expr>,
<expr><index>[<expr><name>EREMOTE</name></expr>]</index> <operator>=</operator> <name>LINUX_EREMOTE</name></expr>,





<expr><index>[<expr><name>ENOLCK</name></expr>]</index> <operator>=</operator> <name>LINUX_ENOLCK</name></expr>,
<expr><index>[<expr><name>ENOSYS</name></expr>]</index> <operator>=</operator> <name>LINUX_ENOSYS</name></expr>,



<expr><index>[<expr><name>EIDRM</name></expr>]</index> <operator>=</operator> <name>LINUX_EIDRM</name></expr>,
<expr><index>[<expr><name>ENOMSG</name></expr>]</index> <operator>=</operator> <name>LINUX_ENOMSG</name></expr>,
<expr><index>[<expr><name>EOVERFLOW</name></expr>]</index> <operator>=</operator> <name>LINUX_EOVERFLOW</name></expr>,
<expr><index>[<expr><name>ECANCELED</name></expr>]</index> <operator>=</operator> <name>LINUX_ECANCELED</name></expr>,
<expr><index>[<expr><name>EILSEQ</name></expr>]</index> <operator>=</operator> <name>LINUX_EILSEQ</name></expr>,

<expr><index>[<expr><name>EBADMSG</name></expr>]</index> <operator>=</operator> <name>LINUX_EBADMSG</name></expr>,
<expr><index>[<expr><name>EMULTIHOP</name></expr>]</index> <operator>=</operator> <name>LINUX_EMULTIHOP</name></expr>,
<expr><index>[<expr><name>ENOLINK</name></expr>]</index> <operator>=</operator> <name>LINUX_ENOLINK</name></expr>,
<expr><index>[<expr><name>EPROTO</name></expr>]</index> <operator>=</operator> <name>LINUX_EPROTO</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ECAPMODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><index>[<expr><name>ECAPMODE</name></expr>]</index> <operator>=</operator> <name>EPERM</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENOTRECOVERABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><index>[<expr><name>ENOTRECOVERABLE</name></expr>]</index> <operator>=</operator> <name>LINUX_ENOTRECOVERABLE</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EOWNERDEAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><index>[<expr><name>EOWNERDEAD</name></expr>]</index> <operator>=</operator> <name>LINUX_EOWNERDEAD</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>








<if_stmt><if>if <condition>(<expr><name>errnum</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><name>errnum</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name>errnum</name> <operator>&lt;</operator> <call><name>N</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>table</name><index>[<expr><name>errnum</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name><name>table</name><index>[<expr><name>errnum</name></expr>]</index></name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>errnum</name> <operator>&lt;=</operator> <name>ERANGE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>errnum</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>L9P_LOG</name><argument_list>(<argument><expr><name>L9P_WARNING</name></expr></argument>, <argument><expr><literal type="string">"cannot map errno %d to anything reasonable"</literal></expr></argument>,
<argument><expr><name>errnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>LINUX_ENOTRECOVERABLE</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><name>void</name></type>
<name>l9p_respond</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>drop</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>rmtag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_connection</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>lr_conn</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>iosize</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>L9P_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>sbuf</name></name> <modifier>*</modifier></type><name>sb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ftype</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>lr_resp</name><operator>.</operator><name>hdr</name><operator>.</operator><name>tag</name></name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>hdr</name><operator>.</operator><name>tag</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_error</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>lr_resp</name><operator>.</operator><name>hdr</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>hdr</name><operator>.</operator><name>type</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>lc_version</name></name> <operator>==</operator> <name>L9P_2000L</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>lr_resp</name><operator>.</operator><name>hdr</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>L9P_RLERROR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>lr_resp</name><operator>.</operator><name>error</name><operator>.</operator><name>errnum</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>e2linux</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>lr_resp</name><operator>.</operator><name>hdr</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>L9P_RERROR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>lr_resp</name><operator>.</operator><name>error</name><operator>.</operator><name>ename</name></name> <operator>=</operator> <call><name>strerror</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>lr_resp</name><operator>.</operator><name>error</name><operator>.</operator><name>errnum</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>e29p</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>L9P_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>sb</name> <operator>=</operator> <call><name>sbuf_new_auto</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_describe_fcall</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>lr_resp</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>lc_version</name></name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sbuf_finish</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>lr_flushstate</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>L9P_FLUSH_NONE</name></expr>:</case>
<expr_stmt><expr><name>ftype</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>L9P_FLUSH_REQUESTED_PRE_START</name></expr>:</case>
<expr_stmt><expr><name>ftype</name> <operator>=</operator> <literal type="string">"FLUSH requested pre-dispatch: "</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>L9P_FLUSH_REQUESTED_POST_START</name></expr>:</case>
<expr_stmt><expr><name>ftype</name> <operator>=</operator> <literal type="string">"FLUSH requested while running: "</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>L9P_FLUSH_TOOLATE</name></expr>:</case>
<expr_stmt><expr><name>ftype</name> <operator>=</operator> <literal type="string">"FLUSH requested too late: "</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>L9P_LOG</name><argument_list>(<argument><expr><name>L9P_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s%s%s"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name>drop</name></expr> ?</condition><then> <expr><literal type="string">"DROP: "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>ftype</name></expr></argument>, <argument><expr><call><name>sbuf_data</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sbuf_delete</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>error</name> <operator>=</operator> <ternary><condition><expr><name>drop</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>:
<expr><call><name>l9p_pufcall</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>lr_resp_msg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>lr_resp</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>lc_version</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rmtag</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>ht_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>lc_requests</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>hdr</name><operator>.</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>L9P_LOG</name><argument_list>(<argument><expr><name>L9P_ERROR</name></expr></argument>, <argument><expr><literal type="string">"cannot pack response"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>drop</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>drop</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name><name>conn</name><operator>-&gt;</operator><name>lc_lt</name><operator>.</operator><name>lt_drop_response</name></name><argument_list>(<argument><expr><name>req</name></expr></argument>,
<argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_resp_msg</name><operator>.</operator><name>lm_iov</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_resp_msg</name><operator>.</operator><name>lm_niov</name></name></expr></argument>,
<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>lc_lt</name><operator>.</operator><name>lt_aux</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>iosize</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_resp_msg</name><operator>.</operator><name>lm_size</name></name></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>lr_resp</name><operator>.</operator><name>hdr</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>L9P_RREAD</name> <operator>||</operator>
<name><name>req</name><operator>-&gt;</operator><name>lr_resp</name><operator>.</operator><name>hdr</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>L9P_RREADDIR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>iosize</name> <operator>+=</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_resp</name><operator>.</operator><name>io</name><operator>.</operator><name>count</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>conn</name><operator>-&gt;</operator><name>lc_lt</name><operator>.</operator><name>lt_send_response</name></name><argument_list>(<argument><expr><name>req</name></expr></argument>,
<argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_resp_msg</name><operator>.</operator><name>lm_iov</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_resp_msg</name><operator>.</operator><name>lm_niov</name></name></expr></argument>,
<argument><expr><name>iosize</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>lc_lt</name><operator>.</operator><name>lt_aux</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>l9p_freefcall</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>lr_req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_freefcall</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>lr_resp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>













<function><type><name>void</name></type>
<name>l9p_init_msg</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_message</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>l9p_pack_mode</name></name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>lm_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>lm_mode</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>lm_cursor_iov</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>lm_cursor_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>lm_niov</name></name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_data_niov</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>lm_iov</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_data_iov</name></name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>iovec</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_data_niov</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<enum>enum <name>fid_lookup_flags</name> <block>{
<decl><name>F_REQUIRE_OPEN</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>,
<decl><name>F_REQUIRE_DIR</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>,
<decl><name>F_REQUIRE_XATTR</name> <init>= <expr><literal type="number">0x04</literal></expr></init></decl>,
<decl><name>F_REQUIRE_AUTH</name> <init>= <expr><literal type="number">0x08</literal></expr></init></decl>,
<decl><name>F_FORBID_OPEN</name> <init>= <expr><literal type="number">0x10</literal></expr></init></decl>,
<decl><name>F_FORBID_DIR</name> <init>= <expr><literal type="number">0x20</literal></expr></init></decl>,
<decl><name>F_FORBID_XATTR</name> <init>= <expr><literal type="number">0x40</literal></expr></init></decl>,
<decl><name>F_ALLOW_AUTH</name> <init>= <expr><literal type="number">0x80</literal></expr></init></decl>,
}</block>;</enum>














<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>fid_lookup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_connection</name></name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>fid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>l9p_fid</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>afile</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_fid</name></name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>

<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>ht_find</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>conn</name><operator>-&gt;</operator><name>lc_files</name></name></expr></argument>, <argument><expr><name>fid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>file</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>err</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>











<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>l9p_fid_isvalid</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>F_REQUIRE_OPEN</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>l9p_fid_isopen</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>EINVAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>F_FORBID_OPEN</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>l9p_fid_isopen</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>EINVAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>F_REQUIRE_DIR</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>l9p_fid_isdir</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ENOTDIR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>F_FORBID_DIR</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>l9p_fid_isdir</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>EISDIR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>F_REQUIRE_XATTR</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>l9p_fid_isxattr</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>EINVAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>F_FORBID_XATTR</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>l9p_fid_isxattr</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>EINVAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>l9p_fid_isauth</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>F_REQUIRE_AUTH</name> <operator>|</operator> <name>F_ALLOW_AUTH</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>EINVAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>F_REQUIRE_AUTH</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>EINVAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>afile</name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>












<function><type><name>int</name></type>
<name>l9p_pack_stat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_message</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>l9p_stat</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_connection</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>lr_conn</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>size</name> <init>= <expr><call><name>l9p_sizeof_stat</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>lc_version</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>lm_mode</name></name> <operator>==</operator> <name>L9P_PACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>lr_resp</name><operator>.</operator><name>io</name><operator>.</operator><name>count</name></name> <operator>+</operator> <name>size</name> <operator>&gt;</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>io</name><operator>.</operator><name>count</name></name> <operator>||</operator>
<call><name>l9p_pustat</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>lc_version</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>lr_resp</name><operator>.</operator><name>io</name><operator>.</operator><name>count</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>l9p_freestat</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>l9p_dispatch_tversion</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_connection</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>lr_conn</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_server</name></name> <modifier>*</modifier></type><name>server</name> <init>= <expr><name><name>conn</name><operator>-&gt;</operator><name>lc_server</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>l9p_version</name></name></type> <name>remote_version</name> <init>= <expr><name>L9P_INVALID_VERSION</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>remote_version_name</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>N</name><argument_list>(<argument><expr><name>l9p_versions</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>version</name><operator>.</operator><name>version</name></name></expr></argument>,
<argument><expr><name><name>l9p_versions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>remote_version</name> <operator>=</operator> <operator>(</operator>enum <name>l9p_version</name><operator>)</operator><name>i</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>remote_version</name> <operator>==</operator> <name>L9P_INVALID_VERSION</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>L9P_LOG</name><argument_list>(<argument><expr><name>L9P_ERROR</name></expr></argument>, <argument><expr><literal type="string">"unsupported remote version: %s"</literal></expr></argument>,
<argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>version</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ENOSYS</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>remote_version_name</name> <operator>=</operator> <name><name>l9p_versions</name><index>[<expr><name>remote_version</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>L9P_LOG</name><argument_list>(<argument><expr><name>L9P_INFO</name></expr></argument>, <argument><expr><literal type="string">"remote version: %s"</literal></expr></argument>, <argument><expr><name>remote_version_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>L9P_LOG</name><argument_list>(<argument><expr><name>L9P_INFO</name></expr></argument>, <argument><expr><literal type="string">"local version: %s"</literal></expr></argument>,
<argument><expr><name><name>l9p_versions</name><index>[<expr><name><name>server</name><operator>-&gt;</operator><name>ls_max_version</name></name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>lc_version</name></name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>remote_version</name></expr></argument>, <argument><expr><name><name>server</name><operator>-&gt;</operator><name>ls_max_version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>lc_msize</name></name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>version</name><operator>.</operator><name>msize</name></name></expr></argument>, <argument><expr><name><name>conn</name><operator>-&gt;</operator><name>lc_msize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>lc_max_io_size</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>lc_msize</name></name> <operator>-</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>lr_resp</name><operator>.</operator><name>version</name><operator>.</operator><name>version</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>remote_version_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>lr_resp</name><operator>.</operator><name>version</name><operator>.</operator><name>msize</name></name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>lc_msize</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>l9p_dispatch_tattach</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_connection</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>lr_conn</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_backend</name></name> <modifier>*</modifier></type><name>be</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_fid</name></name> <modifier>*</modifier></type><name>fid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>








<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>tattach</name><operator>.</operator><name>afid</name></name> <operator>!=</operator> <name>L9P_NOFID</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fid_lookup</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>tattach</name><operator>.</operator><name>afid</name></name></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>,
<argument><expr><name>F_REQUIRE_AUTH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>lr_fid2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>lr_fid2</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>fid</name> <operator>=</operator> <call><name>l9p_connection_alloc_fid</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fid</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>EINVAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>be</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>lc_server</name><operator>-&gt;</operator><name>ls_backend</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>lr_fid</name></name> <operator>=</operator> <name>fid</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>lc_version</name></name> <operator>==</operator> <name>L9P_2000</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>tattach</name><operator>.</operator><name>n_uname</name></name> <operator>=</operator> <name>L9P_NONUNAME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name><name>be</name><operator>-&gt;</operator><name>attach</name></name><argument_list>(<argument><expr><name><name>be</name><operator>-&gt;</operator><name>softc</name></name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name>error</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>l9p_fid_setvalid</name><argument_list>(<argument><expr><name>fid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>lr_resp</name><operator>.</operator><name>rattach</name><operator>.</operator><name>qid</name><operator>.</operator><name>type</name></name> <operator>&amp;</operator> <name>L9P_QTDIR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>l9p_fid_setdir</name><argument_list>(<argument><expr><name>fid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>l9p_connection_remove_fid</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>fid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>l9p_dispatch_tclunk</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_connection</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>lr_conn</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_backend</name></name> <modifier>*</modifier></type><name>be</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_fid</name></name> <modifier>*</modifier></type><name>fid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>


<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fid_lookup</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>, <argument><expr><name>ENOENT</name></expr></argument>,
<argument><expr><name>F_ALLOW_AUTH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>be</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>lc_server</name><operator>-&gt;</operator><name>ls_backend</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_fid_unsetvalid</name><argument_list>(<argument><expr><name>fid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>










<if_stmt><if>if <condition>(<expr><call><name>l9p_fid_isxattr</name><argument_list>(<argument><expr><name>fid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name><name>be</name><operator>-&gt;</operator><name>xattrclunk</name></name><argument_list>(<argument><expr><name><name>be</name><operator>-&gt;</operator><name>softc</name></name></expr></argument>, <argument><expr><name>fid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name><name>be</name><operator>-&gt;</operator><name>clunk</name></name><argument_list>(<argument><expr><name><name>be</name><operator>-&gt;</operator><name>softc</name></name></expr></argument>, <argument><expr><name>fid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><call><name>l9p_connection_remove_fid</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>fid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>l9p_dispatch_tcreate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_connection</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>lr_conn</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_backend</name></name> <modifier>*</modifier></type><name>be</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>dmperm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>


<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fid_lookup</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>,
<argument><expr><name>F_REQUIRE_DIR</name> <operator>|</operator> <name>F_FORBID_OPEN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>lr_fid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>be</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>lc_server</name><operator>-&gt;</operator><name>ls_backend</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dmperm</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>tcreate</name><operator>.</operator><name>perm</name></name></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MKDIR_OR_SIMILAR</name></cpp:macro> <cpp:value>(L9P_DMDIR | L9P_DMSYMLINK | L9P_DMNAMEDPIPE | L9P_DMSOCKET | L9P_DMDEVICE)</cpp:value></cpp:define>










<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name><name>be</name><operator>-&gt;</operator><name>create</name></name><argument_list>(<argument><expr><name><name>be</name><operator>-&gt;</operator><name>softc</name></name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>dmperm</name> <operator>&amp;</operator> <name>MKDIR_OR_SIMILAR</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>l9p_fid_unsetdir</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_fid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_fid_setopen</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_fid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>l9p_dispatch_topen</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_connection</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>lr_conn</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_backend</name></name> <modifier>*</modifier></type><name>be</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fid_lookup</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>, <argument><expr><name>ENOENT</name></expr></argument>,
<argument><expr><name>F_FORBID_OPEN</name> <operator>|</operator> <name>F_FORBID_XATTR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>lr_fid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>be</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>lc_server</name><operator>-&gt;</operator><name>ls_backend</name></name></expr>;</expr_stmt>





<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name><name>be</name><operator>-&gt;</operator><name>open</name></name><argument_list>(<argument><expr><name><name>be</name><operator>-&gt;</operator><name>softc</name></name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>l9p_fid_setopen</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_fid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>l9p_dispatch_tread</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_connection</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>lr_conn</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_backend</name></name> <modifier>*</modifier></type><name>be</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_fid</name></name> <modifier>*</modifier></type><name>fid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>


<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fid_lookup</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>lr_fid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>







<expr_stmt><expr><call><name>l9p_seek_iov</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_resp_msg</name><operator>.</operator><name>lm_iov</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_resp_msg</name><operator>.</operator><name>lm_niov</name></name></expr></argument>,
<argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_data_iov</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>lr_data_niov</name></name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>










<expr_stmt><expr><name>be</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>lc_server</name><operator>-&gt;</operator><name>ls_backend</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>fid</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_fid</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>l9p_fid_isxattr</name><argument_list>(<argument><expr><name>fid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name><name>be</name><operator>-&gt;</operator><name>xattrread</name></name><argument_list>(<argument><expr><name><name>be</name><operator>-&gt;</operator><name>softc</name></name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>l9p_fid_isopen</name><argument_list>(<argument><expr><name>fid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name><name>be</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name><name>be</name><operator>-&gt;</operator><name>softc</name></name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>l9p_dispatch_tremove</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_connection</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>lr_conn</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_backend</name></name> <modifier>*</modifier></type><name>be</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_fid</name></name> <modifier>*</modifier></type><name>fid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>





<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fid_lookup</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>be</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>lc_server</name><operator>-&gt;</operator><name>ls_backend</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_fid_unsetvalid</name><argument_list>(<argument><expr><name>fid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name><name>be</name><operator>-&gt;</operator><name>remove</name></name><argument_list>(<argument><expr><name><name>be</name><operator>-&gt;</operator><name>softc</name></name></expr></argument>, <argument><expr><name>fid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>l9p_connection_remove_fid</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>fid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>l9p_dispatch_tstat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_connection</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>lr_conn</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_backend</name></name> <modifier>*</modifier></type><name>be</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_fid</name></name> <modifier>*</modifier></type><name>fid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>


<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fid_lookup</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>, <argument><expr><name>ENOENT</name></expr></argument>,
<argument><expr><name>F_ALLOW_AUTH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>be</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>lc_server</name><operator>-&gt;</operator><name>ls_backend</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>lr_fid</name></name> <operator>=</operator> <name>fid</name></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name><name>be</name><operator>-&gt;</operator><name>stat</name></name><argument_list>(<argument><expr><name><name>be</name><operator>-&gt;</operator><name>softc</name></name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>l9p_fid_isauth</name><argument_list>(<argument><expr><name>fid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>lr_resp</name><operator>.</operator><name>rstat</name><operator>.</operator><name>stat</name><operator>.</operator><name>qid</name><operator>.</operator><name>type</name></name> <operator>|=</operator> <name>L9P_QTAUTH</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>lr_resp</name><operator>.</operator><name>rstat</name><operator>.</operator><name>stat</name><operator>.</operator><name>qid</name><operator>.</operator><name>type</name></name> <operator>&amp;=</operator> <name>L9P_QTDIR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>l9p_fid_setdir</name><argument_list>(<argument><expr><name>fid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>l9p_fid_unsetdir</name><argument_list>(<argument><expr><name>fid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>l9p_dispatch_twalk</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_connection</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>lr_conn</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_backend</name></name> <modifier>*</modifier></type><name>be</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_fid</name></name> <modifier>*</modifier></type><name>fid</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>newfid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>


<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fid_lookup</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>, <argument><expr><name>ENOENT</name></expr></argument>,
<argument><expr><name>F_FORBID_XATTR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>twalk</name><operator>.</operator><name>hdr</name><operator>.</operator><name>fid</name></name> <operator>!=</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>twalk</name><operator>.</operator><name>newfid</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>newfid</name> <operator>=</operator> <call><name>l9p_connection_alloc_fid</name><argument_list>(<argument><expr><name>conn</name></expr></argument>,
<argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>twalk</name><operator>.</operator><name>newfid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>newfid</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>EINVAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>newfid</name> <operator>=</operator> <name>fid</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>be</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>lc_server</name><operator>-&gt;</operator><name>ls_backend</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>lr_fid</name></name> <operator>=</operator> <name>fid</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>lr_newfid</name></name> <operator>=</operator> <name>newfid</name></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name><name>be</name><operator>-&gt;</operator><name>walk</name></name><argument_list>(<argument><expr><name><name>be</name><operator>-&gt;</operator><name>softc</name></name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><name>newfid</name> <operator>!=</operator> <name>fid</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>error</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>l9p_fid_setvalid</name><argument_list>(<argument><expr><name>newfid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>l9p_connection_remove_fid</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>newfid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>









<if_stmt><if>if <condition>(<expr><name>error</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_resp</name><operator>.</operator><name>rwalk</name><operator>.</operator><name>nwqid</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>lr_resp</name><operator>.</operator><name>rwalk</name><operator>.</operator><name>wqid</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>&amp;</operator> <name>L9P_QTDIR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>l9p_fid_setdir</name><argument_list>(<argument><expr><name>newfid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>l9p_fid_isdir</name><argument_list>(<argument><expr><name>fid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>l9p_fid_setdir</name><argument_list>(<argument><expr><name>newfid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>l9p_dispatch_twrite</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_connection</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>lr_conn</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_backend</name></name> <modifier>*</modifier></type><name>be</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_fid</name></name> <modifier>*</modifier></type><name>fid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>


<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fid_lookup</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>,
<argument><expr><name>F_FORBID_DIR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>lr_fid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>








<expr_stmt><expr><call><name>l9p_seek_iov</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_req_msg</name><operator>.</operator><name>lm_iov</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_req_msg</name><operator>.</operator><name>lm_niov</name></name></expr></argument>,
<argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_data_iov</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>lr_data_niov</name></name></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<expr_stmt><expr><name>be</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>lc_server</name><operator>-&gt;</operator><name>ls_backend</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>fid</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_fid</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>l9p_fid_isxattr</name><argument_list>(<argument><expr><name>fid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <ternary><condition><expr><name><name>be</name><operator>-&gt;</operator><name>xattrwrite</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then>
<expr><call><name><name>be</name><operator>-&gt;</operator><name>xattrwrite</name></name><argument_list>(<argument><expr><name><name>be</name><operator>-&gt;</operator><name>softc</name></name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>ENOSYS</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>l9p_fid_isopen</name><argument_list>(<argument><expr><name>fid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <ternary><condition><expr><name><name>be</name><operator>-&gt;</operator><name>write</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then>
<expr><call><name><name>be</name><operator>-&gt;</operator><name>write</name></name><argument_list>(<argument><expr><name><name>be</name><operator>-&gt;</operator><name>softc</name></name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>ENOSYS</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>l9p_dispatch_twstat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_connection</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>lr_conn</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_backend</name></name> <modifier>*</modifier></type><name>be</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fid_lookup</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>,
<argument><expr><name>F_FORBID_XATTR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>lr_fid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>be</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>lc_server</name><operator>-&gt;</operator><name>ls_backend</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <ternary><condition><expr><name><name>be</name><operator>-&gt;</operator><name>wstat</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><call><name><name>be</name><operator>-&gt;</operator><name>wstat</name></name><argument_list>(<argument><expr><name><name>be</name><operator>-&gt;</operator><name>softc</name></name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>ENOSYS</name></expr></else></ternary></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>l9p_dispatch_tstatfs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_connection</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>lr_conn</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_backend</name></name> <modifier>*</modifier></type><name>be</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>


<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fid_lookup</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>lr_fid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>be</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>lc_server</name><operator>-&gt;</operator><name>ls_backend</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name><name>be</name><operator>-&gt;</operator><name>statfs</name></name><argument_list>(<argument><expr><name><name>be</name><operator>-&gt;</operator><name>softc</name></name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>l9p_dispatch_tlopen</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_connection</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>lr_conn</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_backend</name></name> <modifier>*</modifier></type><name>be</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fid_lookup</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>, <argument><expr><name>ENOENT</name></expr></argument>,
<argument><expr><name>F_FORBID_OPEN</name> <operator>|</operator> <name>F_FORBID_XATTR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>lr_fid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>be</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>lc_server</name><operator>-&gt;</operator><name>ls_backend</name></name></expr>;</expr_stmt>





<expr_stmt><expr><name>error</name> <operator>=</operator> <ternary><condition><expr><name><name>be</name><operator>-&gt;</operator><name>lopen</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><call><name><name>be</name><operator>-&gt;</operator><name>lopen</name></name><argument_list>(<argument><expr><name><name>be</name><operator>-&gt;</operator><name>softc</name></name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>ENOSYS</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>l9p_fid_setopen</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_fid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>l9p_dispatch_tlcreate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_connection</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>lr_conn</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_backend</name></name> <modifier>*</modifier></type><name>be</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fid_lookup</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>, <argument><expr><name>ENOENT</name></expr></argument>,
<argument><expr><name>F_REQUIRE_DIR</name> <operator>|</operator> <name>F_FORBID_OPEN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>lr_fid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>be</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>lc_server</name><operator>-&gt;</operator><name>ls_backend</name></name></expr>;</expr_stmt>






<expr_stmt><expr><name>error</name> <operator>=</operator> <ternary><condition><expr><name><name>be</name><operator>-&gt;</operator><name>lcreate</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><call><name><name>be</name><operator>-&gt;</operator><name>lcreate</name></name><argument_list>(<argument><expr><name><name>be</name><operator>-&gt;</operator><name>softc</name></name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>ENOSYS</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>l9p_fid_unsetdir</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_fid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_fid_setopen</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_fid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>l9p_dispatch_tsymlink</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_connection</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>lr_conn</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_backend</name></name> <modifier>*</modifier></type><name>be</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>


<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fid_lookup</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>, <argument><expr><name>ENOENT</name></expr></argument>,
<argument><expr><name>F_REQUIRE_DIR</name> <operator>|</operator> <name>F_FORBID_OPEN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>lr_fid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>be</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>lc_server</name><operator>-&gt;</operator><name>ls_backend</name></name></expr>;</expr_stmt>





<expr_stmt><expr><name>error</name> <operator>=</operator> <ternary><condition><expr><name><name>be</name><operator>-&gt;</operator><name>symlink</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><call><name><name>be</name><operator>-&gt;</operator><name>symlink</name></name><argument_list>(<argument><expr><name><name>be</name><operator>-&gt;</operator><name>softc</name></name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>ENOSYS</name></expr></else></ternary></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>l9p_dispatch_tmknod</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_connection</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>lr_conn</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_backend</name></name> <modifier>*</modifier></type><name>be</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>


<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fid_lookup</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>, <argument><expr><name>ENOENT</name></expr></argument>,
<argument><expr><name>F_REQUIRE_DIR</name> <operator>|</operator> <name>F_FORBID_OPEN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>lr_fid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>be</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>lc_server</name><operator>-&gt;</operator><name>ls_backend</name></name></expr>;</expr_stmt>





<expr_stmt><expr><name>error</name> <operator>=</operator> <ternary><condition><expr><name><name>be</name><operator>-&gt;</operator><name>mknod</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><call><name><name>be</name><operator>-&gt;</operator><name>mknod</name></name><argument_list>(<argument><expr><name><name>be</name><operator>-&gt;</operator><name>softc</name></name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>ENOSYS</name></expr></else></ternary></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>l9p_dispatch_trename</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_connection</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>lr_conn</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_backend</name></name> <modifier>*</modifier></type><name>be</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>


<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fid_lookup</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>, <argument><expr><name>ENOENT</name></expr></argument>,
<argument><expr><name>F_FORBID_XATTR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>lr_fid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fid_lookup</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>trename</name><operator>.</operator><name>dfid</name></name></expr></argument>, <argument><expr><name>ENOENT</name></expr></argument>,
<argument><expr><name>F_REQUIRE_DIR</name> <operator>|</operator> <name>F_FORBID_OPEN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>lr_fid2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>be</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>lc_server</name><operator>-&gt;</operator><name>ls_backend</name></name></expr>;</expr_stmt>





<expr_stmt><expr><name>error</name> <operator>=</operator> <ternary><condition><expr><name><name>be</name><operator>-&gt;</operator><name>rename</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><call><name><name>be</name><operator>-&gt;</operator><name>rename</name></name><argument_list>(<argument><expr><name><name>be</name><operator>-&gt;</operator><name>softc</name></name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>ENOSYS</name></expr></else></ternary></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>l9p_dispatch_treadlink</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_connection</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>lr_conn</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_backend</name></name> <modifier>*</modifier></type><name>be</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>






<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fid_lookup</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>, <argument><expr><name>ENOENT</name></expr></argument>,
<argument><expr><name>F_FORBID_DIR</name> <operator>|</operator> <name>F_FORBID_OPEN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>lr_fid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>be</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>lc_server</name><operator>-&gt;</operator><name>ls_backend</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <ternary><condition><expr><name><name>be</name><operator>-&gt;</operator><name>readlink</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><call><name><name>be</name><operator>-&gt;</operator><name>readlink</name></name><argument_list>(<argument><expr><name><name>be</name><operator>-&gt;</operator><name>softc</name></name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>ENOSYS</name></expr></else></ternary></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>l9p_dispatch_tgetattr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_connection</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>lr_conn</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_backend</name></name> <modifier>*</modifier></type><name>be</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fid_lookup</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>, <argument><expr><name>ENOENT</name></expr></argument>,
<argument><expr><name>F_FORBID_XATTR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>lr_fid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>be</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>lc_server</name><operator>-&gt;</operator><name>ls_backend</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <ternary><condition><expr><name><name>be</name><operator>-&gt;</operator><name>getattr</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><call><name><name>be</name><operator>-&gt;</operator><name>getattr</name></name><argument_list>(<argument><expr><name><name>be</name><operator>-&gt;</operator><name>softc</name></name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>ENOSYS</name></expr></else></ternary></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>l9p_dispatch_tsetattr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_connection</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>lr_conn</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_backend</name></name> <modifier>*</modifier></type><name>be</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fid_lookup</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>, <argument><expr><name>ENOENT</name></expr></argument>,
<argument><expr><name>F_FORBID_XATTR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>lr_fid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>be</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>lc_server</name><operator>-&gt;</operator><name>ls_backend</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <ternary><condition><expr><name><name>be</name><operator>-&gt;</operator><name>setattr</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><call><name><name>be</name><operator>-&gt;</operator><name>setattr</name></name><argument_list>(<argument><expr><name><name>be</name><operator>-&gt;</operator><name>softc</name></name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>ENOSYS</name></expr></else></ternary></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>l9p_dispatch_txattrwalk</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_connection</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>lr_conn</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_backend</name></name> <modifier>*</modifier></type><name>be</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_fid</name></name> <modifier>*</modifier></type><name>fid</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>newfid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>








<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fid_lookup</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>, <argument><expr><name>ENOENT</name></expr></argument>,
<argument><expr><name>F_FORBID_XATTR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>newfid</name> <operator>=</operator> <call><name>l9p_connection_alloc_fid</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>txattrwalk</name><operator>.</operator><name>newfid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>newfid</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>EINVAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>be</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>lc_server</name><operator>-&gt;</operator><name>ls_backend</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>lr_fid</name></name> <operator>=</operator> <name>fid</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>lr_newfid</name></name> <operator>=</operator> <name>newfid</name></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <ternary><condition><expr><name><name>be</name><operator>-&gt;</operator><name>xattrwalk</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><call><name><name>be</name><operator>-&gt;</operator><name>xattrwalk</name></name><argument_list>(<argument><expr><name><name>be</name><operator>-&gt;</operator><name>softc</name></name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>ENOSYS</name></expr></else></ternary></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><name>error</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>l9p_fid_setvalid</name><argument_list>(<argument><expr><name>newfid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_fid_setxattr</name><argument_list>(<argument><expr><name>newfid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>l9p_connection_remove_fid</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>newfid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>l9p_dispatch_txattrcreate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_connection</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>lr_conn</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_backend</name></name> <modifier>*</modifier></type><name>be</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_fid</name></name> <modifier>*</modifier></type><name>fid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>









<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fid_lookup</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>, <argument><expr><name>EINVAL</name></expr></argument>,
<argument><expr><name>F_FORBID_XATTR</name> <operator>|</operator> <name>F_FORBID_OPEN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>be</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>lc_server</name><operator>-&gt;</operator><name>ls_backend</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>lr_fid</name></name> <operator>=</operator> <name>fid</name></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <ternary><condition><expr><name><name>be</name><operator>-&gt;</operator><name>xattrcreate</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><call><name><name>be</name><operator>-&gt;</operator><name>xattrcreate</name></name><argument_list>(<argument><expr><name><name>be</name><operator>-&gt;</operator><name>softc</name></name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr> </then><else>:
<expr><name>ENOSYS</name></expr></else></ternary></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name>error</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>l9p_fid_unsetdir</name><argument_list>(<argument><expr><name>fid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_fid_setxattr</name><argument_list>(<argument><expr><name>fid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>l9p_dispatch_treaddir</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_connection</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>lr_conn</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_backend</name></name> <modifier>*</modifier></type><name>be</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fid_lookup</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>, <argument><expr><name>ENOENT</name></expr></argument>,
<argument><expr><name>F_REQUIRE_DIR</name> <operator>|</operator> <name>F_REQUIRE_OPEN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>lr_fid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>







<expr_stmt><expr><call><name>l9p_seek_iov</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_resp_msg</name><operator>.</operator><name>lm_iov</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_resp_msg</name><operator>.</operator><name>lm_niov</name></name></expr></argument>,
<argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_data_iov</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>lr_data_niov</name></name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>be</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>lc_server</name><operator>-&gt;</operator><name>ls_backend</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <ternary><condition><expr><name><name>be</name><operator>-&gt;</operator><name>readdir</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><call><name><name>be</name><operator>-&gt;</operator><name>readdir</name></name><argument_list>(<argument><expr><name><name>be</name><operator>-&gt;</operator><name>softc</name></name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>ENOSYS</name></expr></else></ternary></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>l9p_dispatch_tfsync</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_connection</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>lr_conn</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_backend</name></name> <modifier>*</modifier></type><name>be</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fid_lookup</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>, <argument><expr><name>ENOENT</name></expr></argument>,
<argument><expr><name>F_REQUIRE_OPEN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>lr_fid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>be</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>lc_server</name><operator>-&gt;</operator><name>ls_backend</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <ternary><condition><expr><name><name>be</name><operator>-&gt;</operator><name>fsync</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><call><name><name>be</name><operator>-&gt;</operator><name>fsync</name></name><argument_list>(<argument><expr><name><name>be</name><operator>-&gt;</operator><name>softc</name></name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>ENOSYS</name></expr></else></ternary></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>l9p_dispatch_tlock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_connection</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>lr_conn</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_backend</name></name> <modifier>*</modifier></type><name>be</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>


<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fid_lookup</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>, <argument><expr><name>ENOENT</name></expr></argument>,
<argument><expr><name>F_REQUIRE_OPEN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>lr_fid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>be</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>lc_server</name><operator>-&gt;</operator><name>ls_backend</name></name></expr>;</expr_stmt>




<expr_stmt><expr><name>error</name> <operator>=</operator> <ternary><condition><expr><name><name>be</name><operator>-&gt;</operator><name>lock</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><call><name><name>be</name><operator>-&gt;</operator><name>lock</name></name><argument_list>(<argument><expr><name><name>be</name><operator>-&gt;</operator><name>softc</name></name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>ENOSYS</name></expr></else></ternary></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>l9p_dispatch_tgetlock</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_connection</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>lr_conn</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_backend</name></name> <modifier>*</modifier></type><name>be</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fid_lookup</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>, <argument><expr><name>ENOENT</name></expr></argument>,
<argument><expr><name>F_REQUIRE_OPEN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>lr_fid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>be</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>lc_server</name><operator>-&gt;</operator><name>ls_backend</name></name></expr>;</expr_stmt>




<expr_stmt><expr><name>error</name> <operator>=</operator> <ternary><condition><expr><name><name>be</name><operator>-&gt;</operator><name>getlock</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><call><name><name>be</name><operator>-&gt;</operator><name>getlock</name></name><argument_list>(<argument><expr><name><name>be</name><operator>-&gt;</operator><name>softc</name></name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>ENOSYS</name></expr></else></ternary></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>l9p_dispatch_tlink</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_connection</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>lr_conn</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_backend</name></name> <modifier>*</modifier></type><name>be</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>






<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fid_lookup</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>tlink</name><operator>.</operator><name>dfid</name></name></expr></argument>, <argument><expr><name>ENOENT</name></expr></argument>,
<argument><expr><name>F_REQUIRE_DIR</name> <operator>|</operator> <name>F_FORBID_OPEN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>lr_fid2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fid_lookup</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>, <argument><expr><name>ENOENT</name></expr></argument>,
<argument><expr><name>F_FORBID_DIR</name> <operator>|</operator> <name>F_FORBID_XATTR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>lr_fid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>be</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>lc_server</name><operator>-&gt;</operator><name>ls_backend</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <ternary><condition><expr><name><name>be</name><operator>-&gt;</operator><name>link</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><call><name><name>be</name><operator>-&gt;</operator><name>link</name></name><argument_list>(<argument><expr><name><name>be</name><operator>-&gt;</operator><name>softc</name></name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>ENOSYS</name></expr></else></ternary></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>l9p_dispatch_tmkdir</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_connection</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>lr_conn</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_backend</name></name> <modifier>*</modifier></type><name>be</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fid_lookup</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>, <argument><expr><name>ENOENT</name></expr></argument>,
<argument><expr><name>F_REQUIRE_DIR</name> <operator>|</operator> <name>F_FORBID_OPEN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>lr_fid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>tlcreate</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>EINVAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>be</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>lc_server</name><operator>-&gt;</operator><name>ls_backend</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <ternary><condition><expr><name><name>be</name><operator>-&gt;</operator><name>mkdir</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><call><name><name>be</name><operator>-&gt;</operator><name>mkdir</name></name><argument_list>(<argument><expr><name><name>be</name><operator>-&gt;</operator><name>softc</name></name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>ENOSYS</name></expr></else></ternary></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>l9p_dispatch_trenameat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_connection</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>lr_conn</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_backend</name></name> <modifier>*</modifier></type><name>be</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fid_lookup</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>, <argument><expr><name>ENOENT</name></expr></argument>,
<argument><expr><name>F_REQUIRE_DIR</name> <operator>|</operator> <name>F_FORBID_OPEN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>lr_fid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fid_lookup</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>trenameat</name><operator>.</operator><name>newdirfid</name></name></expr></argument>, <argument><expr><name>ENOENT</name></expr></argument>,
<argument><expr><name>F_REQUIRE_DIR</name> <operator>|</operator> <name>F_FORBID_OPEN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>lr_fid2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>be</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>lc_server</name><operator>-&gt;</operator><name>ls_backend</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name>error</name> <operator>=</operator> <ternary><condition><expr><name><name>be</name><operator>-&gt;</operator><name>renameat</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><call><name><name>be</name><operator>-&gt;</operator><name>renameat</name></name><argument_list>(<argument><expr><name><name>be</name><operator>-&gt;</operator><name>softc</name></name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>ENOSYS</name></expr></else></ternary></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>l9p_dispatch_tunlinkat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_connection</name></name> <modifier>*</modifier></type><name>conn</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>lr_conn</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_backend</name></name> <modifier>*</modifier></type><name>be</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fid_lookup</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>, <argument><expr><name>ENOENT</name></expr></argument>,
<argument><expr><name>F_REQUIRE_DIR</name> <operator>|</operator> <name>F_FORBID_OPEN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>lr_fid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>be</name> <operator>=</operator> <name><name>conn</name><operator>-&gt;</operator><name>lc_server</name><operator>-&gt;</operator><name>ls_backend</name></name></expr>;</expr_stmt>


<expr_stmt><expr><name>error</name> <operator>=</operator> <ternary><condition><expr><name><name>be</name><operator>-&gt;</operator><name>unlinkat</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><call><name><name>be</name><operator>-&gt;</operator><name>unlinkat</name></name><argument_list>(<argument><expr><name><name>be</name><operator>-&gt;</operator><name>softc</name></name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>ENOSYS</name></expr></else></ternary></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
