<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/lib9p/pack.c">






























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apple_endian.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/endian.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/uio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib9p.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib9p_impl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name><parameter_list>(<parameter><type><name>ary</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(sizeof(ary) / sizeof(*ary))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRING_SIZE</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(L9P_WORD + (s != NULL ? (uint16_t)strlen(s) : 0))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QID_SIZE</name></cpp:macro> <cpp:value>(L9P_BYTE + L9P_DWORD + L9P_QWORD)</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>ssize_t</name></type> <name>l9p_iov_io</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_message</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>ssize_t</name></type> <name>l9p_pu8</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_message</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>ssize_t</name></type> <name>l9p_pu16</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_message</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>ssize_t</name></type> <name>l9p_pu32</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_message</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>ssize_t</name></type> <name>l9p_pu64</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_message</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ssize_t</name></type> <name>l9p_pustring</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_message</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ssize_t</name></type> <name>l9p_pustrings</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_message</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ssize_t</name></type> <name>l9p_puqid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_message</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_qid</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ssize_t</name></type> <name>l9p_puqids</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_message</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_qid</name></name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>;</function_decl>












<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>l9p_iov_io</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_message</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>done</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>left</name> <init>= <expr><name>len</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>msg</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>lm_cursor_iov</name></name> <operator>&gt;=</operator> <name><name>msg</name><operator>-&gt;</operator><name>lm_niov</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>buffer</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>left</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name> <init>= <expr><name><name>msg</name><operator>-&gt;</operator><name>lm_cursor_iov</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>space</name> <init>= <expr><name><name>msg</name><operator>-&gt;</operator><name>lm_iov</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>-</operator> <name><name>msg</name><operator>-&gt;</operator><name>lm_cursor_offset</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>towrite</name> <init>= <expr><call><name>MIN</name><argument_list>(<argument><expr><name>space</name></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>lm_mode</name></name> <operator>==</operator> <name>L9P_PACK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>msg</name><operator>-&gt;</operator><name>lm_iov</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>+</operator>
<name><name>msg</name><operator>-&gt;</operator><name>lm_cursor_offset</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buffer</name> <operator>+</operator> <name>done</name></expr></argument>,
<argument><expr><name>towrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>lm_mode</name></name> <operator>==</operator> <name>L9P_UNPACK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buffer</name> <operator>+</operator> <name>done</name></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>msg</name><operator>-&gt;</operator><name>lm_iov</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>+</operator>
<name><name>msg</name><operator>-&gt;</operator><name>lm_cursor_offset</name></name></expr></argument>, <argument><expr><name>towrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>lm_cursor_offset</name></name> <operator>+=</operator> <name>towrite</name></expr>;</expr_stmt>

<expr_stmt><expr><name>done</name> <operator>+=</operator> <name>towrite</name></expr>;</expr_stmt>
<expr_stmt><expr><name>left</name> <operator>-=</operator> <name>towrite</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>space</name> <operator>-</operator> <name>towrite</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>lm_cursor_iov</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>lm_cursor_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>lm_cursor_iov</name></name> <operator>&gt;=</operator> <name><name>msg</name><operator>-&gt;</operator><name>lm_niov</name></name> <operator>&amp;&amp;</operator> <name>left</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>lm_size</name></name> <operator>+=</operator> <name>done</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>(</operator><name>ssize_t</name><operator>)</operator><name>done</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ssize_t</name></type>
<name>l9p_pu8</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_message</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><operator>(</operator><call><name>l9p_iov_io</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ssize_t</name></type>
<name>l9p_pu16</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_message</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_BYTE_ORDER</name> <operator>!=</operator> <name>_LITTLE_ENDIAN</name></expr></cpp:if>






<decl_stmt><decl><type><name>uint16_t</name></type> <name>copy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>lm_mode</name></name> <operator>==</operator> <name>L9P_PACK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>copy</name> <operator>=</operator> <call><name>htole16</name><argument_list>(<argument><expr><operator>*</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>l9p_iov_io</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>copy</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>l9p_iov_io</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <call><name>le16toh</name><argument_list>(<argument><expr><operator>*</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><call><name>l9p_iov_io</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ssize_t</name></type>
<name>l9p_pu32</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_message</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_BYTE_ORDER</name> <operator>!=</operator> <name>_LITTLE_ENDIAN</name></expr></cpp:if>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>copy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>lm_mode</name></name> <operator>==</operator> <name>L9P_PACK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>copy</name> <operator>=</operator> <call><name>htole32</name><argument_list>(<argument><expr><operator>*</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>l9p_iov_io</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>copy</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>l9p_iov_io</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <call><name>le32toh</name><argument_list>(<argument><expr><operator>*</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><call><name>l9p_iov_io</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ssize_t</name></type>
<name>l9p_pu64</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_message</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_BYTE_ORDER</name> <operator>!=</operator> <name>_LITTLE_ENDIAN</name></expr></cpp:if>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>copy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>lm_mode</name></name> <operator>==</operator> <name>L9P_PACK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>copy</name> <operator>=</operator> <call><name>htole64</name><argument_list>(<argument><expr><operator>*</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>l9p_iov_io</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>copy</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>l9p_iov_io</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <call><name>le64toh</name><argument_list>(<argument><expr><operator>*</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><call><name>l9p_iov_io</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>l9p_pustring</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_message</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>lm_mode</name></name> <operator>==</operator> <name>L9P_PACK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <ternary><condition><expr><operator>*</operator><name>s</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><operator>(</operator><name>uint16_t</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>l9p_pu16</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>lm_mode</name></name> <operator>==</operator> <name>L9P_UNPACK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <call><name>l9p_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>l9p_iov_io</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>lm_mode</name></name> <operator>==</operator> <name>L9P_UNPACK</name></expr>)</condition> <block>{<block_content>






<if_stmt><if>if <condition>(<expr><call><name>memchr</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><operator>(</operator><name>ssize_t</name><operator>)</operator><name>len</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>l9p_pustrings</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_message</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>num</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>strings</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>max</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>lim</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>adjusted</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>lm_mode</name></name> <operator>==</operator> <name>L9P_PACK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>lim</name> <operator>=</operator> <operator>*</operator><name>num</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>lim</name> <operator>&gt;</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>lim</name> <operator>=</operator> <name>max</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>adjusted</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><name>lim</name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_pu16</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>adjusted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_pu16</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lim</name> <operator>=</operator> <operator>*</operator><name>num</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>lim</name> <operator>&gt;</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>num</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><name>lim</name> <operator>=</operator> <name>max</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>lim</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>l9p_pustring</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>strings</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>l9p_puqid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_message</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_qid</name></name> <modifier>*</modifier></type><name>qid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>type</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>lm_mode</name></name> <operator>==</operator> <name>L9P_PACK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name><name>qid</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_pu8</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_pu8</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>qid</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>qid</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_pu64</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>qid</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><ternary><condition><expr><name>r</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>QID_SIZE</name></expr> </then><else>: <expr><name>r</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>l9p_puqids</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_message</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>num</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_qid</name></name> <modifier>*</modifier></type><name>qids</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>lim</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_pu16</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>lim</name> <operator>=</operator> <operator>*</operator><name>num</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>lim</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>l9p_puqid</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>qids</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>









<function><type><name>ssize_t</name></type>
<name>l9p_pustat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_message</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_stat</name></name> <modifier>*</modifier></type><name>stat</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>l9p_version</name></name></type> <name>version</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>size</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>lm_mode</name></name> <operator>==</operator> <name>L9P_PACK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>l9p_sizeof_stat</name><argument_list>(<argument><expr><name>stat</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>+=</operator> <call><name>l9p_pu16</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>+=</operator> <call><name>l9p_pu16</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stat</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>+=</operator> <call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stat</name><operator>-&gt;</operator><name>dev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>+=</operator> <call><name>l9p_puqid</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stat</name><operator>-&gt;</operator><name>qid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>+=</operator> <call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stat</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>+=</operator> <call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stat</name><operator>-&gt;</operator><name>atime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>+=</operator> <call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stat</name><operator>-&gt;</operator><name>mtime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>+=</operator> <call><name>l9p_pu64</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stat</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>+=</operator> <call><name>l9p_pustring</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stat</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>+=</operator> <call><name>l9p_pustring</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stat</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>+=</operator> <call><name>l9p_pustring</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stat</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>+=</operator> <call><name>l9p_pustring</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stat</name><operator>-&gt;</operator><name>muid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>version</name> <operator>&gt;=</operator> <name>L9P_2000U</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>+=</operator> <call><name>l9p_pustring</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stat</name><operator>-&gt;</operator><name>extension</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>+=</operator> <call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stat</name><operator>-&gt;</operator><name>n_uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>+=</operator> <call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stat</name><operator>-&gt;</operator><name>n_gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>+=</operator> <call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stat</name><operator>-&gt;</operator><name>n_muid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <name>size</name> <operator>+</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>r</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>









<function><type><name>ssize_t</name></type>
<name>l9p_pudirent</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_message</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_dirent</name></name> <modifier>*</modifier></type><name>de</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_puqid</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>de</name><operator>-&gt;</operator><name>qid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>+=</operator> <call><name>l9p_pu64</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>de</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>+=</operator> <call><name>l9p_pu8</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>de</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>l9p_pustring</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>de</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <name>QID_SIZE</name> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">1</literal> <operator>||</operator> <name>s</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>r</name> <operator>+</operator> <name>s</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>







<function><type><name>int</name></type>
<name>l9p_pufcall</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_message</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>l9p_fcall</name></name> <modifier>*</modifier></type><name>fcall</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>l9p_version</name></name></type> <name>version</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>r</name></decl>;</decl_stmt>





<expr_stmt><expr><call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_pu8</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_pu16</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>









<switch>switch <condition>(<expr><name><name>fcall</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>L9P_TVERSION</name></expr>:</case>
<case>case <expr><name>L9P_RVERSION</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>version</name><operator>.</operator><name>msize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_pustring</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>version</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>L9P_TAUTH</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>tauth</name><operator>.</operator><name>afid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_pustring</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>tauth</name><operator>.</operator><name>uname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_pustring</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>tauth</name><operator>.</operator><name>aname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>version</name> <operator>&gt;=</operator> <name>L9P_2000U</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>tauth</name><operator>.</operator><name>n_uname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>L9P_RAUTH</name></expr>:</case>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_puqid</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>rauth</name><operator>.</operator><name>aqid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>L9P_TATTACH</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>tattach</name><operator>.</operator><name>afid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_pustring</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>tattach</name><operator>.</operator><name>uname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_pustring</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>tattach</name><operator>.</operator><name>aname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>version</name> <operator>&gt;=</operator> <name>L9P_2000U</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>tattach</name><operator>.</operator><name>n_uname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>L9P_RATTACH</name></expr>:</case>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_puqid</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>rattach</name><operator>.</operator><name>qid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>L9P_RERROR</name></expr>:</case>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_pustring</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>error</name><operator>.</operator><name>ename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>version</name> <operator>&gt;=</operator> <name>L9P_2000U</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>error</name><operator>.</operator><name>errnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>L9P_RLERROR</name></expr>:</case>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>error</name><operator>.</operator><name>errnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>L9P_TFLUSH</name></expr>:</case>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_pu16</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>tflush</name><operator>.</operator><name>oldtag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>L9P_RFLUSH</name></expr>:</case>
<break>break;</break>

<case>case <expr><name>L9P_TWALK</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>twalk</name><operator>.</operator><name>newfid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_pustrings</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>twalk</name><operator>.</operator><name>nwname</name></name></expr></argument>,
<argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>twalk</name><operator>.</operator><name>wname</name></name></expr></argument>, <argument><expr><call><name>N</name><argument_list>(<argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>twalk</name><operator>.</operator><name>wname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>L9P_RWALK</name></expr>:</case>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_puqids</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>rwalk</name><operator>.</operator><name>nwqid</name></name></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>rwalk</name><operator>.</operator><name>wqid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>L9P_TOPEN</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_pu8</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>topen</name><operator>.</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>L9P_ROPEN</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_puqid</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>ropen</name><operator>.</operator><name>qid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>ropen</name><operator>.</operator><name>iounit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>L9P_TCREATE</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_pustring</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>tcreate</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>tcreate</name><operator>.</operator><name>perm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_pu8</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>tcreate</name><operator>.</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>version</name> <operator>&gt;=</operator> <name>L9P_2000U</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_pustring</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>tcreate</name><operator>.</operator><name>extension</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>L9P_RCREATE</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_puqid</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>rcreate</name><operator>.</operator><name>qid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>rcreate</name><operator>.</operator><name>iounit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>L9P_TREAD</name></expr>:</case>
<case>case <expr><name>L9P_TREADDIR</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_pu64</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>L9P_RREAD</name></expr>:</case>
<case>case <expr><name>L9P_RREADDIR</name></expr>:</case>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>L9P_TWRITE</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_pu64</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>L9P_RWRITE</name></expr>:</case>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>L9P_TCLUNK</name></expr>:</case>
<case>case <expr><name>L9P_TSTAT</name></expr>:</case>
<case>case <expr><name>L9P_TREMOVE</name></expr>:</case>
<case>case <expr><name>L9P_TSTATFS</name></expr>:</case>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>L9P_RCLUNK</name></expr>:</case>
<case>case <expr><name>L9P_RREMOVE</name></expr>:</case>
<break>break;</break>

<case>case <expr><name>L9P_RSTAT</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>size</name> <init>= <expr><call><name>l9p_sizeof_stat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>rstat</name><operator>.</operator><name>stat</name></name></expr></argument>,
<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>l9p_pu16</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_pustat</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>rstat</name><operator>.</operator><name>stat</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>

<case>case <expr><name>L9P_TWSTAT</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>size</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_pu16</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_pustat</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>twstat</name><operator>.</operator><name>stat</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>

<case>case <expr><name>L9P_RWSTAT</name></expr>:</case>
<break>break;</break>

<case>case <expr><name>L9P_RSTATFS</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>rstatfs</name><operator>.</operator><name>statfs</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>rstatfs</name><operator>.</operator><name>statfs</name><operator>.</operator><name>bsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_pu64</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>rstatfs</name><operator>.</operator><name>statfs</name><operator>.</operator><name>blocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_pu64</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>rstatfs</name><operator>.</operator><name>statfs</name><operator>.</operator><name>bfree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_pu64</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>rstatfs</name><operator>.</operator><name>statfs</name><operator>.</operator><name>bavail</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_pu64</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>rstatfs</name><operator>.</operator><name>statfs</name><operator>.</operator><name>files</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_pu64</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>rstatfs</name><operator>.</operator><name>statfs</name><operator>.</operator><name>ffree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_pu64</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>rstatfs</name><operator>.</operator><name>statfs</name><operator>.</operator><name>fsid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>rstatfs</name><operator>.</operator><name>statfs</name><operator>.</operator><name>namelen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>L9P_TLOPEN</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>tlopen</name><operator>.</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>L9P_RLOPEN</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_puqid</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>rlopen</name><operator>.</operator><name>qid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>rlopen</name><operator>.</operator><name>iounit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>L9P_TLCREATE</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_pustring</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>tlcreate</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>tlcreate</name><operator>.</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>tlcreate</name><operator>.</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>tlcreate</name><operator>.</operator><name>gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>L9P_RLCREATE</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_puqid</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>rlcreate</name><operator>.</operator><name>qid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>rlcreate</name><operator>.</operator><name>iounit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>L9P_TSYMLINK</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_pustring</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>tsymlink</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_pustring</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>tsymlink</name><operator>.</operator><name>symtgt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>tlcreate</name><operator>.</operator><name>gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>L9P_RSYMLINK</name></expr>:</case>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_puqid</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>rsymlink</name><operator>.</operator><name>qid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>L9P_TMKNOD</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_pustring</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>tmknod</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>tmknod</name><operator>.</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>tmknod</name><operator>.</operator><name>major</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>tmknod</name><operator>.</operator><name>minor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>tmknod</name><operator>.</operator><name>gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>L9P_RMKNOD</name></expr>:</case>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_puqid</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>rmknod</name><operator>.</operator><name>qid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>L9P_TRENAME</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>trename</name><operator>.</operator><name>dfid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_pustring</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>trename</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>L9P_RRENAME</name></expr>:</case>
<break>break;</break>

<case>case <expr><name>L9P_TREADLINK</name></expr>:</case>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>L9P_RREADLINK</name></expr>:</case>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_pustring</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>rreadlink</name><operator>.</operator><name>target</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>L9P_TGETATTR</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_pu64</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>tgetattr</name><operator>.</operator><name>request_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>L9P_RGETATTR</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_pu64</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>rgetattr</name><operator>.</operator><name>valid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_puqid</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>rgetattr</name><operator>.</operator><name>qid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>rgetattr</name><operator>.</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>rgetattr</name><operator>.</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>rgetattr</name><operator>.</operator><name>gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_pu64</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>rgetattr</name><operator>.</operator><name>nlink</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_pu64</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>rgetattr</name><operator>.</operator><name>rdev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_pu64</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>rgetattr</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_pu64</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>rgetattr</name><operator>.</operator><name>blksize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_pu64</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>rgetattr</name><operator>.</operator><name>blocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_pu64</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>rgetattr</name><operator>.</operator><name>atime_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_pu64</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>rgetattr</name><operator>.</operator><name>atime_nsec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_pu64</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>rgetattr</name><operator>.</operator><name>mtime_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_pu64</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>rgetattr</name><operator>.</operator><name>mtime_nsec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_pu64</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>rgetattr</name><operator>.</operator><name>ctime_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_pu64</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>rgetattr</name><operator>.</operator><name>ctime_nsec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_pu64</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>rgetattr</name><operator>.</operator><name>btime_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_pu64</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>rgetattr</name><operator>.</operator><name>btime_nsec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_pu64</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>rgetattr</name><operator>.</operator><name>gen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_pu64</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>rgetattr</name><operator>.</operator><name>data_version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>L9P_TSETATTR</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>tsetattr</name><operator>.</operator><name>valid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>tsetattr</name><operator>.</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>tsetattr</name><operator>.</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>tsetattr</name><operator>.</operator><name>gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_pu64</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>tsetattr</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_pu64</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>tsetattr</name><operator>.</operator><name>atime_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_pu64</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>tsetattr</name><operator>.</operator><name>atime_nsec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_pu64</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>tsetattr</name><operator>.</operator><name>mtime_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_pu64</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>tsetattr</name><operator>.</operator><name>mtime_nsec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>L9P_RSETATTR</name></expr>:</case>
<break>break;</break>

<case>case <expr><name>L9P_TXATTRWALK</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>txattrwalk</name><operator>.</operator><name>newfid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_pustring</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>txattrwalk</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>L9P_RXATTRWALK</name></expr>:</case>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_pu64</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>rxattrwalk</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>L9P_TXATTRCREATE</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_pustring</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>txattrcreate</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>l9p_pu64</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>txattrcreate</name><operator>.</operator><name>attr_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>txattrcreate</name><operator>.</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>L9P_RXATTRCREATE</name></expr>:</case>
<break>break;</break>

<case>case <expr><name>L9P_TFSYNC</name></expr>:</case>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>L9P_RFSYNC</name></expr>:</case>
<break>break;</break>

<case>case <expr><name>L9P_TLOCK</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_pu8</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>tlock</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>tlock</name><operator>.</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_pu64</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>tlock</name><operator>.</operator><name>start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_pu64</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>tlock</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>tlock</name><operator>.</operator><name>proc_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_pustring</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>tlock</name><operator>.</operator><name>client_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>L9P_RLOCK</name></expr>:</case>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_pu8</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>rlock</name><operator>.</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>L9P_TGETLOCK</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<case>case <expr><name>L9P_RGETLOCK</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_pu8</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>getlock</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_pu64</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>getlock</name><operator>.</operator><name>start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_pu64</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>getlock</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>getlock</name><operator>.</operator><name>proc_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_pustring</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>getlock</name><operator>.</operator><name>client_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>L9P_TLINK</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>tlink</name><operator>.</operator><name>dfid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_pustring</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>tlink</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>L9P_RLINK</name></expr>:</case>
<break>break;</break>

<case>case <expr><name>L9P_TMKDIR</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_pustring</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>tmkdir</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>tmkdir</name><operator>.</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>tmkdir</name><operator>.</operator><name>gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>L9P_RMKDIR</name></expr>:</case>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_puqid</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>rmkdir</name><operator>.</operator><name>qid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>L9P_TRENAMEAT</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_pustring</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>trenameat</name><operator>.</operator><name>oldname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>trenameat</name><operator>.</operator><name>newdirfid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_pustring</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>trenameat</name><operator>.</operator><name>newname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>L9P_RRENAMEAT</name></expr>:</case>
<break>break;</break>

<case>case <expr><name>L9P_TUNLINKAT</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>fid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_pustring</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>tunlinkat</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>tunlinkat</name><operator>.</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>L9P_RUNLINKAT</name></expr>:</case>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>L9P_LOG</name><argument_list>(<argument><expr><name>L9P_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s(): missing case for type %d"</literal></expr></argument>,
<argument><expr><name>__func__</name></expr></argument>, <argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>


<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>lm_mode</name></name> <operator>==</operator> <name>L9P_PACK</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>msg</name><operator>-&gt;</operator><name>lm_size</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>lm_cursor_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>lm_cursor_iov</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>






<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>lm_size</name></name> <operator>-=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fcall</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>L9P_RREAD</name> <operator>||</operator>
<name><name>fcall</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>L9P_RREADDIR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <name><name>fcall</name><operator>-&gt;</operator><name>io</name><operator>.</operator><name>count</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>l9p_pu32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><name>void</name></type>
<name>l9p_freefcall</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>l9p_fcall</name></name> <modifier>*</modifier></type><name>fcall</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>i</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>fcall</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>L9P_TVERSION</name></expr>:</case>
<case>case <expr><name>L9P_RVERSION</name></expr>:</case>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>version</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>L9P_TATTACH</name></expr>:</case>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>tattach</name><operator>.</operator><name>aname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>tattach</name><operator>.</operator><name>uname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>L9P_TWALK</name></expr>:</case>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fcall</name><operator>-&gt;</operator><name>twalk</name><operator>.</operator><name>nwname</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>twalk</name><operator>.</operator><name>wname</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<return>return;</return>

<case>case <expr><name>L9P_TCREATE</name></expr>:</case>
<case>case <expr><name>L9P_TOPEN</name></expr>:</case>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>tcreate</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>tcreate</name><operator>.</operator><name>extension</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>L9P_RSTAT</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_freestat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>rstat</name><operator>.</operator><name>stat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>L9P_TWSTAT</name></expr>:</case>
<expr_stmt><expr><call><name>l9p_freestat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fcall</name><operator>-&gt;</operator><name>twstat</name><operator>.</operator><name>stat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>L9P_TLCREATE</name></expr>:</case>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>tlcreate</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>L9P_TSYMLINK</name></expr>:</case>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>tsymlink</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>tsymlink</name><operator>.</operator><name>symtgt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>L9P_TMKNOD</name></expr>:</case>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>tmknod</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>L9P_TRENAME</name></expr>:</case>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>trename</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>L9P_RREADLINK</name></expr>:</case>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>rreadlink</name><operator>.</operator><name>target</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>L9P_TXATTRWALK</name></expr>:</case>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>txattrwalk</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>L9P_TXATTRCREATE</name></expr>:</case>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>txattrcreate</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>L9P_TLOCK</name></expr>:</case>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>tlock</name><operator>.</operator><name>client_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>L9P_TGETLOCK</name></expr>:</case>
<case>case <expr><name>L9P_RGETLOCK</name></expr>:</case>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>getlock</name><operator>.</operator><name>client_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>L9P_TLINK</name></expr>:</case>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>tlink</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>L9P_TMKDIR</name></expr>:</case>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>tmkdir</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>L9P_TRENAMEAT</name></expr>:</case>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>trenameat</name><operator>.</operator><name>oldname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>trenameat</name><operator>.</operator><name>newname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>

<case>case <expr><name>L9P_TUNLINKAT</name></expr>:</case>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>fcall</name><operator>-&gt;</operator><name>tunlinkat</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>l9p_freestat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_stat</name></name> <modifier>*</modifier></type><name>stat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>stat</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>stat</name><operator>-&gt;</operator><name>extension</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>stat</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>stat</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>stat</name><operator>-&gt;</operator><name>muid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>uint16_t</name></type>
<name>l9p_sizeof_stat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_stat</name></name> <modifier>*</modifier></type><name>stat</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>l9p_version</name></name></type> <name>version</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>size</name> <init>= <expr><name>L9P_WORD</name>
<operator>+</operator> <name>L9P_WORD</name>
<operator>+</operator> <name>L9P_DWORD</name>
<operator>+</operator> <name>QID_SIZE</name>
<operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>L9P_DWORD</name>
<operator>+</operator> <name>L9P_QWORD</name>
<operator>+</operator> <call><name>STRING_SIZE</name><argument_list>(<argument><expr><name><name>stat</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>STRING_SIZE</name><argument_list>(<argument><expr><name><name>stat</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>STRING_SIZE</name><argument_list>(<argument><expr><name><name>stat</name><operator>-&gt;</operator><name>gid</name></name></expr></argument>)</argument_list></call>
<operator>+</operator> <call><name>STRING_SIZE</name><argument_list>(<argument><expr><name><name>stat</name><operator>-&gt;</operator><name>muid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>version</name> <operator>&gt;=</operator> <name>L9P_2000U</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>STRING_SIZE</name><argument_list>(<argument><expr><name><name>stat</name><operator>-&gt;</operator><name>extension</name></name></expr></argument>)</argument_list></call>
<operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>L9P_DWORD</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>size</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
