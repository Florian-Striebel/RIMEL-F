<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/lib9p/backend/fs.c">






























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mount.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/queue.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/un.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dirent.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pwd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libgen.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lib9p.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../lib9p_impl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../fid.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../rfuncs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../genacl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"backend.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fs.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WITH_CASPER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libcasper.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;casper/cap_pwd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;casper/cap_grp.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__FreeBSD_version</name> <operator>&gt;=</operator> <literal type="number">1000000</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_BINDAT</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_BIRTHTIME</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/syscall.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Availability.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACL_TYPE_NFS4</name></cpp:macro> <cpp:value>ACL_TYPE_EXTENDED</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>fs_softc</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>fs_rootfd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>fs_readonly</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WITH_CASPER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>cap_channel_t</name> <modifier>*</modifier></type><name>fs_cappwd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cap_channel_t</name> <modifier>*</modifier></type><name>fs_capgrp</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>;</struct>

<struct>struct <name>fs_fid</name> <block>{
<decl_stmt><decl><type><name>DIR</name> <modifier>*</modifier></type><name>ff_dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ff_dirfd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ff_fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ff_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ff_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>fs_authinfo</name></name> <modifier>*</modifier></type><name>ff_ai</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>ff_mtx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_acl</name></name> <modifier>*</modifier></type><name>ff_acl</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_NO_NFSV4_ACL</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>































<struct>struct <name>fs_authinfo</name> <block>{
<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>ai_mtx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>ai_refcnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ai_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uid_t</name></type> <name>ai_uid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ai_ngids</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gid_t</name></type> <name><name>ai_gids</name><index>[]</index></name></decl>;</decl_stmt>
}</block>;</struct>






<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>fs_attach_mutex_inited</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_mutex_t</name></type> <name>fs_attach_mutex</name></decl>;</decl_stmt>




<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>passwd</name></name> <modifier>*</modifier></type><name>fs_getpwuid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fs_softc</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uid_t</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>r_pgdata</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>group</name></name> <modifier>*</modifier></type><name>fs_getgrgid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fs_softc</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>gid_t</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>r_pgdata</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>fs_buildname</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_fid</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>fs_pdir</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fs_softc</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_fid</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>fs_dpf</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>fs_oflags_dotu</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>fs_oflags_dotl</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>l9p_omode</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>fs_nde</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fs_softc</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_fid</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name></type></decl></parameter>, <parameter><decl><type><name>gid_t</name></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uid_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>gid_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>fs_fid</name></name> <modifier>*</modifier></type><name>open_fid</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>fs_authinfo</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>dostat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fs_softc</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_stat</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dotu</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>dostatfs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_statfs</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>statfs</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>long</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>fillacl</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fs_fid</name></name> <modifier>*</modifier></type><name>ff</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>l9p_acl</name></name> <modifier>*</modifier></type><name>getacl</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fs_fid</name></name> <modifier>*</modifier></type><name>ff</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>dropacl</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fs_fid</name></name> <modifier>*</modifier></type><name>ff</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>l9p_acl</name></name> <modifier>*</modifier></type><name>look_for_nfsv4_acl</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fs_fid</name></name> <modifier>*</modifier></type><name>ff</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>check_access</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>l9p_acl</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_acl</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>fs_authinfo</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>gid_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>generate_qid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_qid</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>fs_icreate</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_fid</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>,
<parameter><decl><type><name>bool</name></type></decl></parameter>, <parameter><decl><type><name>mode_t</name></type></decl></parameter>, <parameter><decl><type><name>gid_t</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>fs_iopen</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_fid</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>l9p_omode</name></name></type></decl></parameter>,
<parameter><decl><type><name>gid_t</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>fs_imkdir</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_fid</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>bool</name></type></decl></parameter>, <parameter><decl><type><name>mode_t</name></type></decl></parameter>, <parameter><decl><type><name>gid_t</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>fs_imkfifo</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_fid</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>bool</name></type></decl></parameter>, <parameter><decl><type><name>mode_t</name></type></decl></parameter>, <parameter><decl><type><name>gid_t</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>fs_imknod</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_fid</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>bool</name></type></decl></parameter>, <parameter><decl><type><name>mode_t</name></type></decl></parameter>, <parameter><decl><type><name>dev_t</name></type></decl></parameter>, <parameter><decl><type><name>gid_t</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>fs_imksocket</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_fid</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>bool</name></type></decl></parameter>, <parameter><decl><type><name>mode_t</name></type></decl></parameter>, <parameter><decl><type><name>gid_t</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>fs_isymlink</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_fid</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>gid_t</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>fs_attach</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>fs_clunk</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_fid</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>fs_create</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>fs_open</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>fs_read</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>fs_remove</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_fid</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>fs_stat</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>fs_walk</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>fs_write</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>fs_wstat</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>fs_statfs</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>fs_lopen</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>fs_lcreate</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>fs_symlink</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>fs_mknod</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>fs_rename</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>fs_readlink</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>fs_getattr</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>fs_setattr</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>fs_xattrwalk</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>fs_xattrcreate</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>fs_readdir</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>fs_fsync</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>fs_lock</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>fs_getlock</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>fs_link</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>fs_renameat</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>fs_unlinkat</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>fs_freefid</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_fid</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
































<function><type><specifier>static</specifier> <name>int</name></type>
<name>fs_oflags_dotu</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>aflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONVERT</name><parameter_list>(<parameter><type><name>theirs</name></type></parameter>, <parameter><type><name>ours</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (mode &amp; (theirs)) { mode &amp;= ~(theirs); flags |= ours; } } while (0)</cpp:value></cpp:define>







<switch>switch <condition>(<expr><name>mode</name> <operator>&amp;</operator> <name>L9P_OACCMODE</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>L9P_OREAD</name></expr>:</case>
<default>default:</default>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>O_RDONLY</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>L9P_OWRITE</name></expr>:</case>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>O_WRONLY</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>L9P_ORDWR</name></expr>:</case>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>O_RDWR</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>L9P_OEXEC</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&amp;</operator> <name>L9P_OTRUNC</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>EINVAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>O_RDONLY</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>O_NOCTTY</name> <operator>|</operator> <name>O_NOFOLLOW</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CONVERT</name><argument_list>(<argument><expr><name>L9P_OTRUNC</name></expr></argument>, <argument><expr><name>O_TRUNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>











<expr_stmt><expr><name>mode</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>L9P_OACCMODE</name> <operator>|</operator> <name>L9P_ORCLOSE</name> <operator>|</operator> <name>L9P_OCEXEC</name> <operator>|</operator> <name>L9P_ODIRECT</name><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>L9P_LOG</name><argument_list>(<argument><expr><name>L9P_INFO</name></expr></argument>,
<argument><expr><literal type="string">"fs_oflags_dotu: untranslated bits: %#x"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>EINVAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>aflags</name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CONVERT</name></cpp:undef>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>int</name></type>
<name>fs_oflags_dotl</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>l_mode</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>aflags</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>l9p_omode</name></name> <modifier>*</modifier></type><name>ap9</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>l9p_omode</name></name></type> <name>p9</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLEAR</name><parameter_list>(<parameter><type><name>theirs</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>l_mode &amp;= ~(uint32_t)(theirs)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONVERT</name><parameter_list>(<parameter><type><name>theirs</name></type></parameter>, <parameter><type><name>ours</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (l_mode &amp; (theirs)) { CLEAR(theirs); flags |= ours; } } while (0)</cpp:value></cpp:define>










<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>l_mode</name> <operator>&amp;</operator> <name>O_ACCMODE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>EINVAL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>CLEAR</name><argument_list>(<argument><expr><name>O_ACCMODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>l_mode</name> <operator>&amp;</operator> <operator>(</operator><name>L9P_L_O_PATH</name> <operator>|</operator> <name>L9P_L_O_NOFOLLOW</name><operator>)</operator><operator>)</operator> <operator>==</operator>
<operator>(</operator><name>L9P_L_O_PATH</name> <operator>|</operator> <name>L9P_L_O_NOFOLLOW</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>CLEAR</name><argument_list>(<argument><expr><name>L9P_L_O_PATH</name> <operator>|</operator> <name>L9P_L_O_NOFOLLOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p9</name> <operator>=</operator> <name>L9P_OEXEC</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>




<expr_stmt><expr><name>p9</name> <operator>=</operator> <operator>(</operator>enum <name>l9p_omode</name><operator>)</operator><name>flags</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name>l_mode</name> <operator>&amp;</operator> <name>L9P_L_O_TRUNC</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p9</name> <operator>|=</operator> <name>L9P_OTRUNC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>O_NOCTTY</name> <operator>|</operator> <name>O_NOFOLLOW</name></expr>;</expr_stmt>











<expr_stmt><expr><call><name>CLEAR</name><argument_list>(<argument><expr><name>L9P_L_O_CREAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CONVERT</name><argument_list>(<argument><expr><name>L9P_L_O_EXCL</name></expr></argument>, <argument><expr><name>O_EXCL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CONVERT</name><argument_list>(<argument><expr><name>L9P_L_O_TRUNC</name></expr></argument>, <argument><expr><name>O_TRUNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CONVERT</name><argument_list>(<argument><expr><name>L9P_L_O_DIRECTORY</name></expr></argument>, <argument><expr><name>O_DIRECTORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CONVERT</name><argument_list>(<argument><expr><name>L9P_L_O_APPEND</name></expr></argument>, <argument><expr><name>O_APPEND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CONVERT</name><argument_list>(<argument><expr><name>L9P_L_O_NONBLOCK</name></expr></argument>, <argument><expr><name>O_NONBLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><call><name>CLEAR</name><argument_list>(<argument><expr><name>L9P_L_O_CLOEXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CLEAR</name><argument_list>(<argument><expr><name>L9P_L_O_DIRECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CLEAR</name><argument_list>(<argument><expr><name>L9P_L_O_DSYNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CLEAR</name><argument_list>(<argument><expr><name>L9P_L_O_FASYNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CLEAR</name><argument_list>(<argument><expr><name>L9P_L_O_LARGEFILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CLEAR</name><argument_list>(<argument><expr><name>L9P_L_O_NOATIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CLEAR</name><argument_list>(<argument><expr><name>L9P_L_O_NOCTTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CLEAR</name><argument_list>(<argument><expr><name>L9P_L_O_NOFOLLOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CLEAR</name><argument_list>(<argument><expr><name>L9P_L_O_SYNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>l_mode</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>L9P_LOG</name><argument_list>(<argument><expr><name>L9P_INFO</name></expr></argument>,
<argument><expr><literal type="string">"fs_oflags_dotl: untranslated bits: %#x"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>l_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>EINVAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>aflags</name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ap9</name> <operator>=</operator> <name>p9</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CLEAR</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CONVERT</name></cpp:undef>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>passwd</name></name> <modifier>*</modifier></type>
<name>fs_getpwuid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fs_softc</name></name> <modifier>*</modifier></type><name>sc</name></decl></parameter>, <parameter><decl><type><name>uid_t</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>r_pgdata</name></name> <modifier>*</modifier></type><name>pg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WITH_CASPER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><call><name>r_cap_getpwuid</name><argument_list>(<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>fs_cappwd</name></name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><name>pg</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>sc</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>r_getpwuid</name><argument_list>(<argument><expr><name>uid</name></expr></argument>, <argument><expr><name>pg</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>group</name></name> <modifier>*</modifier></type>
<name>fs_getgrgid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fs_softc</name></name> <modifier>*</modifier></type><name>sc</name></decl></parameter>, <parameter><decl><type><name>gid_t</name></type> <name>gid</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>r_pgdata</name></name> <modifier>*</modifier></type><name>pg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WITH_CASPER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><call><name>r_cap_getgrgid</name><argument_list>(<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>fs_capgrp</name></name></expr></argument>, <argument><expr><name>gid</name></expr></argument>, <argument><expr><name>pg</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>sc</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>r_getgrgid</name><argument_list>(<argument><expr><name>gid</name></expr></argument>, <argument><expr><name>pg</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>fs_buildname</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_fid</name></name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>fs_fid</name></name> <modifier>*</modifier></type><name>dirf</name> <init>= <expr><name><name>dir</name><operator>-&gt;</operator><name>lo_aux</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>dlen</name></decl>, <decl><type ref="prev"/><name>nlen1</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dirf</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dlen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>dirf</name><operator>-&gt;</operator><name>ff_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nlen1</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dlen</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>nlen1</name> <operator>&gt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ENAMETOOLONG</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>dirf</name><operator>-&gt;</operator><name>ff_name</name></name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>dlen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>dlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>nlen1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>fs_pdir</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fs_softc</name></name> <modifier>*</modifier><name>sc</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_fid</name></name> <modifier>*</modifier></type><name>fid</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>fs_fid</name></name> <modifier>*</modifier></type><name>ff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ff</name> <operator>=</operator> <name><name>fid</name><operator>-&gt;</operator><name>lo_aux</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ff</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>path</name> <operator>=</operator> <name><name>ff</name><operator>-&gt;</operator><name>ff_name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>r_dirname</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>path</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ENAMETOOLONG</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fstatat</name><argument_list>(<argument><expr><name><name>ff</name><operator>-&gt;</operator><name>ff_dirfd</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>AT_SYMLINK_NOFOLLOW</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>errno</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ENOTDIR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>int</name></type>
<name>fs_dpf</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dbuf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>dlen</name></decl>, <decl><type ref="prev"/><name>nlen1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dlen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>dbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nlen1</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dlen</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>nlen1</name> <operator>&gt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ENAMETOOLONG</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>dbuf</name><index>[<expr><name>dlen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dbuf</name> <operator>+</operator> <name>dlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>nlen1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
















<function><type><specifier>static</specifier> <name>int</name></type>
<name>fs_nde</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fs_softc</name></name> <modifier>*</modifier></type><name>sc</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_fid</name></name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isdir</name></decl></parameter>, <parameter><decl><type><name>gid_t</name></type> <name>egid</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>uid_t</name> <modifier>*</modifier></type><name>nuid</name></decl></parameter>, <parameter><decl><type><name>gid_t</name> <modifier>*</modifier></type><name>ngid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>fs_fid</name></name> <modifier>*</modifier></type><name>dirf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>fs_authinfo</name></name> <modifier>*</modifier></type><name>ai</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>op</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>fs_readonly</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>EROFS</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>dirf</name> <operator>=</operator> <name><name>dir</name><operator>-&gt;</operator><name>lo_aux</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dirf</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fstatat</name><argument_list>(<argument><expr><name><name>dirf</name><operator>-&gt;</operator><name>ff_dirfd</name></name></expr></argument>, <argument><expr><name><name>dirf</name><operator>-&gt;</operator><name>ff_name</name></name></expr></argument>, <argument><expr><name>st</name></expr></argument>,
<argument><expr><name>AT_SYMLINK_NOFOLLOW</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>errno</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ENOTDIR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>dirf</name> <operator>=</operator> <name><name>dir</name><operator>-&gt;</operator><name>lo_aux</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ai</name> <operator>=</operator> <name><name>dirf</name><operator>-&gt;</operator><name>ff_ai</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fillacl</name><argument_list>(<argument><expr><name>dirf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>op</name> <operator>=</operator> <ternary><condition><expr><name>isdir</name></expr> ?</condition><then> <expr><name>L9P_ACE_ADD_SUBDIRECTORY</name></expr> </then><else>: <expr><name>L9P_ACE_ADD_FILE</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>check_access</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>dirf</name><operator>-&gt;</operator><name>ff_acl</name></name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ai</name></expr></argument>, <argument><expr><name>egid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>EPERM</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>nuid</name> <operator>=</operator> <ternary><condition><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_uid</name></name> <operator>!=</operator> <operator>(</operator><name>uid_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><name><name>ai</name><operator>-&gt;</operator><name>ai_uid</name></name></expr> </then><else>: <expr><name><name>st</name><operator>-&gt;</operator><name>st_uid</name></name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ngid</name> <operator>=</operator> <ternary><condition><expr><name>egid</name> <operator>!=</operator> <operator>(</operator><name>gid_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><name>egid</name></expr> </then><else>:
<expr><ternary><condition><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_ngids</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>ai</name><operator>-&gt;</operator><name>ai_gids</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><name><name>st</name><operator>-&gt;</operator><name>st_gid</name></name></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name><name>struct</name> <name>fs_fid</name></name> <modifier>*</modifier></type>
<name>open_fid</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>dirfd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>fs_authinfo</name></name> <modifier>*</modifier></type><name>ai</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>creating</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>fs_fid</name></name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>newcount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>l9p_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ret</name><operator>-&gt;</operator><name>ff_mtx</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>ff_fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>ff_dirfd</name></name> <operator>=</operator> <name>dirfd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>ff_name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ret</name><operator>-&gt;</operator><name>ff_name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ret</name><operator>-&gt;</operator><name>ff_mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ai</name><operator>-&gt;</operator><name>ai_mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>newcount</name> <operator>=</operator> <operator>++</operator><name><name>ai</name><operator>-&gt;</operator><name>ai_refcnt</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ai</name><operator>-&gt;</operator><name>ai_mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>newcount</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>creating</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>L9P_LOG</name><argument_list>(<argument><expr><name>L9P_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"authinfo %p now used by %lu"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>ai</name></expr></argument>, <argument><expr><operator>(</operator><name>u_long</name><operator>)</operator><name>newcount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>ff_ai</name></name> <operator>=</operator> <name>ai</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dostat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fs_softc</name></name> <modifier>*</modifier></type><name>sc</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_stat</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dotu</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>passwd</name></name> <modifier>*</modifier></type><name>user</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>group</name></name> <modifier>*</modifier></type><name>group</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>l9p_stat</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>generate_qid</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>qid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dev</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>st_mode</name></name> <operator>&amp;</operator> <literal type="number">0777</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>|=</operator> <name>L9P_DMDIR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>S_ISLNK</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>st_mode</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>dotu</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>|=</operator> <name>L9P_DMSYMLINK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>S_ISCHR</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>st_mode</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>S_ISBLK</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>|=</operator> <name>L9P_DMDEVICE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>S_ISSOCK</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>|=</operator> <name>L9P_DMSOCKET</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>S_ISFIFO</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>|=</operator> <name>L9P_DMNAMEDPIPE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>atime</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>buf</name><operator>-&gt;</operator><name>st_atime</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mtime</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>buf</name><operator>-&gt;</operator><name>st_mtime</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>buf</name><operator>-&gt;</operator><name>st_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>r_basename</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dotu</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>r_pgdata</name></name></type> <name>udata</name></decl>, <decl><type ref="prev"/><name>gdata</name></decl>;</decl_stmt>

<expr_stmt><expr><name>user</name> <operator>=</operator> <call><name>fs_getpwuid</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>st_uid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>udata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>group</name> <operator>=</operator> <call><name>fs_getgrgid</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>st_gid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <ternary><condition><expr><name>user</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><call><name>strdup</name><argument_list>(<argument><expr><name><name>user</name><operator>-&gt;</operator><name>pw_name</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>gid</name></name> <operator>=</operator> <ternary><condition><expr><name>group</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><call><name>strdup</name><argument_list>(<argument><expr><name><name>group</name><operator>-&gt;</operator><name>gr_name</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>muid</name></name> <operator>=</operator> <ternary><condition><expr><name>user</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><call><name>strdup</name><argument_list>(<argument><expr><name><name>user</name><operator>-&gt;</operator><name>pw_name</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_pgfree</name><argument_list>(<argument><expr><operator>&amp;</operator><name>udata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r_pgfree</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>







<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>n_uid</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>st_uid</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>n_gid</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>st_gid</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>n_muid</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>st_uid</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>S_ISLNK</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>target</name><index>[<expr><name>MAXPATHLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>ret</name> <init>= <expr><call><name>readlink</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>MAXPATHLEN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>extension</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>extension</name></name> <operator>=</operator> <call><name>strndup</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>S_ISBLK</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>extension</name></name></expr></argument>, <argument><expr><literal type="string">"b %d %d"</literal></expr></argument>, <argument><expr><call><name>major</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>st_rdev</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>minor</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>st_rdev</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>S_ISCHR</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>extension</name></name></expr></argument>, <argument><expr><literal type="string">"c %d %d"</literal></expr></argument>, <argument><expr><call><name>major</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>st_rdev</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>minor</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>st_rdev</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dostatfs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_statfs</name></name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>statfs</name></name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>namelen</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>L9P_FSTYPE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>bsize</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>f_bsize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>blocks</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>f_blocks</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>bfree</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>f_bfree</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>bavail</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>f_bavail</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>files</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>f_files</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>ffree</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>f_ffree</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>namelen</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>namelen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>fsid</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>f_fsid</name><operator>.</operator><name>val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>in</name><operator>-&gt;</operator><name>f_fsid</name><operator>.</operator><name>val</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>generate_qid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_qid</name></name> <modifier>*</modifier></type><name>qid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>qid</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>st_ino</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>qid</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>S_ISREG</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>qid</name><operator>-&gt;</operator><name>type</name></name> <operator>|=</operator> <name>L9P_QTFILE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>qid</name><operator>-&gt;</operator><name>type</name></name> <operator>|=</operator> <name>L9P_QTDIR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>S_ISLNK</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>qid</name><operator>-&gt;</operator><name>type</name></name> <operator>|=</operator> <name>L9P_QTSYMLINK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>fillacl</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fs_fid</name></name> <modifier>*</modifier></type><name>ff</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ff</name><operator>-&gt;</operator><name>ff_acl</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ff</name><operator>-&gt;</operator><name>ff_flags</name></name> <operator>&amp;</operator> <name>FF_NO_NFSV4_ACL</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ff</name><operator>-&gt;</operator><name>ff_acl</name></name> <operator>=</operator> <call><name>look_for_nfsv4_acl</name><argument_list>(<argument><expr><name>ff</name></expr></argument>, <argument><expr><name><name>ff</name><operator>-&gt;</operator><name>ff_fd</name></name></expr></argument>, <argument><expr><name><name>ff</name><operator>-&gt;</operator><name>ff_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ff</name><operator>-&gt;</operator><name>ff_acl</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ff</name><operator>-&gt;</operator><name>ff_flags</name></name> <operator>|=</operator> <name>FF_NO_NFSV4_ACL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name><name>struct</name> <name>l9p_acl</name></name> <modifier>*</modifier></type>
<name>getacl</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fs_fid</name></name> <modifier>*</modifier></type><name>ff</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ff</name><operator>-&gt;</operator><name>ff_flags</name></name> <operator>&amp;</operator> <name>FF_NO_NFSV4_ACL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>look_for_nfsv4_acl</name><argument_list>(<argument><expr><name>ff</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>dropacl</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fs_fid</name></name> <modifier>*</modifier></type><name>ff</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>l9p_acl_free</name><argument_list>(<argument><expr><name><name>ff</name><operator>-&gt;</operator><name>ff_acl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ff</name><operator>-&gt;</operator><name>ff_acl</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ff</name><operator>-&gt;</operator><name>ff_flags</name></name> <operator>=</operator> <name><name>ff</name><operator>-&gt;</operator><name>ff_ai</name><operator>-&gt;</operator><name>ai_flags</name></name></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name><name>struct</name> <name>l9p_acl</name></name> <modifier>*</modifier></type>
<name>look_for_nfsv4_acl</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fs_fid</name></name> <modifier>*</modifier></type><name>ff</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_acl</name></name> <modifier>*</modifier></type><name>acl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>acl_t</name></type> <name>sysacl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>doclose</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>openat</name><argument_list>(<argument><expr><name><name>ff</name><operator>-&gt;</operator><name>ff_dirfd</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>doclose</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sysacl</name> <operator>=</operator> <call><name>acl_get_fd_np</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>ACL_TYPE_NFS4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sysacl</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EINVAL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>L9P_LOG</name><argument_list>(<argument><expr><name>L9P_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"error retrieving NFSv4 ACL from "</literal>
<literal type="string">"fdesc %d (%s): %s"</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>,
<argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>doclose</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FREEBSD_ACLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>acl</name> <operator>=</operator> <call><name>l9p_freebsd_nfsv4acl_to_acl</name><argument_list>(<argument><expr><name>sysacl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>acl</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>acl_free</name><argument_list>(<argument><expr><name>sysacl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>doclose</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>acl</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>int</name></type>
<name>check_access</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>opmask</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>l9p_acl</name></name> <modifier>*</modifier></type><name>pacl</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>pst</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>l9p_acl</name></name> <modifier>*</modifier></type><name>cacl</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>cst</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>fs_authinfo</name></name> <modifier>*</modifier></type><name>ai</name></decl></parameter>, <parameter><decl><type><name>gid_t</name></type> <name>egid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_acl_check_args</name></name></type> <name>args</name></decl>;</decl_stmt>






<expr_stmt><expr><name><name>args</name><operator>.</operator><name>aca_uid</name></name> <operator>=</operator> <name><name>ai</name><operator>-&gt;</operator><name>ai_uid</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>aca_gid</name></name> <operator>=</operator> <name>egid</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>aca_groups</name></name> <operator>=</operator> <name><name>ai</name><operator>-&gt;</operator><name>ai_gids</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>aca_ngroups</name></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>ai</name><operator>-&gt;</operator><name>ai_ngids</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>aca_parent</name></name> <operator>=</operator> <name>pacl</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>aca_pstat</name></name> <operator>=</operator> <name>pst</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>aca_child</name></name> <operator>=</operator> <name>cacl</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>aca_cstat</name></name> <operator>=</operator> <name>cst</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><operator>.</operator><name>aca_aclmode</name></name> <operator>=</operator> <ternary><condition><expr><name>pacl</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>cacl</name> <operator>==</operator> <name>NULL</name></expr>
?</condition><then> <expr><name>L9P_ACM_STAT_MODE</name></expr>
</then><else>: <expr><name>L9P_ACM_NFS_ACL</name> <operator>|</operator> <name>L9P_ACM_ZFS_ACL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><operator>.</operator><name>aca_superuser</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><call><name>l9p_acl_check_access</name><argument_list>(<argument><expr><name>opmask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>fs_attach</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>softc</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>fs_authinfo</name></name> <modifier>*</modifier></type><name>ai</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>fs_softc</name></name> <modifier>*</modifier></type><name>sc</name> <init>= <expr><operator>(</operator>struct <name>fs_softc</name> <operator>*</operator><operator>)</operator><name>softc</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>fs_fid</name></name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>passwd</name></name> <modifier>*</modifier></type><name>pwd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>r_pgdata</name></name></type> <name>udata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>n_uname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gid_t</name> <modifier>*</modifier></type><name>gids</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uid_t</name></type> <name>uid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ngroups</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_fid</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fs_attach_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n_uname</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>tattach</name><operator>.</operator><name>n_uname</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n_uname</name> <operator>!=</operator> <name>L9P_NONUNAME</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>uid</name> <operator>=</operator> <operator>(</operator><name>uid_t</name><operator>)</operator><name>n_uname</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pwd</name> <operator>=</operator> <call><name>fs_getpwuid</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>udata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pwd</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>L9P_LOG</name><argument_list>(<argument><expr><name>L9P_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"Tattach: uid %ld: no such user"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>uid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>uid</name> <operator>=</operator> <operator>(</operator><name>uid_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WITH_CASPER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>pwd</name> <operator>=</operator> <call><name>cap_getpwnam</name><argument_list>(<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>fs_cappwd</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>tattach</name><operator>.</operator><name>uname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>pwd</name> <operator>=</operator> <call><name>getpwnam</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>tattach</name><operator>.</operator><name>uname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>pwd</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>L9P_LOG</name><argument_list>(<argument><expr><name>L9P_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"Tattach: %s: no such user"</literal></expr></argument>,
<argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>tattach</name><operator>.</operator><name>uname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>









<if_stmt><if>if <condition>(<expr><name>uid</name> <operator>==</operator> <operator>(</operator><name>uid_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>pwd</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>uid</name> <operator>=</operator> <name><name>pwd</name><operator>-&gt;</operator><name>pw_uid</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>uid</name> <operator>==</operator> <operator>(</operator><name>uid_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>EPERM</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fstat</name><argument_list>(<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>fs_rootfd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>ENOTDIR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fs_attach_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>L9P_LOG</name><argument_list>(<argument><expr><name>L9P_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"Tattach: denying uid=%ld access to rootdir: %s"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>uid</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<return>return <expr><operator>(</operator><ternary><condition><expr><name>error</name> <operator>==</operator> <name>ENOENT</name> <operator>||</operator> <name>error</name> <operator>==</operator> <name>ENOTDIR</name></expr> ?</condition><then> <expr><name>error</name></expr> </then><else>: <expr><name>EPERM</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pwd</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><name>gids</name> <operator>=</operator> <call><name>l9p_getgrlist</name><argument_list>(<argument><expr><name><name>pwd</name><operator>-&gt;</operator><name>pw_name</name></name></expr></argument>, <argument><expr><name><name>pwd</name><operator>-&gt;</operator><name>pw_gid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ngroups</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>gids</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ngroups</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>





<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fs_attach_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ai</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ai</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>ngroups</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>gid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ai</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>gids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ENOMEM</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ai</name><operator>-&gt;</operator><name>ai_mtx</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>gids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_refcnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_uid</name></name> <operator>=</operator> <name>uid</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_ngids</name></name> <operator>=</operator> <name>ngroups</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ai</name><operator>-&gt;</operator><name>ai_gids</name></name></expr></argument>, <argument><expr><name>gids</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>ngroups</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>gid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>gids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>open_fid</name><argument_list>(<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>fs_rootfd</name></name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>, <argument><expr><name>ai</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>file</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ai</name><operator>-&gt;</operator><name>ai_mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ENOMEM</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>lr_fid</name><operator>-&gt;</operator><name>lo_aux</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>generate_qid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>lr_resp</name><operator>.</operator><name>rattach</name><operator>.</operator><name>qid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>fs_clunk</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><name>softc</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_fid</name></name> <modifier>*</modifier></type><name>fid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>fs_fid</name></name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>

<expr_stmt><expr><name>file</name> <operator>=</operator> <name><name>fid</name><operator>-&gt;</operator><name>lo_aux</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>file</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>ff_dir</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>closedir</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>ff_dir</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>ff_fd</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>ff_fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>int</name></type>
<name>fs_create</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>softc</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_fid</name></name> <modifier>*</modifier></type><name>dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>dmperm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mode_t</name></type> <name>perm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dir</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_fid</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>tcreate</name><operator>.</operator><name>name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dmperm</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>tcreate</name><operator>.</operator><name>perm</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>perm</name> <operator>=</operator> <operator>(</operator><name>mode_t</name><operator>)</operator><operator>(</operator><name>dmperm</name> <operator>&amp;</operator> <literal type="number">0777</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dmperm</name> <operator>&amp;</operator> <name>L9P_DMDIR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fs_imkdir</name><argument_list>(<argument><expr><name>softc</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
<argument><expr><name>perm</name></expr></argument>, <argument><expr><operator>(</operator><name>gid_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>dmperm</name> <operator>&amp;</operator> <name>L9P_DMSYMLINK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fs_isymlink</name><argument_list>(<argument><expr><name>softc</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>name</name></expr></argument>,
<argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>tcreate</name><operator>.</operator><name>extension</name></name></expr></argument>, <argument><expr><operator>(</operator><name>gid_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>dmperm</name> <operator>&amp;</operator> <name>L9P_DMNAMEDPIPE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fs_imkfifo</name><argument_list>(<argument><expr><name>softc</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
<argument><expr><name>perm</name></expr></argument>, <argument><expr><operator>(</operator><name>gid_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>dmperm</name> <operator>&amp;</operator> <name>L9P_DMSOCKET</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fs_imksocket</name><argument_list>(<argument><expr><name>softc</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
<argument><expr><name>perm</name></expr></argument>, <argument><expr><operator>(</operator><name>gid_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>dmperm</name> <operator>&amp;</operator> <name>L9P_DMDEVICE</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>major</name></decl>, <decl><type ref="prev"/><name>minor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dev_t</name></type> <name>dev</name></decl>;</decl_stmt>





<expr_stmt><expr><name>minor</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>tcreate</name><operator>.</operator><name>extension</name></name></expr></argument>, <argument><expr><literal type="string">"%c %u %u"</literal></expr></argument>,
<argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>major</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>minor</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>(</operator><name>EINVAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'b'</literal></expr>:</case>
<expr_stmt><expr><name>perm</name> <operator>|=</operator> <name>S_IFBLK</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'c'</literal></expr>:</case>
<expr_stmt><expr><name>perm</name> <operator>|=</operator> <name>S_IFCHR</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><operator>(</operator><name>EINVAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><name>dev</name> <operator>=</operator> <call><name>makedev</name><argument_list>(<argument><expr><name>major</name></expr></argument>, <argument><expr><name>minor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fs_imknod</name><argument_list>(<argument><expr><name>softc</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>, <argument><expr><name>dev</name></expr></argument>,
<argument><expr><operator>(</operator><name>gid_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>l9p_omode</name></name></type> <name>p9</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p9</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>tcreate</name><operator>.</operator><name>mode</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fs_oflags_dotu</name><argument_list>(<argument><expr><name>p9</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fs_icreate</name><argument_list>(<argument><expr><name>softc</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>,
<argument><expr><name>true</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>, <argument><expr><operator>(</operator><name>gid_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>lr_resp</name><operator>.</operator><name>rcreate</name><operator>.</operator><name>iounit</name></name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_conn</name><operator>-&gt;</operator><name>lc_max_io_size</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>generate_qid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>lr_resp</name><operator>.</operator><name>rcreate</name><operator>.</operator><name>qid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>mode_t</name></type>
<name>fs_p9perm</name><parameter_list>(<parameter><decl><type><name>mode_t</name></type> <name>perm</name></decl></parameter>, <parameter><decl><type><name>mode_t</name></type> <name>dir_perm</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isdir</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>isdir</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>perm</name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">0777</literal> <operator>|</operator> <operator>(</operator><name>dir_perm</name> <operator>&amp;</operator> <literal type="number">0777</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>perm</name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">0666</literal> <operator>|</operator> <operator>(</operator><name>dir_perm</name> <operator>&amp;</operator> <literal type="number">0666</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>(</operator><name>perm</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>



















<function><type><specifier>static</specifier> <name>int</name></type>
<name>fs_icreate</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>softc</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_fid</name></name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>isp9</name></decl></parameter>, <parameter><decl><type><name>mode_t</name></type> <name>perm</name></decl></parameter>, <parameter><decl><type><name>gid_t</name></type> <name>egid</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>fs_fid</name></name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gid_t</name></type> <name>gid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uid_t</name></type> <name>uid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>newname</name><index>[<expr><name>MAXPATHLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>, <decl><type ref="prev"/><name>fd</name></decl>;</decl_stmt>

<expr_stmt><expr><name>file</name> <operator>=</operator> <name><name>dir</name><operator>-&gt;</operator><name>lo_aux</name></name></expr>;</expr_stmt>









<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fs_buildname</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>newname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>newname</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>newname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ENOMEM</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fs_nde</name><argument_list>(<argument><expr><name>softc</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>egid</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>isp9</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>perm</name> <operator>=</operator> <call><name>fs_p9perm</name><argument_list>(<argument><expr><name>perm</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>st_mode</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>openat</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_dirfd</name></name></expr></argument>, <argument><expr><name>newname</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_EXCL</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>fchmod</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>fchown</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><name>gid</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>fstat</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>ff_name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>ff_fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>


























<function><type><specifier>static</specifier> <name>int</name></type>
<name>fs_iopen</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>softc</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_fid</name></name> <modifier>*</modifier></type><name>fid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>l9p_omode</name></name></type> <name>p9</name></decl></parameter>,
<parameter><decl><type><name>gid_t</name> <name>egid</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>fs_softc</name></name> <modifier>*</modifier></type><name>sc</name> <init>= <expr><name>softc</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>fs_fid</name></name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>op</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DIR</name> <modifier>*</modifier></type><name>dirp</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>fs_readonly</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>O_TRUNC</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>EROFS</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>O_ACCMODE</name><operator>)</operator> <operator>!=</operator> <name>O_RDONLY</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>EROFS</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>p9</name> <operator>&amp;</operator> <name>L9P_ORCLOSE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>EROFS</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>file</name> <operator>=</operator> <name><name>fid</name><operator>-&gt;</operator><name>lo_aux</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>file</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>ff_name</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fstatat</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_dirfd</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>first</name></expr></argument>, <argument><expr><name>AT_SYMLINK_NOFOLLOW</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>errno</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>S_ISLNK</name><argument_list>(<argument><expr><name><name>first</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>EPERM</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<switch>switch <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>O_ACCMODE</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>O_RDONLY</name></expr>:</case>
<expr_stmt><expr><name>op</name> <operator>=</operator> <name>L9P_ACE_READ_DATA</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>O_WRONLY</name></expr>:</case>
<expr_stmt><expr><name>op</name> <operator>=</operator> <name>L9P_ACE_WRITE_DATA</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>O_RDWR</name></expr>:</case>
<expr_stmt><expr><name>op</name> <operator>=</operator> <name>L9P_ACE_READ_DATA</name> <operator>|</operator> <name>L9P_ACE_WRITE_DATA</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><operator>(</operator><name>EINVAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>fillacl</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>check_access</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_acl</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>first</name></expr></argument>,
<argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_ai</name></name></expr></argument>, <argument><expr><operator>(</operator><name>gid_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>first</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>O_ACCMODE</name><operator>)</operator> <operator>!=</operator> <name>O_RDONLY</name> <operator>||</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>O_TRUNC</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>EPERM</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>openat</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_dirfd</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>O_DIRECTORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dirp</name> <operator>=</operator> <call><name>fdopendir</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dirp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>EPERM</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>dirfd</name><argument_list>(<argument><expr><name>dirp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>dirp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>openat</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_dirfd</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>EPERM</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>





<if_stmt><if>if <condition>(<expr><call><name>fstat</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
<name><name>first</name><operator>.</operator><name>st_dev</name></name> <operator>!=</operator> <name><name>st</name><operator>-&gt;</operator><name>st_dev</name></name> <operator>||</operator>
<name><name>first</name><operator>.</operator><name>st_ino</name></name> <operator>!=</operator> <name><name>st</name><operator>-&gt;</operator><name>st_ino</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dirp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>closedir</name><argument_list>(<argument><expr><name>dirp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>(</operator><name>EPERM</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dirp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>ff_dir</name></name> <operator>=</operator> <name>dirp</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>ff_fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>int</name></type>
<name>fs_imkdir</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>softc</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_fid</name></name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>isp9</name></decl></parameter>, <parameter><decl><type><name>mode_t</name></type> <name>perm</name></decl></parameter>, <parameter><decl><type><name>gid_t</name></type> <name>egid</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>fs_fid</name></name> <modifier>*</modifier></type><name>ff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gid_t</name></type> <name>gid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uid_t</name></type> <name>uid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>newname</name><index>[<expr><name>MAXPATHLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>, <decl><type ref="prev"/><name>fd</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ff</name> <operator>=</operator> <name><name>dir</name><operator>-&gt;</operator><name>lo_aux</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fs_buildname</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>newname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>newname</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fs_nde</name><argument_list>(<argument><expr><name>softc</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>egid</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>isp9</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>perm</name> <operator>=</operator> <call><name>fs_p9perm</name><argument_list>(<argument><expr><name>perm</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>st_mode</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mkdirat</name><argument_list>(<argument><expr><name><name>ff</name><operator>-&gt;</operator><name>ff_dirfd</name></name></expr></argument>, <argument><expr><name>newname</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>errno</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>openat</name><argument_list>(<argument><expr><name><name>ff</name><operator>-&gt;</operator><name>ff_dirfd</name></name></expr></argument>, <argument><expr><name>newname</name></expr></argument>,
<argument><expr><name>O_DIRECTORY</name> <operator>|</operator> <name>O_RDONLY</name> <operator>|</operator> <name>O_NOFOLLOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>fchown</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><name>gid</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>fchmod</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>fstat</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>





<function><type><specifier>static</specifier> <name>int</name></type> <name>fs_ifchdir_thread_local</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>clang</name> <name>diagnostic</name> <name>push</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>clang</name> <name>diagnostic</name> <name>ignored</name> <cpp:literal>"-Wdeprecated-declarations"</cpp:literal></cpp:pragma>
<return>return <expr><call><name>syscall</name><argument_list>(<argument><expr><name>SYS___pthread_fchdir</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>clang</name> <name>diagnostic</name> <name>pop</name></cpp:pragma>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>fs_imknod</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>softc</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_fid</name></name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>isp9</name></decl></parameter>, <parameter><decl><type><name>mode_t</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>dev_t</name></type> <name>dev</name></decl></parameter>, <parameter><decl><type><name>gid_t</name></type> <name>egid</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>fs_fid</name></name> <modifier>*</modifier></type><name>ff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mode_t</name></type> <name>perm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gid_t</name></type> <name>gid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uid_t</name></type> <name>uid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>newname</name><index>[<expr><name>MAXPATHLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ff</name> <operator>=</operator> <name><name>dir</name><operator>-&gt;</operator><name>lo_aux</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fs_buildname</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>newname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>newname</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fs_nde</name><argument_list>(<argument><expr><name>softc</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>egid</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>isp9</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>perm</name> <operator>=</operator> <call><name>fs_p9perm</name><argument_list>(<argument><expr><name>mode</name> <operator>&amp;</operator> <literal type="number">0777</literal></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>st_mode</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <operator>(</operator><name>mode</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0777</literal><operator>)</operator> <operator>|</operator> <name>perm</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>perm</name> <operator>=</operator> <name>mode</name> <operator>&amp;</operator> <literal type="number">0777</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>fs_ifchdir_thread_local</name><argument_list>(<argument><expr><name><name>ff</name><operator>-&gt;</operator><name>ff_dirfd</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>mknod</name><argument_list>(<argument><expr><name>newname</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>preserved_errno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fs_ifchdir_thread_local</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>preserved_errno</name></expr>;</expr_stmt>
<return>return <expr><name>errno</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><call><name>mknodat</name><argument_list>(<argument><expr><name><name>ff</name><operator>-&gt;</operator><name>ff_dirfd</name></name></expr></argument>, <argument><expr><name>newname</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>dev</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>errno</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if <condition>(<expr><call><name>fchownat</name><argument_list>(<argument><expr><name><name>ff</name><operator>-&gt;</operator><name>ff_dirfd</name></name></expr></argument>, <argument><expr><name>newname</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><name>gid</name></expr></argument>, <argument><expr><name>AT_SYMLINK_NOFOLLOW</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>fchmodat</name><argument_list>(<argument><expr><name><name>ff</name><operator>-&gt;</operator><name>ff_dirfd</name></name></expr></argument>, <argument><expr><name>newname</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>, <argument><expr><name>AT_SYMLINK_NOFOLLOW</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>fstatat</name><argument_list>(<argument><expr><name><name>ff</name><operator>-&gt;</operator><name>ff_dirfd</name></name></expr></argument>, <argument><expr><name>newname</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>AT_SYMLINK_NOFOLLOW</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>st_mode</name></name> <operator>&amp;</operator> <name>S_IFMT</name><operator>)</operator> <operator>!=</operator> <operator>(</operator><name>mode</name> <operator>&amp;</operator> <name>S_IFMT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>EPERM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>fs_imkfifo</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>softc</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_fid</name></name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>isp9</name></decl></parameter>, <parameter><decl><type><name>mode_t</name></type> <name>perm</name></decl></parameter>, <parameter><decl><type><name>gid_t</name></type> <name>egid</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>fs_fid</name></name> <modifier>*</modifier></type><name>ff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gid_t</name></type> <name>gid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uid_t</name></type> <name>uid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>newname</name><index>[<expr><name>MAXPATHLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ff</name> <operator>=</operator> <name><name>dir</name><operator>-&gt;</operator><name>lo_aux</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fs_buildname</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>newname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>newname</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fs_nde</name><argument_list>(<argument><expr><name>softc</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>egid</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>isp9</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>perm</name> <operator>=</operator> <call><name>fs_p9perm</name><argument_list>(<argument><expr><name>perm</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>st_mode</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mkfifo</name><argument_list>(<argument><expr><name>newname</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>errno</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>fchownat</name><argument_list>(<argument><expr><name><name>ff</name><operator>-&gt;</operator><name>ff_dirfd</name></name></expr></argument>, <argument><expr><name>newname</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><name>gid</name></expr></argument>, <argument><expr><name>AT_SYMLINK_NOFOLLOW</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>fchmodat</name><argument_list>(<argument><expr><name><name>ff</name><operator>-&gt;</operator><name>ff_dirfd</name></name></expr></argument>, <argument><expr><name>newname</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>, <argument><expr><name>AT_SYMLINK_NOFOLLOW</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>fstatat</name><argument_list>(<argument><expr><name><name>ff</name><operator>-&gt;</operator><name>ff_dirfd</name></name></expr></argument>, <argument><expr><name>newname</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>AT_SYMLINK_NOFOLLOW</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>S_ISFIFO</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>EPERM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type>
<name>fs_imksocket</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>softc</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_fid</name></name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>bool</name></type> <name>isp9</name></decl></parameter>, <parameter><decl><type><name>mode_t</name></type> <name>perm</name></decl></parameter>, <parameter><decl><type><name>gid_t</name></type> <name>egid</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>fs_fid</name></name> <modifier>*</modifier></type><name>ff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_un</name></name></type> <name>sun</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>newname</name><index>[<expr><name>MAXPATHLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gid_t</name></type> <name>gid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uid_t</name></type> <name>uid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>s</name></decl>, <decl><type ref="prev"/><name>fd</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ff</name> <operator>=</operator> <name><name>dir</name><operator>-&gt;</operator><name>lo_aux</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fs_buildname</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>newname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>newname</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fs_nde</name><argument_list>(<argument><expr><name>softc</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>egid</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>isp9</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>perm</name> <operator>=</operator> <call><name>fs_p9perm</name><argument_list>(<argument><expr><name>perm</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>st_mode</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>AF_UNIX</name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>errno</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>path</name> <operator>=</operator> <name>newname</name></expr>;</expr_stmt>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BINDAT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>sun</name><operator>.</operator><name>sun_path</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>openat</name><argument_list>(<argument><expr><name><name>ff</name><operator>-&gt;</operator><name>ff_dirfd</name></name></expr></argument>, <argument><expr><name><name>ff</name><operator>-&gt;</operator><name>ff_name</name></name></expr></argument>,
<argument><expr><name>O_RDONLY</name> <operator>|</operator> <name>O_DIRECTORY</name> <operator>|</operator> <name>O_NOFOLLOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>path</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>











<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>sun</name><operator>.</operator><name>sun_path</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>ENAMETOOLONG</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sun</name><operator>.</operator><name>sun_family</name></name> <operator>=</operator> <name>AF_UNIX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sun</name><operator>.</operator><name>sun_len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_un</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>sun</name><operator>.</operator><name>sun_path</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sun</name><operator>.</operator><name>sun_path</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BINDAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>bindat</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sun</name></expr></argument>, <argument><expr><name><name>sun</name><operator>.</operator><name>sun_len</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>bind</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sun</name></expr></argument>, <argument><expr><name><name>sun</name><operator>.</operator><name>sun_len</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<label><name>out</name>:</label>

<if_stmt><if>if <condition>(<expr><name>error</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>






<if_stmt><if>if <condition>(<expr><call><name>fchownat</name><argument_list>(<argument><expr><name><name>ff</name><operator>-&gt;</operator><name>ff_dirfd</name></name></expr></argument>, <argument><expr><name>newname</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><name>gid</name></expr></argument>, <argument><expr><name>AT_SYMLINK_NOFOLLOW</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>fchmodat</name><argument_list>(<argument><expr><name><name>ff</name><operator>-&gt;</operator><name>ff_dirfd</name></name></expr></argument>, <argument><expr><name>newname</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>, <argument><expr><name>AT_SYMLINK_NOFOLLOW</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>fstatat</name><argument_list>(<argument><expr><name><name>ff</name><operator>-&gt;</operator><name>ff_dirfd</name></name></expr></argument>, <argument><expr><name>newname</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>AT_SYMLINK_NOFOLLOW</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>S_ISSOCK</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>EPERM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


</block_content>}</block></if></if_stmt>








<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>error</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>close</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>error</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type>
<name>fs_isymlink</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>softc</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_fid</name></name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>symtgt</name></decl></parameter>, <parameter><decl><type><name>gid_t</name></type> <name>egid</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>fs_fid</name></name> <modifier>*</modifier></type><name>ff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gid_t</name></type> <name>gid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uid_t</name></type> <name>uid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>newname</name><index>[<expr><name>MAXPATHLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ff</name> <operator>=</operator> <name><name>dir</name><operator>-&gt;</operator><name>lo_aux</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fs_buildname</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>newname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>newname</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fs_nde</name><argument_list>(<argument><expr><name>softc</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>egid</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>symlinkat</name><argument_list>(<argument><expr><name>symtgt</name></expr></argument>, <argument><expr><name><name>ff</name><operator>-&gt;</operator><name>ff_dirfd</name></name></expr></argument>, <argument><expr><name>newname</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>errno</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>fchownat</name><argument_list>(<argument><expr><name><name>ff</name><operator>-&gt;</operator><name>ff_dirfd</name></name></expr></argument>, <argument><expr><name>newname</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><name>gid</name></expr></argument>, <argument><expr><name>AT_SYMLINK_NOFOLLOW</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>fstatat</name><argument_list>(<argument><expr><name><name>ff</name><operator>-&gt;</operator><name>ff_dirfd</name></name></expr></argument>, <argument><expr><name>newname</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>AT_SYMLINK_NOFOLLOW</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>S_ISLNK</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>EPERM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>fs_open</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>softc</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_fid</name></name> <modifier>*</modifier></type><name>fid</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>lr_fid</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>l9p_omode</name></name></type> <name>p9</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>, <decl><type ref="prev"/><name>flags</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p9</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>topen</name><operator>.</operator><name>mode</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fs_oflags_dotu</name><argument_list>(<argument><expr><name>p9</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fs_iopen</name><argument_list>(<argument><expr><name>softc</name></expr></argument>, <argument><expr><name>fid</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>p9</name></expr></argument>, <argument><expr><operator>(</operator><name>gid_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>generate_qid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>lr_resp</name><operator>.</operator><name>ropen</name><operator>.</operator><name>qid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>lr_resp</name><operator>.</operator><name>ropen</name><operator>.</operator><name>iounit</name></name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_conn</name><operator>-&gt;</operator><name>lc_max_io_size</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>fs_lstatat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fs_fid</name></name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><operator>(</operator><call><name>fstatat</name><argument_list>(<argument><expr><call><name>dirfd</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_dir</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>AT_SYMLINK_NOFOLLOW</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>fs_read</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>softc</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_stat</name></name></type> <name>l9stat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>fs_softc</name></name> <modifier>*</modifier></type><name>sc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>fs_fid</name></name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>dotu</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>lr_conn</name><operator>-&gt;</operator><name>lc_version</name></name> <operator>&gt;=</operator> <name>L9P_2000U</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sc</name> <operator>=</operator> <name>softc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>file</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_fid</name><operator>-&gt;</operator><name>lo_aux</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>file</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>ff_dir</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dirent</name></name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_message</name></name></type> <name>msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>o</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>file</name><operator>-&gt;</operator><name>ff_mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>















<expr_stmt><expr><call><name>l9p_init_msg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name>L9P_PACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>telldir</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>readdir</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fs_lstatat</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>dostat</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l9stat</name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><name>dotu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>l9p_pack_stat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l9stat</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>seekdir</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_dir</name></name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>seekdir</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_dir</name></name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>readdir</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></for>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>file</name><operator>-&gt;</operator><name>ff_mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>niov</name> <init>= <expr><call><name>l9p_truncate_iov</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_data_iov</name></name></expr></argument>,
<argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_data_niov</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>io</name><operator>.</operator><name>count</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>preadv</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_fd</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_data_iov</name></name></expr></argument>, <argument><expr><name>niov</name></expr></argument>,
<argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>io</name><operator>.</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><call><name>lseek</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_fd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>off_t</name><operator>)</operator><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>io</name><operator>.</operator><name>offset</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>errno</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>readv</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_fd</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_data_iov</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>niov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>errno</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>lr_resp</name><operator>.</operator><name>io</name><operator>.</operator><name>count</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>ret</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>fs_remove</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>softc</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_fid</name></name> <modifier>*</modifier></type><name>fid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>fs_softc</name></name> <modifier>*</modifier></type><name>sc</name> <init>= <expr><name>softc</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_acl</name></name> <modifier>*</modifier></type><name>parent_acl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>fs_fid</name></name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>pst</name></decl>, <decl><type ref="prev"/><name>cst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>dirname</name><index>[<expr><name>MAXPATHLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>fs_readonly</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>EROFS</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fs_pdir</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><name>fid</name></expr></argument>, <argument><expr><name>dirname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dirname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>pst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>file</name> <operator>=</operator> <name><name>fid</name><operator>-&gt;</operator><name>lo_aux</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fstatat</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_dirfd</name></name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cst</name></expr></argument>, <argument><expr><name>AT_SYMLINK_NOFOLLOW</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>parent_acl</name> <operator>=</operator> <call><name>getacl</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>dirname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fillacl</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>check_access</name><argument_list>(<argument><expr><name>L9P_ACOP_UNLINK</name></expr></argument>,
<argument><expr><name>parent_acl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pst</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_acl</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cst</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_ai</name></name></expr></argument>, <argument><expr><operator>(</operator><name>gid_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_acl_free</name><argument_list>(<argument><expr><name>parent_acl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlinkat</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_dirfd</name></name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_name</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>cst</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>AT_REMOVEDIR</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>fs_stat</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>softc</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>fs_softc</name></name> <modifier>*</modifier></type><name>sc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>fs_fid</name></name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>dotu</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>lr_conn</name><operator>-&gt;</operator><name>lc_version</name></name> <operator>&gt;=</operator> <name>L9P_2000U</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sc</name> <operator>=</operator> <name>softc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>file</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_fid</name><operator>-&gt;</operator><name>lo_aux</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fstatat</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_dirfd</name></name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>,
<argument><expr><name>AT_SYMLINK_NOFOLLOW</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>errno</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dostat</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>lr_resp</name><operator>.</operator><name>rstat</name><operator>.</operator><name>stat</name></name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><name>dotu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>fs_walk</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>softc</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_acl</name></name> <modifier>*</modifier></type><name>acl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>fs_authinfo</name></name> <modifier>*</modifier></type><name>ai</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>fs_fid</name></name> <modifier>*</modifier></type><name>file</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>lr_fid</name><operator>-&gt;</operator><name>lo_aux</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>fs_fid</name></name> <modifier>*</modifier></type><name>newfile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>clen</name></decl>, <decl><type ref="prev"/><name>namelen</name></decl>, <decl><type ref="prev"/><name>need</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>comp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>succ</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>swtmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>atroot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>dotdot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>nwname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>namebufs</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>MAXPATHLEN</name></expr>]</index></name></decl>;</decl_stmt>































<expr_stmt><expr><name>succ</name> <operator>=</operator> <name><name>namebufs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>namebufs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>namelen</name> <operator>=</operator> <call><name>strlcpy</name><argument_list>(<argument><expr><name>succ</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_name</name></name></expr></argument>, <argument><expr><name>MAXPATHLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>namelen</name> <operator>&gt;=</operator> <name>MAXPATHLEN</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ENAMETOOLONG</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fstatat</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_dirfd</name></name></expr></argument>, <argument><expr><name>succ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><name>AT_SYMLINK_NOFOLLOW</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>errno</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ai</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>ff_ai</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>atroot</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>succ</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fillacl</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>acl</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>ff_acl</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>nwname</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>twalk</name><operator>.</operator><name>nwname</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nwname</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>







<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>ENOTDIR</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>check_access</name><argument_list>(<argument><expr><name>L9P_ACE_EXECUTE</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>acl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><name>ai</name></expr></argument>, <argument><expr><operator>(</operator><name>gid_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>L9P_LOG</name><argument_list>(<argument><expr><name>L9P_DEBUG</name></expr></argument>,
<argument><expr><literal type="string">"Twalk: denying dir-walk on \"%s\" for uid %u"</literal></expr></argument>,
<argument><expr><name>succ</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>ai</name><operator>-&gt;</operator><name>ai_uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>EPERM</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>comp</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>twalk</name><operator>.</operator><name>wname</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>comp</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>clen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dotdot</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>










<if_stmt><if>if <condition>(<expr><name><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>clen</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>comp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name>clen</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dotdot</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dotdot</name></expr>)</condition> <block>{<block_content>









<if_stmt><if>if <condition>(<expr><name>atroot</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>r_dirname</name><argument_list>(<argument><expr><name>succ</name></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><name>MAXPATHLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>namelen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>atroot</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>need</name> <operator>=</operator> <name>namelen</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>clen</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>need</name> <operator>&gt;</operator> <name>MAXPATHLEN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>ENAMETOOLONG</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name>succ</name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>next</name><index>[<expr><name>namelen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>next</name><index>[<expr><name>namelen</name></expr>]</index></name></expr></argument>, <argument><expr><name>comp</name></expr></argument>, <argument><expr><name>clen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>namelen</name> <operator>+=</operator> <name>clen</name></expr>;</expr_stmt>




<expr_stmt><expr><name>atroot</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fstatat</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_dirfd</name></name></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><name>AT_SYMLINK_NOFOLLOW</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>ENOENT</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><call><name>generate_qid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>lr_resp</name><operator>.</operator><name>rwalk</name><operator>.</operator><name>wqid</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>swtmp</name> <operator>=</operator> <name>succ</name></expr>;</expr_stmt>
<expr_stmt><expr><name>succ</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
<expr_stmt><expr><name>next</name> <operator>=</operator> <name>swtmp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>acl</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>acl</name> <operator>!=</operator> <name><name>file</name><operator>-&gt;</operator><name>ff_acl</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>l9p_acl_free</name><argument_list>(<argument><expr><name>acl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>acl</name> <operator>=</operator> <call><name>getacl</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>






<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>newfile</name> <operator>=</operator> <call><name>open_fid</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_dirfd</name></name></expr></argument>, <argument><expr><name>succ</name></expr></argument>, <argument><expr><name>ai</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>newfile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>lr_newfid</name></name> <operator>==</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_fid</name></name></expr>)</condition> <block>{<block_content>





<if_stmt><if>if <condition>(<expr><name>acl</name> <operator>==</operator> <name><name>file</name><operator>-&gt;</operator><name>ff_acl</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>acl</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fs_freefid</name><argument_list>(<argument><expr><name>softc</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_fid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>file</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>lr_newfid</name><operator>-&gt;</operator><name>lo_aux</name></name> <operator>=</operator> <name>newfile</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>file</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>acl</name> <operator>!=</operator> <name><name>file</name><operator>-&gt;</operator><name>ff_acl</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>newfile</name><operator>-&gt;</operator><name>ff_acl</name></name> <operator>=</operator> <name>acl</name></expr>;</expr_stmt>
<expr_stmt><expr><name>acl</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>lr_resp</name><operator>.</operator><name>rwalk</name><operator>.</operator><name>nwqid</name></name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><name>i</name></expr>;</expr_stmt>
<label><name>out</name>:</label>
<if_stmt><if>if <condition>(<expr><name>file</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>acl</name> <operator>!=</operator> <name><name>file</name><operator>-&gt;</operator><name>ff_acl</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>l9p_acl_free</name><argument_list>(<argument><expr><name>acl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>fs_write</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>softc</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>fs_softc</name></name> <modifier>*</modifier></type><name>sc</name> <init>= <expr><name>softc</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>fs_fid</name></name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>file</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_fid</name><operator>-&gt;</operator><name>lo_aux</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>file</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>fs_readonly</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>EROFS</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>niov</name> <init>= <expr><call><name>l9p_truncate_iov</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_data_iov</name></name></expr></argument>,
<argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_data_niov</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>io</name><operator>.</operator><name>count</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pwritev</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_fd</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_data_iov</name></name></expr></argument>, <argument><expr><name>niov</name></expr></argument>,
<argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>io</name><operator>.</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><call><name>lseek</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_fd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>off_t</name><operator>)</operator><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>io</name><operator>.</operator><name>offset</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>errno</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>writev</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_fd</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_data_iov</name></name></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>niov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>errno</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>lr_resp</name><operator>.</operator><name>io</name><operator>.</operator><name>count</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>ret</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>fs_wstat</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>softc</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>fs_softc</name></name> <modifier>*</modifier></type><name>sc</name> <init>= <expr><name>softc</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_stat</name></name> <modifier>*</modifier></type><name>l9stat</name> <init>= <expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>twstat</name><operator>.</operator><name>stat</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_fid</name></name> <modifier>*</modifier></type><name>fid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>fs_fid</name></name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>fid</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_fid</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>file</name> <operator>=</operator> <name><name>fid</name><operator>-&gt;</operator><name>lo_aux</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>file</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>













<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>fs_readonly</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>EROFS</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>l9stat</name><operator>-&gt;</operator><name>atime</name></name> <operator>!=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>~</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>l9stat</name><operator>-&gt;</operator><name>mtime</name></name> <operator>!=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>~</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>l9stat</name><operator>-&gt;</operator><name>dev</name></name> <operator>!=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>~</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>EPERM</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>l9stat</name><operator>-&gt;</operator><name>length</name></name> <operator>!=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>~</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>ff_dir</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>truncate</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_name</name></name></expr></argument>, <argument><expr><operator>(</operator><name>off_t</name><operator>)</operator><name><name>l9stat</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>lr_conn</name><operator>-&gt;</operator><name>lc_version</name></name> <operator>&gt;=</operator> <name>L9P_2000U</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>fchownat</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_dirfd</name></name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_name</name></name></expr></argument>, <argument><expr><name><name>l9stat</name><operator>-&gt;</operator><name>n_uid</name></name></expr></argument>,
<argument><expr><name><name>l9stat</name><operator>-&gt;</operator><name>n_gid</name></name></expr></argument>, <argument><expr><name>AT_SYMLINK_NOFOLLOW</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>l9stat</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>~</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>fchmodat</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_dirfd</name></name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_name</name></name></expr></argument>,
<argument><expr><name><name>l9stat</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <literal type="number">0777</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>l9stat</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_acl</name></name> <modifier>*</modifier></type><name>parent_acl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>newname</name><index>[<expr><name>MAXPATHLEN</name></expr>]</index></name></decl>;</decl_stmt>






<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fs_pdir</name><argument_list>(<argument><expr><name>softc</name></expr></argument>, <argument><expr><name>fid</name></expr></argument>, <argument><expr><name>newname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>newname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>parent_acl</name> <operator>=</operator> <call><name>getacl</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>newname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>check_access</name><argument_list>(<argument><expr><name>L9P_ACE_ADD_FILE</name></expr></argument>,
<argument><expr><name>parent_acl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_ai</name></name></expr></argument>, <argument><expr><operator>(</operator><name>gid_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_acl_free</name><argument_list>(<argument><expr><name>parent_acl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fs_dpf</name><argument_list>(<argument><expr><name>newname</name></expr></argument>, <argument><expr><name><name>l9stat</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>newname</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>newname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>renameat</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_dirfd</name></name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_name</name></name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_dirfd</name></name></expr></argument>,
<argument><expr><name>tmp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>ff_name</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<label><name>out</name>:</label>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>fs_statfs</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><name>softc</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>fs_fid</name></name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>statfs</name></name></type> <name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>name_max</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

<expr_stmt><expr><name>file</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_fid</name><operator>-&gt;</operator><name>lo_aux</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fstatat</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_dirfd</name></name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>,
<argument><expr><name>AT_SYMLINK_NOFOLLOW</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>errno</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>





<expr_stmt><expr><call><name>fillacl</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>check_access</name><argument_list>(<argument><expr><name>L9P_ACE_READ_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_acl</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_ai</name></name></expr></argument>, <argument><expr><operator>(</operator><name>gid_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>openat</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_dirfd</name></name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_name</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>errno</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fstatfs</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>errno</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>name_max</name> <operator>=</operator> <call><name>fpathconf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>_PC_NAME_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>name_max</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dostatfs</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>lr_resp</name><operator>.</operator><name>rstatfs</name><operator>.</operator><name>statfs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument>, <argument><expr><name>name_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>fs_lopen</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>softc</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_fid</name></name> <modifier>*</modifier></type><name>fid</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>lr_fid</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>l9p_omode</name></name></type> <name>p9</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gid_t</name></type> <name>gid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>, <decl><type ref="prev"/><name>flags</name></decl>;</decl_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fs_oflags_dotl</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>tlopen</name><operator>.</operator><name>flags</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>gid</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>tlopen</name><operator>.</operator><name>gid</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fs_iopen</name><argument_list>(<argument><expr><name>softc</name></expr></argument>, <argument><expr><name>fid</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>p9</name></expr></argument>, <argument><expr><name>gid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>generate_qid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>lr_resp</name><operator>.</operator><name>rlopen</name><operator>.</operator><name>qid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>lr_resp</name><operator>.</operator><name>rlopen</name><operator>.</operator><name>iounit</name></name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_conn</name><operator>-&gt;</operator><name>lc_max_io_size</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>fs_lcreate</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>softc</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_fid</name></name> <modifier>*</modifier></type><name>dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>l9p_omode</name></name></type> <name>p9</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mode_t</name></type> <name>perm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gid_t</name></type> <name>gid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>, <decl><type ref="prev"/><name>flags</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dir</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_fid</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>tlcreate</name><operator>.</operator><name>name</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fs_oflags_dotl</name><argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>tlcreate</name><operator>.</operator><name>flags</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>perm</name> <operator>=</operator> <operator>(</operator><name>mode_t</name><operator>)</operator><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>tlcreate</name><operator>.</operator><name>mode</name></name> <operator>&amp;</operator> <literal type="number">0777</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>gid</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>tlcreate</name><operator>.</operator><name>gid</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fs_icreate</name><argument_list>(<argument><expr><name>softc</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>, <argument><expr><name>gid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>generate_qid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>lr_resp</name><operator>.</operator><name>rlcreate</name><operator>.</operator><name>qid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>lr_resp</name><operator>.</operator><name>rlcreate</name><operator>.</operator><name>iounit</name></name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_conn</name><operator>-&gt;</operator><name>lc_max_io_size</name></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>fs_symlink</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>softc</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_fid</name></name> <modifier>*</modifier></type><name>dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gid_t</name></type> <name>gid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>symtgt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dir</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_fid</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>tsymlink</name><operator>.</operator><name>name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>symtgt</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>tsymlink</name><operator>.</operator><name>symtgt</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>gid</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>tsymlink</name><operator>.</operator><name>gid</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fs_isymlink</name><argument_list>(<argument><expr><name>softc</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>symtgt</name></expr></argument>, <argument><expr><name>gid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>generate_qid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>lr_resp</name><operator>.</operator><name>rsymlink</name><operator>.</operator><name>qid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>fs_mknod</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>softc</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_fid</name></name> <modifier>*</modifier></type><name>dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>mode</name></decl>, <decl><type ref="prev"/><name>major</name></decl>, <decl><type ref="prev"/><name>minor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dev_t</name></type> <name>dev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gid_t</name></type> <name>gid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dir</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_fid</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>tmknod</name><operator>.</operator><name>name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>tmknod</name><operator>.</operator><name>mode</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>gid</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>tmknod</name><operator>.</operator><name>gid</name></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>mode</name> <operator>&amp;</operator> <name>S_IFMT</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>S_IFBLK</name></expr>:</case>
<case>case <expr><name>S_IFCHR</name></expr>:</case>
<expr_stmt><expr><name>mode</name> <operator>=</operator> <operator>(</operator><name>mode</name> <operator>&amp;</operator> <name>S_IFMT</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>mode</name> <operator>&amp;</operator> <literal type="number">0777</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>major</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>tmknod</name><operator>.</operator><name>major</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>minor</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>tmknod</name><operator>.</operator><name>major</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dev</name> <operator>=</operator> <call><name>makedev</name><argument_list>(<argument><expr><name>major</name></expr></argument>, <argument><expr><name>minor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fs_imknod</name><argument_list>(<argument><expr><name>softc</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
<argument><expr><operator>(</operator><name>mode_t</name><operator>)</operator><name>mode</name></expr></argument>, <argument><expr><name>dev</name></expr></argument>, <argument><expr><name>gid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>S_IFIFO</name></expr>:</case>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fs_imkfifo</name><argument_list>(<argument><expr><name>softc</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
<argument><expr><operator>(</operator><name>mode_t</name><operator>)</operator><operator>(</operator><name>mode</name> <operator>&amp;</operator> <literal type="number">0777</literal><operator>)</operator></expr></argument>, <argument><expr><name>gid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>S_IFSOCK</name></expr>:</case>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fs_imksocket</name><argument_list>(<argument><expr><name>softc</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
<argument><expr><operator>(</operator><name>mode_t</name><operator>)</operator><operator>(</operator><name>mode</name> <operator>&amp;</operator> <literal type="number">0777</literal><operator>)</operator></expr></argument>, <argument><expr><name>gid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>error</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>generate_qid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>lr_resp</name><operator>.</operator><name>rmknod</name><operator>.</operator><name>qid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>fs_rename</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>softc</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>fs_softc</name></name> <modifier>*</modifier></type><name>sc</name> <init>= <expr><name>softc</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>fs_authinfo</name></name> <modifier>*</modifier></type><name>ai</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_acl</name></name> <modifier>*</modifier></type><name>oparent_acl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_fid</name></name> <modifier>*</modifier></type><name>fid</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>f2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>fs_fid</name></name> <modifier>*</modifier></type><name>file</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>f2ff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>cst</name></decl>, <decl><type ref="prev"/><name>opst</name></decl>, <decl><type ref="prev"/><name>npst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>op</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>reparenting</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>olddir</name><index>[<expr><name>MAXPATHLEN</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>newname</name><index>[<expr><name>MAXPATHLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>fs_readonly</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>EROFS</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>








<expr_stmt><expr><name>fid</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_fid</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>file</name> <operator>=</operator> <name><name>fid</name><operator>-&gt;</operator><name>lo_aux</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>file</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ai</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>ff_ai</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fs_pdir</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><name>fid</name></expr></argument>, <argument><expr><name>olddir</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>olddir</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>opst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>f2</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_fid2</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>f2ff</name> <operator>=</operator> <name><name>f2</name><operator>-&gt;</operator><name>lo_aux</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>f2ff</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>reparenting</name> <operator>=</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>olddir</name></expr></argument>, <argument><expr><name><name>f2ff</name><operator>-&gt;</operator><name>ff_name</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fillacl</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fillacl</name><argument_list>(<argument><expr><name>f2ff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fstatat</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_dirfd</name></name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cst</name></expr></argument>,
<argument><expr><name>AT_SYMLINK_NOFOLLOW</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>errno</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>reparenting</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>oparent_acl</name> <operator>=</operator> <call><name>getacl</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>olddir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>check_access</name><argument_list>(<argument><expr><name>L9P_ACOP_UNLINK</name></expr></argument>,
<argument><expr><name>oparent_acl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opst</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_acl</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cst</name></expr></argument>, <argument><expr><name>ai</name></expr></argument>, <argument><expr><operator>(</operator><name>gid_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_acl_free</name><argument_list>(<argument><expr><name>oparent_acl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><call><name>fstatat</name><argument_list>(<argument><expr><name><name>f2ff</name><operator>-&gt;</operator><name>ff_dirfd</name></name></expr></argument>, <argument><expr><name><name>f2ff</name><operator>-&gt;</operator><name>ff_name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>npst</name></expr></argument>,
<argument><expr><name>AT_SYMLINK_NOFOLLOW</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>errno</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>op</name> <operator>=</operator> <ternary><condition><expr><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>cst</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>L9P_ACE_ADD_SUBDIRECTORY</name></expr> </then><else>: <expr><name>L9P_ACE_ADD_FILE</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>check_access</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name><name>f2ff</name><operator>-&gt;</operator><name>ff_acl</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>npst</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>ai</name></expr></argument>, <argument><expr><operator>(</operator><name>gid_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>newname</name></expr></argument>, <argument><expr><name><name>f2ff</name><operator>-&gt;</operator><name>ff_name</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>newname</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>newname</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ENAMETOOLONG</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fs_dpf</name><argument_list>(<argument><expr><name>newname</name></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>trename</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>newname</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>newname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ENOMEM</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>renameat</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_dirfd</name></name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_name</name></name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_dirfd</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>ff_name</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dropacl</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>fs_readlink</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><name>softc</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>fs_fid</name></name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>linklen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>MAXPATHLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>file</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_fid</name><operator>-&gt;</operator><name>lo_aux</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>linklen</name> <operator>=</operator> <call><name>readlinkat</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_dirfd</name></name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_name</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>linklen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name>linklen</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>req</name><operator>-&gt;</operator><name>lr_resp</name><operator>.</operator><name>rreadlink</name><operator>.</operator><name>target</name></name> <operator>=</operator> <call><name>strndup</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,
<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>linklen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>fs_getattr</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><name>softc</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>mask</name></decl>, <decl><type ref="prev"/><name>valid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>fs_fid</name></name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>file</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_fid</name><operator>-&gt;</operator><name>lo_aux</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>valid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fstatat</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_dirfd</name></name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><name>AT_SYMLINK_NOFOLLOW</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>tgetattr</name><operator>.</operator><name>request_mask</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>L9PL_GETATTR_MODE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>lr_resp</name><operator>.</operator><name>rgetattr</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <name><name>st</name><operator>.</operator><name>st_mode</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>valid</name> <operator>|=</operator> <name>L9PL_GETATTR_MODE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>L9PL_GETATTR_NLINK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>lr_resp</name><operator>.</operator><name>rgetattr</name><operator>.</operator><name>nlink</name></name> <operator>=</operator> <name><name>st</name><operator>.</operator><name>st_nlink</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>valid</name> <operator>|=</operator> <name>L9PL_GETATTR_NLINK</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>L9PL_GETATTR_UID</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>lr_resp</name><operator>.</operator><name>rgetattr</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <name><name>st</name><operator>.</operator><name>st_uid</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>valid</name> <operator>|=</operator> <name>L9PL_GETATTR_UID</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>L9PL_GETATTR_GID</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>lr_resp</name><operator>.</operator><name>rgetattr</name><operator>.</operator><name>gid</name></name> <operator>=</operator> <name><name>st</name><operator>.</operator><name>st_gid</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>valid</name> <operator>|=</operator> <name>L9PL_GETATTR_GID</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>L9PL_GETATTR_RDEV</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>lr_resp</name><operator>.</operator><name>rgetattr</name><operator>.</operator><name>rdev</name></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_rdev</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>valid</name> <operator>|=</operator> <name>L9PL_GETATTR_RDEV</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>L9PL_GETATTR_ATIME</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>lr_resp</name><operator>.</operator><name>rgetattr</name><operator>.</operator><name>atime_sec</name></name> <operator>=</operator>
<operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_atimespec</name><operator>.</operator><name>tv_sec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>lr_resp</name><operator>.</operator><name>rgetattr</name><operator>.</operator><name>atime_nsec</name></name> <operator>=</operator>
<operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_atimespec</name><operator>.</operator><name>tv_nsec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>valid</name> <operator>|=</operator> <name>L9PL_GETATTR_ATIME</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>L9PL_GETATTR_MTIME</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>lr_resp</name><operator>.</operator><name>rgetattr</name><operator>.</operator><name>mtime_sec</name></name> <operator>=</operator>
<operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_mtimespec</name><operator>.</operator><name>tv_sec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>lr_resp</name><operator>.</operator><name>rgetattr</name><operator>.</operator><name>mtime_nsec</name></name> <operator>=</operator>
<operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_mtimespec</name><operator>.</operator><name>tv_nsec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>valid</name> <operator>|=</operator> <name>L9PL_GETATTR_MTIME</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>L9PL_GETATTR_CTIME</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>lr_resp</name><operator>.</operator><name>rgetattr</name><operator>.</operator><name>ctime_sec</name></name> <operator>=</operator>
<operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_ctimespec</name><operator>.</operator><name>tv_sec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>lr_resp</name><operator>.</operator><name>rgetattr</name><operator>.</operator><name>ctime_nsec</name></name> <operator>=</operator>
<operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_ctimespec</name><operator>.</operator><name>tv_nsec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>valid</name> <operator>|=</operator> <name>L9PL_GETATTR_CTIME</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>L9PL_GETATTR_BTIME</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BIRTHTIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>lr_resp</name><operator>.</operator><name>rgetattr</name><operator>.</operator><name>btime_sec</name></name> <operator>=</operator>
<operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_birthtim</name><operator>.</operator><name>tv_sec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>lr_resp</name><operator>.</operator><name>rgetattr</name><operator>.</operator><name>btime_nsec</name></name> <operator>=</operator>
<operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_birthtim</name><operator>.</operator><name>tv_nsec</name></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>lr_resp</name><operator>.</operator><name>rgetattr</name><operator>.</operator><name>btime_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>lr_resp</name><operator>.</operator><name>rgetattr</name><operator>.</operator><name>btime_nsec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>valid</name> <operator>|=</operator> <name>L9PL_GETATTR_BTIME</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>L9PL_GETATTR_INO</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>valid</name> <operator>|=</operator> <name>L9PL_GETATTR_INO</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>L9PL_GETATTR_SIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>lr_resp</name><operator>.</operator><name>rgetattr</name><operator>.</operator><name>size</name></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>valid</name> <operator>|=</operator> <name>L9PL_GETATTR_SIZE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>L9PL_GETATTR_BLOCKS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>lr_resp</name><operator>.</operator><name>rgetattr</name><operator>.</operator><name>blksize</name></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_blksize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>lr_resp</name><operator>.</operator><name>rgetattr</name><operator>.</operator><name>blocks</name></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_blocks</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>valid</name> <operator>|=</operator> <name>L9PL_GETATTR_BLOCKS</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>L9PL_GETATTR_GEN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>lr_resp</name><operator>.</operator><name>rgetattr</name><operator>.</operator><name>gen</name></name> <operator>=</operator> <name><name>st</name><operator>.</operator><name>st_gen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>valid</name> <operator>|=</operator> <name>L9PL_GETATTR_GEN</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>generate_qid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>lr_resp</name><operator>.</operator><name>rgetattr</name><operator>.</operator><name>qid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>out</name>:</label>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>lr_resp</name><operator>.</operator><name>rgetattr</name><operator>.</operator><name>valid</name></name> <operator>=</operator> <name>valid</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>fs_setattr</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>softc</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>fs_softc</name></name> <modifier>*</modifier></type><name>sc</name> <init>= <expr><name>softc</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name><name>ts</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>fs_fid</name></name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uid_t</name></type> <name>uid</name></decl>, <decl><type ref="prev"/><name>gid</name></decl>;</decl_stmt>

<expr_stmt><expr><name>file</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_fid</name><operator>-&gt;</operator><name>lo_aux</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>fs_readonly</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>EROFS</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><name>mask</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>tsetattr</name><operator>.</operator><name>valid</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fstatat</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_dirfd</name></name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><name>AT_SYMLINK_NOFOLLOW</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mask</name> <operator>&amp;</operator> <name>L9PL_SETATTR_SIZE</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>EISDIR</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>L9PL_SETATTR_MODE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>fchmodat</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_dirfd</name></name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_name</name></name></expr></argument>,
<argument><expr><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>tsetattr</name><operator>.</operator><name>mode</name></name> <operator>&amp;</operator> <literal type="number">0777</literal></expr></argument>,
<argument><expr><name>AT_SYMLINK_NOFOLLOW</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <operator>(</operator><name>L9PL_SETATTR_UID</name> <operator>|</operator> <name>L9PL_SETATTR_GID</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>uid</name> <operator>=</operator> <ternary><condition><expr><name>mask</name> <operator>&amp;</operator> <name>L9PL_SETATTR_UID</name></expr>
?</condition><then> <expr><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>tsetattr</name><operator>.</operator><name>uid</name></name></expr>
</then><else>: <expr><operator>(</operator><name>uid_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>gid</name> <operator>=</operator> <ternary><condition><expr><name>mask</name> <operator>&amp;</operator> <name>L9PL_SETATTR_GID</name></expr>
?</condition><then> <expr><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>tsetattr</name><operator>.</operator><name>gid</name></name></expr>
</then><else>: <expr><operator>(</operator><name>gid_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fchownat</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_dirfd</name></name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_name</name></name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><name>gid</name></expr></argument>,
<argument><expr><name>AT_SYMLINK_NOFOLLOW</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>L9PL_SETATTR_SIZE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>openat</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_dirfd</name></name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_name</name></name></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ftruncate</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>off_t</name><operator>)</operator><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>tsetattr</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <operator>(</operator><name>L9PL_SETATTR_ATIME</name> <operator>|</operator> <name>L9PL_SETATTR_MTIME</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>tv_sec</name> <operator>=</operator> <name><name>st</name><operator>.</operator><name>st_atimespec</name><operator>.</operator><name>tv_sec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>tv_nsec</name> <operator>=</operator> <name><name>st</name><operator>.</operator><name>st_atimespec</name><operator>.</operator><name>tv_nsec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>tv_sec</name> <operator>=</operator> <name><name>st</name><operator>.</operator><name>st_mtimespec</name><operator>.</operator><name>tv_sec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>tv_nsec</name> <operator>=</operator> <name><name>st</name><operator>.</operator><name>st_mtimespec</name><operator>.</operator><name>tv_nsec</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>L9PL_SETATTR_ATIME</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>L9PL_SETATTR_ATIME_SET</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>tv_sec</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>tsetattr</name><operator>.</operator><name>atime_sec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>tv_nsec</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>tsetattr</name><operator>.</operator><name>atime_nsec</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>clock_gettime</name><argument_list>(<argument><expr><name>CLOCK_REALTIME</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>L9PL_SETATTR_MTIME</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name>L9PL_SETATTR_MTIME_SET</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>tv_sec</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>tsetattr</name><operator>.</operator><name>mtime_sec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>tv_nsec</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>tsetattr</name><operator>.</operator><name>mtime_nsec</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>clock_gettime</name><argument_list>(<argument><expr><name>CLOCK_REALTIME</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>utimensat</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_dirfd</name></name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_name</name></name></expr></argument>, <argument><expr><name>ts</name></expr></argument>,
<argument><expr><name>AT_SYMLINK_NOFOLLOW</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<label><name>out</name>:</label>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>fs_xattrwalk</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><name>softc</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier><name>req</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>EOPNOTSUPP</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>fs_xattrcreate</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><name>softc</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier><name>req</name></type> <name>__unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name>EOPNOTSUPP</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>fs_readdir</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><name>softc</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_message</name></name></type> <name>msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_dirent</name></name></type> <name>de</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>fs_fid</name></name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dirent</name></name> <modifier>*</modifier></type><name>dp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>file</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_fid</name><operator>-&gt;</operator><name>lo_aux</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>ff_dir</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ENOTDIR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>file</name><operator>-&gt;</operator><name>ff_mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>












<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>io</name><operator>.</operator><name>offset</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rewinddir</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>seekdir</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_dir</name></name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>io</name><operator>.</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>l9p_init_msg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name>L9P_PACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>msg</name><operator>.</operator><name>lm_size</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>dp</name> <operator>=</operator> <call><name>readdir</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_dir</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>













<if_stmt><if>if <condition>(<expr><call><name>fs_lstatat</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name><name>dp</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>de</name><operator>.</operator><name>qid</name><operator>.</operator><name>type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>generate_qid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>de</name><operator>.</operator><name>qid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>de</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>telldir</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>de</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>dp</name><operator>-&gt;</operator><name>d_type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>de</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name><name>dp</name><operator>-&gt;</operator><name>d_name</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>l9p_pudirent</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>de</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>count</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>msg</name><operator>.</operator><name>lm_size</name></name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>file</name><operator>-&gt;</operator><name>ff_mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>lr_resp</name><operator>.</operator><name>io</name><operator>.</operator><name>count</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>fs_fsync</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><name>softc</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>fs_fid</name></name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>file</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_fid</name><operator>-&gt;</operator><name>lo_aux</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fsync</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>file</name><operator>-&gt;</operator><name>ff_dir</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><call><name>dirfd</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_dir</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>file</name><operator>-&gt;</operator><name>ff_fd</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>fs_lock</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><name>softc</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<switch>switch <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>tlock</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>L9PL_LOCK_TYPE_RDLOCK</name></expr>:</case>
<case>case <expr><name>L9PL_LOCK_TYPE_WRLOCK</name></expr>:</case>
<case>case <expr><name>L9PL_LOCK_TYPE_UNLOCK</name></expr>:</case>
<break>break;</break>
<default>default:</default>
<return>return <expr><operator>(</operator><name>EINVAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>lr_resp</name><operator>.</operator><name>rlock</name><operator>.</operator><name>status</name></name> <operator>=</operator> <name>L9PL_LOCK_SUCCESS</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>fs_getlock</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><name>softc</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>







<switch>switch <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>getlock</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>L9PL_LOCK_TYPE_RDLOCK</name></expr>:</case>
<case>case <expr><name>L9PL_LOCK_TYPE_WRLOCK</name></expr>:</case>
<case>case <expr><name>L9PL_LOCK_TYPE_UNLOCK</name></expr>:</case>
<break>break;</break>
<default>default:</default>
<return>return <expr><operator>(</operator><name>EINVAL</name><operator>)</operator></expr>;</return>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>lr_resp</name><operator>.</operator><name>getlock</name></name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>getlock</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>lr_resp</name><operator>.</operator><name>getlock</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>L9PL_LOCK_TYPE_UNLOCK</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>lr_resp</name><operator>.</operator><name>getlock</name><operator>.</operator><name>client_id</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>fs_link</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><name>softc</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_fid</name></name> <modifier>*</modifier></type><name>dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>fs_fid</name></name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>fs_fid</name></name> <modifier>*</modifier></type><name>dirf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>fst</name></decl>, <decl><type ref="prev"/><name>tdst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>op</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>newname</name><index>[<expr><name>MAXPATHLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>


<expr_stmt><expr><name>dir</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_fid2</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dirf</name> <operator>=</operator> <name><name>dir</name><operator>-&gt;</operator><name>lo_aux</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dirf</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>tlink</name><operator>.</operator><name>name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fs_buildname</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>newname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>newname</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>file</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_fid</name><operator>-&gt;</operator><name>lo_aux</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>file</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fstatat</name><argument_list>(<argument><expr><name><name>dirf</name><operator>-&gt;</operator><name>ff_dirfd</name></name></expr></argument>, <argument><expr><name><name>dirf</name><operator>-&gt;</operator><name>ff_name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tdst</name></expr></argument>, <argument><expr><name>AT_SYMLINK_NOFOLLOW</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>fstatat</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_dirfd</name></name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fst</name></expr></argument>, <argument><expr><name>AT_SYMLINK_NOFOLLOW</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>errno</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>fst</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>EISDIR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fillacl</name><argument_list>(<argument><expr><name>dirf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>op</name> <operator>=</operator> <ternary><condition><expr><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>fst</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>L9P_ACE_ADD_SUBDIRECTORY</name></expr> </then><else>: <expr><name>L9P_ACE_ADD_FILE</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>check_access</name><argument_list>(<argument><expr><name>op</name></expr></argument>,
<argument><expr><name><name>dirf</name><operator>-&gt;</operator><name>ff_acl</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tdst</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_ai</name></name></expr></argument>, <argument><expr><operator>(</operator><name>gid_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>linkat</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_dirfd</name></name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_name</name></name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>ff_dirfd</name></name></expr></argument>,
<argument><expr><name>newname</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dropacl</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>fs_mkdir</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>softc</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_fid</name></name> <modifier>*</modifier></type><name>dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mode_t</name></type> <name>perm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gid_t</name></type> <name>gid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dir</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_fid</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>tmkdir</name><operator>.</operator><name>name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>perm</name> <operator>=</operator> <operator>(</operator><name>mode_t</name><operator>)</operator><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>tmkdir</name><operator>.</operator><name>mode</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>gid</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>tmkdir</name><operator>.</operator><name>gid</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fs_imkdir</name><argument_list>(<argument><expr><name>softc</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>, <argument><expr><name>gid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>generate_qid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>lr_resp</name><operator>.</operator><name>rmkdir</name><operator>.</operator><name>qid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>fs_renameat</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>softc</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>fs_softc</name></name> <modifier>*</modifier></type><name>sc</name> <init>= <expr><name>softc</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_fid</name></name> <modifier>*</modifier></type><name>olddir</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>newdir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_acl</name></name> <modifier>*</modifier></type><name>facl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>fs_fid</name></name> <modifier>*</modifier></type><name>off</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>nff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>odst</name></decl>, <decl><type ref="prev"/><name>ndst</name></decl>, <decl><type ref="prev"/><name>fst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>op</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>reparenting</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>onp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>nnp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>onb</name><index>[<expr><name>MAXPATHLEN</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>nnb</name><index>[<expr><name>MAXPATHLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>fs_readonly</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>EROFS</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>olddir</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_fid</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>newdir</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_fid2</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>olddir</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>newdir</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>off</name> <operator>=</operator> <name><name>olddir</name><operator>-&gt;</operator><name>lo_aux</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>nff</name> <operator>=</operator> <name><name>newdir</name><operator>-&gt;</operator><name>lo_aux</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>off</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>nff</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>onp</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>trenameat</name><operator>.</operator><name>oldname</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>nnp</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>trenameat</name><operator>.</operator><name>newname</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fs_buildname</name><argument_list>(<argument><expr><name>olddir</name></expr></argument>, <argument><expr><name>onp</name></expr></argument>, <argument><expr><name>onb</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>onb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fs_buildname</name><argument_list>(<argument><expr><name>newdir</name></expr></argument>, <argument><expr><name>nnp</name></expr></argument>, <argument><expr><name>nnb</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nnb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fstatat</name><argument_list>(<argument><expr><name><name>off</name><operator>-&gt;</operator><name>ff_dirfd</name></name></expr></argument>, <argument><expr><name>onb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fst</name></expr></argument>, <argument><expr><name>AT_SYMLINK_NOFOLLOW</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>errno</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>reparenting</name> <operator>=</operator> <name>olddir</name> <operator>!=</operator> <name>newdir</name> <operator>&amp;&amp;</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>off</name><operator>-&gt;</operator><name>ff_name</name></name></expr></argument>, <argument><expr><name><name>nff</name><operator>-&gt;</operator><name>ff_name</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fstatat</name><argument_list>(<argument><expr><name><name>off</name><operator>-&gt;</operator><name>ff_dirfd</name></name></expr></argument>, <argument><expr><name><name>off</name><operator>-&gt;</operator><name>ff_name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>odst</name></expr></argument>, <argument><expr><name>AT_SYMLINK_NOFOLLOW</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>errno</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>odst</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ENOTDIR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fillacl</name><argument_list>(<argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>reparenting</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>fstatat</name><argument_list>(<argument><expr><name><name>nff</name><operator>-&gt;</operator><name>ff_dirfd</name></name></expr></argument>, <argument><expr><name><name>nff</name><operator>-&gt;</operator><name>ff_name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ndst</name></expr></argument>, <argument><expr><name>AT_SYMLINK_NOFOLLOW</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>errno</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>ndst</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>ENOTDIR</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>facl</name> <operator>=</operator> <call><name>getacl</name><argument_list>(<argument><expr><name>off</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>onb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fillacl</name><argument_list>(<argument><expr><name>nff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>check_access</name><argument_list>(<argument><expr><name>L9P_ACOP_UNLINK</name></expr></argument>,
<argument><expr><name><name>off</name><operator>-&gt;</operator><name>ff_acl</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>odst</name></expr></argument>, <argument><expr><name>facl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fst</name></expr></argument>, <argument><expr><name><name>off</name><operator>-&gt;</operator><name>ff_ai</name></name></expr></argument>, <argument><expr><operator>(</operator><name>gid_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_acl_free</name><argument_list>(<argument><expr><name>facl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>op</name> <operator>=</operator> <ternary><condition><expr><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>fst</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>L9P_ACE_ADD_SUBDIRECTORY</name></expr> </then><else>:
<expr><name>L9P_ACE_ADD_FILE</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>check_access</name><argument_list>(<argument><expr><name>op</name></expr></argument>,
<argument><expr><name><name>nff</name><operator>-&gt;</operator><name>ff_acl</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ndst</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>nff</name><operator>-&gt;</operator><name>ff_ai</name></name></expr></argument>, <argument><expr><operator>(</operator><name>gid_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>renameat</name><argument_list>(<argument><expr><name><name>off</name><operator>-&gt;</operator><name>ff_dirfd</name></name></expr></argument>, <argument><expr><name>onb</name></expr></argument>, <argument><expr><name><name>nff</name><operator>-&gt;</operator><name>ff_dirfd</name></name></expr></argument>, <argument><expr><name>nnb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>fs_unlinkat</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>softc</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_request</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>fs_softc</name></name> <modifier>*</modifier></type><name>sc</name> <init>= <expr><name>softc</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_acl</name></name> <modifier>*</modifier></type><name>facl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_fid</name></name> <modifier>*</modifier></type><name>dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>fs_fid</name></name> <modifier>*</modifier></type><name>dirff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>dirst</name></decl>, <decl><type ref="prev"/><name>fst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>newname</name><index>[<expr><name>MAXPATHLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>fs_readonly</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>EROFS</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dir</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_fid</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dirff</name> <operator>=</operator> <name><name>dir</name><operator>-&gt;</operator><name>lo_aux</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dirff</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>tunlinkat</name><operator>.</operator><name>name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>fs_buildname</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>newname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>newname</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fstatat</name><argument_list>(<argument><expr><name><name>dirff</name><operator>-&gt;</operator><name>ff_dirfd</name></name></expr></argument>, <argument><expr><name>newname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fst</name></expr></argument>, <argument><expr><name>AT_SYMLINK_NOFOLLOW</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>fstatat</name><argument_list>(<argument><expr><name><name>dirff</name><operator>-&gt;</operator><name>ff_dirfd</name></name></expr></argument>, <argument><expr><name><name>dirff</name><operator>-&gt;</operator><name>ff_name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dirst</name></expr></argument>, <argument><expr><name>AT_SYMLINK_NOFOLLOW</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>errno</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fillacl</name><argument_list>(<argument><expr><name>dirff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>facl</name> <operator>=</operator> <call><name>getacl</name><argument_list>(<argument><expr><name>dirff</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>newname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>check_access</name><argument_list>(<argument><expr><name>L9P_ACOP_UNLINK</name></expr></argument>,
<argument><expr><name><name>dirff</name><operator>-&gt;</operator><name>ff_acl</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dirst</name></expr></argument>, <argument><expr><name>facl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fst</name></expr></argument>, <argument><expr><name><name>dirff</name><operator>-&gt;</operator><name>ff_ai</name></name></expr></argument>, <argument><expr><operator>(</operator><name>gid_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_acl_free</name><argument_list>(<argument><expr><name>facl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>lr_req</name><operator>.</operator><name>tunlinkat</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>L9PL_AT_REMOVEDIR</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>unlinkat</name><argument_list>(<argument><expr><name><name>dirff</name><operator>-&gt;</operator><name>ff_dirfd</name></name></expr></argument>, <argument><expr><name>newname</name></expr></argument>, <argument><expr><name>AT_REMOVEDIR</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>unlinkat</name><argument_list>(<argument><expr><name><name>dirff</name><operator>-&gt;</operator><name>ff_dirfd</name></name></expr></argument>, <argument><expr><name>newname</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><operator>(</operator><name>error</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>fs_freefid</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><name>softc</name></type> <name>__unused</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>l9p_fid</name></name> <modifier>*</modifier></type><name>fid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>fs_fid</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name><name>fid</name><operator>-&gt;</operator><name>lo_aux</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>fs_authinfo</name></name> <modifier>*</modifier></type><name>ai</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>newcount</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>ff_fd</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>ff_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>ff_dir</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>closedir</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>ff_dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>ff_mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>ff_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ai</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>ff_ai</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>l9p_acl_free</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>ff_acl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ai</name><operator>-&gt;</operator><name>ai_mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>newcount</name> <operator>=</operator> <operator>--</operator><name><name>ai</name><operator>-&gt;</operator><name>ai_refcnt</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ai</name><operator>-&gt;</operator><name>ai_mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>newcount</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>L9P_LOG</name><argument_list>(<argument><expr><name>L9P_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"dropped last ref to authinfo %p"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ai</name><operator>-&gt;</operator><name>ai_mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>L9P_LOG</name><argument_list>(<argument><expr><name>L9P_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"authinfo %p now used by %lu"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>ai</name></expr></argument>, <argument><expr><operator>(</operator><name>u_long</name><operator>)</operator><name>newcount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>l9p_backend_fs_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>l9p_backend</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>backendp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rootfd</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>ro</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>l9p_backend</name></name> <modifier>*</modifier></type><name>backend</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>fs_softc</name></name> <modifier>*</modifier></type><name>sc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WITH_CASPER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>cap_channel_t</name> <modifier>*</modifier></type><name>capcas</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fs_attach_mutex_inited</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fs_attach_mutex</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>error</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>fs_attach_mutex_inited</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>backend</name> <operator>=</operator> <call><name>l9p_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>backend</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>attach</name></name> <operator>=</operator> <name>fs_attach</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>clunk</name></name> <operator>=</operator> <name>fs_clunk</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>create</name></name> <operator>=</operator> <name>fs_create</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>open</name></name> <operator>=</operator> <name>fs_open</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>read</name></name> <operator>=</operator> <name>fs_read</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>remove</name></name> <operator>=</operator> <name>fs_remove</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>stat</name></name> <operator>=</operator> <name>fs_stat</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>walk</name></name> <operator>=</operator> <name>fs_walk</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>write</name></name> <operator>=</operator> <name>fs_write</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>wstat</name></name> <operator>=</operator> <name>fs_wstat</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>statfs</name></name> <operator>=</operator> <name>fs_statfs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>lopen</name></name> <operator>=</operator> <name>fs_lopen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>lcreate</name></name> <operator>=</operator> <name>fs_lcreate</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>symlink</name></name> <operator>=</operator> <name>fs_symlink</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>mknod</name></name> <operator>=</operator> <name>fs_mknod</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>rename</name></name> <operator>=</operator> <name>fs_rename</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>readlink</name></name> <operator>=</operator> <name>fs_readlink</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>getattr</name></name> <operator>=</operator> <name>fs_getattr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>setattr</name></name> <operator>=</operator> <name>fs_setattr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>xattrwalk</name></name> <operator>=</operator> <name>fs_xattrwalk</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>xattrcreate</name></name> <operator>=</operator> <name>fs_xattrcreate</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>readdir</name></name> <operator>=</operator> <name>fs_readdir</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>fsync</name></name> <operator>=</operator> <name>fs_fsync</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>lock</name></name> <operator>=</operator> <name>fs_lock</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>getlock</name></name> <operator>=</operator> <name>fs_getlock</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>link</name></name> <operator>=</operator> <name>fs_link</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>mkdir</name></name> <operator>=</operator> <name>fs_mkdir</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>renameat</name></name> <operator>=</operator> <name>fs_renameat</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>unlinkat</name></name> <operator>=</operator> <name>fs_unlinkat</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>freefid</name></name> <operator>=</operator> <name>fs_freefid</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sc</name> <operator>=</operator> <call><name>l9p_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>fs_rootfd</name></name> <operator>=</operator> <name>rootfd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>fs_readonly</name></name> <operator>=</operator> <name>ro</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backend</name><operator>-&gt;</operator><name>softc</name></name> <operator>=</operator> <name>sc</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WITH_CASPER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>capcas</name> <operator>=</operator> <call><name>cap_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>capcas</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>fs_cappwd</name></name> <operator>=</operator> <call><name>cap_service_open</name><argument_list>(<argument><expr><name>capcas</name></expr></argument>, <argument><expr><literal type="string">"system.pwd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>fs_cappwd</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sc</name><operator>-&gt;</operator><name>fs_capgrp</name></name> <operator>=</operator> <call><name>cap_service_open</name><argument_list>(<argument><expr><name>capcas</name></expr></argument>, <argument><expr><literal type="string">"system.grp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sc</name><operator>-&gt;</operator><name>fs_capgrp</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>cap_setpassent</name><argument_list>(<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>fs_cappwd</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cap_setgroupent</name><argument_list>(<argument><expr><name><name>sc</name><operator>-&gt;</operator><name>fs_capgrp</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cap_close</name><argument_list>(<argument><expr><name>capcas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>setpassent</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>*</operator><name>backendp</name> <operator>=</operator> <name>backend</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
