<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libcxxrt/unwind-arm.h">






















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>





<typedef>typedef <type><enum>enum
<block>{
<decl><name>_URC_NO_REASON</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>_URC_OK</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>_URC_FOREIGN_EXCEPTION_CAUGHT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>_URC_END_OF_STACK</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,
<decl><name>_URC_HANDLER_FOUND</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,
<decl><name>_URC_INSTALL_CONTEXT</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,
<decl><name>_URC_CONTINUE_UNWIND</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,
<decl><name>_URC_FAILURE</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>,
<decl><name>_URC_FATAL_PHASE1_ERROR</name> <init>= <expr><name>_URC_FAILURE</name></expr></init></decl>
}</block></enum></type> <name>_Unwind_Reason_Code</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>_Unwind_Action</name>;</typedef>

<typedef>typedef <type><name>uint32_t</name></type> <name>_Unwind_State</name>;</typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>_Unwind_State</name></type> <name>_US_VIRTUAL_UNWIND_FRAME</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>_Unwind_State</name></type> <name>_US_UNWIND_FRAME_STARTING</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>_Unwind_State</name></type> <name>_US_UNWIND_FRAME_RESUME</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>_Unwind_State</name></type> <name>_US_ACTION_MASK</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_US_VIRTUAL_UNWIND_FRAME</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_US_UNWIND_FRAME_STARTING</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_US_UNWIND_FRAME_RESUME</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_US_ACTION_MASK</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name><name>struct</name> <name>_Unwind_Context</name></name></type> <name>_Unwind_Context</name>;</typedef>

<typedef>typedef <type><name>uint32_t</name></type> <name>_Unwind_EHT_Header</name>;</typedef>

<struct>struct <name>_Unwind_Exception</name>
<block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>exception_class</name></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>exception_cleanup</name>)<parameter_list>(<parameter><decl><type><name>_Unwind_Reason_Code</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>_Unwind_Exception</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct
<block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>reserved1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>reserved2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>reserved3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>reserved4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>reserved5</name></decl>;</decl_stmt>

}</block> <decl><name>unwinder_cache</name></decl>;</struct>

<struct>struct
<block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>sp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>bitpattern</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>barrier_cache</name></decl>;</struct>

<struct>struct
<block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>bitpattern</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>cleanup_cache</name></decl>;</struct>

<struct>struct
<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>fnstart</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_Unwind_EHT_Header</name> <modifier>*</modifier></type><name>ehtp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>additional</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>reserved1</name></decl>;</decl_stmt>
}</block> <decl><name>pr_cache</name></decl>;</struct>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>int</name> <range>:<expr><literal type="number">0</literal></expr></range></decl>;</decl_stmt>
}</block>;</struct>


<function_decl><type><name>_Unwind_Reason_Code</name></type> <name>_Unwind_RaiseException</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Exception</name></name> <modifier>*</modifier></type><name>ucbp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_Unwind_Resume</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Exception</name></name> <modifier>*</modifier></type><name>ucbp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_Unwind_Complete</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Exception</name></name> <modifier>*</modifier></type><name>ucbp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_Unwind_DeleteException</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Exception</name></name> <modifier>*</modifier></type><name>ucbp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>_Unwind_GetLanguageSpecificData</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Context</name></name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><enum>enum
<block>{
<decl><name>_UVRSR_OK</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>_UVRSR_NOT_IMPLEMENTED</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>_UVRSR_FAILED</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>
}</block></enum></type> <name>_Unwind_VRS_Result</name>;</typedef>
<typedef>typedef <type><enum>enum
<block>{
<decl><name>_UVRSC_CORE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>_UVRSC_VFP</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>_UVRSC_WMMXD</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>_UVRSC_WMMXC</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>
}</block></enum></type> <name>_Unwind_VRS_RegClass</name>;</typedef>
<typedef>typedef <type><enum>enum
<block>{
<decl><name>_UVRSD_UINT32</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>_UVRSD_VFPX</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>_UVRSD_UINT64</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>_UVRSD_FLOAT</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>_UVRSD_DOUBLE</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>
}</block></enum></type> <name>_Unwind_VRS_DataRepresentation</name>;</typedef>

<function_decl><type><name>_Unwind_VRS_Result</name></type> <name>_Unwind_VRS_Get</name><parameter_list>(<parameter><decl><type><name>_Unwind_Context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
<parameter><decl><type><name>_Unwind_VRS_RegClass</name></type> <name>regclass</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>regno</name></decl></parameter>,
<parameter><decl><type><name>_Unwind_VRS_DataRepresentation</name></type> <name>representation</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>valuep</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>_Unwind_VRS_Result</name></type> <name>_Unwind_VRS_Set</name><parameter_list>(<parameter><decl><type><name>_Unwind_Context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
<parameter><decl><type><name>_Unwind_VRS_RegClass</name></type> <name>regclass</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>regno</name></decl></parameter>,
<parameter><decl><type><name>_Unwind_VRS_DataRepresentation</name></type> <name>representation</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>valuep</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><specifier>extern</specifier> <name>unsigned</name> <name>long</name></type> <name>_Unwind_GetDataRelBase</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Context</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><specifier>extern</specifier> <name>unsigned</name> <name>long</name></type> <name>_Unwind_GetTextRelBase</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Context</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>unsigned</name> <name>long</name></type> <name>_Unwind_GetRegionStart</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Context</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <function_decl><type><name>_Unwind_Reason_Code</name></type> (<modifier>*</modifier><name>_Unwind_Trace_Fn</name>) <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Context</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<function_decl><type><specifier>extern</specifier> <name>_Unwind_Reason_Code</name></type> <name>_Unwind_Backtrace</name> <parameter_list>(<parameter><decl><type><name>_Unwind_Trace_Fn</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>_Unwind_Reason_Code</name></type>
<name>_Unwind_Resume_or_Rethrow</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Exception</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_UA_SEARCH_PHASE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_UA_CLEANUP_PHASE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_UA_HANDLER_FRAME</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_UA_FORCE_UNWIND</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name> <name>long</name></type> <name>_Unwind_GetGR</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>reg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>val</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_Unwind_VRS_Get</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>_UVRSC_CORE</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>_UVRSD_UINT32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>_Unwind_SetGR</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>reg</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>_Unwind_VRS_Set</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>_UVRSC_CORE</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>_UVRSD_UINT32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name> <name>long</name></type> <name>_Unwind_GetIP</name><parameter_list>(<parameter><decl><type><name>_Unwind_Context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<return>return <expr><call><name>_Unwind_GetGR</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>_Unwind_SetIP</name><parameter_list>(<parameter><decl><type><name>_Unwind_Context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>thumbState</name> <init>= <expr><call><name>_Unwind_GetGR</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_Unwind_SetGR</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><operator>(</operator><name>val</name> <operator>|</operator> <name>thumbState</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function_decl><type><name>_Unwind_Reason_Code</name></type> <name>__gnu_unwind_frame</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Exception</name></name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>_Unwind_Context</name></name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECLARE_PERSONALITY_FUNCTION</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_Unwind_Reason_Code name(_Unwind_State state,struct _Unwind_Exception *exceptionObject,struct _Unwind_Context *context);</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BEGIN_PERSONALITY_FUNCTION</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_Unwind_Reason_Code name(_Unwind_State state,struct _Unwind_Exception *exceptionObject,struct _Unwind_Context *context){int version = 1;uint64_t exceptionClass = exceptionObject-&gt;exception_class;int actions;switch (state){default: return _URC_FAILURE;case _US_VIRTUAL_UNWIND_FRAME:{actions = _UA_SEARCH_PHASE;break;}case _US_UNWIND_FRAME_STARTING:{actions = _UA_CLEANUP_PHASE;if (exceptionObject-&gt;barrier_cache.sp == _Unwind_GetGR(context, 13)){actions |= _UA_HANDLER_FRAME;}break;}case _US_UNWIND_FRAME_RESUME:{return continueUnwinding(exceptionObject, context);break;}}_Unwind_SetGR (context, 12, reinterpret_cast&lt;unsigned long&gt;(exceptionObject));</cpp:value></cpp:define>
































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALL_PERSONALITY_FUNCTION</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>name(state,exceptionObject,context)</cpp:value></cpp:define>
</unit>
