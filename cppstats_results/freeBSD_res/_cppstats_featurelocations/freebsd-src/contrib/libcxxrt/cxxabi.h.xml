<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libcxxrt/cxxabi.h">





















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CXXABI_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__CXXABI_H_</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"unwind.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><name>namespace</name></type> <name>std</name>
<block>{<block_content>
<decl_stmt><decl><type><name>class</name></type> <name>type_info</name></decl>;</decl_stmt>
</block_content>}</block></decl></decl_stmt>











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>namespace</name></type> <name>__cxxabiv1</name> <block>{<block_content>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>unexpected_handler</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>



<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>terminate_handler</name>)<parameter_list>()</parameter_list>;</function_decl></typedef>






















<struct>struct <name>__cxa_exception</name>
<block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__LP64__</name></expr></cpp:if>










<decl_stmt><decl><type><name>uintptr_t</name></type> <name>referenceCount</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>std</name><operator>::</operator><name>type_info</name> <operator>*</operator><name>exceptionType</name></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>exceptionDestructor</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>unexpected_handler</name></type> <name>unexpectedHandler</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>terminate_handler</name></type> <name>terminateHandler</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>__cxa_exception</name> <modifier>*</modifier></type><name>nextException</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name>int</name></type> <name>handlerCount</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__arm__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__ARM_DWARF_EH__</name></expr></argument>)</argument_list></call></expr></cpp:if>





<decl_stmt><decl><type><name>_Unwind_Exception</name> <modifier>*</modifier></type><name>nextCleanup</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>int</name></type> <name>cleanupCount</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<decl_stmt><decl><type><name>int</name></type> <name>handlerSwitchValue</name></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>actionRecord</name></decl>;</decl_stmt>





<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>languageSpecificData</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>catchTemp</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>adjustedPtr</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>__LP64__</name></expr></cpp:if>










<decl_stmt><decl><type><name>uintptr_t</name></type> <name>referenceCount</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>_Unwind_Exception</name></type> <name>unwindHeader</name></decl>;</decl_stmt>
}</block>;</struct>









<struct>struct <name>__cxa_eh_globals</name>
<block>{




<decl_stmt><decl><type><name>__cxa_exception</name> <modifier>*</modifier></type><name>caughtExceptions</name></decl>;</decl_stmt>



<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>uncaughtExceptions</name></decl>;</decl_stmt>
}</block>;</struct>



<function_decl><type><name>__cxa_eh_globals</name> <modifier>*</modifier></type><name>__cxa_get_globals</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>__cxa_eh_globals</name> <modifier>*</modifier></type><name>__cxa_get_globals_fast</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>std</name><operator>::</operator><name>type_info</name> <operator>*</operator> <call><name>__cxa_current_exception_type</name><argument_list>()</argument_list></call></expr>;</expr_stmt>





<function_decl><type><name>void</name></type> <name>__cxa_rethrow_primary_exception</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>thrown_exception</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name> <modifier>*</modifier></type><name>__cxa_current_primary_exception</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>void</name></type> <name>__cxa_increment_exception_refcount</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>thrown_exception</name></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>void</name></type> <name>__cxa_decrement_exception_refcount</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>thrown_exception</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>char</name><modifier>*</modifier></type> <name>__cxa_demangle</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>mangled_name</name></decl></parameter>,
<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>,
<parameter><decl><type><name>size_t</name><modifier>*</modifier></type> <name>n</name></decl></parameter>,
<parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>status</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>abi</name> <init>= <expr><name>__cxxabiv1</name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
