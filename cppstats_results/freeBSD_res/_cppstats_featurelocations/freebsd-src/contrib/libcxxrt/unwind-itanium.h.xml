<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libcxxrt/unwind-itanium.h">
























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_UNWIND_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_UNWIND_H</name></cpp:macro></cpp:define>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<typedef>typedef <type><enum>enum
<block>{
<decl><name>_URC_NO_REASON</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>_URC_OK</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>_URC_FOREIGN_EXCEPTION_CAUGHT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>_URC_FATAL_PHASE2_ERROR</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>_URC_FATAL_PHASE1_ERROR</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>_URC_NORMAL_STOP</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>_URC_END_OF_STACK</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,
<decl><name>_URC_HANDLER_FOUND</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,
<decl><name>_URC_INSTALL_CONTEXT</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,
<decl><name>_URC_CONTINUE_UNWIND</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>
}</block></enum></type>
<name>_Unwind_Reason_Code</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>_Unwind_Action</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_UA_SEARCH_PHASE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_UA_CLEANUP_PHASE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_UA_HANDLER_FRAME</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_UA_FORCE_UNWIND</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<struct_decl>struct <name>_Unwind_Context</name>;</struct_decl>
<struct_decl>struct <name>_Unwind_Exception</name>;</struct_decl>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>_Unwind_Exception_Cleanup_Fn</name>) <parameter_list>(<parameter><decl><type><name>_Unwind_Reason_Code</name></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>_Unwind_Exception</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>_Unwind_Reason_Code</name></type> (<modifier>*</modifier><name>_Unwind_Stop_Fn</name>) <parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>_Unwind_Action</name></type></decl></parameter>,
<parameter><decl><type><name>uint64_t</name></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>_Unwind_Exception</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>_Unwind_Context</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>





<struct>struct <name>_Unwind_Exception</name>
<block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>exception_class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_Unwind_Exception_Cleanup_Fn</name></type> <name>exception_cleanup</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>private_1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>private_2</name></decl>;</decl_stmt>
}</block> ;</struct>

<function_decl><type><specifier>extern</specifier> <name>_Unwind_Reason_Code</name></type> <name>_Unwind_RaiseException</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Exception</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>_Unwind_Reason_Code</name></type> <name>_Unwind_ForcedUnwind</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Exception</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>_Unwind_Stop_Fn</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>_Unwind_Resume</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Exception</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>_Unwind_DeleteException</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Exception</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>unsigned</name> <name>long</name></type> <name>_Unwind_GetGR</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Context</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>_Unwind_SetGR</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Context</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>unsigned</name> <name>long</name></type> <name>_Unwind_GetIP</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Context</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>unsigned</name> <name>long</name></type> <name>_Unwind_GetIPInfo</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Context</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>_Unwind_SetIP</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Context</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>unsigned</name> <name>long</name></type> <name>_Unwind_GetLanguageSpecificData</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Context</name></name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>unsigned</name> <name>long</name></type> <name>_Unwind_GetRegionStart</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Context</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_GNU_SOURCE</name></expr></argument>)</argument_list></call></expr></cpp:if>



<typedef>typedef <function_decl><type><name>_Unwind_Reason_Code</name></type> (<modifier>*</modifier><name>_Unwind_Trace_Fn</name>) <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Context</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_UA_END_OF_STACK</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>




<function_decl><type><specifier>extern</specifier> <name>_Unwind_Reason_Code</name></type>
<name>_Unwind_Resume_or_Rethrow</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Exception</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><specifier>extern</specifier> <name>unsigned</name> <name>long</name></type> <name>_Unwind_GetBSP</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Context</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><specifier>extern</specifier> <name>unsigned</name> <name>long</name></type> <name>_Unwind_GetCFA</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Context</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><specifier>extern</specifier> <name>unsigned</name> <name>long</name></type> <name>_Unwind_GetDataRelBase</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Context</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><specifier>extern</specifier> <name>unsigned</name> <name>long</name></type> <name>_Unwind_GetTextRelBase</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Context</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><specifier>extern</specifier> <name>_Unwind_Reason_Code</name></type> <name>_Unwind_Backtrace</name> <parameter_list>(<parameter><decl><type><name>_Unwind_Trace_Fn</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><specifier>extern</specifier> <name>void</name> <modifier>*</modifier></type><name>_Unwind_FindEnclosingFunction</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>




<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECLARE_PERSONALITY_FUNCTION</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_Unwind_Reason_Code name(int version,_Unwind_Action actions,uint64_t exceptionClass,struct _Unwind_Exception *exceptionObject,struct _Unwind_Context *context);</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BEGIN_PERSONALITY_FUNCTION</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_Unwind_Reason_Code name(int version,_Unwind_Action actions,uint64_t exceptionClass,struct _Unwind_Exception *exceptionObject,struct _Unwind_Context *context){</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALL_PERSONALITY_FUNCTION</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>name(version, actions, exceptionClass, exceptionObject, context)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
