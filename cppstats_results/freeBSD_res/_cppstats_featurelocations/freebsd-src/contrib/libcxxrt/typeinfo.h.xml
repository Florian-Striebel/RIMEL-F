<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libcxxrt/typeinfo.h">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"abi_namespace.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>ABI_NAMESPACE</name>
<block>{<block_content>
<struct_decl>struct <name>__class_type_info</name>;</struct_decl>
</block_content>}</block></decl></decl_stmt>
<decl_stmt><decl><type><name>namespace</name></type> <name>std</name>
<block>{<block_content>







<decl_stmt><decl><type><name>class</name></type> <name>type_info</name>
<block>{<block_content>
<label><name>public</name>:</label>




<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>type_info</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bool</name> <name>operator</name><operator>==</operator><operator>(</operator><specifier>const</specifier> <name>type_info</name> <operator>&amp;</operator><operator>)</operator> <specifier>const</specifier></expr>;</expr_stmt>
<expr_stmt><expr><name>bool</name> <name>operator</name><operator>!=</operator><operator>(</operator><specifier>const</specifier> <name>type_info</name> <operator>&amp;</operator><operator>)</operator> <specifier>const</specifier></expr>;</expr_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>before</name><argument_list>(<argument><expr><specifier>const</specifier> <name>type_info</name> <operator>&amp;</operator></expr></argument>)</argument_list> const</decl>;</decl_stmt>
<function_decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name><parameter_list>()</parameter_list> const;</function_decl>
<expr_stmt><expr><call><name>type_info</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<label><name>private</name>:</label>
<expr_stmt><expr><call><name>type_info</name><argument_list>(<argument><expr><specifier>const</specifier> <name>type_info</name><operator>&amp;</operator> <name>rhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>type_info</name><modifier>&amp;</modifier></type> <name>operator</name><init>= <expr><operator>(</operator><specifier>const</specifier> <name>type_info</name><operator>&amp;</operator> <name>rhs</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>__type_name</name></decl>;</decl_stmt>











<label><name>public</name>:</label>



<expr_stmt><expr><name>virtual</name> <name>bool</name> <macro><name>__is_pointer_p</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block></expr></expr_stmt>



<expr_stmt><expr><name>virtual</name> <name>bool</name> <macro><name>__is_function_p</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>false</name></expr>;</return> }</block></expr></expr_stmt>










<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>__do_catch</name><argument_list>(<argument><expr><specifier>const</specifier> <name>type_info</name> <operator>*</operator><name>thrown_type</name></expr></argument>,
<argument><expr><name>void</name> <operator>*</operator><operator>*</operator><name>thrown_object</name></expr></argument>,
<argument><expr><name>unsigned</name> <name>outer</name></expr></argument>)</argument_list> const</decl>;</decl_stmt>







<decl_stmt><decl><type><name>virtual</name> <name>bool</name></type> <name>__do_upcast</name><argument_list>(
<argument><expr><specifier>const</specifier> <name>ABI_NAMESPACE</name><operator>::</operator><name>__class_type_info</name> <operator>*</operator><name>target</name></expr></argument>,
<argument><expr><name>void</name> <operator>*</operator><operator>*</operator><name>thrown_object</name></expr></argument>)</argument_list> const
<block>{<block_content>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><name>namespace</name></type> <name>ABI_NAMESPACE</name>
<block>{<block_content>



<decl_stmt><decl><type><name><name>struct</name> <name>__fundamental_type_info</name></name></type> <range>: <expr><name>public</name> <name>std</name><operator>::</operator><name>type_info</name>
<block>{
<expr><name>virtual</name> <operator>~</operator><call><name>__fundamental_type_info</name><argument_list>()</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name><name>struct</name> <name>__array_type_info</name></name></type> <range>: <expr><name>public</name> <name>std</name><operator>::</operator><name>type_info</name>
<block>{
<expr><name>virtual</name> <operator>~</operator><call><name>__array_type_info</name><argument_list>()</argument_list></call></expr>;
}</block></expr></range></decl>;</decl_stmt>



<decl_stmt><decl><type><name><name>struct</name> <name>__function_type_info</name></name></type> <range>: <expr><name>public</name> <name>std</name><operator>::</operator><name>type_info</name>
<block>{
<expr><name>virtual</name> <operator>~</operator><call><name>__function_type_info</name><argument_list>()</argument_list></call></expr>;
<expr><name>virtual</name> <name>bool</name> <macro><name>__is_function_p</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block>
}</expr>;



struct <expr><name>__enum_type_info</name> <operator>:</operator> <name>public</name> <name>std</name><operator>::</operator><name>type_info</name>
<block>{
<expr><name>virtual</name> <operator>~</operator><call><name>__enum_type_info</name><argument_list>()</argument_list></call></expr>;
}</block></expr>;




struct <expr><name>__class_type_info</name> <operator>:</operator> <name>public</name> <name>std</name><operator>::</operator><name>type_info</name>
<block>{
<expr><name>virtual</name> <operator>~</operator><call><name>__class_type_info</name><argument_list>()</argument_list></call></expr>;



<expr><name>virtual</name> <name>void</name> <operator>*</operator><macro><name>cast_to</name><argument_list>(<argument>void *obj</argument>, <argument>const struct __class_type_info *other</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>virtual</name> <name>bool</name> <macro><name>__do_upcast</name><argument_list>(<argument>const __class_type_info *target</argument>,
<argument>void **thrown_object</argument>)</argument_list></macro> <specifier>const</specifier>
<block>{
<return>return <expr><name>this</name> <operator>==</operator> <name>target</name></expr>;</return>
}</block>
}</expr>;





struct <expr><name>__si_class_type_info</name> <operator>:</operator> <name>public</name> <name>__class_type_info</name>
<block>{
<expr><name>virtual</name> <operator>~</operator><call><name>__si_class_type_info</name><argument_list>()</argument_list></call></expr>;
<expr><specifier>const</specifier> <name>__class_type_info</name> <operator>*</operator><name>__base_type</name></expr>;
<expr><name>virtual</name> <name>bool</name> <macro><name>__do_upcast</name><argument_list>(
<argument>const ABI_NAMESPACE::__class_type_info *target</argument>,
<argument>void **thrown_object</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>virtual</name> <name>void</name> <operator>*</operator><macro><name>cast_to</name><argument_list>(<argument>void *obj</argument>, <argument>const struct __class_type_info *other</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
}</block></expr>;





struct <expr><name>__base_class_type_info</name>
<block>{
<expr><specifier>const</specifier> <name>__class_type_info</name> <operator>*</operator><name>__base_type</name></expr>;
<expr><name>private</name><operator>:</operator>





<name>long</name> <name>__offset_flags</name></expr>;



enum <expr><name>__offset_flags_masks</name>
<block>{

<expr><name>__virtual_mask</name> <operator>=</operator> <literal type="number">0x1</literal></expr>,

<expr><name>__public_mask</name> <operator>=</operator> <literal type="number">0x2</literal></expr>,

<expr><name>__offset_shift</name> <operator>=</operator> <literal type="number">8</literal></expr>
}</block></expr>;
<expr><name>public</name><operator>:</operator>



<name>long</name> <macro><name>offset</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
<block>{
<return>return <expr><name>__offset_flags</name> <operator>&gt;&gt;</operator> <name>__offset_shift</name></expr>;</return>
}</block>



<name>long</name> <macro><name>flags</name><argument_list>()</argument_list></macro> <specifier>const</specifier>
<block>{
<return>return <expr><name>__offset_flags</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>__offset_shift</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
}</block>



<name>bool</name> <macro><name>isPublic</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>flags</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>__public_mask</name></expr>;</return> }</block>



<name>bool</name> <macro><name>isVirtual</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><call><name>flags</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>__virtual_mask</name></expr>;</return> }</block>
}</expr>;




struct <expr><name>__vmi_class_type_info</name> <operator>:</operator> <name>public</name> <name>__class_type_info</name>
<block>{
<expr><name>virtual</name> <operator>~</operator><call><name>__vmi_class_type_info</name><argument_list>()</argument_list></call></expr>;

<expr><name>unsigned</name> <name>int</name> <name>__flags</name></expr>;

<expr><name>unsigned</name> <name>int</name> <name>__base_count</name></expr>;




<expr><name>__base_class_type_info</name> <name><name>__base_info</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;




enum <expr><name>__flags_masks</name>
<block>{

<expr><name>__non_diamond_repeat_mask</name> <operator>=</operator> <literal type="number">0x1</literal></expr>,

<expr><name>__diamond_shaped_mask</name> <operator>=</operator> <literal type="number">0x2</literal></expr>
}</block></expr>;
<expr><name>virtual</name> <name>bool</name> <macro><name>__do_upcast</name><argument_list>(
<argument>const ABI_NAMESPACE::__class_type_info *target</argument>,
<argument>void **thrown_object</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
<expr><name>virtual</name> <name>void</name> <operator>*</operator><macro><name>cast_to</name><argument_list>(<argument>void *obj</argument>, <argument>const struct __class_type_info *other</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
}</block></expr>;




struct <expr><name>__pbase_type_info</name> <operator>:</operator> <name>public</name> <name>std</name><operator>::</operator><name>type_info</name>
<block>{
<expr><name>virtual</name> <operator>~</operator><call><name>__pbase_type_info</name><argument_list>()</argument_list></call></expr>;



<expr><name>unsigned</name> <name>int</name> <name>__flags</name></expr>;



<expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>type_info</name> <operator>*</operator><name>__pointee</name></expr>;




enum <expr><name>__masks</name>
<block>{

<expr><name>__const_mask</name> <operator>=</operator> <literal type="number">0x1</literal></expr>,

<expr><name>__volatile_mask</name> <operator>=</operator> <literal type="number">0x2</literal></expr>,

<expr><name>__restrict_mask</name> <operator>=</operator> <literal type="number">0x4</literal></expr>,

<expr><name>__incomplete_mask</name> <operator>=</operator> <literal type="number">0x8</literal></expr>,

<expr><name>__incomplete_class_mask</name> <operator>=</operator> <literal type="number">0x10</literal></expr>
}</block></expr>;
<expr><name>virtual</name> <name>bool</name> <macro><name>__do_catch</name><argument_list>(<argument>const type_info *thrown_type</argument>,
<argument>void **thrown_object</argument>,
<argument>unsigned outer</argument>)</argument_list></macro> <specifier>const</specifier></expr>;
}</block></expr>;




struct <expr><name>__pointer_type_info</name> <operator>:</operator> <name>public</name> <name>__pbase_type_info</name>
<block>{
<expr><name>virtual</name> <operator>~</operator><call><name>__pointer_type_info</name><argument_list>()</argument_list></call></expr>;
<expr><name>virtual</name> <name>bool</name> <macro><name>__is_pointer_p</name><argument_list>()</argument_list></macro> <specifier>const</specifier> <block>{ <return>return <expr><name>true</name></expr>;</return> }</block>
}</expr>;




struct <expr><name>__pointer_to_member_type_info</name> <operator>:</operator> <name>public</name> <name>__pbase_type_info</name>
<block>{
<expr><name>virtual</name> <operator>~</operator><call><name>__pointer_to_member_type_info</name><argument_list>()</argument_list></call></expr>;



<expr><specifier>const</specifier> <name>__class_type_info</name> <operator>*</operator><name>__context</name></expr>;
}</block></expr>;

}</block></expr></block></expr></block></expr></block></expr></range></decl></decl_stmt></block_content></block></decl></decl_stmt>
</unit>
