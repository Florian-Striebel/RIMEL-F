<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libcxxrt/atomic.h">
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__has_builtin</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_builtin</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__has_feature</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__has_feature</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__c11_atomic_exchange</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_SWAP</name><parameter_list>(<parameter><type><name>addr</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>__c11_atomic_exchange(reinterpret_cast&lt;_Atomic(__typeof__(val))*&gt;(addr), val, __ATOMIC_ACQ_REL)</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__sync_swap</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_SWAP</name><parameter_list>(<parameter><type><name>addr</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>__sync_swap(addr, val)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_SWAP</name><parameter_list>(<parameter><type><name>addr</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>__sync_lock_test_and_set(addr, val)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_builtin</name><argument_list>(<argument><expr><name>__c11_atomic_load</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_LOAD</name><parameter_list>(<parameter><type><name>addr</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>__c11_atomic_load(reinterpret_cast&lt;_Atomic(__typeof__(*addr))*&gt;(addr), __ATOMIC_ACQUIRE)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOMIC_LOAD</name><parameter_list>(<parameter><type><name>addr</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>(__sync_synchronize(), *addr)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
