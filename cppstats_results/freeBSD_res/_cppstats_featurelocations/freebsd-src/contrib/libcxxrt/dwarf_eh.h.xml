<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libcxxrt/dwarf_eh.h">
































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_GNU_SOURCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GNU_SOURCE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"unwind.h"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_GNU_SOURCE</name></cpp:undef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"unwind.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>


<typedef>typedef <type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dw_eh_ptr_t</name>;</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DW_EH_PE_signed</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define>

<enum>enum <name>dwarf_data_encoding</name>
<block>{

<decl><name>DW_EH_PE_absptr</name> <init>= <expr><literal type="number">0x00</literal></expr></init></decl>,

<decl><name>DW_EH_PE_uleb128</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>,

<decl><name>DW_EH_PE_udata2</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>,

<decl><name>DW_EH_PE_udata4</name> <init>= <expr><literal type="number">0x03</literal></expr></init></decl>,

<decl><name>DW_EH_PE_udata8</name> <init>= <expr><literal type="number">0x04</literal></expr></init></decl>,

<decl><name>DW_EH_PE_sleb128</name> <init>= <expr><name>DW_EH_PE_uleb128</name> <operator>|</operator> <name>DW_EH_PE_signed</name></expr></init></decl>,

<decl><name>DW_EH_PE_sdata2</name> <init>= <expr><name>DW_EH_PE_udata2</name> <operator>|</operator> <name>DW_EH_PE_signed</name></expr></init></decl>,

<decl><name>DW_EH_PE_sdata4</name> <init>= <expr><name>DW_EH_PE_udata4</name> <operator>|</operator> <name>DW_EH_PE_signed</name></expr></init></decl>,

<decl><name>DW_EH_PE_sdata8</name> <init>= <expr><name>DW_EH_PE_udata8</name> <operator>|</operator> <name>DW_EH_PE_signed</name></expr></init></decl>
}</block>;</enum>





<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>enum</name> <name>dwarf_data_encoding</name></name></type> <name>get_encoding</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr>enum <name>dwarf_data_encoding</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>x</name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>








<enum>enum <name>dwarf_data_relative</name>
<block>{

<decl><name>DW_EH_PE_omit</name> <init>= <expr><literal type="number">0xff</literal></expr></init></decl>,

<decl><name>DW_EH_PE_pcrel</name> <init>= <expr><literal type="number">0x10</literal></expr></init></decl>,

<decl><name>DW_EH_PE_textrel</name> <init>= <expr><literal type="number">0x20</literal></expr></init></decl>,

<decl><name>DW_EH_PE_datarel</name> <init>= <expr><literal type="number">0x30</literal></expr></init></decl>,

<decl><name>DW_EH_PE_funcrel</name> <init>= <expr><literal type="number">0x40</literal></expr></init></decl>,

<decl><name>DW_EH_PE_aligned</name> <init>= <expr><literal type="number">0x50</literal></expr></init></decl>,

<decl><name>DW_EH_PE_indirect</name> <init>= <expr><literal type="number">0x80</literal></expr></init></decl>
}</block>;</enum>



<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>enum</name> <name>dwarf_data_relative</name></name></type> <name>get_base</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr>enum <name>dwarf_data_relative</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>x</name> <operator>&amp;</operator> <literal type="number">0x70</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>int</name></type> <name>is_indirect</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <name>DW_EH_PE_indirect</name><operator>)</operator> <operator>==</operator> <name>DW_EH_PE_indirect</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>dwarf_size_of_fixed_size_field</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><call><name>get_encoding</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<default>default:</default> <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<case>case <expr><name>DW_EH_PE_sdata2</name></expr>:</case>
<case>case <expr><name>DW_EH_PE_udata2</name></expr>:</case> <return>return <expr><literal type="number">2</literal></expr>;</return>
<case>case <expr><name>DW_EH_PE_sdata4</name></expr>:</case>
<case>case <expr><name>DW_EH_PE_udata4</name></expr>:</case> <return>return <expr><literal type="number">4</literal></expr>;</return>
<case>case <expr><name>DW_EH_PE_sdata8</name></expr>:</case>
<case>case <expr><name>DW_EH_PE_udata8</name></expr>:</case> <return>return <expr><literal type="number">8</literal></expr>;</return>
<case>case <expr><name>DW_EH_PE_absptr</name></expr>:</case> <return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>read_leb128</name><parameter_list>(<parameter><decl><type><name>dw_eh_ptr_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>uleb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>bit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>digit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<do>do
<block>{<block_content>


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>bit</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>digit</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>*</operator><name>data</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>uleb</name> <operator>+=</operator> <name>digit</name> <operator>&lt;&lt;</operator> <name>bit</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bit</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>data</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>


</block_content>}</block> while <condition>(<expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>*</operator><name>data</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>!=</operator> <name>digit</name></expr>)</condition>;</do>
<expr_stmt><expr><operator>*</operator><name>b</name> <operator>=</operator> <name>bit</name></expr>;</expr_stmt>

<return>return <expr><name>uleb</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>read_uleb128</name><parameter_list>(<parameter><decl><type><name>dw_eh_ptr_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>b</name></decl>;</decl_stmt>
<return>return <expr><call><name>read_leb128</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>read_sleb128</name><parameter_list>(<parameter><decl><type><name>dw_eh_ptr_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>uleb</name> <init>= <expr><call><name>read_leb128</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>uleb</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>bits</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name>uleb</name> <operator>|=</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>int64_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>bits</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>int64_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>uleb</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>read_value</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>encoding</name></decl></parameter>, <parameter><decl><type><name>dw_eh_ptr_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>enum</name> <name>dwarf_data_encoding</name></name></type> <name>type</name> <init>= <expr><call><name>get_encoding</name><argument_list>(<argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ</name><parameter_list>(<parameter><type><name>dwarf</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>case dwarf:{type t;memcpy(&amp;t, *data, sizeof t);*data += sizeof t;return static_cast&lt;uint64_t&gt;(t);}</cpp:value></cpp:define>







<macro><name>READ</name><argument_list>(<argument>DW_EH_PE_udata2</argument>, <argument>uint16_t</argument>)</argument_list></macro>
<macro><name>READ</name><argument_list>(<argument>DW_EH_PE_udata4</argument>, <argument>uint32_t</argument>)</argument_list></macro>
<macro><name>READ</name><argument_list>(<argument>DW_EH_PE_udata8</argument>, <argument>uint64_t</argument>)</argument_list></macro>
<macro><name>READ</name><argument_list>(<argument>DW_EH_PE_sdata2</argument>, <argument>int16_t</argument>)</argument_list></macro>
<macro><name>READ</name><argument_list>(<argument>DW_EH_PE_sdata4</argument>, <argument>int32_t</argument>)</argument_list></macro>
<macro><name>READ</name><argument_list>(<argument>DW_EH_PE_sdata8</argument>, <argument>int64_t</argument>)</argument_list></macro>
<macro><name>READ</name><argument_list>(<argument>DW_EH_PE_absptr</argument>, <argument>intptr_t</argument>)</argument_list></macro>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>READ</name></cpp:undef>

<case>case <expr><name>DW_EH_PE_sleb128</name></expr>:</case>
<return>return <expr><call><name>read_sleb128</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><name>DW_EH_PE_uleb128</name></expr>:</case>
<return>return <expr><call><name>read_uleb128</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
<default>default:</default> <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>resolve_indirect_value</name><parameter_list>(<parameter><decl><type><name>_Unwind_Context</name> <modifier>*</modifier></type><name>c</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>encoding</name></decl></parameter>,
<parameter><decl><type><name>int64_t</name></type> <name>v</name></decl></parameter>,
<parameter><decl><type><name>dw_eh_ptr_t</name></type> <name>start</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><call><name>get_base</name><argument_list>(<argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>DW_EH_PE_pcrel</name></expr>:</case>
<expr_stmt><expr><name>v</name> <operator>+=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_EH_PE_textrel</name></expr>:</case>
<expr_stmt><expr><name>v</name> <operator>+=</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>uintptr_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>_Unwind_GetTextRelBase</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_EH_PE_datarel</name></expr>:</case>
<expr_stmt><expr><name>v</name> <operator>+=</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>uintptr_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>_Unwind_GetDataRelBase</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>DW_EH_PE_funcrel</name></expr>:</case>
<expr_stmt><expr><name>v</name> <operator>+=</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>uintptr_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>_Unwind_GetRegionStart</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>




<if_stmt><if>if <condition>(<expr><call><name>is_indirect</name><argument_list>(<argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uintptr_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>*</operator><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>void</name><operator>*</operator><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>read_value_with_encoding</name><parameter_list>(<parameter><decl><type><name>_Unwind_Context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
<parameter><decl><type><name>dw_eh_ptr_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dw_eh_ptr_t</name></type> <name>start</name> <init>= <expr><operator>*</operator><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>encoding</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><operator>*</operator><name>data</name><operator>)</operator><operator>++</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>encoding</name> <operator>==</operator> <name>DW_EH_PE_omit</name></expr>)</condition> <block>{<block_content> <return>return;</return> </block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <call><name>read_value</name><argument_list>(<argument><expr><name>encoding</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <call><name>resolve_indirect_value</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>, <argument><expr><operator>*</operator><name>out</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>











<struct>struct <name>dwarf_eh_lsda</name>
<block>{


<decl_stmt><decl><type><name>dw_eh_ptr_t</name></type> <name>region_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dw_eh_ptr_t</name></type> <name>landing_pads</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dw_eh_ptr_t</name></type> <name>type_table</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>type_table_encoding</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dw_eh_ptr_t</name></type> <name>call_site_table</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dw_eh_ptr_t</name></type> <name>action_table</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>callsite_encoding</name></decl>;</decl_stmt>
}</block>;</struct>





<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>dwarf_eh_lsda</name></name></type> <name>parse_lsda</name><parameter_list>(<parameter><decl><type><name>_Unwind_Context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>dwarf_eh_lsda</name></name></type> <name>lsda</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>lsda</name><operator>.</operator><name>region_start</name></name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>dw_eh_ptr_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>_Unwind_GetRegionStart</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<decl_stmt><decl><type><name>uint64_t</name></type> <name>v</name> <init>= <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>uintptr_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>lsda</name><operator>.</operator><name>region_start</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>read_value_with_encoding</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lsda</name><operator>.</operator><name>landing_pads</name></name> <operator>=</operator> <call><name><name>reinterpret_cast</name><argument_list type="generic">&lt;<argument><expr><name>dw_eh_ptr_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>uintptr_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name><name>lsda</name><operator>.</operator><name>type_table</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lsda</name><operator>.</operator><name>type_table_encoding</name></name> <operator>=</operator> <operator>*</operator><name>data</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>lsda</name><operator>.</operator><name>type_table_encoding</name></name> <operator>!=</operator> <name>DW_EH_PE_omit</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>read_uleb128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>dw_eh_ptr_t</name></type> <name>type_table</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>type_table</name> <operator>+=</operator> <name>v</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lsda</name><operator>.</operator><name>type_table</name></name> <operator>=</operator> <name>type_table</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__arm__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__ARM_DWARF_EH__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>lsda</name><operator>.</operator><name>type_table_encoding</name></name> <operator>=</operator> <operator>(</operator><name>DW_EH_PE_pcrel</name> <operator>|</operator> <name>DW_EH_PE_indirect</name><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>lsda</name><operator>.</operator><name>callsite_encoding</name></name> <operator>=</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr>enum <name>dwarf_data_encoding</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>data</name><operator>++</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>lsda</name><operator>.</operator><name>action_table</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>uintptr_t</name></type> <name>callsite_size</name> <init>= <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>uintptr_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>read_uleb128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>lsda</name><operator>.</operator><name>action_table</name></name> <operator>=</operator> <name>data</name> <operator>+</operator> <name>callsite_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lsda</name><operator>.</operator><name>call_site_table</name></name> <operator>=</operator> <call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>dw_eh_ptr_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<return>return <expr><name>lsda</name></expr>;</return>
</block_content>}</block></function>






<struct>struct <name>dwarf_eh_action</name>
<block>{




<decl_stmt><decl><type><name>dw_eh_ptr_t</name></type> <name>landing_pad</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dw_eh_ptr_t</name></type> <name>action_record</name></decl>;</decl_stmt>
}</block>;</struct>








<function><type><specifier>static</specifier> <name>bool</name></type> <name>dwarf_eh_find_callsite</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>_Unwind_Context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>dwarf_eh_lsda</name></name> <modifier>*</modifier></type><name>lsda</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>dwarf_eh_action</name></name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>action_record</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>landing_pad</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>ip</name> <init>= <expr><call><name>_Unwind_GetIP</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>_Unwind_GetRegionStart</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>callsite_table</name> <init>= <expr><call><name><name>static_cast</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>char</name><operator>*</operator></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>lsda</name><operator>-&gt;</operator><name>call_site_table</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>callsite_table</name> <operator>&lt;=</operator> <name><name>lsda</name><operator>-&gt;</operator><name>action_table</name></name></expr>)</condition>
<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>call_site_start</name></decl>, <decl><type ref="prev"/><name>call_site_size</name></decl>, <decl><type ref="prev"/><name>landing_pad</name></decl>, <decl><type ref="prev"/><name>action</name></decl>;</decl_stmt>
<expr_stmt><expr><name>call_site_start</name> <operator>=</operator> <call><name>read_value</name><argument_list>(<argument><expr><name><name>lsda</name><operator>-&gt;</operator><name>callsite_encoding</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>callsite_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>call_site_size</name> <operator>=</operator> <call><name>read_value</name><argument_list>(<argument><expr><name><name>lsda</name><operator>-&gt;</operator><name>callsite_encoding</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>callsite_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name>call_site_start</name> <operator>&gt;</operator> <name>ip</name></expr>)</condition> <block>{<block_content> <break>break;</break> </block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>landing_pad</name> <operator>=</operator> <call><name>read_value</name><argument_list>(<argument><expr><name><name>lsda</name><operator>-&gt;</operator><name>callsite_encoding</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>callsite_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>action</name> <operator>=</operator> <call><name>read_uleb128</name><argument_list>(<argument><expr><operator>&amp;</operator><name>callsite_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>









<if_stmt><if>if <condition>(<expr><name>call_site_start</name> <operator>&lt;</operator> <name>ip</name> <operator>&amp;&amp;</operator> <name>ip</name> <operator>&lt;=</operator> <name>call_site_start</name> <operator>+</operator> <name>call_site_size</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>action</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>action_record</name></name> <operator>=</operator> <name><name>lsda</name><operator>-&gt;</operator><name>action_table</name></name> <operator>+</operator> <name>action</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>landing_pad</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>landing_pad</name></name> <operator>=</operator> <name><name>lsda</name><operator>-&gt;</operator><name>landing_pads</name></name> <operator>+</operator> <name>landing_pad</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXCEPTION_CLASS</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>,<parameter><type><name>f</name></type></parameter>,<parameter><type><name>g</name></type></parameter>,<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((static_cast&lt;uint64_t&gt;(a) &lt;&lt; 56) +(static_cast&lt;uint64_t&gt;(b) &lt;&lt; 48) +(static_cast&lt;uint64_t&gt;(c) &lt;&lt; 40) +(static_cast&lt;uint64_t&gt;(d) &lt;&lt; 32) +(static_cast&lt;uint64_t&gt;(e) &lt;&lt; 24) +(static_cast&lt;uint64_t&gt;(f) &lt;&lt; 16) +(static_cast&lt;uint64_t&gt;(g) &lt;&lt; 8) +(static_cast&lt;uint64_t&gt;(h)))</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GENERIC_EXCEPTION_CLASS</name><parameter_list>(<parameter><type><name>e</name></type></parameter>,<parameter><type><name>f</name></type></parameter>,<parameter><type><name>g</name></type></parameter>,<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(static_cast&lt;uint32_t&gt;(e) &lt;&lt; 24) +(static_cast&lt;uint32_t&gt;(f) &lt;&lt; 16) +(static_cast&lt;uint32_t&gt;(g) &lt;&lt; 8) +(static_cast&lt;uint32_t&gt;(h))</cpp:value></cpp:define>




</unit>
