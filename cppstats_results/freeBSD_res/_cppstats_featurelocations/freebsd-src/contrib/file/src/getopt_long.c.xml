<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/file/src/getopt_long.c">






























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"file.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>FILE_RCSID</name><argument_list>(<argument><literal type="string">"@(#)$File: getopt_long.c,v 1.7 2018/09/09 20:33:28 christos Exp $"</literal></argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ERR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;err.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>warnx</name></cpp:macro> <cpp:value>printf</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETOPT_H</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_OPTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;getopt.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mygetopt.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPLACE_GETOPT</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_DIAGASSERT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DIAGASSERT</name></cpp:macro> <cpp:value>assert</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REPLACE_GETOPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__weak_alias</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>__weak_alias</name><argument_list>(<argument>getopt</argument>,<argument>_getopt</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>opterr</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>optind</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>optopt</name> <init>= <expr><literal type="char">'?'</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>optreset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>optarg</name></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>HAVE_NBTOOL_CONFIG_H</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>HAVE_DECL_OPTRESET</name></expr></cpp:elif>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>optreset</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__weak_alias</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>__weak_alias</name><argument_list>(<argument>getopt_long</argument>,<argument>_getopt_long</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IGNORE_FIRST</name></cpp:macro> <cpp:value>(*options == '-' || *options == '+')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRINT_ERROR</name></cpp:macro> <cpp:value>((opterr) &amp;&amp; ((*options != ':') || (IGNORE_FIRST &amp;&amp; options[1] != ':')))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_POSIXLY_CORRECT</name></cpp:macro> <cpp:value>(getenv("POSIXLY_CORRECT") != NULL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PERMUTE</name></cpp:macro> <cpp:value>(!IS_POSIXLY_CORRECT &amp;&amp; !IGNORE_FIRST)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IN_ORDER</name></cpp:macro> <cpp:value>(!IS_POSIXLY_CORRECT &amp;&amp; *options == '-')</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BADCH</name></cpp:macro> <cpp:value>(int)'?'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BADARG</name></cpp:macro> <cpp:value>((IGNORE_FIRST &amp;&amp; options[1] == ':') || (*options == ':') ? (int)':' : (int)'?')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INORDER</name></cpp:macro> <cpp:value>(int)1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EMSG</name></cpp:macro> <cpp:value>""</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>getopt_internal</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>permute_args</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>place</name> <init>= <expr><name>EMSG</name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>nonopt_start</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>nonopt_end</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>recargchar</name><index>[]</index></name> <init>= <expr><literal type="string">"option requires an argument -- %c"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>recargstring</name><index>[]</index></name> <init>= <expr><literal type="string">"option requires an argument -- %s"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>ambig</name><index>[]</index></name> <init>= <expr><literal type="string">"ambiguous option -- %.*s"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>noarg</name><index>[]</index></name> <init>= <expr><literal type="string">"option doesn't take an argument -- %.*s"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>illoptchar</name><index>[]</index></name> <init>= <expr><literal type="string">"unknown option -- %c"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>illoptstring</name><index>[]</index></name> <init>= <expr><literal type="string">"unknown option -- %s"</literal></expr></init></decl>;</decl_stmt>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>gcd</name><parameter_list>(<parameter><decl><type><name>a</name></type></decl></parameter>, <parameter><decl><type><name>b</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>b</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>a</name> <operator>%</operator> <name>b</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>a</name> <operator>%</operator> <name>b</name></expr>;</expr_stmt>
</block_content>}</block></while>

<return>return <expr><name>b</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>permute_args</name><parameter_list>(<parameter><decl><type><name>panonopt_start</name></type></decl></parameter>, <parameter><decl><type><name>panonopt_end</name></type></decl></parameter>, <parameter><decl><type><name>opt_end</name></type></decl></parameter>, <parameter><decl><type><name>nargv</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>panonopt_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>panonopt_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>opt_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nargv</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>cstart</name></decl>, <decl><type ref="prev"/><name>cyclelen</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>ncycle</name></decl>, <decl><type ref="prev"/><name>nnonopts</name></decl>, <decl><type ref="prev"/><name>nopts</name></decl>, <decl><type ref="prev"/><name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>swap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_DIAGASSERT</name><argument_list>(<argument><expr><name>nargv</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>nnonopts</name> <operator>=</operator> <name>panonopt_end</name> <operator>-</operator> <name>panonopt_start</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nopts</name> <operator>=</operator> <name>opt_end</name> <operator>-</operator> <name>panonopt_end</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ncycle</name> <operator>=</operator> <call><name>gcd</name><argument_list>(<argument><expr><name>nnonopts</name></expr></argument>, <argument><expr><name>nopts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cyclelen</name> <operator>=</operator> <operator>(</operator><name>opt_end</name> <operator>-</operator> <name>panonopt_start</name><operator>)</operator> <operator>/</operator> <name>ncycle</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ncycle</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>cstart</name> <operator>=</operator> <name>panonopt_end</name><operator>+</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pos</name> <operator>=</operator> <name>cstart</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>cyclelen</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;=</operator> <name>panonopt_end</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>pos</name> <operator>-=</operator> <name>nnonopts</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>nopts</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>swap</name> <operator>=</operator> <name><name>nargv</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nargv</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <name><name>nargv</name><index>[<expr><name>cstart</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nargv</name><index>[<expr><name>cstart</name></expr>]</index></name> <operator>=</operator> <name>swap</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>getopt_internal</name><parameter_list>(<parameter><decl><type><name>nargc</name></type></decl></parameter>, <parameter><decl><type><name>nargv</name></type></decl></parameter>, <parameter><decl><type><name>options</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>nargc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nargv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>options</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>oli</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>optchar</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_DIAGASSERT</name><argument_list>(<argument><expr><name>nargv</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_DIAGASSERT</name><argument_list>(<argument><expr><name>options</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>optarg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><name>optind</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>optind</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>optreset</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nonopt_start</name> <operator>=</operator> <name>nonopt_end</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<label><name>start</name>:</label>
<if_stmt><if>if <condition>(<expr><name>optreset</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>place</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>optreset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>optind</name> <operator>&gt;=</operator> <name>nargc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>place</name> <operator>=</operator> <name>EMSG</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nonopt_end</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>permute_args</name><argument_list>(<argument><expr><name>nonopt_start</name></expr></argument>, <argument><expr><name>nonopt_end</name></expr></argument>,
<argument><expr><name>optind</name></expr></argument>, <argument><expr><name>nargv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>optind</name> <operator>-=</operator> <name>nonopt_end</name> <operator>-</operator> <name>nonopt_start</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>nonopt_start</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name>optind</name> <operator>=</operator> <name>nonopt_start</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>nonopt_start</name> <operator>=</operator> <name>nonopt_end</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><operator>(</operator><name>place</name> <operator>=</operator> <name><name>nargv</name><index>[<expr><name>optind</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <literal type="char">'-'</literal><operator>)</operator>
<operator>||</operator> <operator>(</operator><name><name>place</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>place</name> <operator>=</operator> <name>EMSG</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>IN_ORDER</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name>optarg</name> <operator>=</operator> <name><name>nargv</name><index>[<expr><name>optind</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>INORDER</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>PERMUTE</name></expr>)</condition> <block>{<block_content>




<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nonopt_start</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nonopt_start</name> <operator>=</operator> <name>optind</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>nonopt_end</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>permute_args</name><argument_list>(<argument><expr><name>nonopt_start</name></expr></argument>, <argument><expr><name>nonopt_end</name></expr></argument>,
<argument><expr><name>optind</name></expr></argument>, <argument><expr><name>nargv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nonopt_start</name> <operator>=</operator> <name>optind</name> <operator>-</operator>
<operator>(</operator><name>nonopt_end</name> <operator>-</operator> <name>nonopt_start</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>nonopt_end</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>optind</name><operator>++</operator></expr>;</expr_stmt>

<goto>goto <name>start</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nonopt_start</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>nonopt_end</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nonopt_end</name> <operator>=</operator> <name>optind</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>place</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>++</operator><name>place</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>place</name><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>optchar</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>*</operator><name>place</name><operator>++</operator><operator>)</operator> <operator>==</operator> <operator>(</operator><name>int</name><operator>)</operator><literal type="char">':'</literal> <operator>||</operator>
<operator>(</operator><name>oli</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>options</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>IGNORE_FIRST</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>optchar</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>place</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>optind</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>PRINT_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><name>illoptchar</name></expr></argument>, <argument><expr><name>optchar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>optopt</name> <operator>=</operator> <name>optchar</name></expr>;</expr_stmt>
<return>return <expr><name>BADCH</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>optchar</name> <operator>==</operator> <literal type="char">'W'</literal> <operator>&amp;&amp;</operator> <name><name>oli</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>place</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name>optind</name> <operator>&gt;=</operator> <name>nargc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>place</name> <operator>=</operator> <name>EMSG</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>PRINT_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><name>recargchar</name></expr></argument>, <argument><expr><name>optchar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>optopt</name> <operator>=</operator> <name>optchar</name></expr>;</expr_stmt>
<return>return <expr><name>BADARG</name></expr>;</return>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>place</name> <operator>=</operator> <name><name>nargv</name><index>[<expr><name>optind</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>




<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>++</operator><name>oli</name> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>place</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>optind</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>optarg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>place</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>optarg</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>place</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>oli</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>optind</name> <operator>&gt;=</operator> <name>nargc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>place</name> <operator>=</operator> <name>EMSG</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>PRINT_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><name>recargchar</name></expr></argument>, <argument><expr><name>optchar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>optopt</name> <operator>=</operator> <name>optchar</name></expr>;</expr_stmt>
<return>return <expr><name>BADARG</name></expr>;</return>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>optarg</name> <operator>=</operator> <name><name>nargv</name><index>[<expr><name>optind</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>place</name> <operator>=</operator> <name>EMSG</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>optind</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>optchar</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REPLACE_GETOPT</name></expr></argument>)</argument_list></call></expr></cpp:if>






<function><type><name>int</name></type>
<name>getopt</name><parameter_list>(<parameter><decl><type><name>nargc</name></type></decl></parameter>, <parameter><decl><type><name>nargv</name></type></decl></parameter>, <parameter><decl><type><name>options</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>nargc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type><name>nargv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>options</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_DIAGASSERT</name><argument_list>(<argument><expr><name>nargv</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_DIAGASSERT</name><argument_list>(<argument><expr><name>options</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>getopt_internal</name><argument_list>(<argument><expr><name>nargc</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>nargv</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <operator>-</operator><literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>optind</name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>nonopt_end</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>permute_args</name><argument_list>(<argument><expr><name>nonopt_start</name></expr></argument>, <argument><expr><name>nonopt_end</name></expr></argument>, <argument><expr><name>optind</name></expr></argument>,
<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>nargv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>optind</name> <operator>-=</operator> <name>nonopt_end</name> <operator>-</operator> <name>nonopt_start</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>nonopt_start</name> <operator>=</operator> <name>nonopt_end</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function><type><name>int</name></type>
<name>getopt_long</name><parameter_list>(<parameter><decl><type><name>nargc</name></type></decl></parameter>, <parameter><decl><type><name>nargv</name></type></decl></parameter>, <parameter><decl><type><name>options</name></type></decl></parameter>, <parameter><decl><type><name>long_options</name></type></decl></parameter>, <parameter><decl><type><name>idx</name></type></decl></parameter>)</parameter_list>
<decl_stmt><decl><type><name>int</name></type> <name>nargc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type><name>nargv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>options</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>long_options</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>idx</name></decl>;</decl_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDENTICAL_INTERPRETATION</name><parameter_list>(<parameter><type><name>_x</name></type></parameter>, <parameter><type><name>_y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(long_options[(_x)].has_arg == long_options[(_y)].has_arg &amp;&amp; long_options[(_x)].flag == long_options[(_y)].flag &amp;&amp; long_options[(_x)].val == long_options[(_y)].val)</cpp:value></cpp:define>




<expr_stmt><expr><call><name>_DIAGASSERT</name><argument_list>(<argument><expr><name>nargv</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_DIAGASSERT</name><argument_list>(<argument><expr><name>options</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_DIAGASSERT</name><argument_list>(<argument><expr><name>long_options</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>getopt_internal</name><argument_list>(<argument><expr><name>nargc</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>nargv</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <operator>-</operator><literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>current_argv</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>has_equal</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>current_argv_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ambiguous</name></decl>, <decl><type ref="prev"/><name>match</name></decl>;</decl_stmt>

<expr_stmt><expr><name>current_argv</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>place</name></expr>;</expr_stmt>
<expr_stmt><expr><name>match</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ambiguous</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>optind</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>place</name> <operator>=</operator> <name>EMSG</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>current_argv</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><name>nonopt_end</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>permute_args</name><argument_list>(<argument><expr><name>nonopt_start</name></expr></argument>, <argument><expr><name>nonopt_end</name></expr></argument>,
<argument><expr><name>optind</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>nargv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>optind</name> <operator>-=</operator> <name>nonopt_end</name> <operator>-</operator> <name>nonopt_start</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>nonopt_start</name> <operator>=</operator> <name>nonopt_end</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>has_equal</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>current_argv</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>current_argv_len</name> <operator>=</operator> <name>has_equal</name> <operator>-</operator> <name>current_argv</name></expr>;</expr_stmt>
<expr_stmt><expr><name>has_equal</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>current_argv_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>current_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>long_options</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>current_argv</name></expr></argument>, <argument><expr><name><name>long_options</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>,
<argument><expr><name>current_argv_len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>long_options</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator>
<operator>(</operator><name>unsigned</name><operator>)</operator><name>current_argv_len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>match</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ambiguous</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>match</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>match</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>IDENTICAL_INTERPRETATION</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>match</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ambiguous</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>ambiguous</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>PRINT_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><name>ambig</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>current_argv_len</name></expr></argument>,
<argument><expr><name>current_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>optopt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>BADCH</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>match</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>long_options</name><index>[<expr><name>match</name></expr>]</index></name><operator>.</operator><name>has_arg</name> <operator>==</operator> <name>no_argument</name>
<operator>&amp;&amp;</operator> <name>has_equal</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>PRINT_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><name>noarg</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>current_argv_len</name></expr></argument>,
<argument><expr><name>current_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>long_options</name><index>[<expr><name>match</name></expr>]</index></name><operator>.</operator><name>flag</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>optopt</name> <operator>=</operator> <name><name>long_options</name><index>[<expr><name>match</name></expr>]</index></name><operator>.</operator><name>val</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>optopt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>BADARG</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>long_options</name><index>[<expr><name>match</name></expr>]</index></name><operator>.</operator><name>has_arg</name> <operator>==</operator> <name>required_argument</name> <operator>||</operator>
<name><name>long_options</name><index>[<expr><name>match</name></expr>]</index></name><operator>.</operator><name>has_arg</name> <operator>==</operator> <name>optional_argument</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>has_equal</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>optarg</name> <operator>=</operator> <name>has_equal</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>long_options</name><index>[<expr><name>match</name></expr>]</index></name><operator>.</operator><name>has_arg</name> <operator>==</operator>
<name>required_argument</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name>optarg</name> <operator>=</operator> <name><name>nargv</name><index>[<expr><name>optind</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>long_options</name><index>[<expr><name>match</name></expr>]</index></name><operator>.</operator><name>has_arg</name> <operator>==</operator> <name>required_argument</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name>optarg</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><name>PRINT_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><name>recargstring</name></expr></argument>, <argument><expr><name>current_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>long_options</name><index>[<expr><name>match</name></expr>]</index></name><operator>.</operator><name>flag</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>optopt</name> <operator>=</operator> <name><name>long_options</name><index>[<expr><name>match</name></expr>]</index></name><operator>.</operator><name>val</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>optopt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><operator>--</operator><name>optind</name></expr>;</expr_stmt>
<return>return <expr><name>BADARG</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>PRINT_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>warnx</name><argument_list>(<argument><expr><name>illoptstring</name></expr></argument>, <argument><expr><name>current_argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>optopt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>BADCH</name></expr>;</return>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>long_options</name><index>[<expr><name>match</name></expr>]</index></name><operator>.</operator><name>flag</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name><name>long_options</name><index>[<expr><name>match</name></expr>]</index></name><operator>.</operator><name>flag</name> <operator>=</operator> <name><name>long_options</name><index>[<expr><name>match</name></expr>]</index></name><operator>.</operator><name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <name><name>long_options</name><index>[<expr><name>match</name></expr>]</index></name><operator>.</operator><name>val</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>idx</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>idx</name> <operator>=</operator> <name>match</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>retval</name></expr>;</return>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>IDENTICAL_INTERPRETATION</name></cpp:undef>
</block_content>}</block></function>
</unit>
