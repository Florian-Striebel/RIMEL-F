<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/file/src/readcdf.c">
























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"file.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>FILE_RCSID</name><argument_list>(<argument><literal type="string">"@(#)$File: readcdf.c,v 1.74 2019/09/11 15:46:30 christos Exp $"</literal></argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"magic.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOTMIME</name><parameter_list>(<parameter><type><name>ms</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((ms)-&gt;flags &amp; MAGIC_MIME) == 0)</cpp:value></cpp:define>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <name>nv</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pattern</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mime</name></decl>;</decl_stmt>
}</block> <decl><name><name>app2mime</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"Word"</literal></expr>, <expr><literal type="string">"msword"</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="string">"Excel"</literal></expr>, <expr><literal type="string">"vnd.ms-excel"</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="string">"Powerpoint"</literal></expr>, <expr><literal type="string">"vnd.ms-powerpoint"</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="string">"Crystal Reports"</literal></expr>, <expr><literal type="string">"x-rpt"</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="string">"Advanced Installer"</literal></expr>, <expr><literal type="string">"vnd.ms-msi"</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="string">"InstallShield"</literal></expr>, <expr><literal type="string">"vnd.ms-msi"</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="string">"Microsoft Patch Compiler"</literal></expr>, <expr><literal type="string">"vnd.ms-msi"</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="string">"NAnt"</literal></expr>, <expr><literal type="string">"vnd.ms-msi"</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="string">"Windows Installer"</literal></expr>, <expr><literal type="string">"vnd.ms-msi"</literal></expr>, }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, }</block></expr>,
}</block></expr></init></decl>, <decl><type ref="prev"/><name><name>name2mime</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"Book"</literal></expr>, <expr><literal type="string">"vnd.ms-excel"</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="string">"Workbook"</literal></expr>, <expr><literal type="string">"vnd.ms-excel"</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="string">"WordDocument"</literal></expr>, <expr><literal type="string">"msword"</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="string">"PowerPoint"</literal></expr>, <expr><literal type="string">"vnd.ms-powerpoint"</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="string">"DigitalSignature"</literal></expr>, <expr><literal type="string">"vnd.ms-msi"</literal></expr>, }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, }</block></expr>,
}</block></expr></init></decl>, <decl><type ref="prev"/><name><name>name2desc</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"Book"</literal></expr>, <expr><literal type="string">"Microsoft Excel"</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="string">"Workbook"</literal></expr>, <expr><literal type="string">"Microsoft Excel"</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="string">"WordDocument"</literal></expr>, <expr><literal type="string">"Microsoft Word"</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="string">"PowerPoint"</literal></expr>, <expr><literal type="string">"Microsoft PowerPoint"</literal></expr>, }</block></expr>,
<expr><block>{ <expr><literal type="string">"DigitalSignature"</literal></expr>, <expr><literal type="string">"Microsoft Installer"</literal></expr>, }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, }</block></expr>,
}</block></expr></init></decl>;</struct>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <name>cv</name> <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>clsid</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mime</name></decl>;</decl_stmt>
}</block> <decl><name><name>clsid2mime</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><block>{ <expr><literal type="number">0x00000000000c1084ULL</literal></expr>, <expr><literal type="number">0x46000000000000c0ULL</literal></expr> }</block></expr>,
<expr><literal type="string">"x-msi"</literal></expr>,
}</block></expr>,
<expr><block>{ <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><name>NULL</name></expr>,
}</block></expr>,
}</block></expr></init></decl>, <decl><type ref="prev"/><name><name>clsid2desc</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><block>{ <expr><literal type="number">0x00000000000c1084ULL</literal></expr>, <expr><literal type="number">0x46000000000000c0ULL</literal></expr> }</block></expr>,
<expr><literal type="string">"MSI Installer"</literal></expr>,
}</block></expr>,
<expr><block>{ <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<expr><name>NULL</name></expr>,
}</block></expr>,
}</block></expr></init></decl>;</struct>

<function><type><name>private</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>cdf_clsid_to_mime</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name><name>clsid</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cv</name></name> <modifier>*</modifier></type><name>cv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>cv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mime</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>clsid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>cv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>clsid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>clsid</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>cv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>clsid</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>cv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mime</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CDF_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"unknown mime %"</literal> <name>PRIx64</name> <literal type="string">", %"</literal> <name>PRIx64</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>clsid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>clsid</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>private</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>cdf_app_to_mime</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vbuf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>nv</name></name> <modifier>*</modifier></type><name>nv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_C_LOCALE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>locale_t</name></type> <name>old_lc_ctype</name></decl>, <decl><type ref="prev"/><name>c_lc_ctype</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c_lc_ctype</name> <operator>=</operator> <call><name>newlocale</name><argument_list>(<argument><expr><name>LC_CTYPE_MASK</name></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>c_lc_ctype</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>old_lc_ctype</name> <operator>=</operator> <call><name>uselocale</name><argument_list>(<argument><expr><name>c_lc_ctype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>old_lc_ctype</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>old_lc_ctype</name> <init>= <expr><call><name>setlocale</name><argument_list>(<argument><expr><name>LC_CTYPE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>old_lc_ctype</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>old_lc_ctype</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>old_lc_ctype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>old_lc_ctype</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>setlocale</name><argument_list>(<argument><expr><name>LC_CTYPE</name></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>nv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pattern</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcasestr</name><argument_list>(<argument><expr><name>vbuf</name></expr></argument>, <argument><expr><name><name>nv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pattern</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <name><name>nv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mime</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt></block_content></block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CDF_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"unknown app %s\n"</literal></expr></argument>, <argument><expr><name>vbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_C_LOCALE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>uselocale</name><argument_list>(<argument><expr><name>old_lc_ctype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>freelocale</name><argument_list>(<argument><expr><name>c_lc_ctype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>setlocale</name><argument_list>(<argument><expr><name>LC_CTYPE</name></expr></argument>, <argument><expr><name>old_lc_ctype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>old_lc_ctype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>private</name> <name>int</name></type>
<name>cdf_file_property_info</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_property_info_t</name> <modifier>*</modifier></type><name>info</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_directory_t</name> <modifier>*</modifier></type><name>root_storage</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cdf_timestamp_t</name></type> <name>tp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>ts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NOTMIME</name><argument_list>(<argument><expr><name>ms</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>root_storage</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>cdf_clsid_to_mime</name><argument_list>(<argument><expr><name><name>root_storage</name><operator>-&gt;</operator><name>d_storage_uuid</name></name></expr></argument>,
<argument><expr><name>clsid2mime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>cdf_print_property_name</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pi_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pi_type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CDF_NULL</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>CDF_SIGNED16</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>NOTMIME</name><argument_list>(<argument><expr><name>ms</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>file_printf</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">", %s: %hd"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>,
<argument><expr><name><name>info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pi_s16</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>CDF_SIGNED32</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>NOTMIME</name><argument_list>(<argument><expr><name>ms</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>file_printf</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">", %s: %d"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>,
<argument><expr><name><name>info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pi_s32</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>CDF_UNSIGNED32</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>NOTMIME</name><argument_list>(<argument><expr><name>ms</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>file_printf</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">", %s: %u"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>,
<argument><expr><name><name>info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pi_u32</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>CDF_FLOAT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>NOTMIME</name><argument_list>(<argument><expr><name>ms</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>file_printf</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">", %s: %g"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>,
<argument><expr><name><name>info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pi_f</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>CDF_DOUBLE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>NOTMIME</name><argument_list>(<argument><expr><name>ms</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>file_printf</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">", %s: %g"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>,
<argument><expr><name><name>info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pi_d</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>CDF_LENGTH32_STRING</name></expr>:</case>
<case>case <expr><name>CDF_LENGTH32_WSTRING</name></expr>:</case>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pi_str</name><operator>.</operator><name>s_len</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>vbuf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>k</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pi_type</name> <operator>==</operator> <name>CDF_LENGTH32_WSTRING</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pi_str</name><operator>.</operator><name>s_buf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pi_str</name><operator>.</operator><name>s_buf</name></name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>s</name> <operator>&lt;</operator> <name>e</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>vbuf</name></expr></argument>)</argument_list></sizeof>
<operator>&amp;&amp;</operator> <name>len</name><operator>--</operator></expr>;</condition> <incr><expr><name>s</name> <operator>+=</operator> <name>k</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isprint</name><argument_list>(<argument><expr><macro><name>CAST</name><argument_list>(<argument>unsigned char</argument>, <argument>*s</argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>vbuf</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>s</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>vbuf</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name>j</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>vbuf</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NOTMIME</name><argument_list>(<argument><expr><name>ms</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>vbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">", %s: %s"</literal></expr></argument>,
<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>vbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pi_id</name> <operator>==</operator>
<name>CDF_PROPERTY_NAME_OF_APPLICATION</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>cdf_app_to_mime</name><argument_list>(<argument><expr><name>vbuf</name></expr></argument>, <argument><expr><name>app2mime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>CDF_FILETIME</name></expr>:</case>
<expr_stmt><expr><name>tp</name> <operator>=</operator> <name><name>info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pi_tp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tp</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>tbuf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>tp</name> <operator>&lt;</operator> <literal type="number">1000000000000000LL</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cdf_print_elapsed_time</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NOTMIME</name><argument_list>(<argument><expr><name>ms</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>file_printf</name><argument_list>(<argument><expr><name>ms</name></expr></argument>,
<argument><expr><literal type="string">", %s: %s"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>c</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ec</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>cdf_timestamp_to_timespec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>cdf_ctime</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ts</name><operator>.</operator><name>tv_sec</name></name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
<operator>(</operator><name>ec</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>ec</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NOTMIME</name><argument_list>(<argument><expr><name>ms</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>file_printf</name><argument_list>(<argument><expr><name>ms</name></expr></argument>,
<argument><expr><literal type="string">", %s: %s"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>CDF_CLIPBOARD</name></expr>:</case>
<break>break;</break>
<default>default:</default>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAGIC_MIME_TYPE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"application/%s"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>private</name> <name>int</name></type>
<name>cdf_file_catalog</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_header_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>cdf_stream_t</name> <modifier>*</modifier></type><name>sst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>cdf_catalog_t</name> <modifier>*</modifier></type><name>cat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cdf_catalog_entry_t</name> <modifier>*</modifier></type><name>ce</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NOTMIME</name><argument_list>(<argument><expr><name>ms</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"Microsoft Thumbs.db ["</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>cdf_unpack_catalog</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cat</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ce</name> <operator>=</operator> <name><name>cat</name><operator>-&gt;</operator><name>cat_e</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cat</name><operator>-&gt;</operator><name>cat_num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>,
<argument><expr><call><name>cdf_u16tos8</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>ce</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ce_namlen</name></expr></argument>, <argument><expr><name><name>ce</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ce_name</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><ternary><condition><expr><name>i</name> <operator>==</operator> <name><name>cat</name><operator>-&gt;</operator><name>cat_num</name></name> <operator>-</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">"]"</literal></expr> </then><else>: <expr><literal type="string">", "</literal></expr></else></ternary></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAGIC_MIME_TYPE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"application/CDFV2"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>private</name> <name>int</name></type>
<name>cdf_file_summary_info</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_header_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>cdf_stream_t</name> <modifier>*</modifier></type><name>sst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_directory_t</name> <modifier>*</modifier></type><name>root_storage</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>cdf_summary_info_header_t</name></type> <name>si</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cdf_property_info_t</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>m</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cdf_unpack_summary_info</name><argument_list>(<argument><expr><name>sst</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>si</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NOTMIME</name><argument_list>(<argument><expr><name>ms</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>file_printf</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"Composite Document File V2 Document"</literal></expr></argument>)</argument_list></call>
<operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>file_printf</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">", %s Endian"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>si</name><operator>.</operator><name>si_byte_order</name></name> <operator>==</operator> <literal type="number">0xfffe</literal></expr> ?</condition><then> <expr><literal type="string">"Little"</literal></expr> </then><else>: <expr><literal type="string">"Big"</literal></expr></else></ternary></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>si</name><operator>.</operator><name>si_os</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">", Os: Windows, Version %d.%d"</literal></expr></argument>,
<argument><expr><name><name>si</name><operator>.</operator><name>si_os_version</name></name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>,
<argument><expr><call><name>CAST</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name><name>si</name><operator>.</operator><name>si_os_version</name></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">", Os: MacOS, Version %d.%d"</literal></expr></argument>,
<argument><expr><call><name>CAST</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name><name>si</name><operator>.</operator><name>si_os_version</name></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>,
<argument><expr><name><name>si</name><operator>.</operator><name>si_os_version</name></name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">", Os %d, Version: %d.%d"</literal></expr></argument>, <argument><expr><name><name>si</name><operator>.</operator><name>si_os</name></name></expr></argument>,
<argument><expr><name><name>si</name><operator>.</operator><name>si_os_version</name></name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>,
<argument><expr><call><name>CAST</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name><name>si</name><operator>.</operator><name>si_os_version</name></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>root_storage</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>cdf_clsid_to_mime</name><argument_list>(<argument><expr><name><name>root_storage</name><operator>-&gt;</operator><name>d_storage_uuid</name></name></expr></argument>,
<argument><expr><name>clsid2desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>str</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">", %s"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>cdf_file_property_info</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>root_storage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name>m</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">2</literal></expr> </then><else>: <expr><name>m</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>notdef</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>private</name> <name>char</name> <modifier>*</modifier></type>
<name>format_clsid</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name><name>uuid</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"%.8"</literal> <name>PRIx64</name> <literal type="string">"-%.4"</literal> <name>PRIx64</name> <literal type="string">"-%.4"</literal> <name>PRIx64</name> <literal type="string">"-%.4"</literal>
<name>PRIx64</name> <literal type="string">"-%.12"</literal> <name>PRIx64</name></expr></argument>,
<argument><expr><operator>(</operator><name><name>uuid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0x000000000ffffffffULL</literal></expr></argument>,
<argument><expr><operator>(</operator><name><name>uuid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0x0000000000000ffffULL</literal></expr></argument>,
<argument><expr><operator>(</operator><name><name>uuid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0x0000000000000ffffULL</literal></expr></argument>,
<argument><expr><operator>(</operator><name><name>uuid</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">48</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0x0000000000000ffffULL</literal></expr></argument>,
<argument><expr><operator>(</operator><name><name>uuid</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0x0000fffffffffffffULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>private</name> <name>int</name></type>
<name>cdf_file_catalog_info</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_info_t</name> <modifier>*</modifier></type><name>info</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>cdf_header_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_sat_t</name> <modifier>*</modifier></type><name>sat</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_sat_t</name> <modifier>*</modifier></type><name>ssat</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>cdf_stream_t</name> <modifier>*</modifier></type><name>sst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_dir_t</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><name>cdf_stream_t</name> <modifier>*</modifier></type><name>scn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>=</operator> <call><name>cdf_read_user_stream</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>sat</name></expr></argument>, <argument><expr><name>ssat</name></expr></argument>, <argument><expr><name>sst</name></expr></argument>,
<argument><expr><name>dir</name></expr></argument>, <argument><expr><literal type="string">"Catalog"</literal></expr></argument>, <argument><expr><name>scn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CDF_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>cdf_dump_catalog</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>scn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>=</operator> <call><name>cdf_file_catalog</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>scn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>private</name> <name>int</name></type>
<name>cdf_check_summary_info</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_info_t</name> <modifier>*</modifier></type><name>info</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>cdf_header_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_sat_t</name> <modifier>*</modifier></type><name>sat</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_sat_t</name> <modifier>*</modifier></type><name>ssat</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>cdf_stream_t</name> <modifier>*</modifier></type><name>sst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_dir_t</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><name>cdf_stream_t</name> <modifier>*</modifier></type><name>scn</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>cdf_directory_t</name> <modifier>*</modifier></type><name>root_storage</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>expn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cdf_directory_t</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><call><name>__arraycount</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>)</argument_list></call></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CDF_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>cdf_dump_summary_info</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>scn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>=</operator> <call><name>cdf_file_summary_info</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>scn</name></expr></argument>, <argument><expr><name>root_storage</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>expn</name> <operator>=</operator> <literal type="string">"Can't expand summary_info"</literal></expr>;</expr_stmt>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>str</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <name><name>dir</name><operator>-&gt;</operator><name>dir_len</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>&amp;</operator><name><name>dir</name><operator>-&gt;</operator><name>dir_tab</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>name</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><call><name>cdf_tole2</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_name</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>cdf_app_to_mime</name><argument_list>(<argument><expr><name>name</name></expr></argument>,
<argument><expr><ternary><condition><expr><call><name>NOTMIME</name><argument_list>(<argument><expr><name>ms</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>name2desc</name></expr> </then><else>: <expr><name>name2mime</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><call><name>NOTMIME</name><argument_list>(<argument><expr><name>ms</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>str</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAGIC_MIME_TYPE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <literal type="string">"vnd.ms-office"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"application/%s"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cdf_file_catalog_info</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>sat</name></expr></argument>, <argument><expr><name>ssat</name></expr></argument>, <argument><expr><name>sst</name></expr></argument>,
<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>scn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<macro><name>private</name></macro> <struct>struct <name>sinfo</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>sections</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>types</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name><name>sectioninfo</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"Encrypted"</literal></expr>, <expr><literal type="string">"encrypted"</literal></expr>,
<expr><block>{
<expr><literal type="string">"EncryptedPackage"</literal></expr>, <expr><literal type="string">"EncryptedSummary"</literal></expr>,
<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>,
}</block></expr>,
<expr><block>{
<expr><name>CDF_DIR_TYPE_USER_STREAM</name></expr>,
<expr><name>CDF_DIR_TYPE_USER_STREAM</name></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

}</block></expr>,
}</block></expr>,
<expr><block>{ <expr><literal type="string">"QuickBooks"</literal></expr>, <expr><literal type="string">"quickbooks"</literal></expr>,
<expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
"TaxForms", "PDFTaxForms", "modulesInBackup",
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><literal type="string">"mfbu_header"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>,
}</block></expr>,
<expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
CDF_DIR_TYPE_USER_STORAGE,
CDF_DIR_TYPE_USER_STORAGE,
CDF_DIR_TYPE_USER_STREAM,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><name>CDF_DIR_TYPE_USER_STREAM</name></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>
}</block></expr>,
}</block></expr>,
<expr><block>{ <expr><literal type="string">"Microsoft Excel"</literal></expr>, <expr><literal type="string">"vnd.ms-excel"</literal></expr>,
<expr><block>{
<expr><literal type="string">"Book"</literal></expr>, <expr><literal type="string">"Workbook"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>,
}</block></expr>,
<expr><block>{
<expr><name>CDF_DIR_TYPE_USER_STREAM</name></expr>,
<expr><name>CDF_DIR_TYPE_USER_STREAM</name></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
}</block></expr>,
}</block></expr>,
<expr><block>{ <expr><literal type="string">"Microsoft Word"</literal></expr>, <expr><literal type="string">"msword"</literal></expr>,
<expr><block>{
<expr><literal type="string">"WordDocument"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>,
}</block></expr>,
<expr><block>{
<expr><name>CDF_DIR_TYPE_USER_STREAM</name></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
}</block></expr>,
}</block></expr>,
<expr><block>{ <expr><literal type="string">"Microsoft PowerPoint"</literal></expr>, <expr><literal type="string">"vnd.ms-powerpoint"</literal></expr>,
<expr><block>{
<expr><literal type="string">"PowerPoint"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>,
}</block></expr>,
<expr><block>{
<expr><name>CDF_DIR_TYPE_USER_STREAM</name></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
}</block></expr>,
}</block></expr>,
<expr><block>{ <expr><literal type="string">"Microsoft Outlook Message"</literal></expr>, <expr><literal type="string">"vnd.ms-outlook"</literal></expr>,
<expr><block>{
<expr><literal type="string">"__properties_version1.0"</literal></expr>,
<expr><literal type="string">"__recip_version1.0_#00000000"</literal></expr>,
<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>,
}</block></expr>,
<expr><block>{
<expr><name>CDF_DIR_TYPE_USER_STREAM</name></expr>,
<expr><name>CDF_DIR_TYPE_USER_STORAGE</name></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,
}</block></expr>,
}</block></expr>,
}</block></expr></init></decl>;</struct>

<function><type><name>private</name> <name>int</name></type>
<name>cdf_file_dir_info</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_dir_t</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>sd</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>sd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sd</name> <operator>&lt;</operator> <call><name>__arraycount</name><argument_list>(<argument><expr><name>sectioninfo</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>sd</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sinfo</name></name> <modifier>*</modifier></type><name>si</name> <init>= <expr><operator>&amp;</operator><name><name>sectioninfo</name><index>[<expr><name>sd</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>si</name><operator>-&gt;</operator><name>sections</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>cdf_find_stream</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name><name>si</name><operator>-&gt;</operator><name>sections</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>si</name><operator>-&gt;</operator><name>types</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call>
<operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CDF_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Can't read %s\n"</literal></expr></argument>, <argument><expr><name><name>si</name><operator>-&gt;</operator><name>sections</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>si</name><operator>-&gt;</operator><name>sections</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>NOTMIME</name><argument_list>(<argument><expr><name>ms</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"CDFV2 %s"</literal></expr></argument>, <argument><expr><name><name>si</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAGIC_MIME_TYPE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"application/%s"</literal></expr></argument>, <argument><expr><name><name>si</name><operator>-&gt;</operator><name>mime</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></for>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>protected</name> <name>int</name></type>
<name>file_trycdf</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>buffer</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><name><name>b</name><operator>-&gt;</operator><name>fd</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <macro><name>CAST</name><argument_list>(<argument>const unsigned char *</argument>, <argument>b-&gt;fbuf</argument>)</argument_list></macro></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nbytes</name> <init>= <expr><name><name>b</name><operator>-&gt;</operator><name>flen</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cdf_info_t</name></type> <name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cdf_header_t</name></type> <name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cdf_sat_t</name></type> <name>sat</name></decl>, <decl><type ref="prev"/><name>ssat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cdf_stream_t</name></type> <name>sst</name></decl>, <decl><type ref="prev"/><name>scn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cdf_dir_t</name></type> <name>dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>expn</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>cdf_directory_t</name> <modifier>*</modifier></type><name>root_storage</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>scn</name><operator>.</operator><name>sst_tab</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>.</operator><name>i_fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>.</operator><name>i_buf</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>.</operator><name>i_len</name></name> <operator>=</operator> <name>nbytes</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>MAGIC_APPLE</name><operator>|</operator><name>MAGIC_EXTENSION</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>cdf_read_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CDF_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>cdf_dump_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>=</operator> <call><name>cdf_read_sat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sat</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>expn</name> <operator>=</operator> <literal type="string">"Can't read SAT"</literal></expr>;</expr_stmt>
<goto>goto <name>out0</name>;</goto>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CDF_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>cdf_dump_sat</name><argument_list>(<argument><expr><literal type="string">"SAT"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sat</name></expr></argument>, <argument><expr><call><name>CDF_SEC_SIZE</name><argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>=</operator> <call><name>cdf_read_ssat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ssat</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>expn</name> <operator>=</operator> <literal type="string">"Can't read SSAT"</literal></expr>;</expr_stmt>
<goto>goto <name>out1</name>;</goto>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CDF_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>cdf_dump_sat</name><argument_list>(<argument><expr><literal type="string">"SSAT"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ssat</name></expr></argument>, <argument><expr><call><name>CDF_SHORT_SEC_SIZE</name><argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>=</operator> <call><name>cdf_read_dir</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dir</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>expn</name> <operator>=</operator> <literal type="string">"Can't read directory"</literal></expr>;</expr_stmt>
<goto>goto <name>out2</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>=</operator> <call><name>cdf_read_short_stream</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dir</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sst</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>root_storage</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>expn</name> <operator>=</operator> <literal type="string">"Cannot read short stream"</literal></expr>;</expr_stmt>
<goto>goto <name>out3</name>;</goto>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CDF_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>cdf_dump_dir</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ssat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>notdef</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>root_storage</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>NOTMIME</name><argument_list>(<argument><expr><name>ms</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>clsbuf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"CLSID %s, "</literal></expr></argument>,
<argument><expr><call><name>format_clsid</name><argument_list>(<argument><expr><name>clsbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>clsbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name><name>root_storage</name><operator>-&gt;</operator><name>d_storage_uuid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>=</operator> <call><name>cdf_read_user_stream</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ssat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dir</name></expr></argument>,
<argument><expr><literal type="string">"FileHeader"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>scn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HWP5_SIGNATURE</name></cpp:macro> <cpp:value>"HWP Document File"</cpp:value></cpp:define>
<if_stmt><if>if <condition>(<expr><name><name>scn</name><operator>.</operator><name>sst_len</name></name> <operator>*</operator> <name><name>scn</name><operator>.</operator><name>sst_ss</name></name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>HWP5_SIGNATURE</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal>
<operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name><name>scn</name><operator>.</operator><name>sst_tab</name></name></expr></argument>, <argument><expr><name>HWP5_SIGNATURE</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HWP5_SIGNATURE</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>NOTMIME</name><argument_list>(<argument><expr><name>ms</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name><argument_list>(<argument><expr><name>ms</name></expr></argument>,
<argument><expr><literal type="string">"Hangul (Korean) Word Processor File 5.x"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAGIC_MIME_TYPE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"application/x-hwp"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>out5</name>;</goto>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>cdf_zero_stream</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>=</operator> <call><name>cdf_read_summary_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ssat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dir</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>scn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>ESRCH</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>expn</name> <operator>=</operator> <literal type="string">"Cannot read summary info"</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cdf_check_summary_info</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>sat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ssat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dir</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scn</name></expr></argument>, <argument><expr><name>root_storage</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>expn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cdf_zero_stream</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>=</operator> <call><name>cdf_read_doc_summary_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ssat</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>sst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dir</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>ESRCH</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>expn</name> <operator>=</operator> <literal type="string">"Cannot read summary info"</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cdf_check_summary_info</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ssat</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>sst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dir</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scn</name></expr></argument>, <argument><expr><name>root_storage</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>expn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>cdf_file_dir_info</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>expn</name> <operator>=</operator> <literal type="string">"Cannot read section info"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<label><name>out5</name>:</label>
<expr_stmt><expr><call><name>cdf_zero_stream</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cdf_zero_stream</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>out3</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>dir</name><operator>.</operator><name>dir_tab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>out2</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ssat</name><operator>.</operator><name>sat_tab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>out1</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>sat</name><operator>.</operator><name>sat_tab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>out0</name>:</label>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>NOTMIME</name><argument_list>(<argument><expr><name>ms</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name><argument_list>(<argument><expr><name>ms</name></expr></argument>,
<argument><expr><literal type="string">"Composite Document File V2 Document"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>expn</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">", %s"</literal></expr></argument>, <argument><expr><name>expn</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAGIC_MIME_TYPE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"application/CDFV2"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
</unit>
