<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/file/src/print.c">






























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"file.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>FILE_RCSID</name><argument_list>(<argument><literal type="string">"@(#)$File: print.c,v 1.89 2021/06/30 10:08:48 christos Exp $"</literal></argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UNISTD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdf.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>COMPILE_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>protected</name> <name>void</name></type>
<name>file_mdump</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>optyp</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>FILE_OPS</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>tbuf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%u: %.*s %u"</literal></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>,
<argument><expr><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>cont_level</name></name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;"</literal></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>INDIR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"(%s,"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>in_type</name></name> <operator>&lt;</operator> <name>file_nnames</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>file_names</name><index>[<expr><name><name>m</name><operator>-&gt;</operator><name>in_type</name></name></expr>]</index></name></expr> </then><else>:
<expr><literal type="string">"*bad in_type*"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>in_op</name></name> <operator>&amp;</operator> <name>FILE_OPINVERSE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'~'</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%c%u),"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><call><name>CAST</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>in_op</name></name> <operator>&amp;</operator> <name>FILE_OPS_MASK</name></expr></argument>)</argument_list></call> <operator>&lt;</operator>
<call><name>__arraycount</name><argument_list>(<argument><expr><name>optyp</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then>
<expr><name><name>optyp</name><index>[<expr><name><name>m</name><operator>-&gt;</operator><name>in_op</name></name> <operator>&amp;</operator> <name>FILE_OPS_MASK</name></expr>]</index></name></expr> </then><else>: <expr><literal type="char">'?'</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>in_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" %s%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>UNSIGNED</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"u"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>type</name></name> <operator>&lt;</operator> <name>file_nnames</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>file_names</name><index>[<expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name></expr> </then><else>: <expr><literal type="string">"*bad type"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>mask_op</name></name> <operator>&amp;</operator> <name>FILE_OPINVERSE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'~'</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_STRING</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'/'</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>&amp;</operator> <name>STRING_COMPACT_WHITESPACE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fputc</name><argument_list>(<argument><expr><name>CHAR_COMPACT_WHITESPACE</name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>&amp;</operator> <name>STRING_COMPACT_OPTIONAL_WHITESPACE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fputc</name><argument_list>(<argument><expr><name>CHAR_COMPACT_OPTIONAL_WHITESPACE</name></expr></argument>,
<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>&amp;</operator> <name>STRING_IGNORE_LOWERCASE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fputc</name><argument_list>(<argument><expr><name>CHAR_IGNORE_LOWERCASE</name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>&amp;</operator> <name>STRING_IGNORE_UPPERCASE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fputc</name><argument_list>(<argument><expr><name>CHAR_IGNORE_UPPERCASE</name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>&amp;</operator> <name>REGEX_OFFSET_START</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fputc</name><argument_list>(<argument><expr><name>CHAR_REGEX_OFFSET_START</name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>&amp;</operator> <name>STRING_TEXTTEST</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fputc</name><argument_list>(<argument><expr><name>CHAR_TEXTTEST</name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>&amp;</operator> <name>STRING_BINTEST</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fputc</name><argument_list>(<argument><expr><name>CHAR_BINTEST</name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>&amp;</operator> <name>PSTRING_1_BE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fputc</name><argument_list>(<argument><expr><name>CHAR_PSTRING_1_BE</name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>&amp;</operator> <name>PSTRING_2_BE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fputc</name><argument_list>(<argument><expr><name>CHAR_PSTRING_2_BE</name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>&amp;</operator> <name>PSTRING_2_LE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fputc</name><argument_list>(<argument><expr><name>CHAR_PSTRING_2_LE</name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>&amp;</operator> <name>PSTRING_4_BE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fputc</name><argument_list>(<argument><expr><name>CHAR_PSTRING_4_BE</name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>&amp;</operator> <name>PSTRING_4_LE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fputc</name><argument_list>(<argument><expr><name>CHAR_PSTRING_4_LE</name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>&amp;</operator> <name>PSTRING_LENGTH_INCLUDES_ITSELF</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fputc</name><argument_list>(
<argument><expr><name>CHAR_PSTRING_LENGTH_INCLUDES_ITSELF</name></expr></argument>,
<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>str_range</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"/%u"</literal></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>str_range</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>CAST</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>mask_op</name></name> <operator>&amp;</operator> <name>FILE_OPS_MASK</name></expr></argument>)</argument_list></call> <operator>&lt;</operator>
<call><name>__arraycount</name><argument_list>(<argument><expr><name>optyp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fputc</name><argument_list>(<argument><expr><name><name>optyp</name><index>[<expr><name><name>m</name><operator>-&gt;</operator><name>mask_op</name></name> <operator>&amp;</operator> <name>FILE_OPS_MASK</name></expr>]</index></name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'?'</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>num_mask</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%.8llx"</literal></expr></argument>,
<argument><expr><macro><name>CAST</name><argument_list>(<argument>unsigned long long</argument>, <argument>m-&gt;num_mask</argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">",%c"</literal></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>reln</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>reln</name></name> <operator>!=</operator> <literal type="char">'x'</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FILE_BYTE</name></expr>:</case>
<case>case <expr><name>FILE_SHORT</name></expr>:</case>
<case>case <expr><name>FILE_LONG</name></expr>:</case>
<case>case <expr><name>FILE_LESHORT</name></expr>:</case>
<case>case <expr><name>FILE_LELONG</name></expr>:</case>
<case>case <expr><name>FILE_MELONG</name></expr>:</case>
<case>case <expr><name>FILE_BESHORT</name></expr>:</case>
<case>case <expr><name>FILE_BELONG</name></expr>:</case>
<case>case <expr><name>FILE_INDIRECT</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>l</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_BEQUAD</name></expr>:</case>
<case>case <expr><name>FILE_LEQUAD</name></expr>:</case>
<case>case <expr><name>FILE_QUAD</name></expr>:</case>
<case>case <expr><name>FILE_OFFSET</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>INT64_T_FORMAT</name> <literal type="string">"d"</literal></expr></argument>,
<argument><expr><macro><name>CAST</name><argument_list>(<argument>long long</argument>, <argument>m-&gt;value.q</argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_PSTRING</name></expr>:</case>
<case>case <expr><name>FILE_STRING</name></expr>:</case>
<case>case <expr><name>FILE_REGEX</name></expr>:</case>
<case>case <expr><name>FILE_BESTRING16</name></expr>:</case>
<case>case <expr><name>FILE_LESTRING16</name></expr>:</case>
<case>case <expr><name>FILE_SEARCH</name></expr>:</case>
<expr_stmt><expr><call><name>file_showstr</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>s</name></name></expr></argument>,
<argument><expr><call><name>CAST</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>vallen</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_DATE</name></expr>:</case>
<case>case <expr><name>FILE_LEDATE</name></expr>:</case>
<case>case <expr><name>FILE_BEDATE</name></expr>:</case>
<case>case <expr><name>FILE_MEDATE</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s,"</literal></expr></argument>,
<argument><expr><call><name>file_fmttime</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>l</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_LDATE</name></expr>:</case>
<case>case <expr><name>FILE_LELDATE</name></expr>:</case>
<case>case <expr><name>FILE_BELDATE</name></expr>:</case>
<case>case <expr><name>FILE_MELDATE</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s,"</literal></expr></argument>,
<argument><expr><call><name>file_fmttime</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>l</name></name></expr></argument>,
<argument><expr><name>FILE_T_LOCAL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_QDATE</name></expr>:</case>
<case>case <expr><name>FILE_LEQDATE</name></expr>:</case>
<case>case <expr><name>FILE_BEQDATE</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s,"</literal></expr></argument>,
<argument><expr><call><name>file_fmttime</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>q</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_QLDATE</name></expr>:</case>
<case>case <expr><name>FILE_LEQLDATE</name></expr>:</case>
<case>case <expr><name>FILE_BEQLDATE</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s,"</literal></expr></argument>,
<argument><expr><call><name>file_fmttime</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>q</name></name></expr></argument>,
<argument><expr><name>FILE_T_LOCAL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_QWDATE</name></expr>:</case>
<case>case <expr><name>FILE_LEQWDATE</name></expr>:</case>
<case>case <expr><name>FILE_BEQWDATE</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s,"</literal></expr></argument>,
<argument><expr><call><name>file_fmttime</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>q</name></name></expr></argument>,
<argument><expr><name>FILE_T_WINDOWS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_FLOAT</name></expr>:</case>
<case>case <expr><name>FILE_BEFLOAT</name></expr>:</case>
<case>case <expr><name>FILE_LEFLOAT</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%G"</literal></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_DOUBLE</name></expr>:</case>
<case>case <expr><name>FILE_BEDOUBLE</name></expr>:</case>
<case>case <expr><name>FILE_LEDOUBLE</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%G"</literal></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>d</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_LEVARINT</name></expr>:</case>
<case>case <expr><name>FILE_BEVARINT</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>file_fmtvarint</name><argument_list>(
<argument><expr><name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>us</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_DEFAULT</name></expr>:</case>

<break>break;</break>
<case>case <expr><name>FILE_USE</name></expr>:</case>
<case>case <expr><name>FILE_NAME</name></expr>:</case>
<case>case <expr><name>FILE_DER</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"'%s'"</literal></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_GUID</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>file_print_guid</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>guid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"*bad type %d*"</literal></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">",\"%s\"]\n"</literal></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><name>protected</name> <name>void</name></type>
<name>file_magwarn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>va</name></decl>;</decl_stmt>


<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ms</name><operator>-&gt;</operator><name>file</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s, %lu: "</literal></expr></argument>, <argument><expr><name><name>ms</name><operator>-&gt;</operator><name>file</name></name></expr></argument>,
<argument><expr><macro><name>CAST</name><argument_list>(<argument>unsigned long</argument>, <argument>ms-&gt;line</argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Warning: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>va</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>vfprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>protected</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>file_fmtvarint</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>us</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>blen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>blen</name></expr></argument>, <argument><expr><literal type="string">"%jd"</literal></expr></argument>, <argument><expr><call><name>file_varint2uintmax_t</name><argument_list>(<argument><expr><name>us</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>protected</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>file_fmttime</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bsize</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl>, <decl><type ref="prev"/><name>tmz</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>FILE_T_WINDOWS</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>ts</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>cdf_timestamp_to_timespec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>, <argument><expr><call><name>CAST</name><argument_list>(<argument><expr><name>cdf_timestamp_t</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>ts</name><operator>.</operator><name>tv_sec</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>


<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>time_t</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>FILE_T_LOCAL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tm</name> <operator>=</operator> <call><name>localtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>tm</name> <operator>=</operator> <call><name>gmtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>tm</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>pp</name> <operator>=</operator> <call><name>asctime_r</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pp</name><index>[<expr><call><name>strcspn</name><argument_list>(<argument><expr><name>pp</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><name>pp</name></expr>;</return>
<label><name>out</name>:</label>
<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"*Invalid time*"</literal></expr></argument>, <argument><expr><name>bsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>
</unit>
