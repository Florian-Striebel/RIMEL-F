<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/file/src/cdf.c">

































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"file.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>FILE_RCSID</name><argument_list>(<argument><literal type="string">"@(#)$File: cdf.c,v 1.120 2021/09/24 13:59:19 christos Exp $"</literal></argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CDF_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;err.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EFTYPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EFTYPE</name></cpp:macro> <cpp:value>EINVAL</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SIZE_T_MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_T_MAX</name></cpp:macro> <cpp:value>CAST(size_t, ~0ULL)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdf.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CDF_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DPRINTF</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf a, fflush(stdout)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DPRINTF</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<union><specifier>static</specifier> union <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>u</name></decl>;</decl_stmt>
}</block> <decl><name>cdf_bo</name></decl>;</union>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEED_SWAP</name></cpp:macro> <cpp:value>(cdf_bo.u == CAST(uint32_t, 0x01020304))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_TOLE8</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(CAST(uint64_t, NEED_SWAP ? _cdf_tole8(x) : CAST(uint64_t, x)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_TOLE4</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(CAST(uint32_t, NEED_SWAP ? _cdf_tole4(x) : CAST(uint32_t, x)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_TOLE2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(CAST(uint16_t, NEED_SWAP ? _cdf_tole2(x) : CAST(uint16_t, x)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_TOLE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(sizeof(x) == 2 ? CDF_TOLE2(CAST(uint16_t, x)) : (sizeof(x) == 4 ? CDF_TOLE4(CAST(uint32_t, x)) : CDF_TOLE8(CAST(uint64_t, x))))</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_GETUINT32</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cdf_getuint32(x, y)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_MALLOC</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cdf_malloc(__FILE__, __LINE__, (n))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_REALLOC</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cdf_realloc(__FILE__, __LINE__, (p), (n))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_CALLOC</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>u</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cdf_calloc(__FILE__, __LINE__, (n), (u))</cpp:value></cpp:define>



<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>cdf_malloc</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>file</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>size_t</name> <name>line</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>size_t</name> <name>n</name></expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%s,%"</literal> <name>SIZE_T_FORMAT</name> <literal type="string">"u: %s %"</literal> <name>SIZE_T_FORMAT</name> <literal type="string">"u\n"</literal><operator>,</operator>
<name>file</name><operator>,</operator> <name>line</name><operator>,</operator> <name>__func__</name><operator>,</operator> <name>n</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>malloc</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>cdf_realloc</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>file</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>size_t</name> <name>line</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>size_t</name> <name>n</name></expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%s,%"</literal> <name>SIZE_T_FORMAT</name> <literal type="string">"u: %s %"</literal> <name>SIZE_T_FORMAT</name> <literal type="string">"u\n"</literal><operator>,</operator>
<name>file</name><operator>,</operator> <name>line</name><operator>,</operator> <name>__func__</name><operator>,</operator> <name>n</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>realloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>cdf_calloc</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>file</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>size_t</name> <name>line</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>size_t</name> <name>n</name></expr></argument>, <argument><expr><name>size_t</name> <name>u</name></expr></argument>)</argument_list>
<block>{<block_content>
<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%s,%"</literal> <name>SIZE_T_FORMAT</name> <literal type="string">"u: %s %"</literal> <name>SIZE_T_FORMAT</name> <literal type="string">"u %"</literal>
<name>SIZE_T_FORMAT</name> <literal type="string">"u\n"</literal><operator>,</operator> <name>file</name><operator>,</operator> <name>line</name><operator>,</operator> <name>__func__</name><operator>,</operator> <name>n</name><operator>,</operator> <name>u</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>calloc</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></decl></decl_stmt>




<function><type><specifier>static</specifier> <name>uint16_t</name></type>
<name>_cdf_tole2</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>sv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>RCAST</name><argument_list>(<argument><expr><name>uint8_t</name> <operator>*</operator></expr></argument>, <argument><expr><call><name>RCAST</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>sv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><call><name>RCAST</name><argument_list>(<argument><expr><name>uint8_t</name> <operator>*</operator></expr></argument>, <argument><expr><call><name>RCAST</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>uint32_t</name></type>
<name>_cdf_tole4</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>sv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>RCAST</name><argument_list>(<argument><expr><name>uint8_t</name> <operator>*</operator></expr></argument>, <argument><expr><call><name>RCAST</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>sv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><call><name>RCAST</name><argument_list>(<argument><expr><name>uint8_t</name> <operator>*</operator></expr></argument>, <argument><expr><call><name>RCAST</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>uint64_t</name></type>
<name>_cdf_tole8</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>sv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>RCAST</name><argument_list>(<argument><expr><name>uint8_t</name> <operator>*</operator></expr></argument>, <argument><expr><call><name>RCAST</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>sv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><call><name>RCAST</name><argument_list>(<argument><expr><name>uint8_t</name> <operator>*</operator></expr></argument>, <argument><expr><call><name>RCAST</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>uint32_t</name></type>
<name>cdf_getuint32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>offs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <name>offs</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>CDF_TOLE4</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_UNPACK</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)memcpy(&amp;(a), &amp;buf[len], sizeof(a)), len += sizeof(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_UNPACKA</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)memcpy((a), &amp;buf[len], sizeof(a)), len += sizeof(a)</cpp:value></cpp:define>


<function><type><name>uint16_t</name></type>
<name>cdf_tole2</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>sv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>CDF_TOLE2</name><argument_list>(<argument><expr><name>sv</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type>
<name>cdf_tole4</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>sv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>CDF_TOLE4</name><argument_list>(<argument><expr><name>sv</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type>
<name>cdf_tole8</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>sv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>CDF_TOLE8</name><argument_list>(<argument><expr><name>sv</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>cdf_swap_header</name><parameter_list>(<parameter><decl><type><name>cdf_header_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>h_magic</name></name> <operator>=</operator> <call><name>CDF_TOLE8</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>h_magic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>h_uuid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>CDF_TOLE8</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>h_uuid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>h_uuid</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>CDF_TOLE8</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>h_uuid</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>h_revision</name></name> <operator>=</operator> <call><name>CDF_TOLE2</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>h_revision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>h_version</name></name> <operator>=</operator> <call><name>CDF_TOLE2</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>h_version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>h_byte_order</name></name> <operator>=</operator> <call><name>CDF_TOLE2</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>h_byte_order</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>h_sec_size_p2</name></name> <operator>=</operator> <call><name>CDF_TOLE2</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>h_sec_size_p2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>h_short_sec_size_p2</name></name> <operator>=</operator> <call><name>CDF_TOLE2</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>h_short_sec_size_p2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>h_num_sectors_in_sat</name></name> <operator>=</operator> <call><name>CDF_TOLE4</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>h_num_sectors_in_sat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>h_secid_first_directory</name></name> <operator>=</operator> <call><name>CDF_TOLE4</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>h_secid_first_directory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>h_min_size_standard_stream</name></name> <operator>=</operator>
<call><name>CDF_TOLE4</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>h_min_size_standard_stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>h_secid_first_sector_in_short_sat</name></name> <operator>=</operator>
<call><name>CDF_TOLE4</name><argument_list>(<argument><expr><call><name>CAST</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>h_secid_first_sector_in_short_sat</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>h_num_sectors_in_short_sat</name></name> <operator>=</operator>
<call><name>CDF_TOLE4</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>h_num_sectors_in_short_sat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>h_secid_first_sector_in_master_sat</name></name> <operator>=</operator>
<call><name>CDF_TOLE4</name><argument_list>(<argument><expr><call><name>CAST</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>h_secid_first_sector_in_master_sat</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>h_num_sectors_in_master_sat</name></name> <operator>=</operator>
<call><name>CDF_TOLE4</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>h_num_sectors_in_master_sat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>__arraycount</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>h_master_sat</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>h_master_sat</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>
<call><name>CDF_TOLE4</name><argument_list>(<argument><expr><call><name>CAST</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>h_master_sat</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>cdf_unpack_header</name><parameter_list>(<parameter><decl><type><name>cdf_header_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CDF_UNPACK</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>h_magic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CDF_UNPACKA</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>h_uuid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CDF_UNPACK</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>h_revision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CDF_UNPACK</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>h_version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CDF_UNPACK</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>h_byte_order</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CDF_UNPACK</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>h_sec_size_p2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CDF_UNPACK</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>h_short_sec_size_p2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CDF_UNPACKA</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>h_unused0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CDF_UNPACK</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>h_num_sectors_in_sat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CDF_UNPACK</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>h_secid_first_directory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CDF_UNPACKA</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>h_unused1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CDF_UNPACK</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>h_min_size_standard_stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CDF_UNPACK</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>h_secid_first_sector_in_short_sat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CDF_UNPACK</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>h_num_sectors_in_short_sat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CDF_UNPACK</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>h_secid_first_sector_in_master_sat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CDF_UNPACK</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>h_num_sectors_in_master_sat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>__arraycount</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>h_master_sat</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>CDF_UNPACK</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>h_master_sat</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>cdf_swap_dir</name><parameter_list>(<parameter><decl><type><name>cdf_directory_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>d_namelen</name></name> <operator>=</operator> <call><name>CDF_TOLE2</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_namelen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>d_left_child</name></name> <operator>=</operator> <call><name>CDF_TOLE4</name><argument_list>(<argument><expr><call><name>CAST</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_left_child</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>d_right_child</name></name> <operator>=</operator> <call><name>CDF_TOLE4</name><argument_list>(<argument><expr><call><name>CAST</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_right_child</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>d_storage</name></name> <operator>=</operator> <call><name>CDF_TOLE4</name><argument_list>(<argument><expr><call><name>CAST</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_storage</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>d_storage_uuid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>CDF_TOLE8</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_storage_uuid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>d_storage_uuid</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>CDF_TOLE8</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_storage_uuid</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>d_flags</name></name> <operator>=</operator> <call><name>CDF_TOLE4</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>d_created</name></name> <operator>=</operator> <call><name>CDF_TOLE8</name><argument_list>(<argument><expr><call><name>CAST</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_created</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>d_modified</name></name> <operator>=</operator> <call><name>CDF_TOLE8</name><argument_list>(<argument><expr><call><name>CAST</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_modified</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>d_stream_first_sector</name></name> <operator>=</operator> <call><name>CDF_TOLE4</name><argument_list>(
<argument><expr><call><name>CAST</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_stream_first_sector</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>d_size</name></name> <operator>=</operator> <call><name>CDF_TOLE4</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>cdf_swap_class</name><parameter_list>(<parameter><decl><type><name>cdf_classid_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>cl_dword</name></name> <operator>=</operator> <call><name>CDF_TOLE4</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>cl_dword</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>cl_word</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>CDF_TOLE2</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>cl_word</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>cl_word</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>CDF_TOLE2</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>cl_word</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>cdf_unpack_dir</name><parameter_list>(<parameter><decl><type><name>cdf_directory_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CDF_UNPACKA</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CDF_UNPACK</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_namelen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CDF_UNPACK</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CDF_UNPACK</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_color</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CDF_UNPACK</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_left_child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CDF_UNPACK</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_right_child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CDF_UNPACK</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_storage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CDF_UNPACKA</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_storage_uuid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CDF_UNPACK</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CDF_UNPACK</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_created</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CDF_UNPACK</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_modified</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CDF_UNPACK</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_stream_first_sector</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CDF_UNPACK</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CDF_UNPACK</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_unused0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>cdf_zero_stream</name><parameter_list>(<parameter><decl><type><name>cdf_stream_t</name> <modifier>*</modifier></type><name>scn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>scn</name><operator>-&gt;</operator><name>sst_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>scn</name><operator>-&gt;</operator><name>sst_dirlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>scn</name><operator>-&gt;</operator><name>sst_ss</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>scn</name><operator>-&gt;</operator><name>sst_tab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>scn</name><operator>-&gt;</operator><name>sst_tab</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>cdf_check_stream</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cdf_stream_t</name> <modifier>*</modifier></type><name>sst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_header_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>ss</name> <init>= <expr><ternary><condition><expr><name><name>sst</name><operator>-&gt;</operator><name>sst_dirlen</name></name> <operator>&lt;</operator> <name><name>h</name><operator>-&gt;</operator><name>h_min_size_standard_stream</name></name></expr> ?</condition><then>
<expr><call><name>CDF_SHORT_SEC_SIZE</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>CDF_SEC_SIZE</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ss</name> <operator>==</operator> <name><name>sst</name><operator>-&gt;</operator><name>sst_ss</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>sst</name><operator>-&gt;</operator><name>sst_ss</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cdf_check_stream_offset</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cdf_stream_t</name> <modifier>*</modifier></type><name>sst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_header_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>tail</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name>RCAST</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name><name>sst</name><operator>-&gt;</operator><name>sst_tab</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><call><name>RCAST</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>tail</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>ss</name> <init>= <expr><call><name>cdf_check_stream</name><argument_list>(<argument><expr><name>sst</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><operator>&amp;</operator><name>line</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>e</name> <operator>&gt;=</operator> <name>b</name> <operator>&amp;&amp;</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>e</name> <operator>-</operator> <name>b</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>ss</name> <operator>*</operator> <name><name>sst</name><operator>-&gt;</operator><name>sst_len</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%d: offset begin %p &lt; end %p || %"</literal> <name>SIZE_T_FORMAT</name> <literal type="string">"u"</literal>
<literal type="string">" &gt; %"</literal> <name>SIZE_T_FORMAT</name> <literal type="string">"u [%"</literal> <name>SIZE_T_FORMAT</name> <literal type="string">"u %"</literal>
<name>SIZE_T_FORMAT</name> <literal type="string">"u]\n"</literal><operator>,</operator> <name>line</name><operator>,</operator> <name>b</name><operator>,</operator> <name>e</name><operator>,</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>e</name> <operator>-</operator> <name>b</name><operator>)</operator><operator>,</operator>
<name>ss</name> <operator>*</operator> <name><name>sst</name><operator>-&gt;</operator><name>sst_len</name></name><operator>,</operator> <name>ss</name><operator>,</operator> <name><name>sst</name><operator>-&gt;</operator><name>sst_len</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EFTYPE</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>cdf_read</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cdf_info_t</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>siz</name> <init>= <expr><call><name>CAST</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>off</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CAST</name><argument_list>(<argument><expr><name>off_t</name></expr></argument>, <argument><expr><name>off</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>off_t</name></expr></argument>, <argument><expr><name>siz</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>i_buf</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>info</name><operator>-&gt;</operator><name>i_len</name></name> <operator>&gt;=</operator> <name>siz</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>i_buf</name><index>[<expr><name>off</name></expr>]</index></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>CAST</name><argument_list>(<argument><expr><name>ssize_t</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>i_fd</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pread</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>i_fd</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>ssize_t</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>CAST</name><argument_list>(<argument><expr><name>ssize_t</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
<label><name>out</name>:</label>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>cdf_read_header</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cdf_info_t</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>cdf_header_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>memcpy</name><argument_list>(<argument><expr><name><name>cdf_bo</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><literal type="string">"\01\02\03\04"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>cdf_read</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><call><name>CAST</name><argument_list>(<argument><expr><name>off_t</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>cdf_unpack_header</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cdf_swap_header</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>h_magic</name></name> <operator>!=</operator> <name>CDF_MAGIC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Bad magic %#"</literal> <name>INT64_T_FORMAT</name> <literal type="string">"x != %#"</literal>
<name>INT64_T_FORMAT</name> <literal type="string">"x\n"</literal><operator>,</operator>
<operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name><name>h</name><operator>-&gt;</operator><name>h_magic</name></name><operator>,</operator>
<operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>CDF_MAGIC</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>h_sec_size_p2</name></name> <operator>&gt;</operator> <literal type="number">20</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Bad sector size %hu\n"</literal><operator>,</operator> <name><name>h</name><operator>-&gt;</operator><name>h_sec_size_p2</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>h_short_sec_size_p2</name></name> <operator>&gt;</operator> <literal type="number">20</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Bad short sector size %hu\n"</literal><operator>,</operator>
<name><name>h</name><operator>-&gt;</operator><name>h_short_sec_size_p2</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>out</name>:</label>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EFTYPE</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>ssize_t</name></type>
<name>cdf_read_sector</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cdf_info_t</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>offs</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>cdf_header_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>cdf_secid_t</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>ss</name> <init>= <expr><call><name>CDF_SEC_SIZE</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>pos</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>SIZE_T_MAX</name> <operator>/</operator> <name>ss</name> <operator>&lt;</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>CDF_SEC_POS</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ss</name> <operator>==</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>cdf_read</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><call><name>CAST</name><argument_list>(<argument><expr><name>off_t</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RCAST</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>offs</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>ssize_t</name></type>
<name>cdf_read_short_sector</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cdf_stream_t</name> <modifier>*</modifier></type><name>sst</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>offs</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_header_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>cdf_secid_t</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>ss</name> <init>= <expr><call><name>CDF_SHORT_SEC_SIZE</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>pos</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>SIZE_T_MAX</name> <operator>/</operator> <name>ss</name> <operator>&lt;</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>CDF_SHORT_SEC_POS</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ss</name> <operator>==</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>+</operator> <name>len</name> <operator>&gt;</operator> <call><name>CDF_SEC_SIZE</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>sst</name><operator>-&gt;</operator><name>sst_len</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Out of bounds read %"</literal> <name>SIZE_T_FORMAT</name> <literal type="string">"u &gt; %"</literal>
<name>SIZE_T_FORMAT</name> <literal type="string">"u\n"</literal><operator>,</operator>
<name>pos</name> <operator>+</operator> <name>len</name><operator>,</operator> <call><name>CDF_SEC_SIZE</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>sst</name><operator>-&gt;</operator><name>sst_len</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>memcpy</name><argument_list>(<argument><expr><call><name>RCAST</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>offs</name></expr></argument>,
<argument><expr><call><name>RCAST</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name><name>sst</name><operator>-&gt;</operator><name>sst_tab</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>len</name></expr>;</return>
<label><name>out</name>:</label>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EFTYPE</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type>
<name>cdf_read_sat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cdf_info_t</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>cdf_header_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>cdf_sat_t</name> <modifier>*</modifier></type><name>sat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>ss</name> <init>= <expr><call><name>CDF_SEC_SIZE</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cdf_secid_t</name> <modifier>*</modifier></type><name>msa</name></decl>, <decl><type ref="prev"/><name>mid</name></decl>, <decl><type ref="prev"/><name>sec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nsatpersec</name> <init>= <expr><operator>(</operator><name>ss</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>mid</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>__arraycount</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>h_master_sat</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>h_master_sat</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>CDF_SECID_FREE</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_SEC_LIMIT</name></cpp:macro> <cpp:value>(UINT32_MAX / (64 * ss))</cpp:value></cpp:define>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>nsatpersec</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>h</name><operator>-&gt;</operator><name>h_num_sectors_in_master_sat</name></name> <operator>&gt;</operator> <name>CDF_SEC_LIMIT</name> <operator>/</operator> <name>nsatpersec</name><operator>)</operator> <operator>||</operator>
<name>i</name> <operator>&gt;</operator> <name>CDF_SEC_LIMIT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Number of sectors in master SAT too big %u %"</literal>
<name>SIZE_T_FORMAT</name> <literal type="string">"u\n"</literal><operator>,</operator> <name><name>h</name><operator>-&gt;</operator><name>h_num_sectors_in_master_sat</name></name><operator>,</operator> <name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EFTYPE</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sat</name><operator>-&gt;</operator><name>sat_len</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h_num_sectors_in_master_sat</name></name> <operator>*</operator> <name>nsatpersec</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"sat_len = %"</literal> <name>SIZE_T_FORMAT</name> <literal type="string">"u ss = %"</literal> <name>SIZE_T_FORMAT</name> <literal type="string">"u\n"</literal><operator>,</operator>
<name><name>sat</name><operator>-&gt;</operator><name>sat_len</name></name><operator>,</operator> <name>ss</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>sat</name><operator>-&gt;</operator><name>sat_tab</name></name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>cdf_secid_t</name> <operator>*</operator></expr></argument>, <argument><expr><call><name>CDF_CALLOC</name><argument_list>(<argument><expr><name><name>sat</name><operator>-&gt;</operator><name>sat_len</name></name></expr></argument>, <argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator>
<operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>__arraycount</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>h_master_sat</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>h_master_sat</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>cdf_read_sector</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name><name>sat</name><operator>-&gt;</operator><name>sat_tab</name></name></expr></argument>, <argument><expr><name>ss</name> <operator>*</operator> <name>i</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>, <argument><expr><name>h</name></expr></argument>,
<argument><expr><name><name>h</name><operator>-&gt;</operator><name>h_master_sat</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>ssize_t</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Reading sector %d"</literal><operator>,</operator> <name><name>h</name><operator>-&gt;</operator><name>h_master_sat</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out1</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>msa</name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>cdf_secid_t</name> <operator>*</operator></expr></argument>, <argument><expr><call><name>CDF_CALLOC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out1</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>mid</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>h_secid_first_sector_in_master_sat</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>h</name><operator>-&gt;</operator><name>h_num_sectors_in_master_sat</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mid</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;=</operator> <name>CDF_LOOP_LIMIT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Reading master sector loop limit"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out3</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>cdf_read_sector</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>msa</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ss</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>)</argument_list></call> <operator>!=</operator>
<call><name>CAST</name><argument_list>(<argument><expr><name>ssize_t</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Reading master sector %d"</literal><operator>,</operator> <name>mid</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out2</name>;</goto>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>nsatpersec</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>sec</name> <operator>=</operator> <call><name>CDF_TOLE4</name><argument_list>(<argument><expr><call><name>CAST</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name><name>msa</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sec</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name><name>sat</name><operator>-&gt;</operator><name>sat_len</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Out of bounds reading MSA %"</literal>
<name>SIZE_T_FORMAT</name> <literal type="string">"u &gt;= %"</literal> <name>SIZE_T_FORMAT</name> <literal type="string">"u"</literal><operator>,</operator>
<name>i</name><operator>,</operator> <name><name>sat</name><operator>-&gt;</operator><name>sat_len</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out3</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>cdf_read_sector</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name><name>sat</name><operator>-&gt;</operator><name>sat_tab</name></name></expr></argument>, <argument><expr><name>ss</name> <operator>*</operator> <name>i</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>, <argument><expr><name>h</name></expr></argument>,
<argument><expr><name>sec</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>ssize_t</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Reading sector %d"</literal><operator>,</operator>
<call><name>CDF_TOLE4</name><argument_list>(<argument><expr><name><name>msa</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out2</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>mid</name> <operator>=</operator> <call><name>CDF_TOLE4</name><argument_list>(<argument><expr><call><name>CAST</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name><name>msa</name><index>[<expr><name>nsatpersec</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<label><name>out</name>:</label>
<expr_stmt><expr><name><name>sat</name><operator>-&gt;</operator><name>sat_len</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>msa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>out3</name>:</label>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EFTYPE</name></expr>;</expr_stmt>
<label><name>out2</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>msa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>out1</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>sat</name><operator>-&gt;</operator><name>sat_tab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type>
<name>cdf_count_chain</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cdf_sat_t</name> <modifier>*</modifier></type><name>sat</name></decl></parameter>, <parameter><decl><type><name>cdf_secid_t</name></type> <name>sid</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cdf_secid_t</name></type> <name>maxsector</name> <init>= <expr><call><name>CAST</name><argument_list>(<argument><expr><name>cdf_secid_t</name></expr></argument>, <argument><expr><operator>(</operator><name><name>sat</name><operator>-&gt;</operator><name>sat_len</name></name> <operator>*</operator> <name>size</name><operator>)</operator>
<operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>maxsector</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Chain:"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sid</name> <operator>==</operator> <name>CDF_SECID_END_OF_CHAIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">" empty\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sid</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">" %d"</literal><operator>,</operator> <name>sid</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;=</operator> <name>CDF_LOOP_LIMIT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Counting chain loop limit"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>sid</name> <operator>&gt;=</operator> <name>maxsector</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Sector %d &gt;= %d\n"</literal><operator>,</operator> <name>sid</name><operator>,</operator> <name>maxsector</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sid</name> <operator>=</operator> <call><name>CDF_TOLE4</name><argument_list>(<argument><expr><call><name>CAST</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name><name>sat</name><operator>-&gt;</operator><name>sat_tab</name><index>[<expr><name>sid</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">" none, sid: %d\n"</literal><operator>,</operator> <name>sid</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>i</name></expr>;</return>
<label><name>out</name>:</label>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EFTYPE</name></expr>;</expr_stmt>
<return>return <expr><call><name>CAST</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>cdf_read_long_sector_chain</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cdf_info_t</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_header_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>cdf_sat_t</name> <modifier>*</modifier></type><name>sat</name></decl></parameter>, <parameter><decl><type><name>cdf_secid_t</name></type> <name>sid</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>cdf_stream_t</name> <modifier>*</modifier></type><name>scn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>ss</name> <init>= <expr><call><name>CDF_SEC_SIZE</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>nr</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>scn</name><operator>-&gt;</operator><name>sst_tab</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>scn</name><operator>-&gt;</operator><name>sst_len</name></name> <operator>=</operator> <call><name>cdf_count_chain</name><argument_list>(<argument><expr><name>sat</name></expr></argument>, <argument><expr><name>sid</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>scn</name><operator>-&gt;</operator><name>sst_dirlen</name></name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>h_min_size_standard_stream</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>scn</name><operator>-&gt;</operator><name>sst_ss</name></name> <operator>=</operator> <name>ss</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sid</name> <operator>==</operator> <name>CDF_SECID_END_OF_CHAIN</name> <operator>||</operator> <name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>cdf_zero_stream</name><argument_list>(<argument><expr><name>scn</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>scn</name><operator>-&gt;</operator><name>sst_len</name></name> <operator>==</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>scn</name><operator>-&gt;</operator><name>sst_tab</name></name> <operator>=</operator> <call><name>CDF_CALLOC</name><argument_list>(<argument><expr><name><name>scn</name><operator>-&gt;</operator><name>sst_len</name></name></expr></argument>, <argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>scn</name><operator>-&gt;</operator><name>sst_tab</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>cdf_zero_stream</name><argument_list>(<argument><expr><name>scn</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sid</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;=</operator> <name>CDF_LOOP_LIMIT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Read long sector chain loop limit"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name><name>scn</name><operator>-&gt;</operator><name>sst_len</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Out of bounds reading long sector chain "</literal>
<literal type="string">"%"</literal> <name>SIZE_T_FORMAT</name> <literal type="string">"u &gt; %"</literal> <name>SIZE_T_FORMAT</name> <literal type="string">"u\n"</literal><operator>,</operator> <name>i</name><operator>,</operator>
<name><name>scn</name><operator>-&gt;</operator><name>sst_len</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>nr</name> <operator>=</operator> <call><name>cdf_read_sector</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name><name>scn</name><operator>-&gt;</operator><name>sst_tab</name></name></expr></argument>, <argument><expr><name>i</name> <operator>*</operator> <name>ss</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>, <argument><expr><name>h</name></expr></argument>,
<argument><expr><name>sid</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>ssize_t</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name><name>scn</name><operator>-&gt;</operator><name>sst_len</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>nr</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Reading long sector chain %d"</literal><operator>,</operator> <name>sid</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sid</name> <operator>=</operator> <call><name>CDF_TOLE4</name><argument_list>(<argument><expr><call><name>CAST</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name><name>sat</name><operator>-&gt;</operator><name>sat_tab</name><index>[<expr><name>sid</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>out</name>:</label>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EFTYPE</name></expr>;</expr_stmt>
<return>return <expr><call><name>cdf_zero_stream</name><argument_list>(<argument><expr><name>scn</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>cdf_read_short_sector_chain</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cdf_header_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>cdf_sat_t</name> <modifier>*</modifier></type><name>ssat</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_stream_t</name> <modifier>*</modifier></type><name>sst</name></decl></parameter>,
<parameter><decl><type><name>cdf_secid_t</name></type> <name>sid</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>cdf_stream_t</name> <modifier>*</modifier></type><name>scn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>ss</name> <init>= <expr><call><name>CDF_SHORT_SEC_SIZE</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>scn</name><operator>-&gt;</operator><name>sst_tab</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>scn</name><operator>-&gt;</operator><name>sst_len</name></name> <operator>=</operator> <call><name>cdf_count_chain</name><argument_list>(<argument><expr><name>ssat</name></expr></argument>, <argument><expr><name>sid</name></expr></argument>, <argument><expr><call><name>CDF_SEC_SIZE</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>scn</name><operator>-&gt;</operator><name>sst_dirlen</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>scn</name><operator>-&gt;</operator><name>sst_ss</name></name> <operator>=</operator> <name>ss</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>scn</name><operator>-&gt;</operator><name>sst_len</name></name> <operator>==</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>scn</name><operator>-&gt;</operator><name>sst_tab</name></name> <operator>=</operator> <call><name>CDF_CALLOC</name><argument_list>(<argument><expr><name><name>scn</name><operator>-&gt;</operator><name>sst_len</name></name></expr></argument>, <argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>scn</name><operator>-&gt;</operator><name>sst_tab</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>cdf_zero_stream</name><argument_list>(<argument><expr><name>scn</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sid</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;=</operator> <name>CDF_LOOP_LIMIT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Read short sector chain loop limit"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name><name>scn</name><operator>-&gt;</operator><name>sst_len</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Out of bounds reading short sector chain "</literal>
<literal type="string">"%"</literal> <name>SIZE_T_FORMAT</name> <literal type="string">"u &gt; %"</literal> <name>SIZE_T_FORMAT</name> <literal type="string">"u\n"</literal><operator>,</operator>
<name>i</name><operator>,</operator> <name><name>scn</name><operator>-&gt;</operator><name>sst_len</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>cdf_read_short_sector</name><argument_list>(<argument><expr><name>sst</name></expr></argument>, <argument><expr><name><name>scn</name><operator>-&gt;</operator><name>sst_tab</name></name></expr></argument>, <argument><expr><name>i</name> <operator>*</operator> <name>ss</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>, <argument><expr><name>h</name></expr></argument>,
<argument><expr><name>sid</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>ssize_t</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Reading short sector chain %d"</literal><operator>,</operator> <name>sid</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sid</name> <operator>=</operator> <call><name>CDF_TOLE4</name><argument_list>(<argument><expr><call><name>CAST</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name><name>ssat</name><operator>-&gt;</operator><name>sat_tab</name><index>[<expr><name>sid</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>out</name>:</label>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EFTYPE</name></expr>;</expr_stmt>
<return>return <expr><call><name>cdf_zero_stream</name><argument_list>(<argument><expr><name>scn</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>cdf_read_sector_chain</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cdf_info_t</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_header_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>cdf_sat_t</name> <modifier>*</modifier></type><name>sat</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_sat_t</name> <modifier>*</modifier></type><name>ssat</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_stream_t</name> <modifier>*</modifier></type><name>sst</name></decl></parameter>,
<parameter><decl><type><name>cdf_secid_t</name></type> <name>sid</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>cdf_stream_t</name> <modifier>*</modifier></type><name>scn</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name><name>h</name><operator>-&gt;</operator><name>h_min_size_standard_stream</name></name> <operator>&amp;&amp;</operator> <name><name>sst</name><operator>-&gt;</operator><name>sst_tab</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>cdf_read_short_sector_chain</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>ssat</name></expr></argument>, <argument><expr><name>sst</name></expr></argument>, <argument><expr><name>sid</name></expr></argument>, <argument><expr><name>len</name></expr></argument>,
<argument><expr><name>scn</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><call><name>cdf_read_long_sector_chain</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>sat</name></expr></argument>, <argument><expr><name>sid</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>scn</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>cdf_read_dir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cdf_info_t</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_header_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>cdf_sat_t</name> <modifier>*</modifier></type><name>sat</name></decl></parameter>, <parameter><decl><type><name>cdf_dir_t</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>ss</name> <init>= <expr><call><name>CDF_SEC_SIZE</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>ns</name></decl>, <decl><type ref="prev"/><name>nd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cdf_secid_t</name></type> <name>sid</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>h_secid_first_directory</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ns</name> <operator>=</operator> <call><name>cdf_count_chain</name><argument_list>(<argument><expr><name>sat</name></expr></argument>, <argument><expr><name>sid</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ns</name> <operator>==</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nd</name> <operator>=</operator> <name>ss</name> <operator>/</operator> <name>CDF_DIRECTORY_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>dir_len</name></name> <operator>=</operator> <name>ns</name> <operator>*</operator> <name>nd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>dir_tab</name></name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>cdf_directory_t</name> <operator>*</operator></expr></argument>,
<argument><expr><call><name>CDF_CALLOC</name><argument_list>(<argument><expr><name><name>dir</name><operator>-&gt;</operator><name>dir_len</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>dir</name><operator>-&gt;</operator><name>dir_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>dir</name><operator>-&gt;</operator><name>dir_tab</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>buf</name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><call><name>CDF_MALLOC</name><argument_list>(<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>dir</name><operator>-&gt;</operator><name>dir_tab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ns</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;=</operator> <name>CDF_LOOP_LIMIT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Read dir loop limit"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>cdf_read_sector</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ss</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>sid</name></expr></argument>)</argument_list></call> <operator>!=</operator>
<call><name>CAST</name><argument_list>(<argument><expr><name>ssize_t</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Reading directory sector %d"</literal><operator>,</operator> <name>sid</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>nd</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>cdf_unpack_dir</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dir</name><operator>-&gt;</operator><name>dir_tab</name><index>[<expr><name>i</name> <operator>*</operator> <name>nd</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><name>j</name> <operator>*</operator> <name>CDF_DIRECTORY_SIZE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>sid</name> <operator>=</operator> <call><name>CDF_TOLE4</name><argument_list>(<argument><expr><call><name>CAST</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name><name>sat</name><operator>-&gt;</operator><name>sat_tab</name><index>[<expr><name>sid</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>NEED_SWAP</name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dir</name><operator>-&gt;</operator><name>dir_len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cdf_swap_dir</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dir</name><operator>-&gt;</operator><name>dir_tab</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>out</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>dir</name><operator>-&gt;</operator><name>dir_tab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EFTYPE</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>cdf_read_ssat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cdf_info_t</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_header_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>cdf_sat_t</name> <modifier>*</modifier></type><name>sat</name></decl></parameter>, <parameter><decl><type><name>cdf_sat_t</name> <modifier>*</modifier></type><name>ssat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>ss</name> <init>= <expr><call><name>CDF_SEC_SIZE</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cdf_secid_t</name></type> <name>sid</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>h_secid_first_sector_in_short_sat</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ssat</name><operator>-&gt;</operator><name>sat_tab</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ssat</name><operator>-&gt;</operator><name>sat_len</name></name> <operator>=</operator> <call><name>cdf_count_chain</name><argument_list>(<argument><expr><name>sat</name></expr></argument>, <argument><expr><name>sid</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ssat</name><operator>-&gt;</operator><name>sat_len</name></name> <operator>==</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ssat</name><operator>-&gt;</operator><name>sat_tab</name></name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>cdf_secid_t</name> <operator>*</operator></expr></argument>, <argument><expr><call><name>CDF_CALLOC</name><argument_list>(<argument><expr><name><name>ssat</name><operator>-&gt;</operator><name>sat_len</name></name></expr></argument>, <argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ssat</name><operator>-&gt;</operator><name>sat_tab</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out1</name>;</goto></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sid</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;=</operator> <name>CDF_LOOP_LIMIT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Read short sat sector loop limit"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name><name>ssat</name><operator>-&gt;</operator><name>sat_len</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Out of bounds reading short sector chain "</literal>
<literal type="string">"%"</literal> <name>SIZE_T_FORMAT</name> <literal type="string">"u &gt; %"</literal> <name>SIZE_T_FORMAT</name> <literal type="string">"u\n"</literal><operator>,</operator> <name>i</name><operator>,</operator>
<name><name>ssat</name><operator>-&gt;</operator><name>sat_len</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>cdf_read_sector</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name><name>ssat</name><operator>-&gt;</operator><name>sat_tab</name></name></expr></argument>, <argument><expr><name>i</name> <operator>*</operator> <name>ss</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>sid</name></expr></argument>)</argument_list></call> <operator>!=</operator>
<call><name>CAST</name><argument_list>(<argument><expr><name>ssize_t</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Reading short sat sector %d"</literal><operator>,</operator> <name>sid</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out1</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sid</name> <operator>=</operator> <call><name>CDF_TOLE4</name><argument_list>(<argument><expr><call><name>CAST</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name><name>sat</name><operator>-&gt;</operator><name>sat_tab</name><index>[<expr><name>sid</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>out</name>:</label>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EFTYPE</name></expr>;</expr_stmt>
<label><name>out1</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ssat</name><operator>-&gt;</operator><name>sat_tab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>cdf_read_short_stream</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cdf_info_t</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_header_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>cdf_sat_t</name> <modifier>*</modifier></type><name>sat</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_dir_t</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><name>cdf_stream_t</name> <modifier>*</modifier></type><name>scn</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>cdf_directory_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>root</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>cdf_directory_t</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>root</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dir</name><operator>-&gt;</operator><name>dir_len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>dir</name><operator>-&gt;</operator><name>dir_tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>d_type</name> <operator>==</operator> <name>CDF_DIR_TYPE_ROOT_STORAGE</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>


<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name><name>dir</name><operator>-&gt;</operator><name>dir_len</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Cannot find root storage dir\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>&amp;</operator><name><name>dir</name><operator>-&gt;</operator><name>dir_tab</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>root</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>d_stream_first_sector</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"No first secror in dir\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>cdf_read_long_sector_chain</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>sat</name></expr></argument>,
<argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_stream_first_sector</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_size</name></name></expr></argument>, <argument><expr><name>scn</name></expr></argument>)</argument_list></call></expr>;</return>
<label><name>out</name>:</label>
<expr_stmt><expr><name><name>scn</name><operator>-&gt;</operator><name>sst_tab</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>cdf_zero_stream</name><argument_list>(<argument><expr><name>scn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cdf_namecmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>l</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init>;</init> <condition><expr><name>l</name><operator>--</operator></expr>;</condition> <incr><expr><name>d</name><operator>++</operator></expr><operator>,</operator> <expr><name>s</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>d</name> <operator>!=</operator> <call><name>CDF_TOLE2</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <macro><name>CAST</name><argument_list>(<argument>unsigned char</argument>, <argument>*d</argument>)</argument_list></macro> <expr><operator>-</operator> <call><name>CDF_TOLE2</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>cdf_read_doc_summary_info</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cdf_info_t</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_header_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>cdf_sat_t</name> <modifier>*</modifier></type><name>sat</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_sat_t</name> <modifier>*</modifier></type><name>ssat</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_stream_t</name> <modifier>*</modifier></type><name>sst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>cdf_dir_t</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><name>cdf_stream_t</name> <modifier>*</modifier></type><name>scn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>cdf_read_user_stream</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>sat</name></expr></argument>, <argument><expr><name>ssat</name></expr></argument>, <argument><expr><name>sst</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>,
<argument><expr><literal type="string">"\05DocumentSummaryInformation"</literal></expr></argument>, <argument><expr><name>scn</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>cdf_read_summary_info</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cdf_info_t</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_header_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>cdf_sat_t</name> <modifier>*</modifier></type><name>sat</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_sat_t</name> <modifier>*</modifier></type><name>ssat</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_stream_t</name> <modifier>*</modifier></type><name>sst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>cdf_dir_t</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><name>cdf_stream_t</name> <modifier>*</modifier></type><name>scn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>cdf_read_user_stream</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>sat</name></expr></argument>, <argument><expr><name>ssat</name></expr></argument>, <argument><expr><name>sst</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>,
<argument><expr><literal type="string">"\05SummaryInformation"</literal></expr></argument>, <argument><expr><name>scn</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>cdf_read_user_stream</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cdf_info_t</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_header_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>cdf_sat_t</name> <modifier>*</modifier></type><name>sat</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_sat_t</name> <modifier>*</modifier></type><name>ssat</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_stream_t</name> <modifier>*</modifier></type><name>sst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>cdf_dir_t</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>cdf_stream_t</name> <modifier>*</modifier></type><name>scn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>cdf_directory_t</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name>cdf_find_stream</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>CDF_DIR_TYPE_USER_STREAM</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>scn</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>scn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>&amp;</operator><name><name>dir</name><operator>-&gt;</operator><name>dir_tab</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><call><name>cdf_read_sector_chain</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>sat</name></expr></argument>, <argument><expr><name>ssat</name></expr></argument>, <argument><expr><name>sst</name></expr></argument>,
<argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_stream_first_sector</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_size</name></name></expr></argument>, <argument><expr><name>scn</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>cdf_find_stream</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cdf_dir_t</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>name_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>dir</name><operator>-&gt;</operator><name>dir_len</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>dir</name><operator>-&gt;</operator><name>dir_tab</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>d_type</name> <operator>==</operator> <name>type</name> <operator>&amp;&amp;</operator>
<call><name>cdf_namecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>dir</name><operator>-&gt;</operator><name>dir_tab</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>d_name</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>)</argument_list></call>
<operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>CAST</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Cannot find type %d `%s'\n"</literal><operator>,</operator> <name>type</name><operator>,</operator> <name>name</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ESRCH</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_SHLEN_LIMIT</name></cpp:macro> <cpp:value>(UINT32_MAX / 64)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_PROP_LIMIT</name></cpp:macro> <cpp:value>(UINT32_MAX / (64 * sizeof(cdf_property_info_t)))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>void</name> <modifier>*</modifier></type>
<name>cdf_offset</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>l</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>CAST</name><argument_list>(<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>, <argument><expr><call><name>CAST</name><argument_list>(<argument><expr><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>l</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type>
<name>cdf_get_property_info_pos</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cdf_stream_t</name> <modifier>*</modifier></type><name>sst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_header_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>tail</name> <init>= <expr><operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>ofs</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;=</operator> <name>e</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Past end %p &lt; %p\n"</literal><operator>,</operator> <name>e</name><operator>,</operator> <name>p</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cdf_check_stream_offset</name><argument_list>(<argument><expr><name>sst</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>tail</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ofs</name> <operator>=</operator> <call><name>CDF_GETUINT32</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>tail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ofs</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Offset too small %zu\n"</literal><operator>,</operator> <name>ofs</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ofs</name> <operator>-=</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ofs</name> <operator>&gt;</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>e</name> <operator>-</operator> <name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Offset too big %zu %td\n"</literal><operator>,</operator> <name>ofs</name><operator>,</operator> <name>e</name> <operator>-</operator> <name>p</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>CAST</name><argument_list>(<argument><expr><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator></expr></argument>, <argument><expr><call><name>cdf_offset</name><argument_list>(<argument><expr><call><name>CAST</name><argument_list>(<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ofs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>cdf_property_info_t</name> <modifier>*</modifier></type>
<name>cdf_grow_info</name><parameter_list>(<parameter><decl><type><name>cdf_property_info_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>maxcount</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>incr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>cdf_property_info_t</name> <modifier>*</modifier></type><name>inp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>newcount</name> <init>= <expr><operator>*</operator><name>maxcount</name> <operator>+</operator> <name>incr</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>newcount</name> <operator>&gt;</operator> <name>CDF_PROP_LIMIT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"exceeded property limit %"</literal> <name>SIZE_T_FORMAT</name> <literal type="string">"u &gt; %"</literal>
<name>SIZE_T_FORMAT</name> <literal type="string">"u\n"</literal><operator>,</operator> <name>newcount</name><operator>,</operator> <name>CDF_PROP_LIMIT</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>inp</name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>cdf_property_info_t</name> <operator>*</operator></expr></argument>,
<argument><expr><call><name>CDF_REALLOC</name><argument_list>(<argument><expr><operator>*</operator><name>info</name></expr></argument>, <argument><expr><name>newcount</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>inp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>inp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>info</name> <operator>=</operator> <name>inp</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>maxcount</name> <operator>=</operator> <name>newcount</name></expr>;</expr_stmt>
<return>return <expr><name>inp</name></expr>;</return>
<label><name>out</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>maxcount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>info</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>cdf_copy_info</name><parameter_list>(<parameter><decl><type><name>cdf_property_info_t</name> <modifier>*</modifier></type><name>inp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>e</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>inp</name><operator>-&gt;</operator><name>pi_type</name></name> <operator>&amp;</operator> <name>CDF_VECTOR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>CAST</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><call><name>CAST</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>CAST</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>inp</name><operator>-&gt;</operator><name>pi_val</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name><name>inp</name><operator>-&gt;</operator><name>pi_u16</name></name> <operator>=</operator> <call><name>CDF_TOLE2</name><argument_list>(<argument><expr><name><name>inp</name><operator>-&gt;</operator><name>pi_u16</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<expr_stmt><expr><name><name>inp</name><operator>-&gt;</operator><name>pi_u32</name></name> <operator>=</operator> <call><name>CDF_TOLE4</name><argument_list>(<argument><expr><name><name>inp</name><operator>-&gt;</operator><name>pi_u32</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">8</literal></expr>:</case>
<expr_stmt><expr><name><name>inp</name><operator>-&gt;</operator><name>pi_u64</name></name> <operator>=</operator> <call><name>CDF_TOLE8</name><argument_list>(<argument><expr><name><name>inp</name><operator>-&gt;</operator><name>pi_u64</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>cdf_read_property_info</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cdf_stream_t</name> <modifier>*</modifier></type><name>sst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_header_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>offs</name></decl></parameter>, <parameter><decl><type><name>cdf_property_info_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>count</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>maxcount</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>cdf_section_header_t</name> <modifier>*</modifier></type><name>shp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cdf_section_header_t</name></type> <name>sh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>o4</name></decl>, <decl><type ref="prev"/><name>nelements</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>slen</name></decl>, <decl><type ref="prev"/><name>left</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cdf_property_info_t</name> <modifier>*</modifier></type><name>inp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>offs</name> <operator>&gt;</operator> <name>UINT32_MAX</name> <operator>/</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EFTYPE</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>shp</name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><specifier>const</specifier> <name>cdf_section_header_t</name> <operator>*</operator></expr></argument>,
<argument><expr><call><name>cdf_offset</name><argument_list>(<argument><expr><name><name>sst</name><operator>-&gt;</operator><name>sst_tab</name></name></expr></argument>, <argument><expr><name>offs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>cdf_check_stream_offset</name><argument_list>(<argument><expr><name>sst</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>shp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>shp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>sh</name><operator>.</operator><name>sh_len</name></name> <operator>=</operator> <call><name>CDF_TOLE4</name><argument_list>(<argument><expr><name><name>shp</name><operator>-&gt;</operator><name>sh_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sh</name><operator>.</operator><name>sh_len</name></name> <operator>&gt;</operator> <name>CDF_SHLEN_LIMIT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EFTYPE</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cdf_check_stream_offset</name><argument_list>(<argument><expr><name>sst</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>shp</name></expr></argument>, <argument><expr><name><name>sh</name><operator>.</operator><name>sh_len</name></name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sh</name><operator>.</operator><name>sh_properties</name></name> <operator>=</operator> <call><name>CDF_TOLE4</name><argument_list>(<argument><expr><name><name>shp</name><operator>-&gt;</operator><name>sh_properties</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"section len: %u properties %u\n"</literal><operator>,</operator> <name><name>sh</name><operator>.</operator><name>sh_len</name></name><operator>,</operator>
<name><name>sh</name><operator>.</operator><name>sh_properties</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>sh</name><operator>.</operator><name>sh_properties</name></name> <operator>&gt;</operator> <name>CDF_PROP_LIMIT</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>inp</name> <operator>=</operator> <call><name>cdf_grow_info</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>maxcount</name></expr></argument>, <argument><expr><name><name>sh</name><operator>.</operator><name>sh_properties</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>inp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>inp</name> <operator>+=</operator> <operator>*</operator><name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>count</name> <operator>+=</operator> <name><name>sh</name><operator>.</operator><name>sh_properties</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator></expr></argument>, <argument><expr><call><name>cdf_offset</name><argument_list>(<argument><expr><name><name>sst</name><operator>-&gt;</operator><name>sst_tab</name></name></expr></argument>, <argument><expr><name>offs</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sh</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator></expr></argument>, <argument><expr><call><name>cdf_offset</name><argument_list>(<argument><expr><name>shp</name></expr></argument>, <argument><expr><name><name>sh</name><operator>.</operator><name>sh_len</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;=</operator> <name>e</name> <operator>||</operator> <call><name>cdf_check_stream_offset</name><argument_list>(<argument><expr><name>sst</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sh</name><operator>.</operator><name>sh_properties</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>q</name> <operator>=</operator> <call><name>cdf_get_property_info_pos</name><argument_list>(<argument><expr><name>sst</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>inp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pi_id</name> <operator>=</operator> <call><name>CDF_GETUINT32</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>left</name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>e</name> <operator>-</operator> <name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>left</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"short info (no type)_\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>inp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pi_type</name> <operator>=</operator> <call><name>CDF_GETUINT32</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"%"</literal> <name>SIZE_T_FORMAT</name> <literal type="string">"u) id=%#x type=%#x offs=%#tx,%#x\n"</literal><operator>,</operator>
<name>i</name><operator>,</operator> <name><name>inp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pi_id</name><operator>,</operator> <name><name>inp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pi_type</name><operator>,</operator> <name>q</name> <operator>-</operator> <name>p</name><operator>,</operator> <name>offs</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>inp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pi_type</name> <operator>&amp;</operator> <name>CDF_VECTOR</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>left</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"missing CDF_VECTOR length\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>nelements</name> <operator>=</operator> <call><name>CDF_GETUINT32</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nelements</name> <operator>&gt;</operator> <name>CDF_ELEMENT_LIMIT</name> <operator>||</operator> <name>nelements</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"CDF_VECTOR with nelements == %"</literal>
<name>SIZE_T_FORMAT</name> <literal type="string">"u\n"</literal><operator>,</operator> <name>nelements</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>slen</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>nelements</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>slen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>o4</name> <operator>=</operator> <name>slen</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>inp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pi_type</name> <operator>&amp;</operator> <operator>(</operator><name>CDF_ARRAY</name><operator>|</operator><name>CDF_BYREF</name><operator>|</operator><name>CDF_RESERVED</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>unknown</name>;</goto></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>inp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pi_type</name> <operator>&amp;</operator> <name>CDF_TYPEMASK</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CDF_NULL</name></expr>:</case>
<case>case <expr><name>CDF_EMPTY</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>CDF_SIGNED16</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cdf_copy_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>inp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>q</name><index>[<expr><name>o4</name></expr>]</index></name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>unknown</name>;</goto></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>CDF_SIGNED32</name></expr>:</case>
<case>case <expr><name>CDF_BOOL</name></expr>:</case>
<case>case <expr><name>CDF_UNSIGNED32</name></expr>:</case>
<case>case <expr><name>CDF_FLOAT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cdf_copy_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>inp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>q</name><index>[<expr><name>o4</name></expr>]</index></name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>unknown</name>;</goto></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>CDF_SIGNED64</name></expr>:</case>
<case>case <expr><name>CDF_UNSIGNED64</name></expr>:</case>
<case>case <expr><name>CDF_DOUBLE</name></expr>:</case>
<case>case <expr><name>CDF_FILETIME</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cdf_copy_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>inp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>q</name><index>[<expr><name>o4</name></expr>]</index></name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>unknown</name>;</goto></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>CDF_LENGTH32_STRING</name></expr>:</case>
<case>case <expr><name>CDF_LENGTH32_WSTRING</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>nelements</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>nelem</name> <init>= <expr><name>inp</name> <operator>-</operator> <operator>*</operator><name>info</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>inp</name> <operator>=</operator> <call><name>cdf_grow_info</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>maxcount</name></expr></argument>, <argument><expr><name>nelements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>inp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>inp</name> <operator>+=</operator> <name>nelem</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>nelements</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>sh</name><operator>.</operator><name>sh_properties</name></name></expr>;</condition>
<incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>l</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>o4</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <name>left</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>CDF_GETUINT32</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>o4</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>o4</name> <operator>+</operator> <name>l</name> <operator>&gt;</operator> <name>left</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>inp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pi_str</name><operator>.</operator><name>s_len</name></name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>inp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pi_str</name><operator>.</operator><name>s_buf</name></name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>,
<argument><expr><call><name>CAST</name><argument_list>(<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>q</name><index>[<expr><name>o4</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"o=%"</literal> <name>SIZE_T_FORMAT</name> <literal type="string">"u l=%d(%"</literal>
<name>SIZE_T_FORMAT</name> <literal type="string">"u), t=%"</literal> <name>SIZE_T_FORMAT</name>
<literal type="string">"u s=%.*s\n"</literal><operator>,</operator> <name>o4</name><operator>,</operator> <name>l</name><operator>,</operator>
<call><name>CDF_ROUND</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>,</operator>
<name>left</name><operator>,</operator> <operator>(</operator><name>int</name><operator>)</operator><name>l</name><operator>,</operator> <name><name>inp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pi_str</name><operator>.</operator><name>s_buf</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>slen</name> <operator>+=</operator> <name>l</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>o4</name> <operator>=</operator> <name>slen</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CDF_CLIPBOARD</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>inp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pi_type</name> <operator>&amp;</operator> <name>CDF_VECTOR</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>unknown</name>;</goto></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<label><name>unknown</name>:</label>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>inp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pi_val</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>inp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pi_val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Don't know how to deal with %#x\n"</literal><operator>,</operator>
<name><name>inp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pi_type</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>out</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>info</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>maxcount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EFTYPE</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>cdf_unpack_summary_info</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cdf_stream_t</name> <modifier>*</modifier></type><name>sst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_header_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>,
<parameter><decl><type><name>cdf_summary_info_header_t</name> <modifier>*</modifier></type><name>ssi</name></decl></parameter>, <parameter><decl><type><name>cdf_property_info_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>maxcount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>cdf_summary_info_header_t</name> <modifier>*</modifier></type><name>si</name> <init>=
<expr><call><name>CAST</name><argument_list>(<argument><expr><specifier>const</specifier> <name>cdf_summary_info_header_t</name> <operator>*</operator></expr></argument>, <argument><expr><name><name>sst</name><operator>-&gt;</operator><name>sst_tab</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>cdf_section_declaration_t</name> <modifier>*</modifier></type><name>sd</name> <init>=
<expr><call><name>CAST</name><argument_list>(<argument><expr><specifier>const</specifier> <name>cdf_section_declaration_t</name> <operator>*</operator></expr></argument>, <argument><expr><call><name>RCAST</name><argument_list>(<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>,
<argument><expr><call><name>RCAST</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name><name>sst</name><operator>-&gt;</operator><name>sst_tab</name></name></expr></argument>)</argument_list></call>
<operator>+</operator> <name>CDF_SECTION_DECLARATION_OFFSET</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cdf_check_stream_offset</name><argument_list>(<argument><expr><name>sst</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>si</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>si</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator>
<call><name>cdf_check_stream_offset</name><argument_list>(<argument><expr><name>sst</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>sd</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sd</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ssi</name><operator>-&gt;</operator><name>si_byte_order</name></name> <operator>=</operator> <call><name>CDF_TOLE2</name><argument_list>(<argument><expr><name><name>si</name><operator>-&gt;</operator><name>si_byte_order</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ssi</name><operator>-&gt;</operator><name>si_os_version</name></name> <operator>=</operator> <call><name>CDF_TOLE2</name><argument_list>(<argument><expr><name><name>si</name><operator>-&gt;</operator><name>si_os_version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ssi</name><operator>-&gt;</operator><name>si_os</name></name> <operator>=</operator> <call><name>CDF_TOLE2</name><argument_list>(<argument><expr><name><name>si</name><operator>-&gt;</operator><name>si_os</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ssi</name><operator>-&gt;</operator><name>si_class</name></name> <operator>=</operator> <name><name>si</name><operator>-&gt;</operator><name>si_class</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cdf_swap_class</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ssi</name><operator>-&gt;</operator><name>si_class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ssi</name><operator>-&gt;</operator><name>si_count</name></name> <operator>=</operator> <call><name>CDF_TOLE4</name><argument_list>(<argument><expr><name><name>si</name><operator>-&gt;</operator><name>si_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>maxcount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>info</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>cdf_read_property_info</name><argument_list>(<argument><expr><name>sst</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><call><name>CDF_TOLE4</name><argument_list>(<argument><expr><name><name>sd</name><operator>-&gt;</operator><name>sd_offset</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>info</name></expr></argument>,
<argument><expr><name>count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>maxcount</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>extract_catalog_field</name><parameter_list>(<parameter><type><name>t</name></type></parameter>, <parameter><type><name>f</name></type></parameter>, <parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (b + l + sizeof(cep-&gt;f) &gt; eb) { cep-&gt;ce_namlen = 0; break; } memcpy(&amp;cep-&gt;f, b + (l), sizeof(cep-&gt;f)); ce[i].f = CAST(t, CDF_TOLE(cep-&gt;f))</cpp:value></cpp:define>







<function><type><name>int</name></type>
<name>cdf_unpack_catalog</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cdf_header_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_stream_t</name> <modifier>*</modifier></type><name>sst</name></decl></parameter>,
<parameter><decl><type><name>cdf_catalog_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>cat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>ss</name> <init>= <expr><call><name>cdf_check_stream</name><argument_list>(<argument><expr><name>sst</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name>CAST</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name><name>sst</name><operator>-&gt;</operator><name>sst_tab</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nb</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>eb</name> <init>= <expr><name>b</name> <operator>+</operator> <name>ss</name> <operator>*</operator> <name><name>sst</name><operator>-&gt;</operator><name>sst_len</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nr</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cdf_catalog_entry_t</name> <modifier>*</modifier></type><name>ce</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>reclen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>np</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>nr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init><condition>;</condition> <incr><expr><name>nr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reclen</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>reclen</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reclen</name> <operator>=</operator> <call><name>CDF_TOLE2</name><argument_list>(<argument><expr><name>reclen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>reclen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>b</name> <operator>+=</operator> <name>reclen</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>&gt;</operator> <name>eb</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>nr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nr</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>cat</name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>cdf_catalog_t</name> <operator>*</operator></expr></argument>,
<argument><expr><call><name>CDF_MALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cdf_catalog_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>nr</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ce</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cat</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ce</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>cat</name><operator>)</operator><operator>-&gt;</operator><name>cat_e</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ce</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nr</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ce</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name><name>sst</name><operator>-&gt;</operator><name>sst_tab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nr</name></expr>;</condition> <incr><expr><name>b</name> <operator>+=</operator> <name>reclen</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>cdf_catalog_entry_t</name> <modifier>*</modifier></type><name>cep</name> <init>= <expr><operator>&amp;</operator><name><name>ce</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>rlen</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>extract_catalog_field</name><argument_list>(<argument><expr><name>uint16_t</name></expr></argument>, <argument><expr><name>ce_namlen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>extract_catalog_field</name><argument_list>(<argument><expr><name>uint16_t</name></expr></argument>, <argument><expr><name>ce_num</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>extract_catalog_field</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>ce_timestamp</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reclen</name> <operator>=</operator> <name><name>cep</name><operator>-&gt;</operator><name>ce_namlen</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>reclen</name> <operator>&lt;</operator> <literal type="number">14</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cep</name><operator>-&gt;</operator><name>ce_namlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cep</name><operator>-&gt;</operator><name>ce_namlen</name></name> <operator>=</operator> <call><name>__arraycount</name><argument_list>(<argument><expr><name><name>cep</name><operator>-&gt;</operator><name>ce_name</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>rlen</name> <operator>=</operator> <name>reclen</name> <operator>-</operator> <literal type="number">14</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cep</name><operator>-&gt;</operator><name>ce_namlen</name></name> <operator>&gt;</operator> <name>rlen</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cep</name><operator>-&gt;</operator><name>ce_namlen</name></name> <operator>=</operator> <name>rlen</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>np</name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator></expr></argument>, <argument><expr><call><name>CAST</name><argument_list>(<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>, <argument><expr><operator>(</operator><name>b</name> <operator>+</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nb</name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><call><name>CAST</name><argument_list>(<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>,
<argument><expr><operator>(</operator><name>np</name> <operator>+</operator> <name><name>cep</name><operator>-&gt;</operator><name>ce_namlen</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nb</name> <operator>&gt;</operator> <name>eb</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cep</name><operator>-&gt;</operator><name>ce_namlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>cep</name><operator>-&gt;</operator><name>ce_namlen</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>cep</name><operator>-&gt;</operator><name>ce_name</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>np</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>cep</name><operator>-&gt;</operator><name>ce_name</name><index>[<expr><name><name>cep</name><operator>-&gt;</operator><name>ce_namlen</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>cat</name><operator>)</operator><operator>-&gt;</operator><name>cat_num</name></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>cdf_print_classid</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_classid_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"%.8x-%.4x-%.4x-%.2x%.2x-"</literal>
<literal type="string">"%.2x%.2x%.2x%.2x%.2x%.2x"</literal></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>cl_dword</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>cl_word</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>id</name><operator>-&gt;</operator><name>cl_word</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>cl_two</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>cl_two</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>cl_six</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>id</name><operator>-&gt;</operator><name>cl_six</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>cl_six</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>cl_six</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>cl_six</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>,
<argument><expr><name><name>id</name><operator>-&gt;</operator><name>cl_six</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>
}</block> <decl><name><name>vn</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>CDF_PROPERTY_CODE_PAGE</name></expr>, <expr><literal type="string">"Code page"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>CDF_PROPERTY_TITLE</name></expr>, <expr><literal type="string">"Title"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>CDF_PROPERTY_SUBJECT</name></expr>, <expr><literal type="string">"Subject"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>CDF_PROPERTY_AUTHOR</name></expr>, <expr><literal type="string">"Author"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>CDF_PROPERTY_KEYWORDS</name></expr>, <expr><literal type="string">"Keywords"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>CDF_PROPERTY_COMMENTS</name></expr>, <expr><literal type="string">"Comments"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>CDF_PROPERTY_TEMPLATE</name></expr>, <expr><literal type="string">"Template"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>CDF_PROPERTY_LAST_SAVED_BY</name></expr>, <expr><literal type="string">"Last Saved By"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>CDF_PROPERTY_REVISION_NUMBER</name></expr>, <expr><literal type="string">"Revision Number"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>CDF_PROPERTY_TOTAL_EDITING_TIME</name></expr>, <expr><literal type="string">"Total Editing Time"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>CDF_PROPERTY_LAST_PRINTED</name></expr>, <expr><literal type="string">"Last Printed"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>CDF_PROPERTY_CREATE_TIME</name></expr>, <expr><literal type="string">"Create Time/Date"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>CDF_PROPERTY_LAST_SAVED_TIME</name></expr>, <expr><literal type="string">"Last Saved Time/Date"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>CDF_PROPERTY_NUMBER_OF_PAGES</name></expr>, <expr><literal type="string">"Number of Pages"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>CDF_PROPERTY_NUMBER_OF_WORDS</name></expr>, <expr><literal type="string">"Number of Words"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>CDF_PROPERTY_NUMBER_OF_CHARACTERS</name></expr>, <expr><literal type="string">"Number of Characters"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>CDF_PROPERTY_THUMBNAIL</name></expr>, <expr><literal type="string">"Thumbnail"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>CDF_PROPERTY_NAME_OF_APPLICATION</name></expr>, <expr><literal type="string">"Name of Creating Application"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>CDF_PROPERTY_SECURITY</name></expr>, <expr><literal type="string">"Security"</literal></expr> }</block></expr>,
<expr><block>{ <expr><name>CDF_PROPERTY_LOCALE_ID</name></expr>, <expr><literal type="string">"Locale ID"</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</struct>

<function><type><name>int</name></type>
<name>cdf_print_property_name</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bufsiz</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>__arraycount</name><argument_list>(<argument><expr><name>vn</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>vn</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v</name> <operator>==</operator> <name>p</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufsiz</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>vn</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufsiz</name></expr></argument>, <argument><expr><literal type="string">"%#x"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>cdf_print_elapsed_time</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bufsiz</name></decl></parameter>, <parameter><decl><type><name>cdf_timestamp_t</name></type> <name>ts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>days</name></decl>, <decl><type ref="prev"/><name>hours</name></decl>, <decl><type ref="prev"/><name>mins</name></decl>, <decl><type ref="prev"/><name>secs</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ts</name> <operator>/=</operator> <name>CDF_TIME_PREC</name></expr>;</expr_stmt>
<expr_stmt><expr><name>secs</name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>ts</name> <operator>%</operator> <literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ts</name> <operator>/=</operator> <literal type="number">60</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mins</name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>ts</name> <operator>%</operator> <literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ts</name> <operator>/=</operator> <literal type="number">60</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>hours</name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>ts</name> <operator>%</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ts</name> <operator>/=</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>days</name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>days</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>bufsiz</name> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"%dd+"</literal></expr></argument>, <argument><expr><name>days</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>CAST</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>bufsiz</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>len</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>days</name> <operator>||</operator> <name>hours</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>bufsiz</name> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"%.2d:"</literal></expr></argument>, <argument><expr><name>hours</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>CAST</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>bufsiz</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>len</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>bufsiz</name> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"%.2d:"</literal></expr></argument>, <argument><expr><name>mins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>CAST</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>bufsiz</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>len</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>bufsiz</name> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"%.2d"</literal></expr></argument>, <argument><expr><name>secs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>cdf_u16tos8</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CDF_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type>
<name>cdf_dump_header</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cdf_header_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DUMP</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)fprintf(stderr, "%40.40s = " a "\n", #b, h-&gt;h_ ##b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DUMP2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)fprintf(stderr, "%40.40s = " a " (" a ")\n", #b, h-&gt;h_ ##b, 1 &lt;&lt; h-&gt;h_ ##b)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>DUMP</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>revision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DUMP</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DUMP</name><argument_list>(<argument><expr><literal type="string">"%#x"</literal></expr></argument>, <argument><expr><name>byte_order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DUMP2</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>sec_size_p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DUMP2</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>short_sec_size_p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DUMP</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>num_sectors_in_sat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DUMP</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>secid_first_directory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DUMP</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>min_size_standard_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DUMP</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>secid_first_sector_in_short_sat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DUMP</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>num_sectors_in_short_sat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DUMP</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>secid_first_sector_in_master_sat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DUMP</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>num_sectors_in_master_sat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>__arraycount</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>h_master_sat</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>h_master_sat</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>CDF_SECID_FREE</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%35.35s[%.3"</literal> <name>SIZE_T_FORMAT</name> <literal type="string">"u] = %d\n"</literal></expr></argument>,
<argument><expr><literal type="string">"master_sat"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>h_master_sat</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>cdf_dump_sat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_sat_t</name> <modifier>*</modifier></type><name>sat</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>s</name> <init>= <expr><name>size</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>cdf_secid_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sat</name><operator>-&gt;</operator><name>sat_len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s[%"</literal> <name>SIZE_T_FORMAT</name> <literal type="string">"u]:\n%.6"</literal>
<name>SIZE_T_FORMAT</name> <literal type="string">"u: "</literal></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name> <operator>*</operator> <name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>s</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%5d, "</literal></expr></argument>,
<argument><expr><call><name>CDF_TOLE4</name><argument_list>(<argument><expr><name><name>sat</name><operator>-&gt;</operator><name>sat_tab</name><index>[<expr><name>s</name> <operator>*</operator> <name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>j</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">10</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n%.6"</literal> <name>SIZE_T_FORMAT</name>
<literal type="string">"u: "</literal></expr></argument>, <argument><expr><name>i</name> <operator>*</operator> <name>s</name> <operator>+</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>cdf_dump</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>v</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>abuf</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%.4x: "</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%.2x "</literal></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>abuf</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><call><name>isprint</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>*</operator><name>p</name></expr> </then><else>: <expr><literal type="char">'.'</literal></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>abuf</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s\n%.4"</literal> <name>SIZE_T_FORMAT</name> <literal type="string">"x: "</literal></expr></argument>,
<argument><expr><name>abuf</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>cdf_dump_stream</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cdf_stream_t</name> <modifier>*</modifier></type><name>sst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>ss</name> <init>= <expr><name><name>sst</name><operator>-&gt;</operator><name>sst_ss</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>cdf_dump</name><argument_list>(<argument><expr><name><name>sst</name><operator>-&gt;</operator><name>sst_tab</name></name></expr></argument>, <argument><expr><name>ss</name> <operator>*</operator> <name><name>sst</name><operator>-&gt;</operator><name>sst_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>cdf_dump_dir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cdf_info_t</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_header_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>cdf_sat_t</name> <modifier>*</modifier></type><name>sat</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_sat_t</name> <modifier>*</modifier></type><name>ssat</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_stream_t</name> <modifier>*</modifier></type><name>sst</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>cdf_dir_t</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cdf_directory_t</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><call><name>__arraycount</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>)</argument_list></call></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cdf_stream_t</name></type> <name>scn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>ts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>types</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"empty"</literal></expr>, <expr><literal type="string">"user storage"</literal></expr>,
<expr><literal type="string">"user stream"</literal></expr>, <expr><literal type="string">"lockbytes"</literal></expr>, <expr><literal type="string">"property"</literal></expr>, <expr><literal type="string">"root storage"</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dir</name><operator>-&gt;</operator><name>dir_len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">26</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>&amp;</operator><name><name>dir</name><operator>-&gt;</operator><name>dir_tab</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>name</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><call><name>CDF_TOLE2</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_name</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Directory %"</literal> <name>SIZE_T_FORMAT</name> <literal type="string">"u: %s\n"</literal></expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>d_type</name></name> <operator>&lt;</operator> <call><name>__arraycount</name><argument_list>(<argument><expr><name>types</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Type: %s\n"</literal></expr></argument>, <argument><expr><name><name>types</name><index>[<expr><name><name>d</name><operator>-&gt;</operator><name>d_type</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Type: %d\n"</literal></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Color: %s\n"</literal></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>d</name><operator>-&gt;</operator><name>d_color</name></name></expr> ?</condition><then> <expr><literal type="string">"black"</literal></expr> </then><else>: <expr><literal type="string">"red"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Left child: %d\n"</literal></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_left_child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Right child: %d\n"</literal></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_right_child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Flags: %#x\n"</literal></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cdf_timestamp_to_timespec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_created</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Created %s"</literal></expr></argument>, <argument><expr><call><name>cdf_ctime</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ts</name><operator>.</operator><name>tv_sec</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cdf_timestamp_to_timespec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_modified</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Modified %s"</literal></expr></argument>,
<argument><expr><call><name>cdf_ctime</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ts</name><operator>.</operator><name>tv_sec</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Stream %d\n"</literal></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_stream_first_sector</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Size %d\n"</literal></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>d_type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CDF_DIR_TYPE_USER_STORAGE</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Storage: %d\n"</literal></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_storage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CDF_DIR_TYPE_USER_STREAM</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>sst</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>cdf_read_sector_chain</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>sat</name></expr></argument>, <argument><expr><name>ssat</name></expr></argument>, <argument><expr><name>sst</name></expr></argument>,
<argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_stream_first_sector</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scn</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"Can't read stream for %s at %d len %d"</literal></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_stream_first_sector</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>cdf_dump_stream</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>scn</name><operator>.</operator><name>sst_tab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>cdf_dump_property_info</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cdf_property_info_t</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>cdf_timestamp_t</name></type> <name>tp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>ts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>cdf_print_property_name</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pi_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>SIZE_T_FORMAT</name> <literal type="string">"u) %s: "</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pi_type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CDF_NULL</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>CDF_SIGNED16</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"signed 16 [%hd]\n"</literal></expr></argument>,
<argument><expr><name><name>info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pi_s16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CDF_SIGNED32</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"signed 32 [%d]\n"</literal></expr></argument>,
<argument><expr><name><name>info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pi_s32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CDF_UNSIGNED32</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"unsigned 32 [%u]\n"</literal></expr></argument>,
<argument><expr><name><name>info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pi_u32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CDF_FLOAT</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"float [%g]\n"</literal></expr></argument>,
<argument><expr><name><name>info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pi_f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CDF_DOUBLE</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"double [%g]\n"</literal></expr></argument>,
<argument><expr><name><name>info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pi_d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CDF_LENGTH32_STRING</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"string %u [%.*s]\n"</literal></expr></argument>,
<argument><expr><name><name>info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pi_str</name><operator>.</operator><name>s_len</name></name></expr></argument>,
<argument><expr><name><name>info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pi_str</name><operator>.</operator><name>s_len</name></name></expr></argument>, <argument><expr><name><name>info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pi_str</name><operator>.</operator><name>s_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CDF_LENGTH32_WSTRING</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"string %u ["</literal></expr></argument>,
<argument><expr><name><name>info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pi_str</name><operator>.</operator><name>s_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pi_str</name><operator>.</operator><name>s_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fputc</name><argument_list>(<argument><expr><name><name>info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pi_str</name><operator>.</operator><name>s_buf</name><index>[<expr><name>j</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CDF_FILETIME</name></expr>:</case>
<expr_stmt><expr><name>tp</name> <operator>=</operator> <name><name>info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pi_tp</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tp</name> <operator>&lt;</operator> <literal type="number">1000000000000000LL</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>cdf_print_elapsed_time</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"timestamp %s\n"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>tbuf</name><index>[<expr><literal type="number">26</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>cdf_timestamp_to_timespec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"timestamp %s"</literal></expr></argument>,
<argument><expr><call><name>cdf_ctime</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ts</name><operator>.</operator><name>tv_sec</name></name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>CDF_CLIPBOARD</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"CLIPBOARD %u\n"</literal></expr></argument>, <argument><expr><name><name>info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pi_u32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"Don't know how to deal with %#x\n"</literal><operator>,</operator>
<name><name>info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pi_type</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>cdf_dump_summary_info</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cdf_header_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_stream_t</name> <modifier>*</modifier></type><name>sst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cdf_summary_info_header_t</name></type> <name>ssi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cdf_property_info_t</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><operator>&amp;</operator><name>h</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>cdf_unpack_summary_info</name><argument_list>(<argument><expr><name>sst</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ssi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Endian: %#x\n"</literal></expr></argument>, <argument><expr><name><name>ssi</name><operator>.</operator><name>si_byte_order</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Os Version %d.%d\n"</literal></expr></argument>, <argument><expr><name><name>ssi</name><operator>.</operator><name>si_os_version</name></name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>,
<argument><expr><name><name>ssi</name><operator>.</operator><name>si_os_version</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Os %d\n"</literal></expr></argument>, <argument><expr><name><name>ssi</name><operator>.</operator><name>si_os</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cdf_print_classid</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ssi</name><operator>.</operator><name>si_class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Class %s\n"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Count %d\n"</literal></expr></argument>, <argument><expr><name><name>ssi</name><operator>.</operator><name>si_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cdf_dump_property_info</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>cdf_dump_catalog</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cdf_header_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_stream_t</name> <modifier>*</modifier></type><name>sst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>cdf_catalog_t</name> <modifier>*</modifier></type><name>cat</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>cdf_unpack_catalog</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>cdf_catalog_entry_t</name> <modifier>*</modifier></type><name>ce</name> <init>= <expr><name><name>cat</name><operator>-&gt;</operator><name>cat_e</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>ts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>tbuf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>sbuf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Catalog:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cat</name><operator>-&gt;</operator><name>cat_num</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>cdf_timestamp_to_timespec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>, <argument><expr><name><name>ce</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ce_timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t%d %s %s"</literal></expr></argument>, <argument><expr><name><name>ce</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ce_num</name></expr></argument>,
<argument><expr><call><name>cdf_u16tos8</name><argument_list>(<argument><expr><name>sbuf</name></expr></argument>, <argument><expr><name><name>ce</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ce_namlen</name></expr></argument>, <argument><expr><name><name>ce</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ce_name</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>cdf_ctime</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ts</name><operator>.</operator><name>tv_sec</name></name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cdf_header_t</name></type> <name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cdf_sat_t</name></type> <name>sat</name></decl>, <decl><type ref="prev"/><name>ssat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cdf_stream_t</name></type> <name>sst</name></decl>, <decl><type ref="prev"/><name>scn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cdf_dir_t</name></type> <name>dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cdf_info_t</name></type> <name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>cdf_directory_t</name> <modifier>*</modifier></type><name>root</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>getprogname</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>__progname</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>__progname</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Usage: %s &lt;filename&gt;\n"</literal></expr></argument>, <argument><expr><call><name>getprogname</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>info</name><operator>.</operator><name>i_buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>.</operator><name>i_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>info</name><operator>.</operator><name>i_fd</name></name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>, <argument><expr><literal type="string">"Cannot open `%s'"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cdf_read_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>, <argument><expr><literal type="string">"Cannot read header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CDF_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>cdf_dump_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>cdf_read_sat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sat</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>, <argument><expr><literal type="string">"Cannot read sat"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CDF_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>cdf_dump_sat</name><argument_list>(<argument><expr><literal type="string">"SAT"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sat</name></expr></argument>, <argument><expr><call><name>CDF_SEC_SIZE</name><argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>cdf_read_ssat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ssat</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>, <argument><expr><literal type="string">"Cannot read ssat"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CDF_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>cdf_dump_sat</name><argument_list>(<argument><expr><literal type="string">"SSAT"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ssat</name></expr></argument>, <argument><expr><call><name>CDF_SHORT_SEC_SIZE</name><argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>cdf_read_dir</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dir</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>, <argument><expr><literal type="string">"Cannot read dir"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cdf_read_short_stream</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dir</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>root</name></expr></argument>)</argument_list></call>
<operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>, <argument><expr><literal type="string">"Cannot read short stream"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CDF_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>cdf_dump_stream</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CDF_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>cdf_dump_dir</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ssat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if <condition>(<expr><call><name>cdf_read_summary_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ssat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dir</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>scn</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"Cannot read summary info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CDF_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cdf_dump_summary_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><call><name>cdf_read_user_stream</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ssat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sst</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>dir</name></expr></argument>, <argument><expr><literal type="string">"Catalog"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>scn</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"Cannot read catalog"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CDF_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>cdf_dump_catalog</name><argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>close</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>i_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
