<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/file/src/apprentice.c">






























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"file.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>FILE_RCSID</name><argument_list>(<argument><literal type="string">"@(#)$File: apprentice.c,v 1.309 2021/09/24 13:59:19 christos Exp $"</literal></argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"magic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UNISTD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>QUICK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mman.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dirent.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EATAB</name></cpp:macro> <cpp:value>{while (isascii(CAST(unsigned char, *l)) &amp;&amp; isspace(CAST(unsigned char, *l))) ++l;}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOWCASE</name><parameter_list>(<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(isupper(CAST(unsigned char, l)) ? tolower(CAST(unsigned char, l)) : (l))</cpp:value></cpp:define>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__osf__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__DECC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MAP_FAILED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MAP_FAILED</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MAP_FAILED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAP_FAILED</name></cpp:macro> <cpp:value>(void *) -1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MAP_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAP_FILE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLOC_CHUNK</name></cpp:macro> <cpp:value>CAST(size_t, 10)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLOC_INCR</name></cpp:macro> <cpp:value>CAST(size_t, 200)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAP_TYPE_USER</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAP_TYPE_MALLOC</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAP_TYPE_MMAP</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<struct>struct <name>magic_entry</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>magic</name></name> <modifier>*</modifier></type><name>mp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cont_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>max_count</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>magic_entry_set</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>magic_entry</name></name> <modifier>*</modifier></type><name>me</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>max</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>magic_map</name> <block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>magic</name></name> <modifier>*</modifier></type><name><name>magic</name><index>[<expr><name>MAGIC_SETS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>nmagic</name><index>[<expr><name>MAGIC_SETS</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name>int</name></type> <name><name>file_formats</name><index>[<expr><name>FILE_NAMES_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>file_nformats</name> <init>= <expr><name>FILE_NAMES_SIZE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>file_names</name><index>[<expr><name>FILE_NAMES_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>file_nnames</name> <init>= <expr><name>FILE_NAMES_SIZE</name></expr></init></decl>;</decl_stmt>

<function_decl><type><name>private</name> <name>int</name></type> <name>getvalue</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>magic</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>private</name> <name>int</name></type> <name>hextoint</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>private</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>getstr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>magic</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>private</name> <name>int</name></type> <name>parse</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>magic_entry</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>private</name> <name>void</name></type> <name>eatsize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>private</name> <name>int</name></type> <name>apprentice_1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>private</name> <name>size_t</name></type> <name>apprentice_magic_strength</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>magic</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>private</name> <name>int</name></type> <name>apprentice_sort</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>private</name> <name>void</name></type> <name>apprentice_list</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mlist</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>private</name> <name><name>struct</name> <name>magic_map</name></name> <modifier>*</modifier></type><name>apprentice_load</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>private</name> <name><name>struct</name> <name>mlist</name></name> <modifier>*</modifier></type><name>mlist_alloc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>private</name> <name>void</name></type> <name>mlist_free_all</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>private</name> <name>void</name></type> <name>mlist_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mlist</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>private</name> <name>void</name></type> <name>byteswap</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>private</name> <name>void</name></type> <name>bs1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>private</name> <name>uint16_t</name></type> <name>swap2</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>private</name> <name>uint32_t</name></type> <name>swap4</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>private</name> <name>uint64_t</name></type> <name>swap8</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>private</name> <name>char</name> <modifier>*</modifier></type><name>mkdbname</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>private</name> <name><name>struct</name> <name>magic_map</name></name> <modifier>*</modifier></type><name>apprentice_buf</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>magic</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>private</name> <name><name>struct</name> <name>magic_map</name></name> <modifier>*</modifier></type><name>apprentice_map</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>private</name> <name>int</name></type> <name>check_buffer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>magic_map</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>private</name> <name>void</name></type> <name>apprentice_unmap</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_map</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>private</name> <name>int</name></type> <name>apprentice_compile</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>magic_map</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>private</name> <name>int</name></type> <name>check_format_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>private</name> <name>int</name></type> <name>check_format</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>magic</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>private</name> <name>int</name></type> <name>get_op</name><parameter_list>(<parameter><decl><type><name>char</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>private</name> <name>int</name></type> <name>parse_mime</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>magic_entry</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>private</name> <name>int</name></type> <name>parse_strength</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>magic_entry</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>private</name> <name>int</name></type> <name>parse_apple</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>magic_entry</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>private</name> <name>int</name></type> <name>parse_ext</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>magic_entry</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><name>private</name> <name>size_t</name></type> <name>magicsize</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>magic</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>private</name> <specifier>const</specifier> <name>char</name></type> <name><name>usg_hdr</name><index>[]</index></name> <init>= <expr><literal type="string">"cont\toffset\ttype\topcode\tmask\tvalue\tdesc"</literal></expr></init></decl>;</decl_stmt>

<macro><name>private</name></macro> <struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>fun</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>magic_entry</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
}</block> <decl><name><name>bang</name><index>[]</index></name> <init>= <expr><block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECLARE_FIELD</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ #name, sizeof(#name) - 1, parse_ ##name }</cpp:value></cpp:define>
<expr><call><name>DECLARE_FIELD</name><argument_list>(<argument><expr><name>mime</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DECLARE_FIELD</name><argument_list>(<argument><expr><name>apple</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DECLARE_FIELD</name><argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DECLARE_FIELD</name><argument_list>(<argument><expr><name>strength</name></expr></argument>)</argument_list></call></expr>,
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DECLARE_FIELD</name></cpp:undef>
<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>COMPILE_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function_decl><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name><name>char</name> <modifier>*</modifier><index>[]</index></name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type><name>ms</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>progname</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>progname</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>progname</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>progname</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Usage: %s file\n"</literal></expr></argument>, <argument><expr><name>progname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ms</name> <operator>=</operator> <call><name>magic_open</name><argument_list>(<argument><expr><name>MAGIC_CHECK</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: %s\n"</literal></expr></argument>, <argument><expr><name>progname</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <ternary><condition><expr><call><name>magic_compile</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: %s\n"</literal></expr></argument>, <argument><expr><name>progname</name></expr></argument>, <argument><expr><call><name>magic_error</name><argument_list>(<argument><expr><name>ms</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>magic_close</name><argument_list>(<argument><expr><name>ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>type_tbl_s</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>format</name></decl>;</decl_stmt>
}</block>;</struct>








<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>type_tbl_s</name></name></type> <name><name>type_tbl</name><index>[]</index></name> <init>= <expr><block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XX</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>s, (sizeof(s) - 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XX_NULL</name></cpp:macro> <cpp:value>"", 0</cpp:value></cpp:define>
<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"invalid"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_INVALID</name></expr>, <expr><name>FILE_FMT_NONE</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"byte"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_BYTE</name></expr>, <expr><name>FILE_FMT_NUM</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"short"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_SHORT</name></expr>, <expr><name>FILE_FMT_NUM</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"default"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_DEFAULT</name></expr>, <expr><name>FILE_FMT_NONE</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"long"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_LONG</name></expr>, <expr><name>FILE_FMT_NUM</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"string"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_STRING</name></expr>, <expr><name>FILE_FMT_STR</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"date"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_DATE</name></expr>, <expr><name>FILE_FMT_STR</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"beshort"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_BESHORT</name></expr>, <expr><name>FILE_FMT_NUM</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"belong"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_BELONG</name></expr>, <expr><name>FILE_FMT_NUM</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"bedate"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_BEDATE</name></expr>, <expr><name>FILE_FMT_STR</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"leshort"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_LESHORT</name></expr>, <expr><name>FILE_FMT_NUM</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"lelong"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_LELONG</name></expr>, <expr><name>FILE_FMT_NUM</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"ledate"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_LEDATE</name></expr>, <expr><name>FILE_FMT_STR</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"pstring"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_PSTRING</name></expr>, <expr><name>FILE_FMT_STR</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"ldate"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_LDATE</name></expr>, <expr><name>FILE_FMT_STR</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"beldate"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_BELDATE</name></expr>, <expr><name>FILE_FMT_STR</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"leldate"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_LELDATE</name></expr>, <expr><name>FILE_FMT_STR</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"regex"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_REGEX</name></expr>, <expr><name>FILE_FMT_STR</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"bestring16"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_BESTRING16</name></expr>, <expr><name>FILE_FMT_STR</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"lestring16"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_LESTRING16</name></expr>, <expr><name>FILE_FMT_STR</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"search"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_SEARCH</name></expr>, <expr><name>FILE_FMT_STR</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"medate"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_MEDATE</name></expr>, <expr><name>FILE_FMT_STR</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"meldate"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_MELDATE</name></expr>, <expr><name>FILE_FMT_STR</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"melong"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_MELONG</name></expr>, <expr><name>FILE_FMT_NUM</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"quad"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_QUAD</name></expr>, <expr><name>FILE_FMT_QUAD</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"lequad"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_LEQUAD</name></expr>, <expr><name>FILE_FMT_QUAD</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"bequad"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_BEQUAD</name></expr>, <expr><name>FILE_FMT_QUAD</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"qdate"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_QDATE</name></expr>, <expr><name>FILE_FMT_STR</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"leqdate"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_LEQDATE</name></expr>, <expr><name>FILE_FMT_STR</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"beqdate"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_BEQDATE</name></expr>, <expr><name>FILE_FMT_STR</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"qldate"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_QLDATE</name></expr>, <expr><name>FILE_FMT_STR</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"leqldate"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_LEQLDATE</name></expr>, <expr><name>FILE_FMT_STR</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"beqldate"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_BEQLDATE</name></expr>, <expr><name>FILE_FMT_STR</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"float"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_FLOAT</name></expr>, <expr><name>FILE_FMT_FLOAT</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"befloat"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_BEFLOAT</name></expr>, <expr><name>FILE_FMT_FLOAT</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"lefloat"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_LEFLOAT</name></expr>, <expr><name>FILE_FMT_FLOAT</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"double"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_DOUBLE</name></expr>, <expr><name>FILE_FMT_DOUBLE</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"bedouble"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_BEDOUBLE</name></expr>, <expr><name>FILE_FMT_DOUBLE</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"ledouble"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_LEDOUBLE</name></expr>, <expr><name>FILE_FMT_DOUBLE</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"leid3"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_LEID3</name></expr>, <expr><name>FILE_FMT_NUM</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"beid3"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_BEID3</name></expr>, <expr><name>FILE_FMT_NUM</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"indirect"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_INDIRECT</name></expr>, <expr><name>FILE_FMT_NUM</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"qwdate"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_QWDATE</name></expr>, <expr><name>FILE_FMT_STR</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"leqwdate"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_LEQWDATE</name></expr>, <expr><name>FILE_FMT_STR</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"beqwdate"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_BEQWDATE</name></expr>, <expr><name>FILE_FMT_STR</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_NAME</name></expr>, <expr><name>FILE_FMT_NONE</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"use"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_USE</name></expr>, <expr><name>FILE_FMT_NONE</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"clear"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_CLEAR</name></expr>, <expr><name>FILE_FMT_NONE</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"der"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_DER</name></expr>, <expr><name>FILE_FMT_STR</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"guid"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_GUID</name></expr>, <expr><name>FILE_FMT_STR</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"offset"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_OFFSET</name></expr>, <expr><name>FILE_FMT_QUAD</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"bevarint"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_BEVARINT</name></expr>, <expr><name>FILE_FMT_STR</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"levarint"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_LEVARINT</name></expr>, <expr><name>FILE_FMT_STR</name></expr> }</block></expr>,
<expr><block>{ <expr><name>XX_NULL</name></expr>, <expr><name>FILE_INVALID</name></expr>, <expr><name>FILE_FMT_NONE</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>





<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>type_tbl_s</name></name></type> <name><name>special_tbl</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"der"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_DER</name></expr>, <expr><name>FILE_FMT_STR</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_NAME</name></expr>, <expr><name>FILE_FMT_STR</name></expr> }</block></expr>,
<expr><block>{ <expr><call><name>XX</name><argument_list>(<argument><expr><literal type="string">"use"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>FILE_USE</name></expr>, <expr><name>FILE_FMT_STR</name></expr> }</block></expr>,
<expr><block>{ <expr><name>XX_NULL</name></expr>, <expr><name>FILE_INVALID</name></expr>, <expr><name>FILE_FMT_NONE</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>XX</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>XX_NULL</name></cpp:undef>

<function><type><name>private</name> <name>int</name></type>
<name>get_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>type_tbl_s</name></name> <modifier>*</modifier></type><name>tbl</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>type_tbl_s</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>tbl</name></expr>;</init> <condition><expr><name><name>p</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>t</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>t</name> <operator>=</operator> <name>l</name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>private</name> <name>off_t</name></type>
<name>maxoff_t</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>off_t</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>CAST</name><argument_list>(<argument><expr><name>off_t</name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>off_t</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>CAST</name><argument_list>(<argument><expr><name>off_t</name></expr></argument>, <argument><expr><name>LONG_MAX</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0x7fffffff</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>private</name> <name>int</name></type>
<name>get_standard_integer_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isalpha</name><argument_list>(<argument><expr><macro><name>CAST</name><argument_list>(<argument>unsigned char</argument>, <argument>l[<literal type="number">1</literal>]</argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>l</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'C'</literal></expr>:</case>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>FILE_BYTE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'S'</literal></expr>:</case>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>FILE_SHORT</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'I'</literal></expr>:</case>
<case>case <expr><literal type="char">'L'</literal></expr>:</case>












<expr_stmt><expr><name>type</name> <operator>=</operator> <name>FILE_LONG</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'Q'</literal></expr>:</case>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>FILE_QUAD</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>

<return>return <expr><name>FILE_INVALID</name></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><name>l</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><macro><name>CAST</name><argument_list>(<argument>unsigned char</argument>, <argument>l[<literal type="number">1</literal>]</argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>










<if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><macro><name>CAST</name><argument_list>(<argument>unsigned char</argument>, <argument>l[<literal type="number">2</literal>]</argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>FILE_INVALID</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>l</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'1'</literal></expr>:</case>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>FILE_BYTE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'2'</literal></expr>:</case>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>FILE_SHORT</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'4'</literal></expr>:</case>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>FILE_LONG</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'8'</literal></expr>:</case>
<expr_stmt><expr><name>type</name> <operator>=</operator> <name>FILE_QUAD</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>

<return>return <expr><name>FILE_INVALID</name></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><name>l</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>



<expr_stmt><expr><name>type</name> <operator>=</operator> <name>FILE_LONG</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>l</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>t</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>t</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>type</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>private</name> <name>void</name></type>
<name>init_file_tables</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>done</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>type_tbl_s</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>done</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>done</name><operator>++</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>type_tbl</name></expr>;</init> <condition><expr><name><name>p</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>&lt;</operator> <name>FILE_NAMES_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file_names</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file_formats</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>format</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p</name> <operator>-</operator> <name>type_tbl</name> <operator>==</operator> <name>FILE_NAMES_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>private</name> <name>int</name></type>
<name>add_mlist</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mlist</name></name> <modifier>*</modifier></type><name>mlp</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>magic_map</name></name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mlist</name></name> <modifier>*</modifier></type><name>ml</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>mlp</name><operator>-&gt;</operator><name>map</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ml</name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr>struct <name>mlist</name> <operator>*</operator></expr></argument>, <argument><expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ml</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ml</name><operator>-&gt;</operator><name>map</name></name> <operator>=</operator> <ternary><condition><expr><name>idx</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>map</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ml</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name><name>map</name><operator>-&gt;</operator><name>magic</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ml</name><operator>-&gt;</operator><name>nmagic</name></name> <operator>=</operator> <name><name>map</name><operator>-&gt;</operator><name>nmagic</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mlp</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>ml</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ml</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>mlp</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ml</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>mlp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mlp</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>ml</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>private</name> <name>int</name></type>
<name>apprentice_1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>action</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>magic_map</name></name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>COMPILE_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>mlist</name></name> <modifier>*</modifier></type><name>ml</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>magicsize</name> <operator>!=</operator> <name>FILE_MAGICSIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>file_error</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"magic element size %lu != %lu"</literal></expr></argument>,
<argument><expr><macro><name>CAST</name><argument_list>(<argument>unsigned long</argument>, <argument>sizeof(*map-&gt;magic[<literal type="number">0</literal>])</argument>)</argument_list></macro></expr></argument>,
<argument><expr><macro><name>CAST</name><argument_list>(<argument>unsigned long</argument>, <argument>FILE_MAGICSIZE</argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>action</name> <operator>==</operator> <name>FILE_COMPILE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>map</name> <operator>=</operator> <call><name>apprentice_load</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>map</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><call><name>apprentice_compile</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>COMPILE_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>map</name> <operator>=</operator> <call><name>apprentice_map</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>map</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAGIC_CHECK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>file_magwarn</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"using regular magic file `%s'"</literal></expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>map</name> <operator>=</operator> <call><name>apprentice_load</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>map</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAGIC_SETS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>add_mlist</name><argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>mlist</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>apprentice_unmap</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mlist_free_all</name><argument_list>(<argument><expr><name>ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>file_oomem</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ml</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>action</name> <operator>==</operator> <name>FILE_LIST</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAGIC_SETS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Set %"</literal> <name>SIZE_T_FORMAT</name> <literal type="string">"u:\nBinary patterns:\n"</literal></expr></argument>,
<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apprentice_list</name><argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>mlist</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>BINTEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Text patterns:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apprentice_list</name><argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>mlist</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>TEXTTEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>protected</name> <name>void</name></type>
<name>file_ms_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type><name>ms</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ms</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAGIC_SETS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>mlist_free</name><argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>mlist</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>o</name><operator>.</operator><name>pbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>o</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>li</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>protected</name> <name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type>
<name>file_ms_alloc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type><name>ms</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ms</name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr>struct <name>magic_set</name> <operator>*</operator></expr></argument>, <argument><expr><call><name>calloc</name><argument_list>(<argument><expr><call><name>CAST</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><literal type="number">1u</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>magic_set</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>magic_setflags</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<goto>goto <name>free</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>o</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <name><name>ms</name><operator>-&gt;</operator><name>o</name><operator>.</operator><name>pbuf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>o</name><operator>.</operator><name>blen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">10</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ms</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>li</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>li</name></name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr>struct <name>level_info</name> <operator>*</operator></expr></argument>, <argument><expr><call><name>malloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>free</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>event_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAGIC_SETS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>mlist</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <literal type="string">"unknown"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>line</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>indir_max</name></name> <operator>=</operator> <name>FILE_INDIR_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>name_max</name></name> <operator>=</operator> <name>FILE_NAME_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>elf_shnum_max</name></name> <operator>=</operator> <name>FILE_ELF_SHNUM_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>elf_phnum_max</name></name> <operator>=</operator> <name>FILE_ELF_PHNUM_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>elf_notes_max</name></name> <operator>=</operator> <name>FILE_ELF_NOTES_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>regex_max</name></name> <operator>=</operator> <name>FILE_REGEX_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>bytes_max</name></name> <operator>=</operator> <name>FILE_BYTES_MAX</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>encoding_max</name></name> <operator>=</operator> <name>FILE_ENCODING_MAX</name></expr>;</expr_stmt>
<return>return <expr><name>ms</name></expr>;</return>
<label><name>free</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>private</name> <name>void</name></type>
<name>apprentice_unmap</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_map</name></name> <modifier>*</modifier></type><name>map</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>map</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>map</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>MAP_TYPE_USER</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>MAP_TYPE_MALLOC</name></expr>:</case>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAGIC_SETS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name>RCAST</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>magic</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>b</name> <operator>&gt;=</operator> <name>p</name> <operator>&amp;&amp;</operator> <name>b</name> <operator>&lt;=</operator> <name>p</name> <operator>+</operator> <name><name>map</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>QUICK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>MAP_TYPE_MMAP</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>map</name><operator>-&gt;</operator><name>p</name></name> <operator>&amp;&amp;</operator> <name><name>map</name><operator>-&gt;</operator><name>p</name></name> <operator>!=</operator> <name>MAP_FAILED</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>munmap</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<default>default:</default>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>private</name> <name><name>struct</name> <name>mlist</name></name> <modifier>*</modifier></type>
<name>mlist_alloc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mlist</name></name> <modifier>*</modifier></type><name>mlist</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mlist</name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr>struct <name>mlist</name> <operator>*</operator></expr></argument>, <argument><expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>mlist</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>mlist</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>mlist</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>mlist</name></expr>;</expr_stmt>
<return>return <expr><name>mlist</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>private</name> <name>void</name></type>
<name>mlist_free_all</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type><name>ms</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAGIC_SETS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>mlist_free</name><argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>mlist</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>mlist</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>private</name> <name>void</name></type>
<name>mlist_free_one</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mlist</name></name> <modifier>*</modifier></type><name>ml</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ml</name><operator>-&gt;</operator><name>map</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>apprentice_unmap</name><argument_list>(<argument><expr><call><name>CAST</name><argument_list>(<argument><expr>struct <name>magic_map</name> <operator>*</operator></expr></argument>, <argument><expr><name><name>ml</name><operator>-&gt;</operator><name>map</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>private</name> <name>void</name></type>
<name>mlist_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mlist</name></name> <modifier>*</modifier></type><name>mlist</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mlist</name></name> <modifier>*</modifier></type><name>ml</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mlist</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>ml</name> <operator>=</operator> <name><name>mlist</name><operator>-&gt;</operator><name>next</name></name></expr>;</init> <condition><expr><name>ml</name> <operator>!=</operator> <name>mlist</name></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>ml</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mlist_free_one</name><argument_list>(<argument><expr><name>ml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ml</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>mlist_free_one</name><argument_list>(<argument><expr><name>mlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>COMPILE_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>protected</name> <name>int</name></type>
<name>buffer_apprentice</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>magic</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>bufs</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>sizes</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nbufs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>mlist</name></name> <modifier>*</modifier></type><name>ml</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>magic_map</name></name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nbufs</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>file_reset</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_file_tables</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAGIC_SETS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>mlist_free</name><argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>mlist</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>mlist</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>mlist_alloc</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>file_oomem</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ms</name><operator>-&gt;</operator><name>mlist</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nbufs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>map</name> <operator>=</operator> <call><name>apprentice_buf</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name><name>bufs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>sizes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>map</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>MAGIC_SETS</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>add_mlist</name><argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>mlist</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>file_oomem</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ml</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>mlist_free_all</name><argument_list>(<argument><expr><name>ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><name>protected</name> <name>int</name></type>
<name>file_apprentice</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>action</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>mfn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fileerr</name></decl>, <decl><type ref="prev"/><name>errs</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>file_reset</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fn</name> <operator>=</operator> <call><name>magic_getpath</name><argument_list>(<argument><expr><name>fn</name></expr></argument>, <argument><expr><name>action</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>init_file_tables</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mfn</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>file_oomem</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAGIC_SETS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>mlist_free</name><argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>mlist</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>mlist</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>mlist_alloc</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>file_oomem</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ms</name><operator>-&gt;</operator><name>mlist</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>mlist_free</name><argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>mlist</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>mlist</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>mfn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>fn</name> <operator>=</operator> <name>mfn</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>fn</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>fn</name></expr></argument>, <argument><expr><name>PATHSEP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>fn</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>fileerr</name> <operator>=</operator> <call><name>apprentice_1</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errs</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name>errs</name></expr></argument>, <argument><expr><name>fileerr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fn</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>mfn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>errs</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAGIC_SETS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>mlist_free</name><argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>mlist</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>mlist</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>file_error</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"could not find any valid magic files!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>



if (action == FILE_LOAD)
return 0;

for (i = 0; i &lt; MAGIC_SETS; i++) {
mlist_free(ms-&gt;mlist[i]);
ms-&gt;mlist[i] = NULL;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<switch>switch <condition>(<expr><name>action</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FILE_LOAD</name></expr>:</case>
<case>case <expr><name>FILE_COMPILE</name></expr>:</case>
<case>case <expr><name>FILE_CHECK</name></expr>:</case>
<case>case <expr><name>FILE_LIST</name></expr>:</case>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<default>default:</default>
<expr_stmt><expr><call><name>file_error</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Invalid action %d"</literal></expr></argument>, <argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>











<function><type><name>private</name> <name>size_t</name></type>
<name>nonmagic</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>rv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>str</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<switch>switch <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'\\'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><operator>++</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>rv</name><operator>++</operator></expr>;</expr_stmt>
<continue>continue;</continue>
<case>case <expr><literal type="char">'?'</literal></expr>:</case>
<case>case <expr><literal type="char">'*'</literal></expr>:</case>
<case>case <expr><literal type="char">'.'</literal></expr>:</case>
<case>case <expr><literal type="char">'+'</literal></expr>:</case>
<case>case <expr><literal type="char">'^'</literal></expr>:</case>
<case>case <expr><literal type="char">'$'</literal></expr>:</case>
<continue>continue;</continue>
<case>case <expr><literal type="char">'['</literal></expr>:</case>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">']'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt>
<continue>continue;</continue>
<case>case <expr><literal type="char">'{'</literal></expr>:</case>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'}'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<continue>continue;</continue>
<default>default:</default>
<expr_stmt><expr><name>rv</name><operator>++</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></switch></block_content></block></for>

<return>return <expr><ternary><condition><expr><name>rv</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name>rv</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>


<function><type><name>private</name> <name>size_t</name></type>
<name>typesize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FILE_BYTE</name></expr>:</case>
<return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><name>FILE_SHORT</name></expr>:</case>
<case>case <expr><name>FILE_LESHORT</name></expr>:</case>
<case>case <expr><name>FILE_BESHORT</name></expr>:</case>
<return>return <expr><literal type="number">2</literal></expr>;</return>

<case>case <expr><name>FILE_LONG</name></expr>:</case>
<case>case <expr><name>FILE_LELONG</name></expr>:</case>
<case>case <expr><name>FILE_BELONG</name></expr>:</case>
<case>case <expr><name>FILE_MELONG</name></expr>:</case>
<return>return <expr><literal type="number">4</literal></expr>;</return>

<case>case <expr><name>FILE_DATE</name></expr>:</case>
<case>case <expr><name>FILE_LEDATE</name></expr>:</case>
<case>case <expr><name>FILE_BEDATE</name></expr>:</case>
<case>case <expr><name>FILE_MEDATE</name></expr>:</case>
<case>case <expr><name>FILE_LDATE</name></expr>:</case>
<case>case <expr><name>FILE_LELDATE</name></expr>:</case>
<case>case <expr><name>FILE_BELDATE</name></expr>:</case>
<case>case <expr><name>FILE_MELDATE</name></expr>:</case>
<case>case <expr><name>FILE_FLOAT</name></expr>:</case>
<case>case <expr><name>FILE_BEFLOAT</name></expr>:</case>
<case>case <expr><name>FILE_LEFLOAT</name></expr>:</case>
<return>return <expr><literal type="number">4</literal></expr>;</return>

<case>case <expr><name>FILE_QUAD</name></expr>:</case>
<case>case <expr><name>FILE_BEQUAD</name></expr>:</case>
<case>case <expr><name>FILE_LEQUAD</name></expr>:</case>
<case>case <expr><name>FILE_QDATE</name></expr>:</case>
<case>case <expr><name>FILE_LEQDATE</name></expr>:</case>
<case>case <expr><name>FILE_BEQDATE</name></expr>:</case>
<case>case <expr><name>FILE_QLDATE</name></expr>:</case>
<case>case <expr><name>FILE_LEQLDATE</name></expr>:</case>
<case>case <expr><name>FILE_BEQLDATE</name></expr>:</case>
<case>case <expr><name>FILE_QWDATE</name></expr>:</case>
<case>case <expr><name>FILE_LEQWDATE</name></expr>:</case>
<case>case <expr><name>FILE_BEQWDATE</name></expr>:</case>
<case>case <expr><name>FILE_DOUBLE</name></expr>:</case>
<case>case <expr><name>FILE_BEDOUBLE</name></expr>:</case>
<case>case <expr><name>FILE_LEDOUBLE</name></expr>:</case>
<case>case <expr><name>FILE_OFFSET</name></expr>:</case>
<case>case <expr><name>FILE_BEVARINT</name></expr>:</case>
<case>case <expr><name>FILE_LEVARINT</name></expr>:</case>
<return>return <expr><literal type="number">8</literal></expr>;</return>

<case>case <expr><name>FILE_GUID</name></expr>:</case>
<return>return <expr><literal type="number">16</literal></expr>;</return>

<default>default:</default>
<return>return <expr><name>FILE_BADSIZE</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>




<function><type><name>private</name> <name>size_t</name></type>
<name>apprentice_magic_strength</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>magic</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MULT</name></cpp:macro> <cpp:value>10U</cpp:value></cpp:define>
<decl_stmt><decl><type><name>size_t</name></type> <name>ts</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>val</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <name>MULT</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FILE_DEFAULT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>factor_op</name></name> <operator>!=</operator> <name>FILE_FACTOR_OP_NONE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>FILE_BYTE</name></expr>:</case>
<case>case <expr><name>FILE_SHORT</name></expr>:</case>
<case>case <expr><name>FILE_LESHORT</name></expr>:</case>
<case>case <expr><name>FILE_BESHORT</name></expr>:</case>
<case>case <expr><name>FILE_LONG</name></expr>:</case>
<case>case <expr><name>FILE_LELONG</name></expr>:</case>
<case>case <expr><name>FILE_BELONG</name></expr>:</case>
<case>case <expr><name>FILE_MELONG</name></expr>:</case>
<case>case <expr><name>FILE_DATE</name></expr>:</case>
<case>case <expr><name>FILE_LEDATE</name></expr>:</case>
<case>case <expr><name>FILE_BEDATE</name></expr>:</case>
<case>case <expr><name>FILE_MEDATE</name></expr>:</case>
<case>case <expr><name>FILE_LDATE</name></expr>:</case>
<case>case <expr><name>FILE_LELDATE</name></expr>:</case>
<case>case <expr><name>FILE_BELDATE</name></expr>:</case>
<case>case <expr><name>FILE_MELDATE</name></expr>:</case>
<case>case <expr><name>FILE_FLOAT</name></expr>:</case>
<case>case <expr><name>FILE_BEFLOAT</name></expr>:</case>
<case>case <expr><name>FILE_LEFLOAT</name></expr>:</case>
<case>case <expr><name>FILE_QUAD</name></expr>:</case>
<case>case <expr><name>FILE_BEQUAD</name></expr>:</case>
<case>case <expr><name>FILE_LEQUAD</name></expr>:</case>
<case>case <expr><name>FILE_QDATE</name></expr>:</case>
<case>case <expr><name>FILE_LEQDATE</name></expr>:</case>
<case>case <expr><name>FILE_BEQDATE</name></expr>:</case>
<case>case <expr><name>FILE_QLDATE</name></expr>:</case>
<case>case <expr><name>FILE_LEQLDATE</name></expr>:</case>
<case>case <expr><name>FILE_BEQLDATE</name></expr>:</case>
<case>case <expr><name>FILE_QWDATE</name></expr>:</case>
<case>case <expr><name>FILE_LEQWDATE</name></expr>:</case>
<case>case <expr><name>FILE_BEQWDATE</name></expr>:</case>
<case>case <expr><name>FILE_DOUBLE</name></expr>:</case>
<case>case <expr><name>FILE_BEDOUBLE</name></expr>:</case>
<case>case <expr><name>FILE_LEDOUBLE</name></expr>:</case>
<case>case <expr><name>FILE_BEVARINT</name></expr>:</case>
<case>case <expr><name>FILE_LEVARINT</name></expr>:</case>
<case>case <expr><name>FILE_GUID</name></expr>:</case>
<case>case <expr><name>FILE_OFFSET</name></expr>:</case>
<expr_stmt><expr><name>ts</name> <operator>=</operator> <call><name>typesize</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ts</name> <operator>==</operator> <name>FILE_BADSIZE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>val</name> <operator>+=</operator> <name>ts</name> <operator>*</operator> <name>MULT</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FILE_PSTRING</name></expr>:</case>
<case>case <expr><name>FILE_STRING</name></expr>:</case>
<expr_stmt><expr><name>val</name> <operator>+=</operator> <name><name>m</name><operator>-&gt;</operator><name>vallen</name></name> <operator>*</operator> <name>MULT</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FILE_BESTRING16</name></expr>:</case>
<case>case <expr><name>FILE_LESTRING16</name></expr>:</case>
<expr_stmt><expr><name>val</name> <operator>+=</operator> <name><name>m</name><operator>-&gt;</operator><name>vallen</name></name> <operator>*</operator> <name>MULT</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FILE_SEARCH</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>vallen</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>val</name> <operator>+=</operator> <name><name>m</name><operator>-&gt;</operator><name>vallen</name></name> <operator>*</operator> <call><name>MAX</name><argument_list>(<argument><expr><name>MULT</name> <operator>/</operator> <name><name>m</name><operator>-&gt;</operator><name>vallen</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FILE_REGEX</name></expr>:</case>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>nonmagic</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>+=</operator> <name>v</name> <operator>*</operator> <call><name>MAX</name><argument_list>(<argument><expr><name>MULT</name> <operator>/</operator> <name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FILE_INDIRECT</name></expr>:</case>
<case>case <expr><name>FILE_NAME</name></expr>:</case>
<case>case <expr><name>FILE_USE</name></expr>:</case>
<break>break;</break>

<case>case <expr><name>FILE_DER</name></expr>:</case>
<expr_stmt><expr><name>val</name> <operator>+=</operator> <name>MULT</name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Bad type %d\n"</literal></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<switch>switch <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>reln</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'x'</literal></expr>:</case>
<case>case <expr><literal type="char">'!'</literal></expr>:</case>
<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'='</literal></expr>:</case>
<expr_stmt><expr><name>val</name> <operator>+=</operator> <name>MULT</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'&gt;'</literal></expr>:</case>
<case>case <expr><literal type="char">'&lt;'</literal></expr>:</case>
<expr_stmt><expr><name>val</name> <operator>-=</operator> <literal type="number">2</literal> <operator>*</operator> <name>MULT</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'^'</literal></expr>:</case>
<case>case <expr><literal type="char">'&amp;'</literal></expr>:</case>
<expr_stmt><expr><name>val</name> <operator>-=</operator> <name>MULT</name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Bad relation %c\n"</literal></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>reln</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<switch>switch <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>factor_op</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FILE_FACTOR_OP_NONE</name></expr>:</case>
<break>break;</break>
<case>case <expr><name>FILE_FACTOR_OP_PLUS</name></expr>:</case>
<expr_stmt><expr><name>val</name> <operator>+=</operator> <name><name>m</name><operator>-&gt;</operator><name>factor</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_FACTOR_OP_MINUS</name></expr>:</case>
<expr_stmt><expr><name>val</name> <operator>-=</operator> <name><name>m</name><operator>-&gt;</operator><name>factor</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_FACTOR_OP_TIMES</name></expr>:</case>
<expr_stmt><expr><name>val</name> <operator>*=</operator> <name><name>m</name><operator>-&gt;</operator><name>factor</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_FACTOR_OP_DIV</name></expr>:</case>
<expr_stmt><expr><name>val</name> <operator>/=</operator> <name><name>m</name><operator>-&gt;</operator><name>factor</name></name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>desc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>val</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>private</name> <name>int</name></type>
<name>apprentice_sort</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>magic_entry</name></name> <modifier>*</modifier></type><name>ma</name> <init>= <expr><call><name>CAST</name><argument_list>(<argument><expr><specifier>const</specifier> struct <name>magic_entry</name> <operator>*</operator></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>magic_entry</name></name> <modifier>*</modifier></type><name>mb</name> <init>= <expr><call><name>CAST</name><argument_list>(<argument><expr><specifier>const</specifier> struct <name>magic_entry</name> <operator>*</operator></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>sa</name> <init>= <expr><call><name>apprentice_magic_strength</name><argument_list>(<argument><expr><name><name>ma</name><operator>-&gt;</operator><name>mp</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>sb</name> <init>= <expr><call><name>apprentice_magic_strength</name><argument_list>(<argument><expr><name><name>mb</name><operator>-&gt;</operator><name>mp</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>sa</name> <operator>==</operator> <name>sb</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>sa</name> <operator>&gt;</operator> <name>sb</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>




<function><type><name>private</name> <name>void</name></type>
<name>apprentice_list</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mlist</name></name> <modifier>*</modifier></type><name>mlist</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>magindex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>mlist</name></name> <modifier>*</modifier></type><name>ml</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>ml</name> <operator>=</operator> <name><name>mlist</name><operator>-&gt;</operator><name>next</name></name></expr>;</init> <condition><expr><name>ml</name> <operator>!=</operator> <name>mlist</name></expr>;</condition> <incr><expr><name>ml</name> <operator>=</operator> <name><name>ml</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>magindex</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>magindex</name> <operator>&lt;</operator> <name><name>ml</name><operator>-&gt;</operator><name>nmagic</name></name></expr>;</condition> <incr><expr><name>magindex</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>magic</name></name> <modifier>*</modifier></type><name>m</name> <init>= <expr><operator>&amp;</operator><name><name>ml</name><operator>-&gt;</operator><name>magic</name><index>[<expr><name>magindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>mode</name><operator>)</operator> <operator>!=</operator> <name>mode</name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name>magindex</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>ml</name><operator>-&gt;</operator><name>nmagic</name></name> <operator>&amp;&amp;</operator>
<name><name>ml</name><operator>-&gt;</operator><name>magic</name><index>[<expr><name>magindex</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>cont_level</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>magindex</name></expr>;</expr_stmt></block_content></block></while>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>





<while>while <condition>(<expr><name>magindex</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>ml</name><operator>-&gt;</operator><name>nmagic</name></name> <operator>&amp;&amp;</operator>
<name><name>ml</name><operator>-&gt;</operator><name>magic</name><index>[<expr><name>magindex</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>cont_level</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>*</operator><name><name>ml</name><operator>-&gt;</operator><name>magic</name><index>[<expr><name>magindex</name></expr>]</index></name><operator>.</operator><name>desc</name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator>
<operator>*</operator><name><name>ml</name><operator>-&gt;</operator><name>magic</name><index>[<expr><name>magindex</name></expr>]</index></name><operator>.</operator><name>mimetype</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>magindex</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Strength = %3"</literal> <name>SIZE_T_FORMAT</name> <literal type="string">"u@%u: %s [%s]\n"</literal></expr></argument>,
<argument><expr><call><name>apprentice_magic_strength</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>ml</name><operator>-&gt;</operator><name>magic</name><index>[<expr><name>magindex</name></expr>]</index></name><operator>.</operator><name>lineno</name></expr></argument>,
<argument><expr><name><name>ml</name><operator>-&gt;</operator><name>magic</name><index>[<expr><name>magindex</name></expr>]</index></name><operator>.</operator><name>desc</name></expr></argument>,
<argument><expr><name><name>ml</name><operator>-&gt;</operator><name>magic</name><index>[<expr><name>magindex</name></expr>]</index></name><operator>.</operator><name>mimetype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>private</name> <name>void</name></type>
<name>set_test_type</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic</name></name> <modifier>*</modifier></type><name>mstart</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>magic</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FILE_BYTE</name></expr>:</case>
<case>case <expr><name>FILE_SHORT</name></expr>:</case>
<case>case <expr><name>FILE_LONG</name></expr>:</case>
<case>case <expr><name>FILE_DATE</name></expr>:</case>
<case>case <expr><name>FILE_BESHORT</name></expr>:</case>
<case>case <expr><name>FILE_BELONG</name></expr>:</case>
<case>case <expr><name>FILE_BEDATE</name></expr>:</case>
<case>case <expr><name>FILE_LESHORT</name></expr>:</case>
<case>case <expr><name>FILE_LELONG</name></expr>:</case>
<case>case <expr><name>FILE_LEDATE</name></expr>:</case>
<case>case <expr><name>FILE_LDATE</name></expr>:</case>
<case>case <expr><name>FILE_BELDATE</name></expr>:</case>
<case>case <expr><name>FILE_LELDATE</name></expr>:</case>
<case>case <expr><name>FILE_MEDATE</name></expr>:</case>
<case>case <expr><name>FILE_MELDATE</name></expr>:</case>
<case>case <expr><name>FILE_MELONG</name></expr>:</case>
<case>case <expr><name>FILE_QUAD</name></expr>:</case>
<case>case <expr><name>FILE_LEQUAD</name></expr>:</case>
<case>case <expr><name>FILE_BEQUAD</name></expr>:</case>
<case>case <expr><name>FILE_QDATE</name></expr>:</case>
<case>case <expr><name>FILE_LEQDATE</name></expr>:</case>
<case>case <expr><name>FILE_BEQDATE</name></expr>:</case>
<case>case <expr><name>FILE_QLDATE</name></expr>:</case>
<case>case <expr><name>FILE_LEQLDATE</name></expr>:</case>
<case>case <expr><name>FILE_BEQLDATE</name></expr>:</case>
<case>case <expr><name>FILE_QWDATE</name></expr>:</case>
<case>case <expr><name>FILE_LEQWDATE</name></expr>:</case>
<case>case <expr><name>FILE_BEQWDATE</name></expr>:</case>
<case>case <expr><name>FILE_FLOAT</name></expr>:</case>
<case>case <expr><name>FILE_BEFLOAT</name></expr>:</case>
<case>case <expr><name>FILE_LEFLOAT</name></expr>:</case>
<case>case <expr><name>FILE_DOUBLE</name></expr>:</case>
<case>case <expr><name>FILE_BEDOUBLE</name></expr>:</case>
<case>case <expr><name>FILE_LEDOUBLE</name></expr>:</case>
<case>case <expr><name>FILE_BEVARINT</name></expr>:</case>
<case>case <expr><name>FILE_LEVARINT</name></expr>:</case>
<case>case <expr><name>FILE_DER</name></expr>:</case>
<case>case <expr><name>FILE_GUID</name></expr>:</case>
<case>case <expr><name>FILE_OFFSET</name></expr>:</case>
<expr_stmt><expr><name><name>mstart</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>BINTEST</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_STRING</name></expr>:</case>
<case>case <expr><name>FILE_PSTRING</name></expr>:</case>
<case>case <expr><name>FILE_BESTRING16</name></expr>:</case>
<case>case <expr><name>FILE_LESTRING16</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>mstart</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>&amp;</operator> <name>STRING_TEXTTEST</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mstart</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>TEXTTEST</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mstart</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>BINTEST</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_REGEX</name></expr>:</case>
<case>case <expr><name>FILE_SEARCH</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>mstart</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>&amp;</operator> <name>STRING_BINTEST</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mstart</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>BINTEST</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mstart</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>&amp;</operator> <name>STRING_TEXTTEST</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mstart</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>TEXTTEST</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mstart</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <operator>(</operator><name>TEXTTEST</name><operator>|</operator><name>BINTEST</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>file_looks_utf8</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>us</name></name></expr></argument>, <argument><expr><call><name>CAST</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>vallen</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mstart</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>BINTEST</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>mstart</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>TEXTTEST</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_DEFAULT</name></expr>:</case>


<break>break;</break>
<case>case <expr><name>FILE_INVALID</name></expr>:</case>
<default>default:</default>

<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>private</name> <name>int</name></type>
<name>addentry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>magic_entry</name></name> <modifier>*</modifier></type><name>me</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>magic_entry_set</name></name> <modifier>*</modifier></type><name>mset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><ternary><condition><expr><name><name>me</name><operator>-&gt;</operator><name>mp</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>FILE_NAME</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>mset</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>count</name> <operator>==</operator> <name><name>mset</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>max</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>magic_entry</name></name> <modifier>*</modifier></type><name>mp</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>mset</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>max</name> <operator>+=</operator> <name>ALLOC_INCR</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mp</name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr>struct <name>magic_entry</name> <operator>*</operator></expr></argument>,
<argument><expr><call><name>realloc</name><argument_list>(<argument><expr><name><name>mset</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>me</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>mp</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>mset</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>max</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator>
<name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>file_oomem</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>mp</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>mset</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mp</name><index>[<expr><name><name>mset</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>count</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>mp</name></expr></argument>)</argument_list></sizeof> <operator>*</operator>
<name>ALLOC_INCR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mset</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>me</name> <operator>=</operator> <name>mp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>mset</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>me</name><index>[<expr><name><name>mset</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>me</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>me</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>me</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>private</name> <name>void</name></type>
<name>load_1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>action</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>errs</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>magic_entry_set</name></name> <modifier>*</modifier></type><name>mset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>lineno</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>llen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>magic_entry</name></name></type> <name>me</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <name>fn</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>ENOENT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>file_error</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"cannot read magic file `%s'"</literal></expr></argument>,
<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>errs</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>me</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>me</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name><name>ms</name><operator>-&gt;</operator><name>line</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>getline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>llen</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</condition>
<incr><expr><name><name>ms</name><operator>-&gt;</operator><name>line</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>line</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>lineno</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>line</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'\0'</literal></expr>:</case>
<case>case <expr><literal type="char">'#'</literal></expr>:</case>
<continue>continue;</continue>
<case>case <expr><literal type="char">'!'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>line</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>bang</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>CAST</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>bang</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>&amp;&amp;</operator>
<call><name>memcmp</name><argument_list>(<argument><expr><name><name>bang</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>line</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>,
<argument><expr><name><name>bang</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>bang</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>file_error</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"Unknown !: entry `%s'"</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>errs</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>me</name><operator>.</operator><name>mp</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>file_error</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="string">"No current entry for :!%s type"</literal></expr></argument>,
<argument><expr><name><name>bang</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>errs</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name><name>bang</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fun</name><operator>)</operator><operator>(</operator><name>ms</name><operator>,</operator> <operator>&amp;</operator><name>me</name><operator>,</operator>
<name>line</name> <operator>+</operator> <name><name>bang</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>+</operator> <literal type="number">2</literal><operator>,</operator>
<name>len</name> <operator>-</operator> <name><name>bang</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>errs</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<default>default:</default>
<label><name>again</name>:</label>
<switch>switch <condition>(<expr><call><name>parse</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>me</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<continue>continue;</continue>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>addentry</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>me</name></expr></argument>, <argument><expr><name>mset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>again</name>;</goto>
<default>default:</default>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>errs</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></switch>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>me</name><operator>.</operator><name>mp</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>addentry</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>me</name></expr></argument>, <argument><expr><name>mset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><name>private</name> <name>int</name></type>
<name>cmpstrp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><operator>*</operator><call><name>RCAST</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator><specifier>const</specifier> <operator>*</operator></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>*</operator><call><name>RCAST</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator><specifier>const</specifier> <operator>*</operator></expr></argument>, <argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>private</name> <name>uint32_t</name></type>
<name>set_text_binary</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>magic_entry</name></name> <modifier>*</modifier></type><name>me</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>nme</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>starttest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>text</name><index>[]</index></name> <init>= <expr><literal type="string">"text"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>binary</name><index>[]</index></name> <init>= <expr><literal type="string">"binary"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name>len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><name>starttest</name></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>
<expr_stmt><expr><call><name>set_test_type</name><argument_list>(<argument><expr><name><name>me</name><index>[<expr><name>starttest</name></expr>]</index></name><operator>.</operator><name>mp</name></expr></argument>, <argument><expr><name><name>me</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAGIC_DEBUG</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s%s%s: %s\n"</literal></expr></argument>,
<argument><expr><name><name>me</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>mp</name><operator>-&gt;</operator><name>mimetype</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>me</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>mp</name><operator>-&gt;</operator><name>mimetype</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"; "</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>me</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>mp</name><operator>-&gt;</operator><name>desc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ?</condition><then> <expr><name><name>me</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>mp</name><operator>-&gt;</operator><name>desc</name></name></expr> </then><else>: <expr><literal type="string">"(no description)"</literal></expr></else></ternary></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>me</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>mp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>BINTEST</name></expr> ?</condition><then> <expr><name>binary</name></expr> </then><else>: <expr><name>text</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>me</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>mp</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>BINTEST</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strstr</name><argument_list>(<argument><expr><name><name>me</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>mp</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>p</name> <operator>==</operator> <name><name>me</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>mp</name><operator>-&gt;</operator><name>desc</name></name> <operator>||</operator>
<call><name>isspace</name><argument_list>(<argument><expr><macro><name>CAST</name><argument_list>(<argument>unsigned char</argument>, <argument>p[-<literal type="number">1</literal>]</argument>)</argument_list></macro></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name>p</name> <operator>+</operator> <name>len</name> <operator>-</operator> <name><name>me</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>mp</name><operator>-&gt;</operator><name>desc</name></name> <operator>==</operator> <name>MAXstring</name>
<operator>||</operator> <operator>(</operator><name><name>p</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator>
<call><name>isspace</name><argument_list>(<argument><expr><macro><name>CAST</name><argument_list>(<argument>unsigned char</argument>, <argument>p[len]</argument>)</argument_list></macro></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"*** Possible "</literal>
<literal type="string">"binary test for text type\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><operator>++</operator><name>i</name> <operator>&lt;</operator> <name>nme</name> <operator>&amp;&amp;</operator> <name><name>me</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>mp</name><operator>-&gt;</operator><name>cont_level</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do>
<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>private</name> <name>void</name></type>
<name>set_last_default</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>magic_entry</name></name> <modifier>*</modifier></type><name>me</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>nme</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nme</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>me</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>mp</name><operator>-&gt;</operator><name>cont_level</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name><name>me</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>mp</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>FILE_DEFAULT</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><operator>++</operator><name>i</name> <operator>&lt;</operator> <name>nme</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>me</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>mp</name><operator>-&gt;</operator><name>cont_level</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>nme</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>line</name></name> <operator>=</operator> <name><name>me</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>mp</name><operator>-&gt;</operator><name>lineno</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>file_magwarn</name><argument_list>(<argument><expr><name>ms</name></expr></argument>,
<argument><expr><literal type="string">"level 0 \"default\" did not sort last"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>private</name> <name>int</name></type>
<name>coalesce_entries</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>magic_entry</name></name> <modifier>*</modifier></type><name>me</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>nme</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>magic</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>ma</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>nma</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>mentrycount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>slen</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nme</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>mentrycount</name> <operator>+=</operator> <name><name>me</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cont_count</name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>mentrycount</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ma</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>nma</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>slen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>ma</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>mentrycount</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>ma</name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr>struct <name>magic</name> <operator>*</operator></expr></argument>, <argument><expr><call><name>malloc</name><argument_list>(<argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>file_oomem</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mentrycount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nme</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>memcpy</name><argument_list>(<argument><expr><operator>*</operator><name>ma</name> <operator>+</operator> <name>mentrycount</name></expr></argument>, <argument><expr><name><name>me</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mp</name></expr></argument>,
<argument><expr><name><name>me</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cont_count</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>ma</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mentrycount</name> <operator>+=</operator> <name><name>me</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cont_count</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>nma</name> <operator>=</operator> <name>mentrycount</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>private</name> <name>void</name></type>
<name>magic_entry_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_entry</name></name> <modifier>*</modifier></type><name>me</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>nme</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>me</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nme</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>me</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>me</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>private</name> <name><name>struct</name> <name>magic_map</name></name> <modifier>*</modifier></type>
<name>apprentice_load</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>action</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>errs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>files</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>maxfiles</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>filearr</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>mfn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>magic_map</name></name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>magic_entry_set</name></name></type> <name><name>mset</name><index>[<expr><name>MAGIC_SETS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DIR</name> <modifier>*</modifier></type><name>dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dirent</name></name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>mset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mset</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>MAGIC_CHECK</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>map</name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr>struct <name>magic_map</name> <operator>*</operator></expr></argument>, <argument><expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>map</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>file_oomem</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>map</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MAP_TYPE_MALLOC</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>action</name> <operator>==</operator> <name>FILE_CHECK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>usg_hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name>fn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>dir</name> <operator>=</operator> <call><name>opendir</name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dir</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errs</name><operator>++</operator></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><operator>(</operator><name>d</name> <operator>=</operator> <call><name>readdir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>d_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mfn</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>file_oomem</name><argument_list>(<argument><expr><name>ms</name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errs</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>closedir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name>mfn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>S_ISREG</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>mfn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>files</name> <operator>&gt;=</operator> <name>maxfiles</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>mlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>nfilearr</name></decl>;</decl_stmt>
<expr_stmt><expr><name>maxfiles</name> <operator>=</operator> <operator>(</operator><name>maxfiles</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>mlen</name> <operator>=</operator> <name>maxfiles</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>filearr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>nfilearr</name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator><operator>*</operator></expr></argument>,
<argument><expr><call><name>realloc</name><argument_list>(<argument><expr><name>filearr</name></expr></argument>, <argument><expr><name>mlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>file_oomem</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>mlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>mfn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>closedir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errs</name><operator>++</operator></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>filearr</name> <operator>=</operator> <name>nfilearr</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>filearr</name><index>[<expr><name>files</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>mfn</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>closedir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>filearr</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>filearr</name></expr></argument>, <argument><expr><name>files</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>filearr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>cmpstrp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>files</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>load_1</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>action</name></expr></argument>, <argument><expr><name><name>filearr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errs</name></expr></argument>, <argument><expr><name>mset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>filearr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>filearr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>filearr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>load_1</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>action</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errs</name></expr></argument>, <argument><expr><name>mset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>errs</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>MAGIC_SETS</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mset</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>count</name></expr>;</condition> <incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>mset</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>me</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>mp</name><operator>-&gt;</operator><name>cont_level</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>set_text_binary</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name><name>mset</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>me</name></expr></argument>, <argument><expr><name><name>mset</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>count</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name><name>mset</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>me</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name><name>mset</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>me</name></expr></argument>, <argument><expr><name><name>mset</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>mset</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>me</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>apprentice_sort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>





<expr_stmt><expr><call><name>set_last_default</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name><name>mset</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>me</name></expr></argument>, <argument><expr><name><name>mset</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>mset</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>coalesce_entries</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name><name>mset</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>me</name></expr></argument>, <argument><expr><name><name>mset</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>count</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>magic</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>map</name><operator>-&gt;</operator><name>nmagic</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errs</name><operator>++</operator></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<label><name>out</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>filearr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>MAGIC_SETS</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>magic_entry_free</name><argument_list>(<argument><expr><name><name>mset</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>me</name></expr></argument>, <argument><expr><name><name>mset</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>errs</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>apprentice_unmap</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>map</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>protected</name> <name>uint64_t</name></type>
<name>file_signextend</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>magic</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>UNSIGNED</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<switch>switch<condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>





<case>case <expr><name>FILE_BYTE</name></expr>:</case>
<expr_stmt><expr><name>v</name> <operator>=</operator> <macro><name>CAST</name><argument_list>(<argument>signed char</argument>, <argument>v</argument>)</argument_list></macro></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_SHORT</name></expr>:</case>
<case>case <expr><name>FILE_BESHORT</name></expr>:</case>
<case>case <expr><name>FILE_LESHORT</name></expr>:</case>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>short</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_DATE</name></expr>:</case>
<case>case <expr><name>FILE_BEDATE</name></expr>:</case>
<case>case <expr><name>FILE_LEDATE</name></expr>:</case>
<case>case <expr><name>FILE_MEDATE</name></expr>:</case>
<case>case <expr><name>FILE_LDATE</name></expr>:</case>
<case>case <expr><name>FILE_BELDATE</name></expr>:</case>
<case>case <expr><name>FILE_LELDATE</name></expr>:</case>
<case>case <expr><name>FILE_MELDATE</name></expr>:</case>
<case>case <expr><name>FILE_LONG</name></expr>:</case>
<case>case <expr><name>FILE_BELONG</name></expr>:</case>
<case>case <expr><name>FILE_LELONG</name></expr>:</case>
<case>case <expr><name>FILE_MELONG</name></expr>:</case>
<case>case <expr><name>FILE_FLOAT</name></expr>:</case>
<case>case <expr><name>FILE_BEFLOAT</name></expr>:</case>
<case>case <expr><name>FILE_LEFLOAT</name></expr>:</case>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>int32_t</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_QUAD</name></expr>:</case>
<case>case <expr><name>FILE_BEQUAD</name></expr>:</case>
<case>case <expr><name>FILE_LEQUAD</name></expr>:</case>
<case>case <expr><name>FILE_QDATE</name></expr>:</case>
<case>case <expr><name>FILE_QLDATE</name></expr>:</case>
<case>case <expr><name>FILE_QWDATE</name></expr>:</case>
<case>case <expr><name>FILE_BEQDATE</name></expr>:</case>
<case>case <expr><name>FILE_BEQLDATE</name></expr>:</case>
<case>case <expr><name>FILE_BEQWDATE</name></expr>:</case>
<case>case <expr><name>FILE_LEQDATE</name></expr>:</case>
<case>case <expr><name>FILE_LEQLDATE</name></expr>:</case>
<case>case <expr><name>FILE_LEQWDATE</name></expr>:</case>
<case>case <expr><name>FILE_DOUBLE</name></expr>:</case>
<case>case <expr><name>FILE_BEDOUBLE</name></expr>:</case>
<case>case <expr><name>FILE_LEDOUBLE</name></expr>:</case>
<case>case <expr><name>FILE_OFFSET</name></expr>:</case>
<case>case <expr><name>FILE_BEVARINT</name></expr>:</case>
<case>case <expr><name>FILE_LEVARINT</name></expr>:</case>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>int64_t</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_STRING</name></expr>:</case>
<case>case <expr><name>FILE_PSTRING</name></expr>:</case>
<case>case <expr><name>FILE_BESTRING16</name></expr>:</case>
<case>case <expr><name>FILE_LESTRING16</name></expr>:</case>
<case>case <expr><name>FILE_REGEX</name></expr>:</case>
<case>case <expr><name>FILE_SEARCH</name></expr>:</case>
<case>case <expr><name>FILE_DEFAULT</name></expr>:</case>
<case>case <expr><name>FILE_INDIRECT</name></expr>:</case>
<case>case <expr><name>FILE_NAME</name></expr>:</case>
<case>case <expr><name>FILE_USE</name></expr>:</case>
<case>case <expr><name>FILE_CLEAR</name></expr>:</case>
<case>case <expr><name>FILE_DER</name></expr>:</case>
<case>case <expr><name>FILE_GUID</name></expr>:</case>
<break>break;</break>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAGIC_CHECK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>file_magwarn</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"cannot happen: m-&gt;type=%d\n"</literal></expr></argument>,
<argument><expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>FILE_BADSIZE</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>private</name> <name>int</name></type>
<name>string_modifier_check</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>magic</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAGIC_CHECK</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>FILE_REGEX</name> <operator>||</operator> <operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>&amp;</operator> <name>REGEX_LINE_COUNT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>FILE_PSTRING</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>&amp;</operator> <name>PSTRING_LEN</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>file_magwarn</name><argument_list>(<argument><expr><name>ms</name></expr></argument>,
<argument><expr><literal type="string">"'/BHhLl' modifiers are only allowed for pascal strings\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FILE_BESTRING16</name></expr>:</case>
<case>case <expr><name>FILE_LESTRING16</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>file_magwarn</name><argument_list>(<argument><expr><name>ms</name></expr></argument>,
<argument><expr><literal type="string">"no modifiers allowed for 16-bit strings\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_STRING</name></expr>:</case>
<case>case <expr><name>FILE_PSTRING</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>&amp;</operator> <name>REGEX_OFFSET_START</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>file_magwarn</name><argument_list>(<argument><expr><name>ms</name></expr></argument>,
<argument><expr><literal type="string">"'/%c' only allowed on regex and search\n"</literal></expr></argument>,
<argument><expr><name>CHAR_REGEX_OFFSET_START</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_SEARCH</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>str_range</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>file_magwarn</name><argument_list>(<argument><expr><name>ms</name></expr></argument>,
<argument><expr><literal type="string">"missing range; defaulting to %d\n"</literal></expr></argument>,
<argument><expr><name>STRING_DEFAULT_RANGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>str_range</name></name> <operator>=</operator> <name>STRING_DEFAULT_RANGE</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>FILE_REGEX</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>&amp;</operator> <name>STRING_COMPACT_WHITESPACE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>file_magwarn</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"'/%c' not allowed on regex\n"</literal></expr></argument>,
<argument><expr><name>CHAR_COMPACT_WHITESPACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>&amp;</operator> <name>STRING_COMPACT_OPTIONAL_WHITESPACE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>file_magwarn</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"'/%c' not allowed on regex\n"</literal></expr></argument>,
<argument><expr><name>CHAR_COMPACT_OPTIONAL_WHITESPACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>file_magwarn</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"coding error: m-&gt;type=%d\n"</literal></expr></argument>,
<argument><expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>private</name> <name>int</name></type>
<name>get_op</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'&amp;'</literal></expr>:</case>
<return>return <expr><name>FILE_OPAND</name></expr>;</return>
<case>case <expr><literal type="char">'|'</literal></expr>:</case>
<return>return <expr><name>FILE_OPOR</name></expr>;</return>
<case>case <expr><literal type="char">'^'</literal></expr>:</case>
<return>return <expr><name>FILE_OPXOR</name></expr>;</return>
<case>case <expr><literal type="char">'+'</literal></expr>:</case>
<return>return <expr><name>FILE_OPADD</name></expr>;</return>
<case>case <expr><literal type="char">'-'</literal></expr>:</case>
<return>return <expr><name>FILE_OPMINUS</name></expr>;</return>
<case>case <expr><literal type="char">'*'</literal></expr>:</case>
<return>return <expr><name>FILE_OPMULTIPLY</name></expr>;</return>
<case>case <expr><literal type="char">'/'</literal></expr>:</case>
<return>return <expr><name>FILE_OPDIVIDE</name></expr>;</return>
<case>case <expr><literal type="char">'%'</literal></expr>:</case>
<return>return <expr><name>FILE_OPMODULO</name></expr>;</return>
<default>default:</default>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_CONDITIONALS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>private</name> <name>int</name></type>
<name>get_cond</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<struct><specifier>static</specifier> <specifier>const</specifier> struct <name>cond_tbl_s</name> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cond</name></decl>;</decl_stmt>
}</block> <decl><name><name>cond_tbl</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"if"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>COND_IF</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"elif"</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>COND_ELIF</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">"else"</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>COND_ELSE</name></expr> }</block></expr>,
<expr><block>{ <expr><literal type="string">""</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>COND_NONE</name></expr> }</block></expr>,
}</block></expr></init></decl>;</struct>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cond_tbl_s</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>cond_tbl</name></expr>;</init> <condition><expr><name><name>p</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>isspace</name><argument_list>(<argument><expr><macro><name>CAST</name><argument_list>(<argument>unsigned char</argument>, <argument>l[p-&gt;len]</argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>t</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>t</name> <operator>=</operator> <name>l</name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name><name>p</name><operator>-&gt;</operator><name>cond</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>private</name> <name>int</name></type>
<name>check_cond</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cond</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>cont_level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>last_cond</name></decl>;</decl_stmt>
<expr_stmt><expr><name>last_cond</name> <operator>=</operator> <name><name>ms</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>li</name><index>[<expr><name>cont_level</name></expr>]</index></name><operator>.</operator><name>last_cond</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>cond</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>COND_IF</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>last_cond</name> <operator>!=</operator> <name>COND_NONE</name> <operator>&amp;&amp;</operator> <name>last_cond</name> <operator>!=</operator> <name>COND_ELIF</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAGIC_CHECK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>file_magwarn</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"syntax error: `if'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>last_cond</name> <operator>=</operator> <name>COND_IF</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>COND_ELIF</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>last_cond</name> <operator>!=</operator> <name>COND_IF</name> <operator>&amp;&amp;</operator> <name>last_cond</name> <operator>!=</operator> <name>COND_ELIF</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAGIC_CHECK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>file_magwarn</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"syntax error: `elif'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>last_cond</name> <operator>=</operator> <name>COND_ELIF</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>COND_ELSE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>last_cond</name> <operator>!=</operator> <name>COND_IF</name> <operator>&amp;&amp;</operator> <name>last_cond</name> <operator>!=</operator> <name>COND_ELIF</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAGIC_CHECK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>file_magwarn</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"syntax error: `else'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>last_cond</name> <operator>=</operator> <name>COND_NONE</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>COND_NONE</name></expr>:</case>
<expr_stmt><expr><name>last_cond</name> <operator>=</operator> <name>COND_NONE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>li</name><index>[<expr><name>cont_level</name></expr>]</index></name><operator>.</operator><name>last_cond</name> <operator>=</operator> <name>last_cond</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>private</name> <name>int</name></type>
<name>parse_indirect_modifier</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>magic</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>lp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><operator>*</operator><name>lp</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><macro><name>CAST</name><argument_list>(<argument>unsigned char</argument>, <argument>*++l</argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<switch>switch <condition>(<expr><operator>*</operator><name>l</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>CHAR_INDIRECT_RELATIVE</name></expr>:</case>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>|=</operator> <name>INDIRECT_RELATIVE</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAGIC_CHECK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>file_magwarn</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"indirect modifier `%c' "</literal>
<literal type="string">"invalid"</literal></expr></argument>, <argument><expr><operator>*</operator><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>lp</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch></block_content></block></while>
<expr_stmt><expr><operator>*</operator><name>lp</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>private</name> <name>void</name></type>
<name>parse_op_modifier</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>magic</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>lp</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><operator>*</operator><name>lp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>++</operator><name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>mask_op</name></name> <operator>|=</operator> <name>op</name></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><call><name>strtoull</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>num_mask</name></name> <operator>=</operator> <call><name>file_signextend</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eatsize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>lp</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>private</name> <name>int</name></type>
<name>parse_string_modifier</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>magic</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>lp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><operator>*</operator><name>lp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>have_range</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><macro><name>CAST</name><argument_list>(<argument>unsigned char</argument>, <argument>*++l</argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><operator>*</operator><name>l</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'0'</literal></expr>:</case> <case>case <expr><literal type="char">'1'</literal></expr>:</case> <case>case <expr><literal type="char">'2'</literal></expr>:</case>
<case>case <expr><literal type="char">'3'</literal></expr>:</case> <case>case <expr><literal type="char">'4'</literal></expr>:</case> <case>case <expr><literal type="char">'5'</literal></expr>:</case>
<case>case <expr><literal type="char">'6'</literal></expr>:</case> <case>case <expr><literal type="char">'7'</literal></expr>:</case> <case>case <expr><literal type="char">'8'</literal></expr>:</case>
<case>case <expr><literal type="char">'9'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>have_range</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAGIC_CHECK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>file_magwarn</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"multiple ranges"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>have_range</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>str_range</name></name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><call><name>strtoul</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>str_range</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>file_magwarn</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"zero range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name>t</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CHAR_COMPACT_WHITESPACE</name></expr>:</case>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>|=</operator> <name>STRING_COMPACT_WHITESPACE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CHAR_COMPACT_OPTIONAL_WHITESPACE</name></expr>:</case>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>|=</operator> <name>STRING_COMPACT_OPTIONAL_WHITESPACE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CHAR_IGNORE_LOWERCASE</name></expr>:</case>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>|=</operator> <name>STRING_IGNORE_LOWERCASE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CHAR_IGNORE_UPPERCASE</name></expr>:</case>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>|=</operator> <name>STRING_IGNORE_UPPERCASE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CHAR_REGEX_OFFSET_START</name></expr>:</case>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>|=</operator> <name>REGEX_OFFSET_START</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CHAR_BINTEST</name></expr>:</case>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>|=</operator> <name>STRING_BINTEST</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CHAR_TEXTTEST</name></expr>:</case>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>|=</operator> <name>STRING_TEXTTEST</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CHAR_TRIM</name></expr>:</case>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>|=</operator> <name>STRING_TRIM</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CHAR_FULL_WORD</name></expr>:</case>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>|=</operator> <name>STRING_FULL_WORD</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CHAR_PSTRING_1_LE</name></expr>:</case>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_LENGTH</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>m-&gt;str_flags = (m-&gt;str_flags &amp; ~PSTRING_LEN) | (a)</cpp:value></cpp:define>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>FILE_PSTRING</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bad</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>SET_LENGTH</name><argument_list>(<argument><expr><name>PSTRING_1_LE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CHAR_PSTRING_2_BE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>FILE_PSTRING</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bad</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>SET_LENGTH</name><argument_list>(<argument><expr><name>PSTRING_2_BE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CHAR_PSTRING_2_LE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>FILE_PSTRING</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bad</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>SET_LENGTH</name><argument_list>(<argument><expr><name>PSTRING_2_LE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CHAR_PSTRING_4_BE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>FILE_PSTRING</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bad</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>SET_LENGTH</name><argument_list>(<argument><expr><name>PSTRING_4_BE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CHAR_PSTRING_4_LE</name></expr>:</case>
<switch>switch <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FILE_PSTRING</name></expr>:</case>
<case>case <expr><name>FILE_REGEX</name></expr>:</case>
<break>break;</break>
<default>default:</default>
<goto>goto <name>bad</name>;</goto>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>SET_LENGTH</name><argument_list>(<argument><expr><name>PSTRING_4_LE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>CHAR_PSTRING_LENGTH_INCLUDES_ITSELF</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>FILE_PSTRING</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>bad</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>|=</operator> <name>PSTRING_LENGTH_INCLUDES_ITSELF</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<label><name>bad</name>:</label>
<if_stmt><if>if <condition>(<expr><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAGIC_CHECK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>file_magwarn</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"string modifier `%c' "</literal>
<literal type="string">"invalid"</literal></expr></argument>, <argument><expr><operator>*</operator><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>l</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><macro><name>CAST</name><argument_list>(<argument>unsigned char</argument>, <argument>l[<literal type="number">2</literal>]</argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><call><name>string_modifier_check</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>lp</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>out</name>:</label>
<expr_stmt><expr><operator>*</operator><name>lp</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>private</name> <name>int</name></type>
<name>parse</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>magic_entry</name></name> <modifier>*</modifier></type><name>me</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>lineno</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>action</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_CONDITIONALS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>last_cont_level</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>magic</name></name> <modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><name>line</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>op</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cont_level</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>diff</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cont_level</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>




<while>while <condition>(<expr><operator>*</operator><name>l</name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cont_level</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_CONDITIONALS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>cont_level</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>cont_level</name> <operator>&gt;</operator> <name>last_cont_level</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>file_check_mem</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>cont_level</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>last_cont_level</name> <operator>=</operator> <name>cont_level</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>cont_level</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>me</name><operator>-&gt;</operator><name>mp</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>file_magerror</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"No current entry for continuation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>me</name><operator>-&gt;</operator><name>cont_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>file_magerror</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"Continuations present with 0 count"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>&amp;</operator><name><name>me</name><operator>-&gt;</operator><name>mp</name><index>[<expr><name><name>me</name><operator>-&gt;</operator><name>cont_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>diff</name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>int32_t</name></expr></argument>, <argument><expr><name>cont_level</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>int32_t</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>cont_level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>file_magwarn</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"New continuation level %u is more "</literal>
<literal type="string">"than one larger than current level %u"</literal></expr></argument>, <argument><expr><name>cont_level</name></expr></argument>,
<argument><expr><name><name>m</name><operator>-&gt;</operator><name>cont_level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>me</name><operator>-&gt;</operator><name>cont_count</name></name> <operator>==</operator> <name><name>me</name><operator>-&gt;</operator><name>max_count</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>magic</name></name> <modifier>*</modifier></type><name>nm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>cnt</name> <init>= <expr><name><name>me</name><operator>-&gt;</operator><name>max_count</name></name> <operator>+</operator> <name>ALLOC_CHUNK</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>nm</name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr>struct <name>magic</name> <operator>*</operator></expr></argument>, <argument><expr><call><name>realloc</name><argument_list>(<argument><expr><name><name>me</name><operator>-&gt;</operator><name>mp</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>nm</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>cnt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>file_oomem</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>nm</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>me</name><operator>-&gt;</operator><name>mp</name></name> <operator>=</operator> <name>nm</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>me</name><operator>-&gt;</operator><name>max_count</name></name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>&amp;</operator><name><name>me</name><operator>-&gt;</operator><name>mp</name><index>[<expr><name><name>me</name><operator>-&gt;</operator><name>cont_count</name></name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>memset</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>m</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>cont_level</name></name> <operator>=</operator> <name>cont_level</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name>len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>m</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>ALLOC_CHUNK</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>me</name><operator>-&gt;</operator><name>mp</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>m</name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr>struct <name>magic</name> <operator>*</operator></expr></argument>, <argument><expr><call><name>malloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>file_oomem</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>me</name><operator>-&gt;</operator><name>mp</name></name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>me</name><operator>-&gt;</operator><name>max_count</name></name> <operator>=</operator> <name>ALLOC_CHUNK</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>memset</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>m</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>factor_op</name></name> <operator>=</operator> <name>FILE_FACTOR_OP_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>cont_level</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>me</name><operator>-&gt;</operator><name>cont_count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>lineno</name></name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>l</name> <operator>==</operator> <literal type="char">'&amp;'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>OFFADD</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>l</name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>INDIR</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>OFFADD</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <operator>~</operator><name>OFFADD</name><operator>)</operator> <operator>|</operator> <name>INDIROFFADD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>l</name> <operator>==</operator> <literal type="char">'&amp;'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>OFFADD</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>cont_level</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <operator>(</operator><name>OFFADD</name> <operator>|</operator> <name>INDIROFFADD</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAGIC_CHECK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>file_magwarn</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"relative offset at level 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>l</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>OFFNEGATIVE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>int32_t</name></expr></argument>, <argument><expr><call><name>strtol</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <name>t</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAGIC_CHECK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>file_magwarn</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"offset `%s' invalid"</literal></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>INDIR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>in_type</name></name> <operator>=</operator> <name>FILE_LONG</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>in_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>in_op</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><operator>*</operator><name>l</name> <operator>==</operator> <literal type="char">'.'</literal> <operator>||</operator> <operator>*</operator><name>l</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>l</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>in_op</name></name> <operator>|=</operator> <name>FILE_OPSIGNED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt>
<switch>switch <condition>(<expr><operator>*</operator><name>l</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'l'</literal></expr>:</case>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>in_type</name></name> <operator>=</operator> <name>FILE_LELONG</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'L'</literal></expr>:</case>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>in_type</name></name> <operator>=</operator> <name>FILE_BELONG</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'m'</literal></expr>:</case>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>in_type</name></name> <operator>=</operator> <name>FILE_MELONG</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'h'</literal></expr>:</case>
<case>case <expr><literal type="char">'s'</literal></expr>:</case>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>in_type</name></name> <operator>=</operator> <name>FILE_LESHORT</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'H'</literal></expr>:</case>
<case>case <expr><literal type="char">'S'</literal></expr>:</case>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>in_type</name></name> <operator>=</operator> <name>FILE_BESHORT</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'c'</literal></expr>:</case>
<case>case <expr><literal type="char">'b'</literal></expr>:</case>
<case>case <expr><literal type="char">'C'</literal></expr>:</case>
<case>case <expr><literal type="char">'B'</literal></expr>:</case>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>in_type</name></name> <operator>=</operator> <name>FILE_BYTE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'e'</literal></expr>:</case>
<case>case <expr><literal type="char">'f'</literal></expr>:</case>
<case>case <expr><literal type="char">'g'</literal></expr>:</case>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>in_type</name></name> <operator>=</operator> <name>FILE_LEDOUBLE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'E'</literal></expr>:</case>
<case>case <expr><literal type="char">'F'</literal></expr>:</case>
<case>case <expr><literal type="char">'G'</literal></expr>:</case>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>in_type</name></name> <operator>=</operator> <name>FILE_BEDOUBLE</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'i'</literal></expr>:</case>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>in_type</name></name> <operator>=</operator> <name>FILE_LEID3</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'I'</literal></expr>:</case>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>in_type</name></name> <operator>=</operator> <name>FILE_BEID3</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'q'</literal></expr>:</case>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>in_type</name></name> <operator>=</operator> <name>FILE_LEQUAD</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'Q'</literal></expr>:</case>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>in_type</name></name> <operator>=</operator> <name>FILE_BEQUAD</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAGIC_CHECK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>file_magwarn</name><argument_list>(<argument><expr><name>ms</name></expr></argument>,
<argument><expr><literal type="string">"indirect offset type `%c' invalid"</literal></expr></argument>,
<argument><expr><operator>*</operator><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>l</name> <operator>==</operator> <literal type="char">'~'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>in_op</name></name> <operator>|=</operator> <name>FILE_OPINVERSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>op</name> <operator>=</operator> <call><name>get_op</name><argument_list>(<argument><expr><operator>*</operator><name>l</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>in_op</name></name> <operator>|=</operator> <name>op</name></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>l</name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>in_op</name></name> <operator>|=</operator> <name>FILE_OPINDIRECT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><macro><name>CAST</name><argument_list>(<argument>unsigned char</argument>, <argument>*l</argument>)</argument_list></macro></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><name>l</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>in_offset</name></name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>int32_t</name></expr></argument>, <argument><expr><call><name>strtol</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <name>t</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAGIC_CHECK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>file_magwarn</name><argument_list>(<argument><expr><name>ms</name></expr></argument>,
<argument><expr><literal type="string">"in_offset `%s' invalid"</literal></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>l</name><operator>++</operator> <operator>!=</operator> <literal type="char">')'</literal> <operator>||</operator>
<operator>(</operator><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>in_op</name></name> <operator>&amp;</operator> <name>FILE_OPINDIRECT</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>*</operator><name>l</name><operator>++</operator> <operator>!=</operator> <literal type="char">')'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAGIC_CHECK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>file_magwarn</name><argument_list>(<argument><expr><name>ms</name></expr></argument>,
<argument><expr><literal type="string">"missing ')' in indirect offset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>EATAB</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_CONDITIONALS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>cond</name></name> <operator>=</operator> <call><name>get_cond</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>check_cond</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>, <argument><expr><name>cont_level</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>EATAB</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<if_stmt><if>if <condition>(<expr><operator>*</operator><name>l</name> <operator>==</operator> <literal type="char">'u'</literal></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>get_type</name><argument_list>(<argument><expr><name>type_tbl</name></expr></argument>, <argument><expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>FILE_INVALID</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>get_standard_integer_type</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>FILE_INVALID</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>UNSIGNED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>






<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>get_type</name><argument_list>(<argument><expr><name>type_tbl</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>FILE_INVALID</name></expr>)</condition> <block>{<block_content>





<if_stmt><if>if <condition>(<expr><operator>*</operator><name>l</name> <operator>==</operator> <literal type="char">'d'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>get_standard_integer_type</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>l</name> <operator>==</operator> <literal type="char">'s'</literal>
<operator>&amp;&amp;</operator> <operator>!</operator><call><name>isalpha</name><argument_list>(<argument><expr><macro><name>CAST</name><argument_list>(<argument>unsigned char</argument>, <argument>l[<literal type="number">1</literal>]</argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>FILE_STRING</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>l</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>FILE_INVALID</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>get_type</name><argument_list>(<argument><expr><name>special_tbl</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>FILE_INVALID</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAGIC_CHECK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>file_magwarn</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"type `%s' invalid"</literal></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>FILE_NAME</name> <operator>&amp;&amp;</operator> <name>cont_level</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAGIC_CHECK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>file_magwarn</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"`name%s' entries can only be "</literal>
<literal type="string">"declared at top level"</literal></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>mask_op</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>l</name> <operator>==</operator> <literal type="char">'~'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_STRING</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>mask_op</name></name> <operator>|=</operator> <name>FILE_OPINVERSE</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAGIC_CHECK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>file_magwarn</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"'~' invalid for string types"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>l</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>str_range</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>=</operator> <ternary><condition><expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>FILE_PSTRING</name></expr> ?</condition><then> <expr><name>PSTRING_1_LE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>op</name> <operator>=</operator> <call><name>get_op</name><argument_list>(<argument><expr><operator>*</operator><name>l</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>IS_STRING</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>op</name> <operator>!=</operator> <name>FILE_OPDIVIDE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAGIC_CHECK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>file_magwarn</name><argument_list>(<argument><expr><name>ms</name></expr></argument>,
<argument><expr><literal type="string">"invalid string/indirect op: "</literal>
<literal type="string">"`%c'"</literal></expr></argument>, <argument><expr><operator>*</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>FILE_INDIRECT</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>parse_indirect_modifier</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>parse_string_modifier</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>parse_op_modifier</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name>EATAB</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><operator>*</operator><name>l</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'&gt;'</literal></expr>:</case>
<case>case <expr><literal type="char">'&lt;'</literal></expr>:</case>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>reln</name></name> <operator>=</operator> <operator>*</operator><name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>l</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>l</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAGIC_CHECK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>file_magwarn</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"%c= not supported"</literal></expr></argument>,
<argument><expr><name><name>m</name><operator>-&gt;</operator><name>reln</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>++</operator><name>l</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'&amp;'</literal></expr>:</case>
<case>case <expr><literal type="char">'^'</literal></expr>:</case>
<case>case <expr><literal type="char">'='</literal></expr>:</case>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>reln</name></name> <operator>=</operator> <operator>*</operator><name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>l</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>l</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>l</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'!'</literal></expr>:</case>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>reln</name></name> <operator>=</operator> <operator>*</operator><name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>l</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>reln</name></name> <operator>=</operator> <literal type="char">'='</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>l</name> <operator>==</operator> <literal type="char">'x'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><call><name>isascii</name><argument_list>(<argument><expr><macro><name>CAST</name><argument_list>(<argument>unsigned char</argument>, <argument>l[<literal type="number">1</literal>]</argument>)</argument_list></macro></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>isspace</name><argument_list>(<argument><expr><macro><name>CAST</name><argument_list>(<argument>unsigned char</argument>, <argument>l[<literal type="number">1</literal>]</argument>)</argument_list></macro></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>!</operator><name><name>l</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>reln</name></name> <operator>=</operator> <operator>*</operator><name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>l</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>



<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>reln</name></name> <operator>!=</operator> <literal type="char">'x'</literal> <operator>&amp;&amp;</operator> <call><name>getvalue</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>, <argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>










<expr_stmt><expr><name>EATAB</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>l</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\b'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>NOSPACE</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>l</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>l</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'b'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>NOSPACE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>desc</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>l</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr/>)</control><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></for>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>desc</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAGIC_CHECK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>file_magwarn</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"description `%s' truncated"</literal></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAGIC_CHECK</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>check_format</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>COMPILE_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>action</name> <operator>==</operator> <name>FILE_CHECK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>file_mdump</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>mimetype</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<decl_stmt><decl><type><name>private</name> <name>int</name></type>
<name>parse_strength</name><argument_list>(<argument><expr>struct <name>magic_set</name> <operator>*</operator><name>ms</name></expr></argument>, <argument><expr>struct <name>magic_entry</name> <operator>*</operator><name>me</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>line</name></expr></argument>,
<argument><expr><name>size_t</name> <name>len</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>__unused__</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><name>line</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>el</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>factor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>magic</name></name> <modifier>*</modifier></type><name>m</name> <init>= <expr><operator>&amp;</operator><name><name>me</name><operator>-&gt;</operator><name>mp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>factor_op</name></name> <operator>!=</operator> <name>FILE_FACTOR_OP_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>file_magwarn</name><argument_list>(<argument><expr><name>ms</name></expr></argument>,
<argument><expr><literal type="string">"Current entry already has a strength type: %c %d"</literal></expr></argument>,
<argument><expr><name><name>m</name><operator>-&gt;</operator><name>factor_op</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>factor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>FILE_NAME</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>file_magwarn</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"%s: Strength setting is not supported in "</literal>
<literal type="string">"\"name\" magic entries"</literal></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>EATAB</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><operator>*</operator><name>l</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FILE_FACTOR_OP_NONE</name></expr>:</case>
<case>case <expr><name>FILE_FACTOR_OP_PLUS</name></expr>:</case>
<case>case <expr><name>FILE_FACTOR_OP_MINUS</name></expr>:</case>
<case>case <expr><name>FILE_FACTOR_OP_TIMES</name></expr>:</case>
<case>case <expr><name>FILE_FACTOR_OP_DIV</name></expr>:</case>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>factor_op</name></name> <operator>=</operator> <operator>*</operator><name>l</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>file_magwarn</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"Unknown factor op `%c'"</literal></expr></argument>, <argument><expr><operator>*</operator><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><name>EATAB</name></expr>;</expr_stmt>
<expr_stmt><expr><name>factor</name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>el</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>factor</name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>file_magwarn</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"Too large factor `%lu'"</literal></expr></argument>, <argument><expr><name>factor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>el</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><macro><name>CAST</name><argument_list>(<argument>unsigned char</argument>, <argument>*el</argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>file_magwarn</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"Bad factor `%s'"</literal></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>factor</name></name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>factor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>factor</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>m</name><operator>-&gt;</operator><name>factor_op</name></name> <operator>==</operator> <name>FILE_FACTOR_OP_DIV</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>file_magwarn</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"Cannot have factor op `%c' and factor %u"</literal></expr></argument>,
<argument><expr><name><name>m</name><operator>-&gt;</operator><name>factor_op</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>factor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>out</name>:</label>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>factor_op</name></name> <operator>=</operator> <name>FILE_FACTOR_OP_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>factor</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>private</name> <name>int</name></type>
<name>goodchar</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>extra</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><call><name>isascii</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isalnum</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>extra</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>private</name> <name>int</name></type>
<name>parse_extra</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>magic_entry</name></name> <modifier>*</modifier></type><name>me</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>llen</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>extra</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>nt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><name>line</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>magic</name></name> <modifier>*</modifier></type><name>m</name> <init>= <expr><operator>&amp;</operator><name><name>me</name><operator>-&gt;</operator><name>mp</name><index>[<expr><ternary><condition><expr><name><name>me</name><operator>-&gt;</operator><name>cont_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>me</name><operator>-&gt;</operator><name>cont_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>CAST</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><call><name>CAST</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <name>off</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <ternary><condition><expr><name>nt</name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>len</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>file_magwarn</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"Current entry already has a %s type "</literal>
<literal type="string">"`%.*s', new type `%s'"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>CAST</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>m</name><operator>-&gt;</operator><name>desc</name></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>file_magwarn</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"Current entry does not yet have a "</literal>
<literal type="string">"description for adding a %s type"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>EATAB</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>*</operator><name>l</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>llen</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <call><name>goodchar</name><argument_list>(<argument><expr><operator>*</operator><name>l</name></expr></argument>, <argument><expr><name>extra</name></expr></argument>)</argument_list></call></expr>;</condition>
<incr><expr><name><name>buf</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>l</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>len</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>l</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>nt</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAGIC_CHECK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>file_magwarn</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"%s type `%s' truncated %"</literal>
<name>SIZE_T_FORMAT</name> <literal type="string">"u"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><macro><name>CAST</name><argument_list>(<argument>unsigned char</argument>, <argument>*l</argument>)</argument_list></macro></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>goodchar</name><argument_list>(<argument><expr><operator>*</operator><name>l</name></expr></argument>, <argument><expr><name>extra</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>file_magwarn</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"%s type `%s' has bad char '%c'"</literal></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><operator>*</operator><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nt</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>file_magerror</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"Bad magic entry '%s'"</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>





<function><type><name>private</name> <name>int</name></type>
<name>parse_apple</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>magic_entry</name></name> <modifier>*</modifier></type><name>me</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>magic</name></name> <modifier>*</modifier></type><name>m</name> <init>= <expr><operator>&amp;</operator><name><name>me</name><operator>-&gt;</operator><name>mp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>parse_extra</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>me</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>,
<argument><expr><call><name>CAST</name><argument_list>(<argument><expr><name>off_t</name></expr></argument>, <argument><expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>magic</name></expr></argument>, <argument><expr><name>apple</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>apple</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"APPLE"</literal></expr></argument>, <argument><expr><literal type="string">"!+-./?"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>




<function><type><name>private</name> <name>int</name></type>
<name>parse_ext</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>magic_entry</name></name> <modifier>*</modifier></type><name>me</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>magic</name></name> <modifier>*</modifier></type><name>m</name> <init>= <expr><operator>&amp;</operator><name><name>me</name><operator>-&gt;</operator><name>mp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>parse_extra</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>me</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>,
<argument><expr><call><name>CAST</name><argument_list>(<argument><expr><name>off_t</name></expr></argument>, <argument><expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>magic</name></expr></argument>, <argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>ext</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"EXTENSION"</literal></expr></argument>, <argument><expr><literal type="string">",!+-/@?_$&amp;"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>





<function><type><name>private</name> <name>int</name></type>
<name>parse_mime</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>magic_entry</name></name> <modifier>*</modifier></type><name>me</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>magic</name></name> <modifier>*</modifier></type><name>m</name> <init>= <expr><operator>&amp;</operator><name><name>me</name><operator>-&gt;</operator><name>mp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>parse_extra</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>me</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>,
<argument><expr><call><name>CAST</name><argument_list>(<argument><expr><name>off_t</name></expr></argument>, <argument><expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>magic</name></expr></argument>, <argument><expr><name>mimetype</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>mimetype</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"MIME"</literal></expr></argument>, <argument><expr><literal type="string">"+-/.$?:{}"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>private</name> <name>int</name></type>
<name>check_format_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>estr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>quad</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>cnt</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>estr</name> <operator>=</operator> <literal type="string">"missing format spec"</literal></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>file_formats</name><index>[<expr><name>type</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FILE_FMT_QUAD</name></expr>:</case>
<expr_stmt><expr><name>quad</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<case>case <expr><name>FILE_FMT_NUM</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>quad</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FILE_BYTE</name></expr>:</case>
<expr_stmt><expr><name>h</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_SHORT</name></expr>:</case>
<case>case <expr><name>FILE_BESHORT</name></expr>:</case>
<case>case <expr><name>FILE_LESHORT</name></expr>:</case>
<expr_stmt><expr><name>h</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_LONG</name></expr>:</case>
<case>case <expr><name>FILE_BELONG</name></expr>:</case>
<case>case <expr><name>FILE_LELONG</name></expr>:</case>
<case>case <expr><name>FILE_MELONG</name></expr>:</case>
<case>case <expr><name>FILE_LEID3</name></expr>:</case>
<case>case <expr><name>FILE_BEID3</name></expr>:</case>
<case>case <expr><name>FILE_INDIRECT</name></expr>:</case>
<expr_stmt><expr><name>h</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>h</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<while>while <condition>(<expr><operator>*</operator><name>ptr</name> <operator>&amp;&amp;</operator> <call><name>strchr</name><argument_list>(<argument><expr><literal type="string">"-.#"</literal></expr></argument>, <argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECKLEN</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>do { for (len = cnt = 0; isdigit(CAST(unsigned char, *ptr)); ptr++, cnt++) len = len * 10 + (*ptr - '0'); if (cnt &gt; 5 || len &gt; 1024) goto toolong; } while (0)</cpp:value></cpp:define>






<expr_stmt><expr><call><name>CHECKLEN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>CHECKLEN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>quad</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>!=</operator> <literal type="char">'l'</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>invalid</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>!=</operator> <literal type="char">'l'</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>invalid</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><operator>*</operator><name>ptr</name><operator>++</operator></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STRICT_FORMAT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<case>case <expr><literal type="char">'l'</literal></expr>:</case>
<switch>switch <condition>(<expr><operator>*</operator><name>ptr</name><operator>++</operator></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'i'</literal></expr>:</case>
<case>case <expr><literal type="char">'d'</literal></expr>:</case>
<case>case <expr><literal type="char">'u'</literal></expr>:</case>
<case>case <expr><literal type="char">'o'</literal></expr>:</case>
<case>case <expr><literal type="char">'x'</literal></expr>:</case>
<case>case <expr><literal type="char">'X'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>h</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<default>default:</default>
<goto>goto <name>invalid</name>;</goto>
</block_content>}</block></switch>





<case>case <expr><literal type="char">'h'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>h</name><operator>--</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>invalid</name>;</goto></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><operator>*</operator><name>ptr</name><operator>++</operator></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'h'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>h</name><operator>--</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>invalid</name>;</goto></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><operator>*</operator><name>ptr</name><operator>++</operator></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'i'</literal></expr>:</case>
<case>case <expr><literal type="char">'d'</literal></expr>:</case>
<case>case <expr><literal type="char">'u'</literal></expr>:</case>
<case>case <expr><literal type="char">'o'</literal></expr>:</case>
<case>case <expr><literal type="char">'x'</literal></expr>:</case>
<case>case <expr><literal type="char">'X'</literal></expr>:</case>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<default>default:</default>
<goto>goto <name>invalid</name>;</goto>
</block_content>}</block></switch>
<case>case <expr><literal type="char">'i'</literal></expr>:</case>
<case>case <expr><literal type="char">'d'</literal></expr>:</case>
<case>case <expr><literal type="char">'u'</literal></expr>:</case>
<case>case <expr><literal type="char">'o'</literal></expr>:</case>
<case>case <expr><literal type="char">'x'</literal></expr>:</case>
<case>case <expr><literal type="char">'X'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>h</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<default>default:</default>
<goto>goto <name>invalid</name>;</goto>
</block_content>}</block></switch>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><literal type="char">'c'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>h</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<goto>goto <name>invalid</name>;</goto>
<case>case <expr><literal type="char">'i'</literal></expr>:</case>
<case>case <expr><literal type="char">'d'</literal></expr>:</case>
<case>case <expr><literal type="char">'u'</literal></expr>:</case>
<case>case <expr><literal type="char">'o'</literal></expr>:</case>
<case>case <expr><literal type="char">'x'</literal></expr>:</case>
<case>case <expr><literal type="char">'X'</literal></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>STRICT_FORMAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>h</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<default>default:</default>
<goto>goto <name>invalid</name>;</goto>
</block_content>}</block></switch>

<case>case <expr><name>FILE_FMT_FLOAT</name></expr>:</case>
<case>case <expr><name>FILE_FMT_DOUBLE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>CHECKLEN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>CHECKLEN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><operator>*</operator><name>ptr</name><operator>++</operator></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'e'</literal></expr>:</case>
<case>case <expr><literal type="char">'E'</literal></expr>:</case>
<case>case <expr><literal type="char">'f'</literal></expr>:</case>
<case>case <expr><literal type="char">'F'</literal></expr>:</case>
<case>case <expr><literal type="char">'g'</literal></expr>:</case>
<case>case <expr><literal type="char">'G'</literal></expr>:</case>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<default>default:</default>
<goto>goto <name>invalid</name>;</goto>
</block_content>}</block></switch>


<case>case <expr><name>FILE_FMT_STR</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><macro><name>CAST</name><argument_list>(<argument>unsigned char</argument>, <argument>*ptr</argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><macro><name>CAST</name><argument_list>(<argument>unsigned char</argument> , <argument>*ptr</argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><operator>*</operator><name>ptr</name><operator>++</operator></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'s'</literal></expr>:</case>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<default>default:</default>
<goto>goto <name>invalid</name>;</goto>
</block_content>}</block></switch>

<default>default:</default>

<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<label><name>invalid</name>:</label>
<expr_stmt><expr><operator>*</operator><name>estr</name> <operator>=</operator> <literal type="string">"not valid"</literal></expr>;</expr_stmt>
<label><name>toolong</name>:</label>
<expr_stmt><expr><operator>*</operator><name>estr</name> <operator>=</operator> <literal type="string">"too long"</literal></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>





<function><type><name>private</name> <name>int</name></type>
<name>check_format</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>magic</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>estr</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ptr</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>desc</name></name></expr>;</init> <condition><expr><operator>*</operator><name>ptr</name></expr>;</condition> <incr><expr><name>ptr</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>file_nformats</name> <operator>==</operator> <name>file_nnames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name> <operator>&gt;=</operator> <name>file_nformats</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>file_magwarn</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"Internal error inconsistency between "</literal>
<literal type="string">"m-&gt;type and format strings"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>file_formats</name><index>[<expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name> <operator>==</operator> <name>FILE_FMT_NONE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>file_magwarn</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"No format string for `%s' with description "</literal>
<literal type="string">"`%s'"</literal></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>, <argument><expr><name><name>file_names</name><index>[<expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>check_format_type</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>estr</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><call><name>file_magwarn</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"Printf format is %s for type "</literal>
<literal type="string">"`%s' in description `%s'"</literal></expr></argument>, <argument><expr><name>estr</name></expr></argument>,
<argument><expr><name><name>file_names</name><index>[<expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>ptr</name></expr>;</condition> <incr><expr><name>ptr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>file_magwarn</name><argument_list>(<argument><expr><name>ms</name></expr></argument>,
<argument><expr><literal type="string">"Too many format strings (should have at most one) "</literal>
<literal type="string">"for `%s' with description `%s'"</literal></expr></argument>,
<argument><expr><name><name>file_names</name><index>[<expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>






<function><type><name>private</name> <name>int</name></type>
<name>getvalue</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>magic</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>action</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>ull</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FILE_BESTRING16</name></expr>:</case>
<case>case <expr><name>FILE_LESTRING16</name></expr>:</case>
<case>case <expr><name>FILE_STRING</name></expr>:</case>
<case>case <expr><name>FILE_PSTRING</name></expr>:</case>
<case>case <expr><name>FILE_REGEX</name></expr>:</case>
<case>case <expr><name>FILE_SEARCH</name></expr>:</case>
<case>case <expr><name>FILE_NAME</name></expr>:</case>
<case>case <expr><name>FILE_USE</name></expr>:</case>
<case>case <expr><name>FILE_DER</name></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <call><name>getstr</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>action</name> <operator>==</operator> <name>FILE_COMPILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAGIC_CHECK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>file_magwarn</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"cannot get string from `%s'"</literal></expr></argument>,
<argument><expr><name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>FILE_REGEX</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>file_regex_t</name></type> <name>rx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>file_regcomp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rx</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><name>REG_EXTENDED</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAGIC_CHECK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>file_regerror</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rx</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>file_regfree</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name>rc</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>reln</name></name> <operator>==</operator> <literal type="char">'x'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>

<switch>switch <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FILE_FLOAT</name></expr>:</case>
<case>case <expr><name>FILE_BEFLOAT</name></expr>:</case>
<case>case <expr><name>FILE_LEFLOAT</name></expr>:</case>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRTOF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>f</name></name> <operator>=</operator> <call><name>strtof</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>f</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>strtod</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>ep</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><name>FILE_DOUBLE</name></expr>:</case>
<case>case <expr><name>FILE_BEDOUBLE</name></expr>:</case>
<case>case <expr><name>FILE_LEDOUBLE</name></expr>:</case>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>d</name></name> <operator>=</operator> <call><name>strtod</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>ep</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<case>case <expr><name>FILE_GUID</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>file_parse_guid</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>guid</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>+=</operator> <name>FILE_GUID_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<default>default:</default>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ull</name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><call><name>strtoull</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ep</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>q</name></name> <operator>=</operator> <call><name>file_signextend</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>ull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <name>ep</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>file_magwarn</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"Unparsable number `%s'"</literal></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>ts</name> <init>= <expr><call><name>typesize</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ts</name> <operator>==</operator> <name>FILE_BADSIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>file_magwarn</name><argument_list>(<argument><expr><name>ms</name></expr></argument>,
<argument><expr><literal type="string">"Expected numeric type got `%s'"</literal></expr></argument>,
<argument><expr><name><name>type_tbl</name><index>[<expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>q</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</init> <condition><expr><call><name>isspace</name><argument_list>(<argument><expr><macro><name>CAST</name><argument_list>(<argument>unsigned char</argument>, <argument>*q</argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>q</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></for>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>q</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ull</name> <operator>=</operator> <operator>-</operator><call><name>CAST</name><argument_list>(<argument><expr><name>int64_t</name></expr></argument>, <argument><expr><name>ull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><name>ts</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>ull</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0xffULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>ull</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0xffffULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">4</literal></expr>:</case>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>ull</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0xffffffffULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="number">8</literal></expr>:</case>
<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>x</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>file_magwarn</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"Overflow for numeric"</literal>
<literal type="string">" type `%s' value %#"</literal> <name>PRIx64</name></expr></argument>,
<argument><expr><name><name>type_tbl</name><index>[<expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>ull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>ep</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>eatsize</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>







<function><type><name>private</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>getstr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>magic</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>warn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>origs</name> <init>= <expr><name>s</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>s</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>plen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>origp</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pmax</name> <init>= <expr><name>p</name> <operator>+</operator> <name>plen</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>s</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><macro><name>CAST</name><argument_list>(<argument>unsigned char</argument>, <argument>c</argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;=</operator> <name>pmax</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>file_error</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"string too long: `%s'"</literal></expr></argument>, <argument><expr><name>origs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
<switch>switch<condition>(<expr><name>c</name> <operator>=</operator> <operator>*</operator><name>s</name><operator>++</operator></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'\0'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>warn</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>file_magwarn</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"incomplete escape"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>s</name><operator>--</operator></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>

<case>case <expr><literal type="char">'\t'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>warn</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>file_magwarn</name><argument_list>(<argument><expr><name>ms</name></expr></argument>,
<argument><expr><literal type="string">"escaped tab found, use \\t instead"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>warn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<default>default:</default>
<if_stmt><if>if <condition>(<expr><name>warn</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>isprint</name><argument_list>(<argument><expr><macro><name>CAST</name><argument_list>(<argument>unsigned char</argument>, <argument>c</argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><literal type="string">"&lt;&gt;&amp;^=!"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>FILE_REGEX</name> <operator>||</operator>
<call><name>strchr</name><argument_list>(<argument><expr><literal type="string">"[]().*?^$|{}"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call>
<operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>file_magwarn</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"no "</literal>
<literal type="string">"need to escape "</literal>
<literal type="string">"`%c'"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>file_magwarn</name><argument_list>(<argument><expr><name>ms</name></expr></argument>,
<argument><expr><literal type="string">"unknown escape sequence: "</literal>
<literal type="string">"\\%03o"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<case>case <expr><literal type="char">' '</literal></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>




case '\'':
case '"':
case '?':
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><literal type="char">'&gt;'</literal></expr>:</case>
<case>case <expr><literal type="char">'&lt;'</literal></expr>:</case>
<case>case <expr><literal type="char">'&amp;'</literal></expr>:</case>
<case>case <expr><literal type="char">'^'</literal></expr>:</case>
<case>case <expr><literal type="char">'='</literal></expr>:</case>
<case>case <expr><literal type="char">'!'</literal></expr>:</case>

<case>case <expr><literal type="char">'\\'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'a'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'\a'</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'b'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'\b'</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'f'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'\f'</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'n'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'r'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'\r'</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'t'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'\t'</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'v'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'\v'</literal></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><literal type="char">'0'</literal></expr>:</case>
<case>case <expr><literal type="char">'1'</literal></expr>:</case>
<case>case <expr><literal type="char">'2'</literal></expr>:</case>
<case>case <expr><literal type="char">'3'</literal></expr>:</case>
<case>case <expr><literal type="char">'4'</literal></expr>:</case>
<case>case <expr><literal type="char">'5'</literal></expr>:</case>
<case>case <expr><literal type="char">'6'</literal></expr>:</case>
<case>case <expr><literal type="char">'7'</literal></expr>:</case>
<expr_stmt><expr><name>val</name> <operator>=</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>s</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'7'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>c</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>s</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'7'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>c</name><operator>-</operator><literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name>s</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name>s</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>


<case>case <expr><literal type="char">'x'</literal></expr>:</case>
<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="char">'x'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>hextoint</name><argument_list>(<argument><expr><operator>*</operator><name>s</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>hextoint</name><argument_list>(<argument><expr><operator>*</operator><name>s</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name>s</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>--</operator><name>s</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>char</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>--</operator><name>s</name></expr>;</expr_stmt>
<label><name>out</name>:</label>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>vallen</name></name> <operator>=</operator> <macro><name>CAST</name><argument_list>(<argument>unsigned char</argument>, <argument>(p - origp)</argument>)</argument_list></macro></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>FILE_PSTRING</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>l</name> <init>= <expr><call><name>file_pstring_length_size</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <name>FILE_BADSIZE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>vallen</name></name> <operator>+=</operator> <macro><name>CAST</name><argument_list>(<argument>unsigned char</argument>, <argument>l</argument>)</argument_list></macro></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>private</name> <name>int</name></type>
<name>hextoint</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isascii</name><argument_list>(<argument><expr><macro><name>CAST</name><argument_list>(<argument>unsigned char</argument>, <argument>c</argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><macro><name>CAST</name><argument_list>(<argument>unsigned char</argument>, <argument>c</argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'a'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>&lt;=</operator> <literal type="char">'f'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>c</name> <operator>+</operator> <literal type="number">10</literal> <operator>-</operator> <literal type="char">'a'</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator> <name>c</name><operator>&gt;=</operator> <literal type="char">'A'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>&lt;=</operator> <literal type="char">'F'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>c</name> <operator>+</operator> <literal type="number">10</literal> <operator>-</operator> <literal type="char">'A'</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>





<function><type><name>protected</name> <name>void</name></type>
<name>file_showstr</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <name>FILE_BADSIZE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>s</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>len</name><operator>--</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>s</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">040</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="number">0176</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fputc</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'\\'</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'\a'</literal></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'\b'</literal></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'b'</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'\f'</literal></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'f'</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'\n'</literal></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'n'</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'\r'</literal></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'r'</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'\t'</literal></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'t'</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'\v'</literal></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'v'</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%.3o"</literal></expr></argument>, <argument><expr><name>c</name> <operator>&amp;</operator> <literal type="number">0377</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></function>




<function><type><name>private</name> <name>void</name></type>
<name>eatsize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><operator>*</operator><name>p</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>LOWCASE</name><argument_list>(<argument><expr><operator>*</operator><name>l</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'u'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><call><name>LOWCASE</name><argument_list>(<argument><expr><operator>*</operator><name>l</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'l'</literal></expr>:</case>
<case>case <expr><literal type="char">'s'</literal></expr>:</case>
<case>case <expr><literal type="char">'h'</literal></expr>:</case>
<case>case <expr><literal type="char">'b'</literal></expr>:</case>
<case>case <expr><literal type="char">'c'</literal></expr>:</case>
<expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt>

<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>private</name> <name><name>struct</name> <name>magic_map</name></name> <modifier>*</modifier></type>
<name>apprentice_buf</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>magic</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>magic_map</name></name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>map</name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr>struct <name>magic_map</name> <operator>*</operator></expr></argument>, <argument><expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>map</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>file_oomem</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>map</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MAP_TYPE_USER</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>check_buffer</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="string">"buffer"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>apprentice_unmap</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>map</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>private</name> <name><name>struct</name> <name>magic_map</name></name> <modifier>*</modifier></type>
<name>apprentice_map</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dbname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>magic_map</name></name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>magic_map</name></name> <modifier>*</modifier></type><name>rv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>map</name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr>struct <name>magic_map</name> <operator>*</operator></expr></argument>, <argument><expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>map</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>file_oomem</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>map</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MAP_TYPE_USER</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dbname</name> <operator>=</operator> <call><name>mkdbname</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dbname</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>dbname</name></expr></argument>, <argument><expr><name>O_RDONLY</name><operator>|</operator><name>O_BINARY</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fstat</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>file_error</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"cannot stat `%s'"</literal></expr></argument>, <argument><expr><name>dbname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>.</operator><name>st_size</name></name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>||</operator> <name><name>st</name><operator>.</operator><name>st_size</name></name> <operator>&gt;</operator> <call><name>maxoff_t</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>file_error</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"file `%s' is too %s"</literal></expr></argument>, <argument><expr><name>dbname</name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>st</name><operator>.</operator><name>st_size</name></name> <operator>&lt;</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><literal type="string">"small"</literal></expr> </then><else>: <expr><literal type="string">"large"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name><name>st</name><operator>.</operator><name>st_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>QUICK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MAP_TYPE_MMAP</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>map</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <call><name>mmap</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>CAST</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name><name>st</name><operator>.</operator><name>st_size</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PROT_READ</name><operator>|</operator><name>PROT_WRITE</name></expr></argument>,
<argument><expr><name>MAP_PRIVATE</name><operator>|</operator><name>MAP_FILE</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><call><name>CAST</name><argument_list>(<argument><expr><name>off_t</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>MAP_FAILED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>file_error</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"cannot map `%s'"</literal></expr></argument>, <argument><expr><name>dbname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MAP_TYPE_MALLOC</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>map</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><call><name>malloc</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>file_oomem</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><name><name>map</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>file_badread</name><argument_list>(<argument><expr><name>ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_buffer</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><name>dbname</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>QUICK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>mprotect</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><call><name>CAST</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name><name>st</name><operator>.</operator><name>st_size</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PROT_READ</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>file_error</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"cannot mprotect `%s'"</literal></expr></argument>, <argument><expr><name>dbname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>dbname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>map</name></expr>;</return>

<label><name>error</name>:</label>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>apprentice_unmap</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>dbname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>private</name> <name>int</name></type>
<name>check_buffer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>magic_map</name></name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dbname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>entries</name></decl>, <decl><type ref="prev"/><name>nentries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>needsbyteswap</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>uint32_t</name> <operator>*</operator></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>!=</operator> <name>MAGICNO</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>swap4</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>MAGICNO</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>file_error</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"bad magic in `%s'"</literal></expr></argument>, <argument><expr><name>dbname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>needsbyteswap</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>needsbyteswap</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>needsbyteswap</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>version</name> <operator>=</operator> <call><name>swap4</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>version</name> <operator>=</operator> <name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>version</name> <operator>!=</operator> <name>VERSIONNO</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>file_error</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"File %s supports only version %d magic "</literal>
<literal type="string">"files. `%s' is version %d"</literal></expr></argument>, <argument><expr><name>VERSION</name></expr></argument>,
<argument><expr><name>VERSIONNO</name></expr></argument>, <argument><expr><name>dbname</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>entries</name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>len</name></name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>magic</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>entries</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>magic</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>!=</operator> <name><name>map</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>file_error</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Size of `%s' %"</literal> <name>SIZE_T_FORMAT</name> <literal type="string">"u is not "</literal>
<literal type="string">"a multiple of %"</literal> <name>SIZE_T_FORMAT</name> <literal type="string">"u"</literal></expr></argument>,
<argument><expr><name>dbname</name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>magic</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>magic</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr>struct <name>magic</name> <operator>*</operator></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>nentries</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAGIC_SETS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>needsbyteswap</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>nmagic</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>swap4</name><argument_list>(<argument><expr><name><name>ptr</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>nmagic</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ptr</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>MAGIC_SETS</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>map</name><operator>-&gt;</operator><name>magic</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>map</name><operator>-&gt;</operator><name>magic</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>map</name><operator>-&gt;</operator><name>nmagic</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>nentries</name> <operator>+=</operator> <name><name>map</name><operator>-&gt;</operator><name>nmagic</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>entries</name> <operator>!=</operator> <name>nentries</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>file_error</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Inconsistent entries in `%s' %u != %u"</literal></expr></argument>,
<argument><expr><name>dbname</name></expr></argument>, <argument><expr><name>entries</name></expr></argument>, <argument><expr><name>nentries</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>needsbyteswap</name></expr>)</condition><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAGIC_SETS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>byteswap</name><argument_list>(<argument><expr><name><name>map</name><operator>-&gt;</operator><name>magic</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>nmagic</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><name>private</name> <name>int</name></type>
<name>apprentice_compile</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>magic_map</name></name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name>nm</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>map</name><operator>-&gt;</operator><name>nmagic</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>MAGIC_SETS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name>m</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name><name>map</name><operator>-&gt;</operator><name>magic</name></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dbname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>magic</name></name></type> <name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>h</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <name>MAGIC_SETS</name></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>hdr</name></decl>;</union>

<expr_stmt><expr><name>dbname</name> <operator>=</operator> <call><name>mkdbname</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dbname</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>dbname</name></expr></argument>, <argument><expr><name>O_WRONLY</name><operator>|</operator><name>O_CREAT</name><operator>|</operator><name>O_TRUNC</name><operator>|</operator><name>O_BINARY</name></expr></argument>, <argument><expr><literal type="number">0644</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>file_error</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"cannot open `%s'"</literal></expr></argument>, <argument><expr><name>dbname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hdr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>.</operator><name>h</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>MAGICNO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>.</operator><name>h</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>VERSIONNO</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>hdr</name><operator>.</operator><name>h</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>nmagic</name></name></expr></argument>, <argument><expr><name>nm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hdr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>ssize_t</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>file_error</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"error writing `%s'"</literal></expr></argument>, <argument><expr><name>dbname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out2</name>;</goto>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAGIC_SETS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name>m</name> <operator>*</operator> <name><name>map</name><operator>-&gt;</operator><name>nmagic</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>map</name><operator>-&gt;</operator><name>magic</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>ssize_t</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>file_error</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"error writing `%s'"</literal></expr></argument>, <argument><expr><name>dbname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out2</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<label><name>out2</name>:</label>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<label><name>out</name>:</label>
<expr_stmt><expr><call><name>apprentice_unmap</name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>dbname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>private</name> <specifier>const</specifier> <name>char</name></type> <name><name>ext</name><index>[]</index></name> <init>= <expr><literal type="string">".mgc"</literal></expr></init></decl>;</decl_stmt>



<function><type><name>private</name> <name>char</name> <modifier>*</modifier></type>
<name>mkdbname</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>strip</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>strip</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>fn</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>fn</name> <operator>=</operator> <operator>++</operator><name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>q</name> <operator>=</operator> <name>fn</name></expr>;</init> <condition><expr><operator>*</operator><name>q</name></expr>;</condition> <incr><expr><name>q</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></for>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>ext</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ext</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>p</name> <operator>&gt;=</operator> <name>ext</name> <operator>&amp;&amp;</operator> <name>q</name> <operator>&gt;=</operator> <name>fn</name></expr>;</condition> <incr><expr><name>p</name><operator>--</operator></expr><operator>,</operator> <expr><name>q</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <operator>*</operator><name>q</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>


<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;=</operator> <name>ext</name></expr>)</condition><block type="pseudo"><block_content>
<while>while <condition>(<expr><operator>*</operator><name>q</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>q</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while></block_content></block></if></if_stmt>

<expr_stmt><expr><name>q</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAGIC_MIME</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%.*s.mime%s"</literal></expr></argument>, <argument><expr><call><name>CAST</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>q</name> <operator>-</operator> <name>fn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><name>ext</name></expr></argument>)</argument_list></call>
<operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>access</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>R_OK</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <name>MAGIC_MIME_TYPE</name></expr>;</expr_stmt>
<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%.*s%s"</literal></expr></argument>, <argument><expr><call><name>CAST</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>q</name> <operator>-</operator> <name>fn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><name>ext</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>fn</name></expr></argument>, <argument><expr><literal type="string">".mime"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <name>MAGIC_MIME_TYPE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>private</name> <name>void</name></type>
<name>byteswap</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic</name></name> <modifier>*</modifier></type><name>magic</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>nmagic</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nmagic</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>bs1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>magic</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>




<function><type><name>private</name> <name>uint16_t</name></type>
<name>swap2</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>sv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>RCAST</name><argument_list>(<argument><expr><name>uint8_t</name> <operator>*</operator></expr></argument>, <argument><expr><call><name>RCAST</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>sv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><call><name>RCAST</name><argument_list>(<argument><expr><name>uint8_t</name> <operator>*</operator></expr></argument>, <argument><expr><call><name>RCAST</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>private</name> <name>uint32_t</name></type>
<name>swap4</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>sv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>RCAST</name><argument_list>(<argument><expr><name>uint8_t</name> <operator>*</operator></expr></argument>, <argument><expr><call><name>RCAST</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>sv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><call><name>RCAST</name><argument_list>(<argument><expr><name>uint8_t</name> <operator>*</operator></expr></argument>, <argument><expr><call><name>RCAST</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>private</name> <name>uint64_t</name></type>
<name>swap8</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>sv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>RCAST</name><argument_list>(<argument><expr><name>uint8_t</name> <operator>*</operator></expr></argument>, <argument><expr><call><name>RCAST</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>sv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><call><name>RCAST</name><argument_list>(<argument><expr><name>uint8_t</name> <operator>*</operator></expr></argument>, <argument><expr><call><name>RCAST</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
d[0] = s[3];
d[1] = s[2];
d[2] = s[1];
d[3] = s[0];
d[4] = s[7];
d[5] = s[6];
d[6] = s[5];
d[7] = s[4];
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>protected</name> <name>uintmax_t</name></type>
<name>file_varint2uintmax_t</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>us</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uintmax_t</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <name>FILE_LEVARINT</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <name>us</name></expr>;</init> <condition><expr><operator>*</operator><name>c</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>l</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>l</name> <operator>=</operator> <name>c</name> <operator>-</operator> <name>us</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>c</name> <operator>&gt;=</operator> <name>us</name></expr>;</condition> <incr><expr><name>c</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>|=</operator> <operator>*</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>&lt;&lt;=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <name>us</name></expr>;</init> <condition><expr><operator>*</operator><name>c</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>|=</operator> <operator>*</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>x</name> <operator>&lt;&lt;=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>l</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>l</name> <operator>=</operator> <name>c</name> <operator>-</operator> <name>us</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>private</name> <name>void</name></type>
<name>bs1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>cont_level</name></name> <operator>=</operator> <call><name>swap2</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>cont_level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <call><name>swap4</name><argument_list>(<argument><expr><call><name>CAST</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>in_offset</name></name> <operator>=</operator> <call><name>swap4</name><argument_list>(<argument><expr><call><name>CAST</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>in_offset</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>lineno</name></name> <operator>=</operator> <call><name>swap4</name><argument_list>(<argument><expr><call><name>CAST</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>IS_STRING</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>str_range</name></name> <operator>=</operator> <call><name>swap4</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>str_range</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>=</operator> <call><name>swap4</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>q</name></name> <operator>=</operator> <call><name>swap8</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>q</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>num_mask</name></name> <operator>=</operator> <call><name>swap8</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>num_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>protected</name> <name>size_t</name></type>
<name>file_pstring_length_size</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>magic</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>&amp;</operator> <name>PSTRING_LEN</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>PSTRING_1_LE</name></expr>:</case>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><name>PSTRING_2_LE</name></expr>:</case>
<case>case <expr><name>PSTRING_2_BE</name></expr>:</case>
<return>return <expr><literal type="number">2</literal></expr>;</return>
<case>case <expr><name>PSTRING_4_LE</name></expr>:</case>
<case>case <expr><name>PSTRING_4_BE</name></expr>:</case>
<return>return <expr><literal type="number">4</literal></expr>;</return>
<default>default:</default>
<expr_stmt><expr><call><name>file_error</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"corrupt magic file "</literal>
<literal type="string">"(bad pascal string length %d)"</literal></expr></argument>,
<argument><expr><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>&amp;</operator> <name>PSTRING_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FILE_BADSIZE</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>
<function><type><name>protected</name> <name>size_t</name></type>
<name>file_pstring_get_length</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>magic</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ss</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <macro><name>RCAST</name><argument_list>(<argument>const unsigned char *</argument>, <argument>ss</argument>)</argument_list></macro></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>s3</name></decl>, <decl><type ref="prev"/><name>s2</name></decl>, <decl><type ref="prev"/><name>s1</name></decl>, <decl><type ref="prev"/><name>s0</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>&amp;</operator> <name>PSTRING_LEN</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>PSTRING_1_LE</name></expr>:</case>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>*</operator><name>s</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PSTRING_2_LE</name></expr>:</case>
<expr_stmt><expr><name>s0</name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s1</name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>s1</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name>s0</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PSTRING_2_BE</name></expr>:</case>
<expr_stmt><expr><name>s0</name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s1</name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>s0</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name>s1</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PSTRING_4_LE</name></expr>:</case>
<expr_stmt><expr><name>s0</name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s1</name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s2</name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s3</name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>s3</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>s2</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>s1</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name>s0</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>PSTRING_4_BE</name></expr>:</case>
<expr_stmt><expr><name>s0</name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s1</name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s2</name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s3</name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>s0</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>s1</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>s2</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name>s3</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>file_error</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"corrupt magic file "</literal>
<literal type="string">"(bad pascal string length %d)"</literal></expr></argument>,
<argument><expr><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>&amp;</operator> <name>PSTRING_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FILE_BADSIZE</name></expr>;</return>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>&amp;</operator> <name>PSTRING_LENGTH_INCLUDES_ITSELF</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>l</name> <init>= <expr><call><name>file_pstring_length_size</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <name>FILE_BADSIZE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>l</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>l</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>protected</name> <name>int</name></type>
<name>file_magicfind</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>mlist</name></name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>mlist</name></name> <modifier>*</modifier></type><name>mlist</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ml</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mlist</name> <operator>=</operator> <name><name>ms</name><operator>-&gt;</operator><name>mlist</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ml</name> <operator>=</operator> <name><name>mlist</name><operator>-&gt;</operator><name>next</name></name></expr>;</init> <condition><expr><name>ml</name> <operator>!=</operator> <name>mlist</name></expr>;</condition> <incr><expr><name>ml</name> <operator>=</operator> <name><name>ml</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>magic</name></name> <modifier>*</modifier></type><name>ma</name> <init>= <expr><name><name>ml</name><operator>-&gt;</operator><name>magic</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>nma</name> <init>= <expr><name><name>ml</name><operator>-&gt;</operator><name>nmagic</name></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nma</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ma</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>!=</operator> <name>FILE_NAME</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ma</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>value</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ma</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>nma</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>ma</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>cont_level</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>nmagic</name></name> <operator>=</operator> <name>j</name> <operator>-</operator> <name>i</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
</unit>
