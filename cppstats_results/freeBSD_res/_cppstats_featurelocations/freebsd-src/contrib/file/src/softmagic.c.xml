<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/file/src/softmagic.c">






























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"file.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>FILE_RCSID</name><argument_list>(<argument><literal type="string">"@(#)$File: softmagic.c,v 1.315 2021/09/03 13:17:52 christos Exp $"</literal></argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"magic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"der.h"</cpp:file></cpp:include>

<function_decl><type><name>private</name> <name>int</name></type> <name>match</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>magic</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>buffer</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>private</name> <name>int</name></type> <name>mget</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>magic</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>buffer</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>,
<parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>int</name></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>private</name> <name>int</name></type> <name>msetoffset</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>magic</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>buffer</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>buffer</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>int</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>private</name> <name>int</name></type> <name>magiccheck</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>magic</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>private</name> <name>int32_t</name></type> <name>mprint</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>magic</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>private</name> <name>int</name></type> <name>moffset</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>magic</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>buffer</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>private</name> <name>void</name></type> <name>mdebug</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>private</name> <name>int</name></type> <name>mcopy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>VALUETYPE</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>magic</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>private</name> <name>int</name></type> <name>mconvert</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>magic</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>private</name> <name>int</name></type> <name>print_sep</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>private</name> <name>int</name></type> <name>handle_annotation</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>magic</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>private</name> <name>int</name></type> <name>cvt_8</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>VALUETYPE</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>magic</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>private</name> <name>int</name></type> <name>cvt_16</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>VALUETYPE</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>magic</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>private</name> <name>int</name></type> <name>cvt_32</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>VALUETYPE</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>magic</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>private</name> <name>int</name></type> <name>cvt_64</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>VALUETYPE</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>magic</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET_OOB</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>o</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((n) &lt; CAST(uint32_t, (o)) || (i) &gt; ((n) - (o)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BE64</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( (CAST(uint64_t, (p)-&gt;hq[0])&lt;&lt;56)| (CAST(uint64_t, (p)-&gt;hq[1])&lt;&lt;48)| (CAST(uint64_t, (p)-&gt;hq[2])&lt;&lt;40)| (CAST(uint64_t, (p)-&gt;hq[3])&lt;&lt;32)| (CAST(uint64_t, (p)-&gt;hq[4])&lt;&lt;24)| (CAST(uint64_t, (p)-&gt;hq[5])&lt;&lt;16)| (CAST(uint64_t, (p)-&gt;hq[6])&lt;&lt;8)| (CAST(uint64_t, (p)-&gt;hq[7])))</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LE64</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( (CAST(uint64_t, (p)-&gt;hq[7])&lt;&lt;56)| (CAST(uint64_t, (p)-&gt;hq[6])&lt;&lt;48)| (CAST(uint64_t, (p)-&gt;hq[5])&lt;&lt;40)| (CAST(uint64_t, (p)-&gt;hq[4])&lt;&lt;32)| (CAST(uint64_t, (p)-&gt;hq[3])&lt;&lt;24)| (CAST(uint64_t, (p)-&gt;hq[2])&lt;&lt;16)| (CAST(uint64_t, (p)-&gt;hq[1])&lt;&lt;8)| (CAST(uint64_t, (p)-&gt;hq[0])))</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LE32</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( (CAST(uint32_t, (p)-&gt;hl[3])&lt;&lt;24)| (CAST(uint32_t, (p)-&gt;hl[2])&lt;&lt;16)| (CAST(uint32_t, (p)-&gt;hl[1])&lt;&lt;8)| (CAST(uint32_t, (p)-&gt;hl[0])))</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BE32</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( (CAST(uint32_t, (p)-&gt;hl[0])&lt;&lt;24)| (CAST(uint32_t, (p)-&gt;hl[1])&lt;&lt;16)| (CAST(uint32_t, (p)-&gt;hl[2])&lt;&lt;8)| (CAST(uint32_t, (p)-&gt;hl[3])))</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ME32</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( (CAST(uint32_t, (p)-&gt;hl[1])&lt;&lt;24)| (CAST(uint32_t, (p)-&gt;hl[0])&lt;&lt;16)| (CAST(uint32_t, (p)-&gt;hl[3])&lt;&lt;8)| (CAST(uint32_t, (p)-&gt;hl[2])))</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BE16</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((CAST(uint16_t, (p)-&gt;hs[0])&lt;&lt;8)|(CAST(uint16_t, (p)-&gt;hs[1])))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LE16</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((CAST(uint16_t, (p)-&gt;hs[1])&lt;&lt;8)|(CAST(uint16_t, (p)-&gt;hs[0])))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEXT</name><parameter_list>(<parameter><type><name>s</name></type></parameter>,<parameter><type><name>v</name></type></parameter>,<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((s) ? CAST(intmax_t, CAST(int##v##_t, p)) : CAST(intmax_t, CAST(uint##v##_t, p)))</cpp:value></cpp:define>








<function><type><name>protected</name> <name>int</name></type>
<name>file_softmagic</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>buffer</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>,
<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>indir_count</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>name_count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>text</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>mlist</name></name> <modifier>*</modifier></type><name>ml</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>, <decl><type ref="prev"/><name>printed_something</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>need_separator</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>nc</name></decl>, <decl><type ref="prev"/><name>ic</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>name_count</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>name_count</name> <operator>=</operator> <operator>&amp;</operator><name>nc</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>indir_count</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ic</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>indir_count</name> <operator>=</operator> <operator>&amp;</operator><name>ic</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>ml</name> <operator>=</operator> <name><name>ms</name><operator>-&gt;</operator><name>mlist</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>next</name></expr>;</init> <condition><expr><name>ml</name> <operator>!=</operator> <name><name>ms</name><operator>-&gt;</operator><name>mlist</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>ml</name> <operator>=</operator> <name><name>ml</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rv</name> <operator>=</operator> <call><name>match</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name><name>ml</name><operator>-&gt;</operator><name>magic</name></name></expr></argument>, <argument><expr><name><name>ml</name><operator>-&gt;</operator><name>nmagic</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mode</name></expr></argument>,
<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>indir_count</name></expr></argument>, <argument><expr><name>name_count</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>printed_something</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>need_separator</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>rv</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_FMTDEBUG</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FILE_FMTDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>file_fmtcheck((a), (b), (c), __FILE__, __LINE__)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>private</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>__format_arg__</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list>
<name>file_fmtcheck</name><argument_list>(<argument><expr>struct <name>magic_set</name> <operator>*</operator><name>ms</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>desc</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>def</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>file</name></expr></argument>, <argument><expr><name>size_t</name> <name>line</name></expr></argument>)</argument_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><literal type="char">'%'</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>desc</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>fmtcheck</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>def</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>file_magerror</name><argument_list>(<argument><expr><name>ms</name></expr></argument>,
<argument><expr><literal type="string">"%s, %"</literal> <name>SIZE_T_FORMAT</name> <literal type="string">"u: format `%s' does not match"</literal>
<literal type="string">" with `%s'"</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fmtcheck((b), (c))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




























<function><type><name>private</name> <name>int</name></type>
<name>match</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>magic</name></name> <modifier>*</modifier></type><name>magic</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>nmagic</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>buffer</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>text</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>flip</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>indir_count</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>name_count</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>printed_something</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>need_separator</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>returnval</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>found_match</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>magindex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>cont_level</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>found_matchv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>returnvalv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>firstline</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>buffer</name></name></type> <name>bb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>print</name> <init>= <expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAGIC_NODESC</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><name>returnval</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>returnval</name> <operator>=</operator> <operator>&amp;</operator><name>returnvalv</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>found_match</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>found_match</name> <operator>=</operator> <operator>&amp;</operator><name>found_matchv</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>file_check_mem</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>cont_level</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>magindex</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>magindex</name> <operator>&lt;</operator> <name>nmagic</name></expr>;</condition> <incr><expr><name>magindex</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>flush</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>magic</name></name> <modifier>*</modifier></type><name>m</name> <init>= <expr><operator>&amp;</operator><name><name>magic</name><index>[<expr><name>magindex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>FILE_NAME</name></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>IS_STRING</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLT</name></cpp:macro> <cpp:value>(STRING_BINTEST | STRING_TEXTTEST)</cpp:value></cpp:define>
<operator>(</operator><operator>(</operator><name>text</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>&amp;</operator> <name>FLT</name><operator>)</operator> <operator>==</operator> <name>STRING_BINTEST</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><operator>!</operator><name>text</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>&amp;</operator> <name>FLT</name><operator>)</operator> <operator>==</operator> <name>STRING_TEXTTEST</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>||</operator>
<operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>mode</name><operator>)</operator> <operator>!=</operator> <name>mode</name></expr>)</condition> <block>{<block_content>
<label><name>flush</name>:</label>

<while>while <condition>(<expr><name>magindex</name> <operator>&lt;</operator> <name>nmagic</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
<name><name>magic</name><index>[<expr><name>magindex</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>cont_level</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>magindex</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>cont_level</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>msetoffset</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bb</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>cont_level</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>flush</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>line</name></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>lineno</name></name></expr>;</expr_stmt>


<switch>switch <condition>(<expr><call><name>mget</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><macro><name>CAST</name><argument_list>(<argument>const unsigned char *</argument>, <argument>bb.fbuf</argument>)</argument_list></macro></expr></argument>,
<argument><expr><name><name>bb</name><operator>.</operator><name>flen</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>cont_level</name></expr></argument>,
<argument><expr><name>mode</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>flip</name></expr></argument>, <argument><expr><name>indir_count</name></expr></argument>, <argument><expr><name>name_count</name></expr></argument>,
<argument><expr><name>printed_something</name></expr></argument>, <argument><expr><name>need_separator</name></expr></argument>, <argument><expr><name>returnval</name></expr></argument>, <argument><expr><name>found_match</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name>flush</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>reln</name></name> <operator>!=</operator> <literal type="char">'!'</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>FILE_INDIRECT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>found_match</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>returnval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><call><name>magiccheck</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name>flush</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>flush</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>flush</name></expr>)</condition> <block>{<block_content>




<goto>goto <name>flush</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>e</name> <operator>=</operator> <call><name>handle_annotation</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>firstline</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>found_match</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>need_separator</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>printed_something</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>returnval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>e</name></expr>;</return>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>m</name><operator>-&gt;</operator><name>desc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>found_match</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>print</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>returnval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>need_separator</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>printed_something</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>print_sep</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>firstline</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>mprint</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><call><name>moffset</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ms</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>li</name><index>[<expr><name>cont_level</name></expr>]</index></name><operator>.</operator><name>off</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<goto>goto <name>flush</name>;</goto>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>


<if_stmt><if>if <condition>(<expr><call><name>file_check_mem</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><operator>++</operator><name>cont_level</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>magindex</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>nmagic</name> <operator>&amp;&amp;</operator>
<name><name>magic</name><index>[<expr><name>magindex</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>cont_level</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>&amp;</operator><name><name>magic</name><index>[<expr><operator>++</operator><name>magindex</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>line</name></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>lineno</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cont_level</name> <operator>&lt;</operator> <name><name>m</name><operator>-&gt;</operator><name>cont_level</name></name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cont_level</name> <operator>&gt;</operator> <name><name>m</name><operator>-&gt;</operator><name>cont_level</name></name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name>cont_level</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>cont_level</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>msetoffset</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bb</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>cont_level</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>flush</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>OFFADD</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cont_level</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAGIC_DEBUG</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"direct *zero*"</literal>
<literal type="string">" cont_level\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator>
<name><name>ms</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>li</name><index>[<expr><name>cont_level</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>off</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_CONDITIONALS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>cond</name></name> <operator>==</operator> <name>COND_ELSE</name> <operator>||</operator>
<name><name>m</name><operator>-&gt;</operator><name>cond</name></name> <operator>==</operator> <name>COND_ELIF</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ms</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>li</name><index>[<expr><name>cont_level</name></expr>]</index></name><operator>.</operator><name>last_match</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<switch>switch <condition>(<expr><call><name>mget</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><macro><name>CAST</name><argument_list>(<argument>const unsigned char *</argument>,
<argument>bb.fbuf</argument>)</argument_list></macro></expr></argument>, <argument><expr><name><name>bb</name><operator>.</operator><name>flen</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>,
<argument><expr><name>cont_level</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>flip</name></expr></argument>, <argument><expr><name>indir_count</name></expr></argument>,
<argument><expr><name>name_count</name></expr></argument>, <argument><expr><name>printed_something</name></expr></argument>, <argument><expr><name>need_separator</name></expr></argument>,
<argument><expr><name>returnval</name></expr></argument>, <argument><expr><name>found_match</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>reln</name></name> <operator>!=</operator> <literal type="char">'!'</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>flush</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>FILE_INDIRECT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>found_match</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>returnval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>flush</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<switch>switch <condition>(<expr><ternary><condition><expr><name>flush</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><call><name>magiccheck</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>)</condition> <block>{<block_content>
<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_CONDITIONALS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>li</name><index>[<expr><name>cont_level</name></expr>]</index></name><operator>.</operator><name>last_match</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
<default>default:</default>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_CONDITIONALS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>li</name><index>[<expr><name>cont_level</name></expr>]</index></name><operator>.</operator><name>last_match</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>FILE_CLEAR</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>li</name><index>[<expr><name>cont_level</name></expr>]</index></name><operator>.</operator><name>got_match</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name><name>ms</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>li</name><index>[<expr><name>cont_level</name></expr>]</index></name><operator>.</operator><name>got_match</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>FILE_DEFAULT</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>li</name><index>[<expr><name>cont_level</name></expr>]</index></name><operator>.</operator><name>got_match</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>e</name> <operator>=</operator> <call><name>handle_annotation</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>firstline</name></expr></argument>)</argument_list></call><operator>)</operator>
<operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>found_match</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>need_separator</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>printed_something</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>returnval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>e</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>m</name><operator>-&gt;</operator><name>desc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>found_match</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>print</name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>m</name><operator>-&gt;</operator><name>desc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>returnval</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>











<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>printed_something</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>printed_something</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>print_sep</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>firstline</name></expr></argument>)</argument_list></call>
<operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>need_separator</name>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>NOSPACE</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>mprint</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>need_separator</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><call><name>moffset</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bb</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>ms</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>li</name><index>[<expr><name>cont_level</name></expr>]</index></name><operator>.</operator><name>off</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name>flush</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cont_level</name><operator>--</operator></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>






<if_stmt><if>if <condition>(<expr><call><name>file_check_mem</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><operator>++</operator><name>cont_level</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>printed_something</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>firstline</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>found_match</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAGIC_CONTINUE</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>*</operator><name>returnval</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>printed_something</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>firstline</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>cont_level</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><operator>*</operator><name>returnval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>private</name> <name>int</name></type>
<name>check_fmt</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>file_regex_t</name></type> <name>rx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>, <decl><type ref="prev"/><name>rv</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><literal type="char">'%'</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>file_regcomp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rx</name></expr></argument>, <argument><expr><literal type="string">"%[-0-9\\.]*s"</literal></expr></argument>, <argument><expr><name>REG_EXTENDED</name><operator>|</operator><name>REG_NOSUB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>file_regerror</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rx</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>file_regexec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rx</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <operator>!</operator><name>rc</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>file_regfree</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRNDUP</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__aiws__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_AIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__aiws__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_AIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strndup</name></cpp:macro> <cpp:value>aix_strndup</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>strndup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>strndup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>copy</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>len</name> <operator>&lt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>len</name></expr>]</index></name></expr>;</condition> <incr><expr><name>len</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></for>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>copy</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>memcpy</name><argument_list>(<argument><expr><name>copy</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>copy</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><name>copy</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>varexpand</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>e</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>t</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ee</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>et</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>l</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>sptr</name> <operator>=</operator> <name>str</name></expr>;</init> <condition><expr><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>sptr</name></expr></argument>, <argument><expr><literal type="string">"${"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>ptr</name> <operator>-</operator> <name>sptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;=</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sptr</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>ptr</name> <operator>||</operator> <name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'?'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>et</name> <operator>=</operator> <name>t</name> <operator>=</operator> <name>ptr</name> <operator>+</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><operator>*</operator><name>et</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>et</name> <operator>!=</operator> <literal type="char">':'</literal></expr>;</condition> <incr><expr><name>et</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></for>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>et</name> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>ee</name> <operator>=</operator> <name>e</name> <operator>=</operator> <name>et</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><operator>*</operator><name>ee</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ee</name> <operator>!=</operator> <literal type="char">'}'</literal></expr>;</condition> <incr><expr><name>ee</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></for>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ee</name> <operator>!=</operator> <literal type="char">'}'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><operator>*</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'x'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>ms</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <literal type="number">0111</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name>et</name> <operator>-</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name>ee</name> <operator>-</operator> <name>e</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;=</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sptr</name> <operator>=</operator> <name>ee</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>sptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;=</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sptr</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>l</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>private</name> <name>int32_t</name></type>
<name>mprint</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>magic</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>vf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>vd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>tbuf</name><index>[<expr><literal type="number">26</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>sbuf</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>ebuf</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>union</name> <name>VALUETYPE</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>ms</name><operator>-&gt;</operator><name>ms_value</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>varexpand</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>ebuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>desc</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>desc</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>desc</name> <operator>=</operator> <name>ebuf</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRINTER</name><parameter_list>(<parameter><type><name>value</name></type></parameter>, <parameter><type><name>format</name></type></parameter>, <parameter><type><name>stype</name></type></parameter>, <parameter><type><name>utype</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>v = file_signextend(ms, m, CAST(uint64_t, value)); switch (check_fmt(ms, desc)) { case -1: return -1; case 1: if (m-&gt;flag &amp; UNSIGNED) { (void)snprintf(buf, sizeof(buf), "%" format "u", CAST(utype, v)); } else { (void)snprintf(buf, sizeof(buf), "%" format "d", CAST(stype, v)); } if (file_printf(ms, F(ms, desc, "%s"), buf) == -1) return -1; break; default: if (m-&gt;flag &amp; UNSIGNED) { if (file_printf(ms, F(ms, desc, "%" format "u"), CAST(utype, v)) == -1) return -1; } else { if (file_printf(ms, F(ms, desc, "%" format "d"), CAST(stype, v)) == -1) return -1; } break; } t = ms-&gt;offset + sizeof(stype); break</cpp:value></cpp:define>






























<switch>switch <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FILE_BYTE</name></expr>:</case>
<expr_stmt><expr><call><name>PRINTER</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>int8_t</name></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>FILE_SHORT</name></expr>:</case>
<case>case <expr><name>FILE_BESHORT</name></expr>:</case>
<case>case <expr><name>FILE_LESHORT</name></expr>:</case>
<expr_stmt><expr><call><name>PRINTER</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>uint16_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>FILE_LONG</name></expr>:</case>
<case>case <expr><name>FILE_BELONG</name></expr>:</case>
<case>case <expr><name>FILE_LELONG</name></expr>:</case>
<case>case <expr><name>FILE_MELONG</name></expr>:</case>
<expr_stmt><expr><call><name>PRINTER</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>l</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>int32_t</name></expr></argument>, <argument><expr><name>uint32_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>FILE_QUAD</name></expr>:</case>
<case>case <expr><name>FILE_BEQUAD</name></expr>:</case>
<case>case <expr><name>FILE_LEQUAD</name></expr>:</case>
<case>case <expr><name>FILE_OFFSET</name></expr>:</case>
<macro><name>PRINTER</name><argument_list>(<argument>p-&gt;q</argument>, <argument>INT64_T_FORMAT</argument>, <argument>long long</argument>, <argument>unsigned long long</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<case>case <expr><name>FILE_STRING</name></expr>:</case>
<case>case <expr><name>FILE_PSTRING</name></expr>:</case>
<case>case <expr><name>FILE_BESTRING16</name></expr>:</case>
<case>case <expr><name>FILE_LESTRING16</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>reln</name></name> <operator>==</operator> <literal type="char">'='</literal> <operator>||</operator> <name><name>m</name><operator>-&gt;</operator><name>reln</name></name> <operator>==</operator> <literal type="char">'!'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>file_printable</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>sbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>s</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>ms</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name><name>m</name><operator>-&gt;</operator><name>vallen</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>ms</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>s</name></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>str</name><index>[<expr><call><name>strcspn</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>&amp;</operator> <name>STRING_TRIM</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>file_strtrim</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>file_printf</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>file_printable</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>sbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>str</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <operator>(</operator><name>str</name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>s</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>FILE_PSTRING</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>l</name> <init>= <expr><call><name>file_pstring_length_size</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <name>FILE_BADSIZE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>t</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>FILE_DATE</name></expr>:</case>
<case>case <expr><name>FILE_BEDATE</name></expr>:</case>
<case>case <expr><name>FILE_LEDATE</name></expr>:</case>
<case>case <expr><name>FILE_MEDATE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>file_fmttime</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>l</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>ms</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FILE_LDATE</name></expr>:</case>
<case>case <expr><name>FILE_BELDATE</name></expr>:</case>
<case>case <expr><name>FILE_LELDATE</name></expr>:</case>
<case>case <expr><name>FILE_MELDATE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>file_fmttime</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>l</name></name></expr></argument>, <argument><expr><name>FILE_T_LOCAL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>ms</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FILE_QDATE</name></expr>:</case>
<case>case <expr><name>FILE_BEQDATE</name></expr>:</case>
<case>case <expr><name>FILE_LEQDATE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>file_fmttime</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>q</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>ms</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FILE_QLDATE</name></expr>:</case>
<case>case <expr><name>FILE_BEQLDATE</name></expr>:</case>
<case>case <expr><name>FILE_LEQLDATE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>file_fmttime</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>q</name></name></expr></argument>, <argument><expr><name>FILE_T_LOCAL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>ms</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FILE_QWDATE</name></expr>:</case>
<case>case <expr><name>FILE_BEQWDATE</name></expr>:</case>
<case>case <expr><name>FILE_LEQWDATE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>file_fmttime</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>q</name></name></expr></argument>, <argument><expr><name>FILE_T_WINDOWS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>ms</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FILE_FLOAT</name></expr>:</case>
<case>case <expr><name>FILE_BEFLOAT</name></expr>:</case>
<case>case <expr><name>FILE_LEFLOAT</name></expr>:</case>
<expr_stmt><expr><name>vf</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>f</name></name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><call><name>check_fmt</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%g"</literal></expr></argument>, <argument><expr><name>vf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><literal type="string">"%g"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>ms</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FILE_DOUBLE</name></expr>:</case>
<case>case <expr><name>FILE_BEDOUBLE</name></expr>:</case>
<case>case <expr><name>FILE_LEDOUBLE</name></expr>:</case>
<expr_stmt><expr><name>vd</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>d</name></name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><call><name>check_fmt</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%g"</literal></expr></argument>, <argument><expr><name>vd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><literal type="string">"%g"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vd</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>ms</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FILE_SEARCH</name></expr>:</case>
<case>case <expr><name>FILE_REGEX</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>scp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rval</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>strndup</name><argument_list>(<argument><expr><call><name>RCAST</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>rm_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>file_oomem</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>rm_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>scp</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>&amp;</operator> <name>STRING_TRIM</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>file_strtrim</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>cp</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>rval</name> <operator>=</operator> <call><name>file_printf</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>file_printable</name><argument_list>(<argument><expr><name>ms</name></expr></argument>,
<argument><expr><name>sbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>scp</name></expr></argument>, <argument><expr><name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>rm_len</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rval</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>&amp;</operator> <name>REGEX_OFFSET_START</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>offset</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>offset</name></name> <operator>+</operator> <name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>rm_len</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>FILE_DEFAULT</name></expr>:</case>
<case>case <expr><name>FILE_CLEAR</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>ms</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FILE_INDIRECT</name></expr>:</case>
<case>case <expr><name>FILE_USE</name></expr>:</case>
<case>case <expr><name>FILE_NAME</name></expr>:</case>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>ms</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_DER</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>file_printable</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>sbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>ms</name><operator>-&gt;</operator><name>ms_value</name><operator>.</operator><name>s</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>ms_value</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>ms</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_GUID</name></expr>:</case>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>file_print_guid</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>ms</name><operator>-&gt;</operator><name>ms_value</name><operator>.</operator><name>guid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>ms</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>file_magerror</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"invalid m-&gt;type (%d) in mprint()"</literal></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><call><name>CAST</name><argument_list>(<argument><expr><name>int32_t</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>private</name> <name>int</name></type>
<name>moffset</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>magic</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>buffer</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>,
<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>nbytes</name> <init>= <expr><name><name>b</name><operator>-&gt;</operator><name>flen</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>o</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FILE_BYTE</name></expr>:</case>
<expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>int32_t</name></expr></argument>, <argument><expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FILE_SHORT</name></expr>:</case>
<case>case <expr><name>FILE_BESHORT</name></expr>:</case>
<case>case <expr><name>FILE_LESHORT</name></expr>:</case>
<expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>int32_t</name></expr></argument>, <argument><expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FILE_LONG</name></expr>:</case>
<case>case <expr><name>FILE_BELONG</name></expr>:</case>
<case>case <expr><name>FILE_LELONG</name></expr>:</case>
<case>case <expr><name>FILE_MELONG</name></expr>:</case>
<expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>int32_t</name></expr></argument>, <argument><expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FILE_QUAD</name></expr>:</case>
<case>case <expr><name>FILE_BEQUAD</name></expr>:</case>
<case>case <expr><name>FILE_LEQUAD</name></expr>:</case>
<expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>int32_t</name></expr></argument>, <argument><expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FILE_STRING</name></expr>:</case>
<case>case <expr><name>FILE_PSTRING</name></expr>:</case>
<case>case <expr><name>FILE_BESTRING16</name></expr>:</case>
<case>case <expr><name>FILE_LESTRING16</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>reln</name></name> <operator>==</operator> <literal type="char">'='</literal> <operator>||</operator> <name><name>m</name><operator>-&gt;</operator><name>reln</name></name> <operator>==</operator> <literal type="char">'!'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>o</name> <operator>=</operator> <name><name>ms</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name><name>m</name><operator>-&gt;</operator><name>vallen</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name><name>union</name> <name>VALUETYPE</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>ms</name><operator>-&gt;</operator><name>ms_value</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>s</name></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>s</name><index>[<expr><call><name>strcspn</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>FILE_PSTRING</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>l</name> <init>= <expr><call><name>file_pstring_length_size</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <name>FILE_BADSIZE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>o</name> <operator>+=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>FILE_DATE</name></expr>:</case>
<case>case <expr><name>FILE_BEDATE</name></expr>:</case>
<case>case <expr><name>FILE_LEDATE</name></expr>:</case>
<case>case <expr><name>FILE_MEDATE</name></expr>:</case>
<expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>int32_t</name></expr></argument>, <argument><expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FILE_LDATE</name></expr>:</case>
<case>case <expr><name>FILE_BELDATE</name></expr>:</case>
<case>case <expr><name>FILE_LELDATE</name></expr>:</case>
<case>case <expr><name>FILE_MELDATE</name></expr>:</case>
<expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>int32_t</name></expr></argument>, <argument><expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FILE_QDATE</name></expr>:</case>
<case>case <expr><name>FILE_BEQDATE</name></expr>:</case>
<case>case <expr><name>FILE_LEQDATE</name></expr>:</case>
<expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>int32_t</name></expr></argument>, <argument><expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FILE_QLDATE</name></expr>:</case>
<case>case <expr><name>FILE_BEQLDATE</name></expr>:</case>
<case>case <expr><name>FILE_LEQLDATE</name></expr>:</case>
<expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>int32_t</name></expr></argument>, <argument><expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FILE_FLOAT</name></expr>:</case>
<case>case <expr><name>FILE_BEFLOAT</name></expr>:</case>
<case>case <expr><name>FILE_LEFLOAT</name></expr>:</case>
<expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>int32_t</name></expr></argument>, <argument><expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FILE_DOUBLE</name></expr>:</case>
<case>case <expr><name>FILE_BEDOUBLE</name></expr>:</case>
<case>case <expr><name>FILE_LEDOUBLE</name></expr>:</case>
<expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>int32_t</name></expr></argument>, <argument><expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FILE_REGEX</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>&amp;</operator> <name>REGEX_OFFSET_START</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>int32_t</name></expr></argument>, <argument><expr><name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>int32_t</name></expr></argument>,
<argument><expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>offset</name></name> <operator>+</operator> <name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>rm_len</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>FILE_SEARCH</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>&amp;</operator> <name>REGEX_OFFSET_START</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>int32_t</name></expr></argument>, <argument><expr><name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>int32_t</name></expr></argument>, <argument><expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>offset</name></name> <operator>+</operator> <name><name>m</name><operator>-&gt;</operator><name>vallen</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>FILE_CLEAR</name></expr>:</case>
<case>case <expr><name>FILE_DEFAULT</name></expr>:</case>
<case>case <expr><name>FILE_INDIRECT</name></expr>:</case>
<case>case <expr><name>FILE_OFFSET</name></expr>:</case>
<case>case <expr><name>FILE_USE</name></expr>:</case>
<expr_stmt><expr><name>o</name> <operator>=</operator> <name><name>ms</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FILE_DER</name></expr>:</case>
<expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>der_offs</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>o</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>nbytes</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAGIC_DEBUG</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"Bad DER offset %d nbytes=%"</literal>
<name>SIZE_T_FORMAT</name> <literal type="string">"u"</literal></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>op</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>FILE_GUID</name></expr>:</case>
<expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>int32_t</name></expr></argument>, <argument><expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><name>o</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><call><name>CAST</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>nbytes</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
file_error(ms, 0, "Offset out of range %" SIZE_T_FORMAT
"u &gt; %" SIZE_T_FORMAT "u", (size_t)o, nbytes);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>op</name> <operator>=</operator> <name>o</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>private</name> <name>uint32_t</name></type>
<name>cvt_id3</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">21</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAGIC_DEBUG</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"id3 offs=%u\n"</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>private</name> <name>int</name></type>
<name>cvt_flip</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flip</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>flip</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>type</name></expr>;</return></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FILE_BESHORT</name></expr>:</case>
<return>return <expr><name>FILE_LESHORT</name></expr>;</return>
<case>case <expr><name>FILE_BELONG</name></expr>:</case>
<return>return <expr><name>FILE_LELONG</name></expr>;</return>
<case>case <expr><name>FILE_BEDATE</name></expr>:</case>
<return>return <expr><name>FILE_LEDATE</name></expr>;</return>
<case>case <expr><name>FILE_BELDATE</name></expr>:</case>
<return>return <expr><name>FILE_LELDATE</name></expr>;</return>
<case>case <expr><name>FILE_BEQUAD</name></expr>:</case>
<return>return <expr><name>FILE_LEQUAD</name></expr>;</return>
<case>case <expr><name>FILE_BEQDATE</name></expr>:</case>
<return>return <expr><name>FILE_LEQDATE</name></expr>;</return>
<case>case <expr><name>FILE_BEQLDATE</name></expr>:</case>
<return>return <expr><name>FILE_LEQLDATE</name></expr>;</return>
<case>case <expr><name>FILE_BEQWDATE</name></expr>:</case>
<return>return <expr><name>FILE_LEQWDATE</name></expr>;</return>
<case>case <expr><name>FILE_LESHORT</name></expr>:</case>
<return>return <expr><name>FILE_BESHORT</name></expr>;</return>
<case>case <expr><name>FILE_LELONG</name></expr>:</case>
<return>return <expr><name>FILE_BELONG</name></expr>;</return>
<case>case <expr><name>FILE_LEDATE</name></expr>:</case>
<return>return <expr><name>FILE_BEDATE</name></expr>;</return>
<case>case <expr><name>FILE_LELDATE</name></expr>:</case>
<return>return <expr><name>FILE_BELDATE</name></expr>;</return>
<case>case <expr><name>FILE_LEQUAD</name></expr>:</case>
<return>return <expr><name>FILE_BEQUAD</name></expr>;</return>
<case>case <expr><name>FILE_LEQDATE</name></expr>:</case>
<return>return <expr><name>FILE_BEQDATE</name></expr>;</return>
<case>case <expr><name>FILE_LEQLDATE</name></expr>:</case>
<return>return <expr><name>FILE_BEQLDATE</name></expr>;</return>
<case>case <expr><name>FILE_LEQWDATE</name></expr>:</case>
<return>return <expr><name>FILE_BEQWDATE</name></expr>;</return>
<case>case <expr><name>FILE_BEFLOAT</name></expr>:</case>
<return>return <expr><name>FILE_LEFLOAT</name></expr>;</return>
<case>case <expr><name>FILE_LEFLOAT</name></expr>:</case>
<return>return <expr><name>FILE_BEFLOAT</name></expr>;</return>
<case>case <expr><name>FILE_BEDOUBLE</name></expr>:</case>
<return>return <expr><name>FILE_LEDOUBLE</name></expr>;</return>
<case>case <expr><name>FILE_LEDOUBLE</name></expr>:</case>
<return>return <expr><name>FILE_BEDOUBLE</name></expr>;</return>
<default>default:</default>
<return>return <expr><name>type</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO_CVT</name><parameter_list>(<parameter><type><name>fld</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (m-&gt;num_mask) switch (m-&gt;mask_op &amp; FILE_OPS_MASK) { case FILE_OPAND: p-&gt;fld &amp;= CAST(type, m-&gt;num_mask); break; case FILE_OPOR: p-&gt;fld |= CAST(type, m-&gt;num_mask); break; case FILE_OPXOR: p-&gt;fld ^= CAST(type, m-&gt;num_mask); break; case FILE_OPADD: p-&gt;fld += CAST(type, m-&gt;num_mask); break; case FILE_OPMINUS: p-&gt;fld -= CAST(type, m-&gt;num_mask); break; case FILE_OPMULTIPLY: p-&gt;fld *= CAST(type, m-&gt;num_mask); break; case FILE_OPDIVIDE: if (CAST(type, m-&gt;num_mask) == 0) return -1; p-&gt;fld /= CAST(type, m-&gt;num_mask); break; case FILE_OPMODULO: if (CAST(type, m-&gt;num_mask) == 0) return -1; p-&gt;fld %= CAST(type, m-&gt;num_mask); break; } if (m-&gt;mask_op &amp; FILE_OPINVERSE) p-&gt;fld = ~p-&gt;fld</cpp:value></cpp:define>


































<function><type><name>private</name> <name>int</name></type>
<name>cvt_8</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>VALUETYPE</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>magic</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>DO_CVT</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>private</name> <name>int</name></type>
<name>cvt_16</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>VALUETYPE</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>magic</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>DO_CVT</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>uint16_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>private</name> <name>int</name></type>
<name>cvt_32</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>VALUETYPE</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>magic</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>DO_CVT</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>uint32_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>private</name> <name>int</name></type>
<name>cvt_64</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>VALUETYPE</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>magic</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>DO_CVT</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO_CVT2</name><parameter_list>(<parameter><type><name>fld</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (m-&gt;num_mask) switch (m-&gt;mask_op &amp; FILE_OPS_MASK) { case FILE_OPADD: p-&gt;fld += CAST(type, m-&gt;num_mask); break; case FILE_OPMINUS: p-&gt;fld -= CAST(type, m-&gt;num_mask); break; case FILE_OPMULTIPLY: p-&gt;fld *= CAST(type, m-&gt;num_mask); break; case FILE_OPDIVIDE: if (CAST(type, m-&gt;num_mask) == 0) return -1; p-&gt;fld /= CAST(type, m-&gt;num_mask); break; }</cpp:value></cpp:define>


















<function><type><name>private</name> <name>int</name></type>
<name>cvt_float</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>VALUETYPE</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>magic</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>DO_CVT2</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>float</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>private</name> <name>int</name></type>
<name>cvt_double</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>VALUETYPE</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>magic</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>DO_CVT2</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>






<function><type><name>private</name> <name>int</name></type>
<name>mconvert</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>magic</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flip</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>union</name> <name>VALUETYPE</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>ms</name><operator>-&gt;</operator><name>ms_value</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><call><name>cvt_flip</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>flip</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FILE_BYTE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>cvt_8</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><name>FILE_SHORT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>cvt_16</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><name>FILE_LONG</name></expr>:</case>
<case>case <expr><name>FILE_DATE</name></expr>:</case>
<case>case <expr><name>FILE_LDATE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>cvt_32</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><name>FILE_QUAD</name></expr>:</case>
<case>case <expr><name>FILE_QDATE</name></expr>:</case>
<case>case <expr><name>FILE_QLDATE</name></expr>:</case>
<case>case <expr><name>FILE_QWDATE</name></expr>:</case>
<case>case <expr><name>FILE_OFFSET</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>cvt_64</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><name>FILE_STRING</name></expr>:</case>
<case>case <expr><name>FILE_BESTRING16</name></expr>:</case>
<case>case <expr><name>FILE_LESTRING16</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>s</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block>
<case>case <expr><name>FILE_PSTRING</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>sz</name> <init>= <expr><call><name>file_pstring_length_size</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>sz</name> <operator>==</operator> <name>FILE_BADSIZE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>ptr1</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>s</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr2</name> <operator>=</operator> <name>ptr1</name> <operator>+</operator> <name>sz</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>file_pstring_get_length</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>ptr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <name>FILE_BADSIZE</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>sz</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>sz</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>sz</name></expr>)</condition> <block>{<block_content>








<expr_stmt><expr><name>len</name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><name>len</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>ptr1</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>ptr2</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><operator>*</operator><name>ptr1</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block>
<case>case <expr><name>FILE_BESHORT</name></expr>:</case>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>short</name></expr></argument>, <argument><expr><call><name>BE16</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>cvt_16</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><name>FILE_BELONG</name></expr>:</case>
<case>case <expr><name>FILE_BEDATE</name></expr>:</case>
<case>case <expr><name>FILE_BELDATE</name></expr>:</case>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>l</name></name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>int32_t</name></expr></argument>, <argument><expr><call><name>BE32</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>cvt_32</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><name>FILE_BEQUAD</name></expr>:</case>
<case>case <expr><name>FILE_BEQDATE</name></expr>:</case>
<case>case <expr><name>FILE_BEQLDATE</name></expr>:</case>
<case>case <expr><name>FILE_BEQWDATE</name></expr>:</case>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>q</name></name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><call><name>BE64</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>cvt_64</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><name>FILE_LESHORT</name></expr>:</case>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>short</name></expr></argument>, <argument><expr><call><name>LE16</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>cvt_16</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><name>FILE_LELONG</name></expr>:</case>
<case>case <expr><name>FILE_LEDATE</name></expr>:</case>
<case>case <expr><name>FILE_LELDATE</name></expr>:</case>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>l</name></name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>int32_t</name></expr></argument>, <argument><expr><call><name>LE32</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>cvt_32</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><name>FILE_LEQUAD</name></expr>:</case>
<case>case <expr><name>FILE_LEQDATE</name></expr>:</case>
<case>case <expr><name>FILE_LEQLDATE</name></expr>:</case>
<case>case <expr><name>FILE_LEQWDATE</name></expr>:</case>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>q</name></name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><call><name>LE64</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>cvt_64</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><name>FILE_MELONG</name></expr>:</case>
<case>case <expr><name>FILE_MEDATE</name></expr>:</case>
<case>case <expr><name>FILE_MELDATE</name></expr>:</case>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>l</name></name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>int32_t</name></expr></argument>, <argument><expr><call><name>ME32</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>cvt_32</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><name>FILE_FLOAT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>cvt_float</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><name>FILE_BEFLOAT</name></expr>:</case>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>l</name></name> <operator>=</operator> <call><name>BE32</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>cvt_float</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><name>FILE_LEFLOAT</name></expr>:</case>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>l</name></name> <operator>=</operator> <call><name>LE32</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>cvt_float</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><name>FILE_DOUBLE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>cvt_double</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><name>FILE_BEDOUBLE</name></expr>:</case>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>q</name></name> <operator>=</operator> <call><name>BE64</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>cvt_double</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><name>FILE_LEDOUBLE</name></expr>:</case>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>q</name></name> <operator>=</operator> <call><name>LE64</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>cvt_double</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><name>FILE_REGEX</name></expr>:</case>
<case>case <expr><name>FILE_SEARCH</name></expr>:</case>
<case>case <expr><name>FILE_DEFAULT</name></expr>:</case>
<case>case <expr><name>FILE_CLEAR</name></expr>:</case>
<case>case <expr><name>FILE_NAME</name></expr>:</case>
<case>case <expr><name>FILE_USE</name></expr>:</case>
<case>case <expr><name>FILE_DER</name></expr>:</case>
<case>case <expr><name>FILE_GUID</name></expr>:</case>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<default>default:</default>
<expr_stmt><expr><call><name>file_magerror</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"invalid type %d in mconvert()"</literal></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>
<label><name>out</name>:</label>
<expr_stmt><expr><call><name>file_magerror</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"zerodivide in mconvert()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>private</name> <name>void</name></type>
<name>mdebug</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"mget/%"</literal> <name>SIZE_T_FORMAT</name> <literal type="string">"u @%d: "</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>file_showstr</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>private</name> <name>int</name></type>
<name>mcopy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>VALUETYPE</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>indir</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nbytes</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>magic</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>




<if_stmt><if>if <condition>(<expr><name>indir</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FILE_DER</name></expr>:</case>
<case>case <expr><name>FILE_SEARCH</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;</operator> <name>nbytes</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>s</name></name> <operator>=</operator> <call><name>RCAST</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>s_len</name></name> <operator>=</operator> <name>nbytes</name> <operator>-</operator> <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>FILE_REGEX</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>lines</name></decl>, <decl><type ref="prev"/><name>linecnt</name></decl>, <decl><type ref="prev"/><name>bytecnt</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>nbytes</name> <operator>&lt;</operator> <name>offset</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>s_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>s</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>&amp;</operator> <name>REGEX_LINE_COUNT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>linecnt</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>str_range</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>bytecnt</name> <operator>=</operator> <name>linecnt</name> <operator>*</operator> <literal type="number">80</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>linecnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>bytecnt</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>str_range</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bytecnt</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>bytecnt</name> <operator>&gt;</operator> <name>nbytes</name> <operator>-</operator> <name>offset</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bytecnt</name> <operator>=</operator> <name>nbytes</name> <operator>-</operator> <name>offset</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>bytecnt</name> <operator>&gt;</operator> <name><name>ms</name><operator>-&gt;</operator><name>regex_max</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bytecnt</name> <operator>=</operator> <name><name>ms</name><operator>-&gt;</operator><name>regex_max</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>RCAST</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> <operator>=</operator> <name>last</name> <operator>=</operator> <call><name>RCAST</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>bytecnt</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>lines</name> <operator>=</operator> <name>linecnt</name></expr><operator>,</operator> <expr><name>b</name> <operator>=</operator> <name>buf</name></expr>;</init> <condition><expr><name>lines</name> <operator>&amp;&amp;</operator> <name>b</name> <operator>&lt;</operator> <name>end</name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name>b</name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>,
<argument><expr><call><name>memchr</name><argument_list>(<argument><expr><name>c</name> <operator>=</operator> <name>b</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><call><name>CAST</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><operator>(</operator><name>end</name> <operator>-</operator> <name>b</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator>
<operator>||</operator> <operator>(</operator><name>b</name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>,
<argument><expr><call><name>memchr</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="char">'\r'</literal></expr></argument>, <argument><expr><call><name>CAST</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><operator>(</operator><name>end</name> <operator>-</operator> <name>c</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>;</condition>
<incr><expr><name>lines</name><operator>--</operator></expr><operator>,</operator> <expr><name>b</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>&lt;</operator> <name>end</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>&amp;&amp;</operator> <name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>b</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>&lt;</operator> <name>end</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>b</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>lines</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>s</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>s_len</name></name> <operator>=</operator> <name>last</name> <operator>-</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>rm_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block>
<case>case <expr><name>FILE_BESTRING16</name></expr>:</case>
<case>case <expr><name>FILE_LESTRING16</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name>s</name> <operator>+</operator> <name>offset</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>esrc</name> <init>= <expr><name>s</name> <operator>+</operator> <name>nbytes</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>edst</name> <init>= <expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>s</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>FILE_BESTRING16</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>src</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;=</operator> <name>nbytes</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>src</name> <operator>&lt;</operator> <name>esrc</name></expr>;</condition> <incr><expr><name>src</name> <operator>+=</operator> <literal type="number">2</literal></expr><operator>,</operator> <expr><name>dst</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>&lt;</operator> <name>edst</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <operator>*</operator><name>src</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<break>break;</break></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>dst</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><ternary><condition><expr><name>type</name> <operator>==</operator> <name>FILE_BESTRING16</name></expr> ?</condition><then>
<expr><operator>*</operator><operator>(</operator><name>src</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr> </then><else>:
<expr><operator>(</operator><operator>(</operator><name>src</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>esrc</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>*</operator><operator>(</operator><name>src</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator></expr></else></ternary></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>edst</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block>
<case>case <expr><name>FILE_STRING</name></expr>:</case>
<case>case <expr><name>FILE_PSTRING</name></expr>:</case>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>FILE_OFFSET</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>q</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;=</operator> <name>nbytes</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nbytes</name> <operator>-</operator> <name>offset</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nbytes</name> <operator>=</operator> <name>nbytes</name> <operator>-</operator> <name>offset</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>nbytes</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name>nbytes</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>memset</name><argument_list>(<argument><expr><call><name>RCAST</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><call><name>RCAST</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <name>nbytes</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>private</name> <name>uint32_t</name></type>
<name>do_ops</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>intmax_t</name></type> <name>lhs</name></decl></parameter>, <parameter><decl><type><name>intmax_t</name></type> <name>off</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>intmax_t</name></type> <name>offset</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>off</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>in_op</name></name> <operator>&amp;</operator> <name>FILE_OPS_MASK</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FILE_OPAND</name></expr>:</case>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>lhs</name> <operator>&amp;</operator> <name>off</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_OPOR</name></expr>:</case>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>lhs</name> <operator>|</operator> <name>off</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_OPXOR</name></expr>:</case>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>lhs</name> <operator>^</operator> <name>off</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_OPADD</name></expr>:</case>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>lhs</name> <operator>+</operator> <name>off</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_OPMINUS</name></expr>:</case>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>lhs</name> <operator>-</operator> <name>off</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_OPMULTIPLY</name></expr>:</case>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>lhs</name> <operator>*</operator> <name>off</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_OPDIVIDE</name></expr>:</case>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>lhs</name> <operator>/</operator> <name>off</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_OPMODULO</name></expr>:</case>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>lhs</name> <operator>%</operator> <name>off</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>lhs</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>in_op</name></name> <operator>&amp;</operator> <name>FILE_OPINVERSE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>~</operator><name>offset</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>CAST</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>private</name> <name>int</name></type>
<name>msetoffset</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>magic</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>buffer</name></name> <modifier>*</modifier></type><name>bb</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>buffer</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>o</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>cont_level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int32_t</name></type> <name>offset</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>OFFNEGATIVE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>-</operator><name><name>m</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cont_level</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <operator>(</operator><name>OFFADD</name><operator>|</operator><name>INDIROFFADD</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>normal</name>;</goto></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
file_error(ms, 0, "negative offset %d at continuation"
"level %u", m-&gt;offset, cont_level);
return -1;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>buffer_fill</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>o</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>file_magerror</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"non zero offset %"</literal> <name>SIZE_T_FORMAT</name>
<literal type="string">"u at level %u"</literal></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><name>cont_level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>CAST</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>b</name><operator>-&gt;</operator><name>elen</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>buffer_init</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>ebuf</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>elen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>eoffset</name></name> <operator>=</operator> <name><name>ms</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>int32_t</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>elen</name></name> <operator>-</operator> <name><name>m</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cont_level</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<label><name>normal</name>:</label>

<expr_stmt><expr><call><name>buffer_init</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>fbuf</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>flen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>eoffset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name><name>ms</name><operator>-&gt;</operator><name>eoffset</name></name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAGIC_DEBUG</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"bb=[%p,%"</literal> <name>SIZE_T_FORMAT</name> <literal type="string">"u,%"</literal>
<name>SIZE_T_FORMAT</name> <literal type="string">"u], %d [b=%p,%"</literal>
<name>SIZE_T_FORMAT</name> <literal type="string">"u,%"</literal> <name>SIZE_T_FORMAT</name> <literal type="string">"u], [o=%#x, c=%d]\n"</literal></expr></argument>,
<argument><expr><name><name>bb</name><operator>-&gt;</operator><name>fbuf</name></name></expr></argument>, <argument><expr><name><name>bb</name><operator>-&gt;</operator><name>flen</name></name></expr></argument>, <argument><expr><name><name>bb</name><operator>-&gt;</operator><name>elen</name></name></expr></argument>, <argument><expr><name><name>ms</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>fbuf</name></name></expr></argument>,
<argument><expr><name><name>b</name><operator>-&gt;</operator><name>flen</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>elen</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>cont_level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>private</name> <name>int</name></type>
<name>save_cont</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>cont</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <name><name>ms</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>len</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>li</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>li</name></name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr>struct <name>level_info</name> <operator>*</operator></expr></argument>, <argument><expr><call><name>malloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ms</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>li</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <operator>*</operator><name>c</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>li</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>li</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>private</name> <name>void</name></type>
<name>restore_cont</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>cont</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>li</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <operator>*</operator><name>c</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>private</name> <name>int</name></type>
<name>mget</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>magic</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>buffer</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nbytes</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>o</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>cont_level</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flip</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>indir_count</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>name_count</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>printed_something</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>need_separator</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>returnval</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>found_match</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>eoffset</name></decl>, <decl><type ref="prev"/><name>offset</name> <init>= <expr><name><name>ms</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>buffer</name></name></type> <name>bb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>intmax_t</name></type> <name>lhs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>file_pushbuf_t</name> <modifier>*</modifier></type><name>pb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>, <decl><type ref="prev"/><name>oneed_separator</name></decl>, <decl><type ref="prev"/><name>in_type</name></decl>, <decl><type ref="prev"/><name>nfound_match</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>union</name> <name>VALUETYPE</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>ms</name><operator>-&gt;</operator><name>ms_value</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>mlist</name></name></type> <name>ml</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>mlp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>cont</name></name></type> <name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>indir_count</name> <operator>&gt;=</operator> <name><name>ms</name><operator>-&gt;</operator><name>indir_max</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>file_error</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"indirect count (%hu) exceeded"</literal></expr></argument>,
<argument><expr><operator>*</operator><name>indir_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>name_count</name> <operator>&gt;=</operator> <name><name>ms</name><operator>-&gt;</operator><name>name_max</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>file_error</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"name use count (%hu) exceeded"</literal></expr></argument>,
<argument><expr><operator>*</operator><name>name_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><call><name>mcopy</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>INDIR</name></expr></argument>, <argument><expr><name>s</name></expr></argument>,
<argument><expr><call><name>CAST</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <name>o</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>CAST</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAGIC_DEBUG</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"mget(type=%d, flag=%#x, offset=%u, o=%"</literal>
<name>SIZE_T_FORMAT</name> <literal type="string">"u, "</literal> <literal type="string">"nbytes=%"</literal> <name>SIZE_T_FORMAT</name>
<literal type="string">"u, il=%hu, nc=%hu)\n"</literal></expr></argument>,
<argument><expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>flag</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>,
<argument><expr><operator>*</operator><name>indir_count</name></expr></argument>, <argument><expr><operator>*</operator><name>name_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mdebug</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><call><name>RCAST</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><call><name>RCAST</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>union <name>VALUETYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>COMPILE_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>file_mdump</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>INDIR</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>intmax_t</name></type> <name>off</name> <init>= <expr><name><name>m</name><operator>-&gt;</operator><name>in_offset</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>sgn</name> <init>= <expr><name><name>m</name><operator>-&gt;</operator><name>in_op</name></name> <operator>&amp;</operator> <name>FILE_OPSIGNED</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>in_op</name></name> <operator>&amp;</operator> <name>FILE_OPINDIRECT</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>union</name> <name>VALUETYPE</name></name> <modifier>*</modifier></type><name>q</name> <init>= <expr><call><name>CAST</name><argument_list>(<argument><expr><specifier>const</specifier> union <name>VALUETYPE</name> <operator>*</operator></expr></argument>,
<argument><expr><call><name>RCAST</name><argument_list>(<argument><expr><specifier>const</specifier> <name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>s</name> <operator>+</operator> <name>offset</name> <operator>+</operator> <name>off</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>op</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>op</name> <operator>=</operator> <call><name>cvt_flip</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>in_type</name></name></expr></argument>, <argument><expr><name>flip</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FILE_BYTE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>OFFSET_OOB</name><argument_list>(<argument><expr><name>nbytes</name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>off</name> <operator>=</operator> <call><name>SEXT</name><argument_list>(<argument><expr><name>sgn</name></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name><name>q</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_SHORT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>OFFSET_OOB</name><argument_list>(<argument><expr><name>nbytes</name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>off</name> <operator>=</operator> <call><name>SEXT</name><argument_list>(<argument><expr><name>sgn</name></expr></argument>,<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name><name>q</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_BESHORT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>OFFSET_OOB</name><argument_list>(<argument><expr><name>nbytes</name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>off</name> <operator>=</operator> <call><name>SEXT</name><argument_list>(<argument><expr><name>sgn</name></expr></argument>,<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><call><name>BE16</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_LESHORT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>OFFSET_OOB</name><argument_list>(<argument><expr><name>nbytes</name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>off</name> <operator>=</operator> <call><name>SEXT</name><argument_list>(<argument><expr><name>sgn</name></expr></argument>,<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><call><name>LE16</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_LONG</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>OFFSET_OOB</name><argument_list>(<argument><expr><name>nbytes</name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>off</name> <operator>=</operator> <call><name>SEXT</name><argument_list>(<argument><expr><name>sgn</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>,<argument><expr><name><name>q</name><operator>-&gt;</operator><name>l</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_BELONG</name></expr>:</case>
<case>case <expr><name>FILE_BEID3</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>OFFSET_OOB</name><argument_list>(<argument><expr><name>nbytes</name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>off</name> <operator>=</operator> <call><name>SEXT</name><argument_list>(<argument><expr><name>sgn</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>,<argument><expr><call><name>BE32</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_LEID3</name></expr>:</case>
<case>case <expr><name>FILE_LELONG</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>OFFSET_OOB</name><argument_list>(<argument><expr><name>nbytes</name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>off</name> <operator>=</operator> <call><name>SEXT</name><argument_list>(<argument><expr><name>sgn</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>,<argument><expr><call><name>LE32</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_MELONG</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>OFFSET_OOB</name><argument_list>(<argument><expr><name>nbytes</name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>off</name> <operator>=</operator> <call><name>SEXT</name><argument_list>(<argument><expr><name>sgn</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>,<argument><expr><call><name>ME32</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_BEQUAD</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>OFFSET_OOB</name><argument_list>(<argument><expr><name>nbytes</name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>off</name> <operator>=</operator> <call><name>SEXT</name><argument_list>(<argument><expr><name>sgn</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>,<argument><expr><call><name>BE64</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_LEQUAD</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>OFFSET_OOB</name><argument_list>(<argument><expr><name>nbytes</name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <name>off</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>off</name> <operator>=</operator> <call><name>SEXT</name><argument_list>(<argument><expr><name>sgn</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>,<argument><expr><call><name>LE64</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAGIC_DEBUG</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"bad op=%d\n"</literal></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAGIC_DEBUG</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"indirect offs=%jd\n"</literal></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<switch>switch <condition>(<expr><name>in_type</name> <operator>=</operator> <call><name>cvt_flip</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>in_type</name></name></expr></argument>, <argument><expr><name>flip</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FILE_BYTE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>OFFSET_OOB</name><argument_list>(<argument><expr><name>nbytes</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>do_ops</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><call><name>SEXT</name><argument_list>(<argument><expr><name>sgn</name></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>,<argument><expr><name><name>p</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_BESHORT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>OFFSET_OOB</name><argument_list>(<argument><expr><name>nbytes</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>do_ops</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><call><name>SEXT</name><argument_list>(<argument><expr><name>sgn</name></expr></argument>,<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><call><name>BE16</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_LESHORT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>OFFSET_OOB</name><argument_list>(<argument><expr><name>nbytes</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>do_ops</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><call><name>SEXT</name><argument_list>(<argument><expr><name>sgn</name></expr></argument>,<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><call><name>LE16</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_SHORT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>OFFSET_OOB</name><argument_list>(<argument><expr><name>nbytes</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>do_ops</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><call><name>SEXT</name><argument_list>(<argument><expr><name>sgn</name></expr></argument>,<argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><name><name>p</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_BELONG</name></expr>:</case>
<case>case <expr><name>FILE_BEID3</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>OFFSET_OOB</name><argument_list>(<argument><expr><name>nbytes</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>lhs</name> <operator>=</operator> <call><name>BE32</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>in_type</name> <operator>==</operator> <name>FILE_BEID3</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>lhs</name> <operator>=</operator> <call><name>cvt_id3</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><call><name>CAST</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>lhs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>do_ops</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><call><name>SEXT</name><argument_list>(<argument><expr><name>sgn</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>,<argument><expr><name>lhs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_LELONG</name></expr>:</case>
<case>case <expr><name>FILE_LEID3</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>OFFSET_OOB</name><argument_list>(<argument><expr><name>nbytes</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>lhs</name> <operator>=</operator> <call><name>LE32</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>in_type</name> <operator>==</operator> <name>FILE_LEID3</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>lhs</name> <operator>=</operator> <call><name>cvt_id3</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><call><name>CAST</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>lhs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>do_ops</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><call><name>SEXT</name><argument_list>(<argument><expr><name>sgn</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>,<argument><expr><name>lhs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_MELONG</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>OFFSET_OOB</name><argument_list>(<argument><expr><name>nbytes</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>do_ops</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><call><name>SEXT</name><argument_list>(<argument><expr><name>sgn</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>,<argument><expr><call><name>ME32</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_LONG</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>OFFSET_OOB</name><argument_list>(<argument><expr><name>nbytes</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>do_ops</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><call><name>SEXT</name><argument_list>(<argument><expr><name>sgn</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>,<argument><expr><name><name>p</name><operator>-&gt;</operator><name>l</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_LEQUAD</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>OFFSET_OOB</name><argument_list>(<argument><expr><name>nbytes</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>do_ops</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><call><name>SEXT</name><argument_list>(<argument><expr><name>sgn</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>,<argument><expr><call><name>LE64</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>FILE_BEQUAD</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>OFFSET_OOB</name><argument_list>(<argument><expr><name>nbytes</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>do_ops</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><call><name>SEXT</name><argument_list>(<argument><expr><name>sgn</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>,<argument><expr><call><name>BE64</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAGIC_DEBUG</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"bad in_type=%d\n"</literal></expr></argument>, <argument><expr><name>in_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>INDIROFFADD</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cont_level</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAGIC_DEBUG</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"indirect *zero* cont_level\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>ms</name><operator>-&gt;</operator><name>c</name><operator>.</operator><name>li</name><index>[<expr><name>cont_level</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>off</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAGIC_DEBUG</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"indirect *zero* offset\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAGIC_DEBUG</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"indirect +offs=%u\n"</literal></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>mcopy</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAGIC_DEBUG</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>mdebug</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><call><name>RCAST</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><call><name>RCAST</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>union <name>VALUETYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>COMPILE_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>file_mdump</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<switch>switch <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FILE_BYTE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>OFFSET_OOB</name><argument_list>(<argument><expr><name>nbytes</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>FILE_SHORT</name></expr>:</case>
<case>case <expr><name>FILE_BESHORT</name></expr>:</case>
<case>case <expr><name>FILE_LESHORT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>OFFSET_OOB</name><argument_list>(<argument><expr><name>nbytes</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>FILE_LONG</name></expr>:</case>
<case>case <expr><name>FILE_BELONG</name></expr>:</case>
<case>case <expr><name>FILE_LELONG</name></expr>:</case>
<case>case <expr><name>FILE_MELONG</name></expr>:</case>
<case>case <expr><name>FILE_DATE</name></expr>:</case>
<case>case <expr><name>FILE_BEDATE</name></expr>:</case>
<case>case <expr><name>FILE_LEDATE</name></expr>:</case>
<case>case <expr><name>FILE_MEDATE</name></expr>:</case>
<case>case <expr><name>FILE_LDATE</name></expr>:</case>
<case>case <expr><name>FILE_BELDATE</name></expr>:</case>
<case>case <expr><name>FILE_LELDATE</name></expr>:</case>
<case>case <expr><name>FILE_MELDATE</name></expr>:</case>
<case>case <expr><name>FILE_FLOAT</name></expr>:</case>
<case>case <expr><name>FILE_BEFLOAT</name></expr>:</case>
<case>case <expr><name>FILE_LEFLOAT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>OFFSET_OOB</name><argument_list>(<argument><expr><name>nbytes</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>FILE_DOUBLE</name></expr>:</case>
<case>case <expr><name>FILE_BEDOUBLE</name></expr>:</case>
<case>case <expr><name>FILE_LEDOUBLE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>OFFSET_OOB</name><argument_list>(<argument><expr><name>nbytes</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>FILE_GUID</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>OFFSET_OOB</name><argument_list>(<argument><expr><name>nbytes</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>FILE_STRING</name></expr>:</case>
<case>case <expr><name>FILE_PSTRING</name></expr>:</case>
<case>case <expr><name>FILE_SEARCH</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>OFFSET_OOB</name><argument_list>(<argument><expr><name>nbytes</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>vallen</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>FILE_REGEX</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>nbytes</name> <operator>&lt;</operator> <name>offset</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>FILE_INDIRECT</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>&amp;</operator> <name>INDIRECT_RELATIVE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nbytes</name> <operator>&lt;</operator> <name>offset</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pb</name> <operator>=</operator> <call><name>file_push_buffer</name><argument_list>(<argument><expr><name>ms</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>indir_count</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>bb</name> <operator>=</operator> <operator>*</operator><name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bb</name><operator>.</operator><name>fbuf</name></name> <operator>=</operator> <name>s</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bb</name><operator>.</operator><name>flen</name></name> <operator>=</operator> <name>nbytes</name> <operator>-</operator> <name>offset</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>mlp</name> <operator>=</operator> <name><name>ms</name><operator>-&gt;</operator><name>mlist</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>next</name></expr>;</init> <condition><expr><name>mlp</name> <operator>!=</operator> <name><name>ms</name><operator>-&gt;</operator><name>mlist</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</condition>
<incr><expr><name>mlp</name> <operator>=</operator> <name><name>mlp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rv</name> <operator>=</operator> <call><name>match</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name><name>mlp</name><operator>-&gt;</operator><name>magic</name></name></expr></argument>, <argument><expr><name><name>mlp</name><operator>-&gt;</operator><name>nmagic</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>BINTEST</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>indir_count</name></expr></argument>, <argument><expr><name>name_count</name></expr></argument>,
<argument><expr><name>printed_something</name></expr></argument>, <argument><expr><name>need_separator</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAGIC_DEBUG</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"indirect @offs=%u[%d]\n"</literal></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rbuf</name> <operator>=</operator> <call><name>file_pop_buffer</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rbuf</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>ms</name><operator>-&gt;</operator><name>event_flags</name></name> <operator>&amp;</operator> <name>EVENT_HAD_ERR</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAGIC_NODESC</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<call><name>file_printf</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><call><name>F</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>rbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>rbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>rbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>rbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>

<case>case <expr><name>FILE_USE</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>nbytes</name> <operator>&lt;</operator> <name>offset</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>rbuf</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>s</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>rbuf</name> <operator>==</operator> <literal type="char">'^'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>rbuf</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>flip</name> <operator>=</operator> <operator>!</operator><name>flip</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>file_magicfind</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>rbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ml</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>file_error</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"cannot find entry `%s'"</literal></expr></argument>, <argument><expr><name>rbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>save_cont</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>file_error</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"can't allocate continuation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>oneed_separator</name> <operator>=</operator> <operator>*</operator><name>need_separator</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>NOSPACE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>need_separator</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nfound_match</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>name_count</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>eoffset</name> <operator>=</operator> <name><name>ms</name><operator>-&gt;</operator><name>eoffset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>match</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name><name>ml</name><operator>.</operator><name>magic</name></name></expr></argument>, <argument><expr><name><name>ml</name><operator>.</operator><name>nmagic</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <name>o</name></expr></argument>,
<argument><expr><name>mode</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>flip</name></expr></argument>, <argument><expr><name>indir_count</name></expr></argument>, <argument><expr><name>name_count</name></expr></argument>,
<argument><expr><name>printed_something</name></expr></argument>, <argument><expr><name>need_separator</name></expr></argument>, <argument><expr><name>returnval</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>nfound_match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>ms_value</name><operator>.</operator><name>q</name></name> <operator>=</operator> <name>nfound_match</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>name_count</name><operator>)</operator><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>found_match</name> <operator>|=</operator> <name>nfound_match</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>restore_cont</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>need_separator</name> <operator>=</operator> <name>oneed_separator</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>eoffset</name></name> <operator>=</operator> <name>eoffset</name></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>

<case>case <expr><name>FILE_NAME</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAGIC_NODESC</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>desc</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><name>FILE_DER</name></expr>:</case>
<case>case <expr><name>FILE_DEFAULT</name></expr>:</case>
<case>case <expr><name>FILE_CLEAR</name></expr>:</case>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mconvert</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>flip</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>private</name> <name>uint64_t</name></type>
<name>file_strncmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>maxlen</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>






<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>a</name> <init>= <macro><name>RCAST</name><argument_list>(<argument>const unsigned char *</argument>, <argument>s1</argument>)</argument_list></macro></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>b</name> <init>= <macro><name>RCAST</name><argument_list>(<argument>const unsigned char *</argument>, <argument>s2</argument>)</argument_list></macro></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>ws</name> <init>= <expr><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>STRING_COMPACT_WHITESPACE</name> <operator>|</operator>
<name>STRING_COMPACT_OPTIONAL_WHITESPACE</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>eb</name> <init>= <expr><name>b</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>ws</name></expr> ?</condition><then> <expr><name>maxlen</name></expr> </then><else>: <expr><name>len</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>v</name></decl>;</decl_stmt>





<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><literal type="number">0L</literal> <operator>==</operator> <name>flags</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><operator>--</operator><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>v</name> <operator>=</operator> <operator>*</operator><name>b</name><operator>++</operator> <operator>-</operator> <operator>*</operator><name>a</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt></block_content></block></while>
</block_content>}</block></if>
<else>else <block>{<block_content>
<while>while <condition>(<expr><operator>--</operator><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>&gt;=</operator> <name>eb</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>STRING_IGNORE_LOWERCASE</name><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>islower</name><argument_list>(<argument><expr><operator>*</operator><name>a</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>v</name> <operator>=</operator> <call><name>tolower</name><argument_list>(<argument><expr><operator>*</operator><name>b</name><operator>++</operator></expr></argument>)</argument_list></call> <operator>-</operator> <operator>*</operator><name>a</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>STRING_IGNORE_UPPERCASE</name><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>isupper</name><argument_list>(<argument><expr><operator>*</operator><name>a</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>v</name> <operator>=</operator> <call><name>toupper</name><argument_list>(<argument><expr><operator>*</operator><name>b</name><operator>++</operator></expr></argument>)</argument_list></call> <operator>-</operator> <operator>*</operator><name>a</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>STRING_COMPACT_WHITESPACE</name><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>a</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>b</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>a</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<while>while <condition>(<expr><name>b</name> <operator>&lt;</operator> <name>eb</name> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>b</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>STRING_COMPACT_OPTIONAL_WHITESPACE</name><operator>)</operator> <operator>&amp;&amp;</operator>
<call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>a</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>a</name><operator>++</operator></expr>;</expr_stmt>
<while>while <condition>(<expr><name>b</name> <operator>&lt;</operator> <name>eb</name> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>b</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>v</name> <operator>=</operator> <operator>*</operator><name>b</name><operator>++</operator> <operator>-</operator> <operator>*</operator><name>a</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>v</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>STRING_FULL_WORD</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>b</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>v</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>private</name> <name>uint64_t</name></type>
<name>file_strncmp16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>maxlen</name></decl></parameter>,
<parameter><decl><type><name>uint32_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>





<expr_stmt><expr><name>flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><call><name>file_strncmp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>private</name> <name>int</name></type>
<name>magiccheck</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>magic</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>l</name> <init>= <expr><name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>q</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>fl</name></decl>, <decl><type ref="prev"/><name>fv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>dl</name></decl>, <decl><type ref="prev"/><name>dv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>matched</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>union</name> <name>VALUETYPE</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>ms</name><operator>-&gt;</operator><name>ms_value</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FILE_BYTE</name></expr>:</case>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>b</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FILE_SHORT</name></expr>:</case>
<case>case <expr><name>FILE_BESHORT</name></expr>:</case>
<case>case <expr><name>FILE_LESHORT</name></expr>:</case>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FILE_LONG</name></expr>:</case>
<case>case <expr><name>FILE_BELONG</name></expr>:</case>
<case>case <expr><name>FILE_LELONG</name></expr>:</case>
<case>case <expr><name>FILE_MELONG</name></expr>:</case>
<case>case <expr><name>FILE_DATE</name></expr>:</case>
<case>case <expr><name>FILE_BEDATE</name></expr>:</case>
<case>case <expr><name>FILE_LEDATE</name></expr>:</case>
<case>case <expr><name>FILE_MEDATE</name></expr>:</case>
<case>case <expr><name>FILE_LDATE</name></expr>:</case>
<case>case <expr><name>FILE_BELDATE</name></expr>:</case>
<case>case <expr><name>FILE_LELDATE</name></expr>:</case>
<case>case <expr><name>FILE_MELDATE</name></expr>:</case>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>l</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FILE_QUAD</name></expr>:</case>
<case>case <expr><name>FILE_LEQUAD</name></expr>:</case>
<case>case <expr><name>FILE_BEQUAD</name></expr>:</case>
<case>case <expr><name>FILE_QDATE</name></expr>:</case>
<case>case <expr><name>FILE_BEQDATE</name></expr>:</case>
<case>case <expr><name>FILE_LEQDATE</name></expr>:</case>
<case>case <expr><name>FILE_QLDATE</name></expr>:</case>
<case>case <expr><name>FILE_BEQLDATE</name></expr>:</case>
<case>case <expr><name>FILE_LEQLDATE</name></expr>:</case>
<case>case <expr><name>FILE_QWDATE</name></expr>:</case>
<case>case <expr><name>FILE_BEQWDATE</name></expr>:</case>
<case>case <expr><name>FILE_LEQWDATE</name></expr>:</case>
<case>case <expr><name>FILE_OFFSET</name></expr>:</case>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>q</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FILE_FLOAT</name></expr>:</case>
<case>case <expr><name>FILE_BEFLOAT</name></expr>:</case>
<case>case <expr><name>FILE_LEFLOAT</name></expr>:</case>
<expr_stmt><expr><name>fl</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>f</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>fv</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>f</name></name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>reln</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'x'</literal></expr>:</case>
<expr_stmt><expr><name>matched</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'!'</literal></expr>:</case>
<expr_stmt><expr><name>matched</name> <operator>=</operator> <name>fv</name> <operator>!=</operator> <name>fl</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'='</literal></expr>:</case>
<expr_stmt><expr><name>matched</name> <operator>=</operator> <name>fv</name> <operator>==</operator> <name>fl</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'&gt;'</literal></expr>:</case>
<expr_stmt><expr><name>matched</name> <operator>=</operator> <name>fv</name> <operator>&gt;</operator> <name>fl</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'&lt;'</literal></expr>:</case>
<expr_stmt><expr><name>matched</name> <operator>=</operator> <name>fv</name> <operator>&lt;</operator> <name>fl</name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>file_magerror</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"cannot happen with float: invalid relation `%c'"</literal></expr></argument>,
<argument><expr><name><name>m</name><operator>-&gt;</operator><name>reln</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>matched</name></expr>;</return>

<case>case <expr><name>FILE_DOUBLE</name></expr>:</case>
<case>case <expr><name>FILE_BEDOUBLE</name></expr>:</case>
<case>case <expr><name>FILE_LEDOUBLE</name></expr>:</case>
<expr_stmt><expr><name>dl</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>d</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dv</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>d</name></name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>reln</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'x'</literal></expr>:</case>
<expr_stmt><expr><name>matched</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'!'</literal></expr>:</case>
<expr_stmt><expr><name>matched</name> <operator>=</operator> <name>dv</name> <operator>!=</operator> <name>dl</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'='</literal></expr>:</case>
<expr_stmt><expr><name>matched</name> <operator>=</operator> <name>dv</name> <operator>==</operator> <name>dl</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'&gt;'</literal></expr>:</case>
<expr_stmt><expr><name>matched</name> <operator>=</operator> <name>dv</name> <operator>&gt;</operator> <name>dl</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'&lt;'</literal></expr>:</case>
<expr_stmt><expr><name>matched</name> <operator>=</operator> <name>dv</name> <operator>&lt;</operator> <name>dl</name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>file_magerror</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"cannot happen with double: invalid relation `%c'"</literal></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>reln</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><name>matched</name></expr>;</return>

<case>case <expr><name>FILE_DEFAULT</name></expr>:</case>
<case>case <expr><name>FILE_CLEAR</name></expr>:</case>
<expr_stmt><expr><name>l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FILE_STRING</name></expr>:</case>
<case>case <expr><name>FILE_PSTRING</name></expr>:</case>
<expr_stmt><expr><name>l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>file_strncmp</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><call><name>CAST</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>vallen</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FILE_BESTRING16</name></expr>:</case>
<case>case <expr><name>FILE_LESTRING16</name></expr>:</case>
<expr_stmt><expr><name>l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>file_strncmp16</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><call><name>CAST</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>vallen</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>FILE_SEARCH</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>slen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>s</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>slen</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>vallen</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_MEMMEM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>slen</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>found</name></decl>;</decl_stmt>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>str_range</name></name> <operator>+</operator> <name>slen</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>str_range</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>s_len</name></name> <operator>&lt;</operator> <name>idx</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>s_len</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>found</name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><call><name>memmem</name><argument_list>(<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>,
<argument><expr><name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>found</name> <operator>-</operator> <name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>s</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>offset</name></name> <operator>+=</operator> <name>idx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>rm_len</name></name> <operator>=</operator> <name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>s_len</name></name> <operator>-</operator> <name>idx</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>m</name><operator>-&gt;</operator><name>str_range</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>idx</name> <operator>&lt;</operator> <name><name>m</name><operator>-&gt;</operator><name>str_range</name></name></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>slen</name> <operator>+</operator> <name>idx</name> <operator>&gt;</operator> <name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>s_len</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>file_strncmp</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>s</name></name> <operator>+</operator> <name>idx</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>,
<argument><expr><name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>s_len</name></name> <operator>-</operator> <name>idx</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>offset</name></name> <operator>+=</operator> <name>idx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>rm_len</name></name> <operator>=</operator> <name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>s_len</name></name> <operator>-</operator> <name>idx</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>FILE_REGEX</name></expr>:</case> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>file_regex_t</name></type> <name>rx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>search</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>s</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>file_regcomp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rx</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>s</name></name></expr></argument>,
<argument><expr><name>REG_EXTENDED</name><operator>|</operator><name>REG_NEWLINE</name><operator>|</operator>
<operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>m</name><operator>-&gt;</operator><name>str_flags</name></name> <operator>&amp;</operator> <name>STRING_IGNORE_CASE</name><operator>)</operator></expr> ?</condition><then> <expr><name>REG_ICASE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>file_regerror</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rx</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name>regmatch_t</name></type> <name>pmatch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>slen</name> <init>= <expr><name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>s_len</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>copy</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>slen</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>copy</name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><call><name>malloc</name><argument_list>(<argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>copy</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>file_regfree</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>file_error</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"can't allocate %"</literal> <name>SIZE_T_FORMAT</name> <literal type="string">"u bytes"</literal></expr></argument>,
<argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>copy</name></expr></argument>, <argument><expr><name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>copy</name><index>[<expr><operator>--</operator><name>slen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>search</name> <operator>=</operator> <name>copy</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>search</name> <operator>=</operator> <call><name>CCAST</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>copy</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>file_regexec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rx</name></expr></argument>, <argument><expr><call><name>RCAST</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>search</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pmatch</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0</literal></expr>:</case>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>s</name></name> <operator>+=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name><name>pmatch</name><operator>.</operator><name>rm_so</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>offset</name></name> <operator>+=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name><name>pmatch</name><operator>.</operator><name>rm_so</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ms</name><operator>-&gt;</operator><name>search</name><operator>.</operator><name>rm_len</name></name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>,
<argument><expr><name><name>pmatch</name><operator>.</operator><name>rm_eo</name></name> <operator>-</operator> <name><name>pmatch</name><operator>.</operator><name>rm_so</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>REG_NOMATCH</name></expr>:</case>
<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>file_regerror</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rx</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>file_regfree</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><name>FILE_USE</name></expr>:</case>
<return>return <expr><name><name>ms</name><operator>-&gt;</operator><name>ms_value</name><operator>.</operator><name>q</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
<case>case <expr><name>FILE_NAME</name></expr>:</case>
<case>case <expr><name>FILE_INDIRECT</name></expr>:</case>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<case>case <expr><name>FILE_DER</name></expr>:</case>
<expr_stmt><expr><name>matched</name> <operator>=</operator> <call><name>der_cmp</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>matched</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAGIC_DEBUG</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"EOF comparing DER entries"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>matched</name></expr>;</return>
<case>case <expr><name>FILE_GUID</name></expr>:</case>
<expr_stmt><expr><name>l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>guid</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>guid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>guid</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><call><name>file_magerror</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"invalid type %d in magiccheck()"</literal></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>file_signextend</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>reln</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'x'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAGIC_DEBUG</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>INT64_T_FORMAT</name>
<literal type="string">"u == *any* = 1\n"</literal></expr></argument>, <argument><expr><macro><name>CAST</name><argument_list>(<argument>unsigned long long</argument>, <argument>v</argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>matched</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'!'</literal></expr>:</case>
<expr_stmt><expr><name>matched</name> <operator>=</operator> <name>v</name> <operator>!=</operator> <name>l</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAGIC_DEBUG</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>INT64_T_FORMAT</name> <literal type="string">"u != %"</literal>
<name>INT64_T_FORMAT</name> <literal type="string">"u = %d\n"</literal></expr></argument>,
<argument><expr><macro><name>CAST</name><argument_list>(<argument>unsigned long long</argument>, <argument>v</argument>)</argument_list></macro></expr></argument>,
<argument><expr><macro><name>CAST</name><argument_list>(<argument>unsigned long long</argument>, <argument>l</argument>)</argument_list></macro></expr></argument>, <argument><expr><name>matched</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'='</literal></expr>:</case>
<expr_stmt><expr><name>matched</name> <operator>=</operator> <name>v</name> <operator>==</operator> <name>l</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAGIC_DEBUG</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>INT64_T_FORMAT</name> <literal type="string">"u == %"</literal>
<name>INT64_T_FORMAT</name> <literal type="string">"u = %d\n"</literal></expr></argument>,
<argument><expr><macro><name>CAST</name><argument_list>(<argument>unsigned long long</argument>, <argument>v</argument>)</argument_list></macro></expr></argument>,
<argument><expr><macro><name>CAST</name><argument_list>(<argument>unsigned long long</argument>, <argument>l</argument>)</argument_list></macro></expr></argument>, <argument><expr><name>matched</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'&gt;'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>UNSIGNED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>matched</name> <operator>=</operator> <name>v</name> <operator>&gt;</operator> <name>l</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAGIC_DEBUG</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>INT64_T_FORMAT</name>
<literal type="string">"u &gt; %"</literal> <name>INT64_T_FORMAT</name> <literal type="string">"u = %d\n"</literal></expr></argument>,
<argument><expr><macro><name>CAST</name><argument_list>(<argument>unsigned long long</argument>, <argument>v</argument>)</argument_list></macro></expr></argument>,
<argument><expr><macro><name>CAST</name><argument_list>(<argument>unsigned long long</argument>, <argument>l</argument>)</argument_list></macro></expr></argument>, <argument><expr><name>matched</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>matched</name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>int64_t</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>int64_t</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAGIC_DEBUG</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>INT64_T_FORMAT</name>
<literal type="string">"d &gt; %"</literal> <name>INT64_T_FORMAT</name> <literal type="string">"d = %d\n"</literal></expr></argument>,
<argument><expr><macro><name>CAST</name><argument_list>(<argument>long long</argument>, <argument>v</argument>)</argument_list></macro></expr></argument>,
<argument><expr><macro><name>CAST</name><argument_list>(<argument>long long</argument>, <argument>l</argument>)</argument_list></macro></expr></argument>, <argument><expr><name>matched</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'&lt;'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>UNSIGNED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>matched</name> <operator>=</operator> <name>v</name> <operator>&lt;</operator> <name>l</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAGIC_DEBUG</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>INT64_T_FORMAT</name>
<literal type="string">"u &lt; %"</literal> <name>INT64_T_FORMAT</name> <literal type="string">"u = %d\n"</literal></expr></argument>,
<argument><expr><macro><name>CAST</name><argument_list>(<argument>unsigned long long</argument>, <argument>v</argument>)</argument_list></macro></expr></argument>,
<argument><expr><macro><name>CAST</name><argument_list>(<argument>unsigned long long</argument>, <argument>l</argument>)</argument_list></macro></expr></argument>, <argument><expr><name>matched</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>matched</name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>int64_t</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>int64_t</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAGIC_DEBUG</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>INT64_T_FORMAT</name>
<literal type="string">"d &lt; %"</literal> <name>INT64_T_FORMAT</name> <literal type="string">"d = %d\n"</literal></expr></argument>,
<argument><expr><macro><name>CAST</name><argument_list>(<argument>long long</argument>, <argument>v</argument>)</argument_list></macro></expr></argument>,
<argument><expr><macro><name>CAST</name><argument_list>(<argument>long long</argument>, <argument>l</argument>)</argument_list></macro></expr></argument>, <argument><expr><name>matched</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'&amp;'</literal></expr>:</case>
<expr_stmt><expr><name>matched</name> <operator>=</operator> <operator>(</operator><name>v</name> <operator>&amp;</operator> <name>l</name><operator>)</operator> <operator>==</operator> <name>l</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAGIC_DEBUG</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"((%"</literal> <name>INT64_T_FORMAT</name> <literal type="string">"x &amp; %"</literal>
<name>INT64_T_FORMAT</name> <literal type="string">"x) == %"</literal> <name>INT64_T_FORMAT</name>
<literal type="string">"x) = %d\n"</literal></expr></argument>, <argument><expr><macro><name>CAST</name><argument_list>(<argument>unsigned long long</argument>, <argument>v</argument>)</argument_list></macro></expr></argument>,
<argument><expr><macro><name>CAST</name><argument_list>(<argument>unsigned long long</argument>, <argument>l</argument>)</argument_list></macro></expr></argument>,
<argument><expr><macro><name>CAST</name><argument_list>(<argument>unsigned long long</argument>, <argument>l</argument>)</argument_list></macro></expr></argument>,
<argument><expr><name>matched</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="char">'^'</literal></expr>:</case>
<expr_stmt><expr><name>matched</name> <operator>=</operator> <operator>(</operator><name>v</name> <operator>&amp;</operator> <name>l</name><operator>)</operator> <operator>!=</operator> <name>l</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAGIC_DEBUG</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"((%"</literal> <name>INT64_T_FORMAT</name> <literal type="string">"x &amp; %"</literal>
<name>INT64_T_FORMAT</name> <literal type="string">"x) != %"</literal> <name>INT64_T_FORMAT</name>
<literal type="string">"x) = %d\n"</literal></expr></argument>, <argument><expr><macro><name>CAST</name><argument_list>(<argument>unsigned long long</argument>, <argument>v</argument>)</argument_list></macro></expr></argument>,
<argument><expr><macro><name>CAST</name><argument_list>(<argument>unsigned long long</argument>, <argument>l</argument>)</argument_list></macro></expr></argument>,
<argument><expr><macro><name>CAST</name><argument_list>(<argument>unsigned long long</argument>, <argument>l</argument>)</argument_list></macro></expr></argument>, <argument><expr><name>matched</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>file_magerror</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"cannot happen: invalid relation `%c'"</literal></expr></argument>,
<argument><expr><name><name>m</name><operator>-&gt;</operator><name>reln</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>

<return>return <expr><name>matched</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>private</name> <name>int</name></type>
<name>handle_annotation</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>magic</name></name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>firstline</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAGIC_APPLE</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>m</name><operator>-&gt;</operator><name>apple</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>print_sep</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>firstline</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"%.8s"</literal></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>apple</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAGIC_EXTENSION</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>m</name><operator>-&gt;</operator><name>ext</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>print_sep</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>firstline</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>ext</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAGIC_MIME_TYPE</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>m</name><operator>-&gt;</operator><name>mimetype</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>print_sep</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>firstline</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>varexpand</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>mimetype</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>mimetype</name></name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>private</name> <name>int</name></type>
<name>print_sep</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>firstline</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>firstline</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>




<return>return <expr><call><name>file_separator</name><argument_list>(<argument><expr><name>ms</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
