<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/file/src/cdf_time.c">

























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"file.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>FILE_RCSID</name><argument_list>(<argument><literal type="string">"@(#)$File: cdf_time.c,v 1.19 2019/03/12 20:43:05 christos Exp $"</literal></argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;err.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdf.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isleap</name><parameter_list>(<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((y) % 4) == 0) &amp;&amp; ((((y) % 100) != 0) || (((y) % 400) == 0)))</cpp:value></cpp:define>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>mdays</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">31</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>
}</block></expr></init></decl>;</decl_stmt>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>cdf_getdays</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>year</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>days</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>CDF_BASE_YEAR</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>year</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>days</name> <operator>+=</operator> <call><name>isleap</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">365</literal></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>days</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>cdf_getday</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>year</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>days</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>m</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <call><name>__arraycount</name><argument_list>(<argument><expr><name>mdays</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sub</name> <init>= <expr><name><name>mdays</name><index>[<expr><name>m</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>m</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>isleap</name><argument_list>(<argument><expr><name>year</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>days</name> <operator>&lt;</operator> <name>sub</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>days</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>days</name> <operator>-=</operator> <name>sub</name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>days</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>cdf_getmonth</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>year</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>days</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>m</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <call><name>__arraycount</name><argument_list>(<argument><expr><name>mdays</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>days</name> <operator>-=</operator> <name><name>mdays</name><index>[<expr><name>m</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>m</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>isleap</name><argument_list>(<argument><expr><name>year</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>days</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>days</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>CAST</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><call><name>CAST</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>cdf_timestamp_to_timespec</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>timespec</name></name> <modifier>*</modifier></type><name>ts</name></decl></parameter>, <parameter><decl><type><name>cdf_timestamp_t</name></type> <name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_TM_TM_ZONE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>UTC</name><index>[]</index></name> <init>= <expr><literal type="string">"UTC"</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>rdays</name></decl>;</decl_stmt>


<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>tv_nsec</name></name> <operator>=</operator> <operator>(</operator><name>t</name> <operator>%</operator> <name>CDF_TIME_PREC</name><operator>)</operator> <operator>*</operator> <literal type="number">100</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>/=</operator> <name>CDF_TIME_PREC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_sec</name></name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>t</name> <operator>%</operator> <literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>/=</operator> <literal type="number">60</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_min</name></name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>t</name> <operator>%</operator> <literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>/=</operator> <literal type="number">60</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_hour</name></name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>t</name> <operator>%</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>/=</operator> <literal type="number">24</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_year</name></name> <operator>=</operator> <call><name>CAST</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>CDF_BASE_YEAR</name> <operator>+</operator> <operator>(</operator><name>t</name> <operator>/</operator> <literal type="number">365</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rdays</name> <operator>=</operator> <call><name>cdf_getdays</name><argument_list>(<argument><expr><name><name>tm</name><operator>.</operator><name>tm_year</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>-=</operator> <name>rdays</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_mday</name></name> <operator>=</operator> <call><name>cdf_getday</name><argument_list>(<argument><expr><name><name>tm</name><operator>.</operator><name>tm_year</name></name></expr></argument>, <argument><expr><call><name>CAST</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_mon</name></name> <operator>=</operator> <call><name>cdf_getmonth</name><argument_list>(<argument><expr><name><name>tm</name><operator>.</operator><name>tm_year</name></name></expr></argument>, <argument><expr><call><name>CAST</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_wday</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_yday</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_isdst</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_TM_TM_GMTOFF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_gmtoff</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_TM_TM_ZONE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_zone</name></name> <operator>=</operator> <name>UTC</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_year</name></name> <operator>-=</operator> <literal type="number">1900</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>=</operator> <call><name>mktime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ts</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>

<name>cdf_timespec_to_timestamp</name><parameter_list>(<parameter><decl><type><name>cdf_timestamp_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timespec</name></name> <modifier>*</modifier></type><name>ts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__lint__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><operator>&amp;</operator><name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><operator>&amp;</operator><name>ts</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>notyet</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>gmtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ts</name><operator>-&gt;</operator><name>ts_sec</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>t</name> <operator>=</operator> <operator>(</operator><name><name>ts</name><operator>-&gt;</operator><name>ts_nsec</name></name> <operator>/</operator> <literal type="number">100</literal><operator>)</operator> <operator>*</operator> <name>CDF_TIME_PREC</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>t</name> <operator>=</operator> <name><name>tm</name><operator>.</operator><name>tm_sec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>t</name> <operator>+=</operator> <name><name>tm</name><operator>.</operator><name>tm_min</name></name> <operator>*</operator> <literal type="number">60</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>t</name> <operator>+=</operator> <name><name>tm</name><operator>.</operator><name>tm_hour</name></name> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>t</name> <operator>+=</operator> <name><name>tm</name><operator>.</operator><name>tm_mday</name></name> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>cdf_ctime</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>time_t</name> <modifier>*</modifier></type><name>sec</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>ctime_r</name><argument_list>(<argument><expr><name>sec</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>buf</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>, <argument><expr><literal type="string">"*Bad* %#16.16"</literal> <name>INT64_T_FORMAT</name> <literal type="string">"x\n"</literal></expr></argument>,
<argument><expr><macro><name>CAST</name><argument_list>(<argument>long long</argument>, <argument>*sec</argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TEST_TIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>ts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">25</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>cdf_timestamp_t</name></type> <name>tst</name> <init>= <expr><literal type="number">0x01A5E403C2D59C00ULL</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ref</name> <init>= <expr><literal type="string">"Sat Apr 23 01:30:00 1977"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>cdf_timestamp_to_timespec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>, <argument><expr><name>tst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>cdf_ctime</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ts</name><operator>.</operator><name>tv_sec</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>q</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>q</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>errx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Error date %s != %s\n"</literal></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
