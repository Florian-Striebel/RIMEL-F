<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/file/src/cdf.h">

































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_H_CDF_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_H_CDF_</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winsock2.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>timespec</name></cpp:macro> <cpp:value>timeval</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tv_nsec</name></cpp:macro> <cpp:value>tv_usec</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__DJGPP__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>timespec</name></cpp:macro> <cpp:value>timeval</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tv_nsec</name></cpp:macro> <cpp:value>tv_usec</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name>int32_t</name></type> <name>cdf_secid_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_LOOP_LIMIT</name></cpp:macro> <cpp:value>10000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_ELEMENT_LIMIT</name></cpp:macro> <cpp:value>100000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_SECID_NULL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_SECID_FREE</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_SECID_END_OF_CHAIN</name></cpp:macro> <cpp:value>-2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_SECID_SECTOR_ALLOCATION_TABLE</name></cpp:macro> <cpp:value>-3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_SECID_MASTER_SECTOR_ALLOCATION_TABLE</name></cpp:macro> <cpp:value>-4</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>h_magic</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_MAGIC</name></cpp:macro> <cpp:value>0xE11AB1A1E011CFD0LL</cpp:value></cpp:define>
<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>h_uuid</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>h_revision</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>h_version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>h_byte_order</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>h_sec_size_p2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>h_short_sec_size_p2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>h_unused0</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>h_num_sectors_in_sat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>h_secid_first_directory</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>h_unused1</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>h_min_size_standard_stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cdf_secid_t</name></type> <name>h_secid_first_sector_in_short_sat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>h_num_sectors_in_short_sat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cdf_secid_t</name></type> <name>h_secid_first_sector_in_master_sat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>h_num_sectors_in_master_sat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cdf_secid_t</name></type> <name><name>h_master_sat</name><index>[<expr><literal type="number">436</literal><operator>/</operator><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>cdf_header_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_SEC_SIZE</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CAST(size_t, 1 &lt;&lt; (h)-&gt;h_sec_size_p2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_SEC_POS</name><parameter_list>(<parameter><type><name>h</name></type></parameter>, <parameter><type><name>secid</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(CDF_SEC_SIZE(h) + (secid) * CDF_SEC_SIZE(h))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_SHORT_SEC_SIZE</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CAST(size_t, 1 &lt;&lt; (h)-&gt;h_short_sec_size_p2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_SHORT_SEC_POS</name><parameter_list>(<parameter><type><name>h</name></type></parameter>, <parameter><type><name>secid</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((secid) * CDF_SHORT_SEC_SIZE(h))</cpp:value></cpp:define>

<typedef>typedef <type><name>int32_t</name></type> <name>cdf_dirid_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_DIRID_NULL</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>

<typedef>typedef <type><name>int64_t</name></type> <name>cdf_timestamp_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_BASE_YEAR</name></cpp:macro> <cpp:value>1601</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_TIME_PREC</name></cpp:macro> <cpp:value>10000000</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>d_name</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>d_namelen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>d_type</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_DIR_TYPE_EMPTY</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_DIR_TYPE_USER_STORAGE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_DIR_TYPE_USER_STREAM</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_DIR_TYPE_LOCKBYTES</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_DIR_TYPE_PROPERTY</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_DIR_TYPE_ROOT_STORAGE</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>d_color</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_DIR_COLOR_READ</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_DIR_COLOR_BLACK</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>cdf_dirid_t</name></type> <name>d_left_child</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cdf_dirid_t</name></type> <name>d_right_child</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cdf_dirid_t</name></type> <name>d_storage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>d_storage_uuid</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>d_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cdf_timestamp_t</name></type> <name>d_created</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cdf_timestamp_t</name></type> <name>d_modified</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cdf_secid_t</name></type> <name>d_stream_first_sector</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>d_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>d_unused0</name></decl>;</decl_stmt>
}</block></struct></type> <name>cdf_directory_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_DIRECTORY_SIZE</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>cdf_secid_t</name> <modifier>*</modifier></type><name>sat_tab</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>sat_len</name></decl>;</decl_stmt>
}</block></struct></type> <name>cdf_sat_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>cdf_directory_t</name> <modifier>*</modifier></type><name>dir_tab</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>dir_len</name></decl>;</decl_stmt>
}</block></struct></type> <name>cdf_dir_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>sst_tab</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>sst_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>sst_dirlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>sst_ss</name></decl>;</decl_stmt>
}</block></struct></type> <name>cdf_stream_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cl_dword</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>cl_word</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>cl_two</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>cl_six</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>cdf_classid_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>uint16_t</name></type> <name>si_byte_order</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>si_zero</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>si_os_version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>si_os</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cdf_classid_t</name></type> <name>si_class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>si_count</name></decl>;</decl_stmt>
}</block></struct></type> <name>cdf_summary_info_header_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_SECTION_DECLARATION_OFFSET</name></cpp:macro> <cpp:value>0x1c</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>cdf_classid_t</name></type> <name>sd_class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>sd_offset</name></decl>;</decl_stmt>
}</block></struct></type> <name>cdf_section_declaration_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>sh_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>sh_properties</name></decl>;</decl_stmt>
}</block></struct></type> <name>cdf_section_header_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>pi_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>pi_type</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name>uint16_t</name></type> <name>_pi_u16</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int16_t</name></type> <name>_pi_s16</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>_pi_u32</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>_pi_s32</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>_pi_u64</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>_pi_s64</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cdf_timestamp_t</name></type> <name>_pi_tp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>_pi_f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>_pi_d</name></decl>;</decl_stmt>
<struct>struct <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>s_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s_buf</name></decl>;</decl_stmt>
}</block> <decl><name>_pi_str</name></decl>;</struct>
}</block> <decl><name>pi_val</name></decl>;</union>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pi_u64</name></cpp:macro> <cpp:value>pi_val._pi_u64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pi_s64</name></cpp:macro> <cpp:value>pi_val._pi_s64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pi_u32</name></cpp:macro> <cpp:value>pi_val._pi_u32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pi_s32</name></cpp:macro> <cpp:value>pi_val._pi_s32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pi_u16</name></cpp:macro> <cpp:value>pi_val._pi_u16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pi_s16</name></cpp:macro> <cpp:value>pi_val._pi_s16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pi_f</name></cpp:macro> <cpp:value>pi_val._pi_f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pi_d</name></cpp:macro> <cpp:value>pi_val._pi_d</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pi_tp</name></cpp:macro> <cpp:value>pi_val._pi_tp</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pi_str</name></cpp:macro> <cpp:value>pi_val._pi_str</cpp:value></cpp:define>
}</block></struct></type> <name>cdf_property_info_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_ROUND</name><parameter_list>(<parameter><type><name>val</name></type></parameter>, <parameter><type><name>by</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((val) + (by) - 1) &amp; ~((by) - 1))</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_EMPTY</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_NULL</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_SIGNED16</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_SIGNED32</name></cpp:macro> <cpp:value>0x00000003</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_FLOAT</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_DOUBLE</name></cpp:macro> <cpp:value>0x00000005</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_CY</name></cpp:macro> <cpp:value>0x00000006</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_DATE</name></cpp:macro> <cpp:value>0x00000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_BSTR</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_DISPATCH</name></cpp:macro> <cpp:value>0x00000009</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_ERROR</name></cpp:macro> <cpp:value>0x0000000a</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_BOOL</name></cpp:macro> <cpp:value>0x0000000b</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_VARIANT</name></cpp:macro> <cpp:value>0x0000000c</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_UNKNOWN</name></cpp:macro> <cpp:value>0x0000000d</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_DECIMAL</name></cpp:macro> <cpp:value>0x0000000e</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_SIGNED8</name></cpp:macro> <cpp:value>0x00000010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_UNSIGNED8</name></cpp:macro> <cpp:value>0x00000011</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_UNSIGNED16</name></cpp:macro> <cpp:value>0x00000012</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_UNSIGNED32</name></cpp:macro> <cpp:value>0x00000013</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_SIGNED64</name></cpp:macro> <cpp:value>0x00000014</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_UNSIGNED64</name></cpp:macro> <cpp:value>0x00000015</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_INT</name></cpp:macro> <cpp:value>0x00000016</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_UINT</name></cpp:macro> <cpp:value>0x00000017</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_VOID</name></cpp:macro> <cpp:value>0x00000018</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_HRESULT</name></cpp:macro> <cpp:value>0x00000019</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_PTR</name></cpp:macro> <cpp:value>0x0000001a</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_SAFEARRAY</name></cpp:macro> <cpp:value>0x0000001b</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_CARRAY</name></cpp:macro> <cpp:value>0x0000001c</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_USERDEFINED</name></cpp:macro> <cpp:value>0x0000001d</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_LENGTH32_STRING</name></cpp:macro> <cpp:value>0x0000001e</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_LENGTH32_WSTRING</name></cpp:macro> <cpp:value>0x0000001f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_FILETIME</name></cpp:macro> <cpp:value>0x00000040</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_BLOB</name></cpp:macro> <cpp:value>0x00000041</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_STREAM</name></cpp:macro> <cpp:value>0x00000042</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_STORAGE</name></cpp:macro> <cpp:value>0x00000043</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_STREAMED_OBJECT</name></cpp:macro> <cpp:value>0x00000044</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_STORED_OBJECT</name></cpp:macro> <cpp:value>0x00000045</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_BLOB_OBJECT</name></cpp:macro> <cpp:value>0x00000046</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_CLIPBOARD</name></cpp:macro> <cpp:value>0x00000047</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_CLSID</name></cpp:macro> <cpp:value>0x00000048</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_VECTOR</name></cpp:macro> <cpp:value>0x00001000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_ARRAY</name></cpp:macro> <cpp:value>0x00002000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_BYREF</name></cpp:macro> <cpp:value>0x00004000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_RESERVED</name></cpp:macro> <cpp:value>0x00008000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_ILLEGAL</name></cpp:macro> <cpp:value>0x0000ffff</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_ILLEGALMASKED</name></cpp:macro> <cpp:value>0x00000fff</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_TYPEMASK</name></cpp:macro> <cpp:value>0x00000fff</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_PROPERTY_CODE_PAGE</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_PROPERTY_TITLE</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_PROPERTY_SUBJECT</name></cpp:macro> <cpp:value>0x00000003</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_PROPERTY_AUTHOR</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_PROPERTY_KEYWORDS</name></cpp:macro> <cpp:value>0x00000005</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_PROPERTY_COMMENTS</name></cpp:macro> <cpp:value>0x00000006</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_PROPERTY_TEMPLATE</name></cpp:macro> <cpp:value>0x00000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_PROPERTY_LAST_SAVED_BY</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_PROPERTY_REVISION_NUMBER</name></cpp:macro> <cpp:value>0x00000009</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_PROPERTY_TOTAL_EDITING_TIME</name></cpp:macro> <cpp:value>0x0000000a</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_PROPERTY_LAST_PRINTED</name></cpp:macro> <cpp:value>0X0000000b</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_PROPERTY_CREATE_TIME</name></cpp:macro> <cpp:value>0x0000000c</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_PROPERTY_LAST_SAVED_TIME</name></cpp:macro> <cpp:value>0x0000000d</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_PROPERTY_NUMBER_OF_PAGES</name></cpp:macro> <cpp:value>0x0000000e</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_PROPERTY_NUMBER_OF_WORDS</name></cpp:macro> <cpp:value>0x0000000f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_PROPERTY_NUMBER_OF_CHARACTERS</name></cpp:macro> <cpp:value>0x00000010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_PROPERTY_THUMBNAIL</name></cpp:macro> <cpp:value>0x00000011</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_PROPERTY_NAME_OF_APPLICATION</name></cpp:macro> <cpp:value>0x00000012</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_PROPERTY_SECURITY</name></cpp:macro> <cpp:value>0x00000013</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDF_PROPERTY_LOCALE_ID</name></cpp:macro> <cpp:value>0x80000000</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i_fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>i_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_len</name></decl>;</decl_stmt>
}</block></struct></type> <name>cdf_info_t</name>;</typedef>


<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>uint16_t</name></type> <name>ce_namlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>ce_num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>ce_timestamp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>ce_name</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>cdf_catalog_entry_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>cat_num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cdf_catalog_entry_t</name></type> <name><name>cat_e</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>cdf_catalog_t</name>;</typedef>

<struct_decl>struct <name>timespec</name>;</struct_decl>
<function_decl><type><name>int</name></type> <name>cdf_timestamp_to_timespec</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>timespec</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>cdf_timestamp_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>cdf_timespec_to_timestamp</name><parameter_list>(<parameter><decl><type><name>cdf_timestamp_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timespec</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>cdf_read_header</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cdf_info_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>cdf_header_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>cdf_swap_header</name><parameter_list>(<parameter><decl><type><name>cdf_header_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>cdf_unpack_header</name><parameter_list>(<parameter><decl><type><name>cdf_header_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>cdf_swap_dir</name><parameter_list>(<parameter><decl><type><name>cdf_directory_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>cdf_unpack_dir</name><parameter_list>(<parameter><decl><type><name>cdf_directory_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>cdf_swap_class</name><parameter_list>(<parameter><decl><type><name>cdf_classid_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ssize_t</name></type> <name>cdf_read_sector</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cdf_info_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>cdf_header_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>cdf_secid_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ssize_t</name></type> <name>cdf_read_short_sector</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cdf_stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>cdf_header_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>cdf_secid_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>cdf_read_sat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cdf_info_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>cdf_header_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>cdf_sat_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> <name>cdf_count_chain</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cdf_sat_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>cdf_secid_t</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>cdf_read_long_sector_chain</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cdf_info_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_header_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>cdf_sat_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>cdf_secid_t</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>cdf_stream_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>cdf_read_short_sector_chain</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cdf_header_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_sat_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>cdf_stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>cdf_secid_t</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>cdf_stream_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>cdf_read_sector_chain</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cdf_info_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_header_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>cdf_sat_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_sat_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>cdf_secid_t</name></type></decl></parameter>,
<parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>cdf_stream_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>cdf_read_dir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cdf_info_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_header_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_sat_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>cdf_dir_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>cdf_read_ssat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cdf_info_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_header_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_sat_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>cdf_sat_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>cdf_read_short_stream</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cdf_info_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_header_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>cdf_sat_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_dir_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>cdf_stream_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>cdf_directory_t</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>cdf_read_property_info</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cdf_stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_header_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type></decl></parameter>,
<parameter><decl><type><name>cdf_property_info_t</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>cdf_read_user_stream</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cdf_info_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_header_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>cdf_sat_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_sat_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_stream_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>cdf_dir_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>cdf_stream_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>cdf_find_stream</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cdf_dir_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>cdf_zero_stream</name><parameter_list>(<parameter><decl><type><name>cdf_stream_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>cdf_read_doc_summary_info</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cdf_info_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_header_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>cdf_sat_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_sat_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_stream_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>cdf_dir_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>cdf_stream_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>cdf_read_summary_info</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cdf_info_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_header_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>cdf_sat_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_sat_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_stream_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>cdf_dir_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>cdf_stream_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>cdf_unpack_summary_info</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cdf_stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_header_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>cdf_summary_info_header_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>cdf_property_info_t</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>cdf_unpack_catalog</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cdf_header_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_stream_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>cdf_catalog_t</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>cdf_print_classid</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_classid_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>cdf_print_property_name</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>cdf_print_elapsed_time</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>cdf_timestamp_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uint16_t</name></type> <name>cdf_tole2</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uint32_t</name></type> <name>cdf_tole4</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>uint64_t</name></type> <name>cdf_tole8</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>cdf_ctime</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>time_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>cdf_u16tos8</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CDF_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>void</name></type> <name>cdf_dump_header</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cdf_header_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>cdf_dump_sat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_sat_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>cdf_dump</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>cdf_dump_stream</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cdf_stream_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>cdf_dump_dir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cdf_info_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_header_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_sat_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>cdf_sat_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_dir_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>cdf_dump_property_info</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cdf_property_info_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>cdf_dump_summary_info</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cdf_header_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_stream_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>cdf_dump_catalog</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cdf_header_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>cdf_stream_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
