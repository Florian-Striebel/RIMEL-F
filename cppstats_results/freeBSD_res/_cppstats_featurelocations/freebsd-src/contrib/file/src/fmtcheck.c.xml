<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/file/src/fmtcheck.c">





























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"file.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<enum>enum <name>__e_fmtcheck_types</name> <block>{
<decl><name>FMTCHECK_START</name></decl>,
<decl><name>FMTCHECK_SHORT</name></decl>,
<decl><name>FMTCHECK_INT</name></decl>,
<decl><name>FMTCHECK_LONG</name></decl>,
<decl><name>FMTCHECK_QUAD</name></decl>,
<decl><name>FMTCHECK_SHORTPOINTER</name></decl>,
<decl><name>FMTCHECK_INTPOINTER</name></decl>,
<decl><name>FMTCHECK_LONGPOINTER</name></decl>,
<decl><name>FMTCHECK_QUADPOINTER</name></decl>,
<decl><name>FMTCHECK_DOUBLE</name></decl>,
<decl><name>FMTCHECK_LONGDOUBLE</name></decl>,
<decl><name>FMTCHECK_STRING</name></decl>,
<decl><name>FMTCHECK_WIDTH</name></decl>,
<decl><name>FMTCHECK_PRECISION</name></decl>,
<decl><name>FMTCHECK_DONE</name></decl>,
<decl><name>FMTCHECK_UNKNOWN</name></decl>
}</block>;</enum>
<typedef>typedef <type><name><name>enum</name> <name>__e_fmtcheck_types</name></name></type> <name>EFT</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RETURN</name><parameter_list>(<parameter><type><name>pf</name></type></parameter>,<parameter><type><name>f</name></type></parameter>,<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { *(pf) = (f); return r; } while (0)</cpp:value></cpp:define>




<function><type><specifier>static</specifier> <name>EFT</name></type>
<name>get_next_format_from_precision</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sh</name></decl>, <decl><type ref="prev"/><name>lg</name></decl>, <decl><type ref="prev"/><name>quad</name></decl>, <decl><type ref="prev"/><name>longdouble</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sh</name> <operator>=</operator> <name>lg</name> <operator>=</operator> <name>quad</name> <operator>=</operator> <name>longdouble</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <operator>*</operator><name>pf</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><operator>*</operator><name>f</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'h'</literal></expr>:</case>
<expr_stmt><expr><name>f</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>sh</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'l'</literal></expr>:</case>
<expr_stmt><expr><name>f</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>f</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>RETURN</name><argument_list>(<argument><expr><name>pf</name></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><name>FMTCHECK_UNKNOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>f</name> <operator>==</operator> <literal type="char">'l'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>f</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>quad</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>lg</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'q'</literal></expr>:</case>
<expr_stmt><expr><name>f</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>quad</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'L'</literal></expr>:</case>
<expr_stmt><expr><name>f</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>longdouble</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><literal type="char">'I'</literal></expr>:</case>
<expr_stmt><expr><name>f</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>f</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>RETURN</name><argument_list>(<argument><expr><name>pf</name></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><name>FMTCHECK_UNKNOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>f</name> <operator>==</operator> <literal type="char">'3'</literal> <operator>&amp;&amp;</operator> <name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'2'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>f</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>f</name> <operator>==</operator> <literal type="char">'6'</literal> <operator>&amp;&amp;</operator> <name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'4'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>f</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>quad</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>quad</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>f</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>RETURN</name><argument_list>(<argument><expr><name>pf</name></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><name>FMTCHECK_UNKNOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><literal type="string">"diouxX"</literal></expr></argument>, <argument><expr><operator>*</operator><name>f</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>longdouble</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RETURN</name><argument_list>(<argument><expr><name>pf</name></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><name>FMTCHECK_UNKNOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>lg</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RETURN</name><argument_list>(<argument><expr><name>pf</name></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><name>FMTCHECK_LONG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>quad</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RETURN</name><argument_list>(<argument><expr><name>pf</name></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><name>FMTCHECK_QUAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>RETURN</name><argument_list>(<argument><expr><name>pf</name></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><name>FMTCHECK_INT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>f</name> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>longdouble</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RETURN</name><argument_list>(<argument><expr><name>pf</name></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><name>FMTCHECK_UNKNOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>sh</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RETURN</name><argument_list>(<argument><expr><name>pf</name></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><name>FMTCHECK_SHORTPOINTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>lg</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RETURN</name><argument_list>(<argument><expr><name>pf</name></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><name>FMTCHECK_LONGPOINTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>quad</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RETURN</name><argument_list>(<argument><expr><name>pf</name></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><name>FMTCHECK_QUADPOINTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>RETURN</name><argument_list>(<argument><expr><name>pf</name></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><name>FMTCHECK_INTPOINTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><literal type="string">"DOU"</literal></expr></argument>, <argument><expr><operator>*</operator><name>f</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>sh</name> <operator>+</operator> <name>lg</name> <operator>+</operator> <name>quad</name> <operator>+</operator> <name>longdouble</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RETURN</name><argument_list>(<argument><expr><name>pf</name></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><name>FMTCHECK_UNKNOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>RETURN</name><argument_list>(<argument><expr><name>pf</name></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><name>FMTCHECK_LONG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><literal type="string">"eEfg"</literal></expr></argument>, <argument><expr><operator>*</operator><name>f</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>longdouble</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RETURN</name><argument_list>(<argument><expr><name>pf</name></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><name>FMTCHECK_LONGDOUBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>sh</name> <operator>+</operator> <name>lg</name> <operator>+</operator> <name>quad</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RETURN</name><argument_list>(<argument><expr><name>pf</name></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><name>FMTCHECK_UNKNOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>RETURN</name><argument_list>(<argument><expr><name>pf</name></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><name>FMTCHECK_DOUBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>f</name> <operator>==</operator> <literal type="char">'c'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>sh</name> <operator>+</operator> <name>lg</name> <operator>+</operator> <name>quad</name> <operator>+</operator> <name>longdouble</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RETURN</name><argument_list>(<argument><expr><name>pf</name></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><name>FMTCHECK_UNKNOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>RETURN</name><argument_list>(<argument><expr><name>pf</name></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><name>FMTCHECK_INT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>f</name> <operator>==</operator> <literal type="char">'s'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>sh</name> <operator>+</operator> <name>lg</name> <operator>+</operator> <name>quad</name> <operator>+</operator> <name>longdouble</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RETURN</name><argument_list>(<argument><expr><name>pf</name></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><name>FMTCHECK_UNKNOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>RETURN</name><argument_list>(<argument><expr><name>pf</name></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><name>FMTCHECK_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>f</name> <operator>==</operator> <literal type="char">'p'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>sh</name> <operator>+</operator> <name>lg</name> <operator>+</operator> <name>quad</name> <operator>+</operator> <name>longdouble</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RETURN</name><argument_list>(<argument><expr><name>pf</name></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><name>FMTCHECK_UNKNOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>RETURN</name><argument_list>(<argument><expr><name>pf</name></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><name>FMTCHECK_LONG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>RETURN</name><argument_list>(<argument><expr><name>pf</name></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><name>FMTCHECK_UNKNOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>EFT</name></type>
<name>get_next_format_from_width</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <operator>*</operator><name>pf</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>f</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>f</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>f</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>RETURN</name><argument_list>(<argument><expr><name>pf</name></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><name>FMTCHECK_PRECISION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>f</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>f</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>f</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>RETURN</name><argument_list>(<argument><expr><name>pf</name></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><name>FMTCHECK_UNKNOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>RETURN</name><argument_list>(<argument><expr><name>pf</name></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><call><name>get_next_format_from_precision</name><argument_list>(<argument><expr><name>pf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>EFT</name></type>
<name>get_next_format</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pf</name></decl></parameter>, <parameter><decl><type><name>EFT</name></type> <name>eft</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>infmt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>eft</name> <operator>==</operator> <name>FMTCHECK_WIDTH</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pf</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><call><name>get_next_format_from_width</name><argument_list>(<argument><expr><name>pf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>eft</name> <operator>==</operator> <name>FMTCHECK_PRECISION</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pf</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><call><name>get_next_format_from_precision</name><argument_list>(<argument><expr><name>pf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <operator>*</operator><name>pf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>infmt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>!</operator><name>infmt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="char">'%'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RETURN</name><argument_list>(<argument><expr><name>pf</name></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><name>FMTCHECK_DONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>f</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>f</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>RETURN</name><argument_list>(<argument><expr><name>pf</name></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><name>FMTCHECK_UNKNOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>f</name> <operator>!=</operator> <literal type="char">'%'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>infmt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>f</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>


<while>while <condition>(<expr><operator>*</operator><name>f</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strchr</name><argument_list>(<argument><expr><literal type="string">"#0- +"</literal></expr></argument>, <argument><expr><operator>*</operator><name>f</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>f</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>f</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>RETURN</name><argument_list>(<argument><expr><name>pf</name></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><name>FMTCHECK_WIDTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>f</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>f</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>f</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>RETURN</name><argument_list>(<argument><expr><name>pf</name></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><name>FMTCHECK_UNKNOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>RETURN</name><argument_list>(<argument><expr><name>pf</name></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><call><name>get_next_format_from_width</name><argument_list>(<argument><expr><name>pf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>fmtcheck</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>f1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>f2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>f1p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>f2p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>EFT</name></type> <name>f1t</name></decl>, <decl><type ref="prev"/><name>f2t</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f1</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>f2</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>f1p</name> <operator>=</operator> <name>f1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>f1t</name> <operator>=</operator> <name>FMTCHECK_START</name></expr>;</expr_stmt>
<expr_stmt><expr><name>f2p</name> <operator>=</operator> <name>f2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>f2t</name> <operator>=</operator> <name>FMTCHECK_START</name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>f1t</name> <operator>=</operator> <call><name>get_next_format</name><argument_list>(<argument><expr><operator>&amp;</operator><name>f1p</name></expr></argument>, <argument><expr><name>f1t</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>FMTCHECK_DONE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>f1t</name> <operator>==</operator> <name>FMTCHECK_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>f2</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>f2t</name> <operator>=</operator> <call><name>get_next_format</name><argument_list>(<argument><expr><operator>&amp;</operator><name>f2p</name></expr></argument>, <argument><expr><name>f2t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f1t</name> <operator>!=</operator> <name>f2t</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>f2</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>f1</name></expr>;</return>
</block_content>}</block></function>
</unit>
