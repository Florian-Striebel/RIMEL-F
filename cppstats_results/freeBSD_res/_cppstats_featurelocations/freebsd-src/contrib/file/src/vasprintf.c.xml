<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/file/src/vasprintf.c">










































































































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"file.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>FILE_RCSID</name><argument_list>(<argument><literal type="string">"@(#)$File: vasprintf.c,v 1.19 2021/02/23 00:51:11 christos Exp $"</literal></argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLOC_CHUNK</name></cpp:macro> <cpp:value>2048</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLOC_SECURITY_MARGIN</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ALLOC_CHUNK</name> <operator>&lt;</operator> <name>ALLOC_SECURITY_MARGIN</name></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> !!! ALLOC_CHUNK &lt; ALLOC_SECURITY_MARGIN !!!</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>src_string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>buffer_base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>dest_string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>buffer_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>real_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>pseudo_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>maxlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>vargs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>sprintf_string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type> <name>fprintf_file</name></decl>;</decl_stmt>
}</block></struct></type> <name>xprintf_struct</name>;</typedef>






<function><type><specifier>static</specifier> <name>int</name></type> <name>realloc_buff</name><parameter_list>(<parameter><decl><type><name>xprintf_struct</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>ptr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>+</operator> <name>ALLOC_SECURITY_MARGIN</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>real_len</name></name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer_len</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>real_len</name></name> <operator>+</operator> <name>ALLOC_CHUNK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>realloc</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>buffer_base</name></name><operator>)</operator></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buffer_base</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>EOF</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dest_string</name></name> <operator>=</operator> <name>ptr</name> <operator>+</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>dest_string</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer_base</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buffer_base</name></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buffer_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>buffer_base</name></name><operator>)</operator><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>buffer_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>usual_char</name><parameter_list>(<parameter><decl><type><name>xprintf_struct</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strcspn</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>src_string</name></name></expr></argument>, <argument><expr><literal type="string">"%"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><call><name>realloc_buff</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>EOF</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>dest_string</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>src_string</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>src_string</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dest_string</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>real_len</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pseudo_len</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>print_it</name><parameter_list>(<parameter><decl><type><name>xprintf_struct</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>approx_len</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format_string</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>varg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vsprintf_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>realloc_buff</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>approx_len</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>EOF</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>varg</name></expr></argument>, <argument><expr><name>format_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vsprintf_len</name> <operator>=</operator> <call><name>vsprintf</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>dest_string</name></name></expr></argument>, <argument><expr><name>format_string</name></expr></argument>, <argument><expr><name>varg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>varg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>buffer_base</name></name><operator>)</operator><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>buffer_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vsprintf_len</name> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>EOF</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pseudo_len</name></name> <operator>+=</operator> <name>vsprintf_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>dest_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>real_len</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dest_string</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>int</name></type> <name>type_s</name><parameter_list>(<parameter><decl><type><name>xprintf_struct</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prec</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format_string</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg_string</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>string_len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>arg_string</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>print_it</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"(null)"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



<expr_stmt><expr><name>string_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>arg_string</name><index>[<expr><name>string_len</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>prec</name> <operator>!=</operator> <name>string_len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>string_len</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>string_len</name> <operator>&lt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>width</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>string_len</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>width</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>print_it</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>string_len</name></expr></argument>, <argument><expr><name>format_string</name></expr></argument>, <argument><expr><name>arg_string</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>int</name></type> <name>getint</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><operator>*</operator><name>string</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name>i</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <operator>(</operator><operator>*</operator><operator>*</operator><name>string</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><operator>*</operator><name>string</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>i</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>i</name></expr></argument> &gt;</argument_list></name> <literal type="number">32767</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">32767</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>













<function><type><specifier>static</specifier> <name>int</name></type> <name>dispatch</name><parameter_list>(<parameter><decl><type><name>xprintf_struct</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>initial_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>format_string</name><index>[<expr><literal type="number">24</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>format_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flag_plus</name></decl>, <decl><type ref="prev"/><name>flag_minus</name></decl>, <decl><type ref="prev"/><name>flag_space</name></decl>, <decl><type ref="prev"/><name>flag_sharp</name></decl>, <decl><type ref="prev"/><name>flag_zero</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>, <decl><type ref="prev"/><name>prec</name></decl>, <decl><type ref="prev"/><name>modifier</name></decl>, <decl><type ref="prev"/><name>approx_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>type</name></decl>;</decl_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRCTXT</name></cpp:macro> <cpp:value>(s-&gt;src_string)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DESTTXT</name></cpp:macro> <cpp:value>(s-&gt;dest_string)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INCOHERENT</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>do {SRCTXT=initial_ptr; return 0;} while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INCOHERENT_TEST</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>do {if(*SRCTXT==0) INCOHERENT();} while (0)</cpp:value></cpp:define>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>SRCTXT</name> <operator>!=</operator> <literal type="char">'%'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>usual_char</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>SRCTXT</name><operator>++</operator></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><operator>*</operator><name>SRCTXT</name> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>realloc_buff</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>EOF</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>DESTTXT</name> <operator>=</operator> <literal type="char">'%'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>DESTTXT</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>SRCTXT</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>real_len</name></name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>pseudo_len</name></name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>initial_ptr</name> <operator>=</operator> <name>SRCTXT</name></expr>;</expr_stmt>




<expr_stmt><expr><name>flag_plus</name> <operator>=</operator> <name>flag_minus</name> <operator>=</operator> <name>flag_space</name> <operator>=</operator> <name>flag_sharp</name> <operator>=</operator> <name>flag_zero</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition> <incr><expr><name>SRCTXT</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>SRCTXT</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flag_space</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>SRCTXT</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flag_plus</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>SRCTXT</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flag_minus</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>SRCTXT</name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flag_sharp</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>SRCTXT</name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>flag_zero</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<break>break;</break></block_content></block></else></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>INCOHERENT_TEST</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>SRCTXT</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>SRCTXT</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>width</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>vargs</name></name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name>width</name> <operator>&gt;</operator> <literal type="number">0x3fffU</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>width</name> <operator>=</operator> <literal type="number">0x3fff</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>SRCTXT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>width</name> <operator>=</operator> <call><name>getint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>SRCTXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>width</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>INCOHERENT_TEST</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>SRCTXT</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>SRCTXT</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>SRCTXT</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>SRCTXT</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>prec</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>vargs</name></name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name>prec</name> <operator>&gt;=</operator> <literal type="number">0x3fffU</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>prec</name> <operator>=</operator> <literal type="number">0x3fff</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>SRCTXT</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>INCOHERENT</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>prec</name> <operator>=</operator> <call><name>getint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>SRCTXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>INCOHERENT_TEST</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>prec</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>


<switch>switch <condition>(<expr><operator>*</operator><name>SRCTXT</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'L'</literal></expr>:</case>
<case>case <expr><literal type="char">'h'</literal></expr>:</case>
<case>case <expr><literal type="char">'l'</literal></expr>:</case>
<case>case <expr><literal type="char">'z'</literal></expr>:</case>
<case>case <expr><literal type="char">'t'</literal></expr>:</case>
<expr_stmt><expr><name>modifier</name> <operator>=</operator> <operator>*</operator><name>SRCTXT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>SRCTXT</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>modifier</name><operator>==</operator><literal type="char">'l'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>SRCTXT</name><operator>==</operator><literal type="char">'l'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>SRCTXT</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>modifier</name> <operator>=</operator> <literal type="char">'L'</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>INCOHERENT_TEST</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><name>modifier</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>


<expr_stmt><expr><name>type</name> <operator>=</operator> <operator>*</operator><name>SRCTXT</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><literal type="string">"diouxXfegEGcspn"</literal></expr></argument>,<argument><expr><name>type</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>INCOHERENT</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>SRCTXT</name><operator>++</operator></expr>;</expr_stmt>


<expr_stmt><expr><name><name>format_string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'%'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>format_ptr</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>format_string</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flag_plus</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>format_ptr</name> <operator>=</operator> <literal type="char">'+'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>format_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flag_minus</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>format_ptr</name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>format_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flag_space</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>format_ptr</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>format_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flag_sharp</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>format_ptr</name> <operator>=</operator> <literal type="char">'#'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>format_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>flag_zero</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>format_ptr</name> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>format_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>format_ptr</name></expr></argument>, <argument><expr><literal type="string">"%i"</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>format_ptr</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>format_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prec</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>format_ptr</name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>format_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>format_ptr</name></expr></argument>, <argument><expr><literal type="string">"%i"</literal></expr></argument>, <argument><expr><name>prec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>format_ptr</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>format_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>modifier</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>modifier</name> <operator>==</operator> <literal type="char">'L'</literal> <operator>&amp;&amp;</operator> <call><name>strchr</name><argument_list>(<argument><expr><literal type="string">"diouxX"</literal></expr></argument>,<argument><expr><name>type</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>format_ptr</name> <operator>=</operator> <literal type="char">'l'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>format_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>format_ptr</name> <operator>=</operator> <literal type="char">'l'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>format_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>format_ptr</name> <operator>=</operator> <name>modifier</name></expr>;</expr_stmt>
<expr_stmt><expr><name>format_ptr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>format_ptr</name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name>format_ptr</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>format_ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>approx_width</name> <operator>=</operator> <name>width</name> <operator>+</operator> <name>prec</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>approx_width</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>approx_width</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'d'</literal></expr>:</case>
<case>case <expr><literal type="char">'i'</literal></expr>:</case>
<case>case <expr><literal type="char">'o'</literal></expr>:</case>
<case>case <expr><literal type="char">'u'</literal></expr>:</case>
<case>case <expr><literal type="char">'x'</literal></expr>:</case>
<case>case <expr><literal type="char">'X'</literal></expr>:</case>
<switch>switch <condition>(<expr><name>modifier</name></expr>)</condition> <block>{<block_content>
<case>case <expr><operator>-</operator><literal type="number">1</literal></expr> :</case>
<return>return <expr><call><name>print_it</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>approx_width</name></expr></argument>, <argument><expr><name>format_string</name></expr></argument>, <argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>vargs</name></name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="char">'L'</literal></expr>:</case>
<return>return <expr><call><name>print_it</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>approx_width</name></expr></argument>, <argument><expr><name>format_string</name></expr></argument>, <argument><expr><macro><name>va_arg</name><argument_list>(<argument>s-&gt;vargs</argument>, <argument>long long int</argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="char">'l'</literal></expr>:</case>
<return>return <expr><call><name>print_it</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>approx_width</name></expr></argument>, <argument><expr><name>format_string</name></expr></argument>, <argument><expr><macro><name>va_arg</name><argument_list>(<argument>s-&gt;vargs</argument>, <argument>long int</argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="char">'h'</literal></expr>:</case>
<return>return <expr><call><name>print_it</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>approx_width</name></expr></argument>, <argument><expr><name>format_string</name></expr></argument>, <argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>vargs</name></name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="char">'z'</literal></expr>:</case>
<return>return <expr><call><name>print_it</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>approx_width</name></expr></argument>, <argument><expr><name>format_string</name></expr></argument>, <argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>vargs</name></name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="char">'t'</literal></expr>:</case>
<return>return <expr><call><name>print_it</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>approx_width</name></expr></argument>, <argument><expr><name>format_string</name></expr></argument>, <argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>vargs</name></name></expr></argument>, <argument><expr><name>ptrdiff_t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<default>default:</default>
<expr_stmt><expr><call><name>INCOHERENT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>


<case>case <expr><literal type="char">'c'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>modifier</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>INCOHERENT</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>print_it</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>approx_width</name></expr></argument>, <argument><expr><name>format_string</name></expr></argument>, <argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>vargs</name></name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>



<case>case <expr><literal type="char">'e'</literal></expr>:</case>
<case>case <expr><literal type="char">'f'</literal></expr>:</case>
<case>case <expr><literal type="char">'g'</literal></expr>:</case>
<case>case <expr><literal type="char">'E'</literal></expr>:</case>
<case>case <expr><literal type="char">'G'</literal></expr>:</case>
<switch>switch <condition>(<expr><name>modifier</name></expr>)</condition> <block>{<block_content>
<case>case <expr><operator>-</operator><literal type="number">1</literal></expr> :</case>
<case>case <expr><literal type="char">'l'</literal></expr>:</case>
<return>return <expr><call><name>print_it</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>approx_width</name></expr></argument>, <argument><expr><name>format_string</name></expr></argument>, <argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>vargs</name></name></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<case>case <expr><literal type="char">'L'</literal></expr>:</case>
<return>return <expr><call><name>print_it</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>approx_width</name></expr></argument>, <argument><expr><name>format_string</name></expr></argument>, <argument><expr><macro><name>va_arg</name><argument_list>(<argument>s-&gt;vargs</argument>, <argument>long double</argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr>;</return>
<default>default:</default>
<expr_stmt><expr><call><name>INCOHERENT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>


<case>case <expr><literal type="char">'s'</literal></expr>:</case>
<return>return <expr><call><name>type_s</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>prec</name></expr></argument>, <argument><expr><name>format_string</name></expr></argument>, <argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>vargs</name></name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>


<case>case <expr><literal type="char">'p'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>modifier</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>print_it</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>approx_width</name></expr></argument>, <argument><expr><name>format_string</name></expr></argument>, <argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>vargs</name></name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>INCOHERENT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<case>case <expr><literal type="char">'n'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>modifier</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type> <name>p</name></decl>;</decl_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>vargs</name></name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pseudo_len</name></name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>EOF</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>INCOHERENT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>INCOHERENT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>INCOHERENT</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>INCOHERENT_TEST</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SRCTXT</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DESTTXT</name></cpp:undef>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>core</name><parameter_list>(<parameter><decl><type><name>xprintf_struct</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>save_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dummy_base</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>maxlen</name></name><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>EOF</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>maxlen</name></name><operator>--</operator></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>src_string</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>src_string</name></name> <operator>=</operator> <literal type="string">"(null)"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buffer_base</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buffer_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>real_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pseudo_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>realloc_buff</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>EOF</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dest_string</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer_base</name></name></expr>;</expr_stmt>


<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>src_string</name></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>dest_string</name></name><operator>)</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dispatch</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>free_EOF</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>real_len</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>maxlen</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>buffer_base</name></name><operator>)</operator><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>maxlen</name></name></expr>]</index> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name>dummy_base</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer_base</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dummy_base</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer_base</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>real_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>save_len</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>real_len</name></name></expr>;</expr_stmt>




<while>while<condition>(<expr><operator>*</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>src_string</name></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>real_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dest_string</name></name> <operator>=</operator> <name>dummy_base</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dispatch</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>free_EOF</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buffer_base</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>realloc</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>buffer_base</name></name><operator>)</operator></expr></argument>, <argument><expr><name>save_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>buffer_base</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>EOF</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>pseudo_len</name></name></expr>;</return>

<label><name>free_EOF</name>:</label>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buffer_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>EOF</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>vasprintf</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format_string</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>vargs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>xprintf_struct</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>.</operator><name>src_string</name></name> <operator>=</operator> <name>format_string</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>va_copy</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>va_copy</name> <argument_list>(<argument><expr><name><name>s</name><operator>.</operator><name>vargs</name></name></expr></argument>, <argument><expr><name>vargs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__va_copy</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>__va_copy</name> <argument_list>(<argument><expr><name><name>s</name><operator>.</operator><name>vargs</name></name></expr></argument>, <argument><expr><name>vargs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>vargs</name></name> <operator>=</operator> <name>vargs</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>.</operator><name>vargs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vargs</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name><name>s</name><operator>.</operator><name>va_args</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>maxlen</name></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>INT_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>core</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name><name>s</name><operator>.</operator><name>vargs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>EOF</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <name><name>s</name><operator>.</operator><name>buffer_base</name></name></expr>;</expr_stmt>
<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>
</unit>
