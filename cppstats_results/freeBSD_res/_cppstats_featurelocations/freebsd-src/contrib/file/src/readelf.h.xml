<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/file/src/readelf.h">
































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__fake_elf_h__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__fake_elf_h__</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_STDINT_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name>uint32_t</name></type> <name>Elf32_Addr</name>;</typedef>
<typedef>typedef <type><name>uint32_t</name></type> <name>Elf32_Off</name>;</typedef>
<typedef>typedef <type><name>uint16_t</name></type> <name>Elf32_Half</name>;</typedef>
<typedef>typedef <type><name>uint32_t</name></type> <name>Elf32_Word</name>;</typedef>
<typedef>typedef <type><name>uint8_t</name></type> <name>Elf32_Char</name>;</typedef>

<typedef>typedef <type><name>uint64_t</name></type> <name>Elf64_Addr</name>;</typedef>
<typedef>typedef <type><name>uint64_t</name></type> <name>Elf64_Off</name>;</typedef>
<typedef>typedef <type><name>uint64_t</name></type> <name>Elf64_Xword</name>;</typedef>
<typedef>typedef <type><name>uint16_t</name></type> <name>Elf64_Half</name>;</typedef>
<typedef>typedef <type><name>uint32_t</name></type> <name>Elf64_Word</name>;</typedef>
<typedef>typedef <type><name>uint8_t</name></type> <name>Elf64_Char</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EI_NIDENT</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>a_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>a_v</name></decl>;</decl_stmt>
}</block></struct></type> <name>Aux32Info</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>Elf64_Xword</name></type> <name>a_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf64_Xword</name></type> <name>a_v</name></decl>;</decl_stmt>
}</block></struct></type> <name>Aux64Info</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_NULL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_IGNORE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_EXECFD</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_PHDR</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_PHENT</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_PHNUM</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_PAGESZ</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_BASE</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_FLAGS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_ENTRY</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_LINUX_NOTELF</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_LINUX_UID</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_LINUX_EUID</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_LINUX_GID</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_LINUX_EGID</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_LINUX_PLATFORM</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_LINUX_HWCAP</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_LINUX_CLKTCK</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_LINUX_SECURE</name></cpp:macro> <cpp:value>23</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_LINUX_BASE_PLATFORM</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_LINUX_RANDOM</name></cpp:macro> <cpp:value>25</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_LINUX_HWCAP2</name></cpp:macro> <cpp:value>26</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_LINUX_EXECFN</name></cpp:macro> <cpp:value>31</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>Elf32_Char</name></type> <name><name>e_ident</name><index>[<expr><name>EI_NIDENT</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf32_Half</name></type> <name>e_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf32_Half</name></type> <name>e_machine</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>e_version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf32_Addr</name></type> <name>e_entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf32_Off</name></type> <name>e_phoff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf32_Off</name></type> <name>e_shoff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>e_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf32_Half</name></type> <name>e_ehsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf32_Half</name></type> <name>e_phentsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf32_Half</name></type> <name>e_phnum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf32_Half</name></type> <name>e_shentsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf32_Half</name></type> <name>e_shnum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf32_Half</name></type> <name>e_shstrndx</name></decl>;</decl_stmt>
}</block></struct></type> <name>Elf32_Ehdr</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>Elf64_Char</name></type> <name><name>e_ident</name><index>[<expr><name>EI_NIDENT</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf64_Half</name></type> <name>e_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf64_Half</name></type> <name>e_machine</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf64_Word</name></type> <name>e_version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf64_Addr</name></type> <name>e_entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf64_Off</name></type> <name>e_phoff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf64_Off</name></type> <name>e_shoff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf64_Word</name></type> <name>e_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf64_Half</name></type> <name>e_ehsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf64_Half</name></type> <name>e_phentsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf64_Half</name></type> <name>e_phnum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf64_Half</name></type> <name>e_shentsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf64_Half</name></type> <name>e_shnum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf64_Half</name></type> <name>e_shstrndx</name></decl>;</decl_stmt>
}</block></struct></type> <name>Elf64_Ehdr</name>;</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ET_REL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ET_EXEC</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ET_DYN</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ET_CORE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_SPARC</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_386</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_SPARC32PLUS</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_SPARCV9</name></cpp:macro> <cpp:value>43</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_IA_64</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM_AMD64</name></cpp:macro> <cpp:value>62</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_SYMTAB</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_NOTE</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_DYNSYM</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHT_SUNW_cap</name></cpp:macro> <cpp:value>0x6ffffff5</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFDATANONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFDATA2LSB</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFDATA2MSB</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFCLASSNONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFCLASS32</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFCLASS64</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EI_MAG0</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EI_MAG1</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EI_MAG2</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EI_MAG3</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EI_CLASS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EI_DATA</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EI_VERSION</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EI_PAD</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFMAG0</name></cpp:macro> <cpp:value>0x7f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFMAG1</name></cpp:macro> <cpp:value>'E'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFMAG2</name></cpp:macro> <cpp:value>'L'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFMAG3</name></cpp:macro> <cpp:value>'F'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFMAG</name></cpp:macro> <cpp:value>"\177ELF"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OLFMAG1</name></cpp:macro> <cpp:value>'O'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OLFMAG</name></cpp:macro> <cpp:value>"\177OLF"</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>p_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf32_Off</name></type> <name>p_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf32_Addr</name></type> <name>p_vaddr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf32_Addr</name></type> <name>p_paddr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>p_filesz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>p_memsz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>p_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>p_align</name></decl>;</decl_stmt>
}</block></struct></type> <name>Elf32_Phdr</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>Elf64_Word</name></type> <name>p_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf64_Word</name></type> <name>p_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf64_Off</name></type> <name>p_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf64_Addr</name></type> <name>p_vaddr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf64_Addr</name></type> <name>p_paddr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf64_Xword</name></type> <name>p_filesz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf64_Xword</name></type> <name>p_memsz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf64_Xword</name></type> <name>p_align</name></decl>;</decl_stmt>
}</block></struct></type> <name>Elf64_Phdr</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_NULL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_LOAD</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_DYNAMIC</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_INTERP</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_NOTE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_SHLIB</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_PHDR</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PT_NUM</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>sh_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>sh_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>sh_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf32_Addr</name></type> <name>sh_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf32_Off</name></type> <name>sh_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>sh_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>sh_link</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>sh_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>sh_addralign</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>sh_entsize</name></decl>;</decl_stmt>
}</block></struct></type> <name>Elf32_Shdr</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>Elf64_Word</name></type> <name>sh_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf64_Word</name></type> <name>sh_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf64_Off</name></type> <name>sh_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf64_Addr</name></type> <name>sh_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf64_Off</name></type> <name>sh_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf64_Off</name></type> <name>sh_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf64_Word</name></type> <name>sh_link</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf64_Word</name></type> <name>sh_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf64_Off</name></type> <name>sh_addralign</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf64_Off</name></type> <name>sh_entsize</name></decl>;</decl_stmt>
}</block></struct></type> <name>Elf64_Shdr</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NT_NETBSD_CORE_PROCINFO</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NT_NETBSD_CORE_AUXV</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<struct>struct <name>NetBSD_elfcore_procinfo</name> <block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>cpi_version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cpi_cpisize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cpi_signo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cpi_sigcode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>cpi_sigpend</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>cpi_sigmask</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>cpi_sigignore</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>cpi_sigcatch</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>cpi_pid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>cpi_ppid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>cpi_pgrp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>cpi_sid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cpi_ruid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cpi_euid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cpi_svuid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cpi_rgid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cpi_egid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cpi_svgid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>cpi_nlwps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int8_t</name></type> <name><name>cpi_name</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>cpi_siglwp</name></decl>;</decl_stmt>
}</block>;</struct>


<typedef>typedef <type><struct>struct <name>elf_note</name> <block>{
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>n_namesz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>n_descsz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>n_type</name></decl>;</decl_stmt>
}</block></struct></type> <name>Elf32_Nhdr</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>Elf64_Word</name></type> <name>n_namesz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf64_Word</name></type> <name>n_descsz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf64_Word</name></type> <name>n_type</name></decl>;</decl_stmt>
}</block></struct></type> <name>Elf64_Nhdr</name>;</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NT_PRSTATUS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NT_PRFPREG</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NT_PRPSINFO</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NT_PRXREG</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NT_TASKSTRUCT</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NT_PLATFORM</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NT_AUXV</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NT_NETBSD_VERSION</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NT_NETBSD_EMULATION</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NT_FREEBSD_VERSION</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NT_OPENBSD_VERSION</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NT_DRAGONFLY_VERSION</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NT_GNU_VERSION</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GNU_OS_LINUX</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GNU_OS_HURD</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GNU_OS_SOLARIS</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GNU_OS_KFREEBSD</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GNU_OS_KNETBSD</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NT_GNU_HWCAP</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NT_GNU_BUILD_ID</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NT_NETBSD_PAX</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NT_NETBSD_PAX_MPROTECT</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NT_NETBSD_PAX_NOMPROTECT</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NT_NETBSD_PAX_GUARD</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NT_NETBSD_PAX_NOGUARD</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NT_NETBSD_PAX_ASLR</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NT_NETBSD_PAX_NOASLR</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NT_NETBSD_MARCH</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NT_NETBSD_CMODEL</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NT_GO_BUILD_ID</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NT_FREEBSD_PROCSTAT_AUXV</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ELFSIZE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ARCH_ELFSIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELFSIZE</name></cpp:macro> <cpp:value>ARCH_ELFSIZE</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>c_tag</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>c_val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf32_Addr</name></type> <name>c_ptr</name></decl>;</decl_stmt>
}</block> <decl><name>c_un</name></decl>;</union>
}</block></struct></type> <name>Elf32_Cap</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>Elf64_Xword</name></type> <name>c_tag</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name>Elf64_Xword</name></type> <name>c_val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf64_Addr</name></type> <name>c_ptr</name></decl>;</decl_stmt>
}</block> <decl><name>c_un</name></decl>;</union>
}</block></struct></type> <name>Elf64_Cap</name>;</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CA_SUNW_NULL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CA_SUNW_HW_1</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CA_SUNW_SF_1</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SF1_SUNW_FPKNWN</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SF1_SUNW_FPUSED</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SF1_SUNW_MASK</name></cpp:macro> <cpp:value>0x03</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_SPARC_MUL32</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_SPARC_DIV32</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_SPARC_FSMULD</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_SPARC_V8PLUS</name></cpp:macro> <cpp:value>0x0008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_SPARC_POPC</name></cpp:macro> <cpp:value>0x0010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_SPARC_VIS</name></cpp:macro> <cpp:value>0x0020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_SPARC_VIS2</name></cpp:macro> <cpp:value>0x0040</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_SPARC_ASI_BLK_INIT</name></cpp:macro> <cpp:value>0x0080</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_SPARC_FMAF</name></cpp:macro> <cpp:value>0x0100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_SPARC_FJFMAU</name></cpp:macro> <cpp:value>0x4000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_SPARC_IMA</name></cpp:macro> <cpp:value>0x8000</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_386_FPU</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_386_TSC</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_386_CX8</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_386_SEP</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_386_AMD_SYSC</name></cpp:macro> <cpp:value>0x00000010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_386_CMOV</name></cpp:macro> <cpp:value>0x00000020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_386_MMX</name></cpp:macro> <cpp:value>0x00000040</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_386_AMD_MMX</name></cpp:macro> <cpp:value>0x00000080</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_386_AMD_3DNow</name></cpp:macro> <cpp:value>0x00000100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_386_AMD_3DNowx</name></cpp:macro> <cpp:value>0x00000200</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_386_FXSR</name></cpp:macro> <cpp:value>0x00000400</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_386_SSE</name></cpp:macro> <cpp:value>0x00000800</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_386_SSE2</name></cpp:macro> <cpp:value>0x00001000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_386_PAUSE</name></cpp:macro> <cpp:value>0x00002000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_386_SSE3</name></cpp:macro> <cpp:value>0x00004000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_386_MON</name></cpp:macro> <cpp:value>0x00008000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_386_CX16</name></cpp:macro> <cpp:value>0x00010000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_386_AHF</name></cpp:macro> <cpp:value>0x00020000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_386_TSCP</name></cpp:macro> <cpp:value>0x00040000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_386_AMD_SSE4A</name></cpp:macro> <cpp:value>0x00080000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_386_POPCNT</name></cpp:macro> <cpp:value>0x00100000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_386_AMD_LZCNT</name></cpp:macro> <cpp:value>0x00200000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_386_SSSE3</name></cpp:macro> <cpp:value>0x00400000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_386_SSE4_1</name></cpp:macro> <cpp:value>0x00800000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_386_SSE4_2</name></cpp:macro> <cpp:value>0x01000000</cpp:value></cpp:define>




<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>d_tag</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name>Elf32_Addr</name></type> <name>d_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf32_Word</name></type> <name>d_val</name></decl>;</decl_stmt>
}</block> <decl><name>d_un</name></decl>;</union>
}</block></struct></type> <name>Elf32_Dyn</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>Elf64_Xword</name></type> <name>d_tag</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name>Elf64_Addr</name></type> <name>d_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Elf64_Xword</name></type> <name>d_val</name></decl>;</decl_stmt>
}</block> <decl><name>d_un</name></decl>;</union>
}</block></struct></type> <name>Elf64_Dyn</name>;</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_NULL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_NEEDED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_PLTRELSZ</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_PLTGOT</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_HASH</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_STRTAB</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_SYMTAB</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_RELA</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_RELASZ</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_RELAENT</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_STRSZ</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_SYMENT</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_INIT</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_FINI</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_SONAME</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_RPATH</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_SYMBOLIC</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_REL</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_RELSZ</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_RELENT</name></cpp:macro> <cpp:value>19</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_PLTREL</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_DEBUG</name></cpp:macro> <cpp:value>21</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_TEXTREL</name></cpp:macro> <cpp:value>22</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_JMPREL</name></cpp:macro> <cpp:value>23</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_BIND_NOW</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_INIT_ARRAY</name></cpp:macro> <cpp:value>25</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_FINI_ARRAY</name></cpp:macro> <cpp:value>26</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_INIT_ARRAYSZ</name></cpp:macro> <cpp:value>27</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_FINI_ARRAYSZ</name></cpp:macro> <cpp:value>28</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_RUNPATH</name></cpp:macro> <cpp:value>29</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_FLAGS</name></cpp:macro> <cpp:value>30</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_ENCODING</name></cpp:macro> <cpp:value>31</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_PREINIT_ARRAY</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_PREINIT_ARRAYSZ</name></cpp:macro> <cpp:value>33</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_NUM</name></cpp:macro> <cpp:value>34</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_LOOS</name></cpp:macro> <cpp:value>0x60000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_VERSYM</name></cpp:macro> <cpp:value>0x6ffffff0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_FLAGS_1</name></cpp:macro> <cpp:value>0x6ffffffb</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_VERDEF</name></cpp:macro> <cpp:value>0x6ffffffc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_VERDEFNUM</name></cpp:macro> <cpp:value>0x6ffffffd</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_VERNEED</name></cpp:macro> <cpp:value>0x6ffffffe</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_VERNEEDNUM</name></cpp:macro> <cpp:value>0x6fffffff</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_HIOS</name></cpp:macro> <cpp:value>0x6fffffff</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_LOPROC</name></cpp:macro> <cpp:value>0x70000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_HIPROC</name></cpp:macro> <cpp:value>0x7fffffff</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DF_ORIGIN</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DF_SYMBOLIC</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DF_TEXTREL</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DF_BIND_NOW</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DF_STATIC_TLS</name></cpp:macro> <cpp:value>0x00000010</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DF_1_NOW</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DF_1_GLOBAL</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DF_1_GROUP</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DF_1_NODELETE</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DF_1_LOADFLTR</name></cpp:macro> <cpp:value>0x00000010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DF_1_INITFIRST</name></cpp:macro> <cpp:value>0x00000020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DF_1_NOOPEN</name></cpp:macro> <cpp:value>0x00000040</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DF_1_ORIGIN</name></cpp:macro> <cpp:value>0x00000080</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DF_1_DIRECT</name></cpp:macro> <cpp:value>0x00000100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DF_1_INTERPOSE</name></cpp:macro> <cpp:value>0x00000400</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DF_1_NODEFLIB</name></cpp:macro> <cpp:value>0x00000800</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DF_1_NODUMP</name></cpp:macro> <cpp:value>0x00001000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DF_1_CONFALT</name></cpp:macro> <cpp:value>0x00002000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DF_1_ENDFILTEE</name></cpp:macro> <cpp:value>0x00004000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DF_1_DISPRELDNE</name></cpp:macro> <cpp:value>0x00008000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DF_1_DISPRELPND</name></cpp:macro> <cpp:value>0x00010000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DF_1_NODIRECT</name></cpp:macro> <cpp:value>0x00020000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DF_1_IGNMULDEF</name></cpp:macro> <cpp:value>0x00040000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DF_1_NOKSYMS</name></cpp:macro> <cpp:value>0x00080000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DF_1_NOHDR</name></cpp:macro> <cpp:value>0x00100000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DF_1_EDITED</name></cpp:macro> <cpp:value>0x00200000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DF_1_NORELOC</name></cpp:macro> <cpp:value>0x00400000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DF_1_SYMINTPOSE</name></cpp:macro> <cpp:value>0x00800000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DF_1_GLOBAUDIT</name></cpp:macro> <cpp:value>0x01000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DF_1_SINGLETON</name></cpp:macro> <cpp:value>0x02000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DF_1_STUB</name></cpp:macro> <cpp:value>0x04000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DF_1_PIE</name></cpp:macro> <cpp:value>0x08000000</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
