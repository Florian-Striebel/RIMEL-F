<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/file/src/is_json.c">





























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"file.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>FILE_RCSID</name><argument_list>(<argument><literal type="string">"@(#)$File: is_json.c,v 1.15 2020/06/07 19:05:47 christos Exp $"</literal></argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"magic.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DPRINTF</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%s [%.2x/%c] %.20s\n", (a), *(b), *(b), (const char *)(c))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DPRINTF</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { } while (0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSON_ARRAY</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSON_CONSTANT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSON_NUMBER</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSON_OBJECT</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSON_STRING</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSON_ARRAYN</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSON_MAX</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>JSON_COUNT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSON_COUNT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>json_parse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>json_isspace</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name>uc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>uc</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">' '</literal></expr>:</case>
<case>case <expr><literal type="char">'\n'</literal></expr>:</case>
<case>case <expr><literal type="char">'\r'</literal></expr>:</case>
<case>case <expr><literal type="char">'\t'</literal></expr>:</case>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<default>default:</default>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>json_isdigit</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>uc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>uc</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'0'</literal></expr>:</case> <case>case <expr><literal type="char">'1'</literal></expr>:</case> <case>case <expr><literal type="char">'2'</literal></expr>:</case> <case>case <expr><literal type="char">'3'</literal></expr>:</case> <case>case <expr><literal type="char">'4'</literal></expr>:</case>
<case>case <expr><literal type="char">'5'</literal></expr>:</case> <case>case <expr><literal type="char">'6'</literal></expr>:</case> <case>case <expr><literal type="char">'7'</literal></expr>:</case> <case>case <expr><literal type="char">'8'</literal></expr>:</case> <case>case <expr><literal type="char">'9'</literal></expr>:</case>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<default>default:</default>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>json_isxdigit</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>uc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>json_isdigit</name><argument_list>(<argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><name>uc</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'a'</literal></expr>:</case> <case>case <expr><literal type="char">'b'</literal></expr>:</case> <case>case <expr><literal type="char">'c'</literal></expr>:</case> <case>case <expr><literal type="char">'d'</literal></expr>:</case> <case>case <expr><literal type="char">'e'</literal></expr>:</case> <case>case <expr><literal type="char">'f'</literal></expr>:</case>
<case>case <expr><literal type="char">'A'</literal></expr>:</case> <case>case <expr><literal type="char">'B'</literal></expr>:</case> <case>case <expr><literal type="char">'C'</literal></expr>:</case> <case>case <expr><literal type="char">'D'</literal></expr>:</case> <case>case <expr><literal type="char">'E'</literal></expr>:</case> <case>case <expr><literal type="char">'F'</literal></expr>:</case>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<default>default:</default>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type>
<name>json_skip_space</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>uc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><name>uc</name> <operator>&lt;</operator> <name>ue</name> <operator>&amp;&amp;</operator> <call><name>json_isspace</name><argument_list>(<argument><expr><operator>*</operator><name>uc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>uc</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><name>uc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>json_parse_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ucp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>uc</name> <init>= <expr><operator>*</operator><name>ucp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><literal type="string">"Parse string: "</literal></expr></argument>, <argument><expr><name>uc</name></expr></argument>, <argument><expr><operator>*</operator><name>ucp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>uc</name> <operator>&lt;</operator> <name>ue</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><operator>*</operator><name>uc</name><operator>++</operator></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'\0'</literal></expr>:</case>
<goto>goto <name>out</name>;</goto>
<case>case <expr><literal type="char">'\\'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>uc</name> <operator>==</operator> <name>ue</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><operator>*</operator><name>uc</name><operator>++</operator></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'\0'</literal></expr>:</case>
<goto>goto <name>out</name>;</goto>
<case>case <expr><literal type="char">'"'</literal></expr>:</case>
<case>case <expr><literal type="char">'\\'</literal></expr>:</case>
<case>case <expr><literal type="char">'/'</literal></expr>:</case>
<case>case <expr><literal type="char">'b'</literal></expr>:</case>
<case>case <expr><literal type="char">'f'</literal></expr>:</case>
<case>case <expr><literal type="char">'n'</literal></expr>:</case>
<case>case <expr><literal type="char">'r'</literal></expr>:</case>
<case>case <expr><literal type="char">'t'</literal></expr>:</case>
<continue>continue;</continue>
<case>case <expr><literal type="char">'u'</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>ue</name> <operator>-</operator> <name>uc</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>uc</name> <operator>=</operator> <name>ue</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>json_isxdigit</name><argument_list>(<argument><expr><operator>*</operator><name>uc</name><operator>++</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt></block_content></block></for>
<continue>continue;</continue>
<default>default:</default>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></switch>
<case>case <expr><literal type="char">'"'</literal></expr>:</case>
<expr_stmt><expr><operator>*</operator><name>ucp</name> <operator>=</operator> <name>uc</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><literal type="string">"Good string: "</literal></expr></argument>, <argument><expr><name>uc</name></expr></argument>, <argument><expr><operator>*</operator><name>ucp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<default>default:</default>
<continue>continue;</continue>
</block_content>}</block></switch>
</block_content>}</block></while>
<label><name>out</name>:</label>
<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><literal type="string">"Bad string: "</literal></expr></argument>, <argument><expr><name>uc</name></expr></argument>, <argument><expr><operator>*</operator><name>ucp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ucp</name> <operator>=</operator> <name>uc</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>json_parse_array</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ucp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ue</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>lvl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>uc</name> <init>= <expr><operator>*</operator><name>ucp</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><literal type="string">"Parse array: "</literal></expr></argument>, <argument><expr><name>uc</name></expr></argument>, <argument><expr><operator>*</operator><name>ucp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>uc</name> <operator>&lt;</operator> <name>ue</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>uc</name> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>json_parse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>uc</name></expr></argument>, <argument><expr><name>ue</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>lvl</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>uc</name> <operator>==</operator> <name>ue</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><operator>*</operator><name>uc</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">','</literal></expr>:</case>
<expr_stmt><expr><name>uc</name><operator>++</operator></expr>;</expr_stmt>
<continue>continue;</continue>
<case>case <expr><literal type="char">']'</literal></expr>:</case>
<label><name>done</name>:</label>
<expr_stmt><expr><name><name>st</name><index>[<expr><name>JSON_ARRAYN</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ucp</name> <operator>=</operator> <name>uc</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><literal type="string">"Good array: "</literal></expr></argument>, <argument><expr><name>uc</name></expr></argument>, <argument><expr><operator>*</operator><name>ucp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<default>default:</default>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></switch>
</block_content>}</block></while>
<label><name>out</name>:</label>
<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><literal type="string">"Bad array: "</literal></expr></argument>, <argument><expr><name>uc</name></expr></argument>, <argument><expr><operator>*</operator><name>ucp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ucp</name> <operator>=</operator> <name>uc</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>json_parse_object</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ucp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ue</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>lvl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>uc</name> <init>= <expr><operator>*</operator><name>ucp</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><literal type="string">"Parse object: "</literal></expr></argument>, <argument><expr><name>uc</name></expr></argument>, <argument><expr><operator>*</operator><name>ucp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>uc</name> <operator>&lt;</operator> <name>ue</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>uc</name> <operator>=</operator> <call><name>json_skip_space</name><argument_list>(<argument><expr><name>uc</name></expr></argument>, <argument><expr><name>ue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>uc</name> <operator>==</operator> <name>ue</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>uc</name> <operator>==</operator> <literal type="char">'}'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>uc</name><operator>++</operator></expr>;</expr_stmt>
<goto>goto <name>done</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>uc</name><operator>++</operator> <operator>!=</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><literal type="string">"not string"</literal></expr></argument>, <argument><expr><name>uc</name></expr></argument>, <argument><expr><operator>*</operator><name>ucp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><literal type="string">"next field"</literal></expr></argument>, <argument><expr><name>uc</name></expr></argument>, <argument><expr><operator>*</operator><name>ucp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>json_parse_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>uc</name></expr></argument>, <argument><expr><name>ue</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><literal type="string">"not string"</literal></expr></argument>, <argument><expr><name>uc</name></expr></argument>, <argument><expr><operator>*</operator><name>ucp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>uc</name> <operator>=</operator> <call><name>json_skip_space</name><argument_list>(<argument><expr><name>uc</name></expr></argument>, <argument><expr><name>ue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>uc</name> <operator>==</operator> <name>ue</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>uc</name><operator>++</operator> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><literal type="string">"not colon"</literal></expr></argument>, <argument><expr><name>uc</name></expr></argument>, <argument><expr><operator>*</operator><name>ucp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>json_parse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>uc</name></expr></argument>, <argument><expr><name>ue</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>lvl</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><literal type="string">"not json"</literal></expr></argument>, <argument><expr><name>uc</name></expr></argument>, <argument><expr><operator>*</operator><name>ucp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>uc</name> <operator>==</operator> <name>ue</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><operator>*</operator><name>uc</name><operator>++</operator></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">','</literal></expr>:</case>
<continue>continue;</continue>
<case>case <expr><literal type="char">'}'</literal></expr>:</case>
<label><name>done</name>:</label>
<expr_stmt><expr><operator>*</operator><name>ucp</name> <operator>=</operator> <name>uc</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><literal type="string">"Good object: "</literal></expr></argument>, <argument><expr><name>uc</name></expr></argument>, <argument><expr><operator>*</operator><name>ucp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
<default>default:</default>
<expr_stmt><expr><operator>*</operator><name>ucp</name> <operator>=</operator> <name>uc</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><literal type="string">"not more"</literal></expr></argument>, <argument><expr><name>uc</name></expr></argument>, <argument><expr><operator>*</operator><name>ucp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></switch>
</block_content>}</block></while>
<label><name>out</name>:</label>
<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><literal type="string">"Bad object: "</literal></expr></argument>, <argument><expr><name>uc</name></expr></argument>, <argument><expr><operator>*</operator><name>ucp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ucp</name> <operator>=</operator> <name>uc</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>json_parse_number</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ucp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>uc</name> <init>= <expr><operator>*</operator><name>ucp</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>got</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><literal type="string">"Parse number: "</literal></expr></argument>, <argument><expr><name>uc</name></expr></argument>, <argument><expr><operator>*</operator><name>ucp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>uc</name> <operator>==</operator> <name>ue</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>uc</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>uc</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>uc</name> <operator>&lt;</operator> <name>ue</name></expr>;</condition> <incr><expr><name>uc</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>json_isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>uc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>got</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>uc</name> <operator>==</operator> <name>ue</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>uc</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>uc</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>uc</name> <operator>&lt;</operator> <name>ue</name></expr>;</condition> <incr><expr><name>uc</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>json_isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>uc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>got</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>uc</name> <operator>==</operator> <name>ue</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>got</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>uc</name> <operator>==</operator> <literal type="char">'e'</literal> <operator>||</operator> <operator>*</operator><name>uc</name> <operator>==</operator> <literal type="char">'E'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>uc</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>got</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>uc</name> <operator>==</operator> <name>ue</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>uc</name> <operator>==</operator> <literal type="char">'+'</literal> <operator>||</operator> <operator>*</operator><name>uc</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>uc</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>uc</name> <operator>&lt;</operator> <name>ue</name></expr>;</condition> <incr><expr><name>uc</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>json_isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>uc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>got</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<label><name>out</name>:</label>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>got</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><literal type="string">"Bad number: "</literal></expr></argument>, <argument><expr><name>uc</name></expr></argument>, <argument><expr><operator>*</operator><name>ucp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><literal type="string">"Good number: "</literal></expr></argument>, <argument><expr><name>uc</name></expr></argument>, <argument><expr><operator>*</operator><name>ucp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><operator>*</operator><name>ucp</name> <operator>=</operator> <name>uc</name></expr>;</expr_stmt>
<return>return <expr><name>got</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>json_parse_const</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ucp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ue</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>uc</name> <init>= <expr><operator>*</operator><name>ucp</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><literal type="string">"Parse const: "</literal></expr></argument>, <argument><expr><name>uc</name></expr></argument>, <argument><expr><operator>*</operator><name>ucp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>len</name><operator>--</operator></expr>;</init> <condition><expr><name>uc</name> <operator>&lt;</operator> <name>ue</name> <operator>&amp;&amp;</operator> <operator>--</operator><name>len</name></expr>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>uc</name><operator>++</operator> <operator>==</operator> <operator>*</operator><operator>++</operator><name>str</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><literal type="string">"Bad const: "</literal></expr></argument>, <argument><expr><name>uc</name></expr></argument>, <argument><expr><operator>*</operator><name>ucp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>ucp</name> <operator>=</operator> <name>uc</name></expr>;</expr_stmt>
<return>return <expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>json_parse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ucp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ue</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>lvl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>uc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><name>uc</name> <operator>=</operator> <call><name>json_skip_space</name><argument_list>(<argument><expr><operator>*</operator><name>ucp</name></expr></argument>, <argument><expr><name>ue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>uc</name> <operator>==</operator> <name>ue</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>lvl</name> <operator>&gt;</operator> <literal type="number">20</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JSON_COUNT</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name>lvl</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>st</name><index>[<expr><name>JSON_OBJECT</name></expr>]</index></name> <operator>||</operator> <name><name>st</name><index>[<expr><name>JSON_ARRAYN</name></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><literal type="string">"Parse general: "</literal></expr></argument>, <argument><expr><name>uc</name></expr></argument>, <argument><expr><operator>*</operator><name>ucp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><operator>*</operator><name>uc</name><operator>++</operator></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="char">'"'</literal></expr>:</case>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>json_parse_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>uc</name></expr></argument>, <argument><expr><name>ue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>JSON_STRING</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'['</literal></expr>:</case>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>json_parse_array</name><argument_list>(<argument><expr><operator>&amp;</operator><name>uc</name></expr></argument>, <argument><expr><name>ue</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>lvl</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>JSON_ARRAY</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'{'</literal></expr>:</case>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>json_parse_object</name><argument_list>(<argument><expr><operator>&amp;</operator><name>uc</name></expr></argument>, <argument><expr><name>ue</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>lvl</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>JSON_OBJECT</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'t'</literal></expr>:</case>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>json_parse_const</name><argument_list>(<argument><expr><operator>&amp;</operator><name>uc</name></expr></argument>, <argument><expr><name>ue</name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>JSON_CONSTANT</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'f'</literal></expr>:</case>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>json_parse_const</name><argument_list>(<argument><expr><operator>&amp;</operator><name>uc</name></expr></argument>, <argument><expr><name>ue</name></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>JSON_CONSTANT</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'n'</literal></expr>:</case>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>json_parse_const</name><argument_list>(<argument><expr><operator>&amp;</operator><name>uc</name></expr></argument>, <argument><expr><name>ue</name></expr></argument>, <argument><expr><literal type="string">"null"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>JSON_CONSTANT</name></expr>;</expr_stmt>
<break>break;</break>
<default>default:</default>
<expr_stmt><expr><operator>--</operator><name>uc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>json_parse_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name>uc</name></expr></argument>, <argument><expr><name>ue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>JSON_NUMBER</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><name>rv</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>st</name><index>[<expr><name>t</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>uc</name> <operator>=</operator> <call><name>json_skip_space</name><argument_list>(<argument><expr><name>uc</name></expr></argument>, <argument><expr><name>ue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>out</name>:</label>
<expr_stmt><expr><operator>*</operator><name>ucp</name> <operator>=</operator> <name>uc</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DPRINTF</name><argument_list>(<argument><expr><literal type="string">"End general: "</literal></expr></argument>, <argument><expr><name>uc</name></expr></argument>, <argument><expr><operator>*</operator><name>ucp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>lvl</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>rv</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>st</name><index>[<expr><name>JSON_ARRAYN</name></expr>]</index></name> <operator>||</operator> <name><name>st</name><index>[<expr><name>JSON_OBJECT</name></expr>]</index></name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type>
<name>file_is_json</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>magic_set</name></name> <modifier>*</modifier></type><name>ms</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>buffer</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>uc</name> <init>= <macro><name>CAST</name><argument_list>(<argument>const unsigned char *</argument>, <argument>b-&gt;fbuf</argument>)</argument_list></macro></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ue</name> <init>= <expr><name>uc</name> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>flen</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name><name>st</name><index>[<expr><name>JSON_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mime</name> <init>= <expr><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MAGIC_MIME</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ms</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>MAGIC_APPLE</name><operator>|</operator><name>MAGIC_EXTENSION</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>json_parse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>uc</name></expr></argument>, <argument><expr><name>ue</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mime</name> <operator>==</operator> <name>MAGIC_MIME_ENCODING</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>mime</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"application/json"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">"JSON data"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>JSON_COUNT</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>st[n], st[n] &gt; 1 ? "s" : ""</cpp:value></cpp:define>
<if_stmt><if>if <condition>(<expr><call><name>file_printf</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><literal type="string">" (%"</literal> <name>SIZE_T_FORMAT</name> <literal type="string">"u object%s, %"</literal> <name>SIZE_T_FORMAT</name>
<literal type="string">"u array%s, %"</literal> <name>SIZE_T_FORMAT</name> <literal type="string">"u string%s, %"</literal> <name>SIZE_T_FORMAT</name>
<literal type="string">"u constant%s, %"</literal> <name>SIZE_T_FORMAT</name> <literal type="string">"u number%s, %"</literal> <name>SIZE_T_FORMAT</name>
<literal type="string">"u &gt;1array%s)"</literal></expr></argument>,
<argument><expr><call><name>P</name><argument_list>(<argument><expr><name>JSON_OBJECT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>P</name><argument_list>(<argument><expr><name>JSON_ARRAY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>P</name><argument_list>(<argument><expr><name>JSON_STRING</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>P</name><argument_list>(<argument><expr><name>JSON_CONSTANT</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>P</name><argument_list>(<argument><expr><name>JSON_NUMBER</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>P</name><argument_list>(<argument><expr><name>JSON_ARRAYN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
<operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;err.h&gt;</cpp:file></cpp:include>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>, <decl><type ref="prev"/><name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name><name>stats</name><index>[<expr><name>JSON_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>, <argument><expr><literal type="string">"Can't open `%s'"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fstat</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>, <argument><expr><literal type="string">"Can't stat `%s'"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_size</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>, <argument><expr><literal type="string">"Can't allocate %jd bytes"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>st</name><operator>.</operator><name>st_size</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>st</name><operator>.</operator><name>st_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>, <argument><expr><literal type="string">"Can't read %jd bytes"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>intmax_t</name><operator>)</operator><name><name>st</name><operator>.</operator><name>st_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>stats</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>stats</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"is json %d\n"</literal></expr></argument>, <argument><expr><call><name>json_parse</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p</name></expr></argument>,
<argument><expr><name>p</name> <operator>+</operator> <name><name>st</name><operator>.</operator><name>st_size</name></name></expr></argument>, <argument><expr><name>stats</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
