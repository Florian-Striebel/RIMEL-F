<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libpcap/pcap-tc.c">






























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pcap.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pcap-int.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pcap-tc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;malloc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tchar.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <function_decl><type><name>TC_STATUS</name></type> (<name>TC_CALLCONV</name> <modifier>*</modifier><name>TcFcnQueryPortList</name>) <parameter_list>(<parameter><decl><type><name>PTC_PORT</name> <modifier>*</modifier></type><name>ppPorts</name></decl></parameter>, <parameter><decl><type><name>PULONG</name></type> <name>pLength</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>TC_STATUS</name></type> (<name>TC_CALLCONV</name> <modifier>*</modifier><name>TcFcnFreePortList</name>) <parameter_list>(<parameter><decl><type><name>TC_PORT</name> <modifier>*</modifier></type><name>pPorts</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>PCHAR</name></type> (<name>TC_CALLCONV</name> <modifier>*</modifier><name>TcFcnStatusGetString</name>) <parameter_list>(<parameter><decl><type><name>TC_STATUS</name></type> <name>status</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>PCHAR</name></type> (<name>TC_CALLCONV</name> <modifier>*</modifier><name>TcFcnPortGetName</name>) <parameter_list>(<parameter><decl><type><name>TC_PORT</name></type> <name>port</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>PCHAR</name></type> (<name>TC_CALLCONV</name> <modifier>*</modifier><name>TcFcnPortGetDescription</name>) <parameter_list>(<parameter><decl><type><name>TC_PORT</name></type> <name>port</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>TC_STATUS</name></type> (<name>TC_CALLCONV</name> <modifier>*</modifier><name>TcFcnInstanceOpenByName</name>) <parameter_list>(<parameter><decl><type><name>PCHAR</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>PTC_INSTANCE</name></type> <name>pInstance</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>TC_STATUS</name></type> (<name>TC_CALLCONV</name> <modifier>*</modifier><name>TcFcnInstanceClose</name>) <parameter_list>(<parameter><decl><type><name>TC_INSTANCE</name></type> <name>instance</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>TC_STATUS</name></type> (<name>TC_CALLCONV</name> <modifier>*</modifier><name>TcFcnInstanceSetFeature</name>) <parameter_list>(<parameter><decl><type><name>TC_INSTANCE</name></type> <name>instance</name></decl></parameter>, <parameter><decl><type><name>ULONG</name></type> <name>feature</name></decl></parameter>, <parameter><decl><type><name>ULONG</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>TC_STATUS</name></type> (<name>TC_CALLCONV</name> <modifier>*</modifier><name>TcFcnInstanceQueryFeature</name>) <parameter_list>(<parameter><decl><type><name>TC_INSTANCE</name></type> <name>instance</name></decl></parameter>, <parameter><decl><type><name>ULONG</name></type> <name>feature</name></decl></parameter>, <parameter><decl><type><name>PULONG</name></type> <name>pValue</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>TC_STATUS</name></type> (<name>TC_CALLCONV</name> <modifier>*</modifier><name>TcFcnInstanceReceivePackets</name>) <parameter_list>(<parameter><decl><type><name>TC_INSTANCE</name></type> <name>instance</name></decl></parameter>, <parameter><decl><type><name>PTC_PACKETS_BUFFER</name></type> <name>pBuffer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>HANDLE</name></type> (<name>TC_CALLCONV</name> <modifier>*</modifier><name>TcFcnInstanceGetReceiveWaitHandle</name>) <parameter_list>(<parameter><decl><type><name>TC_INSTANCE</name></type> <name>instance</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>TC_STATUS</name></type> (<name>TC_CALLCONV</name> <modifier>*</modifier><name>TcFcnInstanceTransmitPackets</name>) <parameter_list>(<parameter><decl><type><name>TC_INSTANCE</name></type> <name>instance</name></decl></parameter>, <parameter><decl><type><name>TC_PACKETS_BUFFER</name></type> <name>pBuffer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>TC_STATUS</name></type> (<name>TC_CALLCONV</name> <modifier>*</modifier><name>TcFcnInstanceQueryStatistics</name>) <parameter_list>(<parameter><decl><type><name>TC_INSTANCE</name></type> <name>instance</name></decl></parameter>, <parameter><decl><type><name>PTC_STATISTICS</name></type> <name>pStatistics</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>TC_STATUS</name></type> (<name>TC_CALLCONV</name> <modifier>*</modifier><name>TcFcnPacketsBufferCreate</name>) <parameter_list>(<parameter><decl><type><name>ULONG</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>PTC_PACKETS_BUFFER</name></type> <name>pBuffer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VOID</name></type> (<name>TC_CALLCONV</name> <modifier>*</modifier><name>TcFcnPacketsBufferDestroy</name>) <parameter_list>(<parameter><decl><type><name>TC_PACKETS_BUFFER</name></type> <name>buffer</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>TC_STATUS</name></type> (<name>TC_CALLCONV</name> <modifier>*</modifier><name>TcFcnPacketsBufferQueryNextPacket</name>)<parameter_list>(<parameter><decl><type><name>TC_PACKETS_BUFFER</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>PTC_PACKET_HEADER</name></type> <name>pHeader</name></decl></parameter>, <parameter><decl><type><name>PVOID</name> <modifier>*</modifier></type><name>ppData</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>TC_STATUS</name></type> (<name>TC_CALLCONV</name> <modifier>*</modifier><name>TcFcnPacketsBufferCommitNextPacket</name>)<parameter_list>(<parameter><decl><type><name>TC_PACKETS_BUFFER</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>PTC_PACKET_HEADER</name></type> <name>pHeader</name></decl></parameter>, <parameter><decl><type><name>PVOID</name></type> <name>pData</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>VOID</name></type> (<name>TC_CALLCONV</name> <modifier>*</modifier><name>TcFcnStatisticsDestroy</name>) <parameter_list>(<parameter><decl><type><name>TC_STATISTICS</name></type> <name>statistics</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>TC_STATUS</name></type> (<name>TC_CALLCONV</name> <modifier>*</modifier><name>TcFcnStatisticsUpdate</name>) <parameter_list>(<parameter><decl><type><name>TC_STATISTICS</name></type> <name>statistics</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>TC_STATUS</name></type> (<name>TC_CALLCONV</name> <modifier>*</modifier><name>TcFcnStatisticsQueryValue</name>) <parameter_list>(<parameter><decl><type><name>TC_STATISTICS</name></type> <name>statistics</name></decl></parameter>, <parameter><decl><type><name>ULONG</name></type> <name>counterId</name></decl></parameter>, <parameter><decl><type><name>PULONGLONG</name></type> <name>pValue</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><enum>enum <name>LONG</name>
<block>{
<decl><name>TC_API_UNLOADED</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>TC_API_LOADED</name></decl>,
<decl><name>TC_API_CANNOT_LOAD</name></decl>,
<decl><name>TC_API_LOADING</name></decl>
}</block></enum></type>
<name>TC_API_LOAD_STATUS</name>;</typedef>


<typedef>typedef <type><struct>struct <name>_TC_FUNCTIONS</name>
<block>{
<decl_stmt><decl><type><name>TC_API_LOAD_STATUS</name></type> <name>LoadStatus</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>HMODULE</name></type> <name>hTcApiDllHandle</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>TcFcnQueryPortList</name></type> <name>QueryPortList</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TcFcnFreePortList</name></type> <name>FreePortList</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TcFcnStatusGetString</name></type> <name>StatusGetString</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TcFcnPortGetName</name></type> <name>PortGetName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TcFcnPortGetDescription</name></type> <name>PortGetDescription</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TcFcnInstanceOpenByName</name></type> <name>InstanceOpenByName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TcFcnInstanceClose</name></type> <name>InstanceClose</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TcFcnInstanceSetFeature</name></type> <name>InstanceSetFeature</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TcFcnInstanceQueryFeature</name></type> <name>InstanceQueryFeature</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TcFcnInstanceReceivePackets</name></type> <name>InstanceReceivePackets</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>TcFcnInstanceGetReceiveWaitHandle</name></type> <name>InstanceGetReceiveWaitHandle</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>TcFcnInstanceTransmitPackets</name></type> <name>InstanceTransmitPackets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TcFcnInstanceQueryStatistics</name></type> <name>InstanceQueryStatistics</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TcFcnPacketsBufferCreate</name></type> <name>PacketsBufferCreate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TcFcnPacketsBufferDestroy</name></type> <name>PacketsBufferDestroy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TcFcnPacketsBufferQueryNextPacket</name></type> <name>PacketsBufferQueryNextPacket</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TcFcnPacketsBufferCommitNextPacket</name></type> <name>PacketsBufferCommitNextPacket</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TcFcnStatisticsDestroy</name></type> <name>StatisticsDestroy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TcFcnStatisticsUpdate</name></type> <name>StatisticsUpdate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TcFcnStatisticsQueryValue</name></type> <name>StatisticsQueryValue</name></decl>;</decl_stmt>
}</block></struct></type>
<name>TC_FUNCTIONS</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>pcap_if_t</name><modifier>*</modifier></type> <name>TcCreatePcapIfFromPort</name><parameter_list>(<parameter><decl><type><name>TC_PORT</name></type> <name>port</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>TcSetDatalink</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dlt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>TcGetNonBlock</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>TcSetNonBlock</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nonblock</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>TcCleanup</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>TcInject</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>TcRead</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cnt</name></decl></parameter>, <parameter><decl><type><name>pcap_handler</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>u_char</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>TcStats</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>pcap_stat</name></name> <modifier>*</modifier></type><name>ps</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>TcSetFilter</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>bpf_program</name></name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>pcap_stat</name></name> <modifier>*</modifier></type><name>TcStatsEx</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pcap_stat_size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>TcSetBuff</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dim</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>TcSetMode</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>TcSetMinToCopy</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>HANDLE</name></type> <name>TcGetReceiveWaitHandle</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>TcOidGetRequest</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>bpf_u_int32</name></type> <name>oid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>lenp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>TcOidSetRequest</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>bpf_u_int32</name></type> <name>oid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>lenp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>u_int</name></type> <name>TcSendqueueTransmit</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>pcap_send_queue</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sync</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>TcSetUserBuffer</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>TcLiveDump</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxsize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxpacks</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>TcLiveDumpEnded</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sync</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PAirpcapHandle</name></type> <name>TcGetAirPcapHandle</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>TC_FUNCTIONS</name></type> <name>g_TcFunctions</name> <init>=
<expr><block>{
<expr><name>TC_API_UNLOADED</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>TC_FUNCTIONS</name></type> <name>g_TcFunctions</name> <init>=
<expr><block>{
<expr><name>TC_API_LOADED</name></expr>,
<expr><name>TcQueryPortList</name></expr>,
<expr><name>TcFreePortList</name></expr>,
<expr><name>TcStatusGetString</name></expr>,
<expr><name>TcPortGetName</name></expr>,
<expr><name>TcPortGetDescription</name></expr>,
<expr><name>TcInstanceOpenByName</name></expr>,
<expr><name>TcInstanceClose</name></expr>,
<expr><name>TcInstanceSetFeature</name></expr>,
<expr><name>TcInstanceQueryFeature</name></expr>,
<expr><name>TcInstanceReceivePackets</name></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><name>TcInstanceGetReceiveWaitHandle</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><name>TcInstanceTransmitPackets</name></expr>,
<expr><name>TcInstanceQueryStatistics</name></expr>,
<expr><name>TcPacketsBufferCreate</name></expr>,
<expr><name>TcPacketsBufferDestroy</name></expr>,
<expr><name>TcPacketsBufferQueryNextPacket</name></expr>,
<expr><name>TcPacketsBufferCommitNextPacket</name></expr>,
<expr><name>TcStatisticsDestroy</name></expr>,
<expr><name>TcStatisticsUpdate</name></expr>,
<expr><name>TcStatisticsQueryValue</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_TC_PACKET_SIZE</name></cpp:macro> <cpp:value>9500</cpp:value></cpp:define>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pack</name><name>(</name><name>push</name><name>,</name> <name>1</name><name>)</name></cpp:pragma>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PPH_PH_FLAG_PADDING</name></cpp:macro> <cpp:value>((UCHAR)0x01)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PPH_PH_VERSION</name></cpp:macro> <cpp:value>((UCHAR)0x00)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>_PPI_PACKET_HEADER</name>
<block>{
<decl_stmt><decl><type><name>UCHAR</name></type> <name>PphVersion</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UCHAR</name></type> <name>PphFlags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>USHORT</name></type> <name>PphLength</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG</name></type> <name>PphDlt</name></decl>;</decl_stmt>
}</block></struct></type>
<name>PPI_PACKET_HEADER</name><operator>,</operator> *<name>PPPI_PACKET_HEADER</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_PPI_FIELD_HEADER</name>
<block>{
<decl_stmt><decl><type><name>USHORT</name></type> <name>PfhType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>USHORT</name></type> <name>PfhLength</name></decl>;</decl_stmt>
}</block></struct></type>
<name>PPI_FIELD_HEADER</name><operator>,</operator> *<name>PPPI_FIELD_HEADER</name>;</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PPI_FIELD_TYPE_AGGREGATION_EXTENSION</name></cpp:macro> <cpp:value>((UCHAR)0x08)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>_PPI_FIELD_AGGREGATION_EXTENSION</name>
<block>{
<decl_stmt><decl><type><name>ULONG</name></type> <name>InterfaceId</name></decl>;</decl_stmt>
}</block></struct></type>
<name>PPI_FIELD_AGGREGATION_EXTENSION</name><operator>,</operator> *<name>PPPI_FIELD_AGGREGATION_EXTENSION</name>;</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PPI_FIELD_TYPE_802_3_EXTENSION</name></cpp:macro> <cpp:value>((UCHAR)0x09)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PPI_FLD_802_3_EXT_FLAG_FCS_PRESENT</name></cpp:macro> <cpp:value>((ULONG)0x00000001)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>_PPI_FIELD_802_3_EXTENSION</name>
<block>{
<decl_stmt><decl><type><name>ULONG</name></type> <name>Flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG</name></type> <name>Errors</name></decl>;</decl_stmt>
}</block></struct></type>
<name>PPI_FIELD_802_3_EXTENSION</name><operator>,</operator> *<name>PPPI_FIELD_802_3_EXTENSION</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_PPI_HEADER</name>
<block>{
<decl_stmt><decl><type><name>PPI_PACKET_HEADER</name></type> <name>PacketHeader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PPI_FIELD_HEADER</name></type> <name>AggregationFieldHeader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PPI_FIELD_AGGREGATION_EXTENSION</name></type> <name>AggregationField</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PPI_FIELD_HEADER</name></type> <name>Dot3FieldHeader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PPI_FIELD_802_3_EXTENSION</name></type> <name>Dot3Field</name></decl>;</decl_stmt>
}</block></struct></type>
<name>PPI_HEADER</name><operator>,</operator> *<name>PPPI_HEADER</name>;</typedef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pack</name><name>(</name><name>pop</name><name>)</name></cpp:pragma>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>







<function><type><name>HMODULE</name></type> <name>LoadLibrarySafe</name><parameter_list>(<parameter><decl><type><name>LPCTSTR</name></type> <name>lpFileName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TCHAR</name></type> <name><name>path</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TCHAR</name></type> <name><name>fullFileName</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UINT</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HMODULE</name></type> <name>hModule</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<do>do
<block>{<block_content>
<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>GetSystemDirectory</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>MAX_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>



<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&gt;</operator> <name>MAX_PATH</name></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><call><name>SetLastError</name><argument_list>(<argument><expr><name>ERROR_INSUFFICIENT_BUFFER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>_tcslen</name><argument_list>(<argument><expr><name>lpFileName</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>MAX_PATH</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>fullFileName</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>res</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TCHAR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fullFileName</name><index>[<expr><name>res</name></expr>]</index></name> <operator>=</operator> <call><name>_T</name><argument_list>(<argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fullFileName</name><index>[<expr><name>res</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>lpFileName</name></expr></argument>, <argument><expr><operator>(</operator><call><name>_tcslen</name><argument_list>(<argument><expr><name>lpFileName</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TCHAR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hModule</name> <operator>=</operator> <call><name>LoadLibrary</name><argument_list>(<argument><expr><name>fullFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>SetLastError</name><argument_list>(<argument><expr><name>ERROR_INSUFFICIENT_BUFFER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

</block_content>}</block>while<condition>(<expr><name>FALSE</name></expr>)</condition>;</do>

<return>return <expr><name>hModule</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>TC_API_LOAD_STATUS</name></type> <name>LoadTcFunctions</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TC_API_LOAD_STATUS</name></type> <name>currentStatus</name></decl>;</decl_stmt>

<do>do
<block>{<block_content>
<expr_stmt><expr><name>currentStatus</name> <operator>=</operator> <call><name>InterlockedCompareExchange</name><argument_list>(<argument><expr><operator>(</operator><name>LONG</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>g_TcFunctions</name><operator>.</operator><name>LoadStatus</name></name></expr></argument>, <argument><expr><name>TC_API_LOADING</name></expr></argument>, <argument><expr><name>TC_API_UNLOADED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while<condition>(<expr><name>currentStatus</name> <operator>==</operator> <name>TC_API_LOADING</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>currentStatus</name> <operator>=</operator> <call><name>InterlockedCompareExchange</name><argument_list>(<argument><expr><operator>(</operator><name>LONG</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>g_TcFunctions</name><operator>.</operator><name>LoadStatus</name></name></expr></argument>, <argument><expr><name>TC_API_LOADING</name></expr></argument>, <argument><expr><name>TC_API_LOADING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>





<if_stmt><if>if<condition>(<expr><name>currentStatus</name> <operator>==</operator> <name>TC_API_LOADED</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>TC_API_LOADED</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>currentStatus</name> <operator>==</operator> <name>TC_API_CANNOT_LOAD</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>TC_API_CANNOT_LOAD</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>currentStatus</name> <operator>=</operator> <name>TC_API_CANNOT_LOAD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g_TcFunctions</name><operator>.</operator><name>hTcApiDllHandle</name></name> <operator>=</operator> <call><name>LoadLibrarySafe</name><argument_list>(<argument><expr><literal type="string">"TcApi.dll"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>g_TcFunctions</name><operator>.</operator><name>hTcApiDllHandle</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>g_TcFunctions</name><operator>.</operator><name>QueryPortList</name></name> <operator>=</operator> <operator>(</operator><name>TcFcnQueryPortList</name><operator>)</operator> <call><name>GetProcAddress</name><argument_list>(<argument><expr><name><name>g_TcFunctions</name><operator>.</operator><name>hTcApiDllHandle</name></name></expr></argument>, <argument><expr><literal type="string">"TcQueryPortList"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g_TcFunctions</name><operator>.</operator><name>FreePortList</name></name> <operator>=</operator> <operator>(</operator><name>TcFcnFreePortList</name><operator>)</operator> <call><name>GetProcAddress</name><argument_list>(<argument><expr><name><name>g_TcFunctions</name><operator>.</operator><name>hTcApiDllHandle</name></name></expr></argument>, <argument><expr><literal type="string">"TcFreePortList"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g_TcFunctions</name><operator>.</operator><name>StatusGetString</name></name> <operator>=</operator> <operator>(</operator><name>TcFcnStatusGetString</name><operator>)</operator> <call><name>GetProcAddress</name><argument_list>(<argument><expr><name><name>g_TcFunctions</name><operator>.</operator><name>hTcApiDllHandle</name></name></expr></argument>, <argument><expr><literal type="string">"TcStatusGetString"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g_TcFunctions</name><operator>.</operator><name>PortGetName</name></name> <operator>=</operator> <operator>(</operator><name>TcFcnPortGetName</name><operator>)</operator> <call><name>GetProcAddress</name><argument_list>(<argument><expr><name><name>g_TcFunctions</name><operator>.</operator><name>hTcApiDllHandle</name></name></expr></argument>, <argument><expr><literal type="string">"TcPortGetName"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g_TcFunctions</name><operator>.</operator><name>PortGetDescription</name></name> <operator>=</operator> <operator>(</operator><name>TcFcnPortGetDescription</name><operator>)</operator> <call><name>GetProcAddress</name><argument_list>(<argument><expr><name><name>g_TcFunctions</name><operator>.</operator><name>hTcApiDllHandle</name></name></expr></argument>, <argument><expr><literal type="string">"TcPortGetDescription"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g_TcFunctions</name><operator>.</operator><name>InstanceOpenByName</name></name> <operator>=</operator> <operator>(</operator><name>TcFcnInstanceOpenByName</name><operator>)</operator> <call><name>GetProcAddress</name><argument_list>(<argument><expr><name><name>g_TcFunctions</name><operator>.</operator><name>hTcApiDllHandle</name></name></expr></argument>, <argument><expr><literal type="string">"TcInstanceOpenByName"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g_TcFunctions</name><operator>.</operator><name>InstanceClose</name></name> <operator>=</operator> <operator>(</operator><name>TcFcnInstanceClose</name><operator>)</operator> <call><name>GetProcAddress</name><argument_list>(<argument><expr><name><name>g_TcFunctions</name><operator>.</operator><name>hTcApiDllHandle</name></name></expr></argument>, <argument><expr><literal type="string">"TcInstanceClose"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g_TcFunctions</name><operator>.</operator><name>InstanceSetFeature</name></name> <operator>=</operator> <operator>(</operator><name>TcFcnInstanceSetFeature</name><operator>)</operator> <call><name>GetProcAddress</name><argument_list>(<argument><expr><name><name>g_TcFunctions</name><operator>.</operator><name>hTcApiDllHandle</name></name></expr></argument>, <argument><expr><literal type="string">"TcInstanceSetFeature"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g_TcFunctions</name><operator>.</operator><name>InstanceQueryFeature</name></name> <operator>=</operator> <operator>(</operator><name>TcFcnInstanceQueryFeature</name><operator>)</operator> <call><name>GetProcAddress</name><argument_list>(<argument><expr><name><name>g_TcFunctions</name><operator>.</operator><name>hTcApiDllHandle</name></name></expr></argument>, <argument><expr><literal type="string">"TcInstanceQueryFeature"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g_TcFunctions</name><operator>.</operator><name>InstanceReceivePackets</name></name> <operator>=</operator> <operator>(</operator><name>TcFcnInstanceReceivePackets</name><operator>)</operator> <call><name>GetProcAddress</name><argument_list>(<argument><expr><name><name>g_TcFunctions</name><operator>.</operator><name>hTcApiDllHandle</name></name></expr></argument>, <argument><expr><literal type="string">"TcInstanceReceivePackets"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g_TcFunctions</name><operator>.</operator><name>InstanceGetReceiveWaitHandle</name></name> <operator>=</operator> <operator>(</operator><name>TcFcnInstanceGetReceiveWaitHandle</name><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name><name>g_TcFunctions</name><operator>.</operator><name>hTcApiDllHandle</name></name></expr></argument>, <argument><expr><literal type="string">"TcInstanceGetReceiveWaitHandle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g_TcFunctions</name><operator>.</operator><name>InstanceTransmitPackets</name></name> <operator>=</operator> <operator>(</operator><name>TcFcnInstanceTransmitPackets</name><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name><name>g_TcFunctions</name><operator>.</operator><name>hTcApiDllHandle</name></name></expr></argument>, <argument><expr><literal type="string">"TcInstanceTransmitPackets"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g_TcFunctions</name><operator>.</operator><name>InstanceQueryStatistics</name></name> <operator>=</operator> <operator>(</operator><name>TcFcnInstanceQueryStatistics</name><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name><name>g_TcFunctions</name><operator>.</operator><name>hTcApiDllHandle</name></name></expr></argument>, <argument><expr><literal type="string">"TcInstanceQueryStatistics"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g_TcFunctions</name><operator>.</operator><name>PacketsBufferCreate</name></name> <operator>=</operator> <operator>(</operator><name>TcFcnPacketsBufferCreate</name><operator>)</operator> <call><name>GetProcAddress</name><argument_list>(<argument><expr><name><name>g_TcFunctions</name><operator>.</operator><name>hTcApiDllHandle</name></name></expr></argument>, <argument><expr><literal type="string">"TcPacketsBufferCreate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g_TcFunctions</name><operator>.</operator><name>PacketsBufferDestroy</name></name> <operator>=</operator> <operator>(</operator><name>TcFcnPacketsBufferDestroy</name><operator>)</operator> <call><name>GetProcAddress</name><argument_list>(<argument><expr><name><name>g_TcFunctions</name><operator>.</operator><name>hTcApiDllHandle</name></name></expr></argument>, <argument><expr><literal type="string">"TcPacketsBufferDestroy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g_TcFunctions</name><operator>.</operator><name>PacketsBufferQueryNextPacket</name></name> <operator>=</operator> <operator>(</operator><name>TcFcnPacketsBufferQueryNextPacket</name><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name><name>g_TcFunctions</name><operator>.</operator><name>hTcApiDllHandle</name></name></expr></argument>, <argument><expr><literal type="string">"TcPacketsBufferQueryNextPacket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g_TcFunctions</name><operator>.</operator><name>PacketsBufferCommitNextPacket</name></name> <operator>=</operator> <operator>(</operator><name>TcFcnPacketsBufferCommitNextPacket</name><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name><name>g_TcFunctions</name><operator>.</operator><name>hTcApiDllHandle</name></name></expr></argument>, <argument><expr><literal type="string">"TcPacketsBufferCommitNextPacket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g_TcFunctions</name><operator>.</operator><name>StatisticsDestroy</name></name> <operator>=</operator> <operator>(</operator><name>TcFcnStatisticsDestroy</name><operator>)</operator> <call><name>GetProcAddress</name><argument_list>(<argument><expr><name><name>g_TcFunctions</name><operator>.</operator><name>hTcApiDllHandle</name></name></expr></argument>, <argument><expr><literal type="string">"TcStatisticsDestroy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g_TcFunctions</name><operator>.</operator><name>StatisticsUpdate</name></name> <operator>=</operator> <operator>(</operator><name>TcFcnStatisticsUpdate</name><operator>)</operator> <call><name>GetProcAddress</name><argument_list>(<argument><expr><name><name>g_TcFunctions</name><operator>.</operator><name>hTcApiDllHandle</name></name></expr></argument>, <argument><expr><literal type="string">"TcStatisticsUpdate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g_TcFunctions</name><operator>.</operator><name>StatisticsQueryValue</name></name> <operator>=</operator> <operator>(</operator><name>TcFcnStatisticsQueryValue</name><operator>)</operator> <call><name>GetProcAddress</name><argument_list>(<argument><expr><name><name>g_TcFunctions</name><operator>.</operator><name>hTcApiDllHandle</name></name></expr></argument>, <argument><expr><literal type="string">"TcStatisticsQueryValue"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>g_TcFunctions</name><operator>.</operator><name>QueryPortList</name></name> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <name><name>g_TcFunctions</name><operator>.</operator><name>FreePortList</name></name> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <name><name>g_TcFunctions</name><operator>.</operator><name>StatusGetString</name></name> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <name><name>g_TcFunctions</name><operator>.</operator><name>PortGetName</name></name> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <name><name>g_TcFunctions</name><operator>.</operator><name>PortGetDescription</name></name> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <name><name>g_TcFunctions</name><operator>.</operator><name>InstanceOpenByName</name></name> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <name><name>g_TcFunctions</name><operator>.</operator><name>InstanceClose</name></name> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <name><name>g_TcFunctions</name><operator>.</operator><name>InstanceSetFeature</name></name> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <name><name>g_TcFunctions</name><operator>.</operator><name>InstanceQueryFeature</name></name> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <name><name>g_TcFunctions</name><operator>.</operator><name>InstanceReceivePackets</name></name> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <name><name>g_TcFunctions</name><operator>.</operator><name>InstanceGetReceiveWaitHandle</name></name> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <name><name>g_TcFunctions</name><operator>.</operator><name>InstanceTransmitPackets</name></name> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <name><name>g_TcFunctions</name><operator>.</operator><name>InstanceQueryStatistics</name></name> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <name><name>g_TcFunctions</name><operator>.</operator><name>PacketsBufferCreate</name></name> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <name><name>g_TcFunctions</name><operator>.</operator><name>PacketsBufferDestroy</name></name> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <name><name>g_TcFunctions</name><operator>.</operator><name>PacketsBufferQueryNextPacket</name></name> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <name><name>g_TcFunctions</name><operator>.</operator><name>PacketsBufferCommitNextPacket</name></name> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <name><name>g_TcFunctions</name><operator>.</operator><name>StatisticsDestroy</name></name> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <name><name>g_TcFunctions</name><operator>.</operator><name>StatisticsUpdate</name></name> <operator>==</operator> <name>NULL</name>
<operator>||</operator> <name><name>g_TcFunctions</name><operator>.</operator><name>StatisticsQueryValue</name></name> <operator>==</operator> <name>NULL</name></expr>
)</condition>
<block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>currentStatus</name> <operator>=</operator> <name>TC_API_LOADED</name></expr>;</expr_stmt>
</block_content>}</block>while<condition>(<expr><name>FALSE</name></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>currentStatus</name> <operator>!=</operator> <name>TC_API_LOADED</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>g_TcFunctions</name><operator>.</operator><name>hTcApiDllHandle</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name><name>g_TcFunctions</name><operator>.</operator><name>hTcApiDllHandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g_TcFunctions</name><operator>.</operator><name>hTcApiDllHandle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>InterlockedExchange</name><argument_list>(<argument><expr><operator>(</operator><name>LONG</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>g_TcFunctions</name><operator>.</operator><name>LoadStatus</name></name></expr></argument>, <argument><expr><name>currentStatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>currentStatus</name></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><name>TC_API_LOAD_STATUS</name></type> <name>LoadTcFunctions</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>TC_API_LOADED</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<struct>struct <name>pcap_tc</name> <block>{
<decl_stmt><decl><type><name>TC_INSTANCE</name></type> <name>TcInstance</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TC_PACKETS_BUFFER</name></type> <name>TcPacketsBuffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG</name></type> <name>TcAcceptedCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_char</name> <modifier>*</modifier></type><name>PpiPacket</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>int</name></type>
<name>TcFindAllDevs</name><parameter_list>(<parameter><decl><type><name>pcap_if_list_t</name> <modifier>*</modifier></type><name>devlist</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>TC_API_LOAD_STATUS</name></type> <name>loadStatus</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG</name></type> <name>numPorts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PTC_PORT</name></type> <name>pPorts</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TC_STATUS</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pcap_if_t</name> <modifier>*</modifier></type><name>dev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG</name></type> <name>i</name></decl>;</decl_stmt>

<do>do
<block>{<block_content>
<expr_stmt><expr><name>loadStatus</name> <operator>=</operator> <call><name>LoadTcFunctions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>loadStatus</name> <operator>!=</operator> <name>TC_API_LOADED</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>g_TcFunctions</name><operator>.</operator><name>QueryPortList</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>pPorts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numPorts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>TC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numPorts</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>



<expr_stmt><expr><name>dev</name> <operator>=</operator> <call><name>TcCreatePcapIfFromPort</name><argument_list>(<argument><expr><name><name>pPorts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dev</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>add_dev</name><argument_list>(<argument><expr><name>devlist</name></expr></argument>, <argument><expr><name><name>dev</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>dev</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name><name>dev</name><operator>-&gt;</operator><name>description</name></name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>numPorts</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>g_TcFunctions</name><operator>.</operator><name>FreePortList</name></name><argument_list>(<argument><expr><name>pPorts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

</block_content>}</block>while<condition>(<expr><name>FALSE</name></expr>)</condition>;</do>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>pcap_if_t</name><modifier>*</modifier></type> <name>TcCreatePcapIfFromPort</name><parameter_list>(<parameter><decl><type><name>TC_PORT</name></type> <name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>CHAR</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CHAR</name> <modifier>*</modifier></type><name>description</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pcap_if_t</name> <modifier>*</modifier></type><name>newIf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>newIf</name> <operator>=</operator> <operator>(</operator><name>pcap_if_t</name><operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>newIf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>newIf</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>newIf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>newIf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name><name>g_TcFunctions</name><operator>.</operator><name>PortGetName</name></name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>description</name> <operator>=</operator> <call><name><name>g_TcFunctions</name><operator>.</operator><name>PortGetDescription</name></name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>newIf</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>newIf</name><operator>-&gt;</operator><name>name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>newIf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>newIf</name><operator>-&gt;</operator><name>description</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>description</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>newIf</name><operator>-&gt;</operator><name>description</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>newIf</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>newIf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>newIf</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>newIf</name><operator>-&gt;</operator><name>description</name></name></expr></argument>, <argument><expr><name>description</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>newIf</name><operator>-&gt;</operator><name>addresses</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newIf</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newIf</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>newIf</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>TcActivate</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_tc</name></name> <modifier>*</modifier></type><name>pt</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TC_STATUS</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG</name></type> <name>timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PPPI_HEADER</name></type> <name>pPpiHeader</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>rfmon</name></name></expr>)</condition>
<block>{<block_content>




<return>return <expr><name>PCAP_ERROR_RFMON_NOTSUP</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>PpiPacket</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PPI_HEADER</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>MAX_TC_PACKET_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pt</name><operator>-&gt;</operator><name>PpiPacket</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"Error allocating memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>









<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>snapshot</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>snapshot</name></name> <operator>&gt;</operator> <name>MAXIMUM_SNAPLEN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>snapshot</name></name> <operator>=</operator> <name>MAXIMUM_SNAPLEN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>




<expr_stmt><expr><name>pPpiHeader</name> <operator>=</operator> <operator>(</operator><name>PPPI_HEADER</name><operator>)</operator><name><name>pt</name><operator>-&gt;</operator><name>PpiPacket</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pPpiHeader</name><operator>-&gt;</operator><name>PacketHeader</name><operator>.</operator><name>PphDlt</name></name> <operator>=</operator> <name>DLT_EN10MB</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pPpiHeader</name><operator>-&gt;</operator><name>PacketHeader</name><operator>.</operator><name>PphLength</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PPI_HEADER</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pPpiHeader</name><operator>-&gt;</operator><name>PacketHeader</name><operator>.</operator><name>PphFlags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pPpiHeader</name><operator>-&gt;</operator><name>PacketHeader</name><operator>.</operator><name>PphVersion</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pPpiHeader</name><operator>-&gt;</operator><name>AggregationFieldHeader</name><operator>.</operator><name>PfhLength</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PPI_FIELD_AGGREGATION_EXTENSION</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pPpiHeader</name><operator>-&gt;</operator><name>AggregationFieldHeader</name><operator>.</operator><name>PfhType</name></name> <operator>=</operator> <name>PPI_FIELD_TYPE_AGGREGATION_EXTENSION</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pPpiHeader</name><operator>-&gt;</operator><name>Dot3FieldHeader</name><operator>.</operator><name>PfhLength</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PPI_FIELD_802_3_EXTENSION</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pPpiHeader</name><operator>-&gt;</operator><name>Dot3FieldHeader</name><operator>.</operator><name>PfhType</name></name> <operator>=</operator> <name>PPI_FIELD_TYPE_802_3_EXTENSION</name></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>g_TcFunctions</name><operator>.</operator><name>InstanceOpenByName</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>device</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pt</name><operator>-&gt;</operator><name>TcInstance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>TC_SUCCESS</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"Error opening TurboCap adapter: %s"</literal></expr></argument>, <argument><expr><call><name><name>g_TcFunctions</name><operator>.</operator><name>StatusGetString</name></name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_EN10MB</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>dlt_list</name></name> <operator>=</operator> <operator>(</operator><name>u_int</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u_int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>dlt_list</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>dlt_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>DLT_EN10MB</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>dlt_list</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>DLT_PPI</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>dlt_count</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>














<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>g_TcFunctions</name><operator>.</operator><name>InstanceSetFeature</name></name><argument_list>(<argument><expr><name><name>pt</name><operator>-&gt;</operator><name>TcInstance</name></name></expr></argument>, <argument><expr><name>TC_INST_FT_RX_STATUS</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>TC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,<argument><expr><literal type="string">"Error enabling reception on a TurboCap instance: %s"</literal></expr></argument>, <argument><expr><call><name><name>g_TcFunctions</name><operator>.</operator><name>StatusGetString</name></name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>bad</name>;</goto>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>g_TcFunctions</name><operator>.</operator><name>InstanceSetFeature</name></name><argument_list>(<argument><expr><name><name>pt</name><operator>-&gt;</operator><name>TcInstance</name></name></expr></argument>, <argument><expr><name>TC_INST_FT_TX_STATUS</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>inject_op</name></name> <operator>=</operator> <name>TcInject</name></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>timeout</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>timeout</name> <operator>=</operator> <literal type="number">0xFFFFFFFF</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else
if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>timeout</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><name>timeout</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>timeout</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>timeout</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>g_TcFunctions</name><operator>.</operator><name>InstanceSetFeature</name></name><argument_list>(<argument><expr><name><name>pt</name><operator>-&gt;</operator><name>TcInstance</name></name></expr></argument>, <argument><expr><name>TC_INST_FT_READ_TIMEOUT</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>TC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,<argument><expr><literal type="string">"Error setting the read timeout a TurboCap instance: %s"</literal></expr></argument>, <argument><expr><call><name><name>g_TcFunctions</name><operator>.</operator><name>StatusGetString</name></name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>bad</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>read_op</name></name> <operator>=</operator> <name>TcRead</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>setfilter_op</name></name> <operator>=</operator> <name>TcSetFilter</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>setdirection_op</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>set_datalink_op</name></name> <operator>=</operator> <name>TcSetDatalink</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>getnonblock_op</name></name> <operator>=</operator> <name>TcGetNonBlock</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>setnonblock_op</name></name> <operator>=</operator> <name>TcSetNonBlock</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>stats_op</name></name> <operator>=</operator> <name>TcStats</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>stats_ex_op</name></name> <operator>=</operator> <name>TcStatsEx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>setbuff_op</name></name> <operator>=</operator> <name>TcSetBuff</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>setmode_op</name></name> <operator>=</operator> <name>TcSetMode</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>setmintocopy_op</name></name> <operator>=</operator> <name>TcSetMinToCopy</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>getevent_op</name></name> <operator>=</operator> <name>TcGetReceiveWaitHandle</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>oid_get_request_op</name></name> <operator>=</operator> <name>TcOidGetRequest</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>oid_set_request_op</name></name> <operator>=</operator> <name>TcOidSetRequest</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>sendqueue_transmit_op</name></name> <operator>=</operator> <name>TcSendqueueTransmit</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>setuserbuffer_op</name></name> <operator>=</operator> <name>TcSetUserBuffer</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>live_dump_op</name></name> <operator>=</operator> <name>TcLiveDump</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>live_dump_ended_op</name></name> <operator>=</operator> <name>TcLiveDumpEnded</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>get_airpcap_handle_op</name></name> <operator>=</operator> <name>TcGetAirPcapHandle</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>selectable_fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>cleanup_op</name></name> <operator>=</operator> <name>TcCleanup</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>bad</name>:</label>
<expr_stmt><expr><call><name>TcCleanup</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>pcap_t</name> <modifier>*</modifier></type>
<name>TcCreate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ebuf</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>is_ours</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ULONG</name></type> <name>numPorts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PTC_PORT</name></type> <name>pPorts</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TC_STATUS</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_tc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>LoadTcFunctions</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>TC_API_LOADED</name></expr>)</condition>
<block>{<block_content>




<expr_stmt><expr><operator>*</operator><name>is_ours</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>g_TcFunctions</name><operator>.</operator><name>QueryPortList</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>pPorts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numPorts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>TC_SUCCESS</name></expr>)</condition>
<block>{<block_content>




<expr_stmt><expr><operator>*</operator><name>is_ours</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>is_tc</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numPorts</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name><name>g_TcFunctions</name><operator>.</operator><name>PortGetName</name></name><argument_list>(<argument><expr><name><name>pPorts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>device</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>is_tc</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>numPorts</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name><name>g_TcFunctions</name><operator>.</operator><name>FreePortList</name></name><argument_list>(<argument><expr><name>pPorts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_tc</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>is_ours</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><operator>*</operator><name>is_ours</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>pcap_create_common</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>pcap_tc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>activate_op</name></name> <operator>=</operator> <name>TcActivate</name></expr>;</expr_stmt>







<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>getnonblock_op</name></name> <operator>=</operator> <name>TcGetNonBlock</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>setnonblock_op</name></name> <operator>=</operator> <name>TcSetNonBlock</name></expr>;</expr_stmt>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>TcSetDatalink</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dlt</name></decl></parameter>)</parameter_list>
<block>{<block_content>











<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>TcGetNonBlock</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"Non-blocking mode isn't supported for TurboCap ports"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>TcSetNonBlock</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nonblock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"Non-blocking mode isn't supported for TurboCap ports"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>TcCleanup</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_tc</name></name> <modifier>*</modifier></type><name>pt</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pt</name><operator>-&gt;</operator><name>TcPacketsBuffer</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name><name>g_TcFunctions</name><operator>.</operator><name>PacketsBufferDestroy</name></name><argument_list>(<argument><expr><name><name>pt</name><operator>-&gt;</operator><name>TcPacketsBuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>TcPacketsBuffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pt</name><operator>-&gt;</operator><name>TcInstance</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><call><name><name>g_TcFunctions</name><operator>.</operator><name>InstanceClose</name></name><argument_list>(<argument><expr><name><name>pt</name><operator>-&gt;</operator><name>TcInstance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>TcInstance</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pt</name><operator>-&gt;</operator><name>PpiPacket</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>pt</name><operator>-&gt;</operator><name>PpiPacket</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>PpiPacket</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>pcap_cleanup_live_common</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>TcInject</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_tc</name></name> <modifier>*</modifier></type><name>pt</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TC_STATUS</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TC_PACKETS_BUFFER</name></type> <name>buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TC_PACKET_HEADER</name></type> <name>header</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;=</operator> <literal type="number">0xFFFF</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"send error: the TurboCap API does not support packets larger than 64k"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>g_TcFunctions</name><operator>.</operator><name>PacketsBufferCreate</name></name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TC_PACKET_HEADER</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <call><name>TC_ALIGN_USHORT_TO_64BIT</name><argument_list>(<argument><expr><operator>(</operator><name>USHORT</name><operator>)</operator><name>size</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>TC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"send error: TcPacketsBufferCreate failure: %s (%08x)"</literal></expr></argument>, <argument><expr><call><name><name>g_TcFunctions</name><operator>.</operator><name>StatusGetString</name></name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>header</name><operator>.</operator><name>Length</name></name> <operator>=</operator> <operator>(</operator><name>USHORT</name><operator>)</operator><name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>header</name><operator>.</operator><name>CapturedLength</name></name> <operator>=</operator> <name><name>header</name><operator>.</operator><name>Length</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>g_TcFunctions</name><operator>.</operator><name>PacketsBufferCommitNextPacket</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><operator>(</operator><name>PVOID</name><operator>)</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>TC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>g_TcFunctions</name><operator>.</operator><name>InstanceTransmitPackets</name></name><argument_list>(<argument><expr><name><name>pt</name><operator>-&gt;</operator><name>TcInstance</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>TC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"send error: TcInstanceTransmitPackets failure: %s (%08x)"</literal></expr></argument>, <argument><expr><call><name><name>g_TcFunctions</name><operator>.</operator><name>StatusGetString</name></name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"send error: TcPacketsBufferCommitNextPacket failure: %s (%08x)"</literal></expr></argument>, <argument><expr><call><name><name>g_TcFunctions</name><operator>.</operator><name>StatusGetString</name></name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name><name>g_TcFunctions</name><operator>.</operator><name>PacketsBufferDestroy</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>TC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>TcRead</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cnt</name></decl></parameter>, <parameter><decl><type><name>pcap_handler</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>u_char</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_tc</name></name> <modifier>*</modifier></type><name>pt</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TC_STATUS</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>break_loop</name></name></expr>)</condition>
<block>{<block_content>





<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>break_loop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pt</name><operator>-&gt;</operator><name>TcPacketsBuffer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>g_TcFunctions</name><operator>.</operator><name>InstanceReceivePackets</name></name><argument_list>(<argument><expr><name><name>pt</name><operator>-&gt;</operator><name>TcInstance</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pt</name><operator>-&gt;</operator><name>TcPacketsBuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>TC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"read error, TcInstanceReceivePackets failure: %s (%08x)"</literal></expr></argument>, <argument><expr><call><name><name>g_TcFunctions</name><operator>.</operator><name>StatusGetString</name></name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>TRUE</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_pkthdr</name></name></type> <name>hdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TC_PACKET_HEADER</name></type> <name>tcHeader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PVOID</name></type> <name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONG</name></type> <name>filterResult</name></decl>;</decl_stmt>










<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>break_loop</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>break_loop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pt</name><operator>-&gt;</operator><name>TcPacketsBuffer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>g_TcFunctions</name><operator>.</operator><name>PacketsBufferQueryNextPacket</name></name><argument_list>(<argument><expr><name><name>pt</name><operator>-&gt;</operator><name>TcPacketsBuffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tcHeader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>TC_ERROR_END_OF_BUFFER</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name><name>g_TcFunctions</name><operator>.</operator><name>PacketsBufferDestroy</name></name><argument_list>(<argument><expr><name><name>pt</name><operator>-&gt;</operator><name>TcPacketsBuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>TcPacketsBuffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>TC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"read error, TcPacketsBufferQueryNextPacket failure: %s (%08x)"</literal></expr></argument>, <argument><expr><call><name><name>g_TcFunctions</name><operator>.</operator><name>StatusGetString</name></name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>fcode</name><operator>.</operator><name>bf_insns</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>filterResult</name> <operator>=</operator> <call><name>bpf_filter</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fcode</name><operator>.</operator><name>bf_insns</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>tcHeader</name><operator>.</operator><name>Length</name></name></expr></argument>, <argument><expr><name><name>tcHeader</name><operator>.</operator><name>CapturedLength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>filterResult</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>filterResult</name> <operator>&gt;</operator> <name><name>tcHeader</name><operator>.</operator><name>CapturedLength</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>filterResult</name> <operator>=</operator> <name><name>tcHeader</name><operator>.</operator><name>CapturedLength</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name>filterResult</name> <operator>=</operator> <name><name>tcHeader</name><operator>.</operator><name>CapturedLength</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>pt</name><operator>-&gt;</operator><name>TcAcceptedCount</name></name> <operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hdr</name><operator>.</operator><name>ts</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <operator>(</operator><name>bpf_u_int32</name><operator>)</operator><operator>(</operator><name><name>tcHeader</name><operator>.</operator><name>Timestamp</name></name> <operator>/</operator> <operator>(</operator><name>ULONGLONG</name><operator>)</operator><operator>(</operator><literal type="number">1000</literal> <operator>*</operator> <literal type="number">1000</literal> <operator>*</operator> <literal type="number">1000</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>.</operator><name>ts</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <operator>(</operator><name>bpf_u_int32</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>tcHeader</name><operator>.</operator><name>Timestamp</name></name> <operator>%</operator> <operator>(</operator><name>ULONGLONG</name><operator>)</operator><operator>(</operator><literal type="number">1000</literal> <operator>*</operator> <literal type="number">1000</literal> <operator>*</operator> <literal type="number">1000</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <literal type="number">1000</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>linktype</name></name> <operator>==</operator> <name>DLT_EN10MB</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>hdr</name><operator>.</operator><name>caplen</name></name> <operator>=</operator> <name>filterResult</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name><name>tcHeader</name><operator>.</operator><name>Length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name>callback</name>)<argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hdr</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name>PPPI_HEADER</name></type> <name>pPpiHeader</name> <init>= <expr><operator>(</operator><name>PPPI_HEADER</name><operator>)</operator><name><name>pt</name><operator>-&gt;</operator><name>PpiPacket</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PVOID</name></type> <name>data2</name> <init>= <expr><name>pPpiHeader</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pPpiHeader</name><operator>-&gt;</operator><name>AggregationField</name><operator>.</operator><name>InterfaceId</name></name> <operator>=</operator> <call><name>TC_PH_FLAGS_RX_PORT_ID</name><argument_list>(<argument><expr><name><name>tcHeader</name><operator>.</operator><name>Flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pPpiHeader</name><operator>-&gt;</operator><name>Dot3Field</name><operator>.</operator><name>Errors</name></name> <operator>=</operator> <name><name>tcHeader</name><operator>.</operator><name>Errors</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>tcHeader</name><operator>.</operator><name>Flags</name></name> <operator>&amp;</operator> <name>TC_PH_FLAGS_CHECKSUM</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>pPpiHeader</name><operator>-&gt;</operator><name>Dot3Field</name><operator>.</operator><name>Flags</name></name> <operator>=</operator> <name>PPI_FLD_802_3_EXT_FLAG_FCS_PRESENT</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>pPpiHeader</name><operator>-&gt;</operator><name>Dot3Field</name><operator>.</operator><name>Flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>filterResult</name> <operator>&lt;=</operator> <name>MAX_TC_PACKET_SIZE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data2</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>filterResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>.</operator><name>caplen</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PPI_HEADER</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>filterResult</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>.</operator><name>len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PPI_HEADER</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>tcHeader</name><operator>.</operator><name>Length</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data2</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>MAX_TC_PACKET_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>.</operator><name>caplen</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PPI_HEADER</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>MAX_TC_PACKET_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdr</name><operator>.</operator><name>len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PPI_HEADER</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>tcHeader</name><operator>.</operator><name>Length</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call>(<modifier>*</modifier><name>callback</name>)<argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hdr</name></expr></argument>, <argument><expr><name><name>pt</name><operator>-&gt;</operator><name>PpiPacket</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name>n</name> <operator>&gt;=</operator> <name>cnt</name> <operator>&amp;&amp;</operator> <name>cnt</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>TcStats</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>pcap_stat</name></name> <modifier>*</modifier></type><name>ps</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_tc</name></name> <modifier>*</modifier></type><name>pt</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TC_STATISTICS</name></type> <name>statistics</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TC_STATUS</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONGLONG</name></type> <name>counter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_stat</name></name></type> <name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>g_TcFunctions</name><operator>.</operator><name>InstanceQueryStatistics</name></name><argument_list>(<argument><expr><name><name>pt</name><operator>-&gt;</operator><name>TcInstance</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>statistics</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>TC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"TurboCap error in TcInstanceQueryStatistics: %s (%08x)"</literal></expr></argument>, <argument><expr><call><name><name>g_TcFunctions</name><operator>.</operator><name>StatusGetString</name></name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>g_TcFunctions</name><operator>.</operator><name>StatisticsQueryValue</name></name><argument_list>(<argument><expr><name>statistics</name></expr></argument>, <argument><expr><name>TC_COUNTER_INSTANCE_TOTAL_RX_PACKETS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>counter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>TC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"TurboCap error in TcStatisticsQueryValue: %s (%08x)"</literal></expr></argument>, <argument><expr><call><name><name>g_TcFunctions</name><operator>.</operator><name>StatusGetString</name></name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>counter</name> <operator>&lt;=</operator> <operator>(</operator><name>ULONGLONG</name><operator>)</operator><literal type="number">0xFFFFFFFF</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>ps_recv</name></name> <operator>=</operator> <operator>(</operator><name>ULONG</name><operator>)</operator><name>counter</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>ps_recv</name></name> <operator>=</operator> <literal type="number">0xFFFFFFFF</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>g_TcFunctions</name><operator>.</operator><name>StatisticsQueryValue</name></name><argument_list>(<argument><expr><name>statistics</name></expr></argument>, <argument><expr><name>TC_COUNTER_INSTANCE_RX_DROPPED_PACKETS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>counter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>TC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"TurboCap error in TcStatisticsQueryValue: %s (%08x)"</literal></expr></argument>, <argument><expr><call><name><name>g_TcFunctions</name><operator>.</operator><name>StatusGetString</name></name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>counter</name> <operator>&lt;=</operator> <operator>(</operator><name>ULONGLONG</name><operator>)</operator><literal type="number">0xFFFFFFFF</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>ps_ifdrop</name></name> <operator>=</operator> <operator>(</operator><name>ULONG</name><operator>)</operator><name>counter</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>ps_drop</name></name> <operator>=</operator> <operator>(</operator><name>ULONG</name><operator>)</operator><name>counter</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>ps_ifdrop</name></name> <operator>=</operator> <literal type="number">0xFFFFFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>ps_drop</name></name> <operator>=</operator> <literal type="number">0xFFFFFFFF</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_REMOTE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>s</name><operator>.</operator><name>ps_capt</name></name> <operator>=</operator> <name><name>pt</name><operator>-&gt;</operator><name>TcAcceptedCount</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><operator>*</operator><name>ps</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>TcSetFilter</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>bpf_program</name></name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>fp</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><literal type="string">"setfilter: No filter specified"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>install_bpf_program</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name><name>struct</name> <name>pcap_stat</name></name> <modifier>*</modifier></type>
<name>TcStatsEx</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pcap_stat_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_tc</name></name> <modifier>*</modifier></type><name>pt</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TC_STATISTICS</name></type> <name>statistics</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TC_STATUS</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULONGLONG</name></type> <name>counter</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pcap_stat_size</name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>stat</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>g_TcFunctions</name><operator>.</operator><name>InstanceQueryStatistics</name></name><argument_list>(<argument><expr><name><name>pt</name><operator>-&gt;</operator><name>TcInstance</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>statistics</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>TC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"TurboCap error in TcInstanceQueryStatistics: %s (%08x)"</literal></expr></argument>, <argument><expr><call><name><name>g_TcFunctions</name><operator>.</operator><name>StatusGetString</name></name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>stat</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>stat</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>g_TcFunctions</name><operator>.</operator><name>StatisticsQueryValue</name></name><argument_list>(<argument><expr><name>statistics</name></expr></argument>, <argument><expr><name>TC_COUNTER_INSTANCE_TOTAL_RX_PACKETS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>counter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>TC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"TurboCap error in TcStatisticsQueryValue: %s (%08x)"</literal></expr></argument>, <argument><expr><call><name><name>g_TcFunctions</name><operator>.</operator><name>StatusGetString</name></name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>counter</name> <operator>&lt;=</operator> <operator>(</operator><name>ULONGLONG</name><operator>)</operator><literal type="number">0xFFFFFFFF</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>ps_recv</name></name> <operator>=</operator> <operator>(</operator><name>ULONG</name><operator>)</operator><name>counter</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>ps_recv</name></name> <operator>=</operator> <literal type="number">0xFFFFFFFF</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>g_TcFunctions</name><operator>.</operator><name>StatisticsQueryValue</name></name><argument_list>(<argument><expr><name>statistics</name></expr></argument>, <argument><expr><name>TC_COUNTER_INSTANCE_RX_DROPPED_PACKETS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>counter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>TC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"TurboCap error in TcStatisticsQueryValue: %s (%08x)"</literal></expr></argument>, <argument><expr><call><name><name>g_TcFunctions</name><operator>.</operator><name>StatusGetString</name></name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>counter</name> <operator>&lt;=</operator> <operator>(</operator><name>ULONGLONG</name><operator>)</operator><literal type="number">0xFFFFFFFF</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>ps_ifdrop</name></name> <operator>=</operator> <operator>(</operator><name>ULONG</name><operator>)</operator><name>counter</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>ps_drop</name></name> <operator>=</operator> <operator>(</operator><name>ULONG</name><operator>)</operator><name>counter</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>ps_ifdrop</name></name> <operator>=</operator> <literal type="number">0xFFFFFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>ps_drop</name></name> <operator>=</operator> <literal type="number">0xFFFFFFFF</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_REMOTE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>ps_capt</name></name> <operator>=</operator> <name><name>pt</name><operator>-&gt;</operator><name>TcAcceptedCount</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>stat</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>TcSetBuff</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dim</name></decl></parameter>)</parameter_list>
<block>{<block_content>





<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>TcSetMode</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>!=</operator> <name>MODE_CAPT</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"Mode %u not supported by TurboCap devices. TurboCap only supports capture."</literal></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>TcSetMinToCopy</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_tc</name></name> <modifier>*</modifier></type><name>pt</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TC_STATUS</name></type> <name>status</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"Mintocopy cannot be less than 0."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name><name>g_TcFunctions</name><operator>.</operator><name>InstanceSetFeature</name></name><argument_list>(<argument><expr><name><name>pt</name><operator>-&gt;</operator><name>TcInstance</name></name></expr></argument>, <argument><expr><name>TC_INST_FT_MINTOCOPY</name></expr></argument>, <argument><expr><operator>(</operator><name>ULONG</name><operator>)</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>TC_SUCCESS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"TurboCap error setting the mintocopy: %s (%08x)"</literal></expr></argument>, <argument><expr><call><name><name>g_TcFunctions</name><operator>.</operator><name>StatusGetString</name></name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>HANDLE</name></type>
<name>TcGetReceiveWaitHandle</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_tc</name></name> <modifier>*</modifier></type><name>pt</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name><name>g_TcFunctions</name><operator>.</operator><name>InstanceGetReceiveWaitHandle</name></name><argument_list>(<argument><expr><name><name>pt</name><operator>-&gt;</operator><name>TcInstance</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>TcOidGetRequest</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>bpf_u_int32</name> <name>oid</name></type> <name>_U_</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><name>data</name></type> <name>_U_</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier><name>lenp</name></type> <name>_U_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"An OID get request cannot be performed on a TurboCap device"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>TcOidSetRequest</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>bpf_u_int32</name> <name>oid</name></type> <name>_U_</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><name>data</name></type> <name>_U_</name></decl></parameter>,
<parameter><decl><type><name>size_t</name> <modifier>*</modifier><name>lenp</name></type> <name>_U_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"An OID set request cannot be performed on a TurboCap device"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>u_int</name></type>
<name>TcSendqueueTransmit</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>pcap_send_queue</name> <modifier>*</modifier><name>queue</name></type> <name>_U_</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>sync</name></type> <name>_U_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"Packets cannot be bulk transmitted on a TurboCap device"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>TcSetUserBuffer</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>size</name></type> <name>_U_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"The user buffer cannot be set on a TurboCap device"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>TcLiveDump</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><name>filename</name></type> <name>_U_</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>maxsize</name></type> <name>_U_</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>maxpacks</name></type> <name>_U_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"Live packet dumping cannot be performed on a TurboCap device"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>TcLiveDumpEnded</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>sync</name></type> <name>_U_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"Live packet dumping cannot be performed on a TurboCap device"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PAirpcapHandle</name></type>
<name>TcGetAirPcapHandle</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier><name>p</name></type> <name>_U_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
