<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libpcap/pcap-dbus.c">





























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dbus/dbus.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pcap-int.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pcap-dbus.h"</cpp:file></cpp:include>




<struct>struct <name>pcap_dbus</name> <block>{
<decl_stmt><decl><type><name>DBusConnection</name> <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>packets_read</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dbus_read</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>max_packets</name></type> <name>_U_</name></decl></parameter>, <parameter><decl><type><name>pcap_handler</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>u_char</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_dbus</name></name> <modifier>*</modifier></type><name>handlep</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pcap_pkthdr</name></name></type> <name>pkth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBusMessage</name> <modifier>*</modifier></type><name>message</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>raw_msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>raw_msg_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>message</name> <operator>=</operator> <call><name>dbus_connection_pop_message</name><argument_list>(<argument><expr><name><name>handlep</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>!</operator><name>message</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dbus_connection_read_write</name><argument_list>(<argument><expr><name><name>handlep</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"Connection closed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>break_loop</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>break_loop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>message</name> <operator>=</operator> <call><name>dbus_connection_pop_message</name><argument_list>(<argument><expr><name><name>handlep</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><call><name>dbus_message_is_signal</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>DBUS_INTERFACE_LOCAL</name></expr></argument>, <argument><expr><literal type="string">"Disconnected"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"Disconnected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dbus_message_marshal</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>raw_msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>raw_msg_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pkth</name><operator>.</operator><name>caplen</name></name> <operator>=</operator> <name><name>pkth</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>raw_msg_len</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pkth</name><operator>.</operator><name>ts</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>fcode</name><operator>.</operator><name>bf_insns</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<call><name>bpf_filter</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fcode</name><operator>.</operator><name>bf_insns</name></name></expr></argument>, <argument><expr><operator>(</operator><name>u_char</name> <operator>*</operator><operator>)</operator><name>raw_msg</name></expr></argument>, <argument><expr><name><name>pkth</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><name><name>pkth</name><operator>.</operator><name>caplen</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>packets_read</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>callback</name><argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkth</name></expr></argument>, <argument><expr><operator>(</operator><name>u_char</name> <operator>*</operator><operator>)</operator><name>raw_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dbus_free</name><argument_list>(<argument><expr><name>raw_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dbus_write</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>pcap_dbus</name></name> <modifier>*</modifier></type><name>handlep</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DBusError</name></type> <name>error</name> <init>= <expr><name>DBUS_ERROR_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DBusMessage</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>msg</name> <operator>=</operator> <call><name>dbus_message_demarshal</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"dbus_message_demarshal() failed: %s"</literal></expr></argument>, <argument><expr><name><name>error</name><operator>.</operator><name>message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dbus_error_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dbus_connection_send</name><argument_list>(<argument><expr><name><name>handlep</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dbus_connection_flush</name><argument_list>(<argument><expr><name><name>handlep</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dbus_message_unref</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dbus_stats</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>pcap_stat</name></name> <modifier>*</modifier></type><name>stats</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_dbus</name></name> <modifier>*</modifier></type><name>handlep</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>ps_recv</name></name> <operator>=</operator> <name><name>handlep</name><operator>-&gt;</operator><name>packets_read</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>ps_drop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>ps_ifdrop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dbus_cleanup</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_dbus</name></name> <modifier>*</modifier></type><name>handlep</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dbus_connection_unref</name><argument_list>(<argument><expr><name><name>handlep</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pcap_cleanup_live_common</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type>
<name>dbus_getnonblock</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"Non-blocking mode isn't supported for capturing on D-Bus"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dbus_setnonblock</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>nonblock</name></type> <name>_U_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"Non-blocking mode isn't supported for capturing on D-Bus"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dbus_activate</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EAVESDROPPING_RULE</name></cpp:macro> <cpp:value>"eavesdrop=true,"</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>rules</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>EAVESDROPPING_RULE</name> <literal type="string">"type='signal'"</literal></expr>,
<expr><name>EAVESDROPPING_RULE</name> <literal type="string">"type='method_call'"</literal></expr>,
<expr><name>EAVESDROPPING_RULE</name> <literal type="string">"type='method_return'"</literal></expr>,
<expr><name>EAVESDROPPING_RULE</name> <literal type="string">"type='error'"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_RULES</name></cpp:macro> <cpp:value>sizeof(rules)/sizeof(rules[0])</cpp:value></cpp:define>

<decl_stmt><decl><type><name><name>struct</name> <name>pcap_dbus</name></name> <modifier>*</modifier></type><name>handlep</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dev</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>device</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DBusError</name></type> <name>error</name> <init>= <expr><name>DBUS_ERROR_INIT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><literal type="string">"dbus-system"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>handlep</name><operator>-&gt;</operator><name>conn</name></name> <operator>=</operator> <call><name>dbus_bus_get</name><argument_list>(<argument><expr><name>DBUS_BUS_SYSTEM</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"Failed to get system bus: %s"</literal></expr></argument>, <argument><expr><name><name>error</name><operator>.</operator><name>message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dbus_error_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><literal type="string">"dbus-session"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>handlep</name><operator>-&gt;</operator><name>conn</name></name> <operator>=</operator> <call><name>dbus_bus_get</name><argument_list>(<argument><expr><name>DBUS_BUS_SESSION</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"Failed to get session bus: %s"</literal></expr></argument>, <argument><expr><name><name>error</name><operator>.</operator><name>message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dbus_error_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><literal type="string">"dbus://"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><name>dev</name> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>handlep</name><operator>-&gt;</operator><name>conn</name></name> <operator>=</operator> <call><name>dbus_connection_open</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"Failed to open connection to: %s: %s"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>error</name><operator>.</operator><name>message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dbus_error_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dbus_bus_register</name><argument_list>(<argument><expr><name><name>handlep</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"Failed to register bus %s: %s\n"</literal></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>error</name><operator>.</operator><name>message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dbus_error_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"Can't get bus address from %s"</literal></expr></argument>, <argument><expr><name><name>handle</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>bufsize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_DBUS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>read_op</name></name> <operator>=</operator> <name>dbus_read</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>inject_op</name></name> <operator>=</operator> <name>dbus_write</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>setfilter_op</name></name> <operator>=</operator> <name>install_bpf_program</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>setdirection_op</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>set_datalink_op</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>getnonblock_op</name></name> <operator>=</operator> <name>dbus_getnonblock</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>setnonblock_op</name></name> <operator>=</operator> <name>dbus_setnonblock</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>stats_op</name></name> <operator>=</operator> <name>dbus_stats</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>cleanup_op</name></name> <operator>=</operator> <name>dbus_cleanup</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>






















<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>selectable_fd</name></name> <operator>=</operator> <name><name>handle</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>rfmon</name></name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>dbus_cleanup</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR_RFMON_NOTSUP</name></expr>;</return>
</block_content>}</block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>snapshot</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>handle</name><operator>-&gt;</operator><name>snapshot</name></name> <operator>&gt;</operator> <literal type="number">134217728</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>snapshot</name></name> <operator>=</operator> <literal type="number">134217728</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>buffer_size</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>dbus_connection_set_max_received_size</name><argument_list>(<argument><expr><name><name>handlep</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name><name>handle</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N_RULES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>dbus_bus_add_match</name><argument_list>(<argument><expr><name><name>handlep</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name><name>rules</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dbus_error_is_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dbus_error_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>dbus_bus_add_match</name><argument_list>(<argument><expr><name><name>handlep</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name><name>rules</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>EAVESDROPPING_RULE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>dbus_error_is_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"Failed to add bus match: %s\n"</literal></expr></argument>, <argument><expr><name><name>error</name><operator>.</operator><name>message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dbus_error_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dbus_cleanup</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>pcap_t</name> <modifier>*</modifier></type>
<name>dbus_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ebuf</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>is_ours</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><literal type="string">"dbus-system"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><literal type="string">"dbus-session"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>strncmp</name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><literal type="string">"dbus://"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>is_ours</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>is_ours</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>pcap_create_common</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>pcap_dbus</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>activate_op</name></name> <operator>=</operator> <name>dbus_activate</name></expr>;</expr_stmt>







<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>getnonblock_op</name></name> <operator>=</operator> <name>dbus_getnonblock</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>setnonblock_op</name></name> <operator>=</operator> <name>dbus_setnonblock</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>p</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>dbus_findalldevs</name><parameter_list>(<parameter><decl><type><name>pcap_if_list_t</name> <modifier>*</modifier></type><name>devlistp</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err_str</name></decl></parameter>)</parameter_list>
<block>{<block_content>




<if_stmt><if>if <condition>(<expr><call><name>add_dev</name><argument_list>(<argument><expr><name>devlistp</name></expr></argument>, <argument><expr><literal type="string">"dbus-system"</literal></expr></argument>,
<argument><expr><name>PCAP_IF_CONNECTION_STATUS_NOT_APPLICABLE</name></expr></argument>, <argument><expr><literal type="string">"D-Bus system bus"</literal></expr></argument>,
<argument><expr><name>err_str</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>add_dev</name><argument_list>(<argument><expr><name>devlistp</name></expr></argument>, <argument><expr><literal type="string">"dbus-session"</literal></expr></argument>,
<argument><expr><name>PCAP_IF_CONNECTION_STATUS_NOT_APPLICABLE</name></expr></argument>, <argument><expr><literal type="string">"D-Bus session bus"</literal></expr></argument>,
<argument><expr><name>err_str</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

</unit>
