<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libpcap/pcap-dos.h">




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__PCAP_DOS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__PCAP_DOS_H</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__DJGPP__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pc.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;conio.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name>int</name></type> <name>BOOL</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>BYTE</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>short</name></type> <name>WORD</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name></type> <name>DWORD</name>;</typedef>
<typedef>typedef <type><name>BYTE</name></type> <name><name>ETHER</name><index>[<expr><literal type="number">6</literal></expr>]</index></name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ETH_ALEN</name></cpp:macro> <cpp:value>sizeof(ETHER)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ETH_HLEN</name></cpp:macro> <cpp:value>(2*ETH_ALEN+2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ETH_MTU</name></cpp:macro> <cpp:value>1500</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ETH_MIN</name></cpp:macro> <cpp:value>60</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ETH_MAX</name></cpp:macro> <cpp:value>(ETH_MTU+ETH_HLEN)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRUE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FALSE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PHARLAP</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DJGPP</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOS4GW</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__DJGPP__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DOSX</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOSX</name></cpp:macro> <cpp:value>DJGPP</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__WATCOMC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DOSX</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOSX</name></cpp:macro> <cpp:value>DOS4GW</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__HIGHC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pharlap.h&gt;</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DOSX</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOSX</name></cpp:macro> <cpp:value>PHARLAP</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inline</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>UINT</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__HIGHC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>uint64</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>QWORD</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__WATCOMC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>unsigned</name> <name>__int64</name></type> <name>uint64</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>__int64</name></type> <name>QWORD</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARGSUSED</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void) x</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>__SMALL__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__LARGE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOSX</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DOSX</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:error>#<cpp:directive>error</cpp:directive> DOSX not defined; 1 = PharLap, 2 = djgpp, 4 = DOS4GW</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__HIGHC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>min</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_min(a,b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>max</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_max(a,b)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>min</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>min</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &lt; (b) ? (a) : (b))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>max</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>max</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &lt; (b) ? (b) : (a))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_U_</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_U_</name></cpp:macro> <cpp:value>__attribute__((unused))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_U_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_U_</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_32BIT_DRIVERS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"msdos/pm_drvr/lock.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RECEIVE_QUEUE_SIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RECEIVE_QUEUE_SIZE</name></cpp:macro> <cpp:value>60</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>RECEIVE_BUF_SIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RECEIVE_BUF_SIZE</name></cpp:macro> <cpp:value>(ETH_MAX+20)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>device</name></name> <name>el2_dev</name></type> <name>LOCKED_VAR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>device</name></name> <name>el3_dev</name></type> <name>LOCKED_VAR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>device</name></name> <name>tc59_dev</name></type> <name>LOCKED_VAR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>device</name></name> <name>tc515_dev</name></type> <name>LOCKED_VAR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>device</name></name> <name>tc90x_dev</name></type> <name>LOCKED_VAR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>device</name></name> <name>tc90bcx_dev</name></type> <name>LOCKED_VAR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>device</name></name> <name>wd_dev</name></type> <name>LOCKED_VAR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>device</name></name> <name>ne_dev</name></type> <name>LOCKED_VAR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>device</name></name> <name>acct_dev</name></type> <name>LOCKED_VAR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>device</name></name> <name>cs89_dev</name></type> <name>LOCKED_VAR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>device</name></name> <name>rtl8139_dev</name></type> <name>LOCKED_VAR</name></decl>;</decl_stmt>

<struct>struct <name>rx_ringbuf</name> <block>{
<decl_stmt><decl><type><specifier>volatile</specifier> <name>int</name></type> <name>in_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>out_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>elem_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_elem</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf_start</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>rx_elem</name> <block>{
<decl_stmt><decl><type><name>DWORD</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BYTE</name></type> <name><name>data</name><index>[<expr><name>ETH_MAX</name><operator>+</operator><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>extern</specifier> <name>BYTE</name> <modifier>*</modifier></type><name>get_rxbuf</name> <argument_list>(<argument><expr><name>int</name> <name>len</name></expr></argument>)</argument_list> <name>LOCKED_FUNC</name></decl>;</decl_stmt>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>peek_rxbuf</name> <parameter_list>(<parameter><decl><type><name>BYTE</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>release_rxbuf</name> <parameter_list>(<parameter><decl><type><name>BYTE</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCKED_VAR</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCKED_FUNC</name></cpp:macro></cpp:define>

<struct>struct <name>device</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>long_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>base_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>irq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dma</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>mem_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>mem_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>rmem_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>rmem_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>device</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>


<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>probe</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>device</name></name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>open</name>) <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>device</name></name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>close</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>device</name></name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>xmit</name>) <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>device</name></name> <modifier>*</modifier></type><name>dev</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>get_stats</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>device</name></name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>set_multicast_list</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>device</name></name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>copy_rx_buf</name>) <parameter_list>(<parameter><decl><type><name>BYTE</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>BYTE</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>get_rx_buf</name>) <parameter_list>(<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>peek_rx_buf</name>) <parameter_list>(<parameter><decl><type><name>BYTE</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>release_rx_buf</name>) <parameter_list>(<parameter><decl><type><name>BYTE</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>WORD</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl>;</decl_stmt>
}</block>;</struct>




<typedef>typedef <type><struct>struct <name>net_device_stats</name> <block>{
<decl_stmt><decl><type><name>DWORD</name></type> <name>rx_packets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>tx_packets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>rx_bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>tx_bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>rx_errors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>tx_errors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>rx_dropped</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>tx_dropped</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>multicast</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>DWORD</name></type> <name>rx_length_errors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>rx_over_errors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>rx_osize_errors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>rx_crc_errors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>rx_frame_errors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>rx_fifo_errors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>rx_missed_errors</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>DWORD</name></type> <name>tx_aborted_errors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>tx_carrier_errors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>tx_fifo_errors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>tx_heartbeat_errors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>tx_window_errors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>tx_collisions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>tx_jabbers</name></decl>;</decl_stmt>
}</block></struct></type> <name>NET_STATS</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>device</name></name> <modifier>*</modifier><name>active_dev</name></type> <name>LOCKED_VAR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>device</name></name> <modifier>*</modifier><name>dev_base</name></type> <name>LOCKED_VAR</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>device</name></name> <modifier>*</modifier></type><name>probed_dev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>pcap_pkt_debug</name></decl>;</decl_stmt>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>_w32_os_yield</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_ASSERT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void)0)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function_decl><type><name>void</name></type> <name>pcap_assert</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>what</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>line</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_ASSERT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (!(x)) pcap_assert (#x, __FILE__, __LINE__); } while (0)</cpp:value></cpp:define>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
