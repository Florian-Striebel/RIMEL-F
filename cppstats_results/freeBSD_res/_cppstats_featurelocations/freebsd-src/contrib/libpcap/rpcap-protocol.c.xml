<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libpcap/rpcap-protocol.c">
































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sockutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"portability.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rpcap-protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pcap/pcap.h&gt;</cpp:file></cpp:include>


































<function><type><name>int</name></type>
<name>rpcap_senderror</name><parameter_list>(<parameter><decl><type><name>SOCKET</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><name>uint8</name></type> <name>ver</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>errcode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>error</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>sendbuf</name><index>[<expr><name>RPCAP_NETBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sendbufidx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16</name></type> <name>length</name></decl>;</decl_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <operator>(</operator><name>uint16</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>length</name> <operator>&gt;</operator> <name>PCAP_ERRBUF_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>length</name> <operator>=</operator> <name>PCAP_ERRBUF_SIZE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rpcap_createhdr</name><argument_list>(<argument><expr><operator>(</operator>struct <name>rpcap_header</name> <operator>*</operator><operator>)</operator> <name>sendbuf</name></expr></argument>, <argument><expr><name>ver</name></expr></argument>, <argument><expr><name>RPCAP_MSG_ERROR</name></expr></argument>, <argument><expr><name>errcode</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sock_bufferize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_header</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sendbufidx</name></expr></argument>,
<argument><expr><name>RPCAP_NETBUF_SIZE</name></expr></argument>, <argument><expr><name>SOCKBUF_CHECKONLY</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sock_bufferize</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>sendbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sendbufidx</name></expr></argument>,
<argument><expr><name>RPCAP_NETBUF_SIZE</name></expr></argument>, <argument><expr><name>SOCKBUF_BUFFERIZE</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sock_send</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>sendbuf</name></expr></argument>, <argument><expr><name>sendbufidx</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



























<function><type><name>void</name></type>
<name>rpcap_createhdr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rpcap_header</name></name> <modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><name>uint8</name></type> <name>ver</name></decl></parameter>, <parameter><decl><type><name>uint8</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>uint16</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>ver</name></name> <operator>=</operator> <name>ver</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>plen</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>requests</name><index>[]</index></name> <init>=
<expr><block>{
<expr><name>NULL</name></expr>,
<expr><literal type="string">"RPCAP_MSG_ERROR"</literal></expr>,
<expr><literal type="string">"RPCAP_MSG_FINDALLIF_REQ"</literal></expr>,
<expr><literal type="string">"RPCAP_MSG_OPEN_REQ"</literal></expr>,
<expr><literal type="string">"RPCAP_MSG_STARTCAP_REQ"</literal></expr>,
<expr><literal type="string">"RPCAP_MSG_UPDATEFILTER_REQ"</literal></expr>,
<expr><literal type="string">"RPCAP_MSG_CLOSE"</literal></expr>,
<expr><literal type="string">"RPCAP_MSG_PACKET"</literal></expr>,
<expr><literal type="string">"RPCAP_MSG_AUTH_REQ"</literal></expr>,
<expr><literal type="string">"RPCAP_MSG_STATS_REQ"</literal></expr>,
<expr><literal type="string">"RPCAP_MSG_ENDCAP_REQ"</literal></expr>,
<expr><literal type="string">"RPCAP_MSG_SETSAMPLING_REQ"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_REQ_TYPES</name></cpp:macro> <cpp:value>(sizeof requests / sizeof requests[0])</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>replies</name><index>[]</index></name> <init>=
<expr><block>{
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><literal type="string">"RPCAP_MSG_FINDALLIF_REPLY"</literal></expr>,
<expr><literal type="string">"RPCAP_MSG_OPEN_REPLY"</literal></expr>,
<expr><literal type="string">"RPCAP_MSG_STARTCAP_REPLY"</literal></expr>,
<expr><literal type="string">"RPCAP_MSG_UPDATEFILTER_REPLY"</literal></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><literal type="string">"RPCAP_MSG_AUTH_REPLY"</literal></expr>,
<expr><literal type="string">"RPCAP_MSG_STATS_REPLY"</literal></expr>,
<expr><literal type="string">"RPCAP_MSG_ENDCAP_REPLY"</literal></expr>,
<expr><literal type="string">"RPCAP_MSG_SETSAMPLING_REPLY"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_REPLY_TYPES</name></cpp:macro> <cpp:value>(sizeof replies / sizeof replies[0])</cpp:value></cpp:define>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>rpcap_msg_type_string</name><parameter_list>(<parameter><decl><type><name>uint8</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;</operator> <name>RPCAP_MSG_IS_REPLY</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>type</name> <operator>&amp;=</operator> <operator>~</operator><name>RPCAP_MSG_IS_REPLY</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&gt;=</operator> <name>NUM_REPLY_TYPES</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>replies</name><index>[<expr><name>type</name></expr>]</index></name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&gt;=</operator> <name>NUM_REQ_TYPES</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name><name>requests</name><index>[<expr><name>type</name></expr>]</index></name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
