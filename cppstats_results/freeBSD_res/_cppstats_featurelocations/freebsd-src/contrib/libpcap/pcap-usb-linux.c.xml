<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libpcap/pcap-usb-linux.c">


































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pcap-int.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pcap-usb-linux.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pcap/usb.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NEED_STRERROR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strerror.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dirent.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;byteswap.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mman.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/utsname.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LINUX_USBDEVICE_FS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LINUX_COMPILER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/compiler.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/usbdevice_fs.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USB_IFACE</name></cpp:macro> <cpp:value>"usbmon"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USB_TEXT_DIR_OLD</name></cpp:macro> <cpp:value>"/sys/kernel/debug/usbmon"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USB_TEXT_DIR</name></cpp:macro> <cpp:value>"/sys/kernel/debug/usb/usbmon"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYS_USB_BUS_DIR</name></cpp:macro> <cpp:value>"/sys/bus/usb/devices"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROC_USB_BUS_DIR</name></cpp:macro> <cpp:value>"/proc/bus/usb"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USB_LINE_LEN</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__BYTE_ORDER</name> <operator>==</operator> <name>__LITTLE_ENDIAN</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>htols</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>s</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>htoll</name><parameter_list>(<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>l</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>htol64</name><parameter_list>(<parameter><type><name>ll</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ll</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>htols</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>bswap_16(s)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>htoll</name><parameter_list>(<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>bswap_32(l)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>htol64</name><parameter_list>(<parameter><type><name>ll</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>bswap_64(ll)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>mon_bin_stats</name> <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>queued</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>dropped</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>mon_bin_get</name> <block>{
<decl_stmt><decl><type><name>pcap_usb_header</name> <modifier>*</modifier></type><name>hdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>data_len</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>mon_bin_mfetch</name> <block>{
<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>offvec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>nfetch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>nflush</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MON_IOC_MAGIC</name></cpp:macro> <cpp:value>0x92</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MON_IOCQ_URB_LEN</name></cpp:macro> <cpp:value>_IO(MON_IOC_MAGIC, 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MON_IOCX_URB</name></cpp:macro> <cpp:value>_IOWR(MON_IOC_MAGIC, 2, struct mon_bin_hdr)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MON_IOCG_STATS</name></cpp:macro> <cpp:value>_IOR(MON_IOC_MAGIC, 3, struct mon_bin_stats)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MON_IOCT_RING_SIZE</name></cpp:macro> <cpp:value>_IO(MON_IOC_MAGIC, 4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MON_IOCQ_RING_SIZE</name></cpp:macro> <cpp:value>_IO(MON_IOC_MAGIC, 5)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MON_IOCX_GET</name></cpp:macro> <cpp:value>_IOW(MON_IOC_MAGIC, 6, struct mon_bin_get)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MON_IOCX_MFETCH</name></cpp:macro> <cpp:value>_IOWR(MON_IOC_MAGIC, 7, struct mon_bin_mfetch)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MON_IOCH_MFLUSH</name></cpp:macro> <cpp:value>_IO(MON_IOC_MAGIC, 8)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MON_BIN_SETUP</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MON_BIN_SETUP_ZERO</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MON_BIN_DATA_ZERO</name></cpp:macro> <cpp:value>0x4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MON_BIN_ERROR</name></cpp:macro> <cpp:value>0x8</cpp:value></cpp:define>




<struct>struct <name>pcap_usb_linux</name> <block>{
<decl_stmt><decl><type><name>u_char</name> <modifier>*</modifier></type><name>mmapbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>mmapbuflen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bus_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>packets_read</name></decl>;</decl_stmt>
}</block>;</struct>


<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>usb_activate</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>usb_stats_linux</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>pcap_stat</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>usb_stats_linux_bin</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>pcap_stat</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>usb_read_linux</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>pcap_handler</name></type></decl></parameter> , <parameter><decl><type><name>u_char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>usb_read_linux_bin</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>pcap_handler</name></type></decl></parameter> , <parameter><decl><type><name>u_char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>usb_read_linux_mmap</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>pcap_handler</name></type></decl></parameter> , <parameter><decl><type><name>u_char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>usb_inject_linux</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>usb_setdirection_linux</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>pcap_direction_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>usb_cleanup_linux_mmap</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>have_binary_usbmon</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>utsname</name></name></type> <name>utsname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>version_component</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>endp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>major</name></decl>, <decl><type ref="prev"/><name>minor</name></decl>, <decl><type ref="prev"/><name>subminor</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>uname</name><argument_list>(<argument><expr><operator>&amp;</operator><name>utsname</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name>version_component</name> <operator>=</operator> <name><name>utsname</name><operator>.</operator><name>release</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>major</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>version_component</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endp</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>endp</name> <operator>!=</operator> <name>version_component</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>endp</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>





<if_stmt><if>if <condition>(<expr><name>major</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><name>major</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name>version_component</name> <operator>=</operator> <name>endp</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>minor</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>version_component</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endp</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>endp</name> <operator>!=</operator> <name>version_component</name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>*</operator><name>endp</name> <operator>==</operator> <literal type="char">'.'</literal> <operator>||</operator> <operator>*</operator><name>endp</name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>






<if_stmt><if>if <condition>(<expr><name>minor</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>




<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name>version_component</name> <operator>=</operator> <name>endp</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>subminor</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>version_component</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endp</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>endp</name> <operator>!=</operator> <name>version_component</name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>*</operator><name>endp</name> <operator>==</operator> <literal type="char">'.'</literal> <operator>||</operator> <operator>*</operator><name>endp</name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><name>subminor</name> <operator>&gt;=</operator> <literal type="number">21</literal></expr>)</condition> <block>{<block_content>




<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>





<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>usb_dev_add</name><parameter_list>(<parameter><decl><type><name>pcap_if_list_t</name> <modifier>*</modifier></type><name>devlistp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err_str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>dev_name</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>dev_descr</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>dev_name</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>USB_IFACE</name><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>





<if_stmt><if>if <condition>(<expr><call><name>add_dev</name><argument_list>(<argument><expr><name>devlistp</name></expr></argument>, <argument><expr><name>dev_name</name></expr></argument>,
<argument><expr><name>PCAP_IF_CONNECTION_STATUS_NOT_APPLICABLE</name></expr></argument>,
<argument><expr><literal type="string">"Raw USB traffic, all USB buses"</literal></expr></argument>, <argument><expr><name>err_str</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>






<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>dev_descr</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><literal type="string">"Raw USB traffic, bus number %d"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>add_dev</name><argument_list>(<argument><expr><name>devlistp</name></expr></argument>, <argument><expr><name>dev_name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dev_descr</name></expr></argument>, <argument><expr><name>err_str</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>usb_findalldevs</name><parameter_list>(<parameter><decl><type><name>pcap_if_list_t</name> <modifier>*</modifier></type><name>devlistp</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err_str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>usb_mon_dir</name><index>[<expr><name>PATH_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>usb_mon_prefix</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>usb_mon_prefix_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dirent</name></name><modifier>*</modifier></type> <name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DIR</name><modifier>*</modifier></type> <name>dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>have_binary_usbmon</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>






<expr_stmt><expr><call><name>pcap_strlcpy</name><argument_list>(<argument><expr><name>usb_mon_dir</name></expr></argument>, <argument><expr><name>LINUX_USB_MON_DEV</name></expr></argument>, <argument><expr><sizeof>sizeof <name>usb_mon_dir</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>usb_mon_prefix</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>usb_mon_dir</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>usb_mon_prefix</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>




<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>usb_mon_prefix</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>usb_mon_prefix_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>usb_mon_prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>dir</name> <operator>=</operator> <call><name>opendir</name><argument_list>(<argument><expr><name>usb_mon_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><operator>(</operator><name>ret</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>data</name> <operator>=</operator> <call><name>readdir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>d_name</name></name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>usb_mon_prefix</name></expr></argument>, <argument><expr><name>usb_mon_prefix_len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>name</name><index>[<expr><name>usb_mon_prefix_len</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>usb_dev_add</name><argument_list>(<argument><expr><name>devlistp</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>err_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>closedir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>



















<expr_stmt><expr><name>dir</name> <operator>=</operator> <call><name>opendir</name><argument_list>(<argument><expr><name>SYS_USB_BUS_DIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><operator>(</operator><name>ret</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>data</name> <operator>=</operator> <call><name>readdir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>d_name</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"usb"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>name</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>usb_dev_add</name><argument_list>(<argument><expr><name>devlistp</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>err_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>closedir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>dir</name> <operator>=</operator> <call><name>opendir</name><argument_list>(<argument><expr><name>PROC_USB_BUS_DIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><operator>(</operator><name>ret</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>data</name> <operator>=</operator> <call><name>readdir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>d_name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><name><name>name</name><index>[<expr><operator>--</operator><name>len</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<while>while <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><name><name>name</name><index>[<expr><operator>--</operator><name>len</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>name</name><index>[<expr><name>len</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>usb_dev_add</name><argument_list>(<argument><expr><name>devlistp</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>err_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>closedir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_RING_SIZE</name></cpp:macro> <cpp:value>(8*1024)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_RING_SIZE</name></cpp:macro> <cpp:value>(1200*1024)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>usb_set_ring_size</name><parameter_list>(<parameter><decl><type><name>pcap_t</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>header_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>




















<decl_stmt><decl><type><name>int</name></type> <name>ring_size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>snapshot</name></name> <operator>&lt;</operator> <name>header_size</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>snapshot</name></name> <operator>=</operator> <name>header_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ring_size</name> <operator>=</operator> <operator>(</operator><name><name>handle</name><operator>-&gt;</operator><name>snapshot</name></name> <operator>-</operator> <name>header_size</name><operator>)</operator> <operator>*</operator> <literal type="number">5</literal></expr>;</expr_stmt>







<if_stmt><if>if <condition>(<expr><name>ring_size</name> <operator>&gt;</operator> <name>MAX_RING_SIZE</name></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><name>ring_size</name> <operator>=</operator> <name>MAX_RING_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>snapshot</name></name> <operator>=</operator> <name>header_size</name> <operator>+</operator> <operator>(</operator><name>MAX_RING_SIZE</name><operator>/</operator><literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ring_size</name> <operator>&lt;</operator> <name>MIN_RING_SIZE</name></expr>)</condition> <block>{<block_content>






<expr_stmt><expr><name>ring_size</name> <operator>=</operator> <name>MIN_RING_SIZE</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>MON_IOCT_RING_SIZE</name></expr></argument>, <argument><expr><name>ring_size</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Can't set ring size from fd %d"</literal></expr></argument>, <argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ring_size</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier>
<name>int</name></type> <name>usb_mmap</name><parameter_list>(<parameter><decl><type><name>pcap_t</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_usb_linux</name></name> <modifier>*</modifier></type><name>handlep</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>






<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>usb_set_ring_size</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pcap_usb_header_mmapped</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>mmapbuflen</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>mmapbuf</name></name> <operator>=</operator> <call><name>mmap</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>handlep</name><operator>-&gt;</operator><name>mmapbuflen</name></name></expr></argument>, <argument><expr><name>PROT_READ</name></expr></argument>,
<argument><expr><name>MAP_SHARED</name></expr></argument>, <argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>handlep</name><operator>-&gt;</operator><name>mmapbuf</name></name> <operator>==</operator> <name>MAP_FAILED</name></expr>)</condition> <block>{<block_content>




<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LINUX_USBDEVICE_FS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTRL_TIMEOUT</name></cpp:macro> <cpp:value>(5*1000)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USB_DIR_IN</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USB_TYPE_STANDARD</name></cpp:macro> <cpp:value>0x00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USB_RECIP_DEVICE</name></cpp:macro> <cpp:value>0x00</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USB_REQ_GET_DESCRIPTOR</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USB_DT_DEVICE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>probe_devices</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>bus</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>usbdevfs_ctrltransfer</name></name></type> <name>ctrl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dirent</name></name><modifier>*</modifier></type> <name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"/dev/bus/usb/000/"</literal></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>NAME_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DIR</name><modifier>*</modifier></type> <name>dir</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"/dev/bus/usb/%03d"</literal></expr></argument>, <argument><expr><name>bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dir</name> <operator>=</operator> <call><name>opendir</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dir</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>data</name> <operator>=</operator> <call><name>readdir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>name</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>d_name</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"/dev/bus/usb/%03d/%s"</literal></expr></argument>, <argument><expr><name>bus</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_USBDEVFS_CTRLTRANSFER_BREQUESTTYPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>ctrl</name><operator>.</operator><name>bRequestType</name></name> <operator>=</operator> <name>USB_DIR_IN</name> <operator>|</operator> <name>USB_TYPE_STANDARD</name> <operator>|</operator> <name>USB_RECIP_DEVICE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctrl</name><operator>.</operator><name>bRequest</name></name> <operator>=</operator> <name>USB_REQ_GET_DESCRIPTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctrl</name><operator>.</operator><name>wValue</name></name> <operator>=</operator> <name>USB_DT_DEVICE</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctrl</name><operator>.</operator><name>wIndex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctrl</name><operator>.</operator><name>wLength</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>ctrl</name><operator>.</operator><name>requesttype</name></name> <operator>=</operator> <name>USB_DIR_IN</name> <operator>|</operator> <name>USB_TYPE_STANDARD</name> <operator>|</operator> <name>USB_RECIP_DEVICE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctrl</name><operator>.</operator><name>request</name></name> <operator>=</operator> <name>USB_REQ_GET_DESCRIPTOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctrl</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name>USB_DT_DEVICE</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctrl</name><operator>.</operator><name>index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctrl</name><operator>.</operator><name>length</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>ctrl</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctrl</name><operator>.</operator><name>timeout</name></name> <operator>=</operator> <name>CTRL_TIMEOUT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ioctl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>USBDEVFS_CONTROL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>closedir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>pcap_t</name> <modifier>*</modifier></type>
<name>usb_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ebuf</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>is_ours</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cpend</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>devnum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>


<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>cp</name> <operator>=</operator> <name>device</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>USB_IFACE</name></expr></argument>, <argument><expr><sizeof>sizeof <name>USB_IFACE</name></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>is_ours</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cp</name> <operator>+=</operator> <sizeof>sizeof <name>USB_IFACE</name></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>devnum</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cpend</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cpend</name> <operator>==</operator> <name>cp</name> <operator>||</operator> <operator>*</operator><name>cpend</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>is_ours</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>devnum</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>is_ours</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><operator>*</operator><name>is_ours</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>pcap_create_common</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>pcap_usb_linux</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>activate_op</name></name> <operator>=</operator> <name>usb_activate</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>p</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>usb_activate</name><parameter_list>(<parameter><decl><type><name>pcap_t</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_usb_linux</name></name> <modifier>*</modifier></type><name>handlep</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>full_path</name><index>[<expr><name>USB_LINE_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>









<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>snapshot</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>handle</name><operator>-&gt;</operator><name>snapshot</name></name> <operator>&gt;</operator> <name>MAXIMUM_SNAPLEN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>snapshot</name></name> <operator>=</operator> <name>MAXIMUM_SNAPLEN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>bufsize</name></name> <operator>=</operator> <name><name>handle</name><operator>-&gt;</operator><name>snapshot</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_USB_LINUX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>inject_op</name></name> <operator>=</operator> <name>usb_inject_linux</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>setfilter_op</name></name> <operator>=</operator> <name>install_bpf_program</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>setdirection_op</name></name> <operator>=</operator> <name>usb_setdirection_linux</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>set_datalink_op</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>getnonblock_op</name></name> <operator>=</operator> <name>pcap_getnonblock_fd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>setnonblock_op</name></name> <operator>=</operator> <name>pcap_setnonblock_fd</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>device</name></name></expr></argument>, <argument><expr><name>USB_IFACE</name><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>handlep</name><operator>-&gt;</operator><name>bus_index</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"Can't get USB bus index from %s"</literal></expr></argument>, <argument><expr><name><name>handle</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>have_binary_usbmon</name><argument_list>()</argument_list></call></expr>)</condition>
<block>{<block_content>




<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>full_path</name></expr></argument>, <argument><expr><name>USB_LINE_LEN</name></expr></argument>, <argument><expr><name>LINUX_USB_MON_DEV</name><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>handlep</name><operator>-&gt;</operator><name>bus_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>full_path</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>



<switch>switch <condition>(<expr><name>errno</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ENOENT</name></expr>:</case>











<return>return <expr><name>PCAP_ERROR_NO_SUCH_DEVICE</name></expr>;</return>

<case>case <expr><name>EACCES</name></expr>:</case>



<return>return <expr><name>PCAP_ERROR_PERM_DENIED</name></expr>;</return>

<default>default:</default>



<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Can't open USB bus file %s"</literal></expr></argument>, <argument><expr><name>full_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>rfmon</name></name></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR_RFMON_NOTSUP</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>usb_mmap</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_USB_LINUX_MMAPPED</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>stats_op</name></name> <operator>=</operator> <name>usb_stats_linux_bin</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>read_op</name></name> <operator>=</operator> <name>usb_read_linux_mmap</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>cleanup_op</name></name> <operator>=</operator> <name>usb_cleanup_linux_mmap</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LINUX_USBDEVICE_FS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>probe_devices</name><argument_list>(<argument><expr><name><name>handlep</name><operator>-&gt;</operator><name>bus_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>selectable_fd</name></name> <operator>=</operator> <name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>









<if_stmt><if>if <condition>(<expr><call><name>usb_set_ring_size</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pcap_usb_header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>stats_op</name></name> <operator>=</operator> <name>usb_stats_linux_bin</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>read_op</name></name> <operator>=</operator> <name>usb_read_linux_bin</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LINUX_USBDEVICE_FS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>probe_devices</name><argument_list>(<argument><expr><name><name>handlep</name><operator>-&gt;</operator><name>bus_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<else>else <block>{<block_content>




<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>full_path</name></expr></argument>, <argument><expr><name>USB_LINE_LEN</name></expr></argument>, <argument><expr><name>USB_TEXT_DIR</name><literal type="string">"/%dt"</literal></expr></argument>, <argument><expr><name><name>handlep</name><operator>-&gt;</operator><name>bus_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>full_path</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOENT</name></expr>)</condition>
<block>{<block_content>




<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>full_path</name></expr></argument>, <argument><expr><name>USB_LINE_LEN</name></expr></argument>, <argument><expr><name>USB_TEXT_DIR_OLD</name><literal type="string">"/%dt"</literal></expr></argument>, <argument><expr><name><name>handlep</name><operator>-&gt;</operator><name>bus_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>full_path</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOENT</name></expr>)</condition>
<block>{<block_content>







<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>PCAP_ERROR_NO_SUCH_DEVICE</name></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EACCES</name></expr>)</condition>
<block>{<block_content>





<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>PCAP_ERROR_PERM_DENIED</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>



<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>PCAP_ERROR</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Can't open USB bus file %s"</literal></expr></argument>,
<argument><expr><name>full_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>rfmon</name></name></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR_RFMON_NOTSUP</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>stats_op</name></name> <operator>=</operator> <name>usb_stats_linux</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>read_op</name></name> <operator>=</operator> <name>usb_read_linux</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>





<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>selectable_fd</name></name> <operator>=</operator> <name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr>;</expr_stmt>



<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>bufsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>handle</name><operator>-&gt;</operator><name>buffer</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"malloc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>ascii_to_int</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><ternary><condition><expr><name>c</name> <operator>&lt;</operator> <literal type="char">'A'</literal></expr> ?</condition><then> <expr><name>c</name><operator>-</operator> <literal type="char">'0'</literal></expr></then><else>: <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>c</name><operator>&lt;</operator><literal type="char">'a'</literal><operator>)</operator></expr> ?</condition><then> <expr><name>c</name> <operator>-</operator> <literal type="char">'A'</literal> <operator>+</operator> <literal type="number">10</literal></expr></then><else>: <expr><name>c</name><operator>-</operator><literal type="char">'a'</literal><operator>+</operator><literal type="number">10</literal></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>usb_read_linux</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>max_packets</name></type> <name>_U_</name></decl></parameter>, <parameter><decl><type><name>pcap_handler</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>u_char</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>
<block>{<block_content>




<decl_stmt><decl><type><name><name>struct</name> <name>pcap_usb_linux</name></name> <modifier>*</modifier></type><name>handlep</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>timestamp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tag</name></decl>, <decl><type ref="prev"/><name>cnt</name></decl>, <decl><type ref="prev"/><name>ep_num</name></decl>, <decl><type ref="prev"/><name>dev_addr</name></decl>, <decl><type ref="prev"/><name>dummy</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>urb_len</name></decl>, <decl><type ref="prev"/><name>data_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>etype</name></decl>, <decl><type ref="prev"/><name>pipeid1</name></decl>, <decl><type ref="prev"/><name>pipeid2</name></decl>, <decl><type ref="prev"/><name><name>status</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>urb_tag</name></decl>, <decl><type ref="prev"/><name><name>line</name><index>[<expr><name>USB_LINE_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>string</name> <init>= <expr><name>line</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_char</name> <modifier>*</modifier></type> <name>rawdata</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_pkthdr</name></name></type> <name>pkth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pcap_usb_header</name><modifier>*</modifier></type> <name>uhdr</name> <init>= <expr><operator>(</operator><name>pcap_usb_header</name><operator>*</operator><operator>)</operator><name><name>handle</name><operator>-&gt;</operator><name>buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_char</name></type> <name>urb_transfer</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>incoming</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<do>do <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>USB_LINE_LEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>break_loop</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>break_loop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><operator>(</operator><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>errno</name> <operator>==</operator> <name>EINTR</name><operator>)</operator></expr>)</condition>;</do>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EAGAIN</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Can't read from fd %d"</literal></expr></argument>, <argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name><name>string</name><index>[<expr><name>ret</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="string">"%x %d %c %c%c:%d:%d %s%n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timestamp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>etype</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>pipeid1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pipeid2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dev_addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ep_num</name></expr></argument>, <argument><expr><name>status</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"Can't parse USB bus message '%s', too few tokens (expected 8 got %d)"</literal></expr></argument>,
<argument><expr><name>string</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>uhdr</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>tag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uhdr</name><operator>-&gt;</operator><name>device_address</name></name> <operator>=</operator> <name>dev_addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uhdr</name><operator>-&gt;</operator><name>bus_id</name></name> <operator>=</operator> <name><name>handlep</name><operator>-&gt;</operator><name>bus_index</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uhdr</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>string</name> <operator>+=</operator> <name>cnt</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pkth</name><operator>.</operator><name>ts</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Can't get timestamp for message '%s'"</literal></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>uhdr</name><operator>-&gt;</operator><name>ts_sec</name></name> <operator>=</operator> <name><name>pkth</name><operator>.</operator><name>ts</name><operator>.</operator><name>tv_sec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uhdr</name><operator>-&gt;</operator><name>ts_usec</name></name> <operator>=</operator> <name><name>pkth</name><operator>.</operator><name>ts</name><operator>.</operator><name>tv_usec</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>pipeid1</name> <operator>==</operator> <literal type="char">'C'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>urb_transfer</name> <operator>=</operator> <name>URB_CONTROL</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>pipeid1</name> <operator>==</operator> <literal type="char">'Z'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>urb_transfer</name> <operator>=</operator> <name>URB_ISOCHRONOUS</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>pipeid1</name> <operator>==</operator> <literal type="char">'I'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>urb_transfer</name> <operator>=</operator> <name>URB_INTERRUPT</name></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if <condition>(<expr><name>pipeid1</name> <operator>==</operator> <literal type="char">'B'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>urb_transfer</name> <operator>=</operator> <name>URB_BULK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pipeid2</name> <operator>==</operator> <literal type="char">'i'</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ep_num</name> <operator>|=</operator> <name>URB_TRANSFER_IN</name></expr>;</expr_stmt>
<expr_stmt><expr><name>incoming</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>etype</name> <operator>==</operator> <literal type="char">'C'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>incoming</name> <operator>=</operator> <operator>!</operator><name>incoming</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>incoming</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>direction</name></name> <operator>==</operator> <name>PCAP_D_OUT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else
if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>direction</name></name> <operator>==</operator> <name>PCAP_D_IN</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>uhdr</name><operator>-&gt;</operator><name>event_type</name></name> <operator>=</operator> <name>etype</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uhdr</name><operator>-&gt;</operator><name>transfer_type</name></name> <operator>=</operator> <name>urb_transfer</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uhdr</name><operator>-&gt;</operator><name>endpoint_number</name></name> <operator>=</operator> <name>ep_num</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkth</name><operator>.</operator><name>caplen</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pcap_usb_header</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>rawdata</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pcap_usb_header</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>



<decl_stmt><decl><type><name>pcap_usb_setup</name><modifier>*</modifier></type> <name>shdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>str1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>str2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>str3</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>str4</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>str5</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="string">"%s %s %s %s %s%n"</literal></expr></argument>, <argument><expr><name>str1</name></expr></argument>, <argument><expr><name>str2</name></expr></argument>, <argument><expr><name>str3</name></expr></argument>, <argument><expr><name>str4</name></expr></argument>,
<argument><expr><name>str5</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"Can't parse USB bus message '%s', too few tokens (expected 5 got %d)"</literal></expr></argument>,
<argument><expr><name>string</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>string</name> <operator>+=</operator> <name>cnt</name></expr>;</expr_stmt>


<expr_stmt><expr><name>shdr</name> <operator>=</operator> <operator>&amp;</operator><name><name>uhdr</name><operator>-&gt;</operator><name>setup</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shdr</name><operator>-&gt;</operator><name>bmRequestType</name></name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name>str1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shdr</name><operator>-&gt;</operator><name>bRequest</name></name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name>str2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shdr</name><operator>-&gt;</operator><name>wValue</name></name> <operator>=</operator> <call><name>htols</name><argument_list>(<argument><expr><call><name>strtoul</name><argument_list>(<argument><expr><name>str3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shdr</name><operator>-&gt;</operator><name>wIndex</name></name> <operator>=</operator> <call><name>htols</name><argument_list>(<argument><expr><call><name>strtoul</name><argument_list>(<argument><expr><name>str4</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>shdr</name><operator>-&gt;</operator><name>wLength</name></name> <operator>=</operator> <call><name>htols</name><argument_list>(<argument><expr><call><name>strtoul</name><argument_list>(<argument><expr><name>str5</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>uhdr</name><operator>-&gt;</operator><name>setup_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>uhdr</name><operator>-&gt;</operator><name>setup_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="string">" %d%n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>urb_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"Can't parse urb length from '%s'"</literal></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>string</name> <operator>+=</operator> <name>cnt</name></expr>;</expr_stmt>



<expr_stmt><expr><name><name>pkth</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>urb_len</name><operator>+</operator><name><name>pkth</name><operator>.</operator><name>caplen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uhdr</name><operator>-&gt;</operator><name>urb_len</name></name> <operator>=</operator> <name>urb_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uhdr</name><operator>-&gt;</operator><name>data_flag</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>data_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>uhdr</name><operator>-&gt;</operator><name>urb_len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>got</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="string">" %c"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>urb_tag</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"Can't parse urb tag from '%s'"</literal></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>urb_tag</name> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>got</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><name>string</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>uhdr</name><operator>-&gt;</operator><name>data_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>






<while>while <condition>(<expr><operator>(</operator><name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>string</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pkth</name><operator>.</operator><name>caplen</name></name> <operator>&lt;</operator> <operator>(</operator><name>bpf_u_int32</name><operator>)</operator><name><name>handle</name><operator>-&gt;</operator><name>snapshot</name></name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>rawdata</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>ascii_to_int</name><argument_list>(<argument><expr><name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <call><name>ascii_to_int</name><argument_list>(<argument><expr><name><name>string</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rawdata</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>string</name><operator>+=</operator><literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>string</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pkth</name><operator>.</operator><name>caplen</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>data_len</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<label><name>got</name>:</label>
<expr_stmt><expr><name><name>uhdr</name><operator>-&gt;</operator><name>data_len</name></name> <operator>=</operator> <name>data_len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pkth</name><operator>.</operator><name>caplen</name></name> <operator>&gt;</operator> <operator>(</operator><name>bpf_u_int32</name><operator>)</operator><name><name>handle</name><operator>-&gt;</operator><name>snapshot</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pkth</name><operator>.</operator><name>caplen</name></name> <operator>=</operator> <operator>(</operator><name>bpf_u_int32</name><operator>)</operator><name><name>handle</name><operator>-&gt;</operator><name>snapshot</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>fcode</name><operator>.</operator><name>bf_insns</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<call><name>bpf_filter</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fcode</name><operator>.</operator><name>bf_insns</name></name></expr></argument>, <argument><expr><name><name>handle</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>,
<argument><expr><name><name>pkth</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><name><name>pkth</name><operator>.</operator><name>caplen</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>packets_read</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>callback</name><argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkth</name></expr></argument>, <argument><expr><name><name>handle</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>usb_inject_linux</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><name>buf</name></type> <name>_U_</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <name>size</name></type> <name>_U_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"Packet injection is not supported on USB devices"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>usb_stats_linux</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>pcap_stat</name></name> <modifier>*</modifier></type><name>stats</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_usb_linux</name></name> <modifier>*</modifier></type><name>handlep</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dummy</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>consumed</name></decl>, <decl><type ref="prev"/><name>cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>string</name><index>[<expr><name>USB_LINE_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>token</name><index>[<expr><name>USB_LINE_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>ptr</name> <init>= <expr><name>string</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>USB_LINE_LEN</name></expr></argument>, <argument><expr><name>USB_TEXT_DIR</name><literal type="string">"/%ds"</literal></expr></argument>, <argument><expr><name><name>handlep</name><operator>-&gt;</operator><name>bus_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOENT</name></expr>)</condition>
<block>{<block_content>




<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>USB_LINE_LEN</name></expr></argument>, <argument><expr><name>USB_TEXT_DIR_OLD</name><literal type="string">"/%ds"</literal></expr></argument>, <argument><expr><name><name>handlep</name><operator>-&gt;</operator><name>bus_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Can't open USB stats file %s"</literal></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<do>do <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>USB_LINE_LEN</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>(</operator><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>errno</name> <operator>==</operator> <name>EINTR</name><operator>)</operator></expr>)</condition>;</do>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"Can't read stats from fd %d "</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>string</name><index>[<expr><name>ret</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>ps_recv</name></name> <operator>=</operator> <name><name>handlep</name><operator>-&gt;</operator><name>packets_read</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>ps_drop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>ps_ifdrop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>consumed</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>consumed</name> <operator>&lt;</operator> <name>ret</name></expr>;</condition> <incr/>)</control> <block>{<block_content>






<decl_stmt><decl><type><name>int</name></type> <name>ntok</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cnt</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ntok</name> <operator>=</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"%s%n"</literal></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ntok</name> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>cnt</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>consumed</name> <operator>+=</operator> <name>cnt</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>cnt</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><literal type="string">"text_lost"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ntok</name> <operator>=</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"%d%n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stats</name><operator>-&gt;</operator><name>ps_drop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ntok</name> <operator>=</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"%d%n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ntok</name> <operator>!=</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>cnt</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>consumed</name> <operator>+=</operator> <name>cnt</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>cnt</name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>usb_setdirection_linux</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>pcap_direction_t</name></type> <name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>direction</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>usb_stats_linux_bin</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>pcap_stat</name></name> <modifier>*</modifier></type><name>stats</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_usb_linux</name></name> <modifier>*</modifier></type><name>handlep</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>mon_bin_stats</name></name></type> <name>st</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ioctl</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>MON_IOCG_STATS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Can't read stats from fd %d"</literal></expr></argument>, <argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>ps_recv</name></name> <operator>=</operator> <name><name>handlep</name><operator>-&gt;</operator><name>packets_read</name></name> <operator>+</operator> <name><name>st</name><operator>.</operator><name>queued</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>ps_drop</name></name> <operator>=</operator> <name><name>st</name><operator>.</operator><name>dropped</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>ps_ifdrop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>usb_read_linux_bin</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>max_packets</name></type> <name>_U_</name></decl></parameter>, <parameter><decl><type><name>pcap_handler</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>u_char</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_usb_linux</name></name> <modifier>*</modifier></type><name>handlep</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>mon_bin_get</name></name></type> <name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_pkthdr</name></name></type> <name>pkth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>clen</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>snapshot</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pcap_usb_header</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><name><name>info</name><operator>.</operator><name>hdr</name></name> <operator>=</operator> <operator>(</operator><name>pcap_usb_header</name><operator>*</operator><operator>)</operator> <name><name>handle</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>u_char</name> <operator>*</operator><operator>)</operator><name><name>handle</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pcap_usb_header</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>.</operator><name>data_len</name></name> <operator>=</operator> <name>clen</name></expr>;</expr_stmt>


<do>do <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ioctl</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>MON_IOCX_GET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>break_loop</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>break_loop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><operator>(</operator><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>errno</name> <operator>==</operator> <name>EINTR</name><operator>)</operator></expr>)</condition>;</do>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EAGAIN</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Can't read from fd %d"</literal></expr></argument>, <argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>



















<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>hdr</name><operator>-&gt;</operator><name>data_len</name></name> <operator>&lt;</operator> <name>clen</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>clen</name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>hdr</name><operator>-&gt;</operator><name>data_len</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>info</name><operator>.</operator><name>hdr</name><operator>-&gt;</operator><name>data_len</name></name> <operator>=</operator> <name>clen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkth</name><operator>.</operator><name>caplen</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pcap_usb_header</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>clen</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>hdr</name><operator>-&gt;</operator><name>data_flag</name></name></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><name><name>pkth</name><operator>.</operator><name>len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pcap_usb_header</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>info</name><operator>.</operator><name>hdr</name><operator>-&gt;</operator><name>data_len</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>






<expr_stmt><expr><name><name>pkth</name><operator>.</operator><name>len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pcap_usb_header</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>info</name><operator>.</operator><name>hdr</name><operator>-&gt;</operator><name>urb_len</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>pkth</name><operator>.</operator><name>ts</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>hdr</name><operator>-&gt;</operator><name>ts_sec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkth</name><operator>.</operator><name>ts</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>hdr</name><operator>-&gt;</operator><name>ts_usec</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>fcode</name><operator>.</operator><name>bf_insns</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<call><name>bpf_filter</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fcode</name><operator>.</operator><name>bf_insns</name></name></expr></argument>, <argument><expr><name><name>handle</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>,
<argument><expr><name><name>pkth</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><name><name>pkth</name><operator>.</operator><name>caplen</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>packets_read</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>callback</name><argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkth</name></expr></argument>, <argument><expr><name><name>handle</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VEC_SIZE</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>usb_read_linux_mmap</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_packets</name></decl></parameter>, <parameter><decl><type><name>pcap_handler</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>u_char</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_usb_linux</name></name> <modifier>*</modifier></type><name>handlep</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>mon_bin_mfetch</name></name></type> <name>fetch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name><name>vec</name><index>[<expr><name>VEC_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_pkthdr</name></name></type> <name>pkth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pcap_usb_header_mmapped</name><modifier>*</modifier></type> <name>hdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nflush</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>packets</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>clen</name></decl>, <decl><type ref="prev"/><name>max_clen</name></decl>;</decl_stmt>

<expr_stmt><expr><name>max_clen</name> <operator>=</operator> <name><name>handle</name><operator>-&gt;</operator><name>snapshot</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pcap_usb_header_mmapped</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>limit</name> <init>= <expr><name>max_packets</name> <operator>-</operator> <name>packets</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>limit</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>limit</name> <operator>=</operator> <name>VEC_SIZE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>limit</name> <operator>&gt;</operator> <name>VEC_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>limit</name> <operator>=</operator> <name>VEC_SIZE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>fetch</name><operator>.</operator><name>offvec</name></name> <operator>=</operator> <name>vec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fetch</name><operator>.</operator><name>nfetch</name></name> <operator>=</operator> <name>limit</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fetch</name><operator>.</operator><name>nflush</name></name> <operator>=</operator> <name>nflush</name></expr>;</expr_stmt>

<do>do <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ioctl</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>MON_IOCX_MFETCH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fetch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>break_loop</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>break_loop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><operator>(</operator><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>errno</name> <operator>==</operator> <name>EINTR</name><operator>)</operator></expr>)</condition>;</do>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EAGAIN</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Can't mfetch fd %d"</literal></expr></argument>,
<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>nflush</name> <operator>=</operator> <name><name>fetch</name><operator>.</operator><name>nfetch</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>fetch</name><operator>.</operator><name>nfetch</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>hdr</name> <operator>=</operator> <operator>(</operator><name>pcap_usb_header_mmapped</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>handlep</name><operator>-&gt;</operator><name>mmapbuf</name><index>[<expr><name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>-&gt;</operator><name>event_type</name></name> <operator>==</operator> <literal type="char">'@'</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>





















<expr_stmt><expr><name>clen</name> <operator>=</operator> <name>max_clen</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>-&gt;</operator><name>data_len</name></name> <operator>&lt;</operator> <name>clen</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>clen</name> <operator>=</operator> <name><name>hdr</name><operator>-&gt;</operator><name>data_len</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pkth</name><operator>.</operator><name>caplen</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pcap_usb_header_mmapped</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>clen</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>-&gt;</operator><name>data_flag</name></name></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><name><name>pkth</name><operator>.</operator><name>len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pcap_usb_header_mmapped</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>
<name><name>hdr</name><operator>-&gt;</operator><name>data_len</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>






<expr_stmt><expr><name><name>pkth</name><operator>.</operator><name>len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pcap_usb_header_mmapped</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>
<operator>(</operator><name><name>hdr</name><operator>-&gt;</operator><name>ndesc</name></name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>usb_isodesc</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>+</operator> <name><name>hdr</name><operator>-&gt;</operator><name>urb_len</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name><name>pkth</name><operator>.</operator><name>ts</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name><name>hdr</name><operator>-&gt;</operator><name>ts_sec</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkth</name><operator>.</operator><name>ts</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <name><name>hdr</name><operator>-&gt;</operator><name>ts_usec</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>fcode</name><operator>.</operator><name>bf_insns</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<call><name>bpf_filter</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fcode</name><operator>.</operator><name>bf_insns</name></name></expr></argument>, <argument><expr><operator>(</operator><name>u_char</name><operator>*</operator><operator>)</operator> <name>hdr</name></expr></argument>,
<argument><expr><name><name>pkth</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><name><name>pkth</name><operator>.</operator><name>caplen</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>packets_read</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>callback</name><argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkth</name></expr></argument>, <argument><expr><operator>(</operator><name>u_char</name><operator>*</operator><operator>)</operator> <name>hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>packets</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><call><name>PACKET_COUNT_IS_UNLIMITED</name><argument_list>(<argument><expr><name>max_packets</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name>packets</name> <operator>==</operator> <name>max_packets</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>MON_IOCH_MFLUSH</name></expr></argument>, <argument><expr><name>nflush</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Can't mflush fd %d"</literal></expr></argument>, <argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>packets</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>usb_cleanup_linux_mmap</name><parameter_list>(<parameter><decl><type><name>pcap_t</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_usb_linux</name></name> <modifier>*</modifier></type><name>handlep</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name><name>handlep</name><operator>-&gt;</operator><name>mmapbuf</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>munmap</name><argument_list>(<argument><expr><name><name>handlep</name><operator>-&gt;</operator><name>mmapbuf</name></name></expr></argument>, <argument><expr><name><name>handlep</name><operator>-&gt;</operator><name>mmapbuflen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>mmapbuf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>pcap_cleanup_live_common</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
