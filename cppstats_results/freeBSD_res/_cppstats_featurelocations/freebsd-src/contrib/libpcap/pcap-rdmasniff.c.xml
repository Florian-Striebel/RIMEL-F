<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libpcap/pcap-rdmasniff.c">





























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pcap-int.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pcap-rdmasniff.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;infiniband/verbs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>IBV_FLOW_ATTR_SNIFFER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IBV_FLOW_ATTR_SNIFFER</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>RDMASNIFF_NUM_RECEIVES</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>RDMASNIFF_RECEIVE_SIZE</name> <init>= <expr><literal type="number">10000</literal></expr></init></decl>;</decl_stmt>

<struct>struct <name>pcap_rdmasniff</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>ibv_device</name></name> <modifier>*</modifier></type> <name>rdma_device</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ibv_context</name></name> <modifier>*</modifier></type> <name>context</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ibv_comp_channel</name></name> <modifier>*</modifier></type> <name>channel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ibv_pd</name></name> <modifier>*</modifier></type> <name>pd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ibv_cq</name></name> <modifier>*</modifier></type> <name>cq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ibv_qp</name></name> <modifier>*</modifier></type> <name>qp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ibv_flow</name></name> <modifier>*</modifier></type> <name>flow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ibv_mr</name></name> <modifier>*</modifier></type> <name>mr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_char</name> <modifier>*</modifier></type> <name>oneshot_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>port_num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cq_event</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>packets_recv</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>rdmasniff_stats</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>pcap_stat</name></name> <modifier>*</modifier></type><name>stat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_rdmasniff</name></name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>stat</name><operator>-&gt;</operator><name>ps_recv</name></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>packets_recv</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stat</name><operator>-&gt;</operator><name>ps_drop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stat</name><operator>-&gt;</operator><name>ps_ifdrop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>rdmasniff_cleanup</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_rdmasniff</name></name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ibv_dereg_mr</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>mr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ibv_destroy_flow</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>flow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ibv_destroy_qp</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>qp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ibv_destroy_cq</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>cq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ibv_dealloc_pd</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>pd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ibv_destroy_comp_channel</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>channel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ibv_close_device</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>oneshot_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pcap_cleanup_live_common</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>rdmasniff_post_recv</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>wr_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_rdmasniff</name></name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ibv_sge</name></name></type> <name>sg_entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ibv_recv_wr</name></name></type> <name>wr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bad_wr</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sg_entry</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name>RDMASNIFF_RECEIVE_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sg_entry</name><operator>.</operator><name>addr</name></name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator> <name><name>handle</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name>RDMASNIFF_RECEIVE_SIZE</name> <operator>*</operator> <name>wr_id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sg_entry</name><operator>.</operator><name>lkey</name></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>mr</name><operator>-&gt;</operator><name>lkey</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wr</name><operator>.</operator><name>wr_id</name></name> <operator>=</operator> <name>wr_id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wr</name><operator>.</operator><name>num_sge</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wr</name><operator>.</operator><name>sg_list</name></name> <operator>=</operator> <operator>&amp;</operator><name>sg_entry</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wr</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ibv_post_recv</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>qp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bad_wr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>rdmasniff_read</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_packets</name></decl></parameter>, <parameter><decl><type><name>pcap_handler</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>u_char</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_rdmasniff</name></name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ibv_cq</name></name> <modifier>*</modifier></type><name>ev_cq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ev_ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ibv_wc</name></name></type> <name>wc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_pkthdr</name></name></type> <name>pkth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_char</name> <modifier>*</modifier></type><name>pktd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>priv</name><operator>-&gt;</operator><name>cq_event</name></name></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><call><name>ibv_get_cq_event</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>channel</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ev_cq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ev_ctx</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EINTR</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>break_loop</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>break_loop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR_BREAK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>ibv_ack_cq_events</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>cq</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ibv_req_notify_cq</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>cq</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>cq_event</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>count</name> <operator>&lt;</operator> <name>max_packets</name> <operator>||</operator> <call><name>PACKET_COUNT_IS_UNLIMITED</name><argument_list>(<argument><expr><name>max_packets</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ibv_poll_cq</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>cq</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>wc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>cq_event</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wc</name><operator>.</operator><name>status</name></name> <operator>!=</operator> <name>IBV_WC_SUCCESS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"failed WC wr_id %lld status %d/%s\n"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <name><name>wc</name><operator>.</operator><name>wr_id</name></name></expr></argument>,
<argument><expr><name><name>wc</name><operator>.</operator><name>status</name></name></expr></argument>, <argument><expr><call><name>ibv_wc_status_str</name><argument_list>(<argument><expr><name><name>wc</name><operator>.</operator><name>status</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pkth</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name><name>wc</name><operator>.</operator><name>byte_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkth</name><operator>.</operator><name>caplen</name></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>pkth</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><operator>(</operator><name>u_int</name><operator>)</operator><name><name>handle</name><operator>-&gt;</operator><name>snapshot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pkth</name><operator>.</operator><name>ts</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pktd</name> <operator>=</operator> <operator>(</operator><name>u_char</name> <operator>*</operator><operator>)</operator> <name><name>handle</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>wc</name><operator>.</operator><name>wr_id</name></name> <operator>*</operator> <name>RDMASNIFF_RECEIVE_SIZE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>fcode</name><operator>.</operator><name>bf_insns</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
<call><name>bpf_filter</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fcode</name><operator>.</operator><name>bf_insns</name></name></expr></argument>, <argument><expr><name>pktd</name></expr></argument>, <argument><expr><name><name>pkth</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><name><name>pkth</name><operator>.</operator><name>caplen</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>callback</name><argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkth</name></expr></argument>, <argument><expr><name>pktd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name><name>priv</name><operator>-&gt;</operator><name>packets_recv</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rdmasniff_post_recv</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name><name>wc</name><operator>.</operator><name>wr_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>break_loop</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>break_loop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR_BREAK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>rdmasniff_oneshot</name><parameter_list>(<parameter><decl><type><name>u_char</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>pcap_pkthdr</name></name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u_char</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>oneshot_userdata</name></name> <modifier>*</modifier></type><name>sp</name> <init>= <expr><operator>(</operator>struct <name>oneshot_userdata</name> <operator>*</operator><operator>)</operator> <name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name> <init>= <expr><name><name>sp</name><operator>-&gt;</operator><name>pd</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_rdmasniff</name></name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name><name>sp</name><operator>-&gt;</operator><name>hdr</name></name> <operator>=</operator> <operator>*</operator><name>h</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>oneshot_buffer</name></name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>caplen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>sp</name><operator>-&gt;</operator><name>pkt</name></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>oneshot_buffer</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>rdmasniff_activate</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_rdmasniff</name></name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ibv_qp_init_attr</name></name></type> <name>qp_init_attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ibv_qp_attr</name></name></type> <name>qp_attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ibv_flow_attr</name></name></type> <name>flow_attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ibv_port_attr</name></name></type> <name>port_attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <call><name>ibv_open_device</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>rdma_device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>priv</name><operator>-&gt;</operator><name>context</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"Failed to open device %s"</literal></expr></argument>, <argument><expr><name><name>handle</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>pd</name></name> <operator>=</operator> <call><name>ibv_alloc_pd</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>priv</name><operator>-&gt;</operator><name>pd</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"Failed to alloc PD for device %s"</literal></expr></argument>, <argument><expr><name><name>handle</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>channel</name></name> <operator>=</operator> <call><name>ibv_create_comp_channel</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>priv</name><operator>-&gt;</operator><name>channel</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"Failed to create comp channel for device %s"</literal></expr></argument>, <argument><expr><name><name>handle</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>cq</name></name> <operator>=</operator> <call><name>ibv_create_cq</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>RDMASNIFF_NUM_RECEIVES</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>channel</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>priv</name><operator>-&gt;</operator><name>cq</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"Failed to create CQ for device %s"</literal></expr></argument>, <argument><expr><name><name>handle</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ibv_req_notify_cq</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>cq</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>qp_init_attr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>qp_init_attr</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>qp_init_attr</name><operator>.</operator><name>send_cq</name></name> <operator>=</operator> <name><name>qp_init_attr</name><operator>.</operator><name>recv_cq</name></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>cq</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>qp_init_attr</name><operator>.</operator><name>cap</name><operator>.</operator><name>max_recv_wr</name></name> <operator>=</operator> <name>RDMASNIFF_NUM_RECEIVES</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>qp_init_attr</name><operator>.</operator><name>cap</name><operator>.</operator><name>max_recv_sge</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>qp_init_attr</name><operator>.</operator><name>qp_type</name></name> <operator>=</operator> <name>IBV_QPT_RAW_PACKET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>qp</name></name> <operator>=</operator> <call><name>ibv_create_qp</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>pd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>qp_init_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>priv</name><operator>-&gt;</operator><name>qp</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"Failed to create QP for device %s"</literal></expr></argument>, <argument><expr><name><name>handle</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>qp_attr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>qp_attr</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>qp_attr</name><operator>.</operator><name>qp_state</name></name> <operator>=</operator> <name>IBV_QPS_INIT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>qp_attr</name><operator>.</operator><name>port_num</name></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>port_num</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ibv_modify_qp</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>qp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>qp_attr</name></expr></argument>, <argument><expr><name>IBV_QP_STATE</name> <operator>|</operator> <name>IBV_QP_PORT</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"Failed to modify QP to INIT for device %s"</literal></expr></argument>, <argument><expr><name><name>handle</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>qp_attr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>qp_attr</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>qp_attr</name><operator>.</operator><name>qp_state</name></name> <operator>=</operator> <name>IBV_QPS_RTR</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ibv_modify_qp</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>qp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>qp_attr</name></expr></argument>, <argument><expr><name>IBV_QP_STATE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"Failed to modify QP to RTR for device %s"</literal></expr></argument>, <argument><expr><name><name>handle</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>flow_attr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>flow_attr</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>flow_attr</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>IBV_FLOW_ATTR_SNIFFER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>flow_attr</name><operator>.</operator><name>size</name></name> <operator>=</operator> <sizeof>sizeof <name>flow_attr</name></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>flow_attr</name><operator>.</operator><name>port</name></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>port_num</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>flow</name></name> <operator>=</operator> <call><name>ibv_create_flow</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>qp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flow_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>priv</name><operator>-&gt;</operator><name>flow</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"Failed to create flow for device %s"</literal></expr></argument>, <argument><expr><name><name>handle</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>bufsize</name></name> <operator>=</operator> <name>RDMASNIFF_NUM_RECEIVES</name> <operator>*</operator> <name>RDMASNIFF_RECEIVE_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>bufsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>handle</name><operator>-&gt;</operator><name>buffer</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"Failed to allocate receive buffer for device %s"</literal></expr></argument>, <argument><expr><name><name>handle</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>oneshot_buffer</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>RDMASNIFF_RECEIVE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>priv</name><operator>-&gt;</operator><name>oneshot_buffer</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"Failed to allocate oneshot buffer for device %s"</literal></expr></argument>, <argument><expr><name><name>handle</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>mr</name></name> <operator>=</operator> <call><name>ibv_reg_mr</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>pd</name></name></expr></argument>, <argument><expr><name><name>handle</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>handle</name><operator>-&gt;</operator><name>bufsize</name></name></expr></argument>, <argument><expr><name>IBV_ACCESS_LOCAL_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>priv</name><operator>-&gt;</operator><name>mr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"Failed to register MR for device %s"</literal></expr></argument>, <argument><expr><name><name>handle</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>RDMASNIFF_NUM_RECEIVES</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>rdmasniff_post_recv</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ibv_query_port</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>port_num</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>port_attr</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name><name>port_attr</name><operator>.</operator><name>link_layer</name></name> <operator>==</operator> <name>IBV_LINK_LAYER_INFINIBAND</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_INFINIBAND</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_EN10MB</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>snapshot</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>handle</name><operator>-&gt;</operator><name>snapshot</name></name> <operator>&gt;</operator> <name>RDMASNIFF_RECEIVE_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>snapshot</name></name> <operator>=</operator> <name>RDMASNIFF_RECEIVE_SIZE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>read_op</name></name> <operator>=</operator> <name>rdmasniff_read</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>stats_op</name></name> <operator>=</operator> <name>rdmasniff_stats</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>cleanup_op</name></name> <operator>=</operator> <name>rdmasniff_cleanup</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>setfilter_op</name></name> <operator>=</operator> <name>install_bpf_program</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>setdirection_op</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>set_datalink_op</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>getnonblock_op</name></name> <operator>=</operator> <name>pcap_getnonblock_fd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>setnonblock_op</name></name> <operator>=</operator> <name>pcap_setnonblock_fd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>oneshot_callback</name></name> <operator>=</operator> <name>rdmasniff_oneshot</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>selectable_fd</name></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>channel</name><operator>-&gt;</operator><name>fd</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>error</name>:</label>
<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>mr</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ibv_dereg_mr</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>mr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>flow</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ibv_destroy_flow</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>flow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>qp</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ibv_destroy_qp</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>qp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>cq</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ibv_destroy_cq</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>cq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>channel</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ibv_destroy_comp_channel</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>channel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>pd</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ibv_dealloc_pd</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>pd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>context</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ibv_close_device</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>oneshot_buffer</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>oneshot_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>pcap_t</name> <modifier>*</modifier></type>
<name>rdmasniff_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ebuf</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>is_ours</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_rdmasniff</name></name> <modifier>*</modifier></type><name>priv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ibv_device</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>dev_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>numdev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>namelen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>port_num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>is_ours</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dev_list</name> <operator>=</operator> <call><name>ibv_get_device_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>numdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dev_list</name> <operator>||</operator> <operator>!</operator><name>numdev</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>namelen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>port</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>port_num</name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name>port</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>port_num</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>namelen</name> <operator>=</operator> <name>port</name> <operator>-</operator> <name>device</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>port_num</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>port_num</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numdev</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>dev_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>namelen</name> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><name><name>dev_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>is_ours</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>pcap_create_common</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>pcap_rdmasniff</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>activate_op</name></name> <operator>=</operator> <name>rdmasniff_activate</name></expr>;</expr_stmt>
<expr_stmt><expr><name>priv</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>priv</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>rdma_device</name></name> <operator>=</operator> <name><name>dev_list</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>port_num</name></name> <operator>=</operator> <name>port_num</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>ibv_free_device_list</name><argument_list>(<argument><expr><name>dev_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>rdmasniff_findalldevs</name><parameter_list>(<parameter><decl><type><name>pcap_if_list_t</name> <modifier>*</modifier></type><name>devlistp</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>err_str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ibv_device</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>dev_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>numdev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dev_list</name> <operator>=</operator> <call><name>ibv_get_device_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>numdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dev_list</name> <operator>||</operator> <operator>!</operator><name>numdev</name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numdev</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>add_dev</name><argument_list>(<argument><expr><name>devlistp</name></expr></argument>, <argument><expr><name><name>dev_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"RDMA sniffer"</literal></expr></argument>, <argument><expr><name>err_str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<label><name>out</name>:</label>
<expr_stmt><expr><call><name>ibv_free_device_list</name><argument_list>(<argument><expr><name>dev_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
</unit>
