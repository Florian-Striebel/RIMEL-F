<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libpcap/pcap-linux.c">















































































































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GNU_SOURCE</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/utsname.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mman.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/if.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/if_packet.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/sockios.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/if_ether.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;net/if_arp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;poll.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dirent.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pcap-int.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pcap/sll.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pcap/vlan.h"</cpp:file></cpp:include>


























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PF_PACKET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/if_packet.h&gt;</cpp:file></cpp:include>











<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PACKET_HOST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_PF_PACKET_SOCKETS</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PACKET_AUXDATA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_PACKET_AUXDATA</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PCAP_SUPPORT_PACKET_RING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TPACKET_HDRLEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_PACKET_RING</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TPACKET3_HDRLEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_TPACKET3</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TPACKET2_HDRLEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_TPACKET2</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TPACKET_V1</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SO_ATTACH_FILTER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/filter.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LINUX_NET_TSTAMP_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/net_tstamp.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LINUX_SOCKIOS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/sockios.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LINUX_IF_BONDING_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/if_bonding.h&gt;</cpp:file></cpp:include>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIOCBONDINFOQUERY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BOND_INFO_QUERY_IOCTL</name></cpp:macro> <cpp:value>SIOCBONDINFOQUERY</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BOND_INFO_QUERY_OLD</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BOND_INFO_QUERY_IOCTL</name></cpp:macro> <cpp:value>BOND_INFO_QUERY_OLD</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LINUX_WIRELESS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/wireless.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBNL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/nl80211.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netlink/genl/genl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netlink/genl/family.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netlink/genl/ctrl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netlink/msg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netlink/attr.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LINUX_ETHTOOL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;linux/ethtool.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SOCKLEN_T</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>int</name></type> <name>socklen_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MSG_TRUNC</name></expr></argument>)</argument_list></call></expr></cpp:if>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSG_TRUNC</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SOL_PACKET</name></expr></argument>)</argument_list></call></expr></cpp:if>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOL_PACKET</name></cpp:macro> <cpp:value>263</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_LINKHEADER_SIZE</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIGGER_THAN_ALL_MTUS</name></cpp:macro> <cpp:value>(64*1024)</cpp:value></cpp:define>




<struct>struct <name>pcap_linux</name> <block>{
<decl_stmt><decl><type><name>u_int</name></type> <name>packets_read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>proc_dropped</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_stat</name></name></type> <name>stat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>device</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>filter_in_userland</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>blocks_to_filter_in_userland</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>must_do_on_close</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sock_packet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cooked</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ifindex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lo_ifindex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bpf_u_int32</name></type> <name>oldmode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mondevice</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_char</name> <modifier>*</modifier></type><name>mmapbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>mmapbuflen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vlan_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>tp_version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>tp_hdrlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_char</name> <modifier>*</modifier></type><name>oneshot_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>poll_timeout</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TPACKET3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>current_packet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>packets_left</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>;</struct>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUST_CLEAR_PROMISC</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUST_CLEAR_RFMON</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUST_DELETE_MONIF</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>




<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>get_if_flags</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bpf_u_int32</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>is_wifi</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>map_arphrd_to_dlt</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>pcap_activate_linux</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>activate_old</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>activate_new</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>activate_mmap</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>pcap_can_set_rfmon_linux</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>pcap_read_linux</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>pcap_handler</name></type></decl></parameter>, <parameter><decl><type><name>u_char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>pcap_read_packet</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>pcap_handler</name></type></decl></parameter>, <parameter><decl><type><name>u_char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>pcap_inject_linux</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>pcap_stats_linux</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>pcap_stat</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>pcap_setfilter_linux</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>bpf_program</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>pcap_setdirection_linux</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>pcap_direction_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>pcap_set_datalink_linux</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>pcap_cleanup_linux</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>






<struct>struct <name>tpacket_hdr_64</name> <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>tp_status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>tp_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>tp_snaplen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>tp_mac</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>tp_net</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>tp_sec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>tp_usec</name></decl>;</decl_stmt>
}</block>;</struct>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TPACKET_V1_64</name></cpp:macro> <cpp:value>99</cpp:value></cpp:define>

<union>union <name>thdr</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>tpacket_hdr</name></name> <modifier>*</modifier></type><name>h1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tpacket_hdr_64</name></name> <modifier>*</modifier></type><name>h1_64</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TPACKET2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>tpacket2_hdr</name></name> <modifier>*</modifier></type><name>h2</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TPACKET3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>tpacket_block_desc</name></name> <modifier>*</modifier></type><name>h3</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>raw</name></decl>;</decl_stmt>
}</block>;</union>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PACKET_RING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RING_GET_FRAME_AT</name><parameter_list>(<parameter><type><name>h</name></type></parameter>, <parameter><type><name>offset</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((union thdr **)h-&gt;buffer)[(offset)])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RING_GET_CURRENT_FRAME</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RING_GET_FRAME_AT(h, h-&gt;offset)</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>destroy_ring</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>create_ring</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>status</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>prepare_tpacket_socket</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>pcap_cleanup_linux_mmap</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>pcap_read_linux_mmap_v1</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>pcap_handler</name></type></decl></parameter> , <parameter><decl><type><name>u_char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>pcap_read_linux_mmap_v1_64</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>pcap_handler</name></type></decl></parameter> , <parameter><decl><type><name>u_char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TPACKET2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>pcap_read_linux_mmap_v2</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>pcap_handler</name></type></decl></parameter> , <parameter><decl><type><name>u_char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TPACKET3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>pcap_read_linux_mmap_v3</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>pcap_handler</name></type></decl></parameter> , <parameter><decl><type><name>u_char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>pcap_setfilter_linux_mmap</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>bpf_program</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>pcap_setnonblock_mmap</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nonblock</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>pcap_getnonblock_mmap</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>pcap_oneshot_mmap</name><parameter_list>(<parameter><decl><type><name>u_char</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>pcap_pkthdr</name></name> <modifier>*</modifier></type><name>h</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>u_char</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TP_STATUS_VLAN_VALID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLAN_VALID</name><parameter_list>(<parameter><type><name>hdr</name></type></parameter>, <parameter><type><name>hv</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((hv)-&gt;tp_vlan_tci != 0 || ((hdr)-&gt;tp_status &amp; TP_STATUS_VLAN_VALID))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLAN_VALID</name><parameter_list>(<parameter><type><name>hdr</name></type></parameter>, <parameter><type><name>hv</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((hv)-&gt;tp_vlan_tci != 0 || ((hdr)-&gt;tp_status &amp; 0x10))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TP_STATUS_VLAN_TPID_VALID</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLAN_TPID</name><parameter_list>(<parameter><type><name>hdr</name></type></parameter>, <parameter><type><name>hv</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((hv)-&gt;tp_vlan_tpid || ((hdr)-&gt;tp_status &amp; TP_STATUS_VLAN_TPID_VALID)) ? (hv)-&gt;tp_vlan_tpid : ETH_P_8021Q)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLAN_TPID</name><parameter_list>(<parameter><type><name>hdr</name></type></parameter>, <parameter><type><name>hv</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ETH_P_8021Q</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PF_PACKET_SOCKETS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>iface_get_id</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ebuf</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>iface_get_mtu</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ebuf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>iface_get_arptype</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ebuf</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PF_PACKET_SOCKETS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>iface_bind</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ifindex</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ebuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>protocol</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IW_MODE_MONITOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>has_wext</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sock_fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ebuf</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>enter_rfmon_mode</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sock_fd</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>device</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LINUX_NET_TSTAMP_H</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PACKET_TIMESTAMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>iface_ethtool_get_ts_info</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ebuf</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PACKET_RING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>iface_get_offload</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>iface_bind_old</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ebuf</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SO_ATTACH_FILTER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>fix_program</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sock_fprog</name></name> <modifier>*</modifier></type><name>fcode</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>is_mapped</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>fix_offset</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>bpf_insn</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>set_kernel_filter</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sock_fprog</name></name> <modifier>*</modifier></type><name>fcode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>reset_kernel_filter</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>sock_filter</name></name></type> <name>total_insn</name>
<init>= <expr><call><name>BPF_STMT</name><argument_list>(<argument><expr><name>BPF_RET</name> <operator>|</operator> <name>BPF_K</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>sock_fprog</name></name></type> <name>total_fcode</name>
<init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><operator>&amp;</operator><name>total_insn</name></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>pcap_t</name> <modifier>*</modifier></type>
<name>pcap_create_interface</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ebuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl>;</decl_stmt>

<expr_stmt><expr><name>handle</name> <operator>=</operator> <call><name>pcap_create_common</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>pcap_linux</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>handle</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>activate_op</name></name> <operator>=</operator> <name>pcap_activate_linux</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>can_set_rfmon_op</name></name> <operator>=</operator> <name>pcap_can_set_rfmon_linux</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LINUX_NET_TSTAMP_H</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PACKET_TIMESTAMP</name></expr></argument>)</argument_list></call></expr></cpp:if>



<if_stmt><if>if <condition>(<expr><call><name>iface_ethtool_get_ts_info</name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>, <argument><expr><name>ebuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_close</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIOCGSTAMPNS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SO_TIMESTAMPNS</name></expr></argument>)</argument_list></call></expr></cpp:if>








<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>tstamp_precision_count</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>tstamp_precision_list</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>u_int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>tstamp_precision_list</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"malloc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pcap_close</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>tstamp_precision_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>PCAP_TSTAMP_PRECISION_MICRO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>tstamp_precision_list</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>PCAP_TSTAMP_PRECISION_NANO</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>handle</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBNL</name></expr></argument>)</argument_list></call></expr></cpp:if>
















































<function><type><specifier>static</specifier> <name>int</name></type>
<name>get_mac80211_phydev</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>phydev_path</name></decl></parameter>,
<parameter><decl><type><name>size_t</name></type> <name>phydev_max_pathlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pathstr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>bytes_read</name></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pathstr</name></expr></argument>, <argument><expr><literal type="string">"/sys/class/net/%s/phy80211"</literal></expr></argument>, <argument><expr><name>device</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"%s: Can't generate path name string for /sys/class/net device"</literal></expr></argument>,
<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bytes_read</name> <operator>=</operator> <call><name>readlink</name><argument_list>(<argument><expr><name>pathstr</name></expr></argument>, <argument><expr><name>phydev_path</name></expr></argument>, <argument><expr><name>phydev_max_pathlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bytes_read</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOENT</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>EINVAL</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pathstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"%s: Can't readlink %s"</literal></expr></argument>, <argument><expr><name>device</name></expr></argument>, <argument><expr><name>pathstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pathstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pathstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>phydev_path</name><index>[<expr><name>bytes_read</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBNL_SOCKETS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_nl_errmsg</name></cpp:macro> <cpp:value>nl_geterror</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nl_sock</name></cpp:macro> <cpp:value>nl_handle</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>nl_handle</name></name> <modifier>*</modifier></type>
<name>nl_socket_alloc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>nl_handle_alloc</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>nl_socket_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>nl_handle</name></name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>nl_handle_destroy</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_nl_errmsg</name></cpp:macro> <cpp:value>strerror</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>__genl_ctrl_alloc_cache</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>nl_handle</name></name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>nl_cache</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>cache</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>nl_cache</name></name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>genl_ctrl_alloc_cache</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><name>ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>cache</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>genl_ctrl_alloc_cache</name></cpp:macro> <cpp:value>__genl_ctrl_alloc_cache</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>nl80211_state</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>nl_sock</name></name> <modifier>*</modifier></type><name>nl_sock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>nl_cache</name></name> <modifier>*</modifier></type><name>nl_cache</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>genl_family</name></name> <modifier>*</modifier></type><name>nl80211</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>nl80211_init</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>nl80211_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>device</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>nl_sock</name></name> <operator>=</operator> <call><name>nl_socket_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>nl_sock</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"%s: failed to allocate netlink handle"</literal></expr></argument>, <argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>genl_connect</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>nl_sock</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"%s: failed to connect to generic netlink"</literal></expr></argument>, <argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out_handle_destroy</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>genl_ctrl_alloc_cache</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>nl_sock</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>nl_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"%s: failed to allocate generic netlink cache: %s"</literal></expr></argument>,
<argument><expr><name>device</name></expr></argument>, <argument><expr><call><name>get_nl_errmsg</name><argument_list>(<argument><expr><operator>-</operator><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out_handle_destroy</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>nl80211</name></name> <operator>=</operator> <call><name>genl_ctrl_search_by_name</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>nl_cache</name></name></expr></argument>, <argument><expr><literal type="string">"nl80211"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>nl80211</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"%s: nl80211 not found"</literal></expr></argument>, <argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out_cache_free</name>;</goto>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>out_cache_free</name>:</label>
<expr_stmt><expr><call><name>nl_cache_free</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>nl_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>out_handle_destroy</name>:</label>
<expr_stmt><expr><call><name>nl_socket_free</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>nl_sock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>nl80211_cleanup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>nl80211_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>genl_family_put</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>nl80211</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nl_cache_free</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>nl_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nl_socket_free</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>nl_sock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>int</name></type>
<name>del_mon_if</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sock_fd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>nl80211_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mondevice</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>add_mon_if</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sock_fd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>nl80211_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mondevice</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_linux</name></name> <modifier>*</modifier></type><name>handlep</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ifindex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>nl_msg</name></name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ifindex</name> <operator>=</operator> <call><name>iface_get_id</name><argument_list>(<argument><expr><name>sock_fd</name></expr></argument>, <argument><expr><name>device</name></expr></argument>, <argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ifindex</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>nlmsg_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>msg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"%s: failed to allocate netlink msg"</literal></expr></argument>, <argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>genlmsg_put</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>genl_family_get_id</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>nl80211</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NL80211_CMD_NEW_INTERFACE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NLA_PUT_U32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>NL80211_ATTR_IFINDEX</name></expr></argument>, <argument><expr><name>ifindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NLA_PUT_STRING</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>NL80211_ATTR_IFNAME</name></expr></argument>, <argument><expr><name>mondevice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NLA_PUT_U32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>NL80211_ATTR_IFTYPE</name></expr></argument>, <argument><expr><name>NL80211_IFTYPE_MONITOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>nl_send_auto_complete</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>nl_sock</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>HAVE_LIBNL_NLE</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <operator>-</operator><name>NLE_FAILURE</name></expr>)</condition> <block>{<block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <operator>-</operator><name>ENFILE</name></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<expr_stmt><expr><call><name>nlmsg_free</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>




<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"%s: nl_send_auto_complete failed adding %s interface: %s"</literal></expr></argument>,
<argument><expr><name>device</name></expr></argument>, <argument><expr><name>mondevice</name></expr></argument>, <argument><expr><call><name>get_nl_errmsg</name><argument_list>(<argument><expr><operator>-</operator><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nlmsg_free</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>nl_wait_for_ack</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>nl_sock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>HAVE_LIBNL_NLE</name></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <operator>-</operator><name>NLE_FAILURE</name></expr>)</condition> <block>{<block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <operator>-</operator><name>ENFILE</name></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<expr_stmt><expr><call><name>nlmsg_free</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>




<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"%s: nl_wait_for_ack failed adding %s interface: %s"</literal></expr></argument>,
<argument><expr><name>device</name></expr></argument>, <argument><expr><name>mondevice</name></expr></argument>, <argument><expr><call><name>get_nl_errmsg</name><argument_list>(<argument><expr><operator>-</operator><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nlmsg_free</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><call><name>nlmsg_free</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>mondevice</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>mondevice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>handlep</name><operator>-&gt;</operator><name>mondevice</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"strdup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>del_mon_if</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>sock_fd</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>device</name></expr></argument>, <argument><expr><name>mondevice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>

<label><name>nla_put_failure</name>:</label>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"%s: nl_put failed adding %s interface"</literal></expr></argument>,
<argument><expr><name>device</name></expr></argument>, <argument><expr><name>mondevice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nlmsg_free</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>del_mon_if</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sock_fd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>nl80211_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mondevice</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ifindex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>nl_msg</name></name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ifindex</name> <operator>=</operator> <call><name>iface_get_id</name><argument_list>(<argument><expr><name>sock_fd</name></expr></argument>, <argument><expr><name>mondevice</name></expr></argument>, <argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ifindex</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>nlmsg_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>msg</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"%s: failed to allocate netlink msg"</literal></expr></argument>, <argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>genlmsg_put</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>genl_family_get_id</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>nl80211</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NL80211_CMD_DEL_INTERFACE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NLA_PUT_U32</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>NL80211_ATTR_IFINDEX</name></expr></argument>, <argument><expr><name>ifindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>nl_send_auto_complete</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>nl_sock</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"%s: nl_send_auto_complete failed deleting %s interface: %s"</literal></expr></argument>,
<argument><expr><name>device</name></expr></argument>, <argument><expr><name>mondevice</name></expr></argument>, <argument><expr><call><name>get_nl_errmsg</name><argument_list>(<argument><expr><operator>-</operator><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nlmsg_free</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>nl_wait_for_ack</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>nl_sock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"%s: nl_wait_for_ack failed adding %s interface: %s"</literal></expr></argument>,
<argument><expr><name>device</name></expr></argument>, <argument><expr><name>mondevice</name></expr></argument>, <argument><expr><call><name>get_nl_errmsg</name><argument_list>(<argument><expr><operator>-</operator><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nlmsg_free</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><call><name>nlmsg_free</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>

<label><name>nla_put_failure</name>:</label>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"%s: nl_put failed deleting %s interface"</literal></expr></argument>,
<argument><expr><name>device</name></expr></argument>, <argument><expr><name>mondevice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nlmsg_free</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>enter_rfmon_mode_mac80211</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sock_fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>device</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_linux</name></name> <modifier>*</modifier></type><name>handlep</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>phydev_path</name><index>[<expr><name>PATH_MAX</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>nl80211_state</name></name></type> <name>nlstate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ifreq</name></name></type> <name>ifr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>n</name></decl>;</decl_stmt>




<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>get_mac80211_phydev</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>device</name></expr></argument>, <argument><expr><name>phydev_path</name></expr></argument>, <argument><expr><name>PATH_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>











<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>nl80211_init</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nlstate</name></expr></argument>, <argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>UINT_MAX</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>



<decl_stmt><decl><type><name>char</name></type> <name><name>mondevice</name><index>[<expr><literal type="number">3</literal><operator>+</operator><literal type="number">10</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>mondevice</name></expr></argument>, <argument><expr><sizeof>sizeof <name>mondevice</name></sizeof></expr></argument>, <argument><expr><literal type="string">"mon%u"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>add_mon_if</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>sock_fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nlstate</name></expr></argument>, <argument><expr><name>device</name></expr></argument>, <argument><expr><name>mondevice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>




<goto>goto <name>added</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><call><name>nl80211_cleanup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nlstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"%s: No free monN interfaces"</literal></expr></argument>, <argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nl80211_cleanup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nlstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>

<label><name>added</name>:</label>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>



delay.tv_sec = 0;
delay.tv_nsec = 500000000;
nanosleep(&amp;delay, NULL);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pcap_do_addexit</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><call><name>del_mon_if</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>sock_fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nlstate</name></expr></argument>, <argument><expr><name>device</name></expr></argument>,
<argument><expr><name><name>handlep</name><operator>-&gt;</operator><name>mondevice</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nl80211_cleanup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nlstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ifr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ifr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pcap_strlcpy</name><argument_list>(<argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>, <argument><expr><name><name>handlep</name><operator>-&gt;</operator><name>mondevice</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>sock_fd</name></expr></argument>, <argument><expr><name>SIOCGIFFLAGS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ifr</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"%s: Can't get flags for %s"</literal></expr></argument>, <argument><expr><name>device</name></expr></argument>,
<argument><expr><name><name>handlep</name><operator>-&gt;</operator><name>mondevice</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>del_mon_if</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>sock_fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nlstate</name></expr></argument>, <argument><expr><name>device</name></expr></argument>,
<argument><expr><name><name>handlep</name><operator>-&gt;</operator><name>mondevice</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nl80211_cleanup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nlstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ifr</name><operator>.</operator><name>ifr_flags</name></name> <operator>|=</operator> <name>IFF_UP</name><operator>|</operator><name>IFF_RUNNING</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>sock_fd</name></expr></argument>, <argument><expr><name>SIOCSIFFLAGS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ifr</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"%s: Can't set flags for %s"</literal></expr></argument>, <argument><expr><name>device</name></expr></argument>,
<argument><expr><name><name>handlep</name><operator>-&gt;</operator><name>mondevice</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>del_mon_if</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>sock_fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nlstate</name></expr></argument>, <argument><expr><name>device</name></expr></argument>,
<argument><expr><name><name>handlep</name><operator>-&gt;</operator><name>mondevice</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nl80211_cleanup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nlstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><call><name>nl80211_cleanup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nlstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>must_do_on_close</name></name> <operator>|=</operator> <name>MUST_DELETE_MONIF</name></expr>;</expr_stmt>




<expr_stmt><expr><call><name>pcap_add_to_pcaps_to_close</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IW_MODE_MONITOR</name></expr></argument>)</argument_list></call></expr></cpp:if>











<function><type><specifier>static</specifier> <name>int</name></type>
<name>is_bonding_device</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>device</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BOND_INFO_QUERY_IOCTL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>ifreq</name></name></type> <name>ifr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ifbond</name></type> <name>ifb</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ifr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>ifr</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pcap_strlcpy</name><argument_list>(<argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>, <argument><expr><name>device</name></expr></argument>, <argument><expr><sizeof>sizeof <name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ifb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>ifb</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ifr</name><operator>.</operator><name>ifr_data</name></name> <operator>=</operator> <operator>(</operator><name>caddr_t</name><operator>)</operator><operator>&amp;</operator><name>ifb</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>BOND_INFO_QUERY_IOCTL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ifr</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pcap_protocol</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>protocol</name></decl>;</decl_stmt>

<expr_stmt><expr><name>protocol</name> <operator>=</operator> <name><name>handle</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>protocol</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>protocol</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>protocol</name> <operator>=</operator> <name>ETH_P_ALL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>htons</name><argument_list>(<argument><expr><name>protocol</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>pcap_can_set_rfmon_linux</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBNL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name></type> <name><name>phydev_path</name><index>[<expr><name>PATH_MAX</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IW_MODE_MONITOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>sock_fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>iwreq</name></name></type> <name>ireq</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>device</name></name></expr></argument>, <argument><expr><literal type="string">"any"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBNL</name></expr></argument>)</argument_list></call></expr></cpp:if>












<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>get_mac80211_phydev</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name><name>handle</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>device</name></name></expr></argument>, <argument><expr><name>phydev_path</name></expr></argument>,
<argument><expr><name>PATH_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IW_MODE_MONITOR</name></expr></argument>)</argument_list></call></expr></cpp:if>










<expr_stmt><expr><name>sock_fd</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>PF_PACKET</name></expr></argument>, <argument><expr><name>SOCK_RAW</name></expr></argument>, <argument><expr><call><name>pcap_protocol</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sock_fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_bonding_device</name><argument_list>(<argument><expr><name>sock_fd</name></expr></argument>, <argument><expr><name><name>handle</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>sock_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><call><name>pcap_strlcpy</name><argument_list>(<argument><expr><name><name>ireq</name><operator>.</operator><name>ifr_ifrn</name><operator>.</operator><name>ifrn_name</name></name></expr></argument>, <argument><expr><name><name>handle</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>device</name></name></expr></argument>,
<argument><expr><sizeof>sizeof <name><name>ireq</name><operator>.</operator><name>ifr_ifrn</name><operator>.</operator><name>ifrn_name</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>sock_fd</name></expr></argument>, <argument><expr><name>SIOCGIWMODE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ireq</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>sock_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENODEV</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"SIOCGIWMODE failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>sock_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR_NO_SUCH_DEVICE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>sock_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>long</name> <name>int</name></type>
<name>linux_if_drops</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>if_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bufptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>nameptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>colonptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>field_to_convert</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>int</name></type> <name>dropped_pkts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><literal type="string">"/proc/net/dev"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>file</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>field_to_convert</name> <operator>!=</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"bytes"</literal></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>field_to_convert</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>







<expr_stmt><expr><name>bufptr</name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>bufptr</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bufptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><name>nameptr</name> <operator>=</operator> <name>bufptr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>colonptr</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>nameptr</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>colonptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>




<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>colonptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>if_name</name></expr></argument>, <argument><expr><name>nameptr</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>




<expr_stmt><expr><name>bufptr</name> <operator>=</operator> <name>colonptr</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<while>while <condition>(<expr><operator>--</operator><name>field_to_convert</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>bufptr</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
<block>{<block_content>





<while>while <condition>(<expr><operator>*</operator><name>bufptr</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bufptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>





<while>while <condition>(<expr><operator>*</operator><name>bufptr</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>bufptr</name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bufptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>field_to_convert</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>




<while>while <condition>(<expr><operator>*</operator><name>bufptr</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>bufptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>




<if_stmt><if>if <condition>(<expr><operator>*</operator><name>bufptr</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>dropped_pkts</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>bufptr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>dropped_pkts</name></expr>;</return>
</block_content>}</block></function>














<function><type><specifier>static</specifier> <name>void</name></type> <name>pcap_cleanup_linux</name><parameter_list>( <parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_linux</name></name> <modifier>*</modifier></type><name>handlep</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ifreq</name></name></type> <name>ifr</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBNL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>nl80211_state</name></name></type> <name>nlstate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IW_MODE_MONITOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>oldflags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>iwreq</name></name></type> <name>ireq</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>handlep</name><operator>-&gt;</operator><name>must_do_on_close</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><name><name>handlep</name><operator>-&gt;</operator><name>must_do_on_close</name></name> <operator>&amp;</operator> <name>MUST_CLEAR_PROMISC</name></expr>)</condition> <block>{<block_content>









<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ifr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ifr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pcap_strlcpy</name><argument_list>(<argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>, <argument><expr><name><name>handlep</name><operator>-&gt;</operator><name>device</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>SIOCGIFFLAGS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ifr</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"Can't restore interface %s flags (SIOCGIFFLAGS failed: %s).\n"</literal>
<literal type="string">"Please adjust manually.\n"</literal>
<literal type="string">"Hint: This can't happen with Linux &gt;= 2.2.0.\n"</literal></expr></argument>,
<argument><expr><name><name>handlep</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ifr</name><operator>.</operator><name>ifr_flags</name></name> <operator>&amp;</operator> <name>IFF_PROMISC</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name><name>ifr</name><operator>.</operator><name>ifr_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>IFF_PROMISC</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>SIOCSIFFLAGS</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>ifr</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"Can't restore interface %s flags (SIOCSIFFLAGS failed: %s).\n"</literal>
<literal type="string">"Please adjust manually.\n"</literal>
<literal type="string">"Hint: This can't happen with Linux &gt;= 2.2.0.\n"</literal></expr></argument>,
<argument><expr><name><name>handlep</name><operator>-&gt;</operator><name>device</name></name></expr></argument>,
<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBNL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>handlep</name><operator>-&gt;</operator><name>must_do_on_close</name></name> <operator>&amp;</operator> <name>MUST_DELETE_MONIF</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>nl80211_init</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nlstate</name></expr></argument>, <argument><expr><name><name>handlep</name><operator>-&gt;</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>del_mon_if</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nlstate</name></expr></argument>,
<argument><expr><name><name>handlep</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name><name>handlep</name><operator>-&gt;</operator><name>mondevice</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nl80211_cleanup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nlstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"Can't delete monitor interface %s (%s).\n"</literal>
<literal type="string">"Please delete manually.\n"</literal></expr></argument>,
<argument><expr><name><name>handlep</name><operator>-&gt;</operator><name>mondevice</name></name></expr></argument>, <argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IW_MODE_MONITOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>handlep</name><operator>-&gt;</operator><name>must_do_on_close</name></name> <operator>&amp;</operator> <name>MUST_CLEAR_RFMON</name></expr>)</condition> <block>{<block_content>















<expr_stmt><expr><name>oldflags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ifr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ifr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pcap_strlcpy</name><argument_list>(<argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>, <argument><expr><name><name>handlep</name><operator>-&gt;</operator><name>device</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>SIOCGIFFLAGS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ifr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ifr</name><operator>.</operator><name>ifr_flags</name></name> <operator>&amp;</operator> <name>IFF_UP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>oldflags</name> <operator>=</operator> <name><name>ifr</name><operator>.</operator><name>ifr_flags</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ifr</name><operator>.</operator><name>ifr_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>IFF_UP</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>SIOCSIFFLAGS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ifr</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>oldflags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><call><name>pcap_strlcpy</name><argument_list>(<argument><expr><name><name>ireq</name><operator>.</operator><name>ifr_ifrn</name><operator>.</operator><name>ifrn_name</name></name></expr></argument>, <argument><expr><name><name>handlep</name><operator>-&gt;</operator><name>device</name></name></expr></argument>,
<argument><expr><sizeof>sizeof <name><name>ireq</name><operator>.</operator><name>ifr_ifrn</name><operator>.</operator><name>ifrn_name</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ireq</name><operator>.</operator><name>u</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <name><name>handlep</name><operator>-&gt;</operator><name>oldmode</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>SIOCSIWMODE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ireq</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"Can't restore interface %s wireless mode (SIOCSIWMODE failed: %s).\n"</literal>
<literal type="string">"Please adjust manually.\n"</literal></expr></argument>,
<argument><expr><name><name>handlep</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>oldflags</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ifr</name><operator>.</operator><name>ifr_flags</name></name> <operator>=</operator> <name>oldflags</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>SIOCSIFFLAGS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ifr</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"Can't bring interface %s back up (SIOCSIFFLAGS failed: %s).\n"</literal>
<literal type="string">"Please adjust manually.\n"</literal></expr></argument>,
<argument><expr><name><name>handlep</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<expr_stmt><expr><call><name>pcap_remove_from_pcaps_to_close</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>handlep</name><operator>-&gt;</operator><name>mondevice</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>handlep</name><operator>-&gt;</operator><name>mondevice</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>mondevice</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>handlep</name><operator>-&gt;</operator><name>device</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>handlep</name><operator>-&gt;</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>device</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>pcap_cleanup_live_common</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_poll_timeout</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pcap_linux</name></name> <modifier>*</modifier></type><name>handlep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TPACKET3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>utsname</name></name></type> <name>utsname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>version_component</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>endp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>major</name></decl>, <decl><type ref="prev"/><name>minor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>broken_tpacket_v3</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>






<if_stmt><if>if <condition>(<expr><call><name>uname</name><argument_list>(<argument><expr><operator>&amp;</operator><name>utsname</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>






<expr_stmt><expr><name>version_component</name> <operator>=</operator> <name><name>utsname</name><operator>.</operator><name>release</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>major</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>version_component</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endp</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>endp</name> <operator>!=</operator> <name>version_component</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>endp</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name>version_component</name> <operator>=</operator> <name>endp</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>minor</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>version_component</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endp</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>endp</name> <operator>!=</operator> <name>version_component</name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>*</operator><name>endp</name> <operator>==</operator> <literal type="char">'.'</literal> <operator>||</operator> <operator>*</operator><name>endp</name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><name>major</name> <operator>&gt;=</operator> <literal type="number">4</literal> <operator>||</operator> <operator>(</operator><name>major</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>minor</name> <operator>&gt;=</operator> <literal type="number">19</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>broken_tpacket_v3</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>handlep</name><operator>-&gt;</operator><name>timeout</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TPACKET3</name></expr></argument>)</argument_list></call></expr></cpp:if>












<if_stmt><if>if <condition>(<expr><name><name>handlep</name><operator>-&gt;</operator><name>tp_version</name></name> <operator>==</operator> <name>TPACKET_V3</name> <operator>&amp;&amp;</operator> <name>broken_tpacket_v3</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>poll_timeout</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>poll_timeout</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>handlep</name><operator>-&gt;</operator><name>timeout</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TPACKET3</name></expr></argument>)</argument_list></call></expr></cpp:if>





<if_stmt><if>if <condition>(<expr><name><name>handlep</name><operator>-&gt;</operator><name>tp_version</name></name> <operator>==</operator> <name>TPACKET_V3</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>broken_tpacket_v3</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>poll_timeout</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>poll_timeout</name></name> <operator>=</operator> <name><name>handlep</name><operator>-&gt;</operator><name>timeout</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>





<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>poll_timeout</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>int</name></type>
<name>pcap_activate_linux</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_linux</name></name> <modifier>*</modifier></type><name>handlep</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>device</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ifreq</name></name></type> <name>ifr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>device</name> <operator>=</operator> <name><name>handle</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>device</name></name></expr>;</expr_stmt>












<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>PCAP_ERROR_NO_SUCH_DEVICE</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>









<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>snapshot</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>handle</name><operator>-&gt;</operator><name>snapshot</name></name> <operator>&gt;</operator> <name>MAXIMUM_SNAPLEN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>snapshot</name></name> <operator>=</operator> <name>MAXIMUM_SNAPLEN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>inject_op</name></name> <operator>=</operator> <name>pcap_inject_linux</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>setfilter_op</name></name> <operator>=</operator> <name>pcap_setfilter_linux</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>setdirection_op</name></name> <operator>=</operator> <name>pcap_setdirection_linux</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>set_datalink_op</name></name> <operator>=</operator> <name>pcap_set_datalink_linux</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>getnonblock_op</name></name> <operator>=</operator> <name>pcap_getnonblock_fd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>setnonblock_op</name></name> <operator>=</operator> <name>pcap_setnonblock_fd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>cleanup_op</name></name> <operator>=</operator> <name>pcap_cleanup_linux</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>read_op</name></name> <operator>=</operator> <name>pcap_read_linux</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>stats_op</name></name> <operator>=</operator> <name>pcap_stats_linux</name></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><literal type="string">"any"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>promisc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>promisc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"Promiscuous mode not supported on the \"any\" device"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>PCAP_WARNING_PROMISC_NOTSUP</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>device</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>handlep</name><operator>-&gt;</operator><name>device</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"strdup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>PCAP_ERROR</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>timeout</name></name> <operator>=</operator> <name><name>handle</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>timeout</name></name></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>promisc</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>proc_dropped</name></name> <operator>=</operator> <call><name>linux_if_drops</name><argument_list>(<argument><expr><name><name>handlep</name><operator>-&gt;</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>










<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>activate_new</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><name>status</name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>




<switch>switch <condition>(<expr><call><name>activate_mmap</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>









<expr_stmt><expr><call><name>set_poll_timeout</name><argument_list>(<argument><expr><name>handlep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>status</name></expr>;</return>

<case>case <expr><literal type="number">0</literal></expr>:</case>




<break>break;</break>

<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>







<goto>goto <name>fail</name>;</goto>
</block_content>}</block></switch>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>activate_old</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><name>status</name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>buffer_size</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_RCVBUF</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>handle</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>buffer_size</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>buffer_size</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"SO_RCVBUF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>PCAP_ERROR</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>bufsize</name></name> <operator>+</operator> <name><name>handle</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>handle</name><operator>-&gt;</operator><name>buffer</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"malloc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <name>PCAP_ERROR</name></expr>;</expr_stmt>
<goto>goto <name>fail</name>;</goto>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>selectable_fd</name></name> <operator>=</operator> <name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr>;</expr_stmt>

<return>return <expr><name>status</name></expr>;</return>

<label><name>fail</name>:</label>
<expr_stmt><expr><call><name>pcap_cleanup_linux</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>pcap_read_linux</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>max_packets</name></type> <name>_U_</name></decl></parameter>, <parameter><decl><type><name>pcap_handler</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>u_char</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>
<block>{<block_content>




<return>return <expr><call><name>pcap_read_packet</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>pcap_set_datalink_linux</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dlt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>dlt</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>linux_check_direction</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_ll</name></name> <modifier>*</modifier></type><name>sll</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_linux</name></name> <modifier>*</modifier></type><name>handlep</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sll</name><operator>-&gt;</operator><name>sll_pkttype</name></name> <operator>==</operator> <name>PACKET_OUTGOING</name></expr>)</condition> <block>{<block_content>






<if_stmt><if>if <condition>(<expr><name><name>sll</name><operator>-&gt;</operator><name>sll_ifindex</name></name> <operator>==</operator> <name><name>handlep</name><operator>-&gt;</operator><name>lo_ifindex</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>












<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>sll</name><operator>-&gt;</operator><name>sll_protocol</name></name> <operator>==</operator> <name>LINUX_SLL_P_CAN</name> <operator>||</operator>
<name><name>sll</name><operator>-&gt;</operator><name>sll_protocol</name></name> <operator>==</operator> <name>LINUX_SLL_P_CANFD</name><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>handle</name><operator>-&gt;</operator><name>direction</name></name> <operator>!=</operator> <name>PCAP_D_OUT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>direction</name></name> <operator>==</operator> <name>PCAP_D_IN</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>




<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>direction</name></name> <operator>==</operator> <name>PCAP_D_OUT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>pcap_read_packet</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>pcap_handler</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>u_char</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_linux</name></name> <modifier>*</modifier></type><name>handlep</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_char</name> <modifier>*</modifier></type><name>bp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PF_PACKET_SOCKETS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_ll</name></name></type> <name>from</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr</name></name></type> <name>from</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PACKET_AUXDATA</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_TPACKET_AUXDATA_TP_VLAN_TCI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>iovec</name></name></type> <name>iov</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>msghdr</name></name></type> <name>msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>cmsghdr</name></name> <modifier>*</modifier></type><name>cmsg</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>cmsghdr</name></name></type> <name>cmsg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><call><name>CMSG_SPACE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>tpacket_auxdata</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>cmsg_buf</name></decl>;</union>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>socklen_t</name></type> <name>fromlen</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>packet_len</name></decl>, <decl><type ref="prev"/><name>caplen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_pkthdr</name></name></type> <name>pcap_header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>bpf_aux_data</name></name></type> <name>aux_data</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PF_PACKET_SOCKETS</name></expr></argument>)</argument_list></call></expr></cpp:if>




<if_stmt><if>if <condition>(<expr><name><name>handlep</name><operator>-&gt;</operator><name>cooked</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>linktype</name></name> <operator>==</operator> <name>DLT_LINUX_SLL2</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>SLL2_HDR_LEN</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>SLL_HDR_LEN</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>




<expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
















<expr_stmt><expr><name>bp</name> <operator>=</operator> <operator>(</operator><name>u_char</name> <operator>*</operator><operator>)</operator><name><name>handle</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>handle</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PACKET_AUXDATA</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_TPACKET_AUXDATA_TP_VLAN_TCI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_name</name></name> <operator>=</operator> <operator>&amp;</operator><name>from</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_namelen</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_iov</name></name> <operator>=</operator> <operator>&amp;</operator><name>iov</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_iovlen</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_control</name></name> <operator>=</operator> <operator>&amp;</operator><name>cmsg_buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_controllen</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>cmsg_buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iov</name><operator>.</operator><name>iov_len</name></name> <operator>=</operator> <name><name>handle</name><operator>-&gt;</operator><name>bufsize</name></name> <operator>-</operator> <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iov</name><operator>.</operator><name>iov_base</name></name> <operator>=</operator> <name>bp</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<do>do <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>break_loop</name></name></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>break_loop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR_BREAK</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PACKET_AUXDATA</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_TPACKET_AUXDATA_TP_VLAN_TCI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>packet_len</name> <operator>=</operator> <call><name>recvmsg</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><name>MSG_TRUNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>fromlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>packet_len</name> <operator>=</operator> <call><name>recvfrom</name><argument_list>(
<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>bp</name> <operator>+</operator> <name>offset</name></expr></argument>,
<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>bufsize</name></name> <operator>-</operator> <name>offset</name></expr></argument>, <argument><expr><name>MSG_TRUNC</name></expr></argument>,
<argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>from</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fromlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block> while <condition>(<expr><name>packet_len</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition>;</do>



<if_stmt><if>if <condition>(<expr><name>packet_len</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>errno</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>EAGAIN</name></expr>:</case>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>ENETDOWN</name></expr>:</case>







<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"The interface went down"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>

<default>default:</default>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"recvfrom"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PF_PACKET_SOCKETS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>handlep</name><operator>-&gt;</operator><name>sock_packet</name></name></expr>)</condition> <block>{<block_content>












<if_stmt><if>if <condition>(<expr><name><name>handlep</name><operator>-&gt;</operator><name>ifindex</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>
<name><name>from</name><operator>.</operator><name>sll_ifindex</name></name> <operator>!=</operator> <name><name>handlep</name><operator>-&gt;</operator><name>ifindex</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>linux_check_direction</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>from</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PF_PACKET_SOCKETS</name></expr></argument>)</argument_list></call></expr></cpp:if>



<if_stmt><if>if <condition>(<expr><name><name>handlep</name><operator>-&gt;</operator><name>cooked</name></name></expr>)</condition> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>linktype</name></name> <operator>==</operator> <name>DLT_LINUX_SLL2</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sll2_header</name></name> <modifier>*</modifier></type><name>hdrp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>packet_len</name> <operator>+=</operator> <name>SLL2_HDR_LEN</name></expr>;</expr_stmt>

<expr_stmt><expr><name>hdrp</name> <operator>=</operator> <operator>(</operator>struct <name>sll2_header</name> <operator>*</operator><operator>)</operator><name>bp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdrp</name><operator>-&gt;</operator><name>sll2_protocol</name></name> <operator>=</operator> <name><name>from</name><operator>.</operator><name>sll_protocol</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdrp</name><operator>-&gt;</operator><name>sll2_reserved_mbz</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdrp</name><operator>-&gt;</operator><name>sll2_if_index</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>from</name><operator>.</operator><name>sll_ifindex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdrp</name><operator>-&gt;</operator><name>sll2_hatype</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>from</name><operator>.</operator><name>sll_hatype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdrp</name><operator>-&gt;</operator><name>sll2_pkttype</name></name> <operator>=</operator> <name><name>from</name><operator>.</operator><name>sll_pkttype</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdrp</name><operator>-&gt;</operator><name>sll2_halen</name></name> <operator>=</operator> <name><name>from</name><operator>.</operator><name>sll_halen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>hdrp</name><operator>-&gt;</operator><name>sll2_addr</name></name></expr></argument>, <argument><expr><name><name>from</name><operator>.</operator><name>sll_addr</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>from</name><operator>.</operator><name>sll_halen</name></name> <operator>&gt;</operator> <name>SLL_ADDRLEN</name><operator>)</operator></expr> ?</condition><then>
<expr><name>SLL_ADDRLEN</name></expr> </then><else>:
<expr><name><name>from</name><operator>.</operator><name>sll_halen</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sll_header</name></name> <modifier>*</modifier></type><name>hdrp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>packet_len</name> <operator>+=</operator> <name>SLL_HDR_LEN</name></expr>;</expr_stmt>

<expr_stmt><expr><name>hdrp</name> <operator>=</operator> <operator>(</operator>struct <name>sll_header</name> <operator>*</operator><operator>)</operator><name>bp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdrp</name><operator>-&gt;</operator><name>sll_pkttype</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>from</name><operator>.</operator><name>sll_pkttype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdrp</name><operator>-&gt;</operator><name>sll_hatype</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>from</name><operator>.</operator><name>sll_hatype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdrp</name><operator>-&gt;</operator><name>sll_halen</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>from</name><operator>.</operator><name>sll_halen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>hdrp</name><operator>-&gt;</operator><name>sll_addr</name></name></expr></argument>, <argument><expr><name><name>from</name><operator>.</operator><name>sll_addr</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>from</name><operator>.</operator><name>sll_halen</name></name> <operator>&gt;</operator> <name>SLL_ADDRLEN</name><operator>)</operator></expr> ?</condition><then>
<expr><name>SLL_ADDRLEN</name></expr> </then><else>:
<expr><name><name>from</name><operator>.</operator><name>sll_halen</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdrp</name><operator>-&gt;</operator><name>sll_protocol</name></name> <operator>=</operator> <name><name>from</name><operator>.</operator><name>sll_protocol</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name><name>aux_data</name><operator>.</operator><name>vlan_tag_present</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>aux_data</name><operator>.</operator><name>vlan_tag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PACKET_AUXDATA</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_TPACKET_AUXDATA_TP_VLAN_TCI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>handlep</name><operator>-&gt;</operator><name>vlan_offset</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>cmsg</name> <operator>=</operator> <call><name>CMSG_FIRSTHDR</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>cmsg</name></expr>;</condition> <incr><expr><name>cmsg</name> <operator>=</operator> <call><name>CMSG_NXTHDR</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><name>cmsg</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tpacket_auxdata</name></name> <modifier>*</modifier></type><name>aux</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>vlan_tag</name></name> <modifier>*</modifier></type><name>tag</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cmsg</name><operator>-&gt;</operator><name>cmsg_len</name></name> <operator>&lt;</operator> <call><name>CMSG_LEN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>tpacket_auxdata</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>||</operator>
<name><name>cmsg</name><operator>-&gt;</operator><name>cmsg_level</name></name> <operator>!=</operator> <name>SOL_PACKET</name> <operator>||</operator>
<name><name>cmsg</name><operator>-&gt;</operator><name>cmsg_type</name></name> <operator>!=</operator> <name>PACKET_AUXDATA</name></expr>)</condition> <block>{<block_content>




<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>aux</name> <operator>=</operator> <operator>(</operator>struct <name>tpacket_auxdata</name> <operator>*</operator><operator>)</operator><call><name>CMSG_DATA</name><argument_list>(<argument><expr><name>cmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VLAN_VALID</name><argument_list>(<argument><expr><name>aux</name></expr></argument>, <argument><expr><name>aux</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>




<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>u_int</name><operator>)</operator><name>packet_len</name> <operator>&gt;</operator> <name><name>iov</name><operator>.</operator><name>iov_len</name></name></expr> ?</condition><then> <expr><name><name>iov</name><operator>.</operator><name>iov_len</name></name></expr> </then><else>: <expr><operator>(</operator><name>u_int</name><operator>)</operator><name>packet_len</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <operator>(</operator><name>u_int</name><operator>)</operator><name><name>handlep</name><operator>-&gt;</operator><name>vlan_offset</name></name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>







<expr_stmt><expr><name>bp</name> <operator>-=</operator> <name>VLAN_TAG_LEN</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><name>bp</name> <operator>+</operator> <name>VLAN_TAG_LEN</name></expr></argument>, <argument><expr><name><name>handlep</name><operator>-&gt;</operator><name>vlan_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>tag</name> <operator>=</operator> <operator>(</operator>struct <name>vlan_tag</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>bp</name> <operator>+</operator> <name><name>handlep</name><operator>-&gt;</operator><name>vlan_offset</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tag</name><operator>-&gt;</operator><name>vlan_tpid</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><call><name>VLAN_TPID</name><argument_list>(<argument><expr><name>aux</name></expr></argument>, <argument><expr><name>aux</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tag</name><operator>-&gt;</operator><name>vlan_tci</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>aux</name><operator>-&gt;</operator><name>tp_vlan_tci</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<expr_stmt><expr><name><name>aux_data</name><operator>.</operator><name>vlan_tag_present</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>aux_data</name><operator>.</operator><name>vlan_tag</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>aux</name><operator>-&gt;</operator><name>tp_vlan_tci</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x0fff</literal></expr>;</expr_stmt>




<expr_stmt><expr><name>packet_len</name> <operator>+=</operator> <name>VLAN_TAG_LEN</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

































<expr_stmt><expr><name>caplen</name> <operator>=</operator> <name>packet_len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>caplen</name> <operator>&gt;</operator> <name><name>handle</name><operator>-&gt;</operator><name>snapshot</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>caplen</name> <operator>=</operator> <name><name>handle</name><operator>-&gt;</operator><name>snapshot</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>handlep</name><operator>-&gt;</operator><name>filter_in_userland</name></name> <operator>&amp;&amp;</operator> <name><name>handle</name><operator>-&gt;</operator><name>fcode</name><operator>.</operator><name>bf_insns</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>bpf_filter_with_aux_data</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fcode</name><operator>.</operator><name>bf_insns</name></name></expr></argument>, <argument><expr><name>bp</name></expr></argument>,
<argument><expr><name>packet_len</name></expr></argument>, <argument><expr><name>caplen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>aux_data</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIOCGSTAMPNS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SO_TIMESTAMPNS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>tstamp_precision</name></name> <operator>==</operator> <name>PCAP_TSTAMP_PRECISION_NANO</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>SIOCGSTAMPNS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pcap_header</name><operator>.</operator><name>ts</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"SIOCGSTAMPNS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>SIOCGSTAMP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pcap_header</name><operator>.</operator><name>ts</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"SIOCGSTAMP"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>pcap_header</name><operator>.</operator><name>caplen</name></name> <operator>=</operator> <name>caplen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pcap_header</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>packet_len</name></expr>;</expr_stmt>













































<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>packets_read</name></name><operator>++</operator></expr>;</expr_stmt>


<expr_stmt><expr><call><name>callback</name><argument_list>(<argument><expr><name>userdata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pcap_header</name></expr></argument>, <argument><expr><name>bp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>pcap_inject_linux</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_linux</name></name> <modifier>*</modifier></type><name>handlep</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PF_PACKET_SOCKETS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>handlep</name><operator>-&gt;</operator><name>sock_packet</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>handlep</name><operator>-&gt;</operator><name>ifindex</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>pcap_strlcpy</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>,
<argument><expr><literal type="string">"Sending packets isn't supported on the \"any\" device"</literal></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>handlep</name><operator>-&gt;</operator><name>cooked</name></name></expr>)</condition> <block>{<block_content>







<expr_stmt><expr><call><name>pcap_strlcpy</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>,
<argument><expr><literal type="string">"Sending packets isn't supported in cooked mode"</literal></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>send</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"send"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>









<function><type><specifier>static</specifier> <name>int</name></type>
<name>pcap_stats_linux</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>pcap_stat</name></name> <modifier>*</modifier></type><name>stats</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_linux</name></name> <modifier>*</modifier></type><name>handlep</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_TPACKET_STATS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TPACKET3</name></expr></argument>)</argument_list></call></expr></cpp:if>














<decl_stmt><decl><type><name><name>struct</name> <name>tpacket_stats_v3</name></name></type> <name>kstats</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name><name>struct</name> <name>tpacket_stats</name></name></type> <name>kstats</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>socklen_t</name></type> <name>len</name> <init>= <expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>tpacket_stats</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>long</name></type> <name>if_dropped</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>promisc</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>if_dropped</name> <operator>=</operator> <name><name>handlep</name><operator>-&gt;</operator><name>proc_dropped</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>proc_dropped</name></name> <operator>=</operator> <call><name>linux_if_drops</name><argument_list>(<argument><expr><name><name>handlep</name><operator>-&gt;</operator><name>device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>ps_ifdrop</name></name> <operator>+=</operator> <operator>(</operator><name><name>handlep</name><operator>-&gt;</operator><name>proc_dropped</name></name> <operator>-</operator> <name>if_dropped</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_TPACKET_STATS</name></expr></argument>)</argument_list></call></expr></cpp:if>



<if_stmt><if>if <condition>(<expr><call><name>getsockopt</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>SOL_PACKET</name></expr></argument>, <argument><expr><name>PACKET_STATISTICS</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>kstats</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>















































<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>ps_recv</name></name> <operator>+=</operator> <name><name>kstats</name><operator>.</operator><name>tp_packets</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>ps_drop</name></name> <operator>+=</operator> <name><name>kstats</name><operator>.</operator><name>tp_drops</name></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>stats</name> <operator>=</operator> <name><name>handlep</name><operator>-&gt;</operator><name>stat</name></name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>







<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EOPNOTSUPP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"pcap_stats"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

























<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>ps_recv</name></name> <operator>=</operator> <name><name>handlep</name><operator>-&gt;</operator><name>packets_read</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>ps_drop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>ps_ifdrop</name></name> <operator>=</operator> <name><name>handlep</name><operator>-&gt;</operator><name>stat</name><operator>.</operator><name>ps_ifdrop</name></name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>add_linux_if</name><parameter_list>(<parameter><decl><type><name>pcap_if_list_t</name> <modifier>*</modifier></type><name>devlistp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ifname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>q</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>saveq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ifreq</name></name></type> <name>ifrflags</name></decl>;</decl_stmt>




<expr_stmt><expr><name>p</name> <operator>=</operator> <name>ifname</name></expr>;</expr_stmt>
<expr_stmt><expr><name>q</name> <operator>=</operator> <operator>&amp;</operator><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <call><name>isascii</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>











<expr_stmt><expr><name>saveq</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>isascii</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name>q</name> <operator>=</operator> <name>saveq</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></while>
<expr_stmt><expr><operator>*</operator><name>q</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>




<expr_stmt><expr><call><name>pcap_strlcpy</name><argument_list>(<argument><expr><name><name>ifrflags</name><operator>.</operator><name>ifr_name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ifrflags</name><operator>.</operator><name>ifr_name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SIOCGIFFLAGS</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ifrflags</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENXIO</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>ENODEV</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"SIOCGIFFLAGS: %.*s"</literal></expr></argument>,
<argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>ifrflags</name><operator>.</operator><name>ifr_name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name><name>ifrflags</name><operator>.</operator><name>ifr_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><call><name>find_or_add_if</name><argument_list>(<argument><expr><name>devlistp</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>ifrflags</name><operator>.</operator><name>ifr_flags</name></name></expr></argument>,
<argument><expr><name>get_if_flags</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>



<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

















<function><type><specifier>static</specifier> <name>int</name></type>
<name>scan_sys_class_net</name><parameter_list>(<parameter><decl><type><name>pcap_if_list_t</name> <modifier>*</modifier></type><name>devlistp</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>DIR</name> <modifier>*</modifier></type><name>sys_class_net_d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>dirent</name></name> <modifier>*</modifier></type><name>ent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>subsystem_path</name><index>[<expr><name>PATH_MAX</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>statb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sys_class_net_d</name> <operator>=</operator> <call><name>opendir</name><argument_list>(<argument><expr><literal type="string">"/sys/class/net"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sys_class_net_d</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOENT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Can't open /sys/class/net"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>PF_UNIX</name></expr></argument>, <argument><expr><name>SOCK_RAW</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>closedir</name><argument_list>(<argument><expr><name>sys_class_net_d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>ent</name> <operator>=</operator> <call><name>readdir</name><argument_list>(<argument><expr><name>sys_class_net_d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ent</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>



<break>break;</break>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ent</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>ent</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>, <argument><expr><literal type="string">".."</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name><name>ent</name><operator>-&gt;</operator><name>d_type</name></name> <operator>==</operator> <name>DT_REG</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>








<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>subsystem_path</name></expr></argument>, <argument><expr><sizeof>sizeof <name>subsystem_path</name></sizeof></expr></argument>,
<argument><expr><literal type="string">"/sys/class/net/%s/ifindex"</literal></expr></argument>, <argument><expr><name><name>ent</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>lstat</name><argument_list>(<argument><expr><name>subsystem_path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>statb</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>










<continue>continue;</continue>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>add_linux_if</name><argument_list>(<argument><expr><name>devlistp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ent</name><operator>-&gt;</operator><name>d_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Error reading /sys/class/net"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>closedir</name><argument_list>(<argument><expr><name>sys_class_net_d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>int</name></type>
<name>scan_proc_net_dev</name><parameter_list>(<parameter><decl><type><name>pcap_if_list_t</name> <modifier>*</modifier></type><name>devlistp</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>proc_net_f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>linebuf</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>linenum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>proc_net_f</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><literal type="string">"/proc/net/dev"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>proc_net_f</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOENT</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Can't open /proc/net/dev"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>PF_UNIX</name></expr></argument>, <argument><expr><name>SOCK_RAW</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fclose</name><argument_list>(<argument><expr><name>proc_net_f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>linenum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init>
<condition><expr><call><name>fgets</name><argument_list>(<argument><expr><name>linebuf</name></expr></argument>, <argument><expr><sizeof>sizeof <name>linebuf</name></sizeof></expr></argument>, <argument><expr><name>proc_net_f</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>linenum</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>linenum</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>linebuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>




<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <call><name>isascii</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>add_linux_if</name><argument_list>(<argument><expr><name>devlistp</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><call><name>ferror</name><argument_list>(<argument><expr><name>proc_net_f</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"Error reading /proc/net/dev"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fclose</name><argument_list>(<argument><expr><name>proc_net_f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>any_descr</name><index>[]</index></name> <init>= <expr><literal type="string">"Pseudo-device that captures on all interfaces"</literal></expr></init></decl>;</decl_stmt>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>can_be_bound</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><name>name</name></type> <name>_U_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>get_if_flags</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>bpf_u_int32</name> <modifier>*</modifier></type><name>flags</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>arptype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ifreq</name></name></type> <name>ifr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ethtool_value</name></name></type> <name>info</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>flags</name> <operator>&amp;</operator> <name>PCAP_IF_LOOPBACK</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><operator>*</operator><name>flags</name> <operator>|=</operator> <name>PCAP_IF_CONNECTION_STATUS_NOT_APPLICABLE</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sock</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>SOCK_DGRAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sock</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Can't create socket to get ethtool information for %s"</literal></expr></argument>,
<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><call><name>is_wifi</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><operator>*</operator><name>flags</name> <operator>|=</operator> <name>PCAP_IF_WIRELESS</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>






<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pathstr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pathstr</name></expr></argument>, <argument><expr><literal type="string">"/sys/class/net/%s/type"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"%s: Can't generate path name string for /sys/class/net device"</literal></expr></argument>,
<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>fh</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>pathstr</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fh</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>fscanf</name><argument_list>(<argument><expr><name>fh</name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>arptype</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>



<switch>switch <condition>(<expr><name>arptype</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARPHRD_LOOPBACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>ARPHRD_LOOPBACK</name></expr>:</case>








<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pathstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>ARPHRD_IRDA</name></expr>:</case>
<case>case <expr><name>ARPHRD_IEEE80211</name></expr>:</case>
<case>case <expr><name>ARPHRD_IEEE80211_PRISM</name></expr>:</case>
<case>case <expr><name>ARPHRD_IEEE80211_RADIOTAP</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARPHRD_IEEE802154</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>ARPHRD_IEEE802154</name></expr>:</case>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARPHRD_IEEE802154_MONITOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>ARPHRD_IEEE802154_MONITOR</name></expr>:</case>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARPHRD_6LOWPAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>ARPHRD_6LOWPAN</name></expr>:</case>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<expr_stmt><expr><operator>*</operator><name>flags</name> <operator>|=</operator> <name>PCAP_IF_WIRELESS</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pathstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ETHTOOL_GLINK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ifr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ifr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pcap_strlcpy</name><argument_list>(<argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>.</operator><name>cmd</name></name> <operator>=</operator> <name>ETHTOOL_GLINK</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ifr</name><operator>.</operator><name>ifr_data</name></name> <operator>=</operator> <operator>(</operator><name>caddr_t</name><operator>)</operator><operator>&amp;</operator><name>info</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>SIOCETHTOOL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ifr</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>save_errno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>save_errno</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>EOPNOTSUPP</name></expr>:</case>
<case>case <expr><name>EINVAL</name></expr>:</case>









<expr_stmt><expr><operator>*</operator><name>flags</name> <operator>|=</operator> <name>PCAP_IF_CONNECTION_STATUS_NOT_APPLICABLE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>ENODEV</name></expr>:</case>






<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<default>default:</default>



<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>save_errno</name></expr></argument>,
<argument><expr><literal type="string">"%s: SIOCETHTOOL(ETHTOOL_GLINK) ioctl failed"</literal></expr></argument>,
<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>data</name></name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><operator>*</operator><name>flags</name> <operator>|=</operator> <name>PCAP_IF_CONNECTION_STATUS_CONNECTED</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>



<expr_stmt><expr><operator>*</operator><name>flags</name> <operator>|=</operator> <name>PCAP_IF_CONNECTION_STATUS_DISCONNECTED</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>pcap_platform_finddevs</name><parameter_list>(<parameter><decl><type><name>pcap_if_list_t</name> <modifier>*</modifier></type><name>devlistp</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><call><name>pcap_findalldevs_interfaces</name><argument_list>(<argument><expr><name>devlistp</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>can_be_bound</name></expr></argument>,
<argument><expr><name>get_if_flags</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>









<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>scan_sys_class_net</name><argument_list>(<argument><expr><name>devlistp</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><call><name>scan_proc_net_dev</name><argument_list>(<argument><expr><name>devlistp</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><call><name>add_dev</name><argument_list>(<argument><expr><name>devlistp</name></expr></argument>, <argument><expr><literal type="string">"any"</literal></expr></argument>,
<argument><expr><name>PCAP_IF_UP</name><operator>|</operator><name>PCAP_IF_RUNNING</name><operator>|</operator><name>PCAP_IF_CONNECTION_STATUS_NOT_APPLICABLE</name></expr></argument>,
<argument><expr><name>any_descr</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>pcap_setfilter_linux_common</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>bpf_program</name></name> <modifier>*</modifier></type><name>filter</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>is_mmapped</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_linux</name></name> <modifier>*</modifier></type><name>handlep</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SO_ATTACH_FILTER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>sock_fprog</name></name></type> <name>fcode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>can_filter_in_kernel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>handle</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>filter</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_strlcpy</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><literal type="string">"setfilter: No filter specified"</literal></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>handlep</name> <operator>=</operator> <name><name>handle</name><operator>-&gt;</operator><name>priv</name></name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><call><name>install_bpf_program</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>





<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>filter_in_userland</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SO_ATTACH_FILTER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USHRT_MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>fcode</name><operator>.</operator><name>bf_len</name></name> <operator>&gt;</operator> <name>USHRT_MAX</name></expr>)</condition> <block>{<block_content>






<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Warning: Filter too complex for kernel\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fcode</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fcode</name><operator>.</operator><name>filter</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>can_filter_in_kernel</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>














<switch>switch <condition>(<expr><call><name>fix_program</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fcode</name></expr></argument>, <argument><expr><name>is_mmapped</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>
<default>default:</default>





<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

<case>case <expr><literal type="number">0</literal></expr>:</case>




<expr_stmt><expr><name>can_filter_in_kernel</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>



<expr_stmt><expr><name>can_filter_in_kernel</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></else></if_stmt>

























<if_stmt><if>if <condition>(<expr><name>can_filter_in_kernel</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>set_kernel_filter</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fcode</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>




<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>filter_in_userland</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>err</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>





<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>ENOPROTOOPT</name> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>EOPNOTSUPP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"Warning: Kernel filter failed: %s\n"</literal></expr></argument>,
<argument><expr><call><name>pcap_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>









<if_stmt><if>if <condition>(<expr><name><name>handlep</name><operator>-&gt;</operator><name>filter_in_userland</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>reset_kernel_filter</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"can't remove kernel filter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>fcode</name><operator>.</operator><name>filter</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>fcode</name><operator>.</operator><name>filter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <operator>-</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>pcap_setfilter_linux</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>bpf_program</name></name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>pcap_setfilter_linux_common</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>pcap_setdirection_linux</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>pcap_direction_t</name></type> <name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PF_PACKET_SOCKETS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_linux</name></name> <modifier>*</modifier></type><name>handlep</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>handlep</name><operator>-&gt;</operator><name>sock_packet</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>direction</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"Setting direction is not supported on SOCK_PACKET sockets"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>is_wifi</name><parameter_list>(<parameter><decl><type><name>int</name> <name>sock_fd</name></type>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>IW_MODE_MONITOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>_U_</name></decl></parameter>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>device</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pathstr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>statb</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IW_MODE_MONITOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name></type> <name><name>errbuf</name><index>[<expr><name>PCAP_ERRBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<if_stmt><if>if <condition>(<expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pathstr</name></expr></argument>, <argument><expr><literal type="string">"/sys/class/net/%s/wireless"</literal></expr></argument>, <argument><expr><name>device</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>



<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name>pathstr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>statb</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pathstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pathstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IW_MODE_MONITOR</name></expr></argument>)</argument_list></call></expr></cpp:if>




<if_stmt><if>if <condition>(<expr><call><name>has_wext</name><argument_list>(<argument><expr><name>sock_fd</name></expr></argument>, <argument><expr><name>device</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>




<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



















<function><type><specifier>static</specifier> <name>void</name></type> <name>map_arphrd_to_dlt</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sock_fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>arptype</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cooked_ok</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>cdma_rmnet</name><index>[]</index></name> <init>= <expr><literal type="string">"cdma_rmnet"</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>arptype</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ARPHRD_ETHER</name></expr>:</case>












<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><name>cdma_rmnet</name></expr></argument>, <argument><expr><sizeof>sizeof <name>cdma_rmnet</name></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_RAW</name></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>



















<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_wifi</name><argument_list>(<argument><expr><name>sock_fd</name></expr></argument>, <argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>dlt_list</name></name> <operator>=</operator> <operator>(</operator><name>u_int</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u_int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>dlt_list</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>dlt_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>DLT_EN10MB</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>dlt_list</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>DLT_DOCSIS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>dlt_count</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<case>case <expr><name>ARPHRD_METRICOM</name></expr>:</case>
<case>case <expr><name>ARPHRD_LOOPBACK</name></expr>:</case>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_EN10MB</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ARPHRD_EETHER</name></expr>:</case>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_EN3MB</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ARPHRD_AX25</name></expr>:</case>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_AX25_KISS</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ARPHRD_PRONET</name></expr>:</case>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_PRONET</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ARPHRD_CHAOS</name></expr>:</case>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_CHAOS</name></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARPHRD_CAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARPHRD_CAN</name></cpp:macro> <cpp:value>280</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>ARPHRD_CAN</name></expr>:</case>







<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_LINUX_SLL</name></expr>;</expr_stmt>
<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARPHRD_IEEE802_TR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARPHRD_IEEE802_TR</name></cpp:macro> <cpp:value>800</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>ARPHRD_IEEE802_TR</name></expr>:</case>
<case>case <expr><name>ARPHRD_IEEE802</name></expr>:</case>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_IEEE802</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ARPHRD_ARCNET</name></expr>:</case>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_ARCNET_LINUX</name></expr>;</expr_stmt>
<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARPHRD_FDDI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARPHRD_FDDI</name></cpp:macro> <cpp:value>774</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>ARPHRD_FDDI</name></expr>:</case>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_FDDI</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARPHRD_ATM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARPHRD_ATM</name></cpp:macro> <cpp:value>19</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>ARPHRD_ATM</name></expr>:</case>




































<if_stmt><if>if <condition>(<expr><name>cooked_ok</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_LINUX_SLL</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARPHRD_IEEE80211</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARPHRD_IEEE80211</name></cpp:macro> <cpp:value>801</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>ARPHRD_IEEE80211</name></expr>:</case>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_IEEE802_11</name></expr>;</expr_stmt>
<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARPHRD_IEEE80211_PRISM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARPHRD_IEEE80211_PRISM</name></cpp:macro> <cpp:value>802</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>ARPHRD_IEEE80211_PRISM</name></expr>:</case>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_PRISM_HEADER</name></expr>;</expr_stmt>
<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARPHRD_IEEE80211_RADIOTAP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARPHRD_IEEE80211_RADIOTAP</name></cpp:macro> <cpp:value>803</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>ARPHRD_IEEE80211_RADIOTAP</name></expr>:</case>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_IEEE802_11_RADIO</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ARPHRD_PPP</name></expr>:</case>



















<if_stmt><if>if <condition>(<expr><name>cooked_ok</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_LINUX_SLL</name></expr>;</expr_stmt></block_content></block></if>
<else>else <block>{<block_content>
















<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_RAW</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARPHRD_CISCO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARPHRD_CISCO</name></cpp:macro> <cpp:value>513</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>ARPHRD_CISCO</name></expr>:</case>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_C_HDLC</name></expr>;</expr_stmt>
<break>break;</break>



<case>case <expr><name>ARPHRD_TUNNEL</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARPHRD_SIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARPHRD_SIT</name></cpp:macro> <cpp:value>776</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>ARPHRD_SIT</name></expr>:</case>
<case>case <expr><name>ARPHRD_CSLIP</name></expr>:</case>
<case>case <expr><name>ARPHRD_SLIP6</name></expr>:</case>
<case>case <expr><name>ARPHRD_CSLIP6</name></expr>:</case>
<case>case <expr><name>ARPHRD_ADAPT</name></expr>:</case>
<case>case <expr><name>ARPHRD_SLIP</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARPHRD_RAWHDLC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARPHRD_RAWHDLC</name></cpp:macro> <cpp:value>518</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>ARPHRD_RAWHDLC</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARPHRD_DLCI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARPHRD_DLCI</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>ARPHRD_DLCI</name></expr>:</case>




<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_RAW</name></expr>;</expr_stmt>
<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARPHRD_FRAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARPHRD_FRAD</name></cpp:macro> <cpp:value>770</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>ARPHRD_FRAD</name></expr>:</case>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_FRELAY</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>ARPHRD_LOCALTLK</name></expr>:</case>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_LTALK</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">18</literal></expr>:</case>















<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_IP_OVER_FC</name></expr>;</expr_stmt>
<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARPHRD_FCPP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARPHRD_FCPP</name></cpp:macro> <cpp:value>784</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>ARPHRD_FCPP</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARPHRD_FCAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARPHRD_FCAL</name></cpp:macro> <cpp:value>785</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>ARPHRD_FCAL</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARPHRD_FCPL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARPHRD_FCPL</name></cpp:macro> <cpp:value>786</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>ARPHRD_FCPL</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARPHRD_FCFABRIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARPHRD_FCFABRIC</name></cpp:macro> <cpp:value>787</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>ARPHRD_FCFABRIC</name></expr>:</case>














































<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>dlt_list</name></name> <operator>=</operator> <operator>(</operator><name>u_int</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u_int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>dlt_list</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>dlt_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>DLT_FC_2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>dlt_list</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>DLT_FC_2_WITH_FRAME_DELIMS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>dlt_list</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>DLT_IP_OVER_FC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>dlt_count</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_FC_2</name></expr>;</expr_stmt>
<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARPHRD_IRDA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARPHRD_IRDA</name></cpp:macro> <cpp:value>783</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>ARPHRD_IRDA</name></expr>:</case>

<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_LINUX_IRDA</name></expr>;</expr_stmt>





<break>break;</break>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARPHRD_LAPD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARPHRD_LAPD</name></cpp:macro> <cpp:value>8445</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>ARPHRD_LAPD</name></expr>:</case>

<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_LINUX_LAPD</name></expr>;</expr_stmt>
<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARPHRD_NONE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARPHRD_NONE</name></cpp:macro> <cpp:value>0xFFFE</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>ARPHRD_NONE</name></expr>:</case>




<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_RAW</name></expr>;</expr_stmt>
<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARPHRD_IEEE802154</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARPHRD_IEEE802154</name></cpp:macro> <cpp:value>804</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>ARPHRD_IEEE802154</name></expr>:</case>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_IEEE802_15_4_NOFCS</name></expr>;</expr_stmt>
<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARPHRD_NETLINK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARPHRD_NETLINK</name></cpp:macro> <cpp:value>824</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>ARPHRD_NETLINK</name></expr>:</case>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_NETLINK</name></expr>;</expr_stmt>








<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ARPHRD_VSOCKMON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARPHRD_VSOCKMON</name></cpp:macro> <cpp:value>826</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>ARPHRD_VSOCKMON</name></expr>:</case>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_VSOCK</name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PACKET_RESERVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_dlt_list_cooked</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sock_fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>socklen_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>tp_reserve</name></decl>;</decl_stmt>





<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tp_reserve</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getsockopt</name><argument_list>(<argument><expr><name>sock_fd</name></expr></argument>, <argument><expr><name>SOL_PACKET</name></expr></argument>, <argument><expr><name>PACKET_RESERVE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tp_reserve</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>dlt_list</name></name> <operator>=</operator> <operator>(</operator><name>u_int</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u_int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>dlt_list</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>dlt_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>DLT_LINUX_SLL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>dlt_list</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>DLT_LINUX_SLL2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>dlt_count</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_dlt_list_cooked</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier><name>handle</name></type> <name>_U_</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>sock_fd</name></type> <name>_U_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>








<function><type><specifier>static</specifier> <name>int</name></type>
<name>activate_new</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PF_PACKET_SOCKETS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_linux</name></name> <modifier>*</modifier></type><name>handlep</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>device</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>device</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_any_device</name> <init>= <expr><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><literal type="string">"any"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>protocol</name> <init>= <expr><call><name>pcap_protocol</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sock_fd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>arptype</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PACKET_AUXDATA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>packet_mreq</name></name></type> <name>mr</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SO_BPF_EXTENSIONS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SKF_AD_VLAN_TAG_PRESENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>bpf_extensions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>socklen_t</name></type> <name>len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>bpf_extensions</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<expr_stmt><expr><name>sock_fd</name> <operator>=</operator> <ternary><condition><expr><name>is_any_device</name></expr> ?</condition><then>
<expr><call><name>socket</name><argument_list>(<argument><expr><name>PF_PACKET</name></expr></argument>, <argument><expr><name>SOCK_DGRAM</name></expr></argument>, <argument><expr><name>protocol</name></expr></argument>)</argument_list></call></expr> </then><else>:
<expr><call><name>socket</name><argument_list>(<argument><expr><name>PF_PACKET</name></expr></argument>, <argument><expr><name>SOCK_RAW</name></expr></argument>, <argument><expr><name>protocol</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sock_fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINVAL</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>EAFNOSUPPORT</name></expr>)</condition> <block>{<block_content>




<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EPERM</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>EACCES</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>PCAP_ERROR_PERM_DENIED</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>



<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>PCAP_ERROR</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>sock_packet</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>












<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>lo_ifindex</name></name> <operator>=</operator> <call><name>iface_get_id</name><argument_list>(<argument><expr><name>sock_fd</name></expr></argument>, <argument><expr><literal type="string">"lo"</literal></expr></argument>, <argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_any_device</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>cooked</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>rfmon</name></name></expr>)</condition> <block>{<block_content>






<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>enter_rfmon_mode</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>sock_fd</name></expr></argument>, <argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>sock_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>sock_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR_RFMON_NOTSUP</name></expr>;</return>
</block_content>}</block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><name><name>handlep</name><operator>-&gt;</operator><name>mondevice</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>device</name> <operator>=</operator> <name><name>handlep</name><operator>-&gt;</operator><name>mondevice</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>arptype</name> <operator>=</operator> <call><name>iface_get_arptype</name><argument_list>(<argument><expr><name>sock_fd</name></expr></argument>, <argument><expr><name>device</name></expr></argument>, <argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>arptype</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>sock_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>arptype</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>map_arphrd_to_dlt</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>sock_fd</name></expr></argument>, <argument><expr><name>arptype</name></expr></argument>, <argument><expr><name>device</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>linktype</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator>
<name><name>handle</name><operator>-&gt;</operator><name>linktype</name></name> <operator>==</operator> <name>DLT_LINUX_SLL</name> <operator>||</operator>
<name><name>handle</name><operator>-&gt;</operator><name>linktype</name></name> <operator>==</operator> <name>DLT_LINUX_IRDA</name> <operator>||</operator>
<name><name>handle</name><operator>-&gt;</operator><name>linktype</name></name> <operator>==</operator> <name>DLT_LINUX_LAPD</name> <operator>||</operator>
<name><name>handle</name><operator>-&gt;</operator><name>linktype</name></name> <operator>==</operator> <name>DLT_NETLINK</name> <operator>||</operator>
<operator>(</operator><name><name>handle</name><operator>-&gt;</operator><name>linktype</name></name> <operator>==</operator> <name>DLT_EN10MB</name> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"isdn"</literal></expr></argument>, <argument><expr><name>device</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"isdY"</literal></expr></argument>, <argument><expr><name>device</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>









<if_stmt><if>if <condition>(<expr><call><name>close</name><argument_list>(<argument><expr><name>sock_fd</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"close"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>sock_fd</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>PF_PACKET</name></expr></argument>, <argument><expr><name>SOCK_DGRAM</name></expr></argument>, <argument><expr><name>protocol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sock_fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EPERM</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>EACCES</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>PCAP_ERROR_PERM_DENIED</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>



<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>PCAP_ERROR</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>cooked</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>dlt_list</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>dlt_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>dlt_list</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>dlt_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_dlt_list_cooked</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>sock_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>linktype</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>






<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"arptype %d not "</literal>
<literal type="string">"supported by libpcap - "</literal>
<literal type="string">"falling back to cooked "</literal>
<literal type="string">"socket"</literal></expr></argument>,
<argument><expr><name>arptype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>






<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>linktype</name></name> <operator>!=</operator> <name>DLT_LINUX_IRDA</name> <operator>&amp;&amp;</operator>
<name><name>handle</name><operator>-&gt;</operator><name>linktype</name></name> <operator>!=</operator> <name>DLT_LINUX_LAPD</name> <operator>&amp;&amp;</operator>
<name><name>handle</name><operator>-&gt;</operator><name>linktype</name></name> <operator>!=</operator> <name>DLT_NETLINK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_LINUX_SLL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>ifindex</name></name> <operator>=</operator> <call><name>iface_get_id</name><argument_list>(<argument><expr><name>sock_fd</name></expr></argument>, <argument><expr><name>device</name></expr></argument>,
<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>handlep</name><operator>-&gt;</operator><name>ifindex</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>sock_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>iface_bind</name><argument_list>(<argument><expr><name>sock_fd</name></expr></argument>, <argument><expr><name><name>handlep</name><operator>-&gt;</operator><name>ifindex</name></name></expr></argument>,
<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>protocol</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>sock_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>rfmon</name></name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>sock_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR_RFMON_NOTSUP</name></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>cooked</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <name>DLT_LINUX_SLL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>dlt_list</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>dlt_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_dlt_list_cooked</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>sock_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>








<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>ifindex</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>























<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_any_device</name> <operator>&amp;&amp;</operator> <name><name>handle</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>promisc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mr</name><operator>.</operator><name>mr_ifindex</name></name> <operator>=</operator> <name><name>handlep</name><operator>-&gt;</operator><name>ifindex</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mr</name><operator>.</operator><name>mr_type</name></name> <operator>=</operator> <name>PACKET_MR_PROMISC</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>sock_fd</name></expr></argument>, <argument><expr><name>SOL_PACKET</name></expr></argument>, <argument><expr><name>PACKET_ADD_MEMBERSHIP</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"setsockopt (PACKET_ADD_MEMBERSHIP)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>sock_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PACKET_AUXDATA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>sock_fd</name></expr></argument>, <argument><expr><name>SOL_PACKET</name></expr></argument>, <argument><expr><name>PACKET_AUXDATA</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>ENOPROTOOPT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"setsockopt (PACKET_AUXDATA)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>sock_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <name>VLAN_TAG_LEN</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



















<if_stmt><if>if <condition>(<expr><name><name>handlep</name><operator>-&gt;</operator><name>cooked</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>snapshot</name></name> <operator>&lt;</operator> <name>SLL2_HDR_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>snapshot</name></name> <operator>=</operator> <name>SLL2_HDR_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>bufsize</name></name> <operator>=</operator> <name><name>handle</name><operator>-&gt;</operator><name>snapshot</name></name></expr>;</expr_stmt>





<switch>switch <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>linktype</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>DLT_EN10MB</name></expr>:</case>




<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>vlan_offset</name></name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>ETH_ALEN</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>DLT_LINUX_SLL</name></expr>:</case>




<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>vlan_offset</name></name> <operator>=</operator> <name>SLL_HDR_LEN</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>vlan_offset</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIOCGSTAMPNS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SO_TIMESTAMPNS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>tstamp_precision</name></name> <operator>==</operator> <name>PCAP_TSTAMP_PRECISION_NANO</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nsec_tstamps</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>sock_fd</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_TIMESTAMPNS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nsec_tstamps</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nsec_tstamps</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"setsockopt: unable to set SO_TIMESTAMPNS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>sock_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name>sock_fd</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SO_BPF_EXTENSIONS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SKF_AD_VLAN_TAG_PRESENT</name></expr></argument>)</argument_list></call></expr></cpp:if>





<if_stmt><if>if <condition>(<expr><call><name>getsockopt</name><argument_list>(<argument><expr><name>sock_fd</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_BPF_EXTENSIONS</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>bpf_extensions</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>bpf_extensions</name> <operator>&gt;=</operator> <name>SKF_AD_VLAN_TAG_PRESENT</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>bpf_codegen_flags</name></name> <operator>|=</operator> <name>BPF_SPECIAL_VLAN_HANDLING</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">1</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>pcap_strlcpy</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>,
<argument><expr><literal type="string">"New packet capturing interface not supported by build "</literal>
<literal type="string">"environment"</literal></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PACKET_RING</name></expr></argument>)</argument_list></call></expr></cpp:if>












<function><type><specifier>static</specifier> <name>int</name></type>
<name>activate_mmap</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_linux</name></name> <modifier>*</modifier></type><name>handlep</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>





<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>oneshot_buffer</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>snapshot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>handlep</name><operator>-&gt;</operator><name>oneshot_buffer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"can't allocate oneshot buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>status</name> <operator>=</operator> <name>PCAP_ERROR</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>buffer_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>buffer_size</name></name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>prepare_tpacket_socket</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>handlep</name><operator>-&gt;</operator><name>oneshot_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>status</name> <operator>=</operator> <name>PCAP_ERROR</name></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>create_ring</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>handlep</name><operator>-&gt;</operator><name>oneshot_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>handlep</name><operator>-&gt;</operator><name>oneshot_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>











<switch>switch <condition>(<expr><name><name>handlep</name><operator>-&gt;</operator><name>tp_version</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>TPACKET_V1</name></expr>:</case>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>read_op</name></name> <operator>=</operator> <name>pcap_read_linux_mmap_v1</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>TPACKET_V1_64</name></expr>:</case>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>read_op</name></name> <operator>=</operator> <name>pcap_read_linux_mmap_v1_64</name></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TPACKET2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>TPACKET_V2</name></expr>:</case>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>read_op</name></name> <operator>=</operator> <name>pcap_read_linux_mmap_v2</name></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TPACKET3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>TPACKET_V3</name></expr>:</case>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>read_op</name></name> <operator>=</operator> <name>pcap_read_linux_mmap_v3</name></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>cleanup_op</name></name> <operator>=</operator> <name>pcap_cleanup_linux_mmap</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>setfilter_op</name></name> <operator>=</operator> <name>pcap_setfilter_linux_mmap</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>setnonblock_op</name></name> <operator>=</operator> <name>pcap_setnonblock_mmap</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>getnonblock_op</name></name> <operator>=</operator> <name>pcap_getnonblock_mmap</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>oneshot_callback</name></name> <operator>=</operator> <name>pcap_oneshot_mmap</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>selectable_fd</name></name> <operator>=</operator> <name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>activate_mmap</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier><name>handle</name></type> <name>_U_</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier><name>status</name></type> <name>_U_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PACKET_RING</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TPACKET2</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TPACKET3</name></expr></argument>)</argument_list></call></expr></cpp:if>







<function><type><specifier>static</specifier> <name>int</name></type>
<name>init_tpacket</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>version_str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_linux</name></name> <modifier>*</modifier></type><name>handlep</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><name>version</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>socklen_t</name></type> <name>len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>








<if_stmt><if>if <condition>(<expr><call><name>getsockopt</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>SOL_PACKET</name></expr></argument>, <argument><expr><name>PACKET_HDRLEN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOPROTOOPT</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>EINVAL</name></expr>)</condition> <block>{<block_content>






<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"can't get %s header len on packet socket"</literal></expr></argument>,
<argument><expr><name>version_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>tp_hdrlen</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <name>version</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>SOL_PACKET</name></expr></argument>, <argument><expr><name>PACKET_VERSION</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"can't activate %s on packet socket"</literal></expr></argument>, <argument><expr><name>version_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>tp_version</name></name> <operator>=</operator> <name>version</name></expr>;</expr_stmt>





<expr_stmt><expr><name>val</name> <operator>=</operator> <name>VLAN_TAG_LEN</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>SOL_PACKET</name></expr></argument>, <argument><expr><name>PACKET_RESERVE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"can't set up reserve on packet socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISA_64_BIT</name></cpp:macro> <cpp:value>"x86_64"</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ppc__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISA_64_BIT</name></cpp:macro> <cpp:value>"ppc64"</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__sparc__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISA_64_BIT</name></cpp:macro> <cpp:value>"sparc64"</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__s390__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISA_64_BIT</name></cpp:macro> <cpp:value>"s390x"</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__mips__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISA_64_BIT</name></cpp:macro> <cpp:value>"mips64"</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__hppa__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISA_64_BIT</name></cpp:macro> <cpp:value>"parisc64"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>










<function><type><specifier>static</specifier> <name>int</name></type>
<name>prepare_tpacket_socket</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_linux</name></name> <modifier>*</modifier></type><name>handlep</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TPACKET2</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TPACKET3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TPACKET3</name></expr></argument>)</argument_list></call></expr></cpp:if>











<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>handle</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>immediate</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>init_tpacket</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>TPACKET_V3</name></expr></argument>, <argument><expr><literal type="string">"TPACKET_V3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>




<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TPACKET2</name></expr></argument>)</argument_list></call></expr></cpp:if>



<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>init_tpacket</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>TPACKET_V2</name></expr></argument>, <argument><expr><literal type="string">"TPACKET_V2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>




<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>tp_version</name></name> <operator>=</operator> <name>TPACKET_V1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>tp_hdrlen</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>tpacket_hdr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ISA_64_BIT</name></expr></argument>)</argument_list></call></expr></cpp:if>








<if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>



<decl_stmt><decl><type><name><name>struct</name> <name>utsname</name></name></type> <name>utsname</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>uname</name><argument_list>(<argument><expr><operator>&amp;</operator><name>utsname</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"uname failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>utsname</name><operator>.</operator><name>machine</name></name></expr></argument>, <argument><expr><name>ISA_64_BIT</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>








<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>tp_version</name></name> <operator>=</operator> <name>TPACKET_V1_64</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>tp_hdrlen</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>tpacket_hdr_64</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a)&gt;(b)?(a):(b))</cpp:value></cpp:define>













<function><type><specifier>static</specifier> <name>int</name></type>
<name>create_ring</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_linux</name></name> <modifier>*</modifier></type><name>handlep</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>frames_per_block</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TPACKET3</name></expr></argument>)</argument_list></call></expr></cpp:if>





<decl_stmt><decl><type><name><name>struct</name> <name>tpacket_req3</name></name></type> <name>req</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name><name>struct</name> <name>tpacket_req</name></name></type> <name>req</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>socklen_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sk_type</name></decl>, <decl><type ref="prev"/><name>tp_reserve</name></decl>, <decl><type ref="prev"/><name>maclen</name></decl>, <decl><type ref="prev"/><name>tp_hdrlen</name></decl>, <decl><type ref="prev"/><name>netoff</name></decl>, <decl><type ref="prev"/><name>macoff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>frame_size</name></decl>;</decl_stmt>




<expr_stmt><expr><operator>*</operator><name>status</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>handlep</name><operator>-&gt;</operator><name>tp_version</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>TPACKET_V1</name></expr>:</case>
<case>case <expr><name>TPACKET_V1_64</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TPACKET2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>TPACKET_V2</name></expr>:</case>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>































<expr_stmt><expr><name>frame_size</name> <operator>=</operator> <name><name>handle</name><operator>-&gt;</operator><name>snapshot</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>linktype</name></name> <operator>==</operator> <name>DLT_EN10MB</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>max_frame_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mtu</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offload</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mtu</name> <operator>=</operator> <call><name>iface_get_mtu</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>handle</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>device</name></name></expr></argument>,
<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mtu</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>status</name> <operator>=</operator> <name>PCAP_ERROR</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>offload</name> <operator>=</operator> <call><name>iface_get_offload</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>offload</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>status</name> <operator>=</operator> <name>PCAP_ERROR</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>offload</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>max_frame_len</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name>mtu</name></expr></argument>, <argument><expr><literal type="number">65535</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>max_frame_len</name> <operator>=</operator> <name>mtu</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>max_frame_len</name> <operator>+=</operator> <literal type="number">18</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>frame_size</name> <operator>&gt;</operator> <name>max_frame_len</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>frame_size</name> <operator>=</operator> <name>max_frame_len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sk_type</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getsockopt</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_TYPE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sk_type</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"getsockopt (SO_TYPE)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>status</name> <operator>=</operator> <name>PCAP_ERROR</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PACKET_RESERVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tp_reserve</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getsockopt</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>SOL_PACKET</name></expr></argument>, <argument><expr><name>PACKET_RESERVE</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>tp_reserve</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>ENOPROTOOPT</name></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"getsockopt (PACKET_RESERVE)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>status</name> <operator>=</operator> <name>PCAP_ERROR</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name>tp_reserve</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>














<expr_stmt><expr><name>tp_reserve</name> <operator>+=</operator> <name>SLL2_HDR_LEN</name> <operator>-</operator> <name>SLL_HDR_LEN</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tp_reserve</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>SOL_PACKET</name></expr></argument>, <argument><expr><name>PACKET_RESERVE</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>tp_reserve</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"setsockopt (PACKET_RESERVE)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>status</name> <operator>=</operator> <name>PCAP_ERROR</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>





<expr_stmt><expr><name>tp_reserve</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>maclen</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>sk_type</name> <operator>==</operator> <name>SOCK_DGRAM</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>MAX_LINKHEADER_SIZE</name></expr></else></ternary></expr>;</expr_stmt>














<expr_stmt><expr><name>tp_hdrlen</name> <operator>=</operator> <call><name>TPACKET_ALIGN</name><argument_list>(<argument><expr><name><name>handlep</name><operator>-&gt;</operator><name>tp_hdrlen</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_ll</name></expr></argument>)</argument_list></sizeof></expr> ;</expr_stmt>
<expr_stmt><expr><name>netoff</name> <operator>=</operator> <call><name>TPACKET_ALIGN</name><argument_list>(<argument><expr><name>tp_hdrlen</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>maclen</name> <operator>&lt;</operator> <literal type="number">16</literal></expr> ?</condition><then> <expr><literal type="number">16</literal></expr> </then><else>: <expr><name>maclen</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call> <operator>+</operator> <name>tp_reserve</name></expr>;</expr_stmt>











<expr_stmt><expr><name>macoff</name> <operator>=</operator> <name>netoff</name> <operator>-</operator> <name>maclen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name><operator>.</operator><name>tp_frame_size</name></name> <operator>=</operator> <call><name>TPACKET_ALIGN</name><argument_list>(<argument><expr><name>macoff</name> <operator>+</operator> <name>frame_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<expr_stmt><expr><name><name>req</name><operator>.</operator><name>tp_frame_nr</name></name> <operator>=</operator> <operator>(</operator><name><name>handle</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>buffer_size</name></name> <operator>+</operator> <name><name>req</name><operator>.</operator><name>tp_frame_size</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>/</operator><name><name>req</name><operator>.</operator><name>tp_frame_size</name></name></expr>;</expr_stmt>
<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TPACKET3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>TPACKET_V3</name></expr>:</case>



<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tp_reserve</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getsockopt</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>SOL_PACKET</name></expr></argument>, <argument><expr><name>PACKET_RESERVE</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>tp_reserve</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>






<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"getsockopt (PACKET_RESERVE)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>status</name> <operator>=</operator> <name>PCAP_ERROR</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>














<expr_stmt><expr><name>tp_reserve</name> <operator>+=</operator> <name>SLL2_HDR_LEN</name> <operator>-</operator> <name>SLL_HDR_LEN</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tp_reserve</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>SOL_PACKET</name></expr></argument>, <argument><expr><name>PACKET_RESERVE</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>tp_reserve</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"setsockopt (PACKET_RESERVE)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>status</name> <operator>=</operator> <name>PCAP_ERROR</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>







<expr_stmt><expr><name><name>req</name><operator>.</operator><name>tp_frame_size</name></name> <operator>=</operator> <name>MAXIMUM_SNAPLEN</name></expr>;</expr_stmt>







<expr_stmt><expr><name><name>req</name><operator>.</operator><name>tp_frame_nr</name></name> <operator>=</operator> <operator>(</operator><name><name>handle</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>buffer_size</name></name> <operator>+</operator> <name><name>req</name><operator>.</operator><name>tp_frame_size</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>/</operator><name><name>req</name><operator>.</operator><name>tp_frame_size</name></name></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<default>default:</default>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"Internal error: unknown TPACKET_ value %u"</literal></expr></argument>,
<argument><expr><name><name>handlep</name><operator>-&gt;</operator><name>tp_version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>status</name> <operator>=</operator> <name>PCAP_ERROR</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>





<expr_stmt><expr><name><name>req</name><operator>.</operator><name>tp_block_size</name></name> <operator>=</operator> <call><name>getpagesize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>req</name><operator>.</operator><name>tp_block_size</name></name> <operator>&lt;</operator> <name><name>req</name><operator>.</operator><name>tp_frame_size</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>req</name><operator>.</operator><name>tp_block_size</name></name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>frames_per_block</name> <operator>=</operator> <name><name>req</name><operator>.</operator><name>tp_block_size</name></name><operator>/</operator><name><name>req</name><operator>.</operator><name>tp_frame_size</name></name></expr>;</expr_stmt>














<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LINUX_NET_TSTAMP_H</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PACKET_TIMESTAMP</name></expr></argument>)</argument_list></call></expr></cpp:if>







<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>tstamp_type</name></name> <operator>==</operator> <name>PCAP_TSTAMP_ADAPTER</name> <operator>||</operator>
<name><name>handle</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>tstamp_type</name></name> <operator>==</operator> <name>PCAP_TSTAMP_ADAPTER_UNSYNCED</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>hwtstamp_config</name></name></type> <name>hwconfig</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ifreq</name></name></type> <name>ifr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>timesource</name></decl>;</decl_stmt>





<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hwconfig</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hwconfig</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hwconfig</name><operator>.</operator><name>tx_type</name></name> <operator>=</operator> <name>HWTSTAMP_TX_ON</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hwconfig</name><operator>.</operator><name>rx_filter</name></name> <operator>=</operator> <name>HWTSTAMP_FILTER_ALL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ifr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ifr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pcap_strlcpy</name><argument_list>(<argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>, <argument><expr><name><name>handle</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>device</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ifr</name><operator>.</operator><name>ifr_data</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>hwconfig</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>SIOCSHWTSTAMP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ifr</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>errno</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>EPERM</name></expr>:</case>







<expr_stmt><expr><operator>*</operator><name>status</name> <operator>=</operator> <name>PCAP_ERROR_PERM_DENIED</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

<case>case <expr><name>EOPNOTSUPP</name></expr>:</case>
<case>case <expr><name>ERANGE</name></expr>:</case>














<expr_stmt><expr><operator>*</operator><name>status</name> <operator>=</operator> <name>PCAP_WARNING_TSTAMP_TYPE_NOTSUP</name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"SIOCSHWTSTAMP failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>status</name> <operator>=</operator> <name>PCAP_ERROR</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></if> <else>else <block>{<block_content>





<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>tstamp_type</name></name> <operator>==</operator> <name>PCAP_TSTAMP_ADAPTER</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name>timesource</name> <operator>=</operator> <name>SOF_TIMESTAMPING_SYS_HARDWARE</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>





<expr_stmt><expr><name>timesource</name> <operator>=</operator> <name>SOF_TIMESTAMPING_RAW_HARDWARE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>SOL_PACKET</name></expr></argument>, <argument><expr><name>PACKET_TIMESTAMP</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>timesource</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>timesource</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"can't set PACKET_TIMESTAMP"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>status</name> <operator>=</operator> <name>PCAP_ERROR</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<label><name>retry</name>:</label>
<expr_stmt><expr><name><name>req</name><operator>.</operator><name>tp_block_nr</name></name> <operator>=</operator> <name><name>req</name><operator>.</operator><name>tp_frame_nr</name></name> <operator>/</operator> <name>frames_per_block</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>req</name><operator>.</operator><name>tp_frame_nr</name></name> <operator>=</operator> <name><name>req</name><operator>.</operator><name>tp_block_nr</name></name> <operator>*</operator> <name>frames_per_block</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TPACKET3</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>handlep</name><operator>-&gt;</operator><name>timeout</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>req</name><operator>.</operator><name>tp_retire_blk_tov</name></name> <operator>=</operator> <name><name>handlep</name><operator>-&gt;</operator><name>timeout</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>handlep</name><operator>-&gt;</operator><name>timeout</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>








<expr_stmt><expr><name><name>req</name><operator>.</operator><name>tp_retire_blk_tov</name></name> <operator>=</operator> <name>UINT_MAX</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>




<expr_stmt><expr><name><name>req</name><operator>.</operator><name>tp_retire_blk_tov</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>req</name><operator>.</operator><name>tp_sizeof_priv</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>req</name><operator>.</operator><name>tp_feature_req_word</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>SOL_PACKET</name></expr></argument>, <argument><expr><name>PACKET_RX_RING</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>errno</name> <operator>==</operator> <name>ENOMEM</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>req</name><operator>.</operator><name>tp_block_nr</name></name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>









<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>.</operator><name>tp_frame_nr</name></name> <operator>&lt;</operator> <literal type="number">20</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>req</name><operator>.</operator><name>tp_frame_nr</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>req</name><operator>.</operator><name>tp_frame_nr</name></name> <operator>-=</operator> <name><name>req</name><operator>.</operator><name>tp_frame_nr</name></name><operator>/</operator><literal type="number">20</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<goto>goto <name>retry</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOPROTOOPT</name></expr>)</condition> <block>{<block_content>



<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"can't create rx ring on packet socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>status</name> <operator>=</operator> <name>PCAP_ERROR</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>mmapbuflen</name></name> <operator>=</operator> <name><name>req</name><operator>.</operator><name>tp_block_nr</name></name> <operator>*</operator> <name><name>req</name><operator>.</operator><name>tp_block_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>mmapbuf</name></name> <operator>=</operator> <call><name>mmap</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>handlep</name><operator>-&gt;</operator><name>mmapbuflen</name></name></expr></argument>,
<argument><expr><name>PROT_READ</name><operator>|</operator><name>PROT_WRITE</name></expr></argument>, <argument><expr><name>MAP_SHARED</name></expr></argument>, <argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>handlep</name><operator>-&gt;</operator><name>mmapbuf</name></name> <operator>==</operator> <name>MAP_FAILED</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"can't mmap rx ring"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>destroy_ring</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>status</name> <operator>=</operator> <name>PCAP_ERROR</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>cc</name></name> <operator>=</operator> <name><name>req</name><operator>.</operator><name>tp_frame_nr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>cc</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr>union <name>thdr</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>handle</name><operator>-&gt;</operator><name>buffer</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"can't allocate ring of frame headers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>destroy_ring</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>status</name> <operator>=</operator> <name>PCAP_ERROR</name></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>req</name><operator>.</operator><name>tp_block_nr</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>base</name> <init>= <expr><operator>&amp;</operator><name><name>handlep</name><operator>-&gt;</operator><name>mmapbuf</name><index>[<expr><name>i</name><operator>*</operator><name><name>req</name><operator>.</operator><name>tp_block_size</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>frames_per_block</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr><operator>,</operator> <expr><operator>++</operator><name><name>handle</name><operator>-&gt;</operator><name>offset</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>RING_GET_CURRENT_FRAME</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>base</name></expr>;</expr_stmt>
<expr_stmt><expr><name>base</name> <operator>+=</operator> <name><name>req</name><operator>.</operator><name>tp_frame_size</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>bufsize</name></name> <operator>=</operator> <name><name>req</name><operator>.</operator><name>tp_frame_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>destroy_ring</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_linux</name></name> <modifier>*</modifier></type><name>handlep</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>tpacket_req</name></name></type> <name>req</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>setsockopt</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>SOL_PACKET</name></expr></argument>, <argument><expr><name>PACKET_RX_RING</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>handlep</name><operator>-&gt;</operator><name>mmapbuf</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>munmap</name><argument_list>(<argument><expr><name><name>handlep</name><operator>-&gt;</operator><name>mmapbuf</name></name></expr></argument>, <argument><expr><name><name>handlep</name><operator>-&gt;</operator><name>mmapbuflen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>mmapbuf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


















<function><type><specifier>static</specifier> <name>void</name></type>
<name>pcap_oneshot_mmap</name><parameter_list>(<parameter><decl><type><name>u_char</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>pcap_pkthdr</name></name> <modifier>*</modifier></type><name>h</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>u_char</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>oneshot_userdata</name></name> <modifier>*</modifier></type><name>sp</name> <init>= <expr><operator>(</operator>struct <name>oneshot_userdata</name> <operator>*</operator><operator>)</operator><name>user</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name> <init>= <expr><name><name>sp</name><operator>-&gt;</operator><name>pd</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_linux</name></name> <modifier>*</modifier></type><name>handlep</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name><name>sp</name><operator>-&gt;</operator><name>hdr</name></name> <operator>=</operator> <operator>*</operator><name>h</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>handlep</name><operator>-&gt;</operator><name>oneshot_buffer</name></name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>caplen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name><name>sp</name><operator>-&gt;</operator><name>pkt</name></name> <operator>=</operator> <name><name>handlep</name><operator>-&gt;</operator><name>oneshot_buffer</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>pcap_cleanup_linux_mmap</name><parameter_list>( <parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter> )</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_linux</name></name> <modifier>*</modifier></type><name>handlep</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>destroy_ring</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>handlep</name><operator>-&gt;</operator><name>oneshot_buffer</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>handlep</name><operator>-&gt;</operator><name>oneshot_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>oneshot_buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>pcap_cleanup_linux</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>pcap_getnonblock_mmap</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_linux</name></name> <modifier>*</modifier></type><name>handlep</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>


<return>return <expr><operator>(</operator><name><name>handlep</name><operator>-&gt;</operator><name>timeout</name></name><operator>&lt;</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>pcap_setnonblock_mmap</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nonblock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_linux</name></name> <modifier>*</modifier></type><name>handlep</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><call><name>pcap_setnonblock_fd</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>nonblock</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>nonblock</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>handlep</name><operator>-&gt;</operator><name>timeout</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>timeout</name></name> <operator>=</operator> <operator>~</operator><name><name>handlep</name><operator>-&gt;</operator><name>timeout</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>handlep</name><operator>-&gt;</operator><name>timeout</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>timeout</name></name> <operator>=</operator> <operator>~</operator><name><name>handlep</name><operator>-&gt;</operator><name>timeout</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>set_poll_timeout</name><argument_list>(<argument><expr><name>handlep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>pcap_get_ring_frame_status</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_linux</name></name> <modifier>*</modifier></type><name>handlep</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>union</name> <name>thdr</name></name></type> <name>h</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>h</name><operator>.</operator><name>raw</name></name> <operator>=</operator> <call><name>RING_GET_FRAME_AT</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>handlep</name><operator>-&gt;</operator><name>tp_version</name></name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>TPACKET_V1</name></expr>:</case>
<return>return <expr><operator>(</operator><name><name>h</name><operator>.</operator><name>h1</name><operator>-&gt;</operator><name>tp_status</name></name><operator>)</operator></expr>;</return>
<break>break;</break>
<case>case <expr><name>TPACKET_V1_64</name></expr>:</case>
<return>return <expr><operator>(</operator><name><name>h</name><operator>.</operator><name>h1_64</name><operator>-&gt;</operator><name>tp_status</name></name><operator>)</operator></expr>;</return>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TPACKET2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>TPACKET_V2</name></expr>:</case>
<return>return <expr><operator>(</operator><name><name>h</name><operator>.</operator><name>h2</name><operator>-&gt;</operator><name>tp_status</name></name><operator>)</operator></expr>;</return>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TPACKET3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>TPACKET_V3</name></expr>:</case>
<return>return <expr><operator>(</operator><name><name>h</name><operator>.</operator><name>h3</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>bh1</name><operator>.</operator><name>block_status</name></name><operator>)</operator></expr>;</return>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>POLLRDHUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLLRDHUP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><specifier>static</specifier> <name>int</name></type> <name>pcap_wait_for_frames_mmap</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_linux</name></name> <modifier>*</modifier></type><name>handlep</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name></type> <name>pollinfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pollinfo</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pollinfo</name><operator>.</operator><name>events</name></name> <operator>=</operator> <name>POLLIN</name></expr>;</expr_stmt>

<do>do <block>{<block_content>








<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>poll</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pollinfo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>handlep</name><operator>-&gt;</operator><name>poll_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>EINTR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"can't poll on packet socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>pollinfo</name><operator>.</operator><name>revents</name></name> <operator>&amp;</operator> <operator>(</operator><name>POLLHUP</name><operator>|</operator><name>POLLRDHUP</name><operator>|</operator><name>POLLERR</name><operator>|</operator><name>POLLNVAL</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>





<if_stmt><if>if <condition>(<expr><name><name>pollinfo</name><operator>.</operator><name>revents</name></name> <operator>&amp;</operator> <operator>(</operator><name>POLLHUP</name> <operator>|</operator> <name>POLLRDHUP</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"Hangup on packet socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pollinfo</name><operator>.</operator><name>revents</name></name> <operator>&amp;</operator> <name>POLLERR</name></expr>)</condition> <block>{<block_content>





<if_stmt><if>if <condition>(<expr><call><name>recv</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><sizeof>sizeof <name>c</name></sizeof></expr></argument>,
<argument><expr><name>MSG_PEEK</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENETDOWN</name></expr>)</condition> <block>{<block_content>









<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"The interface went down"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"Error condition on packet socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pollinfo</name><operator>.</operator><name>revents</name></name> <operator>&amp;</operator> <name>POLLNVAL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"Invalid polling request on packet socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>break_loop</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>break_loop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR_BREAK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block> while <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>pcap_handle_packet_mmap</name><parameter_list>(
<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>,
<parameter><decl><type><name>pcap_handler</name></type> <name>callback</name></decl></parameter>,
<parameter><decl><type><name>u_char</name> <modifier>*</modifier></type><name>user</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>tp_len</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>tp_mac</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>tp_snaplen</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>tp_sec</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>tp_usec</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>tp_vlan_tci_valid</name></decl></parameter>,
<parameter><decl><type><name>__u16</name></type> <name>tp_vlan_tci</name></decl></parameter>,
<parameter><decl><type><name>__u16</name></type> <name>tp_vlan_tpid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_linux</name></name> <modifier>*</modifier></type><name>handlep</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>bp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_ll</name></name> <modifier>*</modifier></type><name>sll</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_pkthdr</name></name></type> <name>pcaphdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>snaplen</name> <init>= <expr><name>tp_snaplen</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>utsname</name></name></type> <name>utsname</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>tp_mac</name> <operator>+</operator> <name>tp_snaplen</name> <operator>&gt;</operator> <name><name>handle</name><operator>-&gt;</operator><name>bufsize</name></name></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><call><name>uname</name><argument_list>(<argument><expr><operator>&amp;</operator><name>utsname</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"corrupted frame on kernel ring mac "</literal>
<literal type="string">"offset %u + caplen %u &gt; frame len %d "</literal>
<literal type="string">"(kernel %.32s version %s, machine %.16s)"</literal></expr></argument>,
<argument><expr><name>tp_mac</name></expr></argument>, <argument><expr><name>tp_snaplen</name></expr></argument>, <argument><expr><name><name>handle</name><operator>-&gt;</operator><name>bufsize</name></name></expr></argument>,
<argument><expr><name><name>utsname</name><operator>.</operator><name>release</name></name></expr></argument>, <argument><expr><name><name>utsname</name><operator>.</operator><name>version</name></name></expr></argument>,
<argument><expr><name><name>utsname</name><operator>.</operator><name>machine</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"corrupted frame on kernel ring mac "</literal>
<literal type="string">"offset %u + caplen %u &gt; frame len %d"</literal></expr></argument>,
<argument><expr><name>tp_mac</name></expr></argument>, <argument><expr><name>tp_snaplen</name></expr></argument>, <argument><expr><name><name>handle</name><operator>-&gt;</operator><name>bufsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>










<expr_stmt><expr><name>bp</name> <operator>=</operator> <name>frame</name> <operator>+</operator> <name>tp_mac</name></expr>;</expr_stmt>


<expr_stmt><expr><name>sll</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>frame</name> <operator>+</operator> <call><name>TPACKET_ALIGN</name><argument_list>(<argument><expr><name><name>handlep</name><operator>-&gt;</operator><name>tp_hdrlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>handlep</name><operator>-&gt;</operator><name>cooked</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>linktype</name></name> <operator>==</operator> <name>DLT_LINUX_SLL2</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sll2_header</name></name> <modifier>*</modifier></type><name>hdrp</name></decl>;</decl_stmt>








<expr_stmt><expr><name>bp</name> <operator>-=</operator> <name>SLL2_HDR_LEN</name></expr>;</expr_stmt>








<if_stmt><if>if <condition>(<expr><name>bp</name> <operator>&lt;</operator> <operator>(</operator><name>u_char</name> <operator>*</operator><operator>)</operator><name>frame</name> <operator>+</operator>
<call><name>TPACKET_ALIGN</name><argument_list>(<argument><expr><name><name>handlep</name><operator>-&gt;</operator><name>tp_hdrlen</name></name></expr></argument>)</argument_list></call> <operator>+</operator>
<sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_ll</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"cooked-mode frame doesn't have room for sll header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>hdrp</name> <operator>=</operator> <operator>(</operator>struct <name>sll2_header</name> <operator>*</operator><operator>)</operator><name>bp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdrp</name><operator>-&gt;</operator><name>sll2_protocol</name></name> <operator>=</operator> <name><name>sll</name><operator>-&gt;</operator><name>sll_protocol</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdrp</name><operator>-&gt;</operator><name>sll2_reserved_mbz</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdrp</name><operator>-&gt;</operator><name>sll2_if_index</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>sll</name><operator>-&gt;</operator><name>sll_ifindex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdrp</name><operator>-&gt;</operator><name>sll2_hatype</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>sll</name><operator>-&gt;</operator><name>sll_hatype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdrp</name><operator>-&gt;</operator><name>sll2_pkttype</name></name> <operator>=</operator> <name><name>sll</name><operator>-&gt;</operator><name>sll_pkttype</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdrp</name><operator>-&gt;</operator><name>sll2_halen</name></name> <operator>=</operator> <name><name>sll</name><operator>-&gt;</operator><name>sll_halen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>hdrp</name><operator>-&gt;</operator><name>sll2_addr</name></name></expr></argument>, <argument><expr><name><name>sll</name><operator>-&gt;</operator><name>sll_addr</name></name></expr></argument>, <argument><expr><name>SLL_ADDRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>snaplen</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sll2_header</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sll_header</name></name> <modifier>*</modifier></type><name>hdrp</name></decl>;</decl_stmt>








<expr_stmt><expr><name>bp</name> <operator>-=</operator> <name>SLL_HDR_LEN</name></expr>;</expr_stmt>








<if_stmt><if>if <condition>(<expr><name>bp</name> <operator>&lt;</operator> <operator>(</operator><name>u_char</name> <operator>*</operator><operator>)</operator><name>frame</name> <operator>+</operator>
<call><name>TPACKET_ALIGN</name><argument_list>(<argument><expr><name><name>handlep</name><operator>-&gt;</operator><name>tp_hdrlen</name></name></expr></argument>)</argument_list></call> <operator>+</operator>
<sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_ll</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"cooked-mode frame doesn't have room for sll header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>hdrp</name> <operator>=</operator> <operator>(</operator>struct <name>sll_header</name> <operator>*</operator><operator>)</operator><name>bp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdrp</name><operator>-&gt;</operator><name>sll_pkttype</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>sll</name><operator>-&gt;</operator><name>sll_pkttype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdrp</name><operator>-&gt;</operator><name>sll_hatype</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>sll</name><operator>-&gt;</operator><name>sll_hatype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdrp</name><operator>-&gt;</operator><name>sll_halen</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>sll</name><operator>-&gt;</operator><name>sll_halen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>hdrp</name><operator>-&gt;</operator><name>sll_addr</name></name></expr></argument>, <argument><expr><name><name>sll</name><operator>-&gt;</operator><name>sll_addr</name></name></expr></argument>, <argument><expr><name>SLL_ADDRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hdrp</name><operator>-&gt;</operator><name>sll_protocol</name></name> <operator>=</operator> <name><name>sll</name><operator>-&gt;</operator><name>sll_protocol</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>snaplen</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sll_header</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>handlep</name><operator>-&gt;</operator><name>filter_in_userland</name></name> <operator>&amp;&amp;</operator> <name><name>handle</name><operator>-&gt;</operator><name>fcode</name><operator>.</operator><name>bf_insns</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bpf_aux_data</name></name></type> <name>aux_data</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>aux_data</name><operator>.</operator><name>vlan_tag_present</name></name> <operator>=</operator> <name>tp_vlan_tci_valid</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>aux_data</name><operator>.</operator><name>vlan_tag</name></name> <operator>=</operator> <name>tp_vlan_tci</name> <operator>&amp;</operator> <literal type="number">0x0fff</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bpf_filter_with_aux_data</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fcode</name><operator>.</operator><name>bf_insns</name></name></expr></argument>,
<argument><expr><name>bp</name></expr></argument>,
<argument><expr><name>tp_len</name></expr></argument>,
<argument><expr><name>snaplen</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>aux_data</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>linux_check_direction</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>sll</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name><name>pcaphdr</name><operator>.</operator><name>ts</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name>tp_sec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pcaphdr</name><operator>.</operator><name>ts</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <name>tp_usec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pcaphdr</name><operator>.</operator><name>caplen</name></name> <operator>=</operator> <name>tp_snaplen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pcaphdr</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>tp_len</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>handlep</name><operator>-&gt;</operator><name>cooked</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>linktype</name></name> <operator>==</operator> <name>DLT_LINUX_SLL2</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pcaphdr</name><operator>.</operator><name>caplen</name></name> <operator>+=</operator> <name>SLL2_HDR_LEN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pcaphdr</name><operator>.</operator><name>len</name></name> <operator>+=</operator> <name>SLL2_HDR_LEN</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>pcaphdr</name><operator>.</operator><name>caplen</name></name> <operator>+=</operator> <name>SLL_HDR_LEN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pcaphdr</name><operator>.</operator><name>len</name></name> <operator>+=</operator> <name>SLL_HDR_LEN</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TPACKET2</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TPACKET3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>tp_vlan_tci_valid</name> <operator>&amp;&amp;</operator>
<name><name>handlep</name><operator>-&gt;</operator><name>vlan_offset</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>
<name>tp_snaplen</name> <operator>&gt;=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name><name>handlep</name><operator>-&gt;</operator><name>vlan_offset</name></name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>vlan_tag</name></name> <modifier>*</modifier></type><name>tag</name></decl>;</decl_stmt>






<expr_stmt><expr><name>bp</name> <operator>-=</operator> <name>VLAN_TAG_LEN</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><name>bp</name> <operator>+</operator> <name>VLAN_TAG_LEN</name></expr></argument>, <argument><expr><name><name>handlep</name><operator>-&gt;</operator><name>vlan_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name>tag</name> <operator>=</operator> <operator>(</operator>struct <name>vlan_tag</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>bp</name> <operator>+</operator> <name><name>handlep</name><operator>-&gt;</operator><name>vlan_offset</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tag</name><operator>-&gt;</operator><name>vlan_tpid</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>tp_vlan_tpid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tag</name><operator>-&gt;</operator><name>vlan_tci</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>tp_vlan_tci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><name><name>pcaphdr</name><operator>.</operator><name>caplen</name></name> <operator>+=</operator> <name>VLAN_TAG_LEN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pcaphdr</name><operator>.</operator><name>len</name></name> <operator>+=</operator> <name>VLAN_TAG_LEN</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>










<if_stmt><if>if <condition>(<expr><name><name>pcaphdr</name><operator>.</operator><name>caplen</name></name> <operator>&gt;</operator> <operator>(</operator><name>bpf_u_int32</name><operator>)</operator><name><name>handle</name><operator>-&gt;</operator><name>snapshot</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>pcaphdr</name><operator>.</operator><name>caplen</name></name> <operator>=</operator> <name><name>handle</name><operator>-&gt;</operator><name>snapshot</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>callback</name><argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pcaphdr</name></expr></argument>, <argument><expr><name>bp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>pcap_read_linux_mmap_v1</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_packets</name></decl></parameter>, <parameter><decl><type><name>pcap_handler</name></type> <name>callback</name></decl></parameter>,
<parameter><decl><type><name>u_char</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_linux</name></name> <modifier>*</modifier></type><name>handlep</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>union</name> <name>thdr</name></name></type> <name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pkts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>


<expr_stmt><expr><name><name>h</name><operator>.</operator><name>raw</name></name> <operator>=</operator> <call><name>RING_GET_CURRENT_FRAME</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>.</operator><name>h1</name><operator>-&gt;</operator><name>tp_status</name></name> <operator>==</operator> <name>TP_STATUS_KERNEL</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pcap_wait_for_frames_mmap</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<while>while <condition>(<expr><operator>(</operator><name>pkts</name> <operator>&lt;</operator> <name>max_packets</name><operator>)</operator> <operator>||</operator> <call><name>PACKET_COUNT_IS_UNLIMITED</name><argument_list>(<argument><expr><name>max_packets</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name><name>h</name><operator>.</operator><name>raw</name></name> <operator>=</operator> <call><name>RING_GET_CURRENT_FRAME</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>.</operator><name>h1</name><operator>-&gt;</operator><name>tp_status</name></name> <operator>==</operator> <name>TP_STATUS_KERNEL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pcap_handle_packet_mmap</name><argument_list>(
<argument><expr><name>handle</name></expr></argument>,
<argument><expr><name>callback</name></expr></argument>,
<argument><expr><name>user</name></expr></argument>,
<argument><expr><name><name>h</name><operator>.</operator><name>raw</name></name></expr></argument>,
<argument><expr><name><name>h</name><operator>.</operator><name>h1</name><operator>-&gt;</operator><name>tp_len</name></name></expr></argument>,
<argument><expr><name><name>h</name><operator>.</operator><name>h1</name><operator>-&gt;</operator><name>tp_mac</name></name></expr></argument>,
<argument><expr><name><name>h</name><operator>.</operator><name>h1</name><operator>-&gt;</operator><name>tp_snaplen</name></name></expr></argument>,
<argument><expr><name><name>h</name><operator>.</operator><name>h1</name><operator>-&gt;</operator><name>tp_sec</name></name></expr></argument>,
<argument><expr><name><name>h</name><operator>.</operator><name>h1</name><operator>-&gt;</operator><name>tp_usec</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pkts</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>packets_read</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>







<expr_stmt><expr><name><name>h</name><operator>.</operator><name>h1</name><operator>-&gt;</operator><name>tp_status</name></name> <operator>=</operator> <name>TP_STATUS_KERNEL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>handlep</name><operator>-&gt;</operator><name>blocks_to_filter_in_userland</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>blocks_to_filter_in_userland</name></name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>handlep</name><operator>-&gt;</operator><name>blocks_to_filter_in_userland</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>filter_in_userland</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>handle</name><operator>-&gt;</operator><name>offset</name></name> <operator>&gt;=</operator> <name><name>handle</name><operator>-&gt;</operator><name>cc</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>break_loop</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>break_loop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR_BREAK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>pkts</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>pcap_read_linux_mmap_v1_64</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_packets</name></decl></parameter>, <parameter><decl><type><name>pcap_handler</name></type> <name>callback</name></decl></parameter>,
<parameter><decl><type><name>u_char</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_linux</name></name> <modifier>*</modifier></type><name>handlep</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>union</name> <name>thdr</name></name></type> <name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pkts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>


<expr_stmt><expr><name><name>h</name><operator>.</operator><name>raw</name></name> <operator>=</operator> <call><name>RING_GET_CURRENT_FRAME</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>.</operator><name>h1_64</name><operator>-&gt;</operator><name>tp_status</name></name> <operator>==</operator> <name>TP_STATUS_KERNEL</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pcap_wait_for_frames_mmap</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<while>while <condition>(<expr><operator>(</operator><name>pkts</name> <operator>&lt;</operator> <name>max_packets</name><operator>)</operator> <operator>||</operator> <call><name>PACKET_COUNT_IS_UNLIMITED</name><argument_list>(<argument><expr><name>max_packets</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name><name>h</name><operator>.</operator><name>raw</name></name> <operator>=</operator> <call><name>RING_GET_CURRENT_FRAME</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>.</operator><name>h1_64</name><operator>-&gt;</operator><name>tp_status</name></name> <operator>==</operator> <name>TP_STATUS_KERNEL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pcap_handle_packet_mmap</name><argument_list>(
<argument><expr><name>handle</name></expr></argument>,
<argument><expr><name>callback</name></expr></argument>,
<argument><expr><name>user</name></expr></argument>,
<argument><expr><name><name>h</name><operator>.</operator><name>raw</name></name></expr></argument>,
<argument><expr><name><name>h</name><operator>.</operator><name>h1_64</name><operator>-&gt;</operator><name>tp_len</name></name></expr></argument>,
<argument><expr><name><name>h</name><operator>.</operator><name>h1_64</name><operator>-&gt;</operator><name>tp_mac</name></name></expr></argument>,
<argument><expr><name><name>h</name><operator>.</operator><name>h1_64</name><operator>-&gt;</operator><name>tp_snaplen</name></name></expr></argument>,
<argument><expr><name><name>h</name><operator>.</operator><name>h1_64</name><operator>-&gt;</operator><name>tp_sec</name></name></expr></argument>,
<argument><expr><name><name>h</name><operator>.</operator><name>h1_64</name><operator>-&gt;</operator><name>tp_usec</name></name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pkts</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>packets_read</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>







<expr_stmt><expr><name><name>h</name><operator>.</operator><name>h1_64</name><operator>-&gt;</operator><name>tp_status</name></name> <operator>=</operator> <name>TP_STATUS_KERNEL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>handlep</name><operator>-&gt;</operator><name>blocks_to_filter_in_userland</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>blocks_to_filter_in_userland</name></name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>handlep</name><operator>-&gt;</operator><name>blocks_to_filter_in_userland</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>filter_in_userland</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>handle</name><operator>-&gt;</operator><name>offset</name></name> <operator>&gt;=</operator> <name><name>handle</name><operator>-&gt;</operator><name>cc</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>break_loop</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>break_loop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR_BREAK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>pkts</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TPACKET2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>pcap_read_linux_mmap_v2</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_packets</name></decl></parameter>, <parameter><decl><type><name>pcap_handler</name></type> <name>callback</name></decl></parameter>,
<parameter><decl><type><name>u_char</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_linux</name></name> <modifier>*</modifier></type><name>handlep</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>union</name> <name>thdr</name></name></type> <name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pkts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>


<expr_stmt><expr><name><name>h</name><operator>.</operator><name>raw</name></name> <operator>=</operator> <call><name>RING_GET_CURRENT_FRAME</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>.</operator><name>h2</name><operator>-&gt;</operator><name>tp_status</name></name> <operator>==</operator> <name>TP_STATUS_KERNEL</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pcap_wait_for_frames_mmap</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>



<while>while <condition>(<expr><operator>(</operator><name>pkts</name> <operator>&lt;</operator> <name>max_packets</name><operator>)</operator> <operator>||</operator> <call><name>PACKET_COUNT_IS_UNLIMITED</name><argument_list>(<argument><expr><name>max_packets</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name><name>h</name><operator>.</operator><name>raw</name></name> <operator>=</operator> <call><name>RING_GET_CURRENT_FRAME</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>.</operator><name>h2</name><operator>-&gt;</operator><name>tp_status</name></name> <operator>==</operator> <name>TP_STATUS_KERNEL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pcap_handle_packet_mmap</name><argument_list>(
<argument><expr><name>handle</name></expr></argument>,
<argument><expr><name>callback</name></expr></argument>,
<argument><expr><name>user</name></expr></argument>,
<argument><expr><name><name>h</name><operator>.</operator><name>raw</name></name></expr></argument>,
<argument><expr><name><name>h</name><operator>.</operator><name>h2</name><operator>-&gt;</operator><name>tp_len</name></name></expr></argument>,
<argument><expr><name><name>h</name><operator>.</operator><name>h2</name><operator>-&gt;</operator><name>tp_mac</name></name></expr></argument>,
<argument><expr><name><name>h</name><operator>.</operator><name>h2</name><operator>-&gt;</operator><name>tp_snaplen</name></name></expr></argument>,
<argument><expr><name><name>h</name><operator>.</operator><name>h2</name><operator>-&gt;</operator><name>tp_sec</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>handle</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>tstamp_precision</name></name> <operator>==</operator> <name>PCAP_TSTAMP_PRECISION_NANO</name></expr> ?</condition><then> <expr><name><name>h</name><operator>.</operator><name>h2</name><operator>-&gt;</operator><name>tp_nsec</name></name></expr> </then><else>: <expr><name><name>h</name><operator>.</operator><name>h2</name><operator>-&gt;</operator><name>tp_nsec</name></name> <operator>/</operator> <literal type="number">1000</literal></expr></else></ternary></expr></argument>,
<argument><expr><call><name>VLAN_VALID</name><argument_list>(<argument><expr><name><name>h</name><operator>.</operator><name>h2</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>.</operator><name>h2</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>h</name><operator>.</operator><name>h2</name><operator>-&gt;</operator><name>tp_vlan_tci</name></name></expr></argument>,
<argument><expr><call><name>VLAN_TPID</name><argument_list>(<argument><expr><name><name>h</name><operator>.</operator><name>h2</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>.</operator><name>h2</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pkts</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>packets_read</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>







<expr_stmt><expr><name><name>h</name><operator>.</operator><name>h2</name><operator>-&gt;</operator><name>tp_status</name></name> <operator>=</operator> <name>TP_STATUS_KERNEL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>handlep</name><operator>-&gt;</operator><name>blocks_to_filter_in_userland</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>blocks_to_filter_in_userland</name></name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>handlep</name><operator>-&gt;</operator><name>blocks_to_filter_in_userland</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>filter_in_userland</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>handle</name><operator>-&gt;</operator><name>offset</name></name> <operator>&gt;=</operator> <name><name>handle</name><operator>-&gt;</operator><name>cc</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>break_loop</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>break_loop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR_BREAK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>pkts</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TPACKET3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>pcap_read_linux_mmap_v3</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_packets</name></decl></parameter>, <parameter><decl><type><name>pcap_handler</name></type> <name>callback</name></decl></parameter>,
<parameter><decl><type><name>u_char</name> <modifier>*</modifier></type><name>user</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_linux</name></name> <modifier>*</modifier></type><name>handlep</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>union</name> <name>thdr</name></name></type> <name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pkts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<label><name>again</name>:</label>
<if_stmt><if>if <condition>(<expr><name><name>handlep</name><operator>-&gt;</operator><name>current_packet</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>.</operator><name>raw</name></name> <operator>=</operator> <call><name>RING_GET_CURRENT_FRAME</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>.</operator><name>h3</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>bh1</name><operator>.</operator><name>block_status</name></name> <operator>==</operator> <name>TP_STATUS_KERNEL</name></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pcap_wait_for_frames_mmap</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>h</name><operator>.</operator><name>raw</name></name> <operator>=</operator> <call><name>RING_GET_CURRENT_FRAME</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>.</operator><name>h3</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>bh1</name><operator>.</operator><name>block_status</name></name> <operator>==</operator> <name>TP_STATUS_KERNEL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pkts</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>handlep</name><operator>-&gt;</operator><name>timeout</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>again</name>;</goto>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>pkts</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<while>while <condition>(<expr><operator>(</operator><name>pkts</name> <operator>&lt;</operator> <name>max_packets</name><operator>)</operator> <operator>||</operator> <call><name>PACKET_COUNT_IS_UNLIMITED</name><argument_list>(<argument><expr><name>max_packets</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>packets_to_read</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>handlep</name><operator>-&gt;</operator><name>current_packet</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>h</name><operator>.</operator><name>raw</name></name> <operator>=</operator> <call><name>RING_GET_CURRENT_FRAME</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>.</operator><name>h3</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>bh1</name><operator>.</operator><name>block_status</name></name> <operator>==</operator> <name>TP_STATUS_KERNEL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>current_packet</name></name> <operator>=</operator> <name><name>h</name><operator>.</operator><name>raw</name></name> <operator>+</operator> <name><name>h</name><operator>.</operator><name>h3</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>bh1</name><operator>.</operator><name>offset_to_first_pkt</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>packets_left</name></name> <operator>=</operator> <name><name>h</name><operator>.</operator><name>h3</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>bh1</name><operator>.</operator><name>num_pkts</name></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>packets_to_read</name> <operator>=</operator> <name><name>handlep</name><operator>-&gt;</operator><name>packets_left</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PACKET_COUNT_IS_UNLIMITED</name><argument_list>(<argument><expr><name>max_packets</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<name>packets_to_read</name> <operator>&gt;</operator> <operator>(</operator><name>max_packets</name> <operator>-</operator> <name>pkts</name><operator>)</operator></expr>)</condition> <block>{<block_content>






<expr_stmt><expr><name>packets_to_read</name> <operator>=</operator> <name>max_packets</name> <operator>-</operator> <name>pkts</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>packets_to_read</name><operator>--</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>handle</name><operator>-&gt;</operator><name>break_loop</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>tpacket3_hdr</name></name><modifier>*</modifier></type> <name>tp3_hdr</name> <init>= <expr><operator>(</operator>struct <name>tpacket3_hdr</name><operator>*</operator><operator>)</operator> <name><name>handlep</name><operator>-&gt;</operator><name>current_packet</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pcap_handle_packet_mmap</name><argument_list>(
<argument><expr><name>handle</name></expr></argument>,
<argument><expr><name>callback</name></expr></argument>,
<argument><expr><name>user</name></expr></argument>,
<argument><expr><name><name>handlep</name><operator>-&gt;</operator><name>current_packet</name></name></expr></argument>,
<argument><expr><name><name>tp3_hdr</name><operator>-&gt;</operator><name>tp_len</name></name></expr></argument>,
<argument><expr><name><name>tp3_hdr</name><operator>-&gt;</operator><name>tp_mac</name></name></expr></argument>,
<argument><expr><name><name>tp3_hdr</name><operator>-&gt;</operator><name>tp_snaplen</name></name></expr></argument>,
<argument><expr><name><name>tp3_hdr</name><operator>-&gt;</operator><name>tp_sec</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>handle</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>tstamp_precision</name></name> <operator>==</operator> <name>PCAP_TSTAMP_PRECISION_NANO</name></expr> ?</condition><then> <expr><name><name>tp3_hdr</name><operator>-&gt;</operator><name>tp_nsec</name></name></expr> </then><else>: <expr><name><name>tp3_hdr</name><operator>-&gt;</operator><name>tp_nsec</name></name> <operator>/</operator> <literal type="number">1000</literal></expr></else></ternary></expr></argument>,
<argument><expr><call><name>VLAN_VALID</name><argument_list>(<argument><expr><name>tp3_hdr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tp3_hdr</name><operator>-&gt;</operator><name>hv1</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>tp3_hdr</name><operator>-&gt;</operator><name>hv1</name><operator>.</operator><name>tp_vlan_tci</name></name></expr></argument>,
<argument><expr><call><name>VLAN_TPID</name><argument_list>(<argument><expr><name>tp3_hdr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tp3_hdr</name><operator>-&gt;</operator><name>hv1</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pkts</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>packets_read</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>current_packet</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>current_packet</name></name> <operator>+=</operator> <name><name>tp3_hdr</name><operator>-&gt;</operator><name>tp_next_offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>packets_left</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>handlep</name><operator>-&gt;</operator><name>packets_left</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>







<expr_stmt><expr><name><name>h</name><operator>.</operator><name>h3</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>bh1</name><operator>.</operator><name>block_status</name></name> <operator>=</operator> <name>TP_STATUS_KERNEL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>handlep</name><operator>-&gt;</operator><name>blocks_to_filter_in_userland</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>blocks_to_filter_in_userland</name></name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>handlep</name><operator>-&gt;</operator><name>blocks_to_filter_in_userland</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>filter_in_userland</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>handle</name><operator>-&gt;</operator><name>offset</name></name> <operator>&gt;=</operator> <name><name>handle</name><operator>-&gt;</operator><name>cc</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>current_packet</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>break_loop</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>break_loop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR_BREAK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>pkts</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>handlep</name><operator>-&gt;</operator><name>timeout</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>again</name>;</goto>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>pkts</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>pcap_setfilter_linux_mmap</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>bpf_program</name></name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_linux</name></name> <modifier>*</modifier></type><name>handlep</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>







<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pcap_setfilter_linux_common</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name><name>handlep</name><operator>-&gt;</operator><name>filter_in_userland</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>










<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>handle</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name>offset</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>handle</name><operator>-&gt;</operator><name>cc</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>n</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>handle</name><operator>-&gt;</operator><name>cc</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name>offset</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>handle</name><operator>-&gt;</operator><name>cc</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>pcap_get_ring_frame_status</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TP_STATUS_KERNEL</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>















<if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>n</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>












<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>blocks_to_filter_in_userland</name></name> <operator>=</operator> <name><name>handle</name><operator>-&gt;</operator><name>cc</name></name> <operator>-</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>filter_in_userland</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PF_PACKET_SOCKETS</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>iface_get_id</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ebuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ifreq</name></name></type> <name>ifr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ifr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ifr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pcap_strlcpy</name><argument_list>(<argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>, <argument><expr><name>device</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SIOCGIFINDEX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ifr</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"SIOCGIFINDEX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>ifr</name><operator>.</operator><name>ifr_ifindex</name></name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>iface_bind</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ifindex</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ebuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>protocol</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_ll</name></name></type> <name>sll</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>socklen_t</name></type> <name>errlen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sll</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sll</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sll</name><operator>.</operator><name>sll_family</name></name> <operator>=</operator> <name>AF_PACKET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sll</name><operator>.</operator><name>sll_ifindex</name></name> <operator>=</operator> <name>ifindex</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sll</name><operator>.</operator><name>sll_protocol</name></name> <operator>=</operator> <name>protocol</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bind</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>sll</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sll</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENETDOWN</name></expr>)</condition> <block>{<block_content>







<return>return <expr><name>PCAP_ERROR_IFACE_NOT_UP</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"bind"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><call><name>getsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_ERROR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"getsockopt (SO_ERROR)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>ENETDOWN</name></expr>)</condition> <block>{<block_content>







<return>return <expr><name>PCAP_ERROR_IFACE_NOT_UP</name></expr>;</return>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>err</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"bind"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IW_MODE_MONITOR</name></expr></argument>)</argument_list></call></expr></cpp:if>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>has_wext</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sock_fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ebuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>iwreq</name></name></type> <name>ireq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_bonding_device</name><argument_list>(<argument><expr><name>sock_fd</name></expr></argument>, <argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pcap_strlcpy</name><argument_list>(<argument><expr><name><name>ireq</name><operator>.</operator><name>ifr_ifrn</name><operator>.</operator><name>ifrn_name</name></name></expr></argument>, <argument><expr><name>device</name></expr></argument>,
<argument><expr><sizeof>sizeof <name><name>ireq</name><operator>.</operator><name>ifr_ifrn</name><operator>.</operator><name>ifrn_name</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>sock_fd</name></expr></argument>, <argument><expr><name>SIOCGIWNAME</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ireq</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENODEV</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>PCAP_ERROR_NO_SUCH_DEVICE</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"%s: SIOCGIWNAME"</literal></expr></argument>, <argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>










<typedef>typedef <type><enum>enum <block>{
<decl><name>MONITOR_WEXT</name></decl>,
<decl><name>MONITOR_HOSTAP</name></decl>,
<decl><name>MONITOR_PRISM</name></decl>,
<decl><name>MONITOR_PRISM54</name></decl>,
<decl><name>MONITOR_ACX100</name></decl>,
<decl><name>MONITOR_RT2500</name></decl>,
<decl><name>MONITOR_RT2570</name></decl>,
<decl><name>MONITOR_RT73</name></decl>,
<decl><name>MONITOR_RTL8XXX</name></decl>
}</block></enum></type> <name>monitor_type</name>;</typedef>









<function><type><specifier>static</specifier> <name>int</name></type>
<name>enter_rfmon_mode_wext</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sock_fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>device</name></decl></parameter>)</parameter_list>
<block>{<block_content>


























































<decl_stmt><decl><type><name><name>struct</name> <name>pcap_linux</name></name> <modifier>*</modifier></type><name>handlep</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>iwreq</name></name></type> <name>ireq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>iw_priv_args</name></name> <modifier>*</modifier></type><name>priv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>monitor_type</name></type> <name>montype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>__u32</name></type> <name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ifreq</name></name></type> <name>ifr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>oldflags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>channel</name></decl>;</decl_stmt>




<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>has_wext</name><argument_list>(<argument><expr><name>sock_fd</name></expr></argument>, <argument><expr><name>device</name></expr></argument>, <argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><name>montype</name> <operator>=</operator> <name>MONITOR_WEXT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cmd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>











<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ireq</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>ireq</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pcap_strlcpy</name><argument_list>(<argument><expr><name><name>ireq</name><operator>.</operator><name>ifr_ifrn</name><operator>.</operator><name>ifrn_name</name></name></expr></argument>, <argument><expr><name>device</name></expr></argument>,
<argument><expr><sizeof>sizeof <name><name>ireq</name><operator>.</operator><name>ifr_ifrn</name><operator>.</operator><name>ifrn_name</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ireq</name><operator>.</operator><name>u</name><operator>.</operator><name>data</name><operator>.</operator><name>pointer</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>args</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ireq</name><operator>.</operator><name>u</name><operator>.</operator><name>data</name><operator>.</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ireq</name><operator>.</operator><name>u</name><operator>.</operator><name>data</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>sock_fd</name></expr></argument>, <argument><expr><name>SIOCGIWPRIV</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ireq</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"%s: SIOCGIWPRIV with a zero-length buffer didn't fail!"</literal></expr></argument>,
<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EOPNOTSUPP</name></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>E2BIG</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"%s: SIOCGIWPRIV"</literal></expr></argument>, <argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>priv</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>ireq</name><operator>.</operator><name>u</name><operator>.</operator><name>data</name><operator>.</operator><name>length</name></name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr>struct <name>iw_priv_args</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>priv</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"malloc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ireq</name><operator>.</operator><name>u</name><operator>.</operator><name>data</name><operator>.</operator><name>pointer</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>priv</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>sock_fd</name></expr></argument>, <argument><expr><name>SIOCGIWPRIV</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ireq</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"%s: SIOCGIWPRIV"</literal></expr></argument>, <argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>priv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>





<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ireq</name><operator>.</operator><name>u</name><operator>.</operator><name>data</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>priv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"monitor_type"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>









<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>priv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>set_args</name> <operator>&amp;</operator> <name>IW_PRIV_TYPE_MASK</name><operator>)</operator> <operator>!=</operator> <name>IW_PRIV_TYPE_INT</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>priv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>set_args</name> <operator>&amp;</operator> <name>IW_PRIV_SIZE_FIXED</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>priv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>set_args</name> <operator>&amp;</operator> <name>IW_PRIV_SIZE_MASK</name><operator>)</operator> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>montype</name> <operator>=</operator> <name>MONITOR_HOSTAP</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cmd</name> <operator>=</operator> <name><name>priv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cmd</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>priv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"set_prismhdr"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>






<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>priv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>set_args</name> <operator>&amp;</operator> <name>IW_PRIV_TYPE_MASK</name><operator>)</operator> <operator>!=</operator> <name>IW_PRIV_TYPE_INT</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>priv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>set_args</name> <operator>&amp;</operator> <name>IW_PRIV_SIZE_FIXED</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>priv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>set_args</name> <operator>&amp;</operator> <name>IW_PRIV_SIZE_MASK</name><operator>)</operator> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>montype</name> <operator>=</operator> <name>MONITOR_PRISM54</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cmd</name> <operator>=</operator> <name><name>priv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cmd</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>priv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"forceprismheader"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>






<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>priv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>set_args</name> <operator>&amp;</operator> <name>IW_PRIV_TYPE_MASK</name><operator>)</operator> <operator>!=</operator> <name>IW_PRIV_TYPE_INT</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>priv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>set_args</name> <operator>&amp;</operator> <name>IW_PRIV_SIZE_FIXED</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>priv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>set_args</name> <operator>&amp;</operator> <name>IW_PRIV_SIZE_MASK</name><operator>)</operator> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>montype</name> <operator>=</operator> <name>MONITOR_RT2570</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cmd</name> <operator>=</operator> <name><name>priv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cmd</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>priv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"forceprism"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>







<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>priv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>set_args</name> <operator>&amp;</operator> <name>IW_PRIV_TYPE_MASK</name><operator>)</operator> <operator>!=</operator> <name>IW_PRIV_TYPE_CHAR</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>priv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>set_args</name> <operator>&amp;</operator> <name>IW_PRIV_SIZE_FIXED</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>montype</name> <operator>=</operator> <name>MONITOR_RT73</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cmd</name> <operator>=</operator> <name><name>priv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cmd</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>priv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"prismhdr"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>






<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>priv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>set_args</name> <operator>&amp;</operator> <name>IW_PRIV_TYPE_MASK</name><operator>)</operator> <operator>!=</operator> <name>IW_PRIV_TYPE_INT</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>priv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>set_args</name> <operator>&amp;</operator> <name>IW_PRIV_SIZE_FIXED</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>priv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>set_args</name> <operator>&amp;</operator> <name>IW_PRIV_SIZE_MASK</name><operator>)</operator> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>montype</name> <operator>=</operator> <name>MONITOR_RTL8XXX</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cmd</name> <operator>=</operator> <name><name>priv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cmd</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>priv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"rfmontx"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>











<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>priv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>set_args</name> <operator>&amp;</operator> <name>IW_PRIV_TYPE_MASK</name><operator>)</operator> <operator>!=</operator> <name>IW_PRIV_TYPE_INT</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>priv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>set_args</name> <operator>&amp;</operator> <name>IW_PRIV_SIZE_MASK</name><operator>)</operator> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>montype</name> <operator>=</operator> <name>MONITOR_RT2500</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cmd</name> <operator>=</operator> <name><name>priv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cmd</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>priv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"monitor"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>















<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>priv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>set_args</name> <operator>&amp;</operator> <name>IW_PRIV_TYPE_MASK</name><operator>)</operator> <operator>!=</operator> <name>IW_PRIV_TYPE_INT</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>priv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>set_args</name> <operator>&amp;</operator> <name>IW_PRIV_SIZE_FIXED</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><name><name>priv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>set_args</name> <operator>&amp;</operator> <name>IW_PRIV_SIZE_MASK</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name>montype</name> <operator>=</operator> <name>MONITOR_PRISM</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cmd</name> <operator>=</operator> <name><name>priv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cmd</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name>montype</name> <operator>=</operator> <name>MONITOR_ACX100</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cmd</name> <operator>=</operator> <name><name>priv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cmd</name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>priv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>








<expr_stmt><expr><call><name>pcap_strlcpy</name><argument_list>(<argument><expr><name><name>ireq</name><operator>.</operator><name>ifr_ifrn</name><operator>.</operator><name>ifrn_name</name></name></expr></argument>, <argument><expr><name>device</name></expr></argument>,
<argument><expr><sizeof>sizeof <name><name>ireq</name><operator>.</operator><name>ifr_ifrn</name><operator>.</operator><name>ifrn_name</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>sock_fd</name></expr></argument>, <argument><expr><name>SIOCGIWMODE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ireq</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>



<return>return <expr><name>PCAP_ERROR_RFMON_NOTSUP</name></expr>;</return>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>ireq</name><operator>.</operator><name>u</name><operator>.</operator><name>mode</name></name> <operator>==</operator> <name>IW_MODE_MONITOR</name></expr>)</condition> <block>{<block_content>







<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>








<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pcap_do_addexit</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>




<return>return <expr><name>PCAP_ERROR_RFMON_NOTSUP</name></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>oldmode</name></name> <operator>=</operator> <name><name>ireq</name><operator>.</operator><name>u</name><operator>.</operator><name>mode</name></name></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name>montype</name> <operator>==</operator> <name>MONITOR_PRISM</name></expr>)</condition> <block>{<block_content>







<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ireq</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>ireq</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pcap_strlcpy</name><argument_list>(<argument><expr><name><name>ireq</name><operator>.</operator><name>ifr_ifrn</name><operator>.</operator><name>ifrn_name</name></name></expr></argument>, <argument><expr><name>device</name></expr></argument>,
<argument><expr><sizeof>sizeof <name><name>ireq</name><operator>.</operator><name>ifr_ifrn</name><operator>.</operator><name>ifrn_name</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ireq</name><operator>.</operator><name>u</name><operator>.</operator><name>data</name><operator>.</operator><name>length</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ireq</name><operator>.</operator><name>u</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>sock_fd</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ireq</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>must_do_on_close</name></name> <operator>|=</operator> <name>MUST_CLEAR_RFMON</name></expr>;</expr_stmt>





<expr_stmt><expr><call><name>pcap_add_to_pcaps_to_close</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>




</block_content>}</block></if></if_stmt>





<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ifr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ifr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pcap_strlcpy</name><argument_list>(<argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>, <argument><expr><name>device</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>sock_fd</name></expr></argument>, <argument><expr><name>SIOCGIFFLAGS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ifr</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"%s: Can't get flags"</literal></expr></argument>, <argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>oldflags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ifr</name><operator>.</operator><name>ifr_flags</name></name> <operator>&amp;</operator> <name>IFF_UP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>oldflags</name> <operator>=</operator> <name><name>ifr</name><operator>.</operator><name>ifr_flags</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ifr</name><operator>.</operator><name>ifr_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>IFF_UP</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>sock_fd</name></expr></argument>, <argument><expr><name>SIOCSIFFLAGS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ifr</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"%s: Can't set flags"</literal></expr></argument>,
<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><call><name>pcap_strlcpy</name><argument_list>(<argument><expr><name><name>ireq</name><operator>.</operator><name>ifr_ifrn</name><operator>.</operator><name>ifrn_name</name></name></expr></argument>, <argument><expr><name>device</name></expr></argument>,
<argument><expr><sizeof>sizeof <name><name>ireq</name><operator>.</operator><name>ifr_ifrn</name><operator>.</operator><name>ifrn_name</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ireq</name><operator>.</operator><name>u</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <name>IW_MODE_MONITOR</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>sock_fd</name></expr></argument>, <argument><expr><name>SIOCSIWMODE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ireq</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name><name>ifr</name><operator>.</operator><name>ifr_flags</name></name> <operator>=</operator> <name>oldflags</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>sock_fd</name></expr></argument>, <argument><expr><name>SIOCSIFFLAGS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ifr</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"%s: Can't set flags"</literal></expr></argument>,
<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>PCAP_ERROR_RFMON_NOTSUP</name></expr>;</return>
</block_content>}</block></if></if_stmt>










<switch>switch <condition>(<expr><name>montype</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>MONITOR_WEXT</name></expr>:</case>



<break>break;</break>

<case>case <expr><name>MONITOR_HOSTAP</name></expr>:</case>



<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ireq</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>ireq</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pcap_strlcpy</name><argument_list>(<argument><expr><name><name>ireq</name><operator>.</operator><name>ifr_ifrn</name><operator>.</operator><name>ifrn_name</name></name></expr></argument>, <argument><expr><name>device</name></expr></argument>,
<argument><expr><sizeof>sizeof <name><name>ireq</name><operator>.</operator><name>ifr_ifrn</name><operator>.</operator><name>ifrn_name</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ireq</name><operator>.</operator><name>u</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>sock_fd</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ireq</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>




<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ireq</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>ireq</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pcap_strlcpy</name><argument_list>(<argument><expr><name><name>ireq</name><operator>.</operator><name>ifr_ifrn</name><operator>.</operator><name>ifrn_name</name></name></expr></argument>, <argument><expr><name>device</name></expr></argument>,
<argument><expr><sizeof>sizeof <name><name>ireq</name><operator>.</operator><name>ifr_ifrn</name><operator>.</operator><name>ifrn_name</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ireq</name><operator>.</operator><name>u</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>sock_fd</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ireq</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>




<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ireq</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>ireq</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pcap_strlcpy</name><argument_list>(<argument><expr><name><name>ireq</name><operator>.</operator><name>ifr_ifrn</name><operator>.</operator><name>ifrn_name</name></name></expr></argument>, <argument><expr><name>device</name></expr></argument>,
<argument><expr><sizeof>sizeof <name><name>ireq</name><operator>.</operator><name>ifr_ifrn</name><operator>.</operator><name>ifrn_name</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ireq</name><operator>.</operator><name>u</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ioctl</name><argument_list>(<argument><expr><name>sock_fd</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ireq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>MONITOR_PRISM</name></expr>:</case>



<break>break;</break>

<case>case <expr><name>MONITOR_PRISM54</name></expr>:</case>



<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ireq</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>ireq</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pcap_strlcpy</name><argument_list>(<argument><expr><name><name>ireq</name><operator>.</operator><name>ifr_ifrn</name><operator>.</operator><name>ifrn_name</name></name></expr></argument>, <argument><expr><name>device</name></expr></argument>,
<argument><expr><sizeof>sizeof <name><name>ireq</name><operator>.</operator><name>ifr_ifrn</name><operator>.</operator><name>ifrn_name</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ireq</name><operator>.</operator><name>u</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ioctl</name><argument_list>(<argument><expr><name>sock_fd</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ireq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>MONITOR_ACX100</name></expr>:</case>



<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ireq</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>ireq</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pcap_strlcpy</name><argument_list>(<argument><expr><name><name>ireq</name><operator>.</operator><name>ifr_ifrn</name><operator>.</operator><name>ifrn_name</name></name></expr></argument>, <argument><expr><name>device</name></expr></argument>,
<argument><expr><sizeof>sizeof <name><name>ireq</name><operator>.</operator><name>ifr_ifrn</name><operator>.</operator><name>ifrn_name</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>sock_fd</name></expr></argument>, <argument><expr><name>SIOCGIWFREQ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ireq</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"%s: SIOCGIWFREQ"</literal></expr></argument>, <argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>channel</name> <operator>=</operator> <name><name>ireq</name><operator>.</operator><name>u</name><operator>.</operator><name>freq</name><operator>.</operator><name>m</name></name></expr>;</expr_stmt>





<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ireq</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>ireq</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pcap_strlcpy</name><argument_list>(<argument><expr><name><name>ireq</name><operator>.</operator><name>ifr_ifrn</name><operator>.</operator><name>ifrn_name</name></name></expr></argument>, <argument><expr><name>device</name></expr></argument>,
<argument><expr><sizeof>sizeof <name><name>ireq</name><operator>.</operator><name>ifr_ifrn</name><operator>.</operator><name>ifrn_name</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>channel</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ireq</name><operator>.</operator><name>u</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ioctl</name><argument_list>(<argument><expr><name>sock_fd</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ireq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>MONITOR_RT2500</name></expr>:</case>




<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ireq</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>ireq</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pcap_strlcpy</name><argument_list>(<argument><expr><name><name>ireq</name><operator>.</operator><name>ifr_ifrn</name><operator>.</operator><name>ifrn_name</name></name></expr></argument>, <argument><expr><name>device</name></expr></argument>,
<argument><expr><sizeof>sizeof <name><name>ireq</name><operator>.</operator><name>ifr_ifrn</name><operator>.</operator><name>ifrn_name</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ireq</name><operator>.</operator><name>u</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ioctl</name><argument_list>(<argument><expr><name>sock_fd</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ireq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>MONITOR_RT2570</name></expr>:</case>



<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ireq</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>ireq</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pcap_strlcpy</name><argument_list>(<argument><expr><name><name>ireq</name><operator>.</operator><name>ifr_ifrn</name><operator>.</operator><name>ifrn_name</name></name></expr></argument>, <argument><expr><name>device</name></expr></argument>,
<argument><expr><sizeof>sizeof <name><name>ireq</name><operator>.</operator><name>ifr_ifrn</name><operator>.</operator><name>ifrn_name</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ireq</name><operator>.</operator><name>u</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ioctl</name><argument_list>(<argument><expr><name>sock_fd</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ireq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>MONITOR_RT73</name></expr>:</case>



<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ireq</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>ireq</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pcap_strlcpy</name><argument_list>(<argument><expr><name><name>ireq</name><operator>.</operator><name>ifr_ifrn</name><operator>.</operator><name>ifrn_name</name></name></expr></argument>, <argument><expr><name>device</name></expr></argument>,
<argument><expr><sizeof>sizeof <name><name>ireq</name><operator>.</operator><name>ifr_ifrn</name><operator>.</operator><name>ifrn_name</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ireq</name><operator>.</operator><name>u</name><operator>.</operator><name>data</name><operator>.</operator><name>length</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ireq</name><operator>.</operator><name>u</name><operator>.</operator><name>data</name><operator>.</operator><name>pointer</name></name> <operator>=</operator> <literal type="string">"1"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ireq</name><operator>.</operator><name>u</name><operator>.</operator><name>data</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ioctl</name><argument_list>(<argument><expr><name>sock_fd</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ireq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>MONITOR_RTL8XXX</name></expr>:</case>



<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ireq</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>ireq</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pcap_strlcpy</name><argument_list>(<argument><expr><name><name>ireq</name><operator>.</operator><name>ifr_ifrn</name><operator>.</operator><name>ifrn_name</name></name></expr></argument>, <argument><expr><name>device</name></expr></argument>,
<argument><expr><sizeof>sizeof <name><name>ireq</name><operator>.</operator><name>ifr_ifrn</name><operator>.</operator><name>ifrn_name</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ireq</name><operator>.</operator><name>u</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ioctl</name><argument_list>(<argument><expr><name>sock_fd</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ireq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>




<if_stmt><if>if <condition>(<expr><name>oldflags</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ifr</name><operator>.</operator><name>ifr_flags</name></name> <operator>=</operator> <name>oldflags</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>sock_fd</name></expr></argument>, <argument><expr><name>SIOCSIFFLAGS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ifr</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"%s: Can't set flags"</literal></expr></argument>,
<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>SIOCSIWMODE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ireq</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr><literal type="string">"Can't restore interface wireless mode (SIOCSIWMODE failed: %s).\n"</literal>
<literal type="string">"Please adjust manually.\n"</literal></expr></argument>,
<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>must_do_on_close</name></name> <operator>|=</operator> <name>MUST_CLEAR_RFMON</name></expr>;</expr_stmt>




<expr_stmt><expr><call><name>pcap_add_to_pcaps_to_close</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>enter_rfmon_mode</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sock_fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>device</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBNL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>IW_MODE_MONITOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBNL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>enter_rfmon_mode_mac80211</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>sock_fd</name></expr></argument>, <argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IW_MODE_MONITOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>enter_rfmon_mode_wext</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>sock_fd</name></expr></argument>, <argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LINUX_NET_TSTAMP_H</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PACKET_TIMESTAMP</name></expr></argument>)</argument_list></call></expr></cpp:if>



<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>soft_timestamping_val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pcap_tstamp_val</name></decl>;</decl_stmt>
}</block> <decl><name><name>sof_ts_type_map</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>SOF_TIMESTAMPING_SOFTWARE</name></expr>, <expr><name>PCAP_TSTAMP_HOST</name></expr> }</block></expr>,
<expr><block>{ <expr><name>SOF_TIMESTAMPING_SYS_HARDWARE</name></expr>, <expr><name>PCAP_TSTAMP_ADAPTER</name></expr> }</block></expr>,
<expr><block>{ <expr><name>SOF_TIMESTAMPING_RAW_HARDWARE</name></expr>, <expr><name>PCAP_TSTAMP_ADAPTER_UNSYNCED</name></expr> }</block></expr>
}</block></expr></init></decl>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_SOF_TIMESTAMPING_TYPES</name></cpp:macro> <cpp:value>(sizeof sof_ts_type_map / sizeof sof_ts_type_map[0])</cpp:value></cpp:define>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>iface_set_all_ts_types</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>tstamp_type_count</name></name> <operator>=</operator> <name>NUM_SOF_TIMESTAMPING_TYPES</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>tstamp_type_list</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>NUM_SOF_TIMESTAMPING_TYPES</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>u_int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_SOF_TIMESTAMPING_TYPES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>tstamp_type_list</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>sof_ts_type_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pcap_tstamp_val</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ETHTOOL_GET_TS_INFO</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><specifier>static</specifier> <name>int</name></type>
<name>iface_ethtool_get_ts_info</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ebuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ifreq</name></name></type> <name>ifr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ethtool_ts_info</name></name></type> <name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_ts_types</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>








<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><literal type="string">"any"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>tstamp_type_list</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>PF_UNIX</name></expr></argument>, <argument><expr><name>SOCK_RAW</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"socket for SIOCETHTOOL(ETHTOOL_GET_TS_INFO)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ifr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ifr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pcap_strlcpy</name><argument_list>(<argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>, <argument><expr><name>device</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name><operator>.</operator><name>cmd</name></name> <operator>=</operator> <name>ETHTOOL_GET_TS_INFO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ifr</name><operator>.</operator><name>ifr_data</name></name> <operator>=</operator> <operator>(</operator><name>caddr_t</name><operator>)</operator><operator>&amp;</operator><name>info</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SIOCETHTOOL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ifr</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>save_errno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>save_errno</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>EOPNOTSUPP</name></expr>:</case>
<case>case <expr><name>EINVAL</name></expr>:</case>





<expr_stmt><expr><call><name>iface_set_all_ts_types</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>ENODEV</name></expr>:</case>






<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>tstamp_type_list</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<default>default:</default>



<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>save_errno</name></expr></argument>,
<argument><expr><literal type="string">"%s: SIOCETHTOOL(ETHTOOL_GET_TS_INFO) ioctl failed"</literal></expr></argument>,
<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>info</name><operator>.</operator><name>rx_filters</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>HWTSTAMP_FILTER_ALL</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>









<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>tstamp_type_list</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>num_ts_types</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_SOF_TIMESTAMPING_TYPES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>so_timestamping</name></name> <operator>&amp;</operator> <name><name>sof_ts_type_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>soft_timestamping_val</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>num_ts_types</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>tstamp_type_count</name></name> <operator>=</operator> <name>num_ts_types</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>num_ts_types</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>tstamp_type_list</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>num_ts_types</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>u_int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_SOF_TIMESTAMPING_TYPES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>so_timestamping</name></name> <operator>&amp;</operator> <name><name>sof_ts_type_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>soft_timestamping_val</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>tstamp_type_list</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>sof_ts_type_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pcap_tstamp_val</name></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>tstamp_type_list</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>iface_ethtool_get_ts_info</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><name>ebuf</name></type> <name>_U_</name></decl></parameter>)</parameter_list>
<block>{<block_content>







<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><literal type="string">"any"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>tstamp_type_list</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><call><name>iface_set_all_ts_types</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PACKET_RING</name></expr></argument>)</argument_list></call></expr></cpp:if>




















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIOCETHTOOL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>ETHTOOL_GTSO</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ETHTOOL_GUFO</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ETHTOOL_GGSO</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ETHTOOL_GFLAGS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ETHTOOL_GGRO</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>iface_ethtool_flag_ioctl</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cmd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmdname</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>eperm_ok</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ifreq</name></name></type> <name>ifr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ethtool_value</name></name></type> <name>eval</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ifr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ifr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pcap_strlcpy</name><argument_list>(<argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>, <argument><expr><name><name>handle</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>device</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eval</name><operator>.</operator><name>cmd</name></name> <operator>=</operator> <name>cmd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eval</name><operator>.</operator><name>data</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ifr</name><operator>.</operator><name>ifr_data</name></name> <operator>=</operator> <operator>(</operator><name>caddr_t</name><operator>)</operator><operator>&amp;</operator><name>eval</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>SIOCETHTOOL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ifr</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EOPNOTSUPP</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>EINVAL</name> <operator>||</operator>
<operator>(</operator><name>errno</name> <operator>==</operator> <name>EPERM</name> <operator>&amp;&amp;</operator> <name>eperm_ok</name><operator>)</operator></expr>)</condition> <block>{<block_content>






<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"%s: SIOCETHTOOL(%s) ioctl failed"</literal></expr></argument>,
<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>device</name></name></expr></argument>, <argument><expr><name>cmdname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name><name>eval</name><operator>.</operator><name>data</name></name></expr>;</return>
</block_content>}</block></function>
















<function><type><specifier>static</specifier> <name>int</name></type>
<name>iface_get_offload</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ETHTOOL_GTSO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>iface_ethtool_flag_ioctl</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>ETHTOOL_GTSO</name></expr></argument>, <argument><expr><literal type="string">"ETHTOOL_GTSO"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ETHTOOL_GGSO</name></expr></argument>)</argument_list></call></expr></cpp:if>





<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>iface_ethtool_flag_ioctl</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>ETHTOOL_GGSO</name></expr></argument>, <argument><expr><literal type="string">"ETHTOOL_GGSO"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ETHTOOL_GFLAGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>iface_ethtool_flag_ioctl</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>ETHTOOL_GFLAGS</name></expr></argument>, <argument><expr><literal type="string">"ETHTOOL_GFLAGS"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&amp;</operator> <name>ETH_FLAG_LRO</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ETHTOOL_GGRO</name></expr></argument>)</argument_list></call></expr></cpp:if>





<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>iface_ethtool_flag_ioctl</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>ETHTOOL_GGRO</name></expr></argument>, <argument><expr><literal type="string">"ETHTOOL_GGRO"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ETHTOOL_GUFO</name></expr></argument>)</argument_list></call></expr></cpp:if>






<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>iface_ethtool_flag_ioctl</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>ETHTOOL_GUFO</name></expr></argument>, <argument><expr><literal type="string">"ETHTOOL_GUFO"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>iface_get_offload</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier><name>handle</name></type> <name>_U_</name></decl></parameter>)</parameter_list>
<block>{<block_content>




<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<function><type><specifier>static</specifier> <name>int</name></type>
<name>activate_old</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_linux</name></name> <modifier>*</modifier></type><name>handlep</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>arptype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>ifreq</name></name></type> <name>ifr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>device</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>device</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>utsname</name></name></type> <name>utsname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mtu</name></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><literal type="string">"any"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_strlcpy</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><literal type="string">"pcap_activate: The \"any\" device isn't supported on 2.0[.x]-kernel systems"</literal></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>PF_INET</name></expr></argument>, <argument><expr><name>SOCK_PACKET</name></expr></argument>, <argument><expr><call><name>htons</name><argument_list>(<argument><expr><name>ETH_P_ALL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>EPERM</name> <operator>||</operator> <name>err</name> <operator>==</operator> <name>EACCES</name></expr>)</condition> <block>{<block_content>




<return>return <expr><name>PCAP_ERROR_PERM_DENIED</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>



<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>sock_packet</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>cooked</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>iface_bind_old</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>device</name></expr></argument>, <argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><name>arptype</name> <operator>=</operator> <call><name>iface_get_arptype</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>device</name></expr></argument>, <argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>arptype</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return></block_content></block></if></if_stmt>





<expr_stmt><expr><call><name>map_arphrd_to_dlt</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>arptype</name></expr></argument>, <argument><expr><name>device</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>linktype</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"unknown arptype %d"</literal></expr></argument>, <argument><expr><name>arptype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>promisc</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ifr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ifr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pcap_strlcpy</name><argument_list>(<argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>, <argument><expr><name>device</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>SIOCGIFFLAGS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ifr</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"SIOCGIFFLAGS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ifr</name><operator>.</operator><name>ifr_flags</name></name> <operator>&amp;</operator> <name>IFF_PROMISC</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>












<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pcap_do_addexit</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>





<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ifr</name><operator>.</operator><name>ifr_flags</name></name> <operator>|=</operator> <name>IFF_PROMISC</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>SIOCSIFFLAGS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ifr</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"SIOCSIFFLAGS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>must_do_on_close</name></name> <operator>|=</operator> <name>MUST_CLEAR_PROMISC</name></expr>;</expr_stmt>





<expr_stmt><expr><call><name>pcap_add_to_pcaps_to_close</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><call><name>uname</name><argument_list>(<argument><expr><operator>&amp;</operator><name>utsname</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>strncmp</name><argument_list>(<argument><expr><name><name>utsname</name><operator>.</operator><name>release</name></name></expr></argument>, <argument><expr><literal type="string">"2.0"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>










































<expr_stmt><expr><name>mtu</name> <operator>=</operator> <call><name>iface_get_mtu</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>device</name></expr></argument>, <argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>mtu</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>PCAP_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>bufsize</name></name> <operator>=</operator> <name>MAX_LINKHEADER_SIZE</name> <operator>+</operator> <name>mtu</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>bufsize</name></name> <operator>&lt;</operator> <operator>(</operator><name>u_int</name><operator>)</operator><name><name>handle</name><operator>-&gt;</operator><name>snapshot</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>bufsize</name></name> <operator>=</operator> <operator>(</operator><name>u_int</name><operator>)</operator><name><name>handle</name><operator>-&gt;</operator><name>snapshot</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

















<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>bufsize</name></name> <operator>=</operator> <operator>(</operator><name>u_int</name><operator>)</operator><name><name>handle</name><operator>-&gt;</operator><name>snapshot</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>





<expr_stmt><expr><name><name>handle</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>





<expr_stmt><expr><name><name>handlep</name><operator>-&gt;</operator><name>vlan_offset</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>iface_bind_old</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ebuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr</name></name></type> <name>saddr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>socklen_t</name></type> <name>errlen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>saddr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>saddr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pcap_strlcpy</name><argument_list>(<argument><expr><name><name>saddr</name><operator>.</operator><name>sa_data</name></name></expr></argument>, <argument><expr><name>device</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>saddr</name><operator>.</operator><name>sa_data</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>bind</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>saddr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>saddr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"bind"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><call><name>getsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_ERROR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"getsockopt (SO_ERROR)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>err</name></expr></argument>, <argument><expr><literal type="string">"bind"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type>
<name>iface_get_mtu</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ebuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ifreq</name></name></type> <name>ifr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>device</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>BIGGER_THAN_ALL_MTUS</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ifr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ifr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pcap_strlcpy</name><argument_list>(<argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>, <argument><expr><name>device</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SIOCGIFMTU</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ifr</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"SIOCGIFMTU"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>ifr</name><operator>.</operator><name>ifr_mtu</name></name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>iface_get_arptype</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ebuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>ifreq</name></name></type> <name>ifr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ifr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ifr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pcap_strlcpy</name><argument_list>(<argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>, <argument><expr><name>device</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SIOCGIFHWADDR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ifr</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENODEV</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>PCAP_ERROR_NO_SUCH_DEVICE</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>PCAP_ERROR</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name>ebuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"SIOCGIFHWADDR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>ifr</name><operator>.</operator><name>ifr_hwaddr</name><operator>.</operator><name>sa_family</name></name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SO_ATTACH_FILTER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>fix_program</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sock_fprog</name></name> <modifier>*</modifier></type><name>fcode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_mmapped</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_linux</name></name> <modifier>*</modifier></type><name>handlep</name> <init>= <expr><name><name>handle</name><operator>-&gt;</operator><name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>prog_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name><name>struct</name> <name>bpf_insn</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bpf_insn</name></name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>





<expr_stmt><expr><name>prog_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>handle</name><operator>-&gt;</operator><name>fcode</name><operator>.</operator><name>bf_insns</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>handle</name><operator>-&gt;</operator><name>fcode</name><operator>.</operator><name>bf_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>handle</name><operator>-&gt;</operator><name>fcode</name><operator>.</operator><name>bf_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <operator>(</operator>struct <name>bpf_insn</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>prog_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"malloc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fcode</name><operator>.</operator><name>bf_insns</name></name></expr></argument>, <argument><expr><name>prog_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fcode</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fcode</name><operator>-&gt;</operator><name>filter</name></name> <operator>=</operator> <operator>(</operator>struct <name>sock_filter</name> <operator>*</operator><operator>)</operator> <name>f</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>



<switch>switch <condition>(<expr><call><name>BPF_CLASS</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>BPF_RET</name></expr>:</case>




<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_mmapped</name></expr>)</condition> <block>{<block_content>





<if_stmt><if>if <condition>(<expr><call><name>BPF_MODE</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BPF_K</name></expr>)</condition> <block>{<block_content>















<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>k</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>k</name></name> <operator>=</operator> <name>MAXIMUM_SNAPLEN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>BPF_LD</name></expr>:</case>
<case>case <expr><name>BPF_LDX</name></expr>:</case>




<switch>switch <condition>(<expr><call><name>BPF_MODE</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>BPF_ABS</name></expr>:</case>
<case>case <expr><name>BPF_IND</name></expr>:</case>
<case>case <expr><name>BPF_MSH</name></expr>:</case>



<if_stmt><if>if <condition>(<expr><name><name>handlep</name><operator>-&gt;</operator><name>cooked</name></name></expr>)</condition> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><call><name>fix_offset</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>





<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>fix_offset</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>bpf_insn</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>






<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>k</name></name> <operator>&gt;=</operator> <operator>(</operator><name>bpf_u_int32</name><operator>)</operator><name>SKF_AD_OFF</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>handle</name><operator>-&gt;</operator><name>linktype</name></name> <operator>==</operator> <name>DLT_LINUX_SLL2</name></expr>)</condition> <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>k</name></name> <operator>&gt;=</operator> <name>SLL2_HDR_LEN</name></expr>)</condition> <block>{<block_content>






<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>k</name></name> <operator>-=</operator> <name>SLL2_HDR_LEN</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>k</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>k</name></name> <operator>=</operator> <name>SKF_AD_OFF</name> <operator>+</operator> <name>SKF_AD_PROTOCOL</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>k</name></name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>k</name></name> <operator>=</operator> <name>SKF_AD_OFF</name> <operator>+</operator> <name>SKF_AD_PKTTYPE</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>bpf_int32</name><operator>)</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>k</name></name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>





<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>



<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>k</name></name> <operator>&gt;=</operator> <name>SLL_HDR_LEN</name></expr>)</condition> <block>{<block_content>






<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>k</name></name> <operator>-=</operator> <name>SLL_HDR_LEN</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>k</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>k</name></name> <operator>=</operator> <name>SKF_AD_OFF</name> <operator>+</operator> <name>SKF_AD_PKTTYPE</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>k</name></name> <operator>==</operator> <literal type="number">14</literal></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>k</name></name> <operator>=</operator> <name>SKF_AD_OFF</name> <operator>+</operator> <name>SKF_AD_PROTOCOL</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>bpf_int32</name><operator>)</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>k</name></name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>





<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>set_kernel_filter</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sock_fprog</name></name> <modifier>*</modifier></type><name>fcode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>total_filter_on</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>save_errno</name></decl>;</decl_stmt>
































<if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_ATTACH_FILTER</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>total_fcode</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>total_fcode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>drain</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>




<expr_stmt><expr><name>total_filter_on</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>







<expr_stmt><expr><name>save_mode</name> <operator>=</operator> <call><name>fcntl</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>F_GETFL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>save_mode</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"can't get FD flags when changing filter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fcntl</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>F_SETFL</name></expr></argument>, <argument><expr><name>save_mode</name> <operator>|</operator> <name>O_NONBLOCK</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"can't set nonblocking mode when changing filter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><call><name>recv</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>drain</name></expr></argument>, <argument><expr><sizeof>sizeof <name>drain</name></sizeof></expr></argument>, <argument><expr><name>MSG_TRUNC</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<empty_stmt>;</empty_stmt></block_content></block></while>
<expr_stmt><expr><name>save_errno</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>save_errno</name> <operator>!=</operator> <name>EAGAIN</name></expr>)</condition> <block>{<block_content>






<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fcntl</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>F_SETFL</name></expr></argument>, <argument><expr><name>save_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>reset_kernel_filter</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><name>save_errno</name></expr></argument>,
<argument><expr><literal type="string">"recv failed when changing filter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fcntl</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>F_SETFL</name></expr></argument>, <argument><expr><name>save_mode</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"can't restore FD flags when changing filter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>setsockopt</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_ATTACH_FILTER</name></expr></argument>,
<argument><expr><name>fcode</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>fcode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>total_filter_on</name></expr>)</condition> <block>{<block_content>










<expr_stmt><expr><name>save_errno</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><call><name>reset_kernel_filter</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><literal type="string">"can't remove kernel total filter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>save_errno</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>reset_kernel_filter</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name>int</name></type> <name>dummy</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>setsockopt</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_DETACH_FILTER</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dummy</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>ENOENT</name> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>ENONET</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type>
<name>pcap_set_protocol_linux</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>protocol</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>pcap_check_activated</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>PCAP_ERROR_ACTIVATED</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>opt</name><operator>.</operator><name>protocol</name></name> <operator>=</operator> <name>protocol</name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>pcap_lib_version</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PACKET_RING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TPACKET3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><operator>(</operator><name>PCAP_VERSION_STRING</name> <literal type="string">" (with TPACKET_V3)"</literal><operator>)</operator></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TPACKET2</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<return>return <expr><operator>(</operator><name>PCAP_VERSION_STRING</name> <literal type="string">" (with TPACKET_V2)"</literal><operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>PCAP_VERSION_STRING</name> <literal type="string">" (with TPACKET_V1)"</literal><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><operator>(</operator><name>PCAP_VERSION_STRING</name> <literal type="string">" (without TPACKET)"</literal><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function></block_content></block></if></if_stmt></block_content></block></function>
</unit>
