<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libpcap/rpcap-protocol.h">
































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__RPCAP_PROTOCOL_H__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__RPCAP_PROTOCOL_H__</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RPCAP_DEFAULT_NETPORT</name></cpp:macro> <cpp:value>"2002"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RPCAP_DEFAULT_NETPORT_ACTIVE</name></cpp:macro> <cpp:value>"2003"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RPCAP_DEFAULT_NETADDR</name></cpp:macro> <cpp:value>""</cpp:value></cpp:define>








































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RPCAP_MIN_VERSION</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RPCAP_MAX_VERSION</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>RPCAP_MIN_VERSION</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RPCAP_VERSION_IS_SUPPORTED</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((v) &lt;= RPCAP_MAX_VERSION)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RPCAP_VERSION_IS_SUPPORTED</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((v) &gt;= RPCAP_MIN_VERSION &amp;&amp; (v) &lt;= RPCAP_MAX_VERSION)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RPCAP_HOSTLIST_SEP</name></cpp:macro> <cpp:value>" ,;\n\r"</cpp:value></cpp:define>




























<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>uint8</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>short</name></type> <name>uint16</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>uint32</name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name>int32</name>;</typedef>


<struct>struct <name>rpcap_header</name>
<block>{
<decl_stmt><decl><type><name>uint8</name></type> <name>ver</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16</name></type> <name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32</name></type> <name>plen</name></decl>;</decl_stmt>
}</block>;</struct>








<struct>struct <name>rpcap_authreply</name>
<block>{
<decl_stmt><decl><type><name>uint8</name></type> <name>minvers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8</name></type> <name>maxvers</name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>rpcap_findalldevs_if</name>
<block>{
<decl_stmt><decl><type><name>uint16</name></type> <name>namelen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16</name></type> <name>desclen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16</name></type> <name>naddr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16</name></type> <name>dummy</name></decl>;</decl_stmt>
}</block>;</struct>











































<struct>struct <name>rpcap_sockaddr</name>
<block>{
<decl_stmt><decl><type><name>uint16</name></type> <name>family</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>data</name><index>[<expr><literal type="number">128</literal><operator>-</operator><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RPCAP_AF_INET</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<struct>struct <name>rpcap_sockaddr_in</name>
<block>{
<decl_stmt><decl><type><name>uint16</name></type> <name>family</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16</name></type> <name>port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32</name></type> <name>addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8</name></type> <name><name>zero</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RPCAP_AF_INET6</name></cpp:macro> <cpp:value>23</cpp:value></cpp:define>
<struct>struct <name>rpcap_sockaddr_in6</name>
<block>{
<decl_stmt><decl><type><name>uint16</name></type> <name>family</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16</name></type> <name>port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32</name></type> <name>flowinfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8</name></type> <name><name>addr</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32</name></type> <name>scope_id</name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>rpcap_findalldevs_ifaddr</name>
<block>{
<decl_stmt><decl><type><name><name>struct</name> <name>rpcap_sockaddr</name></name></type> <name>addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rpcap_sockaddr</name></name></type> <name>netmask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rpcap_sockaddr</name></name></type> <name>broadaddr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rpcap_sockaddr</name></name></type> <name>dstaddr</name></decl>;</decl_stmt>
}</block>;</struct>






<struct>struct <name>rpcap_openreply</name>
<block>{
<decl_stmt><decl><type><name>int32</name></type> <name>linktype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32</name></type> <name>tzoff</name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>rpcap_startcapreq</name>
<block>{
<decl_stmt><decl><type><name>uint32</name></type> <name>snaplen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32</name></type> <name>read_timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16</name></type> <name>portdata</name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>rpcap_startcapreply</name>
<block>{
<decl_stmt><decl><type><name>int32</name></type> <name>bufsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16</name></type> <name>portdata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16</name></type> <name>dummy</name></decl>;</decl_stmt>
}</block>;</struct>







<struct>struct <name>rpcap_pkthdr</name>
<block>{
<decl_stmt><decl><type><name>uint32</name></type> <name>timestamp_sec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32</name></type> <name>timestamp_usec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32</name></type> <name>caplen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32</name></type> <name>npkt</name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>rpcap_filter</name>
<block>{
<decl_stmt><decl><type><name>uint16</name></type> <name>filtertype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16</name></type> <name>dummy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32</name></type> <name>nitems</name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>rpcap_filterbpf_insn</name>
<block>{
<decl_stmt><decl><type><name>uint16</name></type> <name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8</name></type> <name>jt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8</name></type> <name>jf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32</name></type> <name>k</name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>rpcap_auth</name>
<block>{
<decl_stmt><decl><type><name>uint16</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16</name></type> <name>dummy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16</name></type> <name>slen1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16</name></type> <name>slen2</name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>rpcap_stats</name>
<block>{
<decl_stmt><decl><type><name>uint32</name></type> <name>ifrecv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32</name></type> <name>ifdrop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32</name></type> <name>krnldrop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32</name></type> <name>svrcapt</name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>rpcap_sampling</name>
<block>{
<decl_stmt><decl><type><name>uint8</name></type> <name>method</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8</name></type> <name>dummy1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16</name></type> <name>dummy2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32</name></type> <name>value</name></decl>;</decl_stmt>
}</block>;</struct>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RPCAP_MSG_IS_REPLY</name></cpp:macro> <cpp:value>0x080</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RPCAP_MSG_ERROR</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RPCAP_MSG_FINDALLIF_REQ</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RPCAP_MSG_OPEN_REQ</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RPCAP_MSG_STARTCAP_REQ</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RPCAP_MSG_UPDATEFILTER_REQ</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RPCAP_MSG_CLOSE</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RPCAP_MSG_PACKET</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RPCAP_MSG_AUTH_REQ</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RPCAP_MSG_STATS_REQ</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RPCAP_MSG_ENDCAP_REQ</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RPCAP_MSG_SETSAMPLING_REQ</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RPCAP_MSG_FINDALLIF_REPLY</name></cpp:macro> <cpp:value>(RPCAP_MSG_FINDALLIF_REQ | RPCAP_MSG_IS_REPLY)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RPCAP_MSG_OPEN_REPLY</name></cpp:macro> <cpp:value>(RPCAP_MSG_OPEN_REQ | RPCAP_MSG_IS_REPLY)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RPCAP_MSG_STARTCAP_REPLY</name></cpp:macro> <cpp:value>(RPCAP_MSG_STARTCAP_REQ | RPCAP_MSG_IS_REPLY)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RPCAP_MSG_UPDATEFILTER_REPLY</name></cpp:macro> <cpp:value>(RPCAP_MSG_UPDATEFILTER_REQ | RPCAP_MSG_IS_REPLY)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RPCAP_MSG_AUTH_REPLY</name></cpp:macro> <cpp:value>(RPCAP_MSG_AUTH_REQ | RPCAP_MSG_IS_REPLY)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RPCAP_MSG_STATS_REPLY</name></cpp:macro> <cpp:value>(RPCAP_MSG_STATS_REQ | RPCAP_MSG_IS_REPLY)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RPCAP_MSG_ENDCAP_REPLY</name></cpp:macro> <cpp:value>(RPCAP_MSG_ENDCAP_REQ | RPCAP_MSG_IS_REPLY)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RPCAP_MSG_SETSAMPLING_REPLY</name></cpp:macro> <cpp:value>(RPCAP_MSG_SETSAMPLING_REQ | RPCAP_MSG_IS_REPLY)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RPCAP_STARTCAPREQ_FLAG_PROMISC</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RPCAP_STARTCAPREQ_FLAG_DGRAM</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RPCAP_STARTCAPREQ_FLAG_SERVEROPEN</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RPCAP_STARTCAPREQ_FLAG_INBOUND</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RPCAP_STARTCAPREQ_FLAG_OUTBOUND</name></cpp:macro> <cpp:value>0x00000010</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RPCAP_UPDATEFILTER_BPF</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_ERR_NETW</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_ERR_INITTIMEOUT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_ERR_AUTH</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_ERR_FINDALLIF</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_ERR_NOREMOTEIF</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_ERR_OPEN</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_ERR_UPDATEFILTER</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_ERR_GETSTATS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_ERR_READEX</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_ERR_HOSTNOAUTH</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_ERR_REMOTEACCEPT</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_ERR_STARTCAPTURE</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_ERR_ENDCAPTURE</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_ERR_RUNTIMETIMEOUT</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_ERR_SETSAMPLING</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_ERR_WRONGMSG</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_ERR_WRONGVER</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_ERR_AUTH_FAILED</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_ERR_TLS_REQUIRED</name></cpp:macro> <cpp:value>19</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_ERR_AUTH_TYPE_NOTSUP</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RPCAP_NETBUF_SIZE</name></cpp:macro> <cpp:value>64000</cpp:value></cpp:define>







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sockutils.h"</cpp:file></cpp:include>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>rpcap_createhdr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rpcap_header</name></name> <modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><name>uint8</name></type> <name>ver</name></decl></parameter>, <parameter><decl><type><name>uint8</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>uint16</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>length</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rpcap_msg_type_string</name><parameter_list>(<parameter><decl><type><name>uint8</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>rpcap_senderror</name><parameter_list>(<parameter><decl><type><name>SOCKET</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><name>uint8</name></type> <name>ver</name></decl></parameter>, <parameter><decl><type><name>uint16</name></type> <name>errcode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>error</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
