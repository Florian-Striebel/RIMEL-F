<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libpcap/pcap/sll.h">








































































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lib_pcap_sll_h</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lib_pcap_sll_h</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pcap/pcap-inttypes.h&gt;</cpp:file></cpp:include>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLL_HDR_LEN</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLL_ADDRLEN</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<struct>struct <name>sll_header</name> <block>{
<decl_stmt><decl><type><name>uint16_t</name></type> <name>sll_pkttype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>sll_hatype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>sll_halen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>sll_addr</name><index>[<expr><name>SLL_ADDRLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>sll_protocol</name></decl>;</decl_stmt>
}</block>;</struct>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLL2_HDR_LEN</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<struct>struct <name>sll2_header</name> <block>{
<decl_stmt><decl><type><name>uint16_t</name></type> <name>sll2_protocol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>sll2_reserved_mbz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>sll2_if_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>sll2_hatype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>sll2_pkttype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>sll2_halen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>sll2_addr</name><index>[<expr><name>SLL_ADDRLEN</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINUX_SLL_HOST</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINUX_SLL_BROADCAST</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINUX_SLL_MULTICAST</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINUX_SLL_OTHERHOST</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINUX_SLL_OUTGOING</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINUX_SLL_P_802_3</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINUX_SLL_P_802_2</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINUX_SLL_P_CAN</name></cpp:macro> <cpp:value>0x000C</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINUX_SLL_P_CANFD</name></cpp:macro> <cpp:value>0x000D</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
