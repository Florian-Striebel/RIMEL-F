<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libpcap/pcap/dlt.h">



































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lib_pcap_dlt_h</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lib_pcap_dlt_h</name></cpp:macro></cpp:define>























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_NULL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_EN10MB</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_EN3MB</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_AX25</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_PRONET</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_CHAOS</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_IEEE802</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_ARCNET</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_SLIP</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_PPP</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_FDDI</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_ATM_RFC1483</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OpenBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_RAW</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_RAW</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__NetBSD__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DLT_SLIP_BSDOS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_SLIP_BSDOS</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_PPP_BSDOS</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_SLIP_BSDOS</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_PPP_BSDOS</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OpenBSD__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__NetBSD__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__DragonFly__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_PFSYNC</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_ATM_CLIP</name></cpp:macro> <cpp:value>19</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_REDBACK_SMARTEDGE</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_PPP_SERIAL</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_PPP_ETHER</name></cpp:macro> <cpp:value>51</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_SYMANTEC_FIREWALL</name></cpp:macro> <cpp:value>99</cpp:value></cpp:define>


















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_MATCHING_MIN</name></cpp:macro> <cpp:value>104</cpp:value></cpp:define>















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_C_HDLC</name></cpp:macro> <cpp:value>104</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_CHDLC</name></cpp:macro> <cpp:value>DLT_C_HDLC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_IEEE802_11</name></cpp:macro> <cpp:value>105</cpp:value></cpp:define>














<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_FRELAY</name></cpp:macro> <cpp:value>107</cpp:value></cpp:define>








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OpenBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_LOOP</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_LOOP</name></cpp:macro> <cpp:value>108</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OpenBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_ENC</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_ENC</name></cpp:macro> <cpp:value>109</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_LINUX_SLL</name></cpp:macro> <cpp:value>113</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_LTALK</name></cpp:macro> <cpp:value>114</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_ECONET</name></cpp:macro> <cpp:value>115</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_IPFILTER</name></cpp:macro> <cpp:value>116</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_PFLOG</name></cpp:macro> <cpp:value>117</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_CISCO_IOS</name></cpp:macro> <cpp:value>118</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_PRISM_HEADER</name></cpp:macro> <cpp:value>119</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_AIRONET_HEADER</name></cpp:macro> <cpp:value>120</cpp:value></cpp:define>





























































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_PFSYNC</name></cpp:macro> <cpp:value>121</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_HHDLC</name></cpp:macro> <cpp:value>121</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_IP_OVER_FC</name></cpp:macro> <cpp:value>122</cpp:value></cpp:define>















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_SUNATM</name></cpp:macro> <cpp:value>123</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_RIO</name></cpp:macro> <cpp:value>124</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_PCI_EXP</name></cpp:macro> <cpp:value>125</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_AURORA</name></cpp:macro> <cpp:value>126</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_IEEE802_11_RADIO</name></cpp:macro> <cpp:value>127</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_TZSP</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_ARCNET_LINUX</name></cpp:macro> <cpp:value>129</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_JUNIPER_MLPPP</name></cpp:macro> <cpp:value>130</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_JUNIPER_MLFR</name></cpp:macro> <cpp:value>131</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_JUNIPER_ES</name></cpp:macro> <cpp:value>132</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_JUNIPER_GGSN</name></cpp:macro> <cpp:value>133</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_JUNIPER_MFR</name></cpp:macro> <cpp:value>134</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_JUNIPER_ATM2</name></cpp:macro> <cpp:value>135</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_JUNIPER_SERVICES</name></cpp:macro> <cpp:value>136</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_JUNIPER_ATM1</name></cpp:macro> <cpp:value>137</cpp:value></cpp:define>
















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_APPLE_IP_OVER_IEEE1394</name></cpp:macro> <cpp:value>138</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_MTP2_WITH_PHDR</name></cpp:macro> <cpp:value>139</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_MTP2</name></cpp:macro> <cpp:value>140</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_MTP3</name></cpp:macro> <cpp:value>141</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_SCCP</name></cpp:macro> <cpp:value>142</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_DOCSIS</name></cpp:macro> <cpp:value>143</cpp:value></cpp:define>
















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_LINUX_IRDA</name></cpp:macro> <cpp:value>144</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_IBM_SP</name></cpp:macro> <cpp:value>145</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_IBM_SN</name></cpp:macro> <cpp:value>146</cpp:value></cpp:define>


























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_USER0</name></cpp:macro> <cpp:value>147</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_USER1</name></cpp:macro> <cpp:value>148</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_USER2</name></cpp:macro> <cpp:value>149</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_USER3</name></cpp:macro> <cpp:value>150</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_USER4</name></cpp:macro> <cpp:value>151</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_USER5</name></cpp:macro> <cpp:value>152</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_USER6</name></cpp:macro> <cpp:value>153</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_USER7</name></cpp:macro> <cpp:value>154</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_USER8</name></cpp:macro> <cpp:value>155</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_USER9</name></cpp:macro> <cpp:value>156</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_USER10</name></cpp:macro> <cpp:value>157</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_USER11</name></cpp:macro> <cpp:value>158</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_USER12</name></cpp:macro> <cpp:value>159</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_USER13</name></cpp:macro> <cpp:value>160</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_USER14</name></cpp:macro> <cpp:value>161</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_USER15</name></cpp:macro> <cpp:value>162</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_IEEE802_11_RADIO_AVS</name></cpp:macro> <cpp:value>163</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_JUNIPER_MONITOR</name></cpp:macro> <cpp:value>164</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_BACNET_MS_TP</name></cpp:macro> <cpp:value>165</cpp:value></cpp:define>















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_PPP_PPPD</name></cpp:macro> <cpp:value>166</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_PPP_WITH_DIRECTION</name></cpp:macro> <cpp:value>DLT_PPP_PPPD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_LINUX_PPP_WITHDIRECTION</name></cpp:macro> <cpp:value>DLT_PPP_PPPD</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_JUNIPER_PPPOE</name></cpp:macro> <cpp:value>167</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_JUNIPER_PPPOE_ATM</name></cpp:macro> <cpp:value>168</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_GPRS_LLC</name></cpp:macro> <cpp:value>169</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_GPF_T</name></cpp:macro> <cpp:value>170</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_GPF_F</name></cpp:macro> <cpp:value>171</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_GCOM_T1E1</name></cpp:macro> <cpp:value>172</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_GCOM_SERIAL</name></cpp:macro> <cpp:value>173</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_JUNIPER_PIC_PEER</name></cpp:macro> <cpp:value>174</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_ERF_ETH</name></cpp:macro> <cpp:value>175</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_ERF_POS</name></cpp:macro> <cpp:value>176</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_LINUX_LAPD</name></cpp:macro> <cpp:value>177</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_JUNIPER_ETHER</name></cpp:macro> <cpp:value>178</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_JUNIPER_PPP</name></cpp:macro> <cpp:value>179</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_JUNIPER_FRELAY</name></cpp:macro> <cpp:value>180</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_JUNIPER_CHDLC</name></cpp:macro> <cpp:value>181</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_MFR</name></cpp:macro> <cpp:value>182</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_JUNIPER_VP</name></cpp:macro> <cpp:value>183</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_A429</name></cpp:macro> <cpp:value>184</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_A653_ICM</name></cpp:macro> <cpp:value>185</cpp:value></cpp:define>


















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_USB_FREEBSD</name></cpp:macro> <cpp:value>186</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_USB</name></cpp:macro> <cpp:value>186</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_BLUETOOTH_HCI_H4</name></cpp:macro> <cpp:value>187</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_IEEE802_16_MAC_CPS</name></cpp:macro> <cpp:value>188</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_USB_LINUX</name></cpp:macro> <cpp:value>189</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_CAN20B</name></cpp:macro> <cpp:value>190</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_IEEE802_15_4_LINUX</name></cpp:macro> <cpp:value>191</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_PPI</name></cpp:macro> <cpp:value>192</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_IEEE802_16_MAC_CPS_RADIO</name></cpp:macro> <cpp:value>193</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_JUNIPER_ISM</name></cpp:macro> <cpp:value>194</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_IEEE802_15_4_WITHFCS</name></cpp:macro> <cpp:value>195</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_IEEE802_15_4</name></cpp:macro> <cpp:value>DLT_IEEE802_15_4_WITHFCS</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_SITA</name></cpp:macro> <cpp:value>196</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_ERF</name></cpp:macro> <cpp:value>197</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_RAIF1</name></cpp:macro> <cpp:value>198</cpp:value></cpp:define>















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_IPMB_KONTRON</name></cpp:macro> <cpp:value>199</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_JUNIPER_ST</name></cpp:macro> <cpp:value>200</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_BLUETOOTH_HCI_H4_WITH_PHDR</name></cpp:macro> <cpp:value>201</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_AX25_KISS</name></cpp:macro> <cpp:value>202</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_LAPD</name></cpp:macro> <cpp:value>203</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_PPP_WITH_DIR</name></cpp:macro> <cpp:value>204</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_C_HDLC_WITH_DIR</name></cpp:macro> <cpp:value>205</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_FRELAY_WITH_DIR</name></cpp:macro> <cpp:value>206</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_LAPB_WITH_DIR</name></cpp:macro> <cpp:value>207</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_IPMB_LINUX</name></cpp:macro> <cpp:value>209</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_FLEXRAY</name></cpp:macro> <cpp:value>210</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_MOST</name></cpp:macro> <cpp:value>211</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_LIN</name></cpp:macro> <cpp:value>212</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_X2E_SERIAL</name></cpp:macro> <cpp:value>213</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_X2E_XORAYA</name></cpp:macro> <cpp:value>214</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_IEEE802_15_4_NONASK_PHY</name></cpp:macro> <cpp:value>215</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_LINUX_EVDEV</name></cpp:macro> <cpp:value>216</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_GSMTAP_UM</name></cpp:macro> <cpp:value>217</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_GSMTAP_ABIS</name></cpp:macro> <cpp:value>218</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_MPLS</name></cpp:macro> <cpp:value>219</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_USB_LINUX_MMAPPED</name></cpp:macro> <cpp:value>220</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_DECT</name></cpp:macro> <cpp:value>221</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_AOS</name></cpp:macro> <cpp:value>222</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_WIHART</name></cpp:macro> <cpp:value>223</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_FC_2</name></cpp:macro> <cpp:value>224</cpp:value></cpp:define>













<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_FC_2_WITH_FRAME_DELIMS</name></cpp:macro> <cpp:value>225</cpp:value></cpp:define>















































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_IPNET</name></cpp:macro> <cpp:value>226</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_CAN_SOCKETCAN</name></cpp:macro> <cpp:value>227</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_IPV4</name></cpp:macro> <cpp:value>228</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_IPV6</name></cpp:macro> <cpp:value>229</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_IEEE802_15_4_NOFCS</name></cpp:macro> <cpp:value>230</cpp:value></cpp:define>

















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_DBUS</name></cpp:macro> <cpp:value>231</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_JUNIPER_VS</name></cpp:macro> <cpp:value>232</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_JUNIPER_SRX_E2E</name></cpp:macro> <cpp:value>233</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_JUNIPER_FIBRECHANNEL</name></cpp:macro> <cpp:value>234</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_DVB_CI</name></cpp:macro> <cpp:value>235</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_MUX27010</name></cpp:macro> <cpp:value>236</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_STANAG_5066_D_PDU</name></cpp:macro> <cpp:value>237</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_JUNIPER_ATM_CEMIC</name></cpp:macro> <cpp:value>238</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_NFLOG</name></cpp:macro> <cpp:value>239</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_NETANALYZER</name></cpp:macro> <cpp:value>240</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_NETANALYZER_TRANSPARENT</name></cpp:macro> <cpp:value>241</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_IPOIB</name></cpp:macro> <cpp:value>242</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_MPEG_2_TS</name></cpp:macro> <cpp:value>243</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_NG40</name></cpp:macro> <cpp:value>244</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_NFC_LLCP</name></cpp:macro> <cpp:value>245</cpp:value></cpp:define>








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__OpenBSD__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__NetBSD__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__DragonFly__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_PFSYNC</name></cpp:macro> <cpp:value>246</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_INFINIBAND</name></cpp:macro> <cpp:value>247</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_SCTP</name></cpp:macro> <cpp:value>248</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_USBPCAP</name></cpp:macro> <cpp:value>249</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_RTAC_SERIAL</name></cpp:macro> <cpp:value>250</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_BLUETOOTH_LE_LL</name></cpp:macro> <cpp:value>251</cpp:value></cpp:define>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_WIRESHARK_UPPER_PDU</name></cpp:macro> <cpp:value>252</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_NETLINK</name></cpp:macro> <cpp:value>253</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_BLUETOOTH_LINUX_MONITOR</name></cpp:macro> <cpp:value>254</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_BLUETOOTH_BREDR_BB</name></cpp:macro> <cpp:value>255</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_BLUETOOTH_LE_LL_WITH_PHDR</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_PROFIBUS_DL</name></cpp:macro> <cpp:value>257</cpp:value></cpp:define>













































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_PKTAP</name></cpp:macro> <cpp:value>DLT_USER2</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_PKTAP</name></cpp:macro> <cpp:value>258</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_EPON</name></cpp:macro> <cpp:value>259</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_IPMI_HPM_2</name></cpp:macro> <cpp:value>260</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_ZWAVE_R1_R2</name></cpp:macro> <cpp:value>261</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_ZWAVE_R3</name></cpp:macro> <cpp:value>262</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_WATTSTOPPER_DLM</name></cpp:macro> <cpp:value>263</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_ISO_14443</name></cpp:macro> <cpp:value>264</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_RDS</name></cpp:macro> <cpp:value>265</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_USB_DARWIN</name></cpp:macro> <cpp:value>266</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_OPENFLOW</name></cpp:macro> <cpp:value>267</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_SDLC</name></cpp:macro> <cpp:value>268</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_TI_LLN_SNIFFER</name></cpp:macro> <cpp:value>269</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_LORATAP</name></cpp:macro> <cpp:value>270</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_VSOCK</name></cpp:macro> <cpp:value>271</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_NORDIC_BLE</name></cpp:macro> <cpp:value>272</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_DOCSIS31_XRA31</name></cpp:macro> <cpp:value>273</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_ETHERNET_MPACKET</name></cpp:macro> <cpp:value>274</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_DISPLAYPORT_AUX</name></cpp:macro> <cpp:value>275</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_LINUX_SLL2</name></cpp:macro> <cpp:value>276</cpp:value></cpp:define>








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DLT_MATCHING_MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DLT_MATCHING_MAX</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_MATCHING_MAX</name></cpp:macro> <cpp:value>276</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_CLASS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) &amp; 0x03ff0000)</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_CLASS_NETBSD_RAWAF</name></cpp:macro> <cpp:value>0x02240000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_NETBSD_RAWAF</name><parameter_list>(<parameter><type><name>af</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(DLT_CLASS_NETBSD_RAWAF | (af))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_NETBSD_RAWAF_AF</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) &amp; 0x0000ffff)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_IS_NETBSD_RAWAF</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(DLT_CLASS(x) == DLT_CLASS_NETBSD_RAWAF)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
