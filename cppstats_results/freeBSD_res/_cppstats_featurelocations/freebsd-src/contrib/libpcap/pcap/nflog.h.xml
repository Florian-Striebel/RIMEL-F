<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libpcap/pcap/nflog.h">


























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lib_pcap_nflog_h</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lib_pcap_nflog_h</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pcap/pcap-inttypes.h&gt;</cpp:file></cpp:include>












<typedef>typedef <type><struct>struct <name>nflog_hdr</name> <block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name>nflog_family</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>nflog_version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>nflog_rid</name></decl>;</decl_stmt>
}</block></struct></type> <name>nflog_hdr_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>nflog_tlv</name> <block>{
<decl_stmt><decl><type><name>uint16_t</name></type> <name>tlv_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>tlv_type</name></decl>;</decl_stmt>

}</block></struct></type> <name>nflog_tlv_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>nflog_packet_hdr</name> <block>{
<decl_stmt><decl><type><name>uint16_t</name></type> <name>hw_protocol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>hook</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>pad</name></decl>;</decl_stmt>
}</block></struct></type> <name>nflog_packet_hdr_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>nflog_hwaddr</name> <block>{
<decl_stmt><decl><type><name>uint16_t</name></type> <name>hw_addrlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>pad</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>hw_addr</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>nflog_hwaddr_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>nflog_timestamp</name> <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>sec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>usec</name></decl>;</decl_stmt>
}</block></struct></type> <name>nflog_timestamp_t</name>;</typedef>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NFULA_PACKET_HDR</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NFULA_MARK</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NFULA_TIMESTAMP</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NFULA_IFINDEX_INDEV</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NFULA_IFINDEX_OUTDEV</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NFULA_IFINDEX_PHYSINDEV</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NFULA_IFINDEX_PHYSOUTDEV</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NFULA_HWADDR</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NFULA_PAYLOAD</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NFULA_PREFIX</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NFULA_UID</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NFULA_SEQ</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NFULA_SEQ_GLOBAL</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NFULA_GID</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NFULA_HWTYPE</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NFULA_HWHEADER</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NFULA_HWLEN</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
