<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libpcap/pcap/usb.h">
































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lib_pcap_usb_h</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lib_pcap_usb_h</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pcap/pcap-inttypes.h&gt;</cpp:file></cpp:include>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>URB_TRANSFER_IN</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>URB_ISOCHRONOUS</name></cpp:macro> <cpp:value>0x0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>URB_INTERRUPT</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>URB_CONTROL</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>URB_BULK</name></cpp:macro> <cpp:value>0x3</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>URB_SUBMIT</name></cpp:macro> <cpp:value>'S'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>URB_COMPLETE</name></cpp:macro> <cpp:value>'C'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>URB_ERROR</name></cpp:macro> <cpp:value>'E'</cpp:value></cpp:define>





<typedef>typedef <type><struct>struct <name>_usb_setup</name> <block>{
<decl_stmt><decl><type><name>uint8_t</name></type> <name>bmRequestType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>bRequest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>wValue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>wIndex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>wLength</name></decl>;</decl_stmt>
}</block></struct></type> <name>pcap_usb_setup</name>;</typedef>




<typedef>typedef <type><struct>struct <name>_iso_rec</name> <block>{
<decl_stmt><decl><type><name>int32_t</name></type> <name>error_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>numdesc</name></decl>;</decl_stmt>
}</block></struct></type> <name>iso_rec</name>;</typedef>





<typedef>typedef <type><struct>struct <name>_usb_header</name> <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>event_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>transfer_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>endpoint_number</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>device_address</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>bus_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>setup_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>data_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>ts_sec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>ts_usec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>urb_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>data_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pcap_usb_setup</name></type> <name>setup</name></decl>;</decl_stmt>
}</block></struct></type> <name>pcap_usb_header</name>;</typedef>









<typedef>typedef <type><struct>struct <name>_usb_header_mmapped</name> <block>{
<decl_stmt><decl><type><name>uint64_t</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>event_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>transfer_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>endpoint_number</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>device_address</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>bus_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>setup_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>data_flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>ts_sec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>ts_usec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>urb_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>data_len</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name>pcap_usb_setup</name></type> <name>setup</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>iso_rec</name></type> <name>iso</name></decl>;</decl_stmt>
}</block> <decl><name>s</name></decl>;</union>
<decl_stmt><decl><type><name>int32_t</name></type> <name>interval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>start_frame</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>xfer_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>ndesc</name></decl>;</decl_stmt>
}</block></struct></type> <name>pcap_usb_header_mmapped</name>;</typedef>









<typedef>typedef <type><struct>struct <name>_usb_isodesc</name> <block>{
<decl_stmt><decl><type><name>int32_t</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>pad</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>usb_isodesc</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
