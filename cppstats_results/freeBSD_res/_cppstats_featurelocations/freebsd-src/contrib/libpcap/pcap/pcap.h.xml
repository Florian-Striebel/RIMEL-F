<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libpcap/pcap/pcap.h">



































































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lib_pcap_pcap_h</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lib_pcap_pcap_h</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pcap/funcattrs.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pcap/pcap-inttypes.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winsock2.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSDOS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pcap/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;net/bpf.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_VERSION_MAJOR</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_VERSION_MINOR</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_ERRBUF_SIZE</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BPF_RELEASE</name> <operator>-</operator> <literal type="number">0</literal> <operator>&lt;</operator> <literal type="number">199406</literal></expr></cpp:if>
<typedef>typedef <type><name>int</name></type> <name>bpf_int32</name>;</typedef>
<typedef>typedef <type><name>u_int</name></type> <name>bpf_u_int32</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name><name>struct</name> <name>pcap</name></name></type> <name>pcap_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>pcap_dumper</name></name></type> <name>pcap_dumper_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>pcap_if</name></name></type> <name>pcap_if_t</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>pcap_addr</name></name></type> <name>pcap_addr_t</name>;</typedef>







































<struct>struct <name>pcap_file_header</name> <block>{
<decl_stmt><decl><type><name>bpf_u_int32</name></type> <name>magic</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_short</name></type> <name>version_major</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_short</name></type> <name>version_minor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bpf_int32</name></type> <name>thiszone</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bpf_u_int32</name></type> <name>sigfigs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bpf_u_int32</name></type> <name>snaplen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bpf_u_int32</name></type> <name>linktype</name></decl>;</decl_stmt>
}</block>;</struct>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LT_FCS_LENGTH_PRESENT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) &amp; 0x04000000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LT_FCS_LENGTH</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &amp; 0xF0000000) &gt;&gt; 28)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LT_FCS_DATALINK_EXT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((x) &amp; 0xF) &lt;&lt; 28) | 0x04000000)</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <block>{
<decl><name>PCAP_D_INOUT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
<decl><name>PCAP_D_IN</name></decl>,
<decl><name>PCAP_D_OUT</name></decl>
}</block></enum></type> <name>pcap_direction_t</name>;</typedef>













<struct>struct <name>pcap_pkthdr</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>ts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bpf_u_int32</name></type> <name>caplen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bpf_u_int32</name></type> <name>len</name></decl>;</decl_stmt>
}</block>;</struct>




<struct>struct <name>pcap_stat</name> <block>{
<decl_stmt><decl><type><name>u_int</name></type> <name>ps_recv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>ps_drop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>ps_ifdrop</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>u_int</name></type> <name>ps_capt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>ps_sent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>ps_netdrop</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSDOS</name></expr></argument>)</argument_list></call></expr></cpp:if>



<struct>struct <name>pcap_stat_ex</name> <block>{
<decl_stmt><decl><type><name>u_long</name></type> <name>rx_packets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_long</name></type> <name>tx_packets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_long</name></type> <name>rx_bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_long</name></type> <name>tx_bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_long</name></type> <name>rx_errors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_long</name></type> <name>tx_errors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_long</name></type> <name>rx_dropped</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_long</name></type> <name>tx_dropped</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_long</name></type> <name>multicast</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_long</name></type> <name>collisions</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>u_long</name></type> <name>rx_length_errors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_long</name></type> <name>rx_over_errors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_long</name></type> <name>rx_crc_errors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_long</name></type> <name>rx_frame_errors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_long</name></type> <name>rx_fifo_errors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_long</name></type> <name>rx_missed_errors</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>u_long</name></type> <name>tx_aborted_errors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_long</name></type> <name>tx_carrier_errors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_long</name></type> <name>tx_fifo_errors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_long</name></type> <name>tx_heartbeat_errors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_long</name></type> <name>tx_window_errors</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<struct>struct <name>pcap_if</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_if</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>description</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_addr</name></name> <modifier>*</modifier></type><name>addresses</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bpf_u_int32</name></type> <name>flags</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_IF_LOOPBACK</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_IF_UP</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_IF_RUNNING</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_IF_WIRELESS</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_IF_CONNECTION_STATUS</name></cpp:macro> <cpp:value>0x00000030</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_IF_CONNECTION_STATUS_UNKNOWN</name></cpp:macro> <cpp:value>0x00000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_IF_CONNECTION_STATUS_CONNECTED</name></cpp:macro> <cpp:value>0x00000010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_IF_CONNECTION_STATUS_DISCONNECTED</name></cpp:macro> <cpp:value>0x00000020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_IF_CONNECTION_STATUS_NOT_APPLICABLE</name></cpp:macro> <cpp:value>0x00000030</cpp:value></cpp:define>




<struct>struct <name>pcap_addr</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_addr</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>netmask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>broadaddr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>dstaddr</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>pcap_handler</name>)<parameter_list>(<parameter><decl><type><name>u_char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>pcap_pkthdr</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>u_char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_ERROR</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_ERROR_BREAK</name></cpp:macro> <cpp:value>-2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_ERROR_NOT_ACTIVATED</name></cpp:macro> <cpp:value>-3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_ERROR_ACTIVATED</name></cpp:macro> <cpp:value>-4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_ERROR_NO_SUCH_DEVICE</name></cpp:macro> <cpp:value>-5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_ERROR_RFMON_NOTSUP</name></cpp:macro> <cpp:value>-6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_ERROR_NOT_RFMON</name></cpp:macro> <cpp:value>-7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_ERROR_PERM_DENIED</name></cpp:macro> <cpp:value>-8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_ERROR_IFACE_NOT_UP</name></cpp:macro> <cpp:value>-9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_ERROR_CANTSET_TSTAMP_TYPE</name></cpp:macro> <cpp:value>-10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_ERROR_PROMISC_PERM_DENIED</name></cpp:macro> <cpp:value>-11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_ERROR_TSTAMP_PRECISION_NOTSUP</name></cpp:macro> <cpp:value>-12</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_WARNING</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_WARNING_PROMISC_NOTSUP</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_WARNING_TSTAMP_TYPE_NOTSUP</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_NETMASK_UNKNOWN</name></cpp:macro> <cpp:value>0xffffffff</cpp:value></cpp:define>






<function_decl><type><name>PCAP_API</name> <name>char</name> <modifier>*</modifier></type><name>pcap_lookupdev</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>
PCAP_DEPRECATED<parameter_list>(<parameter><decl><type><name>pcap_lookupdev</name></type></decl></parameter>, <parameter/></parameter_list>"use 'pcap_findalldevs' and use the first device"</function_decl>)</block_content></block><empty_stmt>;</empty_stmt></extern>

<function_decl><type><name>PCAP_API</name> <name>int</name></type> <name>pcap_lookupnet</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bpf_u_int32</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bpf_u_int32</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PCAP_API</name> <name>pcap_t</name> <modifier>*</modifier></type><name>pcap_create</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <name>int</name></type> <name>pcap_set_snaplen</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <name>int</name></type> <name>pcap_set_promisc</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <name>int</name></type> <name>pcap_can_set_rfmon</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <name>int</name></type> <name>pcap_set_rfmon</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <name>int</name></type> <name>pcap_set_timeout</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <name>int</name></type> <name>pcap_set_tstamp_type</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <name>int</name></type> <name>pcap_set_immediate_mode</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <name>int</name></type> <name>pcap_set_buffer_size</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <name>int</name></type> <name>pcap_set_tstamp_precision</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <name>int</name></type> <name>pcap_get_tstamp_precision</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <name>int</name></type> <name>pcap_activate</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PCAP_API</name> <name>int</name></type> <name>pcap_list_tstamp_types</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <name>void</name></type> <name>pcap_free_tstamp_types</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <name>int</name></type> <name>pcap_tstamp_type_name_to_val</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pcap_tstamp_type_val_to_name</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pcap_tstamp_type_val_to_description</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>PCAP_API</name> <name>int</name></type> <name>pcap_set_protocol_linux</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_TSTAMP_HOST</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_TSTAMP_HOST_LOWPREC</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_TSTAMP_HOST_HIPREC</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_TSTAMP_ADAPTER</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_TSTAMP_ADAPTER_UNSYNCED</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_TSTAMP_PRECISION_MICRO</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_TSTAMP_PRECISION_NANO</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<function_decl><type><name>PCAP_API</name> <name>pcap_t</name> <modifier>*</modifier></type><name>pcap_open_live</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <name>pcap_t</name> <modifier>*</modifier></type><name>pcap_open_dead</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <name>pcap_t</name> <modifier>*</modifier></type><name>pcap_open_dead_with_tstamp_precision</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>u_int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <name>pcap_t</name> <modifier>*</modifier></type><name>pcap_open_offline_with_tstamp_precision</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>u_int</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <name>pcap_t</name> <modifier>*</modifier></type><name>pcap_open_offline</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>PCAP_API</name> <name>pcap_t</name> <modifier>*</modifier></type><name>pcap_hopen_offline_with_tstamp_precision</name><parameter_list>(<parameter><decl><type><name>intptr_t</name></type></decl></parameter>, <parameter><decl><type><name>u_int</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <name>pcap_t</name> <modifier>*</modifier></type><name>pcap_hopen_offline</name><parameter_list>(<parameter><decl><type><name>intptr_t</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BUILDING_PCAP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pcap_fopen_offline_with_tstamp_precision</name><parameter_list>(<parameter><type><name>f</name></type></parameter>,<parameter><type><name>p</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>pcap_hopen_offline_with_tstamp_precision(_get_osfhandle(_fileno(f)), p, b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pcap_fopen_offline</name><parameter_list>(<parameter><type><name>f</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>pcap_hopen_offline(_get_osfhandle(_fileno(f)), b)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function_decl><type><name>PCAP_API</name> <name>pcap_t</name> <modifier>*</modifier></type><name>pcap_fopen_offline_with_tstamp_precision</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>u_int</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <name>pcap_t</name> <modifier>*</modifier></type><name>pcap_fopen_offline</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>PCAP_API</name> <name>void</name></type> <name>pcap_close</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <name>int</name></type> <name>pcap_loop</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>pcap_handler</name></type></decl></parameter>, <parameter><decl><type><name>u_char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <name>int</name></type> <name>pcap_dispatch</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>pcap_handler</name></type></decl></parameter>, <parameter><decl><type><name>u_char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <specifier>const</specifier> <name>u_char</name> <modifier>*</modifier></type><name>pcap_next</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>pcap_pkthdr</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <name>int</name></type> <name>pcap_next_ex</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>pcap_pkthdr</name></name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u_char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <name>void</name></type> <name>pcap_breakloop</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <name>int</name></type> <name>pcap_stats</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>pcap_stat</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <name>int</name></type> <name>pcap_setfilter</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>bpf_program</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <name>int</name></type> <name>pcap_setdirection</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>pcap_direction_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <name>int</name></type> <name>pcap_getnonblock</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <name>int</name></type> <name>pcap_setnonblock</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <name>int</name></type> <name>pcap_inject</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <name>int</name></type> <name>pcap_sendpacket</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u_char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pcap_statustostr</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pcap_strerror</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <name>char</name> <modifier>*</modifier></type><name>pcap_geterr</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <name>void</name></type> <name>pcap_perror</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <name>int</name></type> <name>pcap_compile</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>bpf_program</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>,
<parameter><decl><type><name>bpf_u_int32</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <name>int</name></type> <name>pcap_compile_nopcap</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>bpf_program</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>bpf_u_int32</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <name>void</name></type> <name>pcap_freecode</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>bpf_program</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <name>int</name></type> <name>pcap_offline_filter</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bpf_program</name></name> <modifier>*</modifier></type></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>pcap_pkthdr</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u_char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <name>int</name></type> <name>pcap_datalink</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <name>int</name></type> <name>pcap_datalink_ext</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <name>int</name></type> <name>pcap_list_datalinks</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <name>int</name></type> <name>pcap_set_datalink</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <name>void</name></type> <name>pcap_free_datalinks</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <name>int</name></type> <name>pcap_datalink_name_to_val</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pcap_datalink_val_to_name</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pcap_datalink_val_to_description</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pcap_datalink_val_to_description_or_dlt</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <name>int</name></type> <name>pcap_snapshot</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <name>int</name></type> <name>pcap_is_swapped</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <name>int</name></type> <name>pcap_major_version</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <name>int</name></type> <name>pcap_minor_version</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <name>int</name></type> <name>pcap_bufsize</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>PCAP_API</name> <name>FILE</name> <modifier>*</modifier></type><name>pcap_file</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <name>int</name></type> <name>pcap_fileno</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>PCAP_API</name> <name>int</name></type> <name>pcap_wsockinit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>PCAP_API</name> <name>pcap_dumper_t</name> <modifier>*</modifier></type><name>pcap_dump_open</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>PCAP_API</name> <name>pcap_dumper_t</name> <modifier>*</modifier></type><name>pcap_dump_hopen</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>intptr_t</name></type></decl></parameter>)</parameter_list>;</function_decl>













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BUILDING_PCAP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pcap_dump_fopen</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>pcap_dump_hopen(p, _get_osfhandle(_fileno(f)))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function_decl><type><name>PCAP_API</name> <name>pcap_dumper_t</name> <modifier>*</modifier></type><name>pcap_dump_fopen</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><name>PCAP_API</name> <name>pcap_dumper_t</name> <modifier>*</modifier></type><name>pcap_dump_open_append</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <name>FILE</name> <modifier>*</modifier></type><name>pcap_dump_file</name><parameter_list>(<parameter><decl><type><name>pcap_dumper_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <name>long</name></type> <name>pcap_dump_ftell</name><parameter_list>(<parameter><decl><type><name>pcap_dumper_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <name>int64_t</name></type> <name>pcap_dump_ftell64</name><parameter_list>(<parameter><decl><type><name>pcap_dumper_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <name>int</name></type> <name>pcap_dump_flush</name><parameter_list>(<parameter><decl><type><name>pcap_dumper_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <name>void</name></type> <name>pcap_dump_close</name><parameter_list>(<parameter><decl><type><name>pcap_dumper_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <name>void</name></type> <name>pcap_dump</name><parameter_list>(<parameter><decl><type><name>u_char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>pcap_pkthdr</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u_char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PCAP_API</name> <name>int</name></type> <name>pcap_findalldevs</name><parameter_list>(<parameter><decl><type><name>pcap_if_t</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <name>void</name></type> <name>pcap_freealldevs</name><parameter_list>(<parameter><decl><type><name>pcap_if_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
















<function_decl><type><name>PCAP_API</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pcap_lib_version</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__NetBSD__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__QNX__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>PCAP_API</name> <name>u_int</name></type> <name>bpf_filter</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bpf_insn</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u_char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>u_int</name></type></decl></parameter>, <parameter><decl><type><name>u_int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><name>PCAP_API</name> <name>int</name></type> <name>bpf_validate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bpf_insn</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <name>char</name> <modifier>*</modifier></type><name>bpf_image</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bpf_insn</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <name>void</name></type> <name>bpf_dump</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>bpf_program</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>








<struct>struct <name>pcap_send_queue</name>
<block>{
<decl_stmt><decl><type><name>u_int</name></type> <name>maxlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>u_int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><name><name>struct</name> <name>pcap_send_queue</name></name></type> <name>pcap_send_queue</name>;</typedef>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AIRPCAP_HANDLE__EAE405F5_0171_9592_B3C2_C19EC426AD34__DEFINED_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AIRPCAP_HANDLE__EAE405F5_0171_9592_B3C2_C19EC426AD34__DEFINED_</name></cpp:macro></cpp:define>
<typedef>typedef <type><name><name>struct</name> <name>_AirpcapHandle</name></name> <modifier>*</modifier></type><name>PAirpcapHandle</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>PCAP_API</name> <name>int</name></type> <name>pcap_setbuff</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dim</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <name>int</name></type> <name>pcap_setmode</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <name>int</name></type> <name>pcap_setmintocopy</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PCAP_API</name> <name>HANDLE</name></type> <name>pcap_getevent</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PCAP_API</name> <name>int</name></type> <name>pcap_oid_get_request</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bpf_u_int32</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <name>int</name></type> <name>pcap_oid_set_request</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bpf_u_int32</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PCAP_API</name> <name>pcap_send_queue</name><modifier>*</modifier></type> <name>pcap_sendqueue_alloc</name><parameter_list>(<parameter><decl><type><name>u_int</name></type> <name>memsize</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PCAP_API</name> <name>void</name></type> <name>pcap_sendqueue_destroy</name><parameter_list>(<parameter><decl><type><name>pcap_send_queue</name><modifier>*</modifier></type> <name>queue</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PCAP_API</name> <name>int</name></type> <name>pcap_sendqueue_queue</name><parameter_list>(<parameter><decl><type><name>pcap_send_queue</name><modifier>*</modifier></type> <name>queue</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>pcap_pkthdr</name></name> <modifier>*</modifier></type><name>pkt_header</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u_char</name> <modifier>*</modifier></type><name>pkt_data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PCAP_API</name> <name>u_int</name></type> <name>pcap_sendqueue_transmit</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>pcap_send_queue</name><modifier>*</modifier></type> <name>queue</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sync</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PCAP_API</name> <name><name>struct</name> <name>pcap_stat</name></name> <modifier>*</modifier></type><name>pcap_stats_ex</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pcap_stat_size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PCAP_API</name> <name>int</name></type> <name>pcap_setuserbuffer</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PCAP_API</name> <name>int</name></type> <name>pcap_live_dump</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxsize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxpacks</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PCAP_API</name> <name>int</name></type> <name>pcap_live_dump_ended</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sync</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PCAP_API</name> <name>int</name></type> <name>pcap_start_oem</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>err_str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>PCAP_API</name> <name>PAirpcapHandle</name></type> <name>pcap_get_airpcap_handle</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODE_CAPT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODE_STAT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODE_MON</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSDOS</name></expr></argument>)</argument_list></call></expr></cpp:elif>





<function_decl><type><name>PCAP_API</name> <name>int</name></type> <name>pcap_stats_ex</name> <parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>pcap_stat_ex</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <name>void</name></type> <name>pcap_set_wait</name> <parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>yield</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wait</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <name>u_long</name></type> <name>pcap_mac_packets</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>





<function_decl><type><name>PCAP_API</name> <name>int</name></type> <name>pcap_get_selectable_fd</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>PCAP_API</name> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>pcap_get_required_select_timeout</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>














<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_BUF_SIZE</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_SRC_FILE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_SRC_IFLOCAL</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_SRC_IFREMOTE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>










































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_SRC_FILE_STRING</name></cpp:macro> <cpp:value>"file://"</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_SRC_IF_STRING</name></cpp:macro> <cpp:value>"rpcap://"</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_OPENFLAG_PROMISCUOUS</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>













<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_OPENFLAG_DATATX_UDP</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>













<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_OPENFLAG_NOCAPTURE_RPCAP</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_OPENFLAG_NOCAPTURE_LOCAL</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define>















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_OPENFLAG_MAX_RESPONSIVENESS</name></cpp:macro> <cpp:value>0x00000010</cpp:value></cpp:define>













<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RPCAP_RMTAUTH_NULL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>













<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RPCAP_RMTAUTH_PWD</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>














struct pcap_rmtauth
{








int type;







char *username;







char *password;
};



















PCAP_API pcap_t *pcap_open(const char *source, int snaplen, int flags,
int read_timeout, struct pcap_rmtauth *auth, char *errbuf);
PCAP_API int pcap_createsrcstr(char *source, int type, const char *host,
const char *port, const char *name, char *errbuf);
PCAP_API int pcap_parsesrcstr(const char *source, int *type, char *host,
char *port, char *name, char *errbuf);




















PCAP_API int pcap_findalldevs_ex(const char *source,
struct pcap_rmtauth *auth, pcap_if_t **alldevs, char *errbuf);















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_SAMP_NOSAMP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_SAMP_1_EVERY_N</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_SAMP_FIRST_AFTER_N_MS</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>













struct pcap_samp
{



int method;





int value;
};




PCAP_API struct pcap_samp *pcap_setsampling(pcap_t *p);






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RPCAP_HOSTLIST_SIZE</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>

PCAP_API SOCKET pcap_remoteact_accept(const char *address, const char *port,
const char *hostlist, char *connectinghost,
struct pcap_rmtauth *auth, char *errbuf);
PCAP_API int pcap_remoteact_list(char *hostlist, char sep, int size,
char *errbuf);
PCAP_API int pcap_remoteact_close(const char *host, char *errbuf);
PCAP_API void pcap_remoteact_cleanup(void);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
