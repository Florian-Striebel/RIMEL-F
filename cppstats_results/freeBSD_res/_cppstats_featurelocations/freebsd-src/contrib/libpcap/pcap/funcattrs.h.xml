<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libpcap/pcap/funcattrs.h">

































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lib_pcap_funcattrs_h</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lib_pcap_funcattrs_h</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pcap/compiler-tests.h&gt;</cpp:file></cpp:include>
















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>






























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>pcap_EXPORTS</name></expr></argument>)</argument_list></call></expr></cpp:if>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_API_DEF</name></cpp:macro> <cpp:value>__declspec(dllexport)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PCAP_DLL</name></expr></argument>)</argument_list></call></expr></cpp:elif>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_API_DEF</name></cpp:macro> <cpp:value>__declspec(dllimport)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_API_DEF</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSDOS</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_API_DEF</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>pcap_EXPORTS</name></expr></argument>)</argument_list></call></expr></cpp:if>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>PCAP_IS_AT_LEAST_GNUC_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>PCAP_IS_AT_LEAST_XL_C_VERSION</name><argument_list>(<argument><expr><literal type="number">12</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_API_DEF</name></cpp:macro> <cpp:value>__attribute__((visibility("default")))</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>PCAP_IS_AT_LEAST_SUNC_VERSION</name><argument_list>(<argument><expr><literal type="number">5</literal><operator>,</operator><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></cpp:elif>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_API_DEF</name></cpp:macro> <cpp:value>__global</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_API_DEF</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_API_DEF</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_API</name></cpp:macro> <cpp:value>PCAP_API_DEF extern</cpp:value></cpp:define>













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_attribute</name><argument_list>(<argument><expr><name>noreturn</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>PCAP_IS_AT_LEAST_GNUC_VERSION</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>,</operator><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>PCAP_IS_AT_LEAST_SUNC_VERSION</name><argument_list>(<argument><expr><literal type="number">5</literal><operator>,</operator><literal type="number">9</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>PCAP_IS_AT_LEAST_XL_C_VERSION</name><argument_list>(<argument><expr><literal type="number">10</literal><operator>,</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>PCAP_IS_AT_LEAST_HP_C_VERSION</name><argument_list>(<argument><expr><literal type="number">6</literal><operator>,</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></cpp:if>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_NORETURN</name></cpp:macro> <cpp:value>__attribute((noreturn))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_NORETURN_DEF</name></cpp:macro> <cpp:value>__attribute((noreturn))</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:elif>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_NORETURN</name></cpp:macro> <cpp:value>__declspec(noreturn)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_NORETURN_DEF</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_NORETURN</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_NORETURN_DEF</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_attribute</name><argument_list>(<argument><expr><name>__format__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>PCAP_IS_AT_LEAST_GNUC_VERSION</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>,</operator><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>PCAP_IS_AT_LEAST_XL_C_VERSION</name><argument_list>(<argument><expr><literal type="number">10</literal><operator>,</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>PCAP_IS_AT_LEAST_HP_C_VERSION</name><argument_list>(<argument><expr><literal type="number">6</literal><operator>,</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></cpp:if>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_PRINTFLIKE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__attribute__((__format__(__printf__,x,y)))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_PRINTFLIKE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>__has_attribute</name><argument_list>(<argument><expr><name>deprecated</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>PCAP_IS_AT_LEAST_GNUC_VERSION</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>,</operator><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>PCAP_IS_AT_LEAST_SUNC_VERSION</name><argument_list>(<argument><expr><literal type="number">5</literal><operator>,</operator><literal type="number">13</literal></expr></argument>)</argument_list></call></expr></cpp:if>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_DEPRECATED</name><parameter_list>(<parameter><type><name>func</name></type></parameter>, <parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__attribute__((deprecated(msg)))</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>PCAP_IS_AT_LEAST_GNUC_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></cpp:elif>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_DEPRECATED</name><parameter_list>(<parameter><type><name>func</name></type></parameter>, <parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__attribute__((deprecated))</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1500</literal><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>BUILDING_PCAP</name></expr></argument>)</argument_list></call></expr></cpp:elif>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_DEPRECATED</name><parameter_list>(<parameter><type><name>func</name></type></parameter>, <parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__pragma(deprecated(func))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_DEPRECATED</name><parameter_list>(<parameter><type><name>func</name></type></parameter>, <parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sal.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_MSC_VER</name> <operator>&gt;</operator> <literal type="number">1400</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_FORMAT_STRING</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_Printf_format_string_ p</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_FORMAT_STRING</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__format_string p</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCAP_FORMAT_STRING</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>p</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
