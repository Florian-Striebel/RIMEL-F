<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libpcap/pcap/can_socketcan.h">





































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lib_pcap_can_socketcan_h</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lib_pcap_can_socketcan_h</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pcap/pcap-inttypes.h&gt;</cpp:file></cpp:include>





<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>uint32_t</name></type> <name>can_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>payload_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>pad</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>reserved1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name>reserved2</name></decl>;</decl_stmt>
}</block></struct></type> <name>pcap_can_socketcan_hdr</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
