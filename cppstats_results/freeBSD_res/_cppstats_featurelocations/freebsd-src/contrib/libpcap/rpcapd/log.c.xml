<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libpcap/rpcapd/log.c">




















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;syslog.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"portability.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>log_to_systemlog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>log_debug_messages</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>rpcapd_vlog_stderr</name><argument_list>(<argument><expr><name>log_priority</name></expr></argument>,
<argument><expr><call><name>PCAP_FORMAT_STRING</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>va_list</name></expr></argument>)</argument_list> <name>PCAP_PRINTFLIKE</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rpcapd_vlog_stderr</name><parameter_list>(<parameter><decl><type><name>log_priority</name></type> <name>priority</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>message</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tag</name></decl>;</decl_stmt>












<expr_stmt><expr><name>tag</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>priority</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LOGPRIO_DEBUG</name></expr>:</case>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <literal type="string">"DEBUG: "</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LOGPRIO_INFO</name></expr>:</case>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LOGPRIO_WARNING</name></expr>:</case>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <literal type="string">"warning: "</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LOGPRIO_ERROR</name></expr>:</case>
<expr_stmt><expr><name>tag</name> <operator>=</operator> <literal type="string">"error: "</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"rpcapd: %s"</literal></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vfprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>rpcapd_vlog_systemlog</name><argument_list>(<argument><expr><name>log_priority</name></expr></argument>,
<argument><expr><call><name>PCAP_FORMAT_STRING</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>va_list</name></expr></argument>)</argument_list> <name>PCAP_PRINTFLIKE</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MESSAGE_SUBKEY</name></cpp:macro> <cpp:value>"SYSTEM\\CurrentControlSet\\Services\\EventLog\\Application\\rpcapd"</cpp:value></cpp:define>


<function><type><specifier>static</specifier> <name>void</name></type> <name>rpcapd_vlog_systemlog</name><parameter_list>(<parameter><decl><type><name>log_priority</name></type> <name>priority</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>message</name></decl></parameter>,
<parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static int initialized = 0;
HKEY hey_handle;
static HANDLE log_handle;
WORD eventlog_type;
DWORD event_id;
char msgbuf[1024];
char *strings[1];

if (!initialized) {







if (RegCreateKey(HKEY_LOCAL_MACHINE, MESSAGE_SUBKEY,
&amp;key_handle) != ERROR_SUCCESS) {





log_to_systemlog = 0;
initialized = 1;
rpcapd_vlog_stderr(priority, message, ap);
return;
}
log_handle = RegisterEventSource(NULL, "rpcapd");
initialized = 1;
}

switch (priority) {

case LOGPRIO_DEBUG:



eventlog_type = EVENTLOG_INFORMATION_TYPE;
event_id = RPCAPD_INFO_ID;
break;

case LOGPRIO_INFO:
eventlog_type = EVENTLOG_INFORMATION_TYPE;
event_id = RPCAPD_INFO_ID;
break;

case LOGPRIO_WARNING:
eventlog_type = EVENTLOG_WARNING_TYPE;
event_id = RPCAPD_WARNING_ID;
break;

case LOGPRIO_ERROR:
eventlog_type = EVENTLOG_ERROR_TYPE;
event_id = RPCAPD_ERROR_ID;
break;

default:

return;
}

vsprintf(msgbuf, message, ap);

strings[0] = msgbuf;



(void) ReportEvent(log_handle, eventlog_type, 0, event_id, NULL, 1, 0,
strings, NULL);
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>rpcapd_vlog_stderr</name><argument_list>(<argument><expr><name>priority</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rpcapd_vlog_systemlog</name><parameter_list>(<parameter><decl><type><name>log_priority</name></type> <name>priority</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>message</name></decl></parameter>,
<parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>initialized</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>syslog_priority</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>initialized</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>openlog</name><argument_list>(<argument><expr><literal type="string">"rpcapd"</literal></expr></argument>, <argument><expr><name>LOG_PID</name></expr></argument>, <argument><expr><name>LOG_DAEMON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>initialized</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>priority</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LOGPRIO_DEBUG</name></expr>:</case>
<expr_stmt><expr><name>syslog_priority</name> <operator>=</operator> <name>LOG_DEBUG</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LOGPRIO_INFO</name></expr>:</case>
<expr_stmt><expr><name>syslog_priority</name> <operator>=</operator> <name>LOG_INFO</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LOGPRIO_WARNING</name></expr>:</case>
<expr_stmt><expr><name>syslog_priority</name> <operator>=</operator> <name>LOG_WARNING</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>LOGPRIO_ERROR</name></expr>:</case>
<expr_stmt><expr><name>syslog_priority</name> <operator>=</operator> <name>LOG_ERR</name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>

<return>return;</return>
</block_content>}</block></switch>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_VSYSLOG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>vsyslog</name><argument_list>(<argument><expr><name>syslog_priority</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

















<decl_stmt><decl><type><name>char</name></type> <name><name>logbuf</name><index>[<expr><literal type="number">1024</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pcap_vsnprintf</name><argument_list>(<argument><expr><name>logbuf</name></expr></argument>, <argument><expr><sizeof>sizeof <name>logbuf</name></sizeof></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>syslog_priority</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>logbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>rpcapd_log_set</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>log_to_systemlog_arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>log_debug_messages_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>log_debug_messages</name> <operator>=</operator> <name>log_debug_messages_arg</name></expr>;</expr_stmt>
<expr_stmt><expr><name>log_to_systemlog</name> <operator>=</operator> <name>log_to_systemlog_arg</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>rpcapd_log</name><parameter_list>(<parameter><decl><type><name>log_priority</name></type> <name>priority</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>message</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>priority</name> <operator>!=</operator> <name>LOGPRIO_DEBUG</name> <operator>||</operator> <name>log_debug_messages</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>log_to_systemlog</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>rpcapd_vlog_systemlog</name><argument_list>(<argument><expr><name>priority</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>rpcapd_vlog_stderr</name><argument_list>(<argument><expr><name>priority</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
