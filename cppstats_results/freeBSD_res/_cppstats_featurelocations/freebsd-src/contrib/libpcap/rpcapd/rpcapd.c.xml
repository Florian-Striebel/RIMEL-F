<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libpcap/rpcapd/rpcapd.c">































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ftmacros.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pcap.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmtutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sockutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"varattrs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"portability.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rpcapd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config_params.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fileconf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rpcap-protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"daemon.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;process.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"win32-svc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"getopt.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/wait.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<struct>struct <name>listen_sock</name> <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>listen_sock</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SOCKET</name></type> <name>sock</name></decl>;</decl_stmt>
}</block>;</struct>


<decl_stmt><decl><type><name>char</name></type> <name><name>hostlist</name><index>[<expr><name>MAX_HOST_LIST</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>active_pars</name></name></type> <name><name>activelist</name><index>[<expr><name>MAX_ACTIVE_LIST</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nullAuthAllowed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>listen_sock</name></name> <modifier>*</modifier></type><name>listen_socks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>loadfile</name><index>[<expr><name>MAX_LINE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>passivemode</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>addrinfo</name></name></type> <name>mainhints</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>address</name><index>[<expr><name>MAX_LINE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>port</name><index>[<expr><name>MAX_LINE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>HANDLE</name></type> <name>state_change_event</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>sig_atomic_t</name></type> <name>shutdown_server</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>sig_atomic_t</name></type> <name>reread_config</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>optarg</name></decl>;</decl_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>unsigned</name> <name>__stdcall</name></type> <name>main_active</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>BOOL</name> <name>WINAPI</name></type> <name>main_ctrl_event</name><parameter_list>(<parameter><decl><type><name>DWORD</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>main_active</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>main_terminate</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sign</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>main_reread_config</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sign</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>accept_connections</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>accept_connection</name><parameter_list>(<parameter><decl><type><name>SOCKET</name></type> <name>listen_sock</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>main_reap_children</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sign</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>unsigned</name> <name>__stdcall</name></type> <name>main_passive_serviceloop_thread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RPCAP_ACTIVE_WAIT</name></cpp:macro> <cpp:value>30</cpp:value></cpp:define>




<function><type><specifier>static</specifier> <name>void</name></type> <name>printusage</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>usagetext</name> <init>=
<expr><literal type="string">"USAGE:"</literal>
<literal type="string">" "</literal> <name>PROGRAM_NAME</name> <literal type="string">" [-b &lt;address&gt;] [-p &lt;port&gt;] [-4] [-l &lt;host_list&gt;] [-a &lt;host,port&gt;]\n"</literal>
<literal type="string">" [-n] [-v] [-d] "</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">"[-i] "</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<literal type="string">"[-D] [-s &lt;config_file&gt;] [-f &lt;config_file&gt;]\n\n"</literal>
<literal type="string">" -b &lt;address&gt; the address to bind to (either numeric or literal).\n"</literal>
<literal type="string">" Default: binds to all local IPv4 and IPv6 addresses\n\n"</literal>
<literal type="string">" -p &lt;port&gt; the port to bind to.\n"</literal>
<literal type="string">" Default: binds to port "</literal> <name>RPCAP_DEFAULT_NETPORT</name> <literal type="string">"\n\n"</literal>
<literal type="string">" -4 use only IPv4.\n"</literal>
<literal type="string">" Default: use both IPv4 and IPv6 waiting sockets\n\n"</literal>
<literal type="string">" -l &lt;host_list&gt; a file that contains a list of hosts that are allowed\n"</literal>
<literal type="string">" to connect to this server (if more than one, list them one\n"</literal>
<literal type="string">" per line).\n"</literal>
<literal type="string">" We suggest to use literal names (instead of numeric ones)\n"</literal>
<literal type="string">" in order to avoid problems with different address families.\n\n"</literal>
<literal type="string">" -n permit NULL authentication (usually used with '-l')\n\n"</literal>
<literal type="string">" -a &lt;host,port&gt; run in active mode when connecting to 'host' on port 'port'\n"</literal>
<literal type="string">" In case 'port' is omitted, the default port ("</literal> <name>RPCAP_DEFAULT_NETPORT_ACTIVE</name> <literal type="string">") is used\n\n"</literal>
<literal type="string">" -v run in active mode only (default: if '-a' is specified, it\n"</literal>
<literal type="string">" accepts passive connections as well)\n\n"</literal>
<literal type="string">" -d run in daemon mode (UNIX only) or as a service (Win32 only)\n"</literal>
<literal type="string">" Warning (Win32): this switch is provided automatically when\n"</literal>
<literal type="string">" the service is started from the control panel\n\n"</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" -i run in inetd mode (UNIX only)\n\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<literal type="string">" -D log debugging messages\n\n"</literal>
<literal type="string">" -s &lt;config_file&gt; save the current configuration to file\n\n"</literal>
<literal type="string">" -f &lt;config_file&gt; load the current configuration from file; all switches\n"</literal>
<literal type="string">" specified from the command line are ignored\n\n"</literal>
<literal type="string">" -h print this help screen\n\n"</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"RPCAPD, a remote packet capture daemon.\n"</literal>
<literal type="string">"Compiled with %s\n\n"</literal></expr></argument>, <argument><expr><call><name>pcap_lib_version</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>usagetext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>savefile</name><index>[<expr><name>MAX_LINE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>log_to_systemlog</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>isdaemon</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>isrunbyinetd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>log_debug_messages</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>errbuf</name><index>[<expr><name>PCAP_ERRBUF_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>sigaction</name></name></type> <name>action</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>savefile</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>loadfile</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hostlist</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>errbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>RPCAP_DEFAULT_NETADDR</name></expr></argument>, <argument><expr><name>MAX_LINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>port</name></expr></argument>, <argument><expr><name>RPCAP_DEFAULT_NETPORT</name></expr></argument>, <argument><expr><name>MAX_LINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mainhints</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>addrinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mainhints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>PF_UNSPEC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mainhints</name><operator>.</operator><name>ai_flags</name></name> <operator>=</operator> <name>AI_PASSIVE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mainhints</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_STREAM</name></expr>;</expr_stmt>


<while>while <condition>(<expr><operator>(</operator><name>retval</name> <operator>=</operator> <call><name>getopt</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"b:dDhip:4l:na:s:f:v"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<switch>switch <condition>(<expr><name>retval</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><literal type="char">'D'</literal></expr>:</case>
<expr_stmt><expr><name>log_debug_messages</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rpcapd_log_set</name><argument_list>(<argument><expr><name>log_to_systemlog</name></expr></argument>, <argument><expr><name>log_debug_messages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'b'</literal></expr>:</case>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>optarg</name></expr></argument>, <argument><expr><name>MAX_LINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'p'</literal></expr>:</case>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>port</name></expr></argument>, <argument><expr><name>optarg</name></expr></argument>, <argument><expr><name>MAX_LINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'4'</literal></expr>:</case>
<expr_stmt><expr><name><name>mainhints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>PF_INET</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'d'</literal></expr>:</case>
<expr_stmt><expr><name>isdaemon</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>log_to_systemlog</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rpcapd_log_set</name><argument_list>(<argument><expr><name>log_to_systemlog</name></expr></argument>, <argument><expr><name>log_debug_messages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'i'</literal></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printusage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>isrunbyinetd</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>log_to_systemlog</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rpcapd_log_set</name><argument_list>(<argument><expr><name>log_to_systemlog</name></expr></argument>, <argument><expr><name>log_debug_messages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
<case>case <expr><literal type="char">'n'</literal></expr>:</case>
<expr_stmt><expr><name>nullAuthAllowed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'v'</literal></expr>:</case>
<expr_stmt><expr><name>passivemode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'l'</literal></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>hostlist</name></expr></argument>, <argument><expr><name>optarg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hostlist</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<case>case <expr><literal type="char">'a'</literal></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmpaddress</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmpport</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>lasts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>tmpaddress</name> <operator>=</operator> <call><name>pcap_strtok_r</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><name>RPCAP_HOSTLIST_SEP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lasts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>tmpaddress</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>i</name> <operator>&lt;</operator> <name>MAX_ACTIVE_LIST</name><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>tmpport</name> <operator>=</operator> <call><name>pcap_strtok_r</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RPCAP_HOSTLIST_SEP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lasts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pcap_strlcpy</name><argument_list>(<argument><expr><name><name>activelist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>address</name></expr></argument>, <argument><expr><name>tmpaddress</name></expr></argument>, <argument><expr><name>MAX_LINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmpport</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>tmpport</name></expr></argument>, <argument><expr><literal type="string">"DEFAULT"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pcap_strlcpy</name><argument_list>(<argument><expr><name><name>activelist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>port</name></expr></argument>, <argument><expr><name>RPCAP_DEFAULT_NETPORT_ACTIVE</name></expr></argument>, <argument><expr><name>MAX_LINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pcap_strlcpy</name><argument_list>(<argument><expr><name><name>activelist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>port</name></expr></argument>, <argument><expr><name>tmpport</name></expr></argument>, <argument><expr><name>MAX_LINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>tmpaddress</name> <operator>=</operator> <call><name>pcap_strtok_r</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RPCAP_HOSTLIST_SEP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lasts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <name>MAX_ACTIVE_LIST</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Only MAX_ACTIVE_LIST active connections are currently supported."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<break>break;</break>
</block_content>}</block>
<case>case <expr><literal type="char">'f'</literal></expr>:</case>
<expr_stmt><expr><call><name>pcap_strlcpy</name><argument_list>(<argument><expr><name>loadfile</name></expr></argument>, <argument><expr><name>optarg</name></expr></argument>, <argument><expr><name>MAX_LINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'s'</literal></expr>:</case>
<expr_stmt><expr><call><name>pcap_strlcpy</name><argument_list>(<argument><expr><name>savefile</name></expr></argument>, <argument><expr><name>optarg</name></expr></argument>, <argument><expr><name>MAX_LINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><literal type="char">'h'</literal></expr>:</case>
<expr_stmt><expr><call><name>printusage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<default>default:</default>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>
</block_content>}</block></while>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>isdaemon</name> <operator>&amp;&amp;</operator> <name>isrunbyinetd</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"rpcapd: -d and -i can't be used together"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>sock_init</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>savefile</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <call><name>fileconf_save</name><argument_list>(<argument><expr><name>savefile</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Error when saving the configuration to file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>loadfile</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fileconf_read</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>




<expr_stmt><expr><name>state_change_event</name> <operator>=</operator> <call><name>CreateEvent</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>state_change_event</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sock_geterror</name><argument_list>(<argument><expr><literal type="string">"Can't create state change event"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SetConsoleCtrlHandler</name><argument_list>(<argument><expr><name>main_ctrl_event</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sock_geterror</name><argument_list>(<argument><expr><literal type="string">"Can't set control handler"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>action</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>action</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>action</name><operator>.</operator><name>sa_handler</name></name> <operator>=</operator> <name>main_terminate</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>action</name><operator>.</operator><name>sa_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sigemptyset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>action</name><operator>.</operator><name>sa_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>action</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>action</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>action</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>action</name><operator>.</operator><name>sa_handler</name></name> <operator>=</operator> <name>main_reap_children</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>action</name><operator>.</operator><name>sa_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sigemptyset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>action</name><operator>.</operator><name>sa_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGCHLD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>action</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>isrunbyinetd</name></expr>)</condition>
<block>{<block_content>











<decl_stmt><decl><type><name>int</name></type> <name>sockctrl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>devnull_fd</name></decl>;</decl_stmt>




<expr_stmt><expr><name>sockctrl</name> <operator>=</operator> <call><name>dup</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sockctrl</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sock_geterror</name><argument_list>(<argument><expr><literal type="string">"Can't dup standard input"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name>devnull_fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><literal type="string">"/dev/null"</literal></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>devnull_fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>dup2</name><argument_list>(<argument><expr><name>devnull_fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>dup2</name><argument_list>(<argument><expr><name>devnull_fd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>dup2</name><argument_list>(<argument><expr><name>devnull_fd</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>devnull_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>






<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hostlist_copy</name> <init>= <expr><call><name>strdup</name><argument_list>(<argument><expr><name>hostlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>hostlist_copy</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Out of memory copying the host/port list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>daemon_serviceloop</name><argument_list>(<argument><expr><name>sockctrl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>hostlist_copy</name></expr></argument>,
<argument><expr><name>nullAuthAllowed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>isdaemon</name></expr>)</condition>
<block>{<block_content>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>pid</name></decl>;</decl_stmt>






<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pid</name> <operator>=</operator> <call><name>fork</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<expr_stmt><expr><call><name>setsid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>action</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>action</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>action</name><operator>.</operator><name>sa_handler</name></name> <operator>=</operator> <name>main_reread_config</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>action</name><operator>.</operator><name>sa_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sigemptyset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>action</name><operator>.</operator><name>sa_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>action</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pid</name> <operator>=</operator> <call><name>fork</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>









<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>





<if_stmt><if>if <condition>(<expr><call><name>svc_start</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Unable to start the service"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>action</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>action</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>action</name><operator>.</operator><name>sa_handler</name></name> <operator>=</operator> <name>main_terminate</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>action</name><operator>.</operator><name>sa_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sigemptyset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>action</name><operator>.</operator><name>sa_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>action</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>action</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>action</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>action</name><operator>.</operator><name>sa_handler</name></name> <operator>=</operator> <name>main_reread_config</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>action</name><operator>.</operator><name>sa_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sigemptyset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>action</name><operator>.</operator><name>sa_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>action</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Press CTRL + C to stop the server...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><call><name>main_startup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>main_startup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>errbuf</name><index>[<expr><name>PCAP_ERRBUF_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>addrinfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>threadId</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>addrinfo</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>errbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<while>while <condition>(<expr><operator>(</operator><name>i</name> <operator>&lt;</operator> <name>MAX_ACTIVE_LIST</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>activelist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>address</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name><name>activelist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ai_family</name> <operator>=</operator> <name><name>mainhints</name><operator>.</operator><name>ai_family</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>threadId</name> <operator>=</operator> <operator>(</operator><name>HANDLE</name><operator>)</operator><call><name>_beginthreadex</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>main_active</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>activelist</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>threadId</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Error creating the active child threads"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pid</name> <operator>=</operator> <call><name>fork</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>main_active</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>activelist</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>













<if_stmt><if>if <condition>(<expr><name>passivemode</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>tempaddrinfo</name></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><call><name>sock_initaddress</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name><name>address</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><name>address</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mainhints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addrinfo</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>tempaddrinfo</name> <operator>=</operator> <name>addrinfo</name></expr>;</init> <condition><expr><name>tempaddrinfo</name></expr>;</condition>
<incr><expr><name>tempaddrinfo</name> <operator>=</operator> <name><name>tempaddrinfo</name><operator>-&gt;</operator><name>ai_next</name></name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>SOCKET</name></type> <name>sock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>listen_sock</name></name> <modifier>*</modifier></type><name>sock_info</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>sock</name> <operator>=</operator> <call><name>sock_open</name><argument_list>(<argument><expr><name>tempaddrinfo</name></expr></argument>, <argument><expr><name>SOCKOPEN_SERVER</name></expr></argument>, <argument><expr><name>SOCKET_MAXCONN</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>INVALID_SOCKET</name></expr>)</condition>
<block>{<block_content>
<switch>switch <condition>(<expr><name><name>tempaddrinfo</name><operator>-&gt;</operator><name>ai_family</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>AF_INET</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>addrbuf</name><index>[<expr><name>INET_ADDRSTRLEN</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>in</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><name><name>tempaddrinfo</name><operator>-&gt;</operator><name>ai_addr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Can't listen on socket for %s:%u: %s"</literal></expr></argument>,
<argument><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>in</name><operator>-&gt;</operator><name>sin_addr</name></name></expr></argument>,
<argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>addrbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>sin_port</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>AF_INET6</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name> <modifier>*</modifier></type><name>in6</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>addrbuf</name><index>[<expr><name>INET6_ADDRSTRLEN</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>in6</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator><name><name>tempaddrinfo</name><operator>-&gt;</operator><name>ai_addr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Can't listen on socket for %s:%u: %s"</literal></expr></argument>,
<argument><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>in6</name><operator>-&gt;</operator><name>sin6_addr</name></name></expr></argument>,
<argument><expr><name>addrbuf</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>addrbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>in6</name><operator>-&gt;</operator><name>sin6_port</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<default>default:</default>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Can't listen on socket for address family %u: %s"</literal></expr></argument>,
<argument><expr><name><name>tempaddrinfo</name><operator>-&gt;</operator><name>ai_family</name></name></expr></argument>,
<argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sock_info</name> <operator>=</operator> <operator>(</operator>struct <name>listen_sock</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>listen_sock</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sock_info</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Can't allocate structure for listen socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>sock_info</name><operator>-&gt;</operator><name>sock</name></name> <operator>=</operator> <name>sock</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sock_info</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>listen_socks</name></expr>;</expr_stmt>
<expr_stmt><expr><name>listen_socks</name> <operator>=</operator> <name>sock_info</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>addrinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>listen_socks</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Can't listen on any address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><call><name>accept_connections</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_DEBUG</name></expr></argument>, <argument><expr><name>PROGRAM_NAME</name> <literal type="string">" is closing.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>








<expr_stmt><expr><call><name>kill</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SIGKILL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




















<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>send_state_change_event</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>errbuf</name><index>[<expr><name>PCAP_ERRBUF_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SetEvent</name><argument_list>(<argument><expr><name>state_change_event</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sock_geterror</name><argument_list>(<argument><expr><literal type="string">"SetEvent on shutdown event failed"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>send_shutdown_notification</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>



<expr_stmt><expr><name>shutdown_server</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>




<expr_stmt><expr><call><name>send_state_change_event</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>send_reread_configuration_notification</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>



<expr_stmt><expr><name>reread_config</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>




<expr_stmt><expr><call><name>send_state_change_event</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BOOL</name> <name>WINAPI</name></type> <name>main_ctrl_event</name><parameter_list>(<parameter><decl><type><name>DWORD</name></type> <name>ctrltype</name></decl></parameter>)</parameter_list>
<block>{<block_content>














<switch>switch <condition>(<expr><name>ctrltype</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>CTRL_C_EVENT</name></expr>:</case>
<case>case <expr><name>CTRL_BREAK_EVENT</name></expr>:</case>
<case>case <expr><name>CTRL_CLOSE_EVENT</name></expr>:</case>
<case>case <expr><name>CTRL_SHUTDOWN_EVENT</name></expr>:</case>



<expr_stmt><expr><call><name>send_shutdown_notification</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>




<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>void</name></type> <name>main_terminate</name><parameter_list>(<parameter><decl><type><name>int</name> <name>sign</name></type> <name>_U_</name></decl></parameter>)</parameter_list>
<block>{<block_content>





<expr_stmt><expr><name>shutdown_server</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>main_reread_config</name><parameter_list>(<parameter><decl><type><name>int</name> <name>sign</name></type> <name>_U_</name></decl></parameter>)</parameter_list>
<block>{<block_content>





<expr_stmt><expr><name>reread_config</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>main_reap_children</name><parameter_list>(<parameter><decl><type><name>int</name> <name>sign</name></type> <name>_U_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>exitstat</name></decl>;</decl_stmt>




<while>while <condition>(<expr><operator>(</operator><name>pid</name> <operator>=</operator> <call><name>waitpid</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>exitstat</name></expr></argument>, <argument><expr><name>WNOHANG</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Child terminated"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<return>return;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>accept_connections</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>listen_sock</name></name> <modifier>*</modifier></type><name>sock_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>num_events</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WSAEVENT</name> <modifier>*</modifier></type><name>events</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>errbuf</name><index>[<expr><name>PCAP_ERRBUF_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>






<expr_stmt><expr><name>num_events</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>sock_info</name> <operator>=</operator> <name>listen_socks</name></expr>;</init> <condition><expr><name>sock_info</name></expr>;</condition>
<incr><expr><name>sock_info</name> <operator>=</operator> <name><name>sock_info</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>num_events</name> <operator>==</operator> <name>WSA_MAXIMUM_WAIT_EVENTS</name></expr>)</condition>
<block>{<block_content>





<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Too many sockets on which to listen"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>num_events</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>




<expr_stmt><expr><name>events</name> <operator>=</operator> <operator>(</operator><name>WSAEVENT</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>num_events</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>WSAEVENT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>events</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Can't allocate array of events which to listen"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name><name>events</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>state_change_event</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>sock_info</name> <operator>=</operator> <name>listen_socks</name></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>sock_info</name></expr>;</condition>
<incr><expr><name>sock_info</name> <operator>=</operator> <name><name>sock_info</name><operator>-&gt;</operator><name>next</name></name></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>WSAEVENT</name></type> <name>event</name></decl>;</decl_stmt>





<expr_stmt><expr><name>event</name> <operator>=</operator> <call><name>WSACreateEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>event</name> <operator>==</operator> <name>WSA_INVALID_EVENT</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sock_geterror</name><argument_list>(<argument><expr><literal type="string">"Can't create socket event"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>WSAEventSelect</name><argument_list>(<argument><expr><name><name>sock_info</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><name>FD_ACCEPT</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SOCKET_ERROR</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sock_geterror</name><argument_list>(<argument><expr><literal type="string">"Can't setup socket event"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>events</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>event</name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>



<decl_stmt><decl><type><name>DWORD</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>WSAWaitForMultipleEvents</name><argument_list>(<argument><expr><name>num_events</name></expr></argument>, <argument><expr><name>events</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>WSA_INFINITE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>WSA_WAIT_FAILED</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sock_geterror</name><argument_list>(<argument><expr><literal type="string">"WSAWaitForMultipleEvents failed"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>WSA_WAIT_EVENT_0</name></expr>)</condition>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><name>shutdown_server</name></expr>)</condition>
<block>{<block_content>



<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>reread_config</name></expr>)</condition>
<block>{<block_content>




<expr_stmt><expr><name>reread_config</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fileconf_read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<for>for <control>(<init><expr><name>sock_info</name> <operator>=</operator> <name>listen_socks</name></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>sock_info</name></expr>;</condition>
<incr><expr><name>sock_info</name> <operator>=</operator> <name><name>sock_info</name><operator>-&gt;</operator><name>next</name></name></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>WSANETWORKEVENTS</name></type> <name>network_events</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>WSAEnumNetworkEvents</name><argument_list>(<argument><expr><name><name>sock_info</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>,
<argument><expr><name><name>events</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>network_events</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SOCKET_ERROR</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sock_geterror</name><argument_list>(<argument><expr><literal type="string">"WSAEnumNetworkEvents failed"</literal></expr></argument>,
<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>network_events</name><operator>.</operator><name>lNetworkEvents</name></name> <operator>&amp;</operator> <name>FD_ACCEPT</name></expr>)</condition>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><name><name>network_events</name><operator>.</operator><name>iErrorCode</name><index>[<expr><name>FD_ACCEPT_BIT</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><call><name>sock_fmterror</name><argument_list>(<argument><expr><literal type="string">"Socket error"</literal></expr></argument>,
<argument><expr><name><name>network_events</name><operator>.</operator><name>iErrorCode</name><index>[<expr><name>FD_ACCEPT_BIT</name></expr>]</index></name></expr></argument>,
<argument><expr><name>errbuf</name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><call><name>accept_connection</name><argument_list>(<argument><expr><name><name>sock_info</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name><name>struct</name> <name>listen_sock</name></name> <modifier>*</modifier></type><name>sock_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_sock_fds</name></decl>;</decl_stmt>





<expr_stmt><expr><name>num_sock_fds</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>sock_info</name> <operator>=</operator> <name>listen_socks</name></expr>;</init> <condition><expr><name>sock_info</name></expr>;</condition> <incr><expr><name>sock_info</name> <operator>=</operator> <name><name>sock_info</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>sock_info</name><operator>-&gt;</operator><name>sock</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>num_sock_fds</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name><name>sock_info</name><operator>-&gt;</operator><name>sock</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;</operator>
<operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>FD_SETSIZE</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Socket FD is too bit for an fd_set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>num_sock_fds</name> <operator>=</operator> <name><name>sock_info</name><operator>-&gt;</operator><name>sock</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>fd_set</name></type> <name>sock_fds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>








<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sock_fds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>sock_info</name> <operator>=</operator> <name>listen_socks</name></expr>;</init> <condition><expr><name>sock_info</name></expr>;</condition>
<incr><expr><name>sock_info</name> <operator>=</operator> <name><name>sock_info</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><name><name>sock_info</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sock_fds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>




<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>select</name><argument_list>(<argument><expr><name>num_sock_fds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sock_fds</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition>
<block>{<block_content>





<if_stmt><if>if <condition>(<expr><name>shutdown_server</name></expr>)</condition>
<block>{<block_content>



<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>reread_config</name></expr>)</condition>
<block>{<block_content>




<expr_stmt><expr><name>reread_config</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fileconf_read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<continue>continue;</continue>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"select failed: %s"</literal></expr></argument>,
<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>




<for>for <control>(<init><expr><name>sock_info</name> <operator>=</operator> <name>listen_socks</name></expr>;</init> <condition><expr><name>sock_info</name></expr>;</condition>
<incr><expr><name>sock_info</name> <operator>=</operator> <name><name>sock_info</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>FD_ISSET</name><argument_list>(<argument><expr><name><name>sock_info</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sock_fds</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><call><name>accept_connection</name><argument_list>(<argument><expr><name><name>sock_info</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<for>for <control>(<init><expr><name>sock_info</name> <operator>=</operator> <name>listen_socks</name></expr>;</init> <condition><expr><name>sock_info</name></expr>;</condition> <incr><expr><name>sock_info</name> <operator>=</operator> <name><name>sock_info</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><call><name>closesocket</name><argument_list>(<argument><expr><name><name>sock_info</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>sock_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>







<struct>struct <name>params_copy</name> <block>{
<decl_stmt><decl><type><name>SOCKET</name></type> <name>sockctrl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hostlist</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>accept_connection</name><parameter_list>(<parameter><decl><type><name>SOCKET</name></type> <name>listen_sock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>errbuf</name><index>[<expr><name>PCAP_ERRBUF_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SOCKET</name></type> <name>sockctrl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>from</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>socklen_t</name></type> <name>fromlen</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>threadId</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_long</name></type> <name>off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>params_copy</name></name> <modifier>*</modifier></type><name>params_copy</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>errbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>

<expr_stmt><expr><name>fromlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_storage</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>sockctrl</name> <operator>=</operator> <call><name>accept</name><argument_list>(<argument><expr><name>listen_sock</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>from</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fromlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sockctrl</name> <operator>!=</operator> <name>INVALID_SOCKET</name></expr>)</condition>
<block>{<block_content>

<break>break;</break>
</block_content>}</block></if></if_stmt>




<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>WSAGetLastError</name><argument_list>()</argument_list></call> <operator>==</operator> <name>WSAEINTR</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<continue>continue;</continue></block_content></block></if></if_stmt></block_content></block></if></if_stmt>



<expr_stmt><expr><call><name>sock_geterror</name><argument_list>(<argument><expr><literal type="string">"accept()"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Accept of control connection from client failed: %s"</literal></expr></argument>,
<argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>















<if_stmt><if>if <condition>(<expr><call><name>WSAEventSelect</name><argument_list>(<argument><expr><name>sockctrl</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>SOCKET_ERROR</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sock_geterror</name><argument_list>(<argument><expr><literal type="string">"WSAEventSelect()"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sock_close</name><argument_list>(<argument><expr><name>sockctrl</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ioctlsocket</name><argument_list>(<argument><expr><name>sockctrl</name></expr></argument>, <argument><expr><name>FIONBIO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>off</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SOCKET_ERROR</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sock_geterror</name><argument_list>(<argument><expr><literal type="string">"ioctlsocket(FIONBIO)"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sock_close</name><argument_list>(<argument><expr><name>sockctrl</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>








<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hostlist_copy</name> <init>= <expr><call><name>strdup</name><argument_list>(<argument><expr><name>hostlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>hostlist_copy</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Out of memory copying the host/port list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sock_close</name><argument_list>(<argument><expr><name>sockctrl</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>






<expr_stmt><expr><name>params_copy</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>params_copy</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>params_copy</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Out of memory allocating the parameter copy structure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hostlist_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sock_close</name><argument_list>(<argument><expr><name>sockctrl</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>params_copy</name><operator>-&gt;</operator><name>sockctrl</name></name> <operator>=</operator> <name>sockctrl</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params_copy</name><operator>-&gt;</operator><name>hostlist</name></name> <operator>=</operator> <name>hostlist_copy</name></expr>;</expr_stmt>

<expr_stmt><expr><name>threadId</name> <operator>=</operator> <operator>(</operator><name>HANDLE</name><operator>)</operator><call><name>_beginthreadex</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>main_passive_serviceloop_thread</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>params_copy</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>threadId</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error creating the child thread"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>params_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>hostlist_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sock_close</name><argument_list>(<argument><expr><name>sockctrl</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>pid</name> <operator>=</operator> <call><name>fork</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error creating the child process: %s"</literal></expr></argument>,
<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sock_close</name><argument_list>(<argument><expr><name>sockctrl</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>






<expr_stmt><expr><call><name>closesocket</name><argument_list>(<argument><expr><name>listen_sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>







if (pthread_setcancelstate(PTHREAD_CANCEL_ENABLE, NULL))
goto end;
if (pthread_setcanceltype(PTHREAD_CANCEL_ASYNCHRONOUS, NULL))
goto end;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hostlist_copy</name> <init>= <expr><call><name>strdup</name><argument_list>(<argument><expr><name>hostlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>hostlist_copy</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Out of memory copying the host/port list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>daemon_serviceloop</name><argument_list>(<argument><expr><name>sockctrl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>hostlist_copy</name></expr></argument>,
<argument><expr><name>nullAuthAllowed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><call><name>closesocket</name><argument_list>(<argument><expr><name>sockctrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>










<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>unsigned</name> <name>__stdcall</name>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<name>main_active</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>errbuf</name><index>[<expr><name>PCAP_ERRBUF_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SOCKET</name></type> <name>sockctrl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>hints</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>addrinfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>active_pars</name></name> <modifier>*</modifier></type><name>activepars</name></decl>;</decl_stmt>

<expr_stmt><expr><name>activepars</name> <operator>=</operator> <operator>(</operator>struct <name>active_pars</name> <operator>*</operator><operator>)</operator> <name>ptr</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>addrinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_STREAM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name><name>activepars</name><operator>-&gt;</operator><name>ai_family</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Connecting to host %s, port %s, using protocol %s"</literal></expr></argument>,
<argument><expr><name><name>activepars</name><operator>-&gt;</operator><name>address</name></name></expr></argument>, <argument><expr><name><name>activepars</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>==</operator> <name>AF_INET</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"IPv4"</literal></expr></then><else>:
<expr><ternary><condition><expr><operator>(</operator><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>==</operator> <name>AF_INET6</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"IPv6"</literal></expr> </then><else>: <expr><literal type="string">"Unspecified"</literal></expr></else></ternary></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>errbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>sock_initaddress</name><argument_list>(<argument><expr><name><name>activepars</name><operator>-&gt;</operator><name>address</name></name></expr></argument>, <argument><expr><name><name>activepars</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addrinfo</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>activeclose</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>sockctrl</name> <operator>=</operator> <call><name>sock_open</name><argument_list>(<argument><expr><name>addrinfo</name></expr></argument>, <argument><expr><name>SOCKOPEN_CLIENT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>INVALID_SOCKET</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"Error connecting to host %s, port %s, using protocol %s"</literal></expr></argument>,
<argument><expr><name><name>activepars</name><operator>-&gt;</operator><name>address</name></name></expr></argument>, <argument><expr><name><name>activepars</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>==</operator> <name>AF_INET</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"IPv4"</literal></expr></then><else>:
<expr><ternary><condition><expr><operator>(</operator><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>==</operator> <name>AF_INET6</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"IPv6"</literal></expr> </then><else>: <expr><literal type="string">"Unspecified"</literal></expr></else></ternary></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sleep_secs</name><argument_list>(<argument><expr><name>RPCAP_ACTIVE_WAIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hostlist_copy</name> <init>= <expr><call><name>strdup</name><argument_list>(<argument><expr><name>hostlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>hostlist_copy</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Out of memory copying the host/port list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>activeclose</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sock_close</name><argument_list>(<argument><expr><name>sockctrl</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>



<expr_stmt><expr><name>activeclose</name> <operator>=</operator> <call><name>daemon_serviceloop</name><argument_list>(<argument><expr><name>sockctrl</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
<argument><expr><name>hostlist_copy</name></expr></argument>, <argument><expr><name>nullAuthAllowed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>



<if_stmt><if>if <condition>(<expr><name>activeclose</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>addrinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>



<function><type><name>unsigned</name> <name>__stdcall</name></type> <name>main_passive_serviceloop_thread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>params_copy</name></name></type> <name>params</name> <init>= <expr><operator>*</operator><operator>(</operator>struct <name>params_copy</name> <operator>*</operator><operator>)</operator><name>ptr</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>daemon_serviceloop</name><argument_list>(<argument><expr><name><name>params</name><operator>.</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>params</name><operator>.</operator><name>hostlist</name></name></expr></argument>,
<argument><expr><name>nullAuthAllowed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
