<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libpcap/rpcapd/fileconf.c">
































<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ftmacros.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pcap.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"portability.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rpcapd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config_params.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fileconf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rpcap-protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log.h"</cpp:file></cpp:include>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PARAM_ACTIVECLIENT</name></cpp:macro> <cpp:value>"ActiveClient"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PARAM_PASSIVECLIENT</name></cpp:macro> <cpp:value>"PassiveClient"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PARAM_NULLAUTHPERMIT</name></cpp:macro> <cpp:value>"NullAuthPermit"</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>skipws</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>fileconf_read</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>num_active_clients</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>loadfile</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>line</name><index>[<expr><name>MAX_LINE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>lineno</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>hostlist</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>num_active_clients</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>lineno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>MAX_LINE</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>linelen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>param</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>toklen</name></decl>;</decl_stmt>

<expr_stmt><expr><name>lineno</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>linelen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>line</name><index>[<expr><name>linelen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>







<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"%s, line %u is longer than %u characters"</literal></expr></argument>,
<argument><expr><name>loadfile</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>MAX_LINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>getc</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></while>




<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>line</name></expr>;</expr_stmt>




<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>skipws</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>

<continue>continue;</continue>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isascii</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call> <operator>||</operator>
<operator>!</operator><call><name>isalpha</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"%s, line %u doesn't have a valid parameter name"</literal></expr></argument>,
<argument><expr><name>loadfile</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>






<expr_stmt><expr><name>param</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>isascii</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>isalnum</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'-'</literal> <operator>||</operator> <operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'_'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>




<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>skipws</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>ptr</name> <operator>!=</operator> <literal type="char">'='</literal></expr>)</condition>
<block>{<block_content>








<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"%s, line %u has a parameter but no ="</literal></expr></argument>,
<argument><expr><name>loadfile</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>




<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>skipws</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"%s, line %u has a parameter but no value"</literal></expr></argument>,
<argument><expr><name>loadfile</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>PARAM_ACTIVECLIENT</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>



<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>address</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>port</name></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><name>num_active_clients</name> <operator>&gt;=</operator> <name>MAX_ACTIVE_LIST</name></expr>)</condition>
<block>{<block_content>





<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"%s, line %u has an %s parameter, but we already have %u active clients"</literal></expr></argument>,
<argument><expr><name>loadfile</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>PARAM_ACTIVECLIENT</name></expr></argument>,
<argument><expr><name>MAX_ACTIVE_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>








<expr_stmt><expr><name>address</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>toklen</name> <operator>=</operator> <call><name>strcspn</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>RPCAP_HOSTLIST_SEP</name> <literal type="string">"#"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>toklen</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>toklen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>isascii</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'#'</literal> <operator>||</operator> <operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>







<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"%s, line %u has a parameter but no value"</literal></expr></argument>,
<argument><expr><name>loadfile</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>







<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"%s, line %u has an %s parameter with a value containing no address"</literal></expr></argument>,
<argument><expr><name>loadfile</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>PARAM_ACTIVECLIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>





<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>skipws</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>




<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"%s, line %u has an %s parameter with a value containing no port"</literal></expr></argument>,
<argument><expr><name>loadfile</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>PARAM_ACTIVECLIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>








<expr_stmt><expr><name>port</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>toklen</name> <operator>=</operator> <call><name>strcspn</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">" \t#\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>toklen</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>toklen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>




<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"%s, line %u has an %s parameter with a value containing no port"</literal></expr></argument>,
<argument><expr><name>loadfile</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>PARAM_ACTIVECLIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pcap_strlcpy</name><argument_list>(<argument><expr><name><name>activelist</name><index>[<expr><name>num_active_clients</name></expr>]</index></name><operator>.</operator><name>address</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>activelist</name><index>[<expr><name>num_active_clients</name></expr>]</index></name><operator>.</operator><name>address</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>activelist</name><index>[<expr><name>num_active_clients</name></expr>]</index></name><operator>.</operator><name>address</name></expr></argument>)</argument_list></sizeof></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"%s, line %u has an %s parameter with an address with more than %u characters"</literal></expr></argument>,
<argument><expr><name>loadfile</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>PARAM_ACTIVECLIENT</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>activelist</name><index>[<expr><name>num_active_clients</name></expr>]</index></name><operator>.</operator><name>address</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>port</name></expr></argument>, <argument><expr><literal type="string">"DEFAULT"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pcap_strlcpy</name><argument_list>(<argument><expr><name><name>activelist</name><index>[<expr><name>num_active_clients</name></expr>]</index></name><operator>.</operator><name>port</name></expr></argument>, <argument><expr><name>RPCAP_DEFAULT_NETPORT_ACTIVE</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>activelist</name><index>[<expr><name>num_active_clients</name></expr>]</index></name><operator>.</operator><name>port</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pcap_strlcpy</name><argument_list>(<argument><expr><name><name>activelist</name><index>[<expr><name>num_active_clients</name></expr>]</index></name><operator>.</operator><name>port</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>activelist</name><index>[<expr><name>num_active_clients</name></expr>]</index></name><operator>.</operator><name>port</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>activelist</name><index>[<expr><name>num_active_clients</name></expr>]</index></name><operator>.</operator><name>address</name></expr></argument>)</argument_list></sizeof></expr>)</condition>
<block>{<block_content>



<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"%s, line %u has an %s parameter with an port with more than %u characters"</literal></expr></argument>,
<argument><expr><name>loadfile</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>PARAM_ACTIVECLIENT</name></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>activelist</name><index>[<expr><name>num_active_clients</name></expr>]</index></name><operator>.</operator><name>port</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>num_active_clients</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>PARAM_PASSIVECLIENT</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>eos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>host</name></decl>;</decl_stmt>








<expr_stmt><expr><name>host</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>toklen</name> <operator>=</operator> <call><name>strcspn</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">" \t#\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>toklen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>







<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"%s, line %u has a parameter but no value"</literal></expr></argument>,
<argument><expr><name>loadfile</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>toklen</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>








<expr_stmt><expr><name>eos</name> <operator>=</operator> <name>hostlist</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>hostlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>eos</name> <operator>!=</operator> <name>hostlist</name></expr>)</condition>
<block>{<block_content>




<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pcap_strlcat</name><argument_list>(<argument><expr><name>hostlist</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hostlist</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>hostlist</name></expr></argument>)</argument_list></sizeof></expr>)</condition>
<block>{<block_content>






<expr_stmt><expr><operator>*</operator><name>eos</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"%s, line %u has a %s parameter with a host name that doesn't fit"</literal></expr></argument>,
<argument><expr><name>loadfile</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>PARAM_PASSIVECLIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pcap_strlcat</name><argument_list>(<argument><expr><name>hostlist</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hostlist</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>hostlist</name></expr></argument>)</argument_list></sizeof></expr>)</condition>
<block>{<block_content>




<expr_stmt><expr><operator>*</operator><name>eos</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"%s, line %u has a %s parameter with a host name that doesn't fit"</literal></expr></argument>,
<argument><expr><name>loadfile</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>PARAM_PASSIVECLIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>PARAM_NULLAUTHPERMIT</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>setting</name></decl>;</decl_stmt>








<expr_stmt><expr><name>setting</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>toklen</name> <operator>=</operator> <call><name>strcspn</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">" \t#\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>toklen</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>toklen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>







<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"%s, line %u has a parameter but no value"</literal></expr></argument>,
<argument><expr><name>loadfile</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>setting</name></expr></argument>, <argument><expr><literal type="string">"YES"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nullAuthAllowed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>nullAuthAllowed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"%s, line %u has an unknown parameter %s"</literal></expr></argument>,
<argument><expr><name>loadfile</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>

<label><name>done</name>:</label>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>num_active_clients</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_ACTIVE_LIST</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>activelist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>address</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>activelist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>port</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>num_active_clients</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"New passive host list: %s"</literal></expr></argument>, <argument><expr><name>hostlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>fileconf_save</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>savefile</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>savefile</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>temphostlist</name><index>[<expr><name>MAX_HOST_LIST</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>lasts</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#Configuration file help.\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#Hosts which are allowed to connect to this server (passive mode)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#Format: PassiveClient = &lt;name or address&gt;\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>temphostlist</name></expr></argument>, <argument><expr><name>hostlist</name></expr></argument>, <argument><expr><name>MAX_HOST_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>temphostlist</name><index>[<expr><name>MAX_HOST_LIST</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>pcap_strtok_r</name><argument_list>(<argument><expr><name>temphostlist</name></expr></argument>, <argument><expr><name>RPCAP_HOSTLIST_SEP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lasts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><name>token</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%s = %s\n"</literal></expr></argument>, <argument><expr><name>PARAM_PASSIVECLIENT</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>pcap_strtok_r</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RPCAP_HOSTLIST_SEP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lasts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>



<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#Hosts to which this server is trying to connect to (active mode)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#Format: ActiveClient = &lt;name or address&gt;, &lt;port | DEFAULT&gt;\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<while>while <condition>(<expr><operator>(</operator><name>i</name> <operator>&lt;</operator> <name>MAX_ACTIVE_LIST</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>activelist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>address</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%s = %s, %s\n"</literal></expr></argument>, <argument><expr><name>PARAM_ACTIVECLIENT</name></expr></argument>,
<argument><expr><name><name>activelist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>address</name></expr></argument>, <argument><expr><name><name>activelist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>


<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#Permit NULL authentication: YES or NO\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%s = %s\n"</literal></expr></argument>, <argument><expr><name>PARAM_NULLAUTHPERMIT</name></expr></argument>,
<argument><expr><ternary><condition><expr><name>nullAuthAllowed</name></expr> ?</condition><then> <expr><literal type="string">"YES"</literal></expr> </then><else>: <expr><literal type="string">"NO"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></else></if_stmt>

</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>skipws</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><call><name>isascii</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>||</operator> <operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>
</unit>
