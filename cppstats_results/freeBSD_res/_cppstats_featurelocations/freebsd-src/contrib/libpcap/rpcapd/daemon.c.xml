<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libpcap/rpcapd/daemon.c">






























<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ftmacros.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"varattrs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;process.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pwd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETSPNAM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;shadow.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pcap.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmtutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sockutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"portability.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rpcap-protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"daemon.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log.h"</cpp:file></cpp:include>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RPCAP_TIMEOUT_INIT</name></cpp:macro> <cpp:value>90</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RPCAP_TIMEOUT_RUNTIME</name></cpp:macro> <cpp:value>180</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RPCAP_SUSPEND_WRONGAUTH</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>


<struct>struct <name>daemon_slpars</name>
<block>{
<decl_stmt><decl><type><name>SOCKET</name></type> <name>sockctrl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>isactive</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nullAuthAllowed</name></decl>;</decl_stmt>
}</block>;</struct>









<struct>struct <name>session</name> <block>{
<decl_stmt><decl><type><name>SOCKET</name></type> <name>sockctrl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SOCKET</name></type> <name>sockdata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8</name></type> <name>protocol_version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>TotCapt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>have_thread</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>thread</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>pthread_t</name></type> <name>thread</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>;</struct>


<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>daemon_msg_err</name><parameter_list>(<parameter><decl><type><name>SOCKET</name></type> <name>sockctrl</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>plen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>daemon_msg_auth_req</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>daemon_slpars</name></name> <modifier>*</modifier></type><name>pars</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>plen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>daemon_AuthUserPwd</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>username</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>password</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>daemon_msg_findallif_req</name><parameter_list>(<parameter><decl><type><name>uint8</name></type> <name>ver</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>daemon_slpars</name></name> <modifier>*</modifier></type><name>pars</name></decl></parameter>,
<parameter><decl><type><name>uint32</name></type> <name>plen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>daemon_msg_open_req</name><parameter_list>(<parameter><decl><type><name>uint8</name></type> <name>ver</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>daemon_slpars</name></name> <modifier>*</modifier></type><name>pars</name></decl></parameter>,
<parameter><decl><type><name>uint32</name></type> <name>plen</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sourcelen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>daemon_msg_startcap_req</name><parameter_list>(<parameter><decl><type><name>uint8</name></type> <name>ver</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>daemon_slpars</name></name> <modifier>*</modifier></type><name>pars</name></decl></parameter>,
<parameter><decl><type><name>uint32</name></type> <name>plen</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>session</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>sessionp</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>rpcap_sampling</name></name> <modifier>*</modifier></type><name>samp_param</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>daemon_msg_endcap_req</name><parameter_list>(<parameter><decl><type><name>uint8</name></type> <name>ver</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>daemon_slpars</name></name> <modifier>*</modifier></type><name>pars</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>session</name></name> <modifier>*</modifier></type><name>session</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>daemon_msg_updatefilter_req</name><parameter_list>(<parameter><decl><type><name>uint8</name></type> <name>ver</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>daemon_slpars</name></name> <modifier>*</modifier></type><name>pars</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>session</name></name> <modifier>*</modifier></type><name>session</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>plen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>daemon_unpackapplyfilter</name><parameter_list>(<parameter><decl><type><name>SOCKET</name></type> <name>sockctrl</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>session</name></name> <modifier>*</modifier></type><name>session</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>plenp</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>daemon_msg_stats_req</name><parameter_list>(<parameter><decl><type><name>uint8</name></type> <name>ver</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>daemon_slpars</name></name> <modifier>*</modifier></type><name>pars</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>session</name></name> <modifier>*</modifier></type><name>session</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>plen</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>pcap_stat</name></name> <modifier>*</modifier></type><name>stats</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>svrcapt</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>daemon_msg_setsampling_req</name><parameter_list>(<parameter><decl><type><name>uint8</name></type> <name>ver</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>daemon_slpars</name></name> <modifier>*</modifier></type><name>pars</name></decl></parameter>,
<parameter><decl><type><name>uint32</name></type> <name>plen</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rpcap_sampling</name></name> <modifier>*</modifier></type><name>samp_param</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>daemon_seraddr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier></type><name>sockaddrin</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rpcap_sockaddr</name></name> <modifier>*</modifier></type><name>sockaddrout</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>unsigned</name> <name>__stdcall</name></type> <name>daemon_thrdatamain</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>daemon_thrdatamain</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>noop_handler</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sign</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>rpcapd_recv_msg_header</name><parameter_list>(<parameter><decl><type><name>SOCKET</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rpcap_header</name></name> <modifier>*</modifier></type><name>headerp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>rpcapd_recv</name><parameter_list>(<parameter><decl><type><name>SOCKET</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>toread</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>plen</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errmsgbuf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>rpcapd_discard</name><parameter_list>(<parameter><decl><type><name>SOCKET</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>session_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>session</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>is_url</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int</name></type>
<name>daemon_serviceloop</name><parameter_list>(<parameter><decl><type><name>SOCKET</name></type> <name>sockctrl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>isactive</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>passiveClients</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>nullAuthAllowed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>daemon_slpars</name></name></type> <name>pars</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>errbuf</name><index>[<expr><name>PCAP_ERRBUF_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>errmsgbuf</name><index>[<expr><name>PCAP_ERRBUF_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>host_port_check_status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nrecv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rpcap_header</name></name></type> <name>header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32</name></type> <name>plen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>authenticated</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>source</name><index>[<expr><name>PCAP_BUF_SIZE</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>got_source</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>sigaction</name></name></type> <name>action</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name><name>struct</name> <name>session</name></name> <modifier>*</modifier></type><name>session</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg_type_string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>client_told_us_to_close</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>pcap_stat</name></name></type> <name>stats</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>svrcapt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>rpcap_sampling</name></name></type> <name>samp_param</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>fd_set</name></type> <name>rfds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>errbuf</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>pars</name><operator>.</operator><name>sockctrl</name></name> <operator>=</operator> <name>sockctrl</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pars</name><operator>.</operator><name>isactive</name></name> <operator>=</operator> <name>isactive</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pars</name><operator>.</operator><name>nullAuthAllowed</name></name> <operator>=</operator> <name>nullAuthAllowed</name></expr>;</expr_stmt>










<if_stmt><if>if <condition>(<expr><name><name>pars</name><operator>.</operator><name>isactive</name></name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>passiveClients</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>passiveClients</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>from</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>socklen_t</name></type> <name>fromlen</name></decl>;</decl_stmt>




<expr_stmt><expr><name>fromlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_storage</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getpeername</name><argument_list>(<argument><expr><name><name>pars</name><operator>.</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>from</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>fromlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sock_geterror</name><argument_list>(<argument><expr><literal type="string">"getpeername()"</literal></expr></argument>, <argument><expr><name>errmsgbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rpcap_senderror</name><argument_list>(<argument><expr><name><name>pars</name><operator>.</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PCAP_ERR_NETW</name></expr></argument>, <argument><expr><name>errmsgbuf</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Send to client failed: %s"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>host_port_check_status</name> <operator>=</operator> <call><name>sock_check_hostlist</name><argument_list>(<argument><expr><name>passiveClients</name></expr></argument>, <argument><expr><name>RPCAP_HOSTLIST_SEP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>from</name></expr></argument>, <argument><expr><name>errmsgbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>passiveClients</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>passiveClients</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>host_port_check_status</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>host_port_check_status</name> <operator>==</operator> <operator>-</operator><literal type="number">2</literal></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>errmsgbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><call><name>rpcap_senderror</name><argument_list>(<argument><expr><name><name>pars</name><operator>.</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PCAP_ERR_HOSTNOAUTH</name></expr></argument>, <argument><expr><name>errmsgbuf</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Send to client failed: %s"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>









<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>action</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>action</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>action</name><operator>.</operator><name>sa_handler</name></name> <operator>=</operator> <name>noop_handler</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>action</name><operator>.</operator><name>sa_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sigemptyset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>action</name><operator>.</operator><name>sa_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sigaction</name><argument_list>(<argument><expr><name>SIGUSR1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>action</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<while>while <condition>(<expr><operator>!</operator><name>authenticated</name></expr>)</condition>
<block>{<block_content>







<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pars</name><operator>.</operator><name>isactive</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name>RPCAP_TIMEOUT_INIT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><name><name>pars</name><operator>.</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>select</name><argument_list>(<argument><expr><name><name>pars</name><operator>.</operator><name>sockctrl</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rfds</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sock_geterror</name><argument_list>(<argument><expr><literal type="string">"select() failed"</literal></expr></argument>, <argument><expr><name>errmsgbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rpcap_senderror</name><argument_list>(<argument><expr><name><name>pars</name><operator>.</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PCAP_ERR_NETW</name></expr></argument>, <argument><expr><name>errmsgbuf</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Send to client failed: %s"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>rpcap_senderror</name><argument_list>(<argument><expr><name><name>pars</name><operator>.</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PCAP_ERR_INITTIMEOUT</name></expr></argument>, <argument><expr><literal type="string">"The RPCAP initial timeout has expired"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Send to client failed: %s"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>nrecv</name> <operator>=</operator> <call><name>rpcapd_recv_msg_header</name><argument_list>(<argument><expr><name><name>pars</name><operator>.</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nrecv</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nrecv</name> <operator>==</operator> <operator>-</operator><literal type="number">2</literal></expr>)</condition>
<block>{<block_content>

<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>plen</name> <operator>=</operator> <name><name>header</name><operator>.</operator><name>plen</name></name></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name><name>header</name><operator>.</operator><name>ver</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><call><name>rpcap_senderror</name><argument_list>(<argument><expr><name><name>pars</name><operator>.</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>ver</name></name></expr></argument>,
<argument><expr><name>PCAP_ERR_WRONGVER</name></expr></argument>,
<argument><expr><literal type="string">"RPCAP version in requests in the authentication phase must be 0"</literal></expr></argument>,
<argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Send to client failed: %s"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>rpcapd_discard</name><argument_list>(<argument><expr><name><name>pars</name><operator>.</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>header</name><operator>.</operator><name>type</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>RPCAP_MSG_AUTH_REQ</name></expr>:</case>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>daemon_msg_auth_req</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pars</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>


<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <operator>-</operator><literal type="number">2</literal></expr>)</condition>
<block>{<block_content>



<continue>continue;</continue>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>authenticated</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>RPCAP_MSG_CLOSE</name></expr>:</case>





<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>rpcapd_discard</name><argument_list>(<argument><expr><name><name>pars</name><operator>.</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

<case>case <expr><name>RPCAP_MSG_ERROR</name></expr>:</case>







<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>daemon_msg_err</name><argument_list>(<argument><expr><name><name>pars</name><operator>.</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>

<case>case <expr><name>RPCAP_MSG_FINDALLIF_REQ</name></expr>:</case>
<case>case <expr><name>RPCAP_MSG_OPEN_REQ</name></expr>:</case>
<case>case <expr><name>RPCAP_MSG_STARTCAP_REQ</name></expr>:</case>
<case>case <expr><name>RPCAP_MSG_UPDATEFILTER_REQ</name></expr>:</case>
<case>case <expr><name>RPCAP_MSG_STATS_REQ</name></expr>:</case>
<case>case <expr><name>RPCAP_MSG_ENDCAP_REQ</name></expr>:</case>
<case>case <expr><name>RPCAP_MSG_SETSAMPLING_REQ</name></expr>:</case>




<expr_stmt><expr><name>msg_type_string</name> <operator>=</operator> <call><name>rpcap_msg_type_string</name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>msg_type_string</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errmsgbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"%s request sent before authentication was completed"</literal></expr></argument>, <argument><expr><name>msg_type_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errmsgbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"Message of type %u sent before authentication was completed"</literal></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rpcap_senderror</name><argument_list>(<argument><expr><name><name>pars</name><operator>.</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>ver</name></name></expr></argument>,
<argument><expr><name>PCAP_ERR_WRONGMSG</name></expr></argument>, <argument><expr><name>errmsgbuf</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Send to client failed: %s"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rpcapd_discard</name><argument_list>(<argument><expr><name><name>pars</name><operator>.</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>RPCAP_MSG_PACKET</name></expr>:</case>
<case>case <expr><name>RPCAP_MSG_FINDALLIF_REPLY</name></expr>:</case>
<case>case <expr><name>RPCAP_MSG_OPEN_REPLY</name></expr>:</case>
<case>case <expr><name>RPCAP_MSG_STARTCAP_REPLY</name></expr>:</case>
<case>case <expr><name>RPCAP_MSG_UPDATEFILTER_REPLY</name></expr>:</case>
<case>case <expr><name>RPCAP_MSG_AUTH_REPLY</name></expr>:</case>
<case>case <expr><name>RPCAP_MSG_STATS_REPLY</name></expr>:</case>
<case>case <expr><name>RPCAP_MSG_ENDCAP_REPLY</name></expr>:</case>
<case>case <expr><name>RPCAP_MSG_SETSAMPLING_REPLY</name></expr>:</case>



<expr_stmt><expr><name>msg_type_string</name> <operator>=</operator> <call><name>rpcap_msg_type_string</name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>msg_type_string</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errmsgbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"Server-to-client message %s received from client"</literal></expr></argument>, <argument><expr><name>msg_type_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errmsgbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"Server-to-client message of type %u received from client"</literal></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rpcap_senderror</name><argument_list>(<argument><expr><name><name>pars</name><operator>.</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>ver</name></name></expr></argument>,
<argument><expr><name>PCAP_ERR_WRONGMSG</name></expr></argument>, <argument><expr><name>errmsgbuf</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Send to client failed: %s"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rpcapd_discard</name><argument_list>(<argument><expr><name><name>pars</name><operator>.</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<default>default:</default>



<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errmsgbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"Unknown message type %u"</literal></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rpcap_senderror</name><argument_list>(<argument><expr><name><name>pars</name><operator>.</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>ver</name></name></expr></argument>,
<argument><expr><name>PCAP_ERR_WRONGMSG</name></expr></argument>, <argument><expr><name>errmsgbuf</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Send to client failed: %s"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rpcapd_discard</name><argument_list>(<argument><expr><name><name>pars</name><operator>.</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></while>









<expr_stmt><expr><name><name>stats</name><operator>.</operator><name>ps_ifdrop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stats</name><operator>.</operator><name>ps_recv</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stats</name><operator>.</operator><name>ps_drop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>svrcapt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>




<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<expr_stmt><expr><name><name>errbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>










<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>pars</name><operator>.</operator><name>isactive</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>session</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>session</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>session</name><operator>-&gt;</operator><name>sockdata</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name>RPCAP_TIMEOUT_RUNTIME</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><name><name>pars</name><operator>.</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>select</name><argument_list>(<argument><expr><name><name>pars</name><operator>.</operator><name>sockctrl</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rfds</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sock_geterror</name><argument_list>(<argument><expr><literal type="string">"select() failed"</literal></expr></argument>, <argument><expr><name>errmsgbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rpcap_senderror</name><argument_list>(<argument><expr><name><name>pars</name><operator>.</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>PCAP_ERR_NETW</name></expr></argument>, <argument><expr><name>errmsgbuf</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Send to client failed: %s"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>rpcap_senderror</name><argument_list>(<argument><expr><name><name>pars</name><operator>.</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>PCAP_ERR_INITTIMEOUT</name></expr></argument>,
<argument><expr><literal type="string">"The RPCAP initial timeout has expired"</literal></expr></argument>,
<argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Send to client failed: %s"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>nrecv</name> <operator>=</operator> <call><name>rpcapd_recv_msg_header</name><argument_list>(<argument><expr><name><name>pars</name><operator>.</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nrecv</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nrecv</name> <operator>==</operator> <operator>-</operator><literal type="number">2</literal></expr>)</condition>
<block>{<block_content>

<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>plen</name> <operator>=</operator> <name><name>header</name><operator>.</operator><name>plen</name></name></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RPCAP_VERSION_IS_SUPPORTED</name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>ver</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>






<if_stmt><if>if <condition>(<expr><call><name>rpcap_senderror</name><argument_list>(<argument><expr><name><name>pars</name><operator>.</operator><name>sockctrl</name></name></expr></argument>,
<argument><expr><name><name>header</name><operator>.</operator><name>ver</name></name></expr></argument>, <argument><expr><name>PCAP_ERR_WRONGVER</name></expr></argument>,
<argument><expr><literal type="string">"RPCAP version in message isn't supported by the server"</literal></expr></argument>,
<argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Send to client failed: %s"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>rpcapd_discard</name><argument_list>(<argument><expr><name><name>pars</name><operator>.</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>header</name><operator>.</operator><name>type</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>RPCAP_MSG_ERROR</name></expr>:</case>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>daemon_msg_err</name><argument_list>(<argument><expr><name><name>pars</name><operator>.</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<break>break;</break>
</block_content>}</block>

<case>case <expr><name>RPCAP_MSG_FINDALLIF_REQ</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>daemon_msg_findallif_req</name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>ver</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pars</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>


<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>RPCAP_MSG_OPEN_REQ</name></expr>:</case>
<block>{<block_content>









<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>daemon_msg_open_req</name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>ver</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pars</name></expr></argument>,
<argument><expr><name>plen</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>


<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>got_source</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>RPCAP_MSG_STARTCAP_REQ</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_source</name></expr>)</condition>
<block>{<block_content>


<if_stmt><if>if <condition>(<expr><call><name>rpcap_senderror</name><argument_list>(<argument><expr><name><name>pars</name><operator>.</operator><name>sockctrl</name></name></expr></argument>,
<argument><expr><name><name>header</name><operator>.</operator><name>ver</name></name></expr></argument>,
<argument><expr><name>PCAP_ERR_STARTCAPTURE</name></expr></argument>,
<argument><expr><literal type="string">"No capture device was specified"</literal></expr></argument>,
<argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Send to client failed: %s"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rpcapd_discard</name><argument_list>(<argument><expr><name><name>pars</name><operator>.</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>daemon_msg_startcap_req</name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>ver</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pars</name></expr></argument>,
<argument><expr><name>plen</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>session</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>samp_param</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>


<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>RPCAP_MSG_UPDATEFILTER_REQ</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>session</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>daemon_msg_updatefilter_req</name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>ver</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>pars</name></expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>


<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>rpcap_senderror</name><argument_list>(<argument><expr><name><name>pars</name><operator>.</operator><name>sockctrl</name></name></expr></argument>,
<argument><expr><name><name>header</name><operator>.</operator><name>ver</name></name></expr></argument>, <argument><expr><name>PCAP_ERR_UPDATEFILTER</name></expr></argument>,
<argument><expr><literal type="string">"Device not opened. Cannot update filter"</literal></expr></argument>,
<argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Send to client failed: %s"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>RPCAP_MSG_CLOSE</name></expr>:</case>
<block>{<block_content>





<expr_stmt><expr><name>client_told_us_to_close</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"The other end system asked to close the connection."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block>

<case>case <expr><name>RPCAP_MSG_STATS_REQ</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>daemon_msg_stats_req</name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>ver</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pars</name></expr></argument>,
<argument><expr><name>session</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stats</name></expr></argument>, <argument><expr><name>svrcapt</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>


<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>RPCAP_MSG_ENDCAP_REQ</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>session</name></expr>)</condition>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>pcap_stats</name><argument_list>(<argument><expr><name><name>session</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stats</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>svrcapt</name> <operator>=</operator> <name><name>session</name><operator>-&gt;</operator><name>TotCapt</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>stats</name><operator>.</operator><name>ps_ifdrop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stats</name><operator>.</operator><name>ps_recv</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stats</name><operator>.</operator><name>ps_drop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>svrcapt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>daemon_msg_endcap_req</name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>ver</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>pars</name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>session</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>session</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>rpcap_senderror</name><argument_list>(<argument><expr><name><name>pars</name><operator>.</operator><name>sockctrl</name></name></expr></argument>,
<argument><expr><name><name>header</name><operator>.</operator><name>ver</name></name></expr></argument>, <argument><expr><name>PCAP_ERR_ENDCAPTURE</name></expr></argument>,
<argument><expr><literal type="string">"Device not opened. Cannot close the capture"</literal></expr></argument>,
<argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>RPCAP_MSG_SETSAMPLING_REQ</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>daemon_msg_setsampling_req</name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>ver</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>pars</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>samp_param</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>


<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>RPCAP_MSG_AUTH_REQ</name></expr>:</case>
<block>{<block_content>




<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_INFO</name></expr></argument>, <argument><expr><literal type="string">"The client sent an RPCAP_MSG_AUTH_REQ message after authentication was completed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rpcap_senderror</name><argument_list>(<argument><expr><name><name>pars</name><operator>.</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>ver</name></name></expr></argument>,
<argument><expr><name>PCAP_ERR_WRONGMSG</name></expr></argument>,
<argument><expr><literal type="string">"RPCAP_MSG_AUTH_REQ request sent after authentication was completed"</literal></expr></argument>,
<argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Send to client failed: %s"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rpcapd_discard</name><argument_list>(<argument><expr><name><name>pars</name><operator>.</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<goto>goto <name>end</name>;</goto>

<case>case <expr><name>RPCAP_MSG_PACKET</name></expr>:</case>
<case>case <expr><name>RPCAP_MSG_FINDALLIF_REPLY</name></expr>:</case>
<case>case <expr><name>RPCAP_MSG_OPEN_REPLY</name></expr>:</case>
<case>case <expr><name>RPCAP_MSG_STARTCAP_REPLY</name></expr>:</case>
<case>case <expr><name>RPCAP_MSG_UPDATEFILTER_REPLY</name></expr>:</case>
<case>case <expr><name>RPCAP_MSG_AUTH_REPLY</name></expr>:</case>
<case>case <expr><name>RPCAP_MSG_STATS_REPLY</name></expr>:</case>
<case>case <expr><name>RPCAP_MSG_ENDCAP_REPLY</name></expr>:</case>
<case>case <expr><name>RPCAP_MSG_SETSAMPLING_REPLY</name></expr>:</case>



<expr_stmt><expr><name>msg_type_string</name> <operator>=</operator> <call><name>rpcap_msg_type_string</name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>msg_type_string</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_INFO</name></expr></argument>, <argument><expr><literal type="string">"The client sent a %s server-to-client message"</literal></expr></argument>, <argument><expr><name>msg_type_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errmsgbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"Server-to-client message %s received from client"</literal></expr></argument>, <argument><expr><name>msg_type_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_INFO</name></expr></argument>, <argument><expr><literal type="string">"The client sent a server-to-client message of type %u"</literal></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errmsgbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"Server-to-client message of type %u received from client"</literal></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rpcap_senderror</name><argument_list>(<argument><expr><name><name>pars</name><operator>.</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>ver</name></name></expr></argument>,
<argument><expr><name>PCAP_ERR_WRONGMSG</name></expr></argument>, <argument><expr><name>errmsgbuf</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Send to client failed: %s"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rpcapd_discard</name><argument_list>(<argument><expr><name><name>pars</name><operator>.</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<goto>goto <name>end</name>;</goto>

<default>default:</default>



<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_INFO</name></expr></argument>, <argument><expr><literal type="string">"The client sent a message of type %u"</literal></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errmsgbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"Unknown message type %u"</literal></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rpcap_senderror</name><argument_list>(<argument><expr><name><name>pars</name><operator>.</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>ver</name></name></expr></argument>,
<argument><expr><name>PCAP_ERR_WRONGMSG</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>errmsgbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Send to client failed: %s"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rpcapd_discard</name><argument_list>(<argument><expr><name><name>pars</name><operator>.</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<goto>goto <name>end</name>;</goto>
</block_content>}</block></if></if_stmt>
<goto>goto <name>end</name>;</goto>
</block_content>}</block>
</block_content>}</block></switch>
</block_content>}</block></for>

<label><name>end</name>:</label>


<if_stmt><if>if <condition>(<expr><name>session</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>session_close</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>session</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sock_close</name><argument_list>(<argument><expr><name>sockctrl</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"I'm exiting from the child loop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>client_told_us_to_close</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>daemon_msg_err</name><parameter_list>(<parameter><decl><type><name>SOCKET</name></type> <name>sockctrl</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>plen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>errbuf</name><index>[<expr><name>PCAP_ERRBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>remote_errbuf</name><index>[<expr><name>PCAP_ERRBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>plen</name> <operator>&gt;=</operator> <name>PCAP_ERRBUF_SIZE</name></expr>)</condition>
<block>{<block_content>




<if_stmt><if>if <condition>(<expr><call><name>sock_recv</name><argument_list>(<argument><expr><name>sockctrl</name></expr></argument>, <argument><expr><name>remote_errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
<argument><expr><name>SOCK_RECEIVEALL_YES</name><operator>|</operator><name>SOCK_EOF_IS_ERROR</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Read from client failed: %s"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rpcapd_discard</name><argument_list>(<argument><expr><name>sockctrl</name></expr></argument>, <argument><expr><name>plen</name> <operator>-</operator> <operator>(</operator><name>PCAP_ERRBUF_SIZE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name><name>remote_errbuf</name><index>[<expr><name>PCAP_ERRBUF_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>plen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><name><name>remote_errbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>sock_recv</name><argument_list>(<argument><expr><name>sockctrl</name></expr></argument>, <argument><expr><name>remote_errbuf</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>,
<argument><expr><name>SOCK_RECEIVEALL_YES</name><operator>|</operator><name>SOCK_EOF_IS_ERROR</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Read from client failed: %s"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name><name>remote_errbuf</name><index>[<expr><name>plen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error from client: %s"</literal></expr></argument>, <argument><expr><name>remote_errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>























<function><type><specifier>static</specifier> <name>int</name></type>
<name>daemon_msg_auth_req</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>daemon_slpars</name></name> <modifier>*</modifier></type><name>pars</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>plen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>errbuf</name><index>[<expr><name>PCAP_ERRBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>errmsgbuf</name><index>[<expr><name>PCAP_ERRBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rpcap_auth</name></name></type> <name>auth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>sendbuf</name><index>[<expr><name>RPCAP_NETBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sendbufidx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rpcap_authreply</name></name> <modifier>*</modifier></type><name>authreply</name></decl>;</decl_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>rpcapd_recv</name><argument_list>(<argument><expr><name><name>pars</name><operator>-&gt;</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>auth</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_auth</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>plen</name></expr></argument>, <argument><expr><name>errmsgbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <operator>-</operator><literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>auth</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>RPCAP_RMTAUTH_NULL</name></expr>:</case>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pars</name><operator>-&gt;</operator><name>nullAuthAllowed</name></name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errmsgbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"Authentication failed; NULL authentication not permitted."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rpcap_senderror</name><argument_list>(<argument><expr><name><name>pars</name><operator>-&gt;</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>PCAP_ERR_AUTH_FAILED</name></expr></argument>, <argument><expr><name>errmsgbuf</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Send to client failed: %s"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<goto>goto <name>error_noreply</name>;</goto>
</block_content>}</block></if></if_stmt>
<break>break;</break>
</block_content>}</block>

<case>case <expr><name>RPCAP_RMTAUTH_PWD</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>username</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>passwd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32</name></type> <name>usernamelen</name></decl>, <decl><type ref="prev"/><name>passwdlen</name></decl>;</decl_stmt>

<expr_stmt><expr><name>usernamelen</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>auth</name><operator>.</operator><name>slen1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>username</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>usernamelen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>username</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name>errmsgbuf</name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"malloc() failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>rpcapd_recv</name><argument_list>(<argument><expr><name><name>pars</name><operator>-&gt;</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><name>username</name></expr></argument>, <argument><expr><name>usernamelen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>plen</name></expr></argument>, <argument><expr><name>errmsgbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>username</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <operator>-</operator><literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>username</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>username</name><index>[<expr><name>usernamelen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>passwdlen</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>auth</name><operator>.</operator><name>slen2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>passwd</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>passwdlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>passwd</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name>errmsgbuf</name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"malloc() failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>username</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>rpcapd_recv</name><argument_list>(<argument><expr><name><name>pars</name><operator>-&gt;</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><name>passwd</name></expr></argument>, <argument><expr><name>passwdlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>plen</name></expr></argument>, <argument><expr><name>errmsgbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>username</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>passwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <operator>-</operator><literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>username</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>passwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>passwd</name><index>[<expr><name>passwdlen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>daemon_AuthUserPwd</name><argument_list>(<argument><expr><name>username</name></expr></argument>, <argument><expr><name>passwd</name></expr></argument>, <argument><expr><name>errmsgbuf</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>




<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>username</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>passwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rpcap_senderror</name><argument_list>(<argument><expr><name><name>pars</name><operator>-&gt;</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>PCAP_ERR_AUTH_FAILED</name></expr></argument>, <argument><expr><name>errmsgbuf</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Send to client failed: %s"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>











<expr_stmt><expr><call><name>sleep_secs</name><argument_list>(<argument><expr><name>RPCAP_SUSPEND_WRONGAUTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error_noreply</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>username</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>passwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<default>default:</default>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errmsgbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"Authentication type not recognized."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>rpcap_senderror</name><argument_list>(<argument><expr><name><name>pars</name><operator>-&gt;</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>PCAP_ERR_AUTH_TYPE_NOTSUP</name></expr></argument>, <argument><expr><name>errmsgbuf</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Send to client failed: %s"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<goto>goto <name>error_noreply</name>;</goto>
</block_content>}</block></switch>


<if_stmt><if>if <condition>(<expr><call><name>sock_bufferize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_header</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sendbufidx</name></expr></argument>,
<argument><expr><name>RPCAP_NETBUF_SIZE</name></expr></argument>, <argument><expr><name>SOCKBUF_CHECKONLY</name></expr></argument>, <argument><expr><name>errmsgbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rpcap_createhdr</name><argument_list>(<argument><expr><operator>(</operator>struct <name>rpcap_header</name> <operator>*</operator><operator>)</operator> <name>sendbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name>RPCAP_MSG_AUTH_REPLY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_authreply</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>authreply</name> <operator>=</operator> <operator>(</operator>struct <name>rpcap_authreply</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>sendbuf</name><index>[<expr><name>sendbufidx</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sock_bufferize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_authreply</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sendbufidx</name></expr></argument>,
<argument><expr><name>RPCAP_NETBUF_SIZE</name></expr></argument>, <argument><expr><name>SOCKBUF_CHECKONLY</name></expr></argument>, <argument><expr><name>errmsgbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>




<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>authreply</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_authreply</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>authreply</name><operator>-&gt;</operator><name>minvers</name></name> <operator>=</operator> <name>RPCAP_MIN_VERSION</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>authreply</name><operator>-&gt;</operator><name>maxvers</name></name> <operator>=</operator> <name>RPCAP_MAX_VERSION</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>sock_send</name><argument_list>(<argument><expr><name><name>pars</name><operator>-&gt;</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><name>sendbuf</name></expr></argument>, <argument><expr><name>sendbufidx</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Send to client failed: %s"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>rpcapd_discard</name><argument_list>(<argument><expr><name><name>pars</name><operator>-&gt;</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>error</name>:</label>
<if_stmt><if>if <condition>(<expr><call><name>rpcap_senderror</name><argument_list>(<argument><expr><name><name>pars</name><operator>-&gt;</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PCAP_ERR_AUTH</name></expr></argument>, <argument><expr><name>errmsgbuf</name></expr></argument>,
<argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Send to client failed: %s"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<label><name>error_noreply</name>:</label>

<if_stmt><if>if <condition>(<expr><call><name>rpcapd_discard</name><argument_list>(<argument><expr><name><name>pars</name><operator>-&gt;</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>daemon_AuthUserPwd</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>username</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>password</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>


















<decl_stmt><decl><type><name>DWORD</name></type> <name>error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name>Token</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>errmsgbuf</name><index>[<expr><name>PCAP_ERRBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>LogonUser</name><argument_list>(<argument><expr><name>username</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>, <argument><expr><name>password</name></expr></argument>, <argument><expr><name>LOGON32_LOGON_NETWORK</name></expr></argument>, <argument><expr><name>LOGON32_PROVIDER_DEFAULT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Token</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"Authentication failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>GetLastError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name> <operator>!=</operator> <name>ERROR_LOGON_FAILURE</name></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_win32_err</name><argument_list>(<argument><expr><name>errmsgbuf</name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">"LogonUser() failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>errmsgbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><call><name>ImpersonateLoggedOnUser</name><argument_list>(<argument><expr><name>Token</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"Authentication failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_win32_err</name><argument_list>(<argument><expr><name>errmsgbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"ImpersonateLoggedOnUser() failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>errmsgbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>Token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>Token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>



















<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>passwd</name></name> <modifier>*</modifier></type><name>user</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>user_password</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETSPNAM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>spwd</name></name> <modifier>*</modifier></type><name>usersp</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>crypt_password</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>user</name> <operator>=</operator> <call><name>getpwnam</name><argument_list>(<argument><expr><name>username</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"Authentication failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETSPNAM</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>usersp</name> <operator>=</operator> <call><name>getspnam</name><argument_list>(<argument><expr><name>username</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"Authentication failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>user_password</name> <operator>=</operator> <name><name>usersp</name><operator>-&gt;</operator><name>sp_pwdp</name></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>










<expr_stmt><expr><name>user_password</name> <operator>=</operator> <name><name>user</name><operator>-&gt;</operator><name>pw_passwd</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>crypt_password</name> <operator>=</operator> <call><name>crypt</name><argument_list>(<argument><expr><name>password</name></expr></argument>, <argument><expr><name>user_password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>crypt_password</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"Authentication failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>error</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"crypt() failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"crypt() failed: %s"</literal></expr></argument>,
<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>user_password</name></expr></argument>, <argument><expr><name>crypt_password</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"Authentication failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>setuid</name><argument_list>(<argument><expr><name><name>user</name><operator>-&gt;</operator><name>pw_uid</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>error</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">"setuid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"setuid() failed: %s"</literal></expr></argument>,
<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>











<return>return <expr><literal type="number">0</literal></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>daemon_msg_findallif_req</name><parameter_list>(<parameter><decl><type><name>uint8</name></type> <name>ver</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>daemon_slpars</name></name> <modifier>*</modifier></type><name>pars</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>plen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>errbuf</name><index>[<expr><name>PCAP_ERRBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>errmsgbuf</name><index>[<expr><name>PCAP_ERRBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>sendbuf</name><index>[<expr><name>RPCAP_NETBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sendbufidx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pcap_if_t</name> <modifier>*</modifier></type><name>alldevs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pcap_if_t</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_addr</name></name> <modifier>*</modifier></type><name>address</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rpcap_findalldevs_if</name></name> <modifier>*</modifier></type><name>findalldevs_if</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32</name></type> <name>replylen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16</name></type> <name>nif</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>rpcapd_discard</name><argument_list>(<argument><expr><name><name>pars</name><operator>-&gt;</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>pcap_findalldevs</name><argument_list>(<argument><expr><operator>&amp;</operator><name>alldevs</name></expr></argument>, <argument><expr><name>errmsgbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>alldevs</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>rpcap_senderror</name><argument_list>(<argument><expr><name><name>pars</name><operator>-&gt;</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><name>ver</name></expr></argument>, <argument><expr><name>PCAP_ERR_NOREMOTEIF</name></expr></argument>,
<argument><expr><literal type="string">"No interfaces found! Make sure libpcap/WinPcap is properly installed"</literal>
<literal type="string">" and you have the right to access to the remote device."</literal></expr></argument>,
<argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Send to client failed: %s"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>replylen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>d</name> <operator>=</operator> <name>alldevs</name></expr>;</init> <condition><expr><name>d</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>d</name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>nif</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>description</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>replylen</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>description</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>replylen</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>replylen</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_findalldevs_if</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>address</name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>addresses</name></name></expr>;</init> <condition><expr><name>address</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>address</name> <operator>=</operator> <name><name>address</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
<block>{<block_content>



<switch>switch <condition>(<expr><name><name>address</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>sa_family</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>AF_INET</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>AF_INET6</name></expr>:</case>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>replylen</name> <operator>+=</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_sockaddr</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><call><name>sock_bufferize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_header</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>sendbufidx</name></expr></argument>, <argument><expr><name>RPCAP_NETBUF_SIZE</name></expr></argument>, <argument><expr><name>SOCKBUF_CHECKONLY</name></expr></argument>, <argument><expr><name>errmsgbuf</name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rpcap_createhdr</name><argument_list>(<argument><expr><operator>(</operator>struct <name>rpcap_header</name> <operator>*</operator><operator>)</operator> <name>sendbuf</name></expr></argument>, <argument><expr><name>ver</name></expr></argument>,
<argument><expr><name>RPCAP_MSG_FINDALLIF_REPLY</name></expr></argument>, <argument><expr><name>nif</name></expr></argument>, <argument><expr><name>replylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>d</name> <operator>=</operator> <name>alldevs</name></expr>;</init> <condition><expr><name>d</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>d</name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name>uint16</name></type> <name>lname</name></decl>, <decl><type ref="prev"/><name>ldescr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>findalldevs_if</name> <operator>=</operator> <operator>(</operator>struct <name>rpcap_findalldevs_if</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>sendbuf</name><index>[<expr><name>sendbufidx</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sock_bufferize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_findalldevs_if</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>sendbufidx</name></expr></argument>, <argument><expr><name>RPCAP_NETBUF_SIZE</name></expr></argument>, <argument><expr><name>SOCKBUF_CHECKONLY</name></expr></argument>, <argument><expr><name>errmsgbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>findalldevs_if</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_findalldevs_if</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>description</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ldescr</name> <operator>=</operator> <operator>(</operator><name>short</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>description</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>ldescr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>lname</name> <operator>=</operator> <operator>(</operator><name>short</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>lname</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>findalldevs_if</name><operator>-&gt;</operator><name>desclen</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>ldescr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>findalldevs_if</name><operator>-&gt;</operator><name>namelen</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>lname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>findalldevs_if</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>address</name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>addresses</name></name></expr>;</init> <condition><expr><name>address</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>address</name> <operator>=</operator> <name><name>address</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
<block>{<block_content>



<switch>switch <condition>(<expr><name><name>address</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>sa_family</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>AF_INET</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>AF_INET6</name></expr>:</case>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>findalldevs_if</name><operator>-&gt;</operator><name>naddr</name></name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
<expr_stmt><expr><name><name>findalldevs_if</name><operator>-&gt;</operator><name>naddr</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>findalldevs_if</name><operator>-&gt;</operator><name>naddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sock_bufferize</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>lname</name></expr></argument>, <argument><expr><name>sendbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sendbufidx</name></expr></argument>,
<argument><expr><name>RPCAP_NETBUF_SIZE</name></expr></argument>, <argument><expr><name>SOCKBUF_BUFFERIZE</name></expr></argument>, <argument><expr><name>errmsgbuf</name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sock_bufferize</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>description</name></name></expr></argument>, <argument><expr><name>ldescr</name></expr></argument>, <argument><expr><name>sendbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sendbufidx</name></expr></argument>,
<argument><expr><name>RPCAP_NETBUF_SIZE</name></expr></argument>, <argument><expr><name>SOCKBUF_BUFFERIZE</name></expr></argument>, <argument><expr><name>errmsgbuf</name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>


<for>for <control>(<init><expr><name>address</name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>addresses</name></name></expr>;</init> <condition><expr><name>address</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>address</name> <operator>=</operator> <name><name>address</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>rpcap_sockaddr</name></name> <modifier>*</modifier></type><name>sockaddr</name></decl>;</decl_stmt>




<switch>switch <condition>(<expr><name><name>address</name><operator>-&gt;</operator><name>addr</name><operator>-&gt;</operator><name>sa_family</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>AF_INET</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>AF_INET6</name></expr>:</case>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>sockaddr</name> <operator>=</operator> <operator>(</operator>struct <name>rpcap_sockaddr</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>sendbuf</name><index>[<expr><name>sendbufidx</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sock_bufferize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_sockaddr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>sendbufidx</name></expr></argument>, <argument><expr><name>RPCAP_NETBUF_SIZE</name></expr></argument>, <argument><expr><name>SOCKBUF_CHECKONLY</name></expr></argument>, <argument><expr><name>errmsgbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>daemon_seraddr</name><argument_list>(<argument><expr><operator>(</operator>struct <name>sockaddr_storage</name> <operator>*</operator><operator>)</operator> <name><name>address</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>sockaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sockaddr</name> <operator>=</operator> <operator>(</operator>struct <name>rpcap_sockaddr</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>sendbuf</name><index>[<expr><name>sendbufidx</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sock_bufferize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_sockaddr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>sendbufidx</name></expr></argument>, <argument><expr><name>RPCAP_NETBUF_SIZE</name></expr></argument>, <argument><expr><name>SOCKBUF_CHECKONLY</name></expr></argument>, <argument><expr><name>errmsgbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>daemon_seraddr</name><argument_list>(<argument><expr><operator>(</operator>struct <name>sockaddr_storage</name> <operator>*</operator><operator>)</operator> <name><name>address</name><operator>-&gt;</operator><name>netmask</name></name></expr></argument>, <argument><expr><name>sockaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sockaddr</name> <operator>=</operator> <operator>(</operator>struct <name>rpcap_sockaddr</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>sendbuf</name><index>[<expr><name>sendbufidx</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sock_bufferize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_sockaddr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>sendbufidx</name></expr></argument>, <argument><expr><name>RPCAP_NETBUF_SIZE</name></expr></argument>, <argument><expr><name>SOCKBUF_CHECKONLY</name></expr></argument>, <argument><expr><name>errmsgbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>daemon_seraddr</name><argument_list>(<argument><expr><operator>(</operator>struct <name>sockaddr_storage</name> <operator>*</operator><operator>)</operator> <name><name>address</name><operator>-&gt;</operator><name>broadaddr</name></name></expr></argument>, <argument><expr><name>sockaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sockaddr</name> <operator>=</operator> <operator>(</operator>struct <name>rpcap_sockaddr</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>sendbuf</name><index>[<expr><name>sendbufidx</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>sock_bufferize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_sockaddr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>sendbufidx</name></expr></argument>, <argument><expr><name>RPCAP_NETBUF_SIZE</name></expr></argument>, <argument><expr><name>SOCKBUF_CHECKONLY</name></expr></argument>, <argument><expr><name>errmsgbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>daemon_seraddr</name><argument_list>(<argument><expr><operator>(</operator>struct <name>sockaddr_storage</name> <operator>*</operator><operator>)</operator> <name><name>address</name><operator>-&gt;</operator><name>dstaddr</name></name></expr></argument>, <argument><expr><name>sockaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></for>
</block_content>}</block></for>


<expr_stmt><expr><call><name>pcap_freealldevs</name><argument_list>(<argument><expr><name>alldevs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>sock_send</name><argument_list>(<argument><expr><name><name>pars</name><operator>-&gt;</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><name>sendbuf</name></expr></argument>, <argument><expr><name>sendbufidx</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Send to client failed: %s"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>error</name>:</label>
<if_stmt><if>if <condition>(<expr><name>alldevs</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>pcap_freealldevs</name><argument_list>(<argument><expr><name>alldevs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rpcap_senderror</name><argument_list>(<argument><expr><name><name>pars</name><operator>-&gt;</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><name>ver</name></expr></argument>, <argument><expr><name>PCAP_ERR_FINDALLIF</name></expr></argument>,
<argument><expr><name>errmsgbuf</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Send to client failed: %s"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>daemon_msg_open_req</name><parameter_list>(<parameter><decl><type><name>uint8</name></type> <name>ver</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>daemon_slpars</name></name> <modifier>*</modifier></type><name>pars</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>plen</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sourcelen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>errbuf</name><index>[<expr><name>PCAP_ERRBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>errmsgbuf</name><index>[<expr><name>PCAP_ERRBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>sendbuf</name><index>[<expr><name>RPCAP_NETBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sendbufidx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rpcap_openreply</name></name> <modifier>*</modifier></type><name>openreply</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>plen</name> <operator>&gt;</operator> <name>sourcelen</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errmsgbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"Source string too long"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nread</name> <operator>=</operator> <call><name>sock_recv</name><argument_list>(<argument><expr><name><name>pars</name><operator>-&gt;</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>,
<argument><expr><name>SOCK_RECEIVEALL_YES</name><operator>|</operator><name>SOCK_EOF_IS_ERROR</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nread</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Read from client failed: %s"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>source</name><index>[<expr><name>nread</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>plen</name> <operator>-=</operator> <name>nread</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><call><name>is_url</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errmsgbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"Source string refers to a remote device"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fp</name> <operator>=</operator> <call><name>pcap_open_live</name><argument_list>(<argument><expr><name>source</name></expr></argument>,
<argument><expr><literal type="number">1500</literal></expr></argument> ,
<argument><expr><literal type="number">0</literal></expr></argument> ,
<argument><expr><literal type="number">1000</literal></expr></argument> ,
<argument><expr><name>errmsgbuf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>sock_bufferize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_header</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sendbufidx</name></expr></argument>,
<argument><expr><name>RPCAP_NETBUF_SIZE</name></expr></argument>, <argument><expr><name>SOCKBUF_CHECKONLY</name></expr></argument>, <argument><expr><name>errmsgbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rpcap_createhdr</name><argument_list>(<argument><expr><operator>(</operator>struct <name>rpcap_header</name> <operator>*</operator><operator>)</operator> <name>sendbuf</name></expr></argument>, <argument><expr><name>ver</name></expr></argument>,
<argument><expr><name>RPCAP_MSG_OPEN_REPLY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_openreply</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>openreply</name> <operator>=</operator> <operator>(</operator>struct <name>rpcap_openreply</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>sendbuf</name><index>[<expr><name>sendbufidx</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sock_bufferize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_openreply</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sendbufidx</name></expr></argument>,
<argument><expr><name>RPCAP_NETBUF_SIZE</name></expr></argument>, <argument><expr><name>SOCKBUF_CHECKONLY</name></expr></argument>, <argument><expr><name>errmsgbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>openreply</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_openreply</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>openreply</name><operator>-&gt;</operator><name>linktype</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><call><name>pcap_datalink</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>openreply</name><operator>-&gt;</operator><name>tzoff</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>pcap_close</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>sock_send</name><argument_list>(<argument><expr><name><name>pars</name><operator>-&gt;</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><name>sendbuf</name></expr></argument>, <argument><expr><name>sendbufidx</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Send to client failed: %s"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>error</name>:</label>
<if_stmt><if>if <condition>(<expr><call><name>rpcap_senderror</name><argument_list>(<argument><expr><name><name>pars</name><operator>-&gt;</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><name>ver</name></expr></argument>, <argument><expr><name>PCAP_ERR_OPEN</name></expr></argument>,
<argument><expr><name>errmsgbuf</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Send to client failed: %s"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>rpcapd_discard</name><argument_list>(<argument><expr><name><name>pars</name><operator>-&gt;</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>daemon_msg_startcap_req</name><parameter_list>(<parameter><decl><type><name>uint8</name></type> <name>ver</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>daemon_slpars</name></name> <modifier>*</modifier></type><name>pars</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>plen</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>session</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>sessionp</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>rpcap_sampling</name></name> <modifier>*</modifier><name>samp_param</name></type> <name>_U_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>errbuf</name><index>[<expr><name>PCAP_ERRBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>errmsgbuf</name><index>[<expr><name>PCAP_ERRBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>portdata</name><index>[<expr><name>PCAP_BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>peerhost</name><index>[<expr><name>PCAP_BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>session</name></name> <modifier>*</modifier></type><name>session</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>sendbuf</name><index>[<expr><name>RPCAP_NETBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sendbufidx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>hints</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>addrinfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>saddr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>socklen_t</name></type> <name>saddrlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>struct</name> <name>rpcap_startcapreq</name></name></type> <name>startcapreq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rpcap_startcapreply</name></name> <modifier>*</modifier></type><name>startcapreply</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>serveropen_dp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>addrinfo</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>rpcapd_recv</name><argument_list>(<argument><expr><name><name>pars</name><operator>-&gt;</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>startcapreq</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_startcapreq</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>plen</name></expr></argument>, <argument><expr><name>errmsgbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<goto>goto <name>fatal_error</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <operator>-</operator><literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>startcapreq</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>startcapreq</name><operator>.</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>session</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>session</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>session</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errmsgbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"Can't allocate session structure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>session</name><operator>-&gt;</operator><name>sockdata</name></name> <operator>=</operator> <name>INVALID_SOCKET</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>session</name><operator>-&gt;</operator><name>have_thread</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>









<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>session</name><operator>-&gt;</operator><name>thread</name></name> <operator>=</operator> <name>INVALID_HANDLE_VALUE</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>session</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>session</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>session</name><operator>-&gt;</operator><name>fp</name></name> <operator>=</operator> <call><name>pcap_open_live</name><argument_list>(<argument><expr><name>source</name></expr></argument>,
<argument><expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>startcapreq</name><operator>.</operator><name>snaplen</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><ternary><condition><expr><operator>(</operator><name><name>startcapreq</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>RPCAP_STARTCAPREQ_FLAG_PROMISC</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument> ,
<argument><expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>startcapreq</name><operator>.</operator><name>read_timeout</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>errmsgbuf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

fp-&gt;rmt_samp.method = samp_param-&gt;method;
fp-&gt;rmt_samp.value = samp_param-&gt;value;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<expr_stmt><expr><name>serveropen_dp</name> <operator>=</operator> <operator>(</operator><name><name>startcapreq</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>RPCAP_STARTCAPREQ_FLAG_SERVEROPEN</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>startcapreq</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>RPCAP_STARTCAPREQ_FLAG_DGRAM</name><operator>)</operator> <operator>||</operator> <name><name>pars</name><operator>-&gt;</operator><name>isactive</name></name></expr>;</expr_stmt>










<expr_stmt><expr><name>saddrlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_storage</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getpeername</name><argument_list>(<argument><expr><name><name>pars</name><operator>-&gt;</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>saddr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>saddrlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sock_geterror</name><argument_list>(<argument><expr><literal type="string">"getpeername()"</literal></expr></argument>, <argument><expr><name>errmsgbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>addrinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>startcapreq</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>RPCAP_STARTCAPREQ_FLAG_DGRAM</name><operator>)</operator></expr> ?</condition><then> <expr><name>SOCK_DGRAM</name></expr> </then><else>: <expr><name>SOCK_STREAM</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name><name>saddr</name><operator>.</operator><name>ss_family</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>serveropen_dp</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>portdata</name></expr></argument>, <argument><expr><sizeof>sizeof <name>portdata</name></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>startcapreq</name><operator>.</operator><name>portdata</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>getnameinfo</name><argument_list>(<argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>saddr</name></expr></argument>, <argument><expr><name>saddrlen</name></expr></argument>, <argument><expr><name>peerhost</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>peerhost</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NI_NUMERICHOST</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sock_geterror</name><argument_list>(<argument><expr><literal type="string">"getnameinfo()"</literal></expr></argument>, <argument><expr><name>errmsgbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sock_initaddress</name><argument_list>(<argument><expr><name>peerhost</name></expr></argument>, <argument><expr><name>portdata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addrinfo</name></expr></argument>, <argument><expr><name>errmsgbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>session</name><operator>-&gt;</operator><name>sockdata</name></name> <operator>=</operator> <call><name>sock_open</name><argument_list>(<argument><expr><name>addrinfo</name></expr></argument>, <argument><expr><name>SOCKOPEN_CLIENT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>errmsgbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>INVALID_SOCKET</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>
<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_flags</name></name> <operator>=</operator> <name>AI_PASSIVE</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>sock_initaddress</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addrinfo</name></expr></argument>, <argument><expr><name>errmsgbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>session</name><operator>-&gt;</operator><name>sockdata</name></name> <operator>=</operator> <call><name>sock_open</name><argument_list>(<argument><expr><name>addrinfo</name></expr></argument>, <argument><expr><name>SOCKOPEN_SERVER</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> , <argument><expr><name>errmsgbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>INVALID_SOCKET</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>


<expr_stmt><expr><name>saddrlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_storage</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>getsockname</name><argument_list>(<argument><expr><name><name>session</name><operator>-&gt;</operator><name>sockdata</name></name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>saddr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>saddrlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sock_geterror</name><argument_list>(<argument><expr><literal type="string">"getsockname()"</literal></expr></argument>, <argument><expr><name>errmsgbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>getnameinfo</name><argument_list>(<argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>saddr</name></expr></argument>, <argument><expr><name>saddrlen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>portdata</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>portdata</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NI_NUMERICSERV</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sock_geterror</name><argument_list>(<argument><expr><literal type="string">"getnameinfo()"</literal></expr></argument>, <argument><expr><name>errmsgbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>addrinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>addrinfo</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>session</name><operator>-&gt;</operator><name>sockctrl</name></name> <operator>=</operator> <name><name>pars</name><operator>-&gt;</operator><name>sockctrl</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>session</name><operator>-&gt;</operator><name>protocol_version</name></name> <operator>=</operator> <name>ver</name></expr>;</expr_stmt>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>daemon_unpackapplyfilter</name><argument_list>(<argument><expr><name><name>pars</name><operator>-&gt;</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>plen</name></expr></argument>, <argument><expr><name>errmsgbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<goto>goto <name>fatal_error</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">2</literal></expr>)</condition>
<block>{<block_content>

<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>sock_bufferize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_header</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sendbufidx</name></expr></argument>,
<argument><expr><name>RPCAP_NETBUF_SIZE</name></expr></argument>, <argument><expr><name>SOCKBUF_CHECKONLY</name></expr></argument>, <argument><expr><name>errmsgbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rpcap_createhdr</name><argument_list>(<argument><expr><operator>(</operator>struct <name>rpcap_header</name> <operator>*</operator><operator>)</operator> <name>sendbuf</name></expr></argument>, <argument><expr><name>ver</name></expr></argument>,
<argument><expr><name>RPCAP_MSG_STARTCAP_REPLY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_startcapreply</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>startcapreply</name> <operator>=</operator> <operator>(</operator>struct <name>rpcap_startcapreply</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>sendbuf</name><index>[<expr><name>sendbufidx</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sock_bufferize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_startcapreply</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>sendbufidx</name></expr></argument>, <argument><expr><name>RPCAP_NETBUF_SIZE</name></expr></argument>, <argument><expr><name>SOCKBUF_CHECKONLY</name></expr></argument>, <argument><expr><name>errmsgbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>startcapreply</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_startcapreply</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>startcapreply</name><operator>-&gt;</operator><name>bufsize</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><call><name>pcap_bufsize</name><argument_list>(<argument><expr><name><name>session</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>serveropen_dp</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>port</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><call><name>strtoul</name><argument_list>(<argument><expr><name>portdata</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>startcapreply</name><operator>-&gt;</operator><name>portdata</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sock_send</name><argument_list>(<argument><expr><name><name>pars</name><operator>-&gt;</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><name>sendbuf</name></expr></argument>, <argument><expr><name>sendbufidx</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Send to client failed: %s"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>fatal_error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>serveropen_dp</name></expr>)</condition>
<block>{<block_content>
<decl_stmt><decl><type><name>SOCKET</name></type> <name>socktemp</name></decl>;</decl_stmt>


<expr_stmt><expr><name>saddrlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_storage</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>socktemp</name> <operator>=</operator> <call><name>accept</name><argument_list>(<argument><expr><name><name>session</name><operator>-&gt;</operator><name>sockdata</name></name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>saddr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>saddrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>socktemp</name> <operator>==</operator> <name>INVALID_SOCKET</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sock_geterror</name><argument_list>(<argument><expr><literal type="string">"accept()"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Accept of data connection failed: %s"</literal></expr></argument>,
<argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>sock_close</name><argument_list>(<argument><expr><name><name>session</name><operator>-&gt;</operator><name>sockdata</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>session</name><operator>-&gt;</operator><name>sockdata</name></name> <operator>=</operator> <name>socktemp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>session</name><operator>-&gt;</operator><name>thread</name></name> <operator>=</operator> <operator>(</operator><name>HANDLE</name><operator>)</operator><call><name>_beginthreadex</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>daemon_thrdatamain</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>session</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>session</name><operator>-&gt;</operator><name>thread</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"Error creating the data thread"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>session</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>daemon_thrdatamain</name></expr></argument>,
<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"Error creating the data thread"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>session</name><operator>-&gt;</operator><name>have_thread</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>rpcapd_discard</name><argument_list>(<argument><expr><name><name>pars</name><operator>-&gt;</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>fatal_error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>sessionp</name> <operator>=</operator> <name>session</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>error</name>:</label>




<expr_stmt><expr><operator>*</operator><name>sessionp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>addrinfo</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>addrinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>session</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>session_close</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rpcap_senderror</name><argument_list>(<argument><expr><name><name>pars</name><operator>-&gt;</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><name>ver</name></expr></argument>, <argument><expr><name>PCAP_ERR_STARTCAPTURE</name></expr></argument>,
<argument><expr><name>errmsgbuf</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Send to client failed: %s"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>rpcapd_discard</name><argument_list>(<argument><expr><name><name>pars</name><operator>-&gt;</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fatal_error</name>:</label>




<expr_stmt><expr><operator>*</operator><name>sessionp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>session</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>session_close</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>daemon_msg_endcap_req</name><parameter_list>(<parameter><decl><type><name>uint8</name></type> <name>ver</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>daemon_slpars</name></name> <modifier>*</modifier></type><name>pars</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>session</name></name> <modifier>*</modifier></type><name>session</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>errbuf</name><index>[<expr><name>PCAP_ERRBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rpcap_header</name></name></type> <name>header</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>session_close</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rpcap_createhdr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><name>ver</name></expr></argument>, <argument><expr><name>RPCAP_MSG_ENDCAP_REPLY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sock_send</name><argument_list>(<argument><expr><name><name>pars</name><operator>-&gt;</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_header</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Send to client failed: %s"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RPCAP_BPF_MAXINSNS</name></cpp:macro> <cpp:value>8192</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>daemon_unpackapplyfilter</name><parameter_list>(<parameter><decl><type><name>SOCKET</name></type> <name>sockctrl</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>session</name></name> <modifier>*</modifier></type><name>session</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>plenp</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errmsgbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rpcap_filter</name></name></type> <name>filter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rpcap_filterbpf_insn</name></name></type> <name>insn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bpf_insn</name></name> <modifier>*</modifier></type><name>bf_insn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bpf_program</name></name></type> <name>bf_prog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>rpcapd_recv</name><argument_list>(<argument><expr><name>sockctrl</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>filter</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_filter</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>plenp</name></expr></argument>, <argument><expr><name>errmsgbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <operator>-</operator><literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bf_prog</name><operator>.</operator><name>bf_len</name></name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>filter</name><operator>.</operator><name>nitems</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>filter</name><operator>.</operator><name>filtertype</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>RPCAP_UPDATEFILTER_BPF</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errmsgbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"Only BPF/NPF filters are currently supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bf_prog</name><operator>.</operator><name>bf_len</name></name> <operator>&gt;</operator> <name>RPCAP_BPF_MAXINSNS</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errmsgbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"Filter program is larger than the maximum size of %u instructions"</literal></expr></argument>,
<argument><expr><name>RPCAP_BPF_MAXINSNS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>bf_insn</name> <operator>=</operator> <operator>(</operator>struct <name>bpf_insn</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>bpf_insn</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>bf_prog</name><operator>.</operator><name>bf_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>bf_insn</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name>errmsgbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"malloc() failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bf_prog</name><operator>.</operator><name>bf_insns</name></name> <operator>=</operator> <name>bf_insn</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>bf_prog</name><operator>.</operator><name>bf_len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>rpcapd_recv</name><argument_list>(<argument><expr><name>sockctrl</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>insn</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_filterbpf_insn</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>plenp</name></expr></argument>, <argument><expr><name>errmsgbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <operator>-</operator><literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bf_insn</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>insn</name><operator>.</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bf_insn</name><operator>-&gt;</operator><name>jf</name></name> <operator>=</operator> <name><name>insn</name><operator>.</operator><name>jf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bf_insn</name><operator>-&gt;</operator><name>jt</name></name> <operator>=</operator> <name><name>insn</name><operator>.</operator><name>jt</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bf_insn</name><operator>-&gt;</operator><name>k</name></name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>insn</name><operator>.</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bf_insn</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>bpf_validate</name><argument_list>(<argument><expr><name><name>bf_prog</name><operator>.</operator><name>bf_insns</name></name></expr></argument>, <argument><expr><name><name>bf_prog</name><operator>.</operator><name>bf_len</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errmsgbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"The filter contains bogus instructions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pcap_setfilter</name><argument_list>(<argument><expr><name><name>session</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bf_prog</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errmsgbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"RPCAP error: %s"</literal></expr></argument>, <argument><expr><call><name>pcap_geterr</name><argument_list>(<argument><expr><name><name>session</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>daemon_msg_updatefilter_req</name><parameter_list>(<parameter><decl><type><name>uint8</name></type> <name>ver</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>daemon_slpars</name></name> <modifier>*</modifier></type><name>pars</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>session</name></name> <modifier>*</modifier></type><name>session</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>plen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>errbuf</name><index>[<expr><name>PCAP_ERRBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>errmsgbuf</name><index>[<expr><name>PCAP_ERRBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rpcap_header</name></name></type> <name>header</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>daemon_unpackapplyfilter</name><argument_list>(<argument><expr><name><name>pars</name><operator>-&gt;</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>plen</name></expr></argument>, <argument><expr><name>errmsgbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">2</literal></expr>)</condition>
<block>{<block_content>

<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>rpcapd_discard</name><argument_list>(<argument><expr><name><name>pars</name><operator>-&gt;</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>rpcap_createhdr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><name>ver</name></expr></argument>, <argument><expr><name>RPCAP_MSG_UPDATEFILTER_REPLY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sock_send</name><argument_list>(<argument><expr><name><name>pars</name><operator>-&gt;</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>rpcap_header</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><call><name>pcap_geterr</name><argument_list>(<argument><expr><name><name>session</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Send to client failed: %s"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>error</name>:</label>
<if_stmt><if>if <condition>(<expr><call><name>rpcapd_discard</name><argument_list>(<argument><expr><name><name>pars</name><operator>-&gt;</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>rpcap_senderror</name><argument_list>(<argument><expr><name><name>pars</name><operator>-&gt;</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><name>ver</name></expr></argument>, <argument><expr><name>PCAP_ERR_UPDATEFILTER</name></expr></argument>,
<argument><expr><name>errmsgbuf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>daemon_msg_setsampling_req</name><parameter_list>(<parameter><decl><type><name>uint8</name></type> <name>ver</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>daemon_slpars</name></name> <modifier>*</modifier></type><name>pars</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>plen</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>rpcap_sampling</name></name> <modifier>*</modifier></type><name>samp_param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>errbuf</name><index>[<expr><name>PCAP_ERRBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>errmsgbuf</name><index>[<expr><name>PCAP_ERRBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rpcap_header</name></name></type> <name>header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rpcap_sampling</name></name></type> <name>rpcap_samp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>rpcapd_recv</name><argument_list>(<argument><expr><name><name>pars</name><operator>-&gt;</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>rpcap_samp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_sampling</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>plen</name></expr></argument>, <argument><expr><name>errmsgbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <operator>-</operator><literal type="number">2</literal></expr>)</condition>
<block>{<block_content>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>samp_param</name><operator>-&gt;</operator><name>method</name></name> <operator>=</operator> <name><name>rpcap_samp</name><operator>.</operator><name>method</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>samp_param</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>rpcap_samp</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rpcap_createhdr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><name>ver</name></expr></argument>, <argument><expr><name>RPCAP_MSG_SETSAMPLING_REPLY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sock_send</name><argument_list>(<argument><expr><name><name>pars</name><operator>-&gt;</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>rpcap_header</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Send to client failed: %s"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rpcapd_discard</name><argument_list>(<argument><expr><name><name>pars</name><operator>-&gt;</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>error</name>:</label>
<if_stmt><if>if <condition>(<expr><call><name>rpcap_senderror</name><argument_list>(<argument><expr><name><name>pars</name><operator>-&gt;</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><name>ver</name></expr></argument>, <argument><expr><name>PCAP_ERR_SETSAMPLING</name></expr></argument>,
<argument><expr><name>errmsgbuf</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Send to client failed: %s"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>rpcapd_discard</name><argument_list>(<argument><expr><name><name>pars</name><operator>-&gt;</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>daemon_msg_stats_req</name><parameter_list>(<parameter><decl><type><name>uint8</name></type> <name>ver</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>daemon_slpars</name></name> <modifier>*</modifier></type><name>pars</name></decl></parameter>,
<parameter><decl><type><name><name>struct</name> <name>session</name></name> <modifier>*</modifier></type><name>session</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>plen</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>pcap_stat</name></name> <modifier>*</modifier></type><name>stats</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>svrcapt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>errbuf</name><index>[<expr><name>PCAP_ERRBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>errmsgbuf</name><index>[<expr><name>PCAP_ERRBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>sendbuf</name><index>[<expr><name>RPCAP_NETBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sendbufidx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rpcap_stats</name></name> <modifier>*</modifier></type><name>netstats</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name>rpcapd_discard</name><argument_list>(<argument><expr><name><name>pars</name><operator>-&gt;</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sock_bufferize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_header</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>sendbufidx</name></expr></argument>, <argument><expr><name>RPCAP_NETBUF_SIZE</name></expr></argument>, <argument><expr><name>SOCKBUF_CHECKONLY</name></expr></argument>, <argument><expr><name>errmsgbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rpcap_createhdr</name><argument_list>(<argument><expr><operator>(</operator>struct <name>rpcap_header</name> <operator>*</operator><operator>)</operator> <name>sendbuf</name></expr></argument>, <argument><expr><name>ver</name></expr></argument>,
<argument><expr><name>RPCAP_MSG_STATS_REPLY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint16</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_stats</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>netstats</name> <operator>=</operator> <operator>(</operator>struct <name>rpcap_stats</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>sendbuf</name><index>[<expr><name>sendbufidx</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sock_bufferize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_stats</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>sendbufidx</name></expr></argument>, <argument><expr><name>RPCAP_NETBUF_SIZE</name></expr></argument>, <argument><expr><name>SOCKBUF_CHECKONLY</name></expr></argument>, <argument><expr><name>errmsgbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>session</name> <operator>&amp;&amp;</operator> <name><name>session</name><operator>-&gt;</operator><name>fp</name></name></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>pcap_stats</name><argument_list>(<argument><expr><name><name>session</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><name>stats</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errmsgbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>pcap_geterr</name><argument_list>(<argument><expr><name><name>session</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>netstats</name><operator>-&gt;</operator><name>ifdrop</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>stats</name><operator>-&gt;</operator><name>ps_ifdrop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>netstats</name><operator>-&gt;</operator><name>ifrecv</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>stats</name><operator>-&gt;</operator><name>ps_recv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>netstats</name><operator>-&gt;</operator><name>krnldrop</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>stats</name><operator>-&gt;</operator><name>ps_drop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>netstats</name><operator>-&gt;</operator><name>svrcapt</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>session</name><operator>-&gt;</operator><name>TotCapt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else
<block>{<block_content>



<expr_stmt><expr><name><name>netstats</name><operator>-&gt;</operator><name>ifdrop</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>stats</name><operator>-&gt;</operator><name>ps_ifdrop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>netstats</name><operator>-&gt;</operator><name>ifrecv</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>stats</name><operator>-&gt;</operator><name>ps_recv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>netstats</name><operator>-&gt;</operator><name>krnldrop</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>stats</name><operator>-&gt;</operator><name>ps_drop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>netstats</name><operator>-&gt;</operator><name>svrcapt</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>svrcapt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><call><name>sock_send</name><argument_list>(<argument><expr><name><name>pars</name><operator>-&gt;</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><name>sendbuf</name></expr></argument>, <argument><expr><name>sendbufidx</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Send to client failed: %s"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>rpcap_senderror</name><argument_list>(<argument><expr><name><name>pars</name><operator>-&gt;</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><name>ver</name></expr></argument>, <argument><expr><name>PCAP_ERR_GETSTATS</name></expr></argument>,
<argument><expr><name>errmsgbuf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>unsigned</name> <name>__stdcall</name>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<name>daemon_thrdatamain</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>errbuf</name><index>[<expr><name>PCAP_ERRBUF_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>session</name></name> <modifier>*</modifier></type><name>session</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rpcap_pkthdr</name></name> <modifier>*</modifier></type><name>net_pkt_header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>pcap_pkthdr</name></name> <modifier>*</modifier></type><name>pkt_header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_char</name> <modifier>*</modifier></type><name>pkt_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>sendbufsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sendbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sendbufidx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>sigset_t</name></type> <name>sigusr1</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>session</name> <operator>=</operator> <operator>(</operator>struct <name>session</name> <operator>*</operator><operator>)</operator> <name>ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>session</name><operator>-&gt;</operator><name>TotCapt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>errbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><call><name>pcap_snapshot</name><argument_list>(<argument><expr><name><name>session</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>




<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Unable to allocate the buffer for this child thread: snapshot length of %d is negative"</literal></expr></argument>,
<argument><expr><call><name>pcap_snapshot</name><argument_list>(<argument><expr><name><name>session</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sendbuf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>










<expr_stmt><expr><name>sendbufsize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_header</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_pkthdr</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <call><name>pcap_snapshot</name><argument_list>(<argument><expr><name><name>session</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sendbuf</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>sendbufsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>sendbuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Unable to allocate the buffer for this child thread"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>







<expr_stmt><expr><call><name>sigemptyset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sigusr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sigaddset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sigusr1</name></expr></argument>, <argument><expr><name>SIGUSR1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pthread_sigmask</name><argument_list>(<argument><expr><name>SIG_BLOCK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sigusr1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>



<expr_stmt><expr><call><name>pthread_sigmask</name><argument_list>(<argument><expr><name>SIG_UNBLOCK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sigusr1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>pcap_next_ex</name><argument_list>(<argument><expr><name><name>session</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt_header</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>u_char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>pkt_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>



<expr_stmt><expr><call><name>pthread_sigmask</name><argument_list>(<argument><expr><name>SIG_BLOCK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sigusr1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sendbufidx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>sock_bufferize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_header</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>sendbufidx</name></expr></argument>, <argument><expr><name>sendbufsize</name></expr></argument>, <argument><expr><name>SOCKBUF_CHECKONLY</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"sock_bufferize() error sending packet message: %s"</literal></expr></argument>,
<argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rpcap_createhdr</name><argument_list>(<argument><expr><operator>(</operator>struct <name>rpcap_header</name> <operator>*</operator><operator>)</operator> <name>sendbuf</name></expr></argument>,
<argument><expr><name><name>session</name><operator>-&gt;</operator><name>protocol_version</name></name></expr></argument>, <argument><expr><name>RPCAP_MSG_PACKET</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><operator>(</operator><name>uint16</name><operator>)</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_pkthdr</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>pkt_header</name><operator>-&gt;</operator><name>caplen</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>net_pkt_header</name> <operator>=</operator> <operator>(</operator>struct <name>rpcap_pkthdr</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>sendbuf</name><index>[<expr><name>sendbufidx</name></expr>]</index></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>sock_bufferize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_pkthdr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><operator>&amp;</operator><name>sendbufidx</name></expr></argument>, <argument><expr><name>sendbufsize</name></expr></argument>, <argument><expr><name>SOCKBUF_CHECKONLY</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"sock_bufferize() error sending packet message: %s"</literal></expr></argument>,
<argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>net_pkt_header</name><operator>-&gt;</operator><name>caplen</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>pkt_header</name><operator>-&gt;</operator><name>caplen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>net_pkt_header</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>pkt_header</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>net_pkt_header</name><operator>-&gt;</operator><name>npkt</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><operator>++</operator><operator>(</operator><name><name>session</name><operator>-&gt;</operator><name>TotCapt</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>net_pkt_header</name><operator>-&gt;</operator><name>timestamp_sec</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>pkt_header</name><operator>-&gt;</operator><name>ts</name><operator>.</operator><name>tv_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>net_pkt_header</name><operator>-&gt;</operator><name>timestamp_usec</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>pkt_header</name><operator>-&gt;</operator><name>ts</name><operator>.</operator><name>tv_usec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>sock_bufferize</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>pkt_data</name></expr></argument>, <argument><expr><name><name>pkt_header</name><operator>-&gt;</operator><name>caplen</name></name></expr></argument>,
<argument><expr><name>sendbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sendbufidx</name></expr></argument>, <argument><expr><name>sendbufsize</name></expr></argument>, <argument><expr><name>SOCKBUF_BUFFERIZE</name></expr></argument>,
<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"sock_bufferize() error sending packet message: %s"</literal></expr></argument>,
<argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>sock_send</name><argument_list>(<argument><expr><name><name>session</name><operator>-&gt;</operator><name>sockdata</name></name></expr></argument>, <argument><expr><name>sendbuf</name></expr></argument>, <argument><expr><name>sendbufidx</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>





<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>,
<argument><expr><literal type="string">"Send of packet to client failed: %s"</literal></expr></argument>,
<argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>retval</name> <operator>!=</operator> <name>PCAP_ERROR_BREAK</name></expr>)</condition>
<block>{<block_content>







<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"Error reading the packets: %s"</literal></expr></argument>, <argument><expr><call><name>pcap_geterr</name><argument_list>(<argument><expr><name><name>session</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rpcap_senderror</name><argument_list>(<argument><expr><name><name>session</name><operator>-&gt;</operator><name>sockctrl</name></name></expr></argument>, <argument><expr><name><name>session</name><operator>-&gt;</operator><name>protocol_version</name></name></expr></argument>,
<argument><expr><name>PCAP_ERR_READEX</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<label><name>error</name>:</label>



<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sendbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>





<function><type><specifier>static</specifier> <name>void</name></type> <name>noop_handler</name><parameter_list>(<parameter><decl><type><name>int</name> <name>sign</name></type> <name>_U_</name></decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
















<function><type><specifier>static</specifier> <name>void</name></type>
<name>daemon_seraddr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name> <modifier>*</modifier></type><name>sockaddrin</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rpcap_sockaddr</name></name> <modifier>*</modifier></type><name>sockaddrout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>sockaddrout</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_storage</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>sockaddrin</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>


<switch>switch <condition>(<expr><name><name>sockaddrin</name><operator>-&gt;</operator><name>ss_family</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>AF_INET</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>sockaddrin_ipv4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rpcap_sockaddr_in</name></name> <modifier>*</modifier></type><name>sockaddrout_ipv4</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sockaddrin_ipv4</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator> <name>sockaddrin</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sockaddrout_ipv4</name> <operator>=</operator> <operator>(</operator>struct <name>rpcap_sockaddr_in</name> <operator>*</operator><operator>)</operator> <name>sockaddrout</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sockaddrout_ipv4</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>RPCAP_AF_INET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sockaddrout_ipv4</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>sockaddrin_ipv4</name><operator>-&gt;</operator><name>sin_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sockaddrout_ipv4</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sockaddrin_ipv4</name><operator>-&gt;</operator><name>sin_addr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sockaddrout_ipv4</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>sockaddrout_ipv4</name><operator>-&gt;</operator><name>zero</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sockaddrout_ipv4</name><operator>-&gt;</operator><name>zero</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>AF_INET6</name></expr>:</case>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name> <modifier>*</modifier></type><name>sockaddrin_ipv6</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>rpcap_sockaddr_in6</name></name> <modifier>*</modifier></type><name>sockaddrout_ipv6</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sockaddrin_ipv6</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator> <name>sockaddrin</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sockaddrout_ipv6</name> <operator>=</operator> <operator>(</operator>struct <name>rpcap_sockaddr_in6</name> <operator>*</operator><operator>)</operator> <name>sockaddrout</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sockaddrout_ipv6</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>RPCAP_AF_INET6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sockaddrout_ipv6</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>sockaddrin_ipv6</name><operator>-&gt;</operator><name>sin6_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sockaddrout_ipv6</name><operator>-&gt;</operator><name>flowinfo</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>sockaddrin_ipv6</name><operator>-&gt;</operator><name>sin6_flowinfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sockaddrout_ipv6</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sockaddrin_ipv6</name><operator>-&gt;</operator><name>sin6_addr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sockaddrout_ipv6</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sockaddrout_ipv6</name><operator>-&gt;</operator><name>scope_id</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>sockaddrin_ipv6</name><operator>-&gt;</operator><name>sin6_scope_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></switch>
</block_content>}</block></function>





<function><type><name>void</name></type> <name>sleep_secs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>secs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr><name>secs</name><operator>*</operator><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>unsigned</name></type> <name>secs_remaining</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>secs</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>secs_remaining</name> <operator>=</operator> <name>secs</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>secs_remaining</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>secs_remaining</name> <operator>=</operator> <call><name>sleep</name><argument_list>(<argument><expr><name>secs_remaining</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>rpcapd_recv_msg_header</name><parameter_list>(<parameter><decl><type><name>SOCKET</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rpcap_header</name></name> <modifier>*</modifier></type><name>headerp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>errbuf</name><index>[<expr><name>PCAP_ERRBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>nread</name> <operator>=</operator> <call><name>sock_recv</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>headerp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>rpcap_header</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>SOCK_RECEIVEALL_YES</name><operator>|</operator><name>SOCK_EOF_ISNT_ERROR</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nread</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Read from client failed: %s"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>nread</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>headerp</name><operator>-&gt;</operator><name>plen</name></name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>headerp</name><operator>-&gt;</operator><name>plen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>int</name></type>
<name>rpcapd_recv</name><parameter_list>(<parameter><decl><type><name>SOCKET</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>toread</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>plen</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errmsgbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>nread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>errbuf</name><index>[<expr><name>PCAP_ERRBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>toread</name> <operator>&gt;</operator> <operator>*</operator><name>plen</name></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errmsgbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><literal type="string">"Message payload is too short"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>nread</name> <operator>=</operator> <call><name>sock_recv</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>toread</name></expr></argument>,
<argument><expr><name>SOCK_RECEIVEALL_YES</name><operator>|</operator><name>SOCK_EOF_IS_ERROR</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>nread</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Read from client failed: %s"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>plen</name> <operator>-=</operator> <name>nread</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type>
<name>rpcapd_discard</name><parameter_list>(<parameter><decl><type><name>SOCKET</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>errbuf</name><index>[<expr><name>PCAP_ERRBUF_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>sock_discard</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
<block>{<block_content>

<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Read from client failed: %s"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>void</name></type> <name>session_close</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>session</name></name> <modifier>*</modifier></type><name>session</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>session</name><operator>-&gt;</operator><name>have_thread</name></name></expr>)</condition>
<block>{<block_content>







<expr_stmt><expr><call><name>pcap_breakloop</name><argument_list>(<argument><expr><name><name>session</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>











<expr_stmt><expr><call><name>SetEvent</name><argument_list>(<argument><expr><call><name>pcap_getevent</name><argument_list>(<argument><expr><name><name>session</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<expr_stmt><expr><call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name><name>session</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>session</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>session</name><operator>-&gt;</operator><name>have_thread</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>session</name><operator>-&gt;</operator><name>thread</name></name> <operator>=</operator> <name>INVALID_HANDLE_VALUE</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>







<expr_stmt><expr><call><name>pthread_kill</name><argument_list>(<argument><expr><name><name>session</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>SIGUSR1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







<expr_stmt><expr><call><name>pthread_join</name><argument_list>(<argument><expr><name><name>session</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>session</name><operator>-&gt;</operator><name>have_thread</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>session</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>session</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>session</name><operator>-&gt;</operator><name>sockdata</name></name> <operator>!=</operator> <name>INVALID_SOCKET</name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>sock_close</name><argument_list>(<argument><expr><name><name>session</name><operator>-&gt;</operator><name>sockdata</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>session</name><operator>-&gt;</operator><name>sockdata</name></name> <operator>=</operator> <name>INVALID_SOCKET</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>session</name><operator>-&gt;</operator><name>fp</name></name></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><call><name>pcap_close</name><argument_list>(<argument><expr><name><name>session</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>session</name><operator>-&gt;</operator><name>fp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type>
<name>is_url</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>colonp</name></decl>;</decl_stmt>





















<expr_stmt><expr><name>colonp</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>colonp</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
<block>{<block_content>



<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>











<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>colonp</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"//"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>



<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>




<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
