<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libpcap/rpcapd/win32-svc.c">
































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rpcapd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pcap.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmtutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"portability.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fileconf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>SERVICE_STATUS_HANDLE</name></type> <name>service_status_handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>SERVICE_STATUS</name></type> <name>service_status</name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name> <name>WINAPI</name></type> <name>svc_main</name><parameter_list>(<parameter><decl><type><name>DWORD</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>update_svc_status</name><parameter_list>(<parameter><decl><type><name>DWORD</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>progress_indicator</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int</name></type> <name>svc_start</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SERVICE_TABLE_ENTRY</name></type> <name><name>ste</name><index>[]</index></name> <init>=
<expr><block>{
<expr><block>{ <expr><name>PROGRAM_NAME</name></expr>, <expr><name>svc_main</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>string</name><index>[<expr><name>PCAP_ERRBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>StartServiceCtrlDispatcher</name><argument_list>(<argument><expr><name>ste</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_win32_err</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"StartServiceCtrlDispatcher() failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rpcapd_log</name><argument_list>(<argument><expr><name>LOGPRIO_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <name>WINAPI</name></type> <name>svc_control_handler</name><parameter_list>(<parameter><decl><type><name>DWORD</name></type> <name>Opcode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch<condition>(<expr><name>Opcode</name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>SERVICE_CONTROL_STOP</name></expr>:</case>














<expr_stmt><expr><call><name>send_shutdown_notification</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_svc_status</name><argument_list>(<argument><expr><name>SERVICE_STOP_PENDING</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>











<case>case <expr><name>SERVICE_CONTROL_PAUSE</name></expr>:</case>
<expr_stmt><expr><call><name>update_svc_status</name><argument_list>(<argument><expr><name>SERVICE_PAUSED</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SERVICE_CONTROL_CONTINUE</name></expr>:</case>
<expr_stmt><expr><call><name>update_svc_status</name><argument_list>(<argument><expr><name>SERVICE_RUNNING</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><call><name>send_reread_configuration_notification</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SERVICE_CONTROL_INTERROGATE</name></expr>:</case>


<expr_stmt><expr><call><name>update_svc_status</name><argument_list>(<argument><expr><name>SERVICE_RUNNING</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MessageBox</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"Not implemented"</literal></expr></argument>, <argument><expr><literal type="string">"warning"</literal></expr></argument>, <argument><expr><name>MB_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>SERVICE_CONTROL_PARAMCHANGE</name></expr>:</case>



<expr_stmt><expr><call><name>send_reread_configuration_notification</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>


<return>return;</return>
</block_content>}</block></function>

<function><type><name>void</name> <name>WINAPI</name></type> <name>svc_main</name><parameter_list>(<parameter><decl><type><name>DWORD</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>service_status_handle</name> <operator>=</operator> <call><name>RegisterServiceCtrlHandler</name><argument_list>(<argument><expr><name>PROGRAM_NAME</name></expr></argument>, <argument><expr><name>svc_control_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>service_status_handle</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>service_status</name><operator>.</operator><name>dwServiceType</name></name> <operator>=</operator> <name>SERVICE_WIN32_OWN_PROCESS</name> <operator>|</operator> <name>SERVICE_INTERACTIVE_PROCESS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>service_status</name><operator>.</operator><name>dwControlsAccepted</name></name> <operator>=</operator> <name>SERVICE_ACCEPT_STOP</name> <operator>|</operator> <name>SERVICE_ACCEPT_PAUSE_CONTINUE</name> <operator>|</operator> <name>SERVICE_ACCEPT_PARAMCHANGE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_svc_status</name><argument_list>(<argument><expr><name>SERVICE_RUNNING</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>main_startup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>




<expr_stmt><expr><call><name>update_svc_status</name><argument_list>(<argument><expr><name>SERVICE_STOPPED</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>update_svc_status</name><parameter_list>(<parameter><decl><type><name>DWORD</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>progress_indicator</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>service_status</name><operator>.</operator><name>dwWin32ExitCode</name></name> <operator>=</operator> <name>NO_ERROR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>service_status</name><operator>.</operator><name>dwCurrentState</name></name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>service_status</name><operator>.</operator><name>dwCheckPoint</name></name> <operator>=</operator> <name>progress_indicator</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>service_status</name><operator>.</operator><name>dwWaitHint</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetServiceStatus</name><argument_list>(<argument><expr><name>service_status_handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>service_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





</unit>
