<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libpcap/optimize.c">






















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pcap-types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pcap-int.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gencode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimize.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_OS_PROTO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os-proto.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>






<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>pcap_optimizer_debug</name></decl>;</decl_stmt>










<function_decl><type><name>PCAP_API</name> <name>void</name></type> <name>pcap_set_optimizer_debug</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>PCAP_API_DEF</name> <name>void</name></type>
<name>pcap_set_optimizer_debug</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>pcap_optimizer_debug</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
</block_content>}</block></function>







<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>pcap_print_dot_graph</name></decl>;</decl_stmt>










<function_decl><type><name>PCAP_API</name> <name>void</name></type> <name>pcap_set_print_dot_graph</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>PCAP_API_DEF</name> <name>void</name></type>
<name>pcap_set_print_dot_graph</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>pcap_print_dot_graph</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>PCAP_IS_AT_LEAST_GNUC_VERSION</name><argument_list>(<argument><expr><literal type="number">3</literal><operator>,</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></cpp:if>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lowest_set_bit</name><parameter_list>(<parameter><type><name>mask</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_ctz(mask)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:elif>




<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;intrin.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__clang__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>intrinsic</name><name>(</name><name>_BitScanForward</name><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>__forceinline</name> <name>int</name></type>
<name>lowest_set_bit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>bit</name></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><call><name>_BitScanForward</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bit</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>mask</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>bit</name></expr>;</return>
</block_content>}</block></function>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MSDOS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__DJGPP__</name></expr></argument>)</argument_list></call></expr></cpp:elif>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lowest_set_bit</name><parameter_list>(<parameter><type><name>mask</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ffs((mask)) - 1)</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>MSDOS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__WATCOMC__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>STRINGS_H_DECLARES_FFS</name></expr></argument>)</argument_list></call></expr></cpp:elif>





<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lowest_set_bit</name><parameter_list>(<parameter><type><name>mask</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ffs((mask)) - 1)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>




<function><type><specifier>static</specifier> <name>int</name></type>
<name>lowest_set_bit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>v</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>mask</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>MultiplyDeBruijnBitPosition</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>,
<expr><literal type="number">31</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>
}</block></expr></init></decl>;</decl_stmt>












<return>return <expr><operator>(</operator><name><name>MultiplyDeBruijnBitPosition</name><index>[<expr><operator>(</operator><operator>(</operator><name>v</name> <operator>&amp;</operator> <operator>-</operator><name>v</name><operator>)</operator> <operator>*</operator> <literal type="number">0x077CB531U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">27</literal></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOP</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_ATOM</name></cpp:macro> <cpp:value>BPF_MEMWORDS</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X_ATOM</name></cpp:macro> <cpp:value>(BPF_MEMWORDS+1)</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AX_ATOM</name></cpp:macro> <cpp:value>N_ATOMS</cpp:value></cpp:define>







<struct>struct <name>valnode</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>v0</name></decl>, <decl><type ref="prev"/><name>v1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>valnode</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block>;</struct>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>K</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>F(opt_state, BPF_LD|BPF_IMM|BPF_W, i, 0L)</cpp:value></cpp:define>

<struct>struct <name>vmapinfo</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>is_const</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bpf_int32</name></type> <name>const_val</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><struct>struct <block>{



<decl_stmt><decl><type><name>jmp_buf</name></type> <name>top_ctx</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl>;</decl_stmt>






<decl_stmt><decl><type><name>int</name></type> <name>done</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n_blocks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>blocks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n_edges</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>edge</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>edges</name></decl>;</decl_stmt>





<decl_stmt><decl><type><name>int</name></type> <name>nodewords</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>edgewords</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>levels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bpf_u_int32</name> <modifier>*</modifier></type><name>space</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITS_PER_WORD</name></cpp:macro> <cpp:value>(8*sizeof(bpf_u_int32))</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_MEMBER</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((p)[(unsigned)(a) / BITS_PER_WORD] &amp; ((bpf_u_int32)1 &lt;&lt; ((unsigned)(a) % BITS_PER_WORD)))</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_INSERT</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)[(unsigned)(a) / BITS_PER_WORD] |= ((bpf_u_int32)1 &lt;&lt; ((unsigned)(a) % BITS_PER_WORD))</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_DELETE</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(p)[(unsigned)(a) / BITS_PER_WORD] &amp;= ~((bpf_u_int32)1 &lt;&lt; ((unsigned)(a) % BITS_PER_WORD))</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_INTERSECT</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>{register bpf_u_int32 *_x = a, *_y = b;register int _n = n;while (--_n &gt;= 0) *_x++ &amp;= *_y++;}</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_SUBTRACT</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>{register bpf_u_int32 *_x = a, *_y = b;register int _n = n;while (--_n &gt;= 0) *_x++ &amp;=~ *_y++;}</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_UNION</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>{register bpf_u_int32 *_x = a, *_y = b;register int _n = n;while (--_n &gt;= 0) *_x++ |= *_y++;}</cpp:value></cpp:define>






<decl_stmt><decl><type><name>uset</name></type> <name>all_dom_sets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uset</name></type> <name>all_closure_sets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uset</name></type> <name>all_edge_sets</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODULUS</name></cpp:macro> <cpp:value>213</cpp:value></cpp:define>
<decl_stmt><decl><type><name><name>struct</name> <name>valnode</name></name> <modifier>*</modifier></type><name><name>hashtbl</name><index>[<expr><name>MODULUS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>curval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>maxval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vmapinfo</name></name> <modifier>*</modifier></type><name>vmap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>valnode</name></name> <modifier>*</modifier></type><name>vnode_base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>valnode</name></name> <modifier>*</modifier></type><name>next_vnode</name></decl>;</decl_stmt>
}</block></struct></type> <name>opt_state_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{



<decl_stmt><decl><type><name>jmp_buf</name></type> <name>top_ctx</name></decl>;</decl_stmt>




<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl>;</decl_stmt>







<decl_stmt><decl><type><name><name>struct</name> <name>bpf_insn</name></name> <modifier>*</modifier></type><name>fstart</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bpf_insn</name></name> <modifier>*</modifier></type><name>ftail</name></decl>;</decl_stmt>
}</block></struct></type> <name>conv_state_t</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>opt_init</name><parameter_list>(<parameter><decl><type><name>opt_state_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>icode</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>opt_cleanup</name><parameter_list>(<parameter><decl><type><name>opt_state_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name> <name>PCAP_NORETURN</name></type> <name>opt_error</name><parameter_list>(<parameter><decl><type><name>opt_state_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
PCAP_PRINTFLIKE<parameter_list>(</parameter_list>2<operator>,</operator> 3</function_decl>)<empty_stmt>;</empty_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>intern_blocks</name><parameter_list>(<parameter><decl><type><name>opt_state_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>icode</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>find_inedges</name><parameter_list>(<parameter><decl><type><name>opt_state_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>opt_dump</name><parameter_list>(<parameter><decl><type><name>opt_state_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>icode</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a)&gt;(b)?(a):(b))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>find_levels_r</name><parameter_list>(<parameter><decl><type><name>opt_state_t</name> <modifier>*</modifier></type><name>opt_state</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>icode</name></name> <modifier>*</modifier></type><name>ic</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isMarked</name><argument_list>(<argument><expr><name>ic</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>Mark</name><argument_list>(<argument><expr><name>ic</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>link</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>JT</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>find_levels_r</name><argument_list>(<argument><expr><name>opt_state</name></expr></argument>, <argument><expr><name>ic</name></expr></argument>, <argument><expr><call><name>JT</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>find_levels_r</name><argument_list>(<argument><expr><name>opt_state</name></expr></argument>, <argument><expr><name>ic</name></expr></argument>, <argument><expr><call><name>JF</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>level</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><call><name>JT</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>level</name></expr></argument>, <argument><expr><call><name>JF</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>level</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>level</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <name>level</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>link</name></name> <operator>=</operator> <name><name>opt_state</name><operator>-&gt;</operator><name>levels</name><index>[<expr><name>level</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt_state</name><operator>-&gt;</operator><name>levels</name><index>[<expr><name>level</name></expr>]</index></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type>
<name>find_levels</name><parameter_list>(<parameter><decl><type><name>opt_state_t</name> <modifier>*</modifier></type><name>opt_state</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>icode</name></name> <modifier>*</modifier></type><name>ic</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>opt_state</name><operator>-&gt;</operator><name>levels</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>opt_state</name><operator>-&gt;</operator><name>n_blocks</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>opt_state</name><operator>-&gt;</operator><name>levels</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unMarkAll</name><argument_list>(<argument><expr><name>ic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>find_levels_r</name><argument_list>(<argument><expr><name>opt_state</name></expr></argument>, <argument><expr><name>ic</name></expr></argument>, <argument><expr><name><name>ic</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>find_dom</name><parameter_list>(<parameter><decl><type><name>opt_state_t</name> <modifier>*</modifier></type><name>opt_state</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>root</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bpf_u_int32</name> <modifier>*</modifier></type><name>x</name></decl>;</decl_stmt>




<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>opt_state</name><operator>-&gt;</operator><name>all_dom_sets</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>opt_state</name><operator>-&gt;</operator><name>n_blocks</name></name> <operator>*</operator> <name><name>opt_state</name><operator>-&gt;</operator><name>nodewords</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>x</name><operator>++</operator> <operator>=</operator> <literal type="number">0xFFFFFFFFU</literal></expr>;</expr_stmt></block_content></block></while>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>opt_state</name><operator>-&gt;</operator><name>nodewords</name></name></expr>;</init> <condition><expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition><incr/>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>dom</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>root</name><operator>-&gt;</operator><name>level</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>b</name> <operator>=</operator> <name><name>opt_state</name><operator>-&gt;</operator><name>levels</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><name>b</name></expr>;</condition> <incr><expr><name>b</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>link</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>SET_INSERT</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>dom</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>JT</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>SET_INTERSECT</name><argument_list>(<argument><expr><call><name>JT</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>dom</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>dom</name></name></expr></argument>, <argument><expr><name><name>opt_state</name><operator>-&gt;</operator><name>nodewords</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_INTERSECT</name><argument_list>(<argument><expr><call><name>JF</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>dom</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>dom</name></name></expr></argument>, <argument><expr><name><name>opt_state</name><operator>-&gt;</operator><name>nodewords</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>propedom</name><parameter_list>(<parameter><decl><type><name>opt_state_t</name> <modifier>*</modifier></type><name>opt_state</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>edge</name></name> <modifier>*</modifier></type><name>ep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>SET_INSERT</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>edom</name></name></expr></argument>, <argument><expr><name><name>ep</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ep</name><operator>-&gt;</operator><name>succ</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>SET_INTERSECT</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>succ</name><operator>-&gt;</operator><name>et</name><operator>.</operator><name>edom</name></name></expr></argument>, <argument><expr><name><name>ep</name><operator>-&gt;</operator><name>edom</name></name></expr></argument>, <argument><expr><name><name>opt_state</name><operator>-&gt;</operator><name>edgewords</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_INTERSECT</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>succ</name><operator>-&gt;</operator><name>ef</name><operator>.</operator><name>edom</name></name></expr></argument>, <argument><expr><name><name>ep</name><operator>-&gt;</operator><name>edom</name></name></expr></argument>, <argument><expr><name><name>opt_state</name><operator>-&gt;</operator><name>edgewords</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>find_edom</name><parameter_list>(<parameter><decl><type><name>opt_state_t</name> <modifier>*</modifier></type><name>opt_state</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>root</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uset</name></type> <name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>opt_state</name><operator>-&gt;</operator><name>all_edge_sets</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>opt_state</name><operator>-&gt;</operator><name>n_edges</name></name> <operator>*</operator> <name><name>opt_state</name><operator>-&gt;</operator><name>edgewords</name></name></expr>;</init> <condition><expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr/>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0xFFFFFFFFU</literal></expr>;</expr_stmt></block_content></block></for>


<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>root</name><operator>-&gt;</operator><name>et</name><operator>.</operator><name>edom</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>opt_state</name><operator>-&gt;</operator><name>edgewords</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uset</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>root</name><operator>-&gt;</operator><name>ef</name><operator>.</operator><name>edom</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>opt_state</name><operator>-&gt;</operator><name>edgewords</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uset</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>root</name><operator>-&gt;</operator><name>level</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>b</name> <operator>=</operator> <name><name>opt_state</name><operator>-&gt;</operator><name>levels</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><name>b</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>b</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>link</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>propedom</name><argument_list>(<argument><expr><name>opt_state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>et</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>propedom</name><argument_list>(<argument><expr><name>opt_state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>ef</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>void</name></type>
<name>find_closure</name><parameter_list>(<parameter><decl><type><name>opt_state_t</name> <modifier>*</modifier></type><name>opt_state</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>root</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>




<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>opt_state</name><operator>-&gt;</operator><name>all_closure_sets</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
<argument><expr><name><name>opt_state</name><operator>-&gt;</operator><name>n_blocks</name></name> <operator>*</operator> <name><name>opt_state</name><operator>-&gt;</operator><name>nodewords</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>opt_state</name><operator>-&gt;</operator><name>all_closure_sets</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>root</name><operator>-&gt;</operator><name>level</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>b</name> <operator>=</operator> <name><name>opt_state</name><operator>-&gt;</operator><name>levels</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><name>b</name></expr>;</condition> <incr><expr><name>b</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>link</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>SET_INSERT</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>closure</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>JT</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>SET_UNION</name><argument_list>(<argument><expr><call><name>JT</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>closure</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>closure</name></name></expr></argument>, <argument><expr><name><name>opt_state</name><operator>-&gt;</operator><name>nodewords</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SET_UNION</name><argument_list>(<argument><expr><call><name>JF</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>closure</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>closure</name></name></expr></argument>, <argument><expr><name><name>opt_state</name><operator>-&gt;</operator><name>nodewords</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type>
<name>atomuse</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>stmt</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NOP</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><call><name>BPF_CLASS</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>BPF_RET</name></expr>:</case>
<return>return <expr><ternary><condition><expr><operator>(</operator><call><name>BPF_RVAL</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BPF_A</name><operator>)</operator></expr> ?</condition><then> <expr><name>A_ATOM</name></expr> </then><else>:
<expr><ternary><condition><expr><operator>(</operator><call><name>BPF_RVAL</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BPF_X</name><operator>)</operator></expr> ?</condition><then> <expr><name>X_ATOM</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></else></ternary></expr>;</return>

<case>case <expr><name>BPF_LD</name></expr>:</case>
<case>case <expr><name>BPF_LDX</name></expr>:</case>
<return>return <expr><ternary><condition><expr><operator>(</operator><call><name>BPF_MODE</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BPF_IND</name><operator>)</operator></expr> ?</condition><then> <expr><name>X_ATOM</name></expr> </then><else>:
<expr><ternary><condition><expr><operator>(</operator><call><name>BPF_MODE</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BPF_MEM</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>k</name></name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></else></ternary></expr>;</return>

<case>case <expr><name>BPF_ST</name></expr>:</case>
<return>return <expr><name>A_ATOM</name></expr>;</return>

<case>case <expr><name>BPF_STX</name></expr>:</case>
<return>return <expr><name>X_ATOM</name></expr>;</return>

<case>case <expr><name>BPF_JMP</name></expr>:</case>
<case>case <expr><name>BPF_ALU</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><call><name>BPF_SRC</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BPF_X</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>AX_ATOM</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>A_ATOM</name></expr>;</return>

<case>case <expr><name>BPF_MISC</name></expr>:</case>
<return>return <expr><ternary><condition><expr><call><name>BPF_MISCOP</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BPF_TXA</name></expr> ?</condition><then> <expr><name>X_ATOM</name></expr> </then><else>: <expr><name>A_ATOM</name></expr></else></ternary></expr>;</return>
</block_content>}</block></switch>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>








<function><type><specifier>static</specifier> <name>int</name></type>
<name>atomdef</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>stmt</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>code</name></name> <operator>==</operator> <name>NOP</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><call><name>BPF_CLASS</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>BPF_LD</name></expr>:</case>
<case>case <expr><name>BPF_ALU</name></expr>:</case>
<return>return <expr><name>A_ATOM</name></expr>;</return>

<case>case <expr><name>BPF_LDX</name></expr>:</case>
<return>return <expr><name>X_ATOM</name></expr>;</return>

<case>case <expr><name>BPF_ST</name></expr>:</case>
<case>case <expr><name>BPF_STX</name></expr>:</case>
<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>k</name></name></expr>;</return>

<case>case <expr><name>BPF_MISC</name></expr>:</case>
<return>return <expr><ternary><condition><expr><call><name>BPF_MISCOP</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BPF_TAX</name></expr> ?</condition><then> <expr><name>X_ATOM</name></expr> </then><else>: <expr><name>A_ATOM</name></expr></else></ternary></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>void</name></type>
<name>compute_local_ud</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>slist</name></name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomset</name></type> <name>def</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>use</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>killed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>atom</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>stmts</name></name></expr>;</init> <condition><expr><name>s</name></expr>;</condition> <incr><expr><name>s</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>code</name></name> <operator>==</operator> <name>NOP</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name>atom</name> <operator>=</operator> <call><name>atomuse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>atom</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>atom</name> <operator>==</operator> <name>AX_ATOM</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ATOMELEM</name><argument_list>(<argument><expr><name>def</name></expr></argument>, <argument><expr><name>X_ATOM</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>use</name> <operator>|=</operator> <call><name>ATOMMASK</name><argument_list>(<argument><expr><name>X_ATOM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ATOMELEM</name><argument_list>(<argument><expr><name>def</name></expr></argument>, <argument><expr><name>A_ATOM</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>use</name> <operator>|=</operator> <call><name>ATOMMASK</name><argument_list>(<argument><expr><name>A_ATOM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>atom</name> <operator>&lt;</operator> <name>N_ATOMS</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ATOMELEM</name><argument_list>(<argument><expr><name>def</name></expr></argument>, <argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>use</name> <operator>|=</operator> <call><name>ATOMMASK</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>atom</name> <operator>=</operator> <call><name>atomdef</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>atom</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ATOMELEM</name><argument_list>(<argument><expr><name>use</name></expr></argument>, <argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>killed</name> <operator>|=</operator> <call><name>ATOMMASK</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>def</name> <operator>|=</operator> <call><name>ATOMMASK</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><call><name>BPF_CLASS</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>code</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BPF_JMP</name></expr>)</condition> <block>{<block_content>



<expr_stmt><expr><name>atom</name> <operator>=</operator> <call><name>atomuse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>atom</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>atom</name> <operator>==</operator> <name>AX_ATOM</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ATOMELEM</name><argument_list>(<argument><expr><name>def</name></expr></argument>, <argument><expr><name>X_ATOM</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>use</name> <operator>|=</operator> <call><name>ATOMMASK</name><argument_list>(<argument><expr><name>X_ATOM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ATOMELEM</name><argument_list>(<argument><expr><name>def</name></expr></argument>, <argument><expr><name>A_ATOM</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>use</name> <operator>|=</operator> <call><name>ATOMMASK</name><argument_list>(<argument><expr><name>A_ATOM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>atom</name> <operator>&lt;</operator> <name>N_ATOMS</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ATOMELEM</name><argument_list>(<argument><expr><name>def</name></expr></argument>, <argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>use</name> <operator>|=</operator> <call><name>ATOMMASK</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>def</name></name> <operator>=</operator> <name>def</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>kill</name></name> <operator>=</operator> <name>killed</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>in_use</name></name> <operator>=</operator> <name>use</name></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name></type>
<name>find_ud</name><parameter_list>(<parameter><decl><type><name>opt_state_t</name> <modifier>*</modifier></type><name>opt_state</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>root</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>maxlevel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>





<expr_stmt><expr><name>maxlevel</name> <operator>=</operator> <name><name>root</name><operator>-&gt;</operator><name>level</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>maxlevel</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>opt_state</name><operator>-&gt;</operator><name>levels</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>link</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>compute_local_ud</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>out_use</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>maxlevel</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>opt_state</name><operator>-&gt;</operator><name>levels</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>link</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>out_use</name></name> <operator>|=</operator> <call><name>JT</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>in_use</name> <operator>|</operator> <call><name>JF</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>in_use</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>in_use</name></name> <operator>|=</operator> <name><name>p</name><operator>-&gt;</operator><name>out_use</name></name> <operator>&amp;</operator><operator>~</operator> <name><name>p</name><operator>-&gt;</operator><name>kill</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>init_val</name><parameter_list>(<parameter><decl><type><name>opt_state_t</name> <modifier>*</modifier></type><name>opt_state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>opt_state</name><operator>-&gt;</operator><name>curval</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt_state</name><operator>-&gt;</operator><name>next_vnode</name></name> <operator>=</operator> <name><name>opt_state</name><operator>-&gt;</operator><name>vnode_base</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>opt_state</name><operator>-&gt;</operator><name>vmap</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>opt_state</name><operator>-&gt;</operator><name>maxval</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>opt_state</name><operator>-&gt;</operator><name>vmap</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>opt_state</name><operator>-&gt;</operator><name>hashtbl</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name><name>opt_state</name><operator>-&gt;</operator><name>hashtbl</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>F</name><parameter_list>(<parameter><decl><type><name>opt_state_t</name> <modifier>*</modifier></type><name>opt_state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_int</name></type> <name>hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>valnode</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hash</name> <operator>=</operator> <operator>(</operator><name>u_int</name><operator>)</operator><name>code</name> <operator>^</operator> <operator>(</operator><operator>(</operator><name>u_int</name><operator>)</operator><name>v0</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><operator>(</operator><name>u_int</name><operator>)</operator><name>v1</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>hash</name> <operator>%=</operator> <name>MODULUS</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>opt_state</name><operator>-&gt;</operator><name>hashtbl</name><index>[<expr><name>hash</name></expr>]</index></name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>code</name></name> <operator>==</operator> <name>code</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>v0</name></name> <operator>==</operator> <name>v0</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>v1</name></name> <operator>==</operator> <name>v1</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name><name>p</name><operator>-&gt;</operator><name>val</name></name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>++</operator><name><name>opt_state</name><operator>-&gt;</operator><name>curval</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>BPF_MODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BPF_IMM</name> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>BPF_CLASS</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BPF_LD</name> <operator>||</operator> <call><name>BPF_CLASS</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BPF_LDX</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>opt_state</name><operator>-&gt;</operator><name>vmap</name><index>[<expr><name>val</name></expr>]</index></name><operator>.</operator><name>const_val</name> <operator>=</operator> <name>v0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt_state</name><operator>-&gt;</operator><name>vmap</name><index>[<expr><name>val</name></expr>]</index></name><operator>.</operator><name>is_const</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>opt_state</name><operator>-&gt;</operator><name>next_vnode</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>v0</name></name> <operator>=</operator> <name>v0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>v1</name></name> <operator>=</operator> <name>v1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>opt_state</name><operator>-&gt;</operator><name>hashtbl</name><index>[<expr><name>hash</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt_state</name><operator>-&gt;</operator><name>hashtbl</name><index>[<expr><name>hash</name></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>vstore</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>stmt</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>valp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>newval</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>alter</name> <operator>&amp;&amp;</operator> <name>newval</name> <operator>!=</operator> <name>VAL_UNKNOWN</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>valp</name> <operator>==</operator> <name>newval</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>NOP</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>valp</name> <operator>=</operator> <name>newval</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>fold_op</name><parameter_list>(<parameter><decl><type><name>opt_state_t</name> <modifier>*</modifier></type><name>opt_state</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stmt</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bpf_u_int32</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>opt_state</name><operator>-&gt;</operator><name>vmap</name><index>[<expr><name>v0</name></expr>]</index></name><operator>.</operator><name>const_val</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>opt_state</name><operator>-&gt;</operator><name>vmap</name><index>[<expr><name>v1</name></expr>]</index></name><operator>.</operator><name>const_val</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><call><name>BPF_OP</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<case>case <expr><name>BPF_ADD</name></expr>:</case>
<expr_stmt><expr><name>a</name> <operator>+=</operator> <name>b</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_SUB</name></expr>:</case>
<expr_stmt><expr><name>a</name> <operator>-=</operator> <name>b</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_MUL</name></expr>:</case>
<expr_stmt><expr><name>a</name> <operator>*=</operator> <name>b</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_DIV</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>opt_error</name><argument_list>(<argument><expr><name>opt_state</name></expr></argument>, <argument><expr><literal type="string">"division by zero"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>a</name> <operator>/=</operator> <name>b</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_MOD</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>opt_error</name><argument_list>(<argument><expr><name>opt_state</name></expr></argument>, <argument><expr><literal type="string">"modulus by zero"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>a</name> <operator>%=</operator> <name>b</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_AND</name></expr>:</case>
<expr_stmt><expr><name>a</name> <operator>&amp;=</operator> <name>b</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_OR</name></expr>:</case>
<expr_stmt><expr><name>a</name> <operator>|=</operator> <name>b</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_XOR</name></expr>:</case>
<expr_stmt><expr><name>a</name> <operator>^=</operator> <name>b</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_LSH</name></expr>:</case>











<if_stmt><if>if <condition>(<expr><name>b</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>a</name> <operator>&lt;&lt;=</operator> <name>b</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>BPF_RSH</name></expr>:</case>











<if_stmt><if>if <condition>(<expr><name>b</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>a</name> <operator>&gt;&gt;=</operator> <name>b</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>k</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>BPF_LD</name><operator>|</operator><name>BPF_IMM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt_state</name><operator>-&gt;</operator><name>done</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>slist</name></name> <modifier>*</modifier></type>
<name>this_op</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>slist</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<while>while <condition>(<expr><name>s</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>code</name></name> <operator>==</operator> <name>NOP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>opt_not</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>JT</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>JT</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>JF</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>JF</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>opt_peep</name><parameter_list>(<parameter><decl><type><name>opt_state_t</name> <modifier>*</modifier></type><name>opt_state</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>slist</name></name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>slist</name></name> <modifier>*</modifier></type><name>next</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>stmts</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>last</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition>;</condition> <incr><expr><name>s</name> <operator>=</operator> <name>next</name></expr></incr>)</control> <block>{<block_content>



<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>this_op</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>





<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>this_op</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>next</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>last</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>code</name></name> <operator>==</operator> <name>BPF_ST</name> <operator>&amp;&amp;</operator>
<name><name>next</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>code</name></name> <operator>==</operator> <operator>(</operator><name>BPF_LDX</name><operator>|</operator><name>BPF_MEM</name><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>k</name></name> <operator>==</operator> <name><name>next</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>k</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>opt_state</name><operator>-&gt;</operator><name>done</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name>BPF_MISC</name><operator>|</operator><name>BPF_TAX</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>code</name></name> <operator>==</operator> <operator>(</operator><name>BPF_LD</name><operator>|</operator><name>BPF_IMM</name><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>next</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>code</name></name> <operator>==</operator> <operator>(</operator><name>BPF_MISC</name><operator>|</operator><name>BPF_TAX</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name>BPF_LDX</name><operator>|</operator><name>BPF_IMM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name>BPF_MISC</name><operator>|</operator><name>BPF_TXA</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt_state</name><operator>-&gt;</operator><name>done</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>code</name></name> <operator>==</operator> <operator>(</operator><name>BPF_LD</name><operator>|</operator><name>BPF_IMM</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>slist</name></name> <modifier>*</modifier></type><name>add</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tax</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ild</name></decl>;</decl_stmt>







<if_stmt><if>if <condition>(<expr><call><name>ATOMELEM</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>out_use</name></name></expr></argument>, <argument><expr><name>X_ATOM</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><name><name>next</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>code</name></name> <operator>!=</operator> <operator>(</operator><name>BPF_LDX</name><operator>|</operator><name>BPF_MSH</name><operator>|</operator><name>BPF_B</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>add</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>add</name> <operator>=</operator> <call><name>this_op</name><argument_list>(<argument><expr><name><name>next</name><operator>-&gt;</operator><name>next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>add</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>add</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>code</name></name> <operator>!=</operator> <operator>(</operator><name>BPF_ALU</name><operator>|</operator><name>BPF_ADD</name><operator>|</operator><name>BPF_X</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>





<expr_stmt><expr><name>tax</name> <operator>=</operator> <call><name>this_op</name><argument_list>(<argument><expr><name><name>add</name><operator>-&gt;</operator><name>next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tax</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>tax</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>code</name></name> <operator>!=</operator> <operator>(</operator><name>BPF_MISC</name><operator>|</operator><name>BPF_TAX</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>





<expr_stmt><expr><name>ild</name> <operator>=</operator> <call><name>this_op</name><argument_list>(<argument><expr><name><name>tax</name><operator>-&gt;</operator><name>next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ild</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>BPF_CLASS</name><argument_list>(<argument><expr><name><name>ild</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>code</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>BPF_LD</name> <operator>||</operator>
<call><name>BPF_MODE</name><argument_list>(<argument><expr><name><name>ild</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>code</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>BPF_IND</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>




























<expr_stmt><expr><name><name>ild</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>k</name></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>k</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name>NOP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>add</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name>NOP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tax</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name>NOP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt_state</name><operator>-&gt;</operator><name>done</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>







<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>code</name></name> <operator>==</operator> <operator>(</operator><name>BPF_JMP</name><operator>|</operator><name>BPF_JEQ</name><operator>|</operator><name>BPF_K</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>!</operator><call><name>ATOMELEM</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>out_use</name></name></expr></argument>, <argument><expr><name>A_ATOM</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><name><name>last</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>code</name></name> <operator>==</operator> <operator>(</operator><name>BPF_ALU</name><operator>|</operator><name>BPF_SUB</name><operator>|</operator><name>BPF_X</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>val</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>val</name><index>[<expr><name>X_ATOM</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opt_state</name><operator>-&gt;</operator><name>vmap</name><index>[<expr><name>val</name></expr>]</index></name><operator>.</operator><name>is_const</name></expr>)</condition> <block>{<block_content>









<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>k</name></name> <operator>+=</operator> <name><name>opt_state</name><operator>-&gt;</operator><name>vmap</name><index>[<expr><name>val</name></expr>]</index></name><operator>.</operator><name>const_val</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>last</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name>NOP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt_state</name><operator>-&gt;</operator><name>done</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>k</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>









<expr_stmt><expr><name><name>last</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name>NOP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name>BPF_JMP</name><operator>|</operator><name>BPF_JEQ</name><operator>|</operator><name>BPF_X</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt_state</name><operator>-&gt;</operator><name>done</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>






<if type="elseif">else if <condition>(<expr><name><name>last</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>code</name></name> <operator>==</operator> <operator>(</operator><name>BPF_ALU</name><operator>|</operator><name>BPF_SUB</name><operator>|</operator><name>BPF_K</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>last</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name>NOP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>k</name></name> <operator>+=</operator> <name><name>last</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>k</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt_state</name><operator>-&gt;</operator><name>done</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>







<if type="elseif">else if <condition>(<expr><name><name>last</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>code</name></name> <operator>==</operator> <operator>(</operator><name>BPF_ALU</name><operator>|</operator><name>BPF_AND</name><operator>|</operator><name>BPF_K</name><operator>)</operator> <operator>&amp;&amp;</operator>
<name><name>b</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>k</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>k</name></name> <operator>=</operator> <name><name>last</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>k</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name>BPF_JMP</name><operator>|</operator><name>BPF_K</name><operator>|</operator><name>BPF_JSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>last</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name>NOP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt_state</name><operator>-&gt;</operator><name>done</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>opt_not</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>




<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>code</name></name> <operator>==</operator> <operator>(</operator><name>BPF_JMP</name><operator>|</operator><name>BPF_K</name><operator>|</operator><name>BPF_JSET</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>k</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>JT</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>JF</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>u_int</name><operator>)</operator><name><name>b</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>k</name></name> <operator>==</operator> <literal type="number">0xffffffffU</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>JF</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>JT</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>





<expr_stmt><expr><name>val</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>val</name><index>[<expr><name>X_ATOM</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opt_state</name><operator>-&gt;</operator><name>vmap</name><index>[<expr><name>val</name></expr>]</index></name><operator>.</operator><name>is_const</name> <operator>&amp;&amp;</operator> <call><name>BPF_SRC</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>code</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BPF_X</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bpf_int32</name></type> <name>v</name> <init>= <expr><name><name>opt_state</name><operator>-&gt;</operator><name>vmap</name><index>[<expr><name>val</name></expr>]</index></name><operator>.</operator><name>const_val</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>code</name></name> <operator>&amp;=</operator> <operator>~</operator><name>BPF_X</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>k</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>val</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>val</name><index>[<expr><name>A_ATOM</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opt_state</name><operator>-&gt;</operator><name>vmap</name><index>[<expr><name>val</name></expr>]</index></name><operator>.</operator><name>is_const</name> <operator>&amp;&amp;</operator> <call><name>BPF_SRC</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>code</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BPF_K</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>bpf_int32</name></type> <name>v</name> <init>= <expr><name><name>opt_state</name><operator>-&gt;</operator><name>vmap</name><index>[<expr><name>val</name></expr>]</index></name><operator>.</operator><name>const_val</name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><call><name>BPF_OP</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>BPF_JEQ</name></expr>:</case>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name>v</name> <operator>==</operator> <name><name>b</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>k</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_JGT</name></expr>:</case>
<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>v</name> <operator>&gt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>b</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>k</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_JGE</name></expr>:</case>
<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>v</name> <operator>&gt;=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>b</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>k</name></name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_JSET</name></expr>:</case>
<expr_stmt><expr><name>v</name> <operator>&amp;=</operator> <name><name>b</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>k</name></name></expr>;</expr_stmt>
<break>break;</break>

<default>default:</default>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></switch>
<if_stmt><if>if <condition>(<expr><call><name>JF</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>JT</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>opt_state</name><operator>-&gt;</operator><name>done</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>v</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>JF</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>JT</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>JT</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>JF</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>void</name></type>
<name>opt_stmt</name><parameter_list>(<parameter><decl><type><name>opt_state_t</name> <modifier>*</modifier></type><name>opt_state</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stmt</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>val</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>op</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>v</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>BPF_LD</name><operator>|</operator><name>BPF_ABS</name><operator>|</operator><name>BPF_W</name></expr>:</case>
<case>case <expr><name>BPF_LD</name><operator>|</operator><name>BPF_ABS</name><operator>|</operator><name>BPF_H</name></expr>:</case>
<case>case <expr><name>BPF_LD</name><operator>|</operator><name>BPF_ABS</name><operator>|</operator><name>BPF_B</name></expr>:</case>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>F</name><argument_list>(<argument><expr><name>opt_state</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>k</name></name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vstore</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>val</name><index>[<expr><name>A_ATOM</name></expr>]</index></name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>alter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_LD</name><operator>|</operator><name>BPF_IND</name><operator>|</operator><name>BPF_W</name></expr>:</case>
<case>case <expr><name>BPF_LD</name><operator>|</operator><name>BPF_IND</name><operator>|</operator><name>BPF_H</name></expr>:</case>
<case>case <expr><name>BPF_LD</name><operator>|</operator><name>BPF_IND</name><operator>|</operator><name>BPF_B</name></expr>:</case>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>val</name><index>[<expr><name>X_ATOM</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>alter</name> <operator>&amp;&amp;</operator> <name><name>opt_state</name><operator>-&gt;</operator><name>vmap</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><name>is_const</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>BPF_LD</name><operator>|</operator><name>BPF_ABS</name><operator>|</operator><call><name>BPF_SIZE</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>k</name></name> <operator>+=</operator> <name><name>opt_state</name><operator>-&gt;</operator><name>vmap</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><name>const_val</name></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>F</name><argument_list>(<argument><expr><name>opt_state</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>k</name></name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt_state</name><operator>-&gt;</operator><name>done</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>F</name><argument_list>(<argument><expr><name>opt_state</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>k</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><call><name>vstore</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>val</name><index>[<expr><name>A_ATOM</name></expr>]</index></name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>alter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_LD</name><operator>|</operator><name>BPF_LEN</name></expr>:</case>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>F</name><argument_list>(<argument><expr><name>opt_state</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vstore</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>val</name><index>[<expr><name>A_ATOM</name></expr>]</index></name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>alter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_LD</name><operator>|</operator><name>BPF_IMM</name></expr>:</case>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>K</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vstore</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>val</name><index>[<expr><name>A_ATOM</name></expr>]</index></name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>alter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_LDX</name><operator>|</operator><name>BPF_IMM</name></expr>:</case>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>K</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vstore</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>val</name><index>[<expr><name>X_ATOM</name></expr>]</index></name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>alter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_LDX</name><operator>|</operator><name>BPF_MSH</name><operator>|</operator><name>BPF_B</name></expr>:</case>
<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>F</name><argument_list>(<argument><expr><name>opt_state</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>k</name></name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vstore</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>val</name><index>[<expr><name>X_ATOM</name></expr>]</index></name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>alter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_ALU</name><operator>|</operator><name>BPF_NEG</name></expr>:</case>
<if_stmt><if>if <condition>(<expr><name>alter</name> <operator>&amp;&amp;</operator> <name><name>opt_state</name><operator>-&gt;</operator><name>vmap</name><index>[<expr><name><name>val</name><index>[<expr><name>A_ATOM</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>is_const</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>BPF_LD</name><operator>|</operator><name>BPF_IMM</name></expr>;</expr_stmt>
















<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>k</name></name> <operator>=</operator> <literal type="number">0U</literal> <operator>-</operator> <operator>(</operator><name>bpf_u_int32</name><operator>)</operator><operator>(</operator><name><name>opt_state</name><operator>-&gt;</operator><name>vmap</name><index>[<expr><name><name>val</name><index>[<expr><name>A_ATOM</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>const_val</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>val</name><index>[<expr><name>A_ATOM</name></expr>]</index></name> <operator>=</operator> <call><name>K</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>val</name><index>[<expr><name>A_ATOM</name></expr>]</index></name> <operator>=</operator> <call><name>F</name><argument_list>(<argument><expr><name>opt_state</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><name><name>val</name><index>[<expr><name>A_ATOM</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>BPF_ALU</name><operator>|</operator><name>BPF_ADD</name><operator>|</operator><name>BPF_K</name></expr>:</case>
<case>case <expr><name>BPF_ALU</name><operator>|</operator><name>BPF_SUB</name><operator>|</operator><name>BPF_K</name></expr>:</case>
<case>case <expr><name>BPF_ALU</name><operator>|</operator><name>BPF_MUL</name><operator>|</operator><name>BPF_K</name></expr>:</case>
<case>case <expr><name>BPF_ALU</name><operator>|</operator><name>BPF_DIV</name><operator>|</operator><name>BPF_K</name></expr>:</case>
<case>case <expr><name>BPF_ALU</name><operator>|</operator><name>BPF_MOD</name><operator>|</operator><name>BPF_K</name></expr>:</case>
<case>case <expr><name>BPF_ALU</name><operator>|</operator><name>BPF_AND</name><operator>|</operator><name>BPF_K</name></expr>:</case>
<case>case <expr><name>BPF_ALU</name><operator>|</operator><name>BPF_OR</name><operator>|</operator><name>BPF_K</name></expr>:</case>
<case>case <expr><name>BPF_ALU</name><operator>|</operator><name>BPF_XOR</name><operator>|</operator><name>BPF_K</name></expr>:</case>
<case>case <expr><name>BPF_ALU</name><operator>|</operator><name>BPF_LSH</name><operator>|</operator><name>BPF_K</name></expr>:</case>
<case>case <expr><name>BPF_ALU</name><operator>|</operator><name>BPF_RSH</name><operator>|</operator><name>BPF_K</name></expr>:</case>
<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>BPF_OP</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>alter</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>k</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>











<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>BPF_ADD</name> <operator>||</operator>
<name>op</name> <operator>==</operator> <name>BPF_LSH</name> <operator>||</operator> <name>op</name> <operator>==</operator> <name>BPF_RSH</name> <operator>||</operator>
<name>op</name> <operator>==</operator> <name>BPF_OR</name> <operator>||</operator> <name>op</name> <operator>==</operator> <name>BPF_XOR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>NOP</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>BPF_MUL</name> <operator>||</operator> <name>op</name> <operator>==</operator> <name>BPF_AND</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>BPF_LD</name><operator>|</operator><name>BPF_IMM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>val</name><index>[<expr><name>A_ATOM</name></expr>]</index></name> <operator>=</operator> <call><name>K</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>BPF_DIV</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>opt_error</name><argument_list>(<argument><expr><name>opt_state</name></expr></argument>,
<argument><expr><literal type="string">"division by zero"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>BPF_MOD</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>opt_error</name><argument_list>(<argument><expr><name>opt_state</name></expr></argument>,
<argument><expr><literal type="string">"modulus by zero"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opt_state</name><operator>-&gt;</operator><name>vmap</name><index>[<expr><name><name>val</name><index>[<expr><name>A_ATOM</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>is_const</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fold_op</name><argument_list>(<argument><expr><name>opt_state</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>val</name><index>[<expr><name>A_ATOM</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>K</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>val</name><index>[<expr><name>A_ATOM</name></expr>]</index></name> <operator>=</operator> <call><name>K</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>val</name><index>[<expr><name>A_ATOM</name></expr>]</index></name> <operator>=</operator> <call><name>F</name><argument_list>(<argument><expr><name>opt_state</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><name><name>val</name><index>[<expr><name>A_ATOM</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>K</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_ALU</name><operator>|</operator><name>BPF_ADD</name><operator>|</operator><name>BPF_X</name></expr>:</case>
<case>case <expr><name>BPF_ALU</name><operator>|</operator><name>BPF_SUB</name><operator>|</operator><name>BPF_X</name></expr>:</case>
<case>case <expr><name>BPF_ALU</name><operator>|</operator><name>BPF_MUL</name><operator>|</operator><name>BPF_X</name></expr>:</case>
<case>case <expr><name>BPF_ALU</name><operator>|</operator><name>BPF_DIV</name><operator>|</operator><name>BPF_X</name></expr>:</case>
<case>case <expr><name>BPF_ALU</name><operator>|</operator><name>BPF_MOD</name><operator>|</operator><name>BPF_X</name></expr>:</case>
<case>case <expr><name>BPF_ALU</name><operator>|</operator><name>BPF_AND</name><operator>|</operator><name>BPF_X</name></expr>:</case>
<case>case <expr><name>BPF_ALU</name><operator>|</operator><name>BPF_OR</name><operator>|</operator><name>BPF_X</name></expr>:</case>
<case>case <expr><name>BPF_ALU</name><operator>|</operator><name>BPF_XOR</name><operator>|</operator><name>BPF_X</name></expr>:</case>
<case>case <expr><name>BPF_ALU</name><operator>|</operator><name>BPF_LSH</name><operator>|</operator><name>BPF_X</name></expr>:</case>
<case>case <expr><name>BPF_ALU</name><operator>|</operator><name>BPF_RSH</name><operator>|</operator><name>BPF_X</name></expr>:</case>
<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>BPF_OP</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>alter</name> <operator>&amp;&amp;</operator> <name><name>opt_state</name><operator>-&gt;</operator><name>vmap</name><index>[<expr><name><name>val</name><index>[<expr><name>X_ATOM</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>is_const</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>opt_state</name><operator>-&gt;</operator><name>vmap</name><index>[<expr><name><name>val</name><index>[<expr><name>A_ATOM</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>is_const</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fold_op</name><argument_list>(<argument><expr><name>opt_state</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>val</name><index>[<expr><name>A_ATOM</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>val</name><index>[<expr><name>X_ATOM</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>val</name><index>[<expr><name>A_ATOM</name></expr>]</index></name> <operator>=</operator> <call><name>K</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>BPF_ALU</name><operator>|</operator><name>BPF_K</name><operator>|</operator><name>op</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>k</name></name> <operator>=</operator> <name><name>opt_state</name><operator>-&gt;</operator><name>vmap</name><index>[<expr><name><name>val</name><index>[<expr><name>X_ATOM</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>const_val</name></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><operator>(</operator><name>op</name> <operator>==</operator> <name>BPF_LSH</name> <operator>||</operator> <name>op</name> <operator>==</operator> <name>BPF_RSH</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>k</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>k</name></name> <operator>&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>opt_error</name><argument_list>(<argument><expr><name>opt_state</name></expr></argument>,
<argument><expr><literal type="string">"shift by more than 31 bits"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>opt_state</name><operator>-&gt;</operator><name>done</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>val</name><index>[<expr><name>A_ATOM</name></expr>]</index></name> <operator>=</operator>
<call><name>F</name><argument_list>(<argument><expr><name>opt_state</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><name><name>val</name><index>[<expr><name>A_ATOM</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>K</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>







<if_stmt><if>if <condition>(<expr><name>alter</name> <operator>&amp;&amp;</operator> <name><name>opt_state</name><operator>-&gt;</operator><name>vmap</name><index>[<expr><name><name>val</name><index>[<expr><name>A_ATOM</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>is_const</name>
<operator>&amp;&amp;</operator> <name><name>opt_state</name><operator>-&gt;</operator><name>vmap</name><index>[<expr><name><name>val</name><index>[<expr><name>A_ATOM</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>const_val</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>BPF_ADD</name> <operator>||</operator> <name>op</name> <operator>==</operator> <name>BPF_OR</name> <operator>||</operator> <name>op</name> <operator>==</operator> <name>BPF_XOR</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>BPF_MISC</name><operator>|</operator><name>BPF_TXA</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vstore</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>val</name><index>[<expr><name>A_ATOM</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>val</name><index>[<expr><name>X_ATOM</name></expr>]</index></name></expr></argument>, <argument><expr><name>alter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>op</name> <operator>==</operator> <name>BPF_MUL</name> <operator>||</operator> <name>op</name> <operator>==</operator> <name>BPF_DIV</name> <operator>||</operator> <name>op</name> <operator>==</operator> <name>BPF_MOD</name> <operator>||</operator>
<name>op</name> <operator>==</operator> <name>BPF_AND</name> <operator>||</operator> <name>op</name> <operator>==</operator> <name>BPF_LSH</name> <operator>||</operator> <name>op</name> <operator>==</operator> <name>BPF_RSH</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>BPF_LD</name><operator>|</operator><name>BPF_IMM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>k</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>vstore</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>val</name><index>[<expr><name>A_ATOM</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>K</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>alter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>op</name> <operator>==</operator> <name>BPF_NEG</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>NOP</name></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>val</name><index>[<expr><name>A_ATOM</name></expr>]</index></name> <operator>=</operator> <call><name>F</name><argument_list>(<argument><expr><name>opt_state</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><name><name>val</name><index>[<expr><name>A_ATOM</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>val</name><index>[<expr><name>X_ATOM</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_MISC</name><operator>|</operator><name>BPF_TXA</name></expr>:</case>
<expr_stmt><expr><call><name>vstore</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>val</name><index>[<expr><name>A_ATOM</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>val</name><index>[<expr><name>X_ATOM</name></expr>]</index></name></expr></argument>, <argument><expr><name>alter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_LD</name><operator>|</operator><name>BPF_MEM</name></expr>:</case>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>val</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>k</name></name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>alter</name> <operator>&amp;&amp;</operator> <name><name>opt_state</name><operator>-&gt;</operator><name>vmap</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><name>is_const</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>BPF_LD</name><operator>|</operator><name>BPF_IMM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>k</name></name> <operator>=</operator> <name><name>opt_state</name><operator>-&gt;</operator><name>vmap</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><name>const_val</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt_state</name><operator>-&gt;</operator><name>done</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vstore</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>val</name><index>[<expr><name>A_ATOM</name></expr>]</index></name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>alter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_MISC</name><operator>|</operator><name>BPF_TAX</name></expr>:</case>
<expr_stmt><expr><call><name>vstore</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>val</name><index>[<expr><name>X_ATOM</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>val</name><index>[<expr><name>A_ATOM</name></expr>]</index></name></expr></argument>, <argument><expr><name>alter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_LDX</name><operator>|</operator><name>BPF_MEM</name></expr>:</case>
<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>val</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>k</name></name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>alter</name> <operator>&amp;&amp;</operator> <name><name>opt_state</name><operator>-&gt;</operator><name>vmap</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><name>is_const</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>BPF_LDX</name><operator>|</operator><name>BPF_IMM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>k</name></name> <operator>=</operator> <name><name>opt_state</name><operator>-&gt;</operator><name>vmap</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><name>const_val</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt_state</name><operator>-&gt;</operator><name>done</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>vstore</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>val</name><index>[<expr><name>X_ATOM</name></expr>]</index></name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>alter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_ST</name></expr>:</case>
<expr_stmt><expr><call><name>vstore</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>val</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>k</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>val</name><index>[<expr><name>A_ATOM</name></expr>]</index></name></expr></argument>, <argument><expr><name>alter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>BPF_STX</name></expr>:</case>
<expr_stmt><expr><call><name>vstore</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>val</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>k</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>val</name><index>[<expr><name>X_ATOM</name></expr>]</index></name></expr></argument>, <argument><expr><name>alter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>deadstmt</name><parameter_list>(<parameter><decl><type><name>opt_state_t</name> <modifier>*</modifier></type><name>opt_state</name></decl></parameter>, <parameter><decl><type><specifier>register</specifier> <name><name>struct</name> <name>stmt</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>register</specifier> <name><name>struct</name> <name>stmt</name></name> <modifier>*</modifier></type><name><name>last</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>atom</name></decl>;</decl_stmt>

<expr_stmt><expr><name>atom</name> <operator>=</operator> <call><name>atomuse</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>atom</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>atom</name> <operator>==</operator> <name>AX_ATOM</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>last</name><index>[<expr><name>X_ATOM</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>last</name><index>[<expr><name>A_ATOM</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>last</name><index>[<expr><name>atom</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>atom</name> <operator>=</operator> <call><name>atomdef</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>atom</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>last</name><index>[<expr><name>atom</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>opt_state</name><operator>-&gt;</operator><name>done</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>last</name><index>[<expr><name>atom</name></expr>]</index></name><operator>-&gt;</operator><name>code</name> <operator>=</operator> <name>NOP</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>last</name><index>[<expr><name>atom</name></expr>]</index></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>opt_deadstores</name><parameter_list>(<parameter><decl><type><name>opt_state_t</name> <modifier>*</modifier></type><name>opt_state</name></decl></parameter>, <parameter><decl><type><specifier>register</specifier> <name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name><name>struct</name> <name>slist</name></name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>atom</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>stmt</name></name> <modifier>*</modifier></type><name><name>last</name><index>[<expr><name>N_ATOMS</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>last</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>last</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>stmts</name></name></expr>;</init> <condition><expr><name>s</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>s</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>deadstmt</name><argument_list>(<argument><expr><name>opt_state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>deadstmt</name><argument_list>(<argument><expr><name>opt_state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>atom</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>atom</name> <operator>&lt;</operator> <name>N_ATOMS</name></expr>;</condition> <incr><expr><operator>++</operator><name>atom</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>last</name><index>[<expr><name>atom</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ATOMELEM</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>out_use</name></name></expr></argument>, <argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>last</name><index>[<expr><name>atom</name></expr>]</index></name><operator>-&gt;</operator><name>code</name> <operator>=</operator> <name>NOP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt_state</name><operator>-&gt;</operator><name>done</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>opt_blk</name><parameter_list>(<parameter><decl><type><name>opt_state_t</name> <modifier>*</modifier></type><name>opt_state</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>do_stmts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>slist</name></name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>edge</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bpf_int32</name></type> <name>aval</name></decl>, <decl><type ref="prev"/><name>xval</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
for (s = b-&gt;stmts; s &amp;&amp; s-&gt;next; s = s-&gt;next)
if (BPF_CLASS(s-&gt;s.code) == BPF_JMP) {
do_stmts = 0;
break;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>in_edges</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>




<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>b</name><operator>-&gt;</operator><name>val</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>val</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>






<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>b</name><operator>-&gt;</operator><name>val</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>pred</name><operator>-&gt;</operator><name>val</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>val</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>








<while>while <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N_ATOMS</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>val</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>p</name><operator>-&gt;</operator><name>pred</name><operator>-&gt;</operator><name>val</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>val</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>aval</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>val</name><index>[<expr><name>A_ATOM</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>xval</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>val</name><index>[<expr><name>X_ATOM</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>stmts</name></name></expr>;</init> <condition><expr><name>s</name></expr>;</condition> <incr><expr><name>s</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>opt_stmt</name><argument_list>(<argument><expr><name>opt_state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>val</name></name></expr></argument>, <argument><expr><name>do_stmts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
























<if_stmt><if>if <condition>(<expr><name>do_stmts</name> <operator>&amp;&amp;</operator>
<operator>(</operator><operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>out_use</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
<name>aval</name> <operator>!=</operator> <name>VAL_UNKNOWN</name> <operator>&amp;&amp;</operator> <name><name>b</name><operator>-&gt;</operator><name>val</name><index>[<expr><name>A_ATOM</name></expr>]</index></name> <operator>==</operator> <name>aval</name> <operator>&amp;&amp;</operator>
<name>xval</name> <operator>!=</operator> <name>VAL_UNKNOWN</name> <operator>&amp;&amp;</operator> <name><name>b</name><operator>-&gt;</operator><name>val</name><index>[<expr><name>X_ATOM</name></expr>]</index></name> <operator>==</operator> <name>xval</name><operator>)</operator> <operator>||</operator>
<call><name>BPF_CLASS</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>code</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BPF_RET</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>stmts</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>stmts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt_state</name><operator>-&gt;</operator><name>done</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>opt_peep</name><argument_list>(<argument><expr><name>opt_state</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>opt_deadstores</name><argument_list>(<argument><expr><name>opt_state</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>



<if_stmt><if>if <condition>(<expr><call><name>BPF_SRC</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>code</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BPF_K</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>oval</name></name> <operator>=</operator> <call><name>K</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>oval</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>val</name><index>[<expr><name>X_ATOM</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>et</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>code</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>ef</name><operator>.</operator><name>code</name></name> <operator>=</operator> <operator>-</operator><name><name>b</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>code</name></name></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>int</name></type>
<name>use_conflict</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>succ</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>atom</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>atomset</name></type> <name>use</name> <init>= <expr><name><name>succ</name><operator>-&gt;</operator><name>out_use</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>use</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>atom</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>atom</name> <operator>&lt;</operator> <name>N_ATOMS</name></expr>;</condition> <incr><expr><operator>++</operator><name>atom</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><call><name>ATOMELEM</name><argument_list>(<argument><expr><name>use</name></expr></argument>, <argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>val</name><index>[<expr><name>atom</name></expr>]</index></name> <operator>!=</operator> <name><name>succ</name><operator>-&gt;</operator><name>val</name><index>[<expr><name>atom</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type>
<name>fold_edge</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>child</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>edge</name></name> <modifier>*</modifier></type><name>ep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>sense</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>aval0</name></decl>, <decl><type ref="prev"/><name>aval1</name></decl>, <decl><type ref="prev"/><name>oval0</name></decl>, <decl><type ref="prev"/><name>oval1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><name><name>ep</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>code</name> <operator>=</operator> <operator>-</operator><name>code</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sense</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>sense</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>child</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>code</name></name> <operator>!=</operator> <name>code</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>aval0</name> <operator>=</operator> <name><name>child</name><operator>-&gt;</operator><name>val</name><index>[<expr><name>A_ATOM</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>oval0</name> <operator>=</operator> <name><name>child</name><operator>-&gt;</operator><name>oval</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>aval1</name> <operator>=</operator> <name><name>ep</name><operator>-&gt;</operator><name>pred</name><operator>-&gt;</operator><name>val</name><index>[<expr><name>A_ATOM</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>oval1</name> <operator>=</operator> <name><name>ep</name><operator>-&gt;</operator><name>pred</name><operator>-&gt;</operator><name>oval</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>aval0</name> <operator>!=</operator> <name>aval1</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>oval0</name> <operator>==</operator> <name>oval1</name></expr>)</condition><block type="pseudo"><block_content>





<return>return <expr><ternary><condition><expr><name>sense</name></expr> ?</condition><then> <expr><call><name>JT</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>JF</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sense</name> <operator>&amp;&amp;</operator> <name>code</name> <operator>==</operator> <operator>(</operator><name>BPF_JMP</name><operator>|</operator><name>BPF_JEQ</name><operator>|</operator><name>BPF_K</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>














<return>return <expr><call><name>JF</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>opt_j</name><parameter_list>(<parameter><decl><type><name>opt_state_t</name> <modifier>*</modifier></type><name>opt_state</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>edge</name></name> <modifier>*</modifier></type><name>ep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>target</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>JT</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>succ</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>JT</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>succ</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>JF</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>succ</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>




<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>use_conflict</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>pred</name></name></expr></argument>, <argument><expr><name><name>ep</name><operator>-&gt;</operator><name>succ</name><operator>-&gt;</operator><name>et</name><operator>.</operator><name>succ</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>opt_state</name><operator>-&gt;</operator><name>done</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>succ</name></name> <operator>=</operator> <call><name>JT</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>succ</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>







<label><name>top</name>:</label>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>opt_state</name><operator>-&gt;</operator><name>edgewords</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name>bpf_u_int32</name></type> <name>x</name> <init>= <expr><name><name>ep</name><operator>-&gt;</operator><name>edom</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>x</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>lowest_set_bit</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>&amp;=</operator><operator>~</operator> <operator>(</operator><operator>(</operator><name>bpf_u_int32</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>k</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>+=</operator> <name>i</name> <operator>*</operator> <name>BITS_PER_WORD</name></expr>;</expr_stmt>

<expr_stmt><expr><name>target</name> <operator>=</operator> <call><name>fold_edge</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>succ</name></name></expr></argument>, <argument><expr><name><name>opt_state</name><operator>-&gt;</operator><name>edges</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name>target</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>use_conflict</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>pred</name></name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>opt_state</name><operator>-&gt;</operator><name>done</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>succ</name></name> <operator>=</operator> <name>target</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>JT</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>



<goto>goto <name>top</name>;</goto></block_content></block></if></if_stmt>
<return>return;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
</block_content>}</block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>or_pullup</name><parameter_list>(<parameter><decl><type><name>opt_state_t</name> <modifier>*</modifier></type><name>opt_state</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>, <decl><type ref="prev"/><name>at_top</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>pull</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>diffp</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>samep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>edge</name></name> <modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ep</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>in_edges</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ep</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>





<expr_stmt><expr><name>val</name> <operator>=</operator> <name><name>ep</name><operator>-&gt;</operator><name>pred</name><operator>-&gt;</operator><name>val</name><index>[<expr><name>A_ATOM</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>ep</name> <operator>=</operator> <name><name>ep</name><operator>-&gt;</operator><name>next</name></name></expr>;</init> <condition><expr><name>ep</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>ep</name> <operator>=</operator> <name><name>ep</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>!=</operator> <name><name>ep</name><operator>-&gt;</operator><name>pred</name><operator>-&gt;</operator><name>val</name><index>[<expr><name>A_ATOM</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><call><name>JT</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>in_edges</name><operator>-&gt;</operator><name>pred</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>b</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>diffp</name> <operator>=</operator> <operator>&amp;</operator><call><name>JT</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>in_edges</name><operator>-&gt;</operator><name>pred</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>diffp</name> <operator>=</operator> <operator>&amp;</operator><call><name>JF</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>in_edges</name><operator>-&gt;</operator><name>pred</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>at_top</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>diffp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>JT</name><argument_list>(<argument><expr><operator>*</operator><name>diffp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>JT</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SET_MEMBER</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>diffp</name><operator>)</operator><operator>-&gt;</operator><name>dom</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>diffp</name><operator>)</operator><operator>-&gt;</operator><name>val</name></name><index>[<expr><name>A_ATOM</name></expr>]</index> <operator>!=</operator> <name>val</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>diffp</name> <operator>=</operator> <operator>&amp;</operator><call><name>JF</name><argument_list>(<argument><expr><operator>*</operator><name>diffp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>at_top</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>samep</name> <operator>=</operator> <operator>&amp;</operator><call><name>JF</name><argument_list>(<argument><expr><operator>*</operator><name>diffp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>samep</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>JT</name><argument_list>(<argument><expr><operator>*</operator><name>samep</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>JT</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SET_MEMBER</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>samep</name><operator>)</operator><operator>-&gt;</operator><name>dom</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>samep</name><operator>)</operator><operator>-&gt;</operator><name>val</name></name><index>[<expr><name>A_ATOM</name></expr>]</index> <operator>==</operator> <name>val</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>




<expr_stmt><expr><name>samep</name> <operator>=</operator> <operator>&amp;</operator><call><name>JF</name><argument_list>(<argument><expr><operator>*</operator><name>samep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>notdef</name></expr></argument>)</argument_list></call></expr></cpp:if>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N_ATOMS</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>samep</name><operator>)</operator><operator>-&gt;</operator><name>val</name></name><index>[<expr><name>i</name></expr>]</index> <operator>!=</operator> <name><name>pred</name><operator>-&gt;</operator><name>val</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt></block_content></block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>pull</name> <operator>=</operator> <operator>*</operator><name>samep</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>samep</name> <operator>=</operator> <call><name>JF</name><argument_list>(<argument><expr><name>pull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>JF</name><argument_list>(<argument><expr><name>pull</name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>*</operator><name>diffp</name></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><name>at_top</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>ep</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>in_edges</name></name></expr>;</init> <condition><expr><name>ep</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>ep</name> <operator>=</operator> <name><name>ep</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>JT</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>pred</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>b</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>JT</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>pred</name></name></expr></argument>)</argument_list></call> <operator>=</operator> <name>pull</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>JF</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>pred</name></name></expr></argument>)</argument_list></call> <operator>=</operator> <name>pull</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>diffp</name> <operator>=</operator> <name>pull</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>opt_state</name><operator>-&gt;</operator><name>done</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>and_pullup</name><parameter_list>(<parameter><decl><type><name>opt_state_t</name> <modifier>*</modifier></type><name>opt_state</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>, <decl><type ref="prev"/><name>at_top</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>pull</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>diffp</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>samep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>edge</name></name> <modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ep</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>in_edges</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ep</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><name>val</name> <operator>=</operator> <name><name>ep</name><operator>-&gt;</operator><name>pred</name><operator>-&gt;</operator><name>val</name><index>[<expr><name>A_ATOM</name></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>ep</name> <operator>=</operator> <name><name>ep</name><operator>-&gt;</operator><name>next</name></name></expr>;</init> <condition><expr><name>ep</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>ep</name> <operator>=</operator> <name><name>ep</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name>val</name> <operator>!=</operator> <name><name>ep</name><operator>-&gt;</operator><name>pred</name><operator>-&gt;</operator><name>val</name><index>[<expr><name>A_ATOM</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><call><name>JT</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>in_edges</name><operator>-&gt;</operator><name>pred</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>b</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>diffp</name> <operator>=</operator> <operator>&amp;</operator><call><name>JT</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>in_edges</name><operator>-&gt;</operator><name>pred</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>diffp</name> <operator>=</operator> <operator>&amp;</operator><call><name>JF</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>in_edges</name><operator>-&gt;</operator><name>pred</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>at_top</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>diffp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>JF</name><argument_list>(<argument><expr><operator>*</operator><name>diffp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>JF</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SET_MEMBER</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>diffp</name><operator>)</operator><operator>-&gt;</operator><name>dom</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>diffp</name><operator>)</operator><operator>-&gt;</operator><name>val</name></name><index>[<expr><name>A_ATOM</name></expr>]</index> <operator>!=</operator> <name>val</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>diffp</name> <operator>=</operator> <operator>&amp;</operator><call><name>JT</name><argument_list>(<argument><expr><operator>*</operator><name>diffp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>at_top</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>samep</name> <operator>=</operator> <operator>&amp;</operator><call><name>JT</name><argument_list>(<argument><expr><operator>*</operator><name>diffp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>samep</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>JF</name><argument_list>(<argument><expr><operator>*</operator><name>samep</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>JF</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SET_MEMBER</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>samep</name><operator>)</operator><operator>-&gt;</operator><name>dom</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>samep</name><operator>)</operator><operator>-&gt;</operator><name>val</name></name><index>[<expr><name>A_ATOM</name></expr>]</index> <operator>==</operator> <name>val</name></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>




<expr_stmt><expr><name>samep</name> <operator>=</operator> <operator>&amp;</operator><call><name>JT</name><argument_list>(<argument><expr><operator>*</operator><name>samep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>notdef</name></expr></argument>)</argument_list></call></expr></cpp:if>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N_ATOMS</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>samep</name><operator>)</operator><operator>-&gt;</operator><name>val</name></name><index>[<expr><name>i</name></expr>]</index> <operator>!=</operator> <name><name>pred</name><operator>-&gt;</operator><name>val</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt></block_content></block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>pull</name> <operator>=</operator> <operator>*</operator><name>samep</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>samep</name> <operator>=</operator> <call><name>JT</name><argument_list>(<argument><expr><name>pull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>JT</name><argument_list>(<argument><expr><name>pull</name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>*</operator><name>diffp</name></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><name>at_top</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>ep</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>in_edges</name></name></expr>;</init> <condition><expr><name>ep</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>ep</name> <operator>=</operator> <name><name>ep</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>JT</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>pred</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>b</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>JT</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>pred</name></name></expr></argument>)</argument_list></call> <operator>=</operator> <name>pull</name></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>JF</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>pred</name></name></expr></argument>)</argument_list></call> <operator>=</operator> <name>pull</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>diffp</name> <operator>=</operator> <name>pull</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>opt_state</name><operator>-&gt;</operator><name>done</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>opt_blks</name><parameter_list>(<parameter><decl><type><name>opt_state_t</name> <modifier>*</modifier></type><name>opt_state</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>icode</name></name> <modifier>*</modifier></type><name>ic</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>do_stmts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>maxlevel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_val</name><argument_list>(<argument><expr><name>opt_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>maxlevel</name> <operator>=</operator> <name><name>ic</name><operator>-&gt;</operator><name>root</name><operator>-&gt;</operator><name>level</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>find_inedges</name><argument_list>(<argument><expr><name>opt_state</name></expr></argument>, <argument><expr><name><name>ic</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>maxlevel</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>opt_state</name><operator>-&gt;</operator><name>levels</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>link</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>opt_blk</name><argument_list>(<argument><expr><name>opt_state</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>do_stmts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>do_stmts</name></expr>)</condition><block type="pseudo"><block_content>




<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>maxlevel</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>opt_state</name><operator>-&gt;</operator><name>levels</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>link</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>opt_j</name><argument_list>(<argument><expr><name>opt_state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>et</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>opt_j</name><argument_list>(<argument><expr><name>opt_state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>ef</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<expr_stmt><expr><call><name>find_inedges</name><argument_list>(<argument><expr><name>opt_state</name></expr></argument>, <argument><expr><name><name>ic</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>maxlevel</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>opt_state</name><operator>-&gt;</operator><name>levels</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>link</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>or_pullup</name><argument_list>(<argument><expr><name>opt_state</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>and_pullup</name><argument_list>(<argument><expr><name>opt_state</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>link_inedge</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>edge</name></name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>child</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>child</name><operator>-&gt;</operator><name>in_edges</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child</name><operator>-&gt;</operator><name>in_edges</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>find_inedges</name><parameter_list>(<parameter><decl><type><name>opt_state_t</name> <modifier>*</modifier></type><name>opt_state</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>root</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>opt_state</name><operator>-&gt;</operator><name>n_blocks</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>opt_state</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>in_edges</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>





<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>root</name><operator>-&gt;</operator><name>level</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>b</name> <operator>=</operator> <name><name>opt_state</name><operator>-&gt;</operator><name>levels</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><name>b</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>b</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>link</name></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>link_inedge</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>et</name></name></expr></argument>, <argument><expr><call><name>JT</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>link_inedge</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>ef</name></name></expr></argument>, <argument><expr><call><name>JF</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>opt_root</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>slist</name></name> <modifier>*</modifier></type><name>tmp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>b</name><operator>)</operator><operator>-&gt;</operator><name>stmts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>b</name><operator>)</operator><operator>-&gt;</operator><name>stmts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>BPF_CLASS</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>b</name><operator>)</operator><operator>-&gt;</operator><name><name>s</name><operator>.</operator><name>code</name></name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BPF_JMP</name> <operator>&amp;&amp;</operator> <call><name>JT</name><argument_list>(<argument><expr><operator>*</operator><name>b</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>JF</name><argument_list>(<argument><expr><operator>*</operator><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>*</operator><name>b</name> <operator>=</operator> <call><name>JT</name><argument_list>(<argument><expr><operator>*</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>b</name><operator>)</operator><operator>-&gt;</operator><name>stmts</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>sappend</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>b</name><operator>)</operator><operator>-&gt;</operator><name>stmts</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><call><name>BPF_CLASS</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>b</name><operator>)</operator><operator>-&gt;</operator><name><name>s</name><operator>.</operator><name>code</name></name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>BPF_RET</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>b</name><operator>)</operator><operator>-&gt;</operator><name>stmts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>opt_loop</name><parameter_list>(<parameter><decl><type><name>opt_state_t</name> <modifier>*</modifier></type><name>opt_state</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>icode</name></name> <modifier>*</modifier></type><name>ic</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>do_stmts</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>pcap_optimizer_debug</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>pcap_print_dot_graph</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"opt_loop(root, %d) begin\n"</literal></expr></argument>, <argument><expr><name>do_stmts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>opt_dump</name><argument_list>(<argument><expr><name>opt_state</name></expr></argument>, <argument><expr><name>ic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<do>do <block>{<block_content>
<expr_stmt><expr><name><name>opt_state</name><operator>-&gt;</operator><name>done</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>find_levels</name><argument_list>(<argument><expr><name>opt_state</name></expr></argument>, <argument><expr><name>ic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>find_dom</name><argument_list>(<argument><expr><name>opt_state</name></expr></argument>, <argument><expr><name><name>ic</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>find_closure</name><argument_list>(<argument><expr><name>opt_state</name></expr></argument>, <argument><expr><name><name>ic</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>find_ud</name><argument_list>(<argument><expr><name>opt_state</name></expr></argument>, <argument><expr><name><name>ic</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>find_edom</name><argument_list>(<argument><expr><name>opt_state</name></expr></argument>, <argument><expr><name><name>ic</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>opt_blks</name><argument_list>(<argument><expr><name>opt_state</name></expr></argument>, <argument><expr><name>ic</name></expr></argument>, <argument><expr><name>do_stmts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>pcap_optimizer_debug</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>pcap_print_dot_graph</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"opt_loop(root, %d) bottom, done=%d\n"</literal></expr></argument>, <argument><expr><name>do_stmts</name></expr></argument>, <argument><expr><name><name>opt_state</name><operator>-&gt;</operator><name>done</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>opt_dump</name><argument_list>(<argument><expr><name>opt_state</name></expr></argument>, <argument><expr><name>ic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block> while <condition>(<expr><operator>!</operator><name><name>opt_state</name><operator>-&gt;</operator><name>done</name></name></expr>)</condition>;</do>
</block_content>}</block></function>





<function><type><name>int</name></type>
<name>bpf_optimize</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>icode</name></name> <modifier>*</modifier></type><name>ic</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>opt_state_t</name></type> <name>opt_state</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opt_state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>opt_state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt_state</name><operator>.</operator><name>errbuf</name></name> <operator>=</operator> <name>errbuf</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>setjmp</name><argument_list>(<argument><expr><name><name>opt_state</name><operator>.</operator><name>top_ctx</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>opt_cleanup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opt_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>opt_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opt_state</name></expr></argument>, <argument><expr><name>ic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>opt_loop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opt_state</name></expr></argument>, <argument><expr><name>ic</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>opt_loop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opt_state</name></expr></argument>, <argument><expr><name>ic</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>intern_blocks</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opt_state</name></expr></argument>, <argument><expr><name>ic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>pcap_optimizer_debug</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>pcap_print_dot_graph</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"after intern_blocks()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>opt_dump</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opt_state</name></expr></argument>, <argument><expr><name>ic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>opt_root</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ic</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>pcap_optimizer_debug</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>pcap_print_dot_graph</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"after opt_root()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>opt_dump</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opt_state</name></expr></argument>, <argument><expr><name>ic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>opt_cleanup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opt_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>make_marks</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>icode</name></name> <modifier>*</modifier></type><name>ic</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isMarked</name><argument_list>(<argument><expr><name>ic</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>Mark</name><argument_list>(<argument><expr><name>ic</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>BPF_CLASS</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>code</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>BPF_RET</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>make_marks</name><argument_list>(<argument><expr><name>ic</name></expr></argument>, <argument><expr><call><name>JT</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>make_marks</name><argument_list>(<argument><expr><name>ic</name></expr></argument>, <argument><expr><call><name>JF</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>mark_code</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>icode</name></name> <modifier>*</modifier></type><name>ic</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>ic</name><operator>-&gt;</operator><name>cur_mark</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>make_marks</name><argument_list>(<argument><expr><name>ic</name></expr></argument>, <argument><expr><name><name>ic</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>eq_slist</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>slist</name></name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>slist</name></name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<while>while <condition>(<expr><name>x</name> <operator>&amp;&amp;</operator> <name><name>x</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>code</name></name> <operator>==</operator> <name>NOP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>
<while>while <condition>(<expr><name>y</name> <operator>&amp;&amp;</operator> <name><name>y</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>code</name></name> <operator>==</operator> <name>NOP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>y</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>y</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>x</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>code</name></name> <operator>!=</operator> <name><name>y</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>code</name></name> <operator>||</operator> <name><name>x</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>k</name></name> <operator>!=</operator> <name><name>y</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>k</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>y</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>eq_blk</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>b0</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>b1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>b0</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>code</name></name> <operator>==</operator> <name><name>b1</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>code</name></name> <operator>&amp;&amp;</operator>
<name><name>b0</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>k</name></name> <operator>==</operator> <name><name>b1</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>k</name></name> <operator>&amp;&amp;</operator>
<name><name>b0</name><operator>-&gt;</operator><name>et</name><operator>.</operator><name>succ</name></name> <operator>==</operator> <name><name>b1</name><operator>-&gt;</operator><name>et</name><operator>.</operator><name>succ</name></name> <operator>&amp;&amp;</operator>
<name><name>b0</name><operator>-&gt;</operator><name>ef</name><operator>.</operator><name>succ</name></name> <operator>==</operator> <name><name>b1</name><operator>-&gt;</operator><name>ef</name><operator>.</operator><name>succ</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><call><name>eq_slist</name><argument_list>(<argument><expr><name><name>b0</name><operator>-&gt;</operator><name>stmts</name></name></expr></argument>, <argument><expr><name><name>b1</name><operator>-&gt;</operator><name>stmts</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>intern_blocks</name><parameter_list>(<parameter><decl><type><name>opt_state_t</name> <modifier>*</modifier></type><name>opt_state</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>icode</name></name> <modifier>*</modifier></type><name>ic</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>done1</name></decl>;</decl_stmt>
<label><name>top</name>:</label>
<expr_stmt><expr><name>done1</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>opt_state</name><operator>-&gt;</operator><name>n_blocks</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>opt_state</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>link</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>mark_code</name><argument_list>(<argument><expr><name>ic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>opt_state</name><operator>-&gt;</operator><name>n_blocks</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><operator>--</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr/>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isMarked</name><argument_list>(<argument><expr><name>ic</name></expr></argument>, <argument><expr><name><name>opt_state</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>opt_state</name><operator>-&gt;</operator><name>n_blocks</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isMarked</name><argument_list>(<argument><expr><name>ic</name></expr></argument>, <argument><expr><name><name>opt_state</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>eq_blk</name><argument_list>(<argument><expr><name><name>opt_state</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>opt_state</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>opt_state</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>link</name> <operator>=</operator> <ternary><condition><expr><name><name>opt_state</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>link</name></expr> ?</condition><then>
<expr><name><name>opt_state</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>link</name></expr> </then><else>: <expr><name><name>opt_state</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>j</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>opt_state</name><operator>-&gt;</operator><name>n_blocks</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>opt_state</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>JT</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>JT</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>link</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>done1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>JT</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>JT</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>link</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>JF</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>link</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>done1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>JF</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>JF</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>link</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>done1</name></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>top</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>opt_cleanup</name><parameter_list>(<parameter><decl><type><name>opt_state_t</name> <modifier>*</modifier></type><name>opt_state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>opt_state</name><operator>-&gt;</operator><name>vnode_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>opt_state</name><operator>-&gt;</operator><name>vmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>opt_state</name><operator>-&gt;</operator><name>edges</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>opt_state</name><operator>-&gt;</operator><name>space</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>opt_state</name><operator>-&gt;</operator><name>levels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>opt_state</name><operator>-&gt;</operator><name>blocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name> <name>PCAP_NORETURN</name></type>
<name>opt_error</name><parameter_list>(<parameter><decl><type><name>opt_state_t</name> <modifier>*</modifier></type><name>opt_state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt_state</name><operator>-&gt;</operator><name>errbuf</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>pcap_vsnprintf</name><argument_list>(<argument><expr><name><name>opt_state</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><name><name>opt_state</name><operator>-&gt;</operator><name>top_ctx</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>u_int</name></type>
<name>slength</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>slist</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>s</name></expr>;</condition> <incr><expr><name>s</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>code</name></name> <operator>!=</operator> <name>NOP</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type>
<name>count_blocks</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>icode</name></name> <modifier>*</modifier></type><name>ic</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>isMarked</name><argument_list>(<argument><expr><name>ic</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>Mark</name><argument_list>(<argument><expr><name>ic</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>count_blocks</name><argument_list>(<argument><expr><name>ic</name></expr></argument>, <argument><expr><call><name>JT</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>count_blocks</name><argument_list>(<argument><expr><name>ic</name></expr></argument>, <argument><expr><call><name>JF</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>void</name></type>
<name>number_blks_r</name><parameter_list>(<parameter><decl><type><name>opt_state_t</name> <modifier>*</modifier></type><name>opt_state</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>icode</name></name> <modifier>*</modifier></type><name>ic</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>isMarked</name><argument_list>(<argument><expr><name>ic</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>Mark</name><argument_list>(<argument><expr><name>ic</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>opt_state</name><operator>-&gt;</operator><name>n_blocks</name></name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt_state</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>number_blks_r</name><argument_list>(<argument><expr><name>opt_state</name></expr></argument>, <argument><expr><name>ic</name></expr></argument>, <argument><expr><call><name>JT</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>number_blks_r</name><argument_list>(<argument><expr><name>opt_state</name></expr></argument>, <argument><expr><name>ic</name></expr></argument>, <argument><expr><call><name>JF</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



















<function><type><specifier>static</specifier> <name>u_int</name></type>
<name>count_stmts</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>icode</name></name> <modifier>*</modifier></type><name>ic</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_int</name></type> <name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>isMarked</name><argument_list>(<argument><expr><name>ic</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>Mark</name><argument_list>(<argument><expr><name>ic</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>count_stmts</name><argument_list>(<argument><expr><name>ic</name></expr></argument>, <argument><expr><call><name>JT</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>count_stmts</name><argument_list>(<argument><expr><name>ic</name></expr></argument>, <argument><expr><call><name>JF</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>slength</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>stmts</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>longjt</name></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>longjf</name></name></expr>;</return>
</block_content>}</block></function>






<function><type><specifier>static</specifier> <name>void</name></type>
<name>opt_init</name><parameter_list>(<parameter><decl><type><name>opt_state_t</name> <modifier>*</modifier></type><name>opt_state</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>icode</name></name> <modifier>*</modifier></type><name>ic</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>bpf_u_int32</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>max_stmts</name></decl>;</decl_stmt>





<expr_stmt><expr><call><name>unMarkAll</name><argument_list>(<argument><expr><name>ic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>count_blocks</name><argument_list>(<argument><expr><name>ic</name></expr></argument>, <argument><expr><name><name>ic</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt_state</name><operator>-&gt;</operator><name>blocks</name></name> <operator>=</operator> <operator>(</operator>struct <name>block</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>calloc</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>opt_state</name><operator>-&gt;</operator><name>blocks</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opt_state</name><operator>-&gt;</operator><name>blocks</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>opt_error</name><argument_list>(<argument><expr><name>opt_state</name></expr></argument>, <argument><expr><literal type="string">"malloc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>unMarkAll</name><argument_list>(<argument><expr><name>ic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt_state</name><operator>-&gt;</operator><name>n_blocks</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>number_blks_r</name><argument_list>(<argument><expr><name>opt_state</name></expr></argument>, <argument><expr><name>ic</name></expr></argument>, <argument><expr><name><name>ic</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opt_state</name><operator>-&gt;</operator><name>n_edges</name></name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>opt_state</name><operator>-&gt;</operator><name>n_blocks</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt_state</name><operator>-&gt;</operator><name>edges</name></name> <operator>=</operator> <operator>(</operator>struct <name>edge</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>calloc</name><argument_list>(<argument><expr><name><name>opt_state</name><operator>-&gt;</operator><name>n_edges</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>opt_state</name><operator>-&gt;</operator><name>edges</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opt_state</name><operator>-&gt;</operator><name>edges</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>opt_error</name><argument_list>(<argument><expr><name>opt_state</name></expr></argument>, <argument><expr><literal type="string">"malloc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name><name>opt_state</name><operator>-&gt;</operator><name>levels</name></name> <operator>=</operator> <operator>(</operator>struct <name>block</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>calloc</name><argument_list>(<argument><expr><name><name>opt_state</name><operator>-&gt;</operator><name>n_blocks</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>opt_state</name><operator>-&gt;</operator><name>levels</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opt_state</name><operator>-&gt;</operator><name>levels</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>opt_error</name><argument_list>(<argument><expr><name>opt_state</name></expr></argument>, <argument><expr><literal type="string">"malloc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>opt_state</name><operator>-&gt;</operator><name>edgewords</name></name> <operator>=</operator> <name><name>opt_state</name><operator>-&gt;</operator><name>n_edges</name></name> <operator>/</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bpf_u_int32</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt_state</name><operator>-&gt;</operator><name>nodewords</name></name> <operator>=</operator> <name><name>opt_state</name><operator>-&gt;</operator><name>n_blocks</name></name> <operator>/</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bpf_u_int32</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>opt_state</name><operator>-&gt;</operator><name>space</name></name> <operator>=</operator> <operator>(</operator><name>bpf_u_int32</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name><name>opt_state</name><operator>-&gt;</operator><name>n_blocks</name></name> <operator>*</operator> <name><name>opt_state</name><operator>-&gt;</operator><name>nodewords</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>opt_state</name><operator>-&gt;</operator><name>space</name></name></expr></argument>)</argument_list></sizeof>
<operator>+</operator> <name><name>opt_state</name><operator>-&gt;</operator><name>n_edges</name></name> <operator>*</operator> <name><name>opt_state</name><operator>-&gt;</operator><name>edgewords</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>opt_state</name><operator>-&gt;</operator><name>space</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opt_state</name><operator>-&gt;</operator><name>space</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>opt_error</name><argument_list>(<argument><expr><name>opt_state</name></expr></argument>, <argument><expr><literal type="string">"malloc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>opt_state</name><operator>-&gt;</operator><name>space</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt_state</name><operator>-&gt;</operator><name>all_dom_sets</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>opt_state</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>dom</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>opt_state</name><operator>-&gt;</operator><name>nodewords</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>opt_state</name><operator>-&gt;</operator><name>all_closure_sets</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>opt_state</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>closure</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>opt_state</name><operator>-&gt;</operator><name>nodewords</name></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>opt_state</name><operator>-&gt;</operator><name>all_edge_sets</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><specifier>register</specifier> <name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>b</name> <init>= <expr><name><name>opt_state</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>et</name><operator>.</operator><name>edom</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>opt_state</name><operator>-&gt;</operator><name>edgewords</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>ef</name><operator>.</operator><name>edom</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>opt_state</name><operator>-&gt;</operator><name>edgewords</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>et</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt_state</name><operator>-&gt;</operator><name>edges</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>et</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>ef</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name><name>opt_state</name><operator>-&gt;</operator><name>n_blocks</name></name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt_state</name><operator>-&gt;</operator><name>edges</name><index>[<expr><name><name>opt_state</name><operator>-&gt;</operator><name>n_blocks</name></name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>ef</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>et</name><operator>.</operator><name>pred</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>ef</name><operator>.</operator><name>pred</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>max_stmts</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><name>max_stmts</name> <operator>+=</operator> <call><name>slength</name><argument_list>(<argument><expr><name><name>opt_state</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>stmts</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>





<expr_stmt><expr><name><name>opt_state</name><operator>-&gt;</operator><name>maxval</name></name> <operator>=</operator> <literal type="number">3</literal> <operator>*</operator> <name>max_stmts</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt_state</name><operator>-&gt;</operator><name>vmap</name></name> <operator>=</operator> <operator>(</operator>struct <name>vmapinfo</name> <operator>*</operator><operator>)</operator><call><name>calloc</name><argument_list>(<argument><expr><name><name>opt_state</name><operator>-&gt;</operator><name>maxval</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>opt_state</name><operator>-&gt;</operator><name>vmap</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opt_state</name><operator>-&gt;</operator><name>vmap</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>opt_error</name><argument_list>(<argument><expr><name>opt_state</name></expr></argument>, <argument><expr><literal type="string">"malloc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>opt_state</name><operator>-&gt;</operator><name>vnode_base</name></name> <operator>=</operator> <operator>(</operator>struct <name>valnode</name> <operator>*</operator><operator>)</operator><call><name>calloc</name><argument_list>(<argument><expr><name><name>opt_state</name><operator>-&gt;</operator><name>maxval</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>opt_state</name><operator>-&gt;</operator><name>vnode_base</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>opt_state</name><operator>-&gt;</operator><name>vnode_base</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>opt_error</name><argument_list>(<argument><expr><name>opt_state</name></expr></argument>, <argument><expr><literal type="string">"malloc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name><name>bids</name><index>[<expr><name>NBIDS</name></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name> <name>PCAP_NORETURN</name></type> <name>conv_error</name><parameter_list>(<parameter><decl><type><name>conv_state_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
PCAP_PRINTFLIKE<parameter_list>(</parameter_list>2<operator>,</operator> 3</function_decl>)<empty_stmt>;</empty_stmt>







<function><type><specifier>static</specifier> <name>int</name></type>
<name>convert_code_r</name><parameter_list>(<parameter><decl><type><name>conv_state_t</name> <modifier>*</modifier></type><name>conv_state</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>icode</name></name> <modifier>*</modifier></type><name>ic</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bpf_insn</name></name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>slist</name></name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>slen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>off</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>extrajmps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>slist</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>offset</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>isMarked</name><argument_list>(<argument><expr><name>ic</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>Mark</name><argument_list>(<argument><expr><name>ic</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>convert_code_r</name><argument_list>(<argument><expr><name>conv_state</name></expr></argument>, <argument><expr><name>ic</name></expr></argument>, <argument><expr><call><name>JF</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>convert_code_r</name><argument_list>(<argument><expr><name>conv_state</name></expr></argument>, <argument><expr><name>ic</name></expr></argument>, <argument><expr><call><name>JT</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>slen</name> <operator>=</operator> <call><name>slength</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>stmts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>conv_state</name><operator>-&gt;</operator><name>ftail</name></name> <operator>-=</operator> <operator>(</operator><name>slen</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>longjt</name></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>longjf</name></name><operator>)</operator></expr>;</expr_stmt>


<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>dst</name> <operator>-</operator> <name><name>conv_state</name><operator>-&gt;</operator><name>fstart</name></name><operator>)</operator></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>slen</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator>struct <name>slist</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>calloc</name><argument_list>(<argument><expr><name>slen</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>slist</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>offset</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>conv_error</name><argument_list>(<argument><expr><name>conv_state</name></expr></argument>, <argument><expr><literal type="string">"not enough core"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>src</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>stmts</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>off</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>off</name> <operator>&lt;</operator> <name>slen</name> <operator>&amp;&amp;</operator> <name>src</name></expr>;</condition> <incr><expr><name>off</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
printf("off=%d src=%x\n", off, src);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>offset</name><index>[<expr><name>off</name></expr>]</index></name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>
<expr_stmt><expr><name>src</name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>off</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>src</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>stmts</name></name></expr>;</init> <condition><expr><name>src</name></expr>;</condition> <incr><expr><name>src</name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>code</name></name> <operator>==</operator> <name>NOP</name></expr>)</condition><block type="pseudo"><block_content>
<continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <operator>(</operator><name>u_short</name><operator>)</operator><name><name>src</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>code</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>k</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>k</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>BPF_CLASS</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>code</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>BPF_JMP</name> <operator>||</operator> <name><name>src</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>code</name></name> <operator>==</operator> <operator>(</operator><name>BPF_JMP</name><operator>|</operator><name>BPF_JA</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
if (src-&gt;s.jt || src-&gt;s.jf) {
free(offset);
conv_error(conv_state, "illegal jmp destination");

}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<goto>goto <name>filled</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>off</name> <operator>==</operator> <name>slen</name> <operator>-</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>filled</name>;</goto></block_content></block></if></if_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>u_int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>jt</name></decl>, <decl><type ref="prev"/><name>jf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>ljerr</name><index>[]</index></name> <init>= <expr><literal type="string">"%s for block-local relative jump: off=%d"</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
printf("code=%x off=%d %x %x\n", src-&gt;s.code,
off, src-&gt;s.jt, src-&gt;s.jf);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>src</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>jt</name></name> <operator>||</operator> <operator>!</operator><name><name>src</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>jf</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>conv_error</name><argument_list>(<argument><expr><name>conv_state</name></expr></argument>, <argument><expr><name>ljerr</name></expr></argument>, <argument><expr><literal type="string">"no jmp destination"</literal></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>jt</name> <operator>=</operator> <name>jf</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>slen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>offset</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>src</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>jt</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>jt</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>conv_error</name><argument_list>(<argument><expr><name>conv_state</name></expr></argument>, <argument><expr><name>ljerr</name></expr></argument>, <argument><expr><literal type="string">"multiple matches"</literal></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>-</operator> <name>off</name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <literal type="number">256</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>conv_error</name><argument_list>(<argument><expr><name>conv_state</name></expr></argument>, <argument><expr><name>ljerr</name></expr></argument>, <argument><expr><literal type="string">"out-of-range jump"</literal></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>jt</name></name> <operator>=</operator> <operator>(</operator><name>u_char</name><operator>)</operator><operator>(</operator><name>i</name> <operator>-</operator> <name>off</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>jt</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>offset</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>src</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>jf</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>jf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>conv_error</name><argument_list>(<argument><expr><name>conv_state</name></expr></argument>, <argument><expr><name>ljerr</name></expr></argument>, <argument><expr><literal type="string">"multiple matches"</literal></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>i</name> <operator>-</operator> <name>off</name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <literal type="number">256</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>conv_error</name><argument_list>(<argument><expr><name>conv_state</name></expr></argument>, <argument><expr><name>ljerr</name></expr></argument>, <argument><expr><literal type="string">"out-of-range jump"</literal></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>jf</name></name> <operator>=</operator> <operator>(</operator><name>u_char</name><operator>)</operator><operator>(</operator><name>i</name> <operator>-</operator> <name>off</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>jf</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name>jt</name> <operator>||</operator> <operator>!</operator><name>jf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>conv_error</name><argument_list>(<argument><expr><name>conv_state</name></expr></argument>, <argument><expr><name>ljerr</name></expr></argument>, <argument><expr><literal type="string">"no destination found"</literal></expr></argument>, <argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>
</block_content>}</block>
<label><name>filled</name>:</label>
<expr_stmt><expr><operator>++</operator><name>dst</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>off</name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>offset</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>-</operator> <name><name>conv_state</name><operator>-&gt;</operator><name>fstart</name></name> <operator>&lt;</operator> <name>NBIDS</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name><name>bids</name><index>[<expr><name>dst</name> <operator>-</operator> <name><name>conv_state</name><operator>-&gt;</operator><name>fstart</name></name></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>id</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <operator>(</operator><name>u_short</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>code</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>k</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>k</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>JT</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>extrajmps</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>off</name> <operator>=</operator> <call><name>JT</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>offset</name> <operator>-</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name>slen</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>off</name> <operator>&gt;=</operator> <literal type="number">256</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>longjt</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>longjt</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>extrajmps</name> <operator>&gt;=</operator> <literal type="number">256</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>conv_error</name><argument_list>(<argument><expr><name>conv_state</name></expr></argument>, <argument><expr><literal type="string">"too many extra jumps"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>jt</name></name> <operator>=</operator> <operator>(</operator><name>u_char</name><operator>)</operator><name>extrajmps</name></expr>;</expr_stmt>
<expr_stmt><expr><name>extrajmps</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>extrajmps</name></expr>]</index></name><operator>.</operator><name>code</name> <operator>=</operator> <name>BPF_JMP</name><operator>|</operator><name>BPF_JA</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>extrajmps</name></expr>]</index></name><operator>.</operator><name>k</name> <operator>=</operator> <name>off</name> <operator>-</operator> <name>extrajmps</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>jt</name></name> <operator>=</operator> <operator>(</operator><name>u_char</name><operator>)</operator><name>off</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>off</name> <operator>=</operator> <call><name>JF</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>offset</name> <operator>-</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name>slen</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>off</name> <operator>&gt;=</operator> <literal type="number">256</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>longjf</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>longjf</name></name><operator>++</operator></expr>;</expr_stmt>
<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>extrajmps</name> <operator>&gt;=</operator> <literal type="number">256</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>conv_error</name><argument_list>(<argument><expr><name>conv_state</name></expr></argument>, <argument><expr><literal type="string">"too many extra jumps"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>jf</name></name> <operator>=</operator> <operator>(</operator><name>u_char</name><operator>)</operator><name>extrajmps</name></expr>;</expr_stmt>
<expr_stmt><expr><name>extrajmps</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>extrajmps</name></expr>]</index></name><operator>.</operator><name>code</name> <operator>=</operator> <name>BPF_JMP</name><operator>|</operator><name>BPF_JA</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name><index>[<expr><name>extrajmps</name></expr>]</index></name><operator>.</operator><name>k</name> <operator>=</operator> <name>off</name> <operator>-</operator> <name>extrajmps</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>jf</name></name> <operator>=</operator> <operator>(</operator><name>u_char</name><operator>)</operator><name>off</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>




















<function><type><name><name>struct</name> <name>bpf_insn</name></name> <modifier>*</modifier></type>
<name>icode_to_fcode</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>icode</name></name> <modifier>*</modifier></type><name>ic</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>u_int</name> <modifier>*</modifier></type><name>lenp</name></decl></parameter>,
<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>bpf_insn</name></name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>conv_state_t</name></type> <name>conv_state</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>conv_state</name><operator>.</operator><name>fstart</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conv_state</name><operator>.</operator><name>errbuf</name></name> <operator>=</operator> <name>errbuf</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>setjmp</name><argument_list>(<argument><expr><name><name>conv_state</name><operator>.</operator><name>top_ctx</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>conv_state</name><operator>.</operator><name>fstart</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>





<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>unMarkAll</name><argument_list>(<argument><expr><name>ic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>*</operator><name>lenp</name> <operator>=</operator> <call><name>count_stmts</name><argument_list>(<argument><expr><name>ic</name></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <operator>(</operator>struct <name>bpf_insn</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>fp</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>,
<argument><expr><literal type="string">"malloc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>fp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>fp</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conv_state</name><operator>.</operator><name>fstart</name></name> <operator>=</operator> <name>fp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conv_state</name><operator>.</operator><name>ftail</name></name> <operator>=</operator> <name>fp</name> <operator>+</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unMarkAll</name><argument_list>(<argument><expr><name>ic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>convert_code_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conv_state</name></expr></argument>, <argument><expr><name>ic</name></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>fp</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>void</name> <name>PCAP_NORETURN</name></type>
<name>conv_error</name><parameter_list>(<parameter><decl><type><name>conv_state_t</name> <modifier>*</modifier></type><name>conv_state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>pcap_vsnprintf</name><argument_list>(<argument><expr><name><name>conv_state</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>,
<argument><expr><name>PCAP_ERRBUF_SIZE</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><name><name>conv_state</name><operator>-&gt;</operator><name>top_ctx</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>









<function><type><name>int</name></type>
<name>install_bpf_program</name><parameter_list>(<parameter><decl><type><name>pcap_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>bpf_program</name></name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>prog_size</name></decl>;</decl_stmt>




<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bpf_validate</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>bf_insns</name></name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>bf_len</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_snprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"BPF program is not valid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><call><name>pcap_freecode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>fcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prog_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>fp</name><operator>-&gt;</operator><name>bf_insns</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>fp</name><operator>-&gt;</operator><name>bf_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>fcode</name><operator>.</operator><name>bf_len</name></name> <operator>=</operator> <name><name>fp</name><operator>-&gt;</operator><name>bf_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>fcode</name><operator>.</operator><name>bf_insns</name></name> <operator>=</operator> <operator>(</operator>struct <name>bpf_insn</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>prog_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>fcode</name><operator>.</operator><name>bf_insns</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>pcap_fmt_errmsg_for_errno</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>errbuf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>errno</name></expr></argument>, <argument><expr><literal type="string">"malloc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fcode</name><operator>.</operator><name>bf_insns</name></name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>bf_insns</name></name></expr></argument>, <argument><expr><name>prog_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>dot_dump_node</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>icode</name></name> <modifier>*</modifier></type><name>ic</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>bpf_program</name></name> <modifier>*</modifier></type><name>prog</name></decl></parameter>,
<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>icount</name></decl>, <decl><type ref="prev"/><name>noffset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>block</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>isMarked</name><argument_list>(<argument><expr><name>ic</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>Mark</name><argument_list>(<argument><expr><name>ic</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>icount</name> <operator>=</operator> <call><name>slength</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>stmts</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>block</name><operator>-&gt;</operator><name>longjt</name></name> <operator>+</operator> <name><name>block</name><operator>-&gt;</operator><name>longjf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>noffset</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name>icount</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>prog</name><operator>-&gt;</operator><name>bf_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"\tblock%d [shape=ellipse, id=\"block-%d\" label=\"BLOCK%d\\n"</literal></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>offset</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>noffset</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"\\n%s"</literal></expr></argument>, <argument><expr><call><name>bpf_image</name><argument_list>(<argument><expr><name><name>prog</name><operator>-&gt;</operator><name>bf_insns</name></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"\" tooltip=\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BPF_MEMWORDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>val</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>VAL_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"val[%d]=%d "</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>val</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"val[A]=%d "</literal></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>val</name><index>[<expr><name>A_ATOM</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"val[X]=%d"</literal></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>val</name><index>[<expr><name>X_ATOM</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>JT</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">", peripheries=2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"];\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dot_dump_node</name><argument_list>(<argument><expr><name>ic</name></expr></argument>, <argument><expr><call><name>JT</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>prog</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dot_dump_node</name><argument_list>(<argument><expr><name>ic</name></expr></argument>, <argument><expr><call><name>JF</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>prog</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dot_dump_edge</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>icode</name></name> <modifier>*</modifier></type><name>ic</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>block</name></name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>block</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>isMarked</name><argument_list>(<argument><expr><name>ic</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>Mark</name><argument_list>(<argument><expr><name>ic</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>JT</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"\t\"block%d\":se -&gt; \"block%d\":n [label=\"T\"]; \n"</literal></expr></argument>,
<argument><expr><name><name>block</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>JT</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"\t\"block%d\":sw -&gt; \"block%d\":n [label=\"F\"]; \n"</literal></expr></argument>,
<argument><expr><name><name>block</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>JF</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>dot_dump_edge</name><argument_list>(<argument><expr><name>ic</name></expr></argument>, <argument><expr><call><name>JT</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dot_dump_edge</name><argument_list>(<argument><expr><name>ic</name></expr></argument>, <argument><expr><call><name>JF</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




















<function><type><specifier>static</specifier> <name>int</name></type>
<name>dot_dump</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>icode</name></name> <modifier>*</modifier></type><name>ic</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bpf_program</name></name></type> <name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>stdout</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>bids</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>bids</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>.</operator><name>bf_insns</name></name> <operator>=</operator> <call><name>icode_to_fcode</name><argument_list>(<argument><expr><name>ic</name></expr></argument>, <argument><expr><name><name>ic</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>.</operator><name>bf_len</name></name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>.</operator><name>bf_insns</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"digraph BPF {\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unMarkAll</name><argument_list>(<argument><expr><name>ic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dot_dump_node</name><argument_list>(<argument><expr><name>ic</name></expr></argument>, <argument><expr><name><name>ic</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unMarkAll</name><argument_list>(<argument><expr><name>ic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dot_dump_edge</name><argument_list>(<argument><expr><name>ic</name></expr></argument>, <argument><expr><name><name>ic</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>f</name><operator>.</operator><name>bf_insns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>plain_dump</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>icode</name></name> <modifier>*</modifier></type><name>ic</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>bpf_program</name></name></type> <name>f</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>bids</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>bids</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name><operator>.</operator><name>bf_insns</name></name> <operator>=</operator> <call><name>icode_to_fcode</name><argument_list>(<argument><expr><name>ic</name></expr></argument>, <argument><expr><name><name>ic</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>.</operator><name>bf_len</name></name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>.</operator><name>bf_insns</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>bpf_dump</name><argument_list>(<argument><expr><operator>&amp;</operator><name>f</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>f</name><operator>.</operator><name>bf_insns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>opt_dump</name><parameter_list>(<parameter><decl><type><name>opt_state_t</name> <modifier>*</modifier></type><name>opt_state</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>icode</name></name> <modifier>*</modifier></type><name>ic</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>errbuf</name><index>[<expr><name>PCAP_ERRBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>





<if_stmt><if>if <condition>(<expr><name>pcap_print_dot_graph</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>dot_dump</name><argument_list>(<argument><expr><name>ic</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>plain_dump</name><argument_list>(<argument><expr><name>ic</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>opt_error</name><argument_list>(<argument><expr><name>opt_state</name></expr></argument>, <argument><expr><literal type="string">"opt_dump: icode_to_fcode failed: %s"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
