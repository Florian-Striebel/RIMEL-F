<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libpcap/msdos/pktdrvr.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__PKTDRVR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__PKTDRVR_H</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUBLIC</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCAL</name></cpp:macro> <cpp:value>static</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RX_BUF_SIZE</name></cpp:macro> <cpp:value>ETH_MTU</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TX_BUF_SIZE</name></cpp:macro> <cpp:value>ETH_MTU</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__HIGHC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>Off</name><name>(</name><name>Align_members</name><name>)</name></cpp:pragma>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pack</name><name>(</name><name>1</name><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><enum>enum <block>{
<decl><name>PD_ETHER</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>PD_PRONET10</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,
<decl><name>PD_IEEE8025</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
<decl><name>PD_OMNINET</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
<decl><name>PD_APPLETALK</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,
<decl><name>PD_SLIP</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,
<decl><name>PD_STARTLAN</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,
<decl><name>PD_ARCNET</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,
<decl><name>PD_AX25</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>,
<decl><name>PD_KISS</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>,
<decl><name>PD_IEEE8023_2</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>,
<decl><name>PD_FDDI8022</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>,
<decl><name>PD_X25</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>,
<decl><name>PD_LANstar</name> <init>= <expr><literal type="number">14</literal></expr></init></decl>,
<decl><name>PD_PPP</name> <init>= <expr><literal type="number">18</literal></expr></init></decl>
}</block></enum></type> <name>PKT_CLASS</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{
<decl><name>PDRX_OFF</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
<decl><name>PDRX_DIRECT</name></decl>,
<decl><name>PDRX_BROADCAST</name></decl>,
<decl><name>PDRX_MULTICAST1</name></decl>,
<decl><name>PDRX_MULTICAST2</name></decl>,
<decl><name>PDRX_ALL_PACKETS</name></decl>,
}</block></enum></type> <name>PKT_RX_MODE</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>type</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>len</name></decl>;</decl_stmt>
}</block></struct></type> <name>PKT_FRAME</name>;</typedef>


<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>BYTE</name></type> <name>class</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BYTE</name></type> <name>number</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WORD</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BYTE</name></type> <name>funcs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WORD</name></type> <name>intr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WORD</name></type> <name>handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BYTE</name></type> <name><name>name</name> <index>[<expr><literal type="number">15</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>quiet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BYTE</name></type> <name>majVer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BYTE</name></type> <name>minVer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BYTE</name></type> <name>dummyLen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WORD</name></type> <name>MAClength</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WORD</name></type> <name>MTU</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WORD</name></type> <name>multicast</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WORD</name></type> <name>rcvrBuffers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WORD</name></type> <name>UMTbufs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WORD</name></type> <name>postEOIintr</name></decl>;</decl_stmt>
}</block></struct></type> <name>PKT_INFO</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PKT_PARAM_SIZE</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>


<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>DWORD</name></type> <name>inPackets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>outPackets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>inBytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>outBytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>inErrors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>outErrors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>lost</name></decl>;</decl_stmt>
}</block></struct></type> <name>PKT_STAT</name>;</typedef>


<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>ETHER</name></type> <name>destin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ETHER</name></type> <name>source</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WORD</name></type> <name>proto</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BYTE</name></type> <name><name>data</name> <index>[<expr><name>TX_BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>TX_ELEMENT</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>WORD</name></type> <name>firstCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WORD</name></type> <name>secondCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WORD</name></type> <name>handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ETHER</name></type> <name>destin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ETHER</name></type> <name>source</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WORD</name></type> <name>proto</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BYTE</name></type> <name><name>data</name> <index>[<expr><name>RX_BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>RX_ELEMENT</name>;</typedef>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__HIGHC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pop</name><name>(</name><name>Align_members</name><name>)</name></cpp:pragma>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>pack</name><name>(</name><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>extern</specifier> <name>PKT_STAT</name></type> <name>pktStat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>PKT_INFO</name></type> <name>pktInfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>PKT_RX_MODE</name></type> <name>receiveMode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>ETHER</name></type> <name>myAddress</name></decl>, <decl><type ref="prev"/><name>ethBroadcast</name></decl>;</decl_stmt>

<function_decl><type><specifier>extern</specifier> <name>BOOL</name></type> <name>PktInitDriver</name> <parameter_list>(<parameter><decl><type><name>PKT_RX_MODE</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>BOOL</name></type> <name>PktExitDriver</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>PktGetErrorStr</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>errNum</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>PktGetClassName</name> <parameter_list>(<parameter><decl><type><name>WORD</name></type> <name>class</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>PktRXmodeStr</name> <parameter_list>(<parameter><decl><type><name>PKT_RX_MODE</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>BOOL</name></type> <name>PktSearchDriver</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>PktReceive</name> <parameter_list>(<parameter><decl><type><name>BYTE</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>BOOL</name></type> <name>PktTransmit</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>eth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>DWORD</name></type> <name>PktRxDropped</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>BOOL</name></type> <name>PktReleaseHandle</name> <parameter_list>(<parameter><decl><type><name>WORD</name></type> <name>handle</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>BOOL</name></type> <name>PktTerminHandle</name> <parameter_list>(<parameter><decl><type><name>WORD</name></type> <name>handle</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>BOOL</name></type> <name>PktResetInterface</name> <parameter_list>(<parameter><decl><type><name>WORD</name></type> <name>handle</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>BOOL</name></type> <name>PktSetReceiverMode</name><parameter_list>(<parameter><decl><type><name>PKT_RX_MODE</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>BOOL</name></type> <name>PktGetReceiverMode</name><parameter_list>(<parameter><decl><type><name>PKT_RX_MODE</name> <modifier>*</modifier></type><name>mode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>BOOL</name></type> <name>PktGetStatistics</name> <parameter_list>(<parameter><decl><type><name>WORD</name></type> <name>handle</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>BOOL</name></type> <name>PktSessStatistics</name> <parameter_list>(<parameter><decl><type><name>WORD</name></type> <name>handle</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>BOOL</name></type> <name>PktResetStatistics</name><parameter_list>(<parameter><decl><type><name>WORD</name></type> <name>handle</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>BOOL</name></type> <name>PktGetAddress</name> <parameter_list>(<parameter><decl><type><name>ETHER</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>BOOL</name></type> <name>PktSetAddress</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ETHER</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>BOOL</name></type> <name>PktGetDriverInfo</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>BOOL</name></type> <name>PktGetDriverParam</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>PktQueueBusy</name> <parameter_list>(<parameter><decl><type><name>BOOL</name></type> <name>busy</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>WORD</name></type> <name>PktBuffersUsed</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
