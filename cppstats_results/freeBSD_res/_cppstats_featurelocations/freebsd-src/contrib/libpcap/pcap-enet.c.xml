<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libpcap/pcap-enet.c">








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/file.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;net/if.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pcap/bpf.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;net/enet.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/if_ether.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"interface.h"</cpp:file></cpp:include>

<struct>struct <name>packet_header</name> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IBMRTPC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>LengthWords</name></name></type> <name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>tap_header</name></name></type> <name>tap</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>u_char</name> <name><name>packet</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></expr_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>errno</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFSPACE</name></cpp:macro> <cpp:value>(4*1024)</cpp:value></cpp:define>


<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>efReadError</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type>
<name>readloop</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cnt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>if_fd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>bpf_program</name></name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>printfunc</name></type> <name>printit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IBMRTPC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>register</specifier> <name><name>struct</name> <name>packet_header</name></name> <modifier>*</modifier></type><name>ph</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>u_char</name> <modifier>*</modifier></type><name>bp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>inc</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>timeval</name></name></type> <name>tv</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>cc</name></decl>, <decl><type ref="prev"/><name>caplen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>register</specifier> <name><name>struct</name> <name>bpf_insn</name></name> <modifier>*</modifier></type><name>fcode</name> <init>= <expr><name><name>fp</name><operator>-&gt;</operator><name>bf_insns</name></name></expr></init></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name><name>struct</name> <name>packet_header</name></name></type> <name>hdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_char</name></type> <name><name>p</name><index>[<expr><name>BUFSPACE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_short</name></type> <name>s</name></decl>;</decl_stmt>
}</block> <decl><name>buf</name></decl>;</union>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>cc</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name>if_fd</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>buf</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>efReadError</name><argument_list>(<argument><expr><name>if_fd</name></expr></argument>, <argument><expr><literal type="string">"reader"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IBMRTPC</name></expr></argument>)</argument_list></call></expr></cpp:if>



<expr_stmt><expr><name>bp</name> <operator>=</operator> <name><name>buf</name><operator>.</operator><name>p</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>cc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ph</name> <operator>=</operator> <operator>(</operator>struct <name>packet_header</name> <operator>*</operator><operator>)</operator><name>bp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>caplen</name> <operator>=</operator> <ternary><condition><expr><name><name>ph</name><operator>-&gt;</operator><name>tap</name><operator>.</operator><name>th_wirelen</name></name> <operator>&gt;</operator> <name>snaplen</name></expr> ?</condition><then> <expr><name>snaplen</name></expr> </then><else>: <expr><name><name>ph</name><operator>-&gt;</operator><name>tap</name>
<operator>.</operator><name>th_wirelen</name></name></expr></else></ternary></expr> ;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>bpf_filter</name><argument_list>(<argument><expr><name>fcode</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>ph</name><operator>-&gt;</operator><name>packet</name></name></expr></argument>,
<argument><expr><name><name>ph</name><operator>-&gt;</operator><name>tap</name><operator>.</operator><name>th_wirelen</name></name></expr></argument>, <argument><expr><name>caplen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>--</operator><name>cnt</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name>printit</name>)<argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>ph</name><operator>-&gt;</operator><name>packet</name></name></expr></argument>,
<argument><expr><operator>(</operator>struct <name>timeval</name> <operator>*</operator><operator>)</operator><name><name>ph</name><operator>-&gt;</operator><name>tap</name><operator>.</operator><name>th_timestamp</name></name></expr></argument>,
<argument><expr><name><name>ph</name><operator>-&gt;</operator><name>tap</name><operator>.</operator><name>th_wirelen</name></name></expr></argument>, <argument><expr><name>caplen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>inc</name> <operator>=</operator> <name><name>ph</name><operator>-&gt;</operator><name>length</name><operator>.</operator><name>PacketOffset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cc</name> <operator>-=</operator> <name>inc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bp</name> <operator>+=</operator> <name>inc</name></expr>;</expr_stmt>
</block_content>}</block></while>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>caplen</name> <operator>=</operator> <ternary><condition><expr><name>cc</name> <operator>&gt;</operator> <name>snaplen</name></expr> ?</condition><then> <expr><name>snaplen</name></expr> </then><else>: <expr><name>cc</name></expr></else></ternary></expr> ;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>bpf_filter</name><argument_list>(<argument><expr><name>fcode</name></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>hdr</name><operator>.</operator><name>packet</name></name></expr></argument>, <argument><expr><name>cc</name></expr></argument>, <argument><expr><name>caplen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>--</operator><name>cnt</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><call>(<modifier>*</modifier><name>printit</name>)<argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>hdr</name><operator>.</operator><name>packet</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>cc</name></expr></argument>, <argument><expr><name>caplen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></while>
<label><name>out</name>:</label>
<expr_stmt><expr><call><name>wrapup</name><argument_list>(<argument><expr><name>if_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>efReadError</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fid</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINVAL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>lseek</name><argument_list>(<argument><expr><name>fid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"tcpdump: efReadError/lseek"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<return>return;</return></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"tcpdump: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>wrapup</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IBMRTPC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>enstats</name></name></type> <name>es</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>EIOSTATS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>es</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"tcpdump: enet ioctl EIOSTATS error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%d packets queued"</literal></expr></argument>, <argument><expr><name><name>es</name><operator>.</operator><name>enStat_Rcnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>es</name><operator>.</operator><name>enStat_Rdrops</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">", %d dropped"</literal></expr></argument>, <argument><expr><name><name>es</name><operator>.</operator><name>enStat_Rdrops</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>es</name><operator>.</operator><name>enStat_Reads</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">", %d tcpdump %s"</literal></expr></argument>, <argument><expr><name><name>es</name><operator>.</operator><name>enStat_Reads</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>es</name><operator>.</operator><name>enStat_Reads</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">"reads"</literal></expr> </then><else>: <expr><literal type="string">"read"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>es</name><operator>.</operator><name>enStat_MaxRead</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">", %d packets in largest read"</literal></expr></argument>,
<argument><expr><name><name>es</name><operator>.</operator><name>enStat_MaxRead</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>initdevice</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pflag</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>linktype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>eniocb</name></name></type> <name>ctl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>enfilter</name></name></type> <name>filter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>maxwaiting</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>if_fd</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IBMRTPC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>GETENETDEVICE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>if_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>if_fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><literal type="string">"/dev/enet"</literal></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>if_fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"tcpdump: enet open error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>error</name><argument_list>(
<argument><expr><literal type="string">"your system may not be properly configured; see \"man enet(4)\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>if_fd</name></expr></argument>, <argument><expr><name>EIOCGETP</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ctl</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"tcpdump: enet ioctl EIOCGETP error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IBMRTPC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>ctl</name><operator>.</operator><name>en_rtout</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>*</operator> <name><name>ctl</name><operator>.</operator><name>en_hz</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctl</name><operator>.</operator><name>en_tr_etherhead</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctl</name><operator>.</operator><name>en_tap_network</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctl</name><operator>.</operator><name>en_multi_packet</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctl</name><operator>.</operator><name>en_maxlen</name></name> <operator>=</operator> <name>BUFSPACE</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>ctl</name><operator>.</operator><name>en_rtout</name></name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>if_fd</name></expr></argument>, <argument><expr><name>EIOCSETP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"tcpdump: enet ioctl EIOCSETP error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>if_fd</name></expr></argument>, <argument><expr><name>EIOCFLUSH</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"tcpdump: enet ioctl EIOCFLUSH error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>maxwaiting</name> <operator>=</operator> <name><name>ctl</name><operator>.</operator><name>en_maxwaiting</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>if_fd</name></expr></argument>, <argument><expr><name>EIOCSETW</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>maxwaiting</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"tcpdump: enet ioctl EIOCSETW error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IBMRTPC</name></expr></argument>)</argument_list></call></expr></cpp:if>


<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>if_fd</name></expr></argument>, <argument><expr><name>EIOCLRSTAT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"tcpdump: enet ioctl EIOCLRSTAT error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<expr_stmt><expr><name><name>filter</name><operator>.</operator><name>enf_Priority</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name><operator>.</operator><name>enf_FilterLen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>if_fd</name></expr></argument>, <argument><expr><name>EIOCSETF</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>filter</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"tcpdump: enet ioctl EIOCSETF error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><operator>*</operator><name>linktype</name> <operator>=</operator> <name>DLT_EN10MB</name></expr>;</expr_stmt>

<return>return<expr><operator>(</operator><name>if_fd</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
