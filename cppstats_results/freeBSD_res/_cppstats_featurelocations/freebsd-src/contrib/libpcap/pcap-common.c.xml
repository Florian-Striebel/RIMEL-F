<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/home/user/cppstats/test/freeBSD_res/_cppstats_featurelocations/freebsd-src/contrib/libpcap/pcap-common.c">






















<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;config.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pcap-types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pcap-int.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"extract.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pcap/sll.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pcap/usb.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pcap/nflog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pcap/can_socketcan.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pcap-common.h"</cpp:file></cpp:include>





































































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_NULL</name></cpp:macro> <cpp:value>DLT_NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_ETHERNET</name></cpp:macro> <cpp:value>DLT_EN10MB</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_EXP_ETHERNET</name></cpp:macro> <cpp:value>DLT_EN3MB</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_AX25</name></cpp:macro> <cpp:value>DLT_AX25</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_PRONET</name></cpp:macro> <cpp:value>DLT_PRONET</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_CHAOS</name></cpp:macro> <cpp:value>DLT_CHAOS</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_IEEE802_5</name></cpp:macro> <cpp:value>DLT_IEEE802</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_ARCNET_BSD</name></cpp:macro> <cpp:value>DLT_ARCNET</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_SLIP</name></cpp:macro> <cpp:value>DLT_SLIP</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_PPP</name></cpp:macro> <cpp:value>DLT_PPP</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_FDDI</name></cpp:macro> <cpp:value>DLT_FDDI</cpp:value></cpp:define>
















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_PPP_HDLC</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_PPP_ETHER</name></cpp:macro> <cpp:value>51</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_SYMANTEC_FIREWALL</name></cpp:macro> <cpp:value>99</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_ATM_RFC1483</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_RAW</name></cpp:macro> <cpp:value>101</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_SLIP_BSDOS</name></cpp:macro> <cpp:value>102</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_PPP_BSDOS</name></cpp:macro> <cpp:value>103</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_MATCHING_MIN</name></cpp:macro> <cpp:value>104</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_C_HDLC</name></cpp:macro> <cpp:value>104</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_IEEE802_11</name></cpp:macro> <cpp:value>105</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_ATM_CLIP</name></cpp:macro> <cpp:value>106</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_FRELAY</name></cpp:macro> <cpp:value>107</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_LOOP</name></cpp:macro> <cpp:value>108</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_ENC</name></cpp:macro> <cpp:value>109</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_LANE8023</name></cpp:macro> <cpp:value>110</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_HIPPI</name></cpp:macro> <cpp:value>111</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_HDLC</name></cpp:macro> <cpp:value>112</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_LINUX_SLL</name></cpp:macro> <cpp:value>113</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_LTALK</name></cpp:macro> <cpp:value>114</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_ECONET</name></cpp:macro> <cpp:value>115</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_IPFILTER</name></cpp:macro> <cpp:value>116</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_PFLOG</name></cpp:macro> <cpp:value>117</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_CISCO_IOS</name></cpp:macro> <cpp:value>118</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_IEEE802_11_PRISM</name></cpp:macro> <cpp:value>119</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_IEEE802_11_AIRONET</name></cpp:macro> <cpp:value>120</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_HHDLC</name></cpp:macro> <cpp:value>121</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_IP_OVER_FC</name></cpp:macro> <cpp:value>122</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_SUNATM</name></cpp:macro> <cpp:value>123</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_RIO</name></cpp:macro> <cpp:value>124</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_PCI_EXP</name></cpp:macro> <cpp:value>125</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_AURORA</name></cpp:macro> <cpp:value>126</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_IEEE802_11_RADIOTAP</name></cpp:macro> <cpp:value>127</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_TZSP</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_ARCNET_LINUX</name></cpp:macro> <cpp:value>129</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_JUNIPER_MLPPP</name></cpp:macro> <cpp:value>130</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_JUNIPER_MLFR</name></cpp:macro> <cpp:value>131</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_JUNIPER_ES</name></cpp:macro> <cpp:value>132</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_JUNIPER_GGSN</name></cpp:macro> <cpp:value>133</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_JUNIPER_MFR</name></cpp:macro> <cpp:value>134</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_JUNIPER_ATM2</name></cpp:macro> <cpp:value>135</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_JUNIPER_SERVICES</name></cpp:macro> <cpp:value>136</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_JUNIPER_ATM1</name></cpp:macro> <cpp:value>137</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_APPLE_IP_OVER_IEEE1394</name></cpp:macro> <cpp:value>138</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_MTP2_WITH_PHDR</name></cpp:macro> <cpp:value>139</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_MTP2</name></cpp:macro> <cpp:value>140</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_MTP3</name></cpp:macro> <cpp:value>141</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_SCCP</name></cpp:macro> <cpp:value>142</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_DOCSIS</name></cpp:macro> <cpp:value>143</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_LINUX_IRDA</name></cpp:macro> <cpp:value>144</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_IBM_SP</name></cpp:macro> <cpp:value>145</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_IBM_SN</name></cpp:macro> <cpp:value>146</cpp:value></cpp:define>



























<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_USER0</name></cpp:macro> <cpp:value>147</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_USER1</name></cpp:macro> <cpp:value>148</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_USER2</name></cpp:macro> <cpp:value>149</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_USER3</name></cpp:macro> <cpp:value>150</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_USER4</name></cpp:macro> <cpp:value>151</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_USER5</name></cpp:macro> <cpp:value>152</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_USER6</name></cpp:macro> <cpp:value>153</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_USER7</name></cpp:macro> <cpp:value>154</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_USER8</name></cpp:macro> <cpp:value>155</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_USER9</name></cpp:macro> <cpp:value>156</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_USER10</name></cpp:macro> <cpp:value>157</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_USER11</name></cpp:macro> <cpp:value>158</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_USER12</name></cpp:macro> <cpp:value>159</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_USER13</name></cpp:macro> <cpp:value>160</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_USER14</name></cpp:macro> <cpp:value>161</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_USER15</name></cpp:macro> <cpp:value>162</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_IEEE802_11_AVS</name></cpp:macro> <cpp:value>163</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_JUNIPER_MONITOR</name></cpp:macro> <cpp:value>164</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_BACNET_MS_TP</name></cpp:macro> <cpp:value>165</cpp:value></cpp:define>















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_PPP_PPPD</name></cpp:macro> <cpp:value>166</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_JUNIPER_PPPOE</name></cpp:macro> <cpp:value>167</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_JUNIPER_PPPOE_ATM</name></cpp:macro> <cpp:value>168</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_GPRS_LLC</name></cpp:macro> <cpp:value>169</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_GPF_T</name></cpp:macro> <cpp:value>170</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_GPF_F</name></cpp:macro> <cpp:value>171</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_GCOM_T1E1</name></cpp:macro> <cpp:value>172</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_GCOM_SERIAL</name></cpp:macro> <cpp:value>173</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_JUNIPER_PIC_PEER</name></cpp:macro> <cpp:value>174</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_ERF_ETH</name></cpp:macro> <cpp:value>175</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_ERF_POS</name></cpp:macro> <cpp:value>176</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_LINUX_LAPD</name></cpp:macro> <cpp:value>177</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_JUNIPER_ETHER</name></cpp:macro> <cpp:value>178</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_JUNIPER_PPP</name></cpp:macro> <cpp:value>179</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_JUNIPER_FRELAY</name></cpp:macro> <cpp:value>180</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_JUNIPER_CHDLC</name></cpp:macro> <cpp:value>181</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_MFR</name></cpp:macro> <cpp:value>182</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_JUNIPER_VP</name></cpp:macro> <cpp:value>183</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_A429</name></cpp:macro> <cpp:value>184</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_A653_ICM</name></cpp:macro> <cpp:value>185</cpp:value></cpp:define>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_USB_FREEBSD</name></cpp:macro> <cpp:value>186</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_BLUETOOTH_HCI_H4</name></cpp:macro> <cpp:value>187</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_IEEE802_16_MAC_CPS</name></cpp:macro> <cpp:value>188</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_USB_LINUX</name></cpp:macro> <cpp:value>189</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_CAN20B</name></cpp:macro> <cpp:value>190</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_IEEE802_15_4_LINUX</name></cpp:macro> <cpp:value>191</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_PPI</name></cpp:macro> <cpp:value>192</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_IEEE802_16_MAC_CPS_RADIO</name></cpp:macro> <cpp:value>193</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_JUNIPER_ISM</name></cpp:macro> <cpp:value>194</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_IEEE802_15_4_WITHFCS</name></cpp:macro> <cpp:value>195</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_SITA</name></cpp:macro> <cpp:value>196</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_ERF</name></cpp:macro> <cpp:value>197</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_RAIF1</name></cpp:macro> <cpp:value>198</cpp:value></cpp:define>















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_IPMB_KONTRON</name></cpp:macro> <cpp:value>199</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_JUNIPER_ST</name></cpp:macro> <cpp:value>200</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_BLUETOOTH_HCI_H4_WITH_PHDR</name></cpp:macro> <cpp:value>201</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_AX25_KISS</name></cpp:macro> <cpp:value>202</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_LAPD</name></cpp:macro> <cpp:value>203</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_PPP_WITH_DIR</name></cpp:macro> <cpp:value>204</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_C_HDLC_WITH_DIR</name></cpp:macro> <cpp:value>205</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_FRELAY_WITH_DIR</name></cpp:macro> <cpp:value>206</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_LAPB_WITH_DIR</name></cpp:macro> <cpp:value>207</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_IPMB_LINUX</name></cpp:macro> <cpp:value>209</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_FLEXRAY</name></cpp:macro> <cpp:value>210</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_MOST</name></cpp:macro> <cpp:value>211</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_LIN</name></cpp:macro> <cpp:value>212</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_X2E_SERIAL</name></cpp:macro> <cpp:value>213</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_X2E_XORAYA</name></cpp:macro> <cpp:value>214</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_IEEE802_15_4_NONASK_PHY</name></cpp:macro> <cpp:value>215</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_LINUX_EVDEV</name></cpp:macro> <cpp:value>216</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_GSMTAP_UM</name></cpp:macro> <cpp:value>217</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_GSMTAP_ABIS</name></cpp:macro> <cpp:value>218</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_MPLS</name></cpp:macro> <cpp:value>219</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_USB_LINUX_MMAPPED</name></cpp:macro> <cpp:value>220</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_DECT</name></cpp:macro> <cpp:value>221</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_AOS</name></cpp:macro> <cpp:value>222</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_WIHART</name></cpp:macro> <cpp:value>223</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_FC_2</name></cpp:macro> <cpp:value>224</cpp:value></cpp:define>













<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_FC_2_WITH_FRAME_DELIMS</name></cpp:macro> <cpp:value>225</cpp:value></cpp:define>















































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_IPNET</name></cpp:macro> <cpp:value>226</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_CAN_SOCKETCAN</name></cpp:macro> <cpp:value>227</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_IPV4</name></cpp:macro> <cpp:value>228</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_IPV6</name></cpp:macro> <cpp:value>229</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_IEEE802_15_4_NOFCS</name></cpp:macro> <cpp:value>230</cpp:value></cpp:define>

















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_DBUS</name></cpp:macro> <cpp:value>231</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_JUNIPER_VS</name></cpp:macro> <cpp:value>232</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_JUNIPER_SRX_E2E</name></cpp:macro> <cpp:value>233</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_JUNIPER_FIBRECHANNEL</name></cpp:macro> <cpp:value>234</cpp:value></cpp:define>











<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_DVB_CI</name></cpp:macro> <cpp:value>235</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_MUX27010</name></cpp:macro> <cpp:value>236</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_STANAG_5066_D_PDU</name></cpp:macro> <cpp:value>237</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_JUNIPER_ATM_CEMIC</name></cpp:macro> <cpp:value>238</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_NFLOG</name></cpp:macro> <cpp:value>239</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_NETANALYZER</name></cpp:macro> <cpp:value>240</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_NETANALYZER_TRANSPARENT</name></cpp:macro> <cpp:value>241</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_IPOIB</name></cpp:macro> <cpp:value>242</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_MPEG_2_TS</name></cpp:macro> <cpp:value>243</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_NG40</name></cpp:macro> <cpp:value>244</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_NFC_LLCP</name></cpp:macro> <cpp:value>245</cpp:value></cpp:define>










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_PFSYNC</name></cpp:macro> <cpp:value>246</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_INFINIBAND</name></cpp:macro> <cpp:value>247</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_SCTP</name></cpp:macro> <cpp:value>248</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_USBPCAP</name></cpp:macro> <cpp:value>249</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLT_RTAC_SERIAL</name></cpp:macro> <cpp:value>250</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_BLUETOOTH_LE_LL</name></cpp:macro> <cpp:value>251</cpp:value></cpp:define>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_WIRESHARK_UPPER_PDU</name></cpp:macro> <cpp:value>252</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_NETLINK</name></cpp:macro> <cpp:value>253</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_BLUETOOTH_LINUX_MONITOR</name></cpp:macro> <cpp:value>254</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_BLUETOOTH_BREDR_BB</name></cpp:macro> <cpp:value>255</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_BLUETOOTH_LE_LL_WITH_PHDR</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_PROFIBUS_DL</name></cpp:macro> <cpp:value>257</cpp:value></cpp:define>




















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_PKTAP</name></cpp:macro> <cpp:value>258</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_EPON</name></cpp:macro> <cpp:value>259</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_IPMI_HPM_2</name></cpp:macro> <cpp:value>260</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_ZWAVE_R1_R2</name></cpp:macro> <cpp:value>261</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_ZWAVE_R3</name></cpp:macro> <cpp:value>262</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_WATTSTOPPER_DLM</name></cpp:macro> <cpp:value>263</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_ISO_14443</name></cpp:macro> <cpp:value>264</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_RDS</name></cpp:macro> <cpp:value>265</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_USB_DARWIN</name></cpp:macro> <cpp:value>266</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_OPENFLOW</name></cpp:macro> <cpp:value>267</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_SDLC</name></cpp:macro> <cpp:value>268</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_TI_LLN_SNIFFER</name></cpp:macro> <cpp:value>269</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_LORATAP</name></cpp:macro> <cpp:value>270</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_VSOCK</name></cpp:macro> <cpp:value>271</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_NORDIC_BLE</name></cpp:macro> <cpp:value>272</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_DOCSIS31_XRA31</name></cpp:macro> <cpp:value>273</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_ETHERNET_MPACKET</name></cpp:macro> <cpp:value>274</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_DISPLAYPORT_AUX</name></cpp:macro> <cpp:value>275</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_LINUX_SLL2</name></cpp:macro> <cpp:value>276</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINKTYPE_MATCHING_MAX</name></cpp:macro> <cpp:value>276</cpp:value></cpp:define>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LINKTYPE_MATCHING_MAX</name> <operator>!=</operator> <name>DLT_MATCHING_MAX</name></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> The LINKTYPE_ matching range does not match the DLT_ matching range</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct><specifier>static</specifier> struct <name>linktype_map</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>dlt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>linktype</name></decl>;</decl_stmt>
}</block> <decl><name><name>map</name><index>[]</index></name> <init>= <expr><block>{




<expr><block>{ <expr><name>DLT_NULL</name></expr>, <expr><name>LINKTYPE_NULL</name></expr> }</block></expr>,
<expr><block>{ <expr><name>DLT_EN10MB</name></expr>, <expr><name>LINKTYPE_ETHERNET</name></expr> }</block></expr>,
<expr><block>{ <expr><name>DLT_EN3MB</name></expr>, <expr><name>LINKTYPE_EXP_ETHERNET</name></expr> }</block></expr>,
<expr><block>{ <expr><name>DLT_AX25</name></expr>, <expr><name>LINKTYPE_AX25</name></expr> }</block></expr>,
<expr><block>{ <expr><name>DLT_PRONET</name></expr>, <expr><name>LINKTYPE_PRONET</name></expr> }</block></expr>,
<expr><block>{ <expr><name>DLT_CHAOS</name></expr>, <expr><name>LINKTYPE_CHAOS</name></expr> }</block></expr>,
<expr><block>{ <expr><name>DLT_IEEE802</name></expr>, <expr><name>LINKTYPE_IEEE802_5</name></expr> }</block></expr>,
<expr><block>{ <expr><name>DLT_ARCNET</name></expr>, <expr><name>LINKTYPE_ARCNET_BSD</name></expr> }</block></expr>,
<expr><block>{ <expr><name>DLT_SLIP</name></expr>, <expr><name>LINKTYPE_SLIP</name></expr> }</block></expr>,
<expr><block>{ <expr><name>DLT_PPP</name></expr>, <expr><name>LINKTYPE_PPP</name></expr> }</block></expr>,
<expr><block>{ <expr><name>DLT_FDDI</name></expr>, <expr><name>LINKTYPE_FDDI</name></expr> }</block></expr>,
<expr><block>{ <expr><name>DLT_SYMANTEC_FIREWALL</name></expr>, <expr><name>LINKTYPE_SYMANTEC_FIREWALL</name></expr> }</block></expr>,







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DLT_FR</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><block>{ <expr><name>DLT_FR</name></expr>, <expr><name>LINKTYPE_FRELAY</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{ <expr><name>DLT_ATM_RFC1483</name></expr>, <expr><name>LINKTYPE_ATM_RFC1483</name></expr> }</block></expr>,
<expr><block>{ <expr><name>DLT_RAW</name></expr>, <expr><name>LINKTYPE_RAW</name></expr> }</block></expr>,
<expr><block>{ <expr><name>DLT_SLIP_BSDOS</name></expr>, <expr><name>LINKTYPE_SLIP_BSDOS</name></expr> }</block></expr>,
<expr><block>{ <expr><name>DLT_PPP_BSDOS</name></expr>, <expr><name>LINKTYPE_PPP_BSDOS</name></expr> }</block></expr>,


<expr><block>{ <expr><name>DLT_C_HDLC</name></expr>, <expr><name>LINKTYPE_C_HDLC</name></expr> }</block></expr>,









<expr><block>{ <expr><name>DLT_ATM_CLIP</name></expr>, <expr><name>LINKTYPE_ATM_CLIP</name></expr> }</block></expr>,


<expr><block>{ <expr><name>DLT_PPP_SERIAL</name></expr>, <expr><name>LINKTYPE_PPP_HDLC</name></expr> }</block></expr>,


<expr><block>{ <expr><name>DLT_PPP_ETHER</name></expr>, <expr><name>LINKTYPE_PPP_ETHER</name></expr> }</block></expr>,







<expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>
}</block></expr></init></decl>;</struct>

<function><type><name>int</name></type>
<name>dlt_to_linktype</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>dlt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>








<if_stmt><if>if <condition>(<expr><name>dlt</name> <operator>==</operator> <name>DLT_PFSYNC</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>LINKTYPE_PFSYNC</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dlt</name> <operator>==</operator> <name>DLT_PKTAP</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>LINKTYPE_PKTAP</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>dlt</name> <operator>&gt;=</operator> <name>DLT_MATCHING_MIN</name> <operator>&amp;&amp;</operator> <name>dlt</name> <operator>&lt;=</operator> <name>DLT_MATCHING_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>dlt</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>




<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dlt</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dlt</name> <operator>==</operator> <name>dlt</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name><name>map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>linktype</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>






<return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>linktype_to_dlt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>linktype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>







<if_stmt><if>if <condition>(<expr><name>linktype</name> <operator>==</operator> <name>LINKTYPE_PFSYNC</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DLT_PFSYNC</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>linktype</name> <operator>==</operator> <name>LINKTYPE_PKTAP</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>DLT_PKTAP</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><name>linktype</name> <operator>&gt;=</operator> <name>LINKTYPE_MATCHING_MIN</name> <operator>&amp;&amp;</operator>
<name>linktype</name> <operator>&lt;=</operator> <name>LINKTYPE_MATCHING_MAX</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name>linktype</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>




<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>linktype</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>linktype</name> <operator>==</operator> <name>linktype</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><operator>(</operator><name><name>map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dlt</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>






<return>return <expr><name>linktype</name></expr>;</return>
</block_content>}</block></function>














<function><type><name>u_int</name></type>
<name>max_snaplen_for_dlt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>dlt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch <condition>(<expr><name>dlt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>DLT_DBUS</name></expr>:</case>
<return>return <expr><literal type="number">128</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal></expr>;</return>

<case>case <expr><name>DLT_USBPCAP</name></expr>:</case>
<return>return <expr><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal></expr>;</return>

<default>default:</default>
<return>return <expr><name>MAXIMUM_SNAPLEN</name></expr>;</return>
</block_content>}</block></switch>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>void</name></type>
<name>swap_linux_sll_header</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>pcap_pkthdr</name></name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>, <parameter><decl><type><name>u_char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_int</name></type> <name>caplen</name> <init>= <expr><name><name>hdr</name><operator>-&gt;</operator><name>caplen</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>length</name> <init>= <expr><name><name>hdr</name><operator>-&gt;</operator><name>len</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>sll_header</name></name> <modifier>*</modifier></type><name>shdr</name> <init>= <expr><operator>(</operator>struct <name>sll_header</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>protocol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pcap_can_socketcan_hdr</name> <modifier>*</modifier></type><name>chdr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>caplen</name> <operator>&lt;</operator> <operator>(</operator><name>u_int</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sll_header</name></expr></argument>)</argument_list></sizeof> <operator>||</operator>
<name>length</name> <operator>&lt;</operator> <operator>(</operator><name>u_int</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sll_header</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>protocol</name> <operator>=</operator> <call><name>EXTRACT_16BITS</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shdr</name><operator>-&gt;</operator><name>sll_protocol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>protocol</name> <operator>!=</operator> <name>LINUX_SLL_P_CAN</name> <operator>&amp;&amp;</operator> <name>protocol</name> <operator>!=</operator> <name>LINUX_SLL_P_CANFD</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>




<expr_stmt><expr><name>chdr</name> <operator>=</operator> <operator>(</operator><name>pcap_can_socketcan_hdr</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>buf</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sll_header</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>caplen</name> <operator>&lt;</operator> <operator>(</operator><name>u_int</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sll_header</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>chdr</name><operator>-&gt;</operator><name>can_id</name></name></expr></argument>)</argument_list></sizeof> <operator>||</operator>
<name>length</name> <operator>&lt;</operator> <operator>(</operator><name>u_int</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sll_header</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>chdr</name><operator>-&gt;</operator><name>can_id</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<return>return;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>chdr</name><operator>-&gt;</operator><name>can_id</name></name> <operator>=</operator> <call><name>SWAPLONG</name><argument_list>(<argument><expr><name><name>chdr</name><operator>-&gt;</operator><name>can_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>void</name></type>
<name>swap_linux_usb_header</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>pcap_pkthdr</name></name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>, <parameter><decl><type><name>u_char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>header_len_64_bytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pcap_usb_header_mmapped</name> <modifier>*</modifier></type><name>uhdr</name> <init>= <expr><operator>(</operator><name>pcap_usb_header_mmapped</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bpf_u_int32</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>











<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>-&gt;</operator><name>caplen</name></name> <operator>&lt;</operator> <name>offset</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>uhdr</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>SWAPLL</name><argument_list>(<argument><expr><name><name>uhdr</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>-&gt;</operator><name>caplen</name></name> <operator>&lt;</operator> <name>offset</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>uhdr</name><operator>-&gt;</operator><name>bus_id</name></name> <operator>=</operator> <call><name>SWAPSHORT</name><argument_list>(<argument><expr><name><name>uhdr</name><operator>-&gt;</operator><name>bus_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>-&gt;</operator><name>caplen</name></name> <operator>&lt;</operator> <name>offset</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>uhdr</name><operator>-&gt;</operator><name>ts_sec</name></name> <operator>=</operator> <call><name>SWAPLL</name><argument_list>(<argument><expr><name><name>uhdr</name><operator>-&gt;</operator><name>ts_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>-&gt;</operator><name>caplen</name></name> <operator>&lt;</operator> <name>offset</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>uhdr</name><operator>-&gt;</operator><name>ts_usec</name></name> <operator>=</operator> <call><name>SWAPLONG</name><argument_list>(<argument><expr><name><name>uhdr</name><operator>-&gt;</operator><name>ts_usec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>-&gt;</operator><name>caplen</name></name> <operator>&lt;</operator> <name>offset</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>uhdr</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <call><name>SWAPLONG</name><argument_list>(<argument><expr><name><name>uhdr</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>-&gt;</operator><name>caplen</name></name> <operator>&lt;</operator> <name>offset</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>uhdr</name><operator>-&gt;</operator><name>urb_len</name></name> <operator>=</operator> <call><name>SWAPLONG</name><argument_list>(<argument><expr><name><name>uhdr</name><operator>-&gt;</operator><name>urb_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>-&gt;</operator><name>caplen</name></name> <operator>&lt;</operator> <name>offset</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>uhdr</name><operator>-&gt;</operator><name>data_len</name></name> <operator>=</operator> <call><name>SWAPLONG</name><argument_list>(<argument><expr><name><name>uhdr</name><operator>-&gt;</operator><name>data_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>uhdr</name><operator>-&gt;</operator><name>transfer_type</name></name> <operator>==</operator> <name>URB_ISOCHRONOUS</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>-&gt;</operator><name>caplen</name></name> <operator>&lt;</operator> <name>offset</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>uhdr</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>iso</name><operator>.</operator><name>error_count</name></name> <operator>=</operator> <call><name>SWAPLONG</name><argument_list>(<argument><expr><name><name>uhdr</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>iso</name><operator>.</operator><name>error_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>-&gt;</operator><name>caplen</name></name> <operator>&lt;</operator> <name>offset</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>uhdr</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>iso</name><operator>.</operator><name>numdesc</name></name> <operator>=</operator> <call><name>SWAPLONG</name><argument_list>(<argument><expr><name><name>uhdr</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>iso</name><operator>.</operator><name>numdesc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>












<if_stmt><if>if <condition>(<expr><name>header_len_64_bytes</name></expr>)</condition> <block>{<block_content>








<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>-&gt;</operator><name>caplen</name></name> <operator>&lt;</operator> <name>offset</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>uhdr</name><operator>-&gt;</operator><name>interval</name></name> <operator>=</operator> <call><name>SWAPLONG</name><argument_list>(<argument><expr><name><name>uhdr</name><operator>-&gt;</operator><name>interval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>-&gt;</operator><name>caplen</name></name> <operator>&lt;</operator> <name>offset</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>uhdr</name><operator>-&gt;</operator><name>start_frame</name></name> <operator>=</operator> <call><name>SWAPLONG</name><argument_list>(<argument><expr><name><name>uhdr</name><operator>-&gt;</operator><name>start_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>-&gt;</operator><name>caplen</name></name> <operator>&lt;</operator> <name>offset</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>uhdr</name><operator>-&gt;</operator><name>xfer_flags</name></name> <operator>=</operator> <call><name>SWAPLONG</name><argument_list>(<argument><expr><name><name>uhdr</name><operator>-&gt;</operator><name>xfer_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>-&gt;</operator><name>caplen</name></name> <operator>&lt;</operator> <name>offset</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>uhdr</name><operator>-&gt;</operator><name>ndesc</name></name> <operator>=</operator> <call><name>SWAPLONG</name><argument_list>(<argument><expr><name><name>uhdr</name><operator>-&gt;</operator><name>ndesc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>uhdr</name><operator>-&gt;</operator><name>transfer_type</name></name> <operator>==</operator> <name>URB_ISOCHRONOUS</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>usb_isodesc</name> <modifier>*</modifier></type><name>pisodesc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pisodesc</name> <operator>=</operator> <operator>(</operator><name>usb_isodesc</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>buf</name><operator>+</operator><name>offset</name><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>uhdr</name><operator>-&gt;</operator><name>ndesc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>-&gt;</operator><name>caplen</name></name> <operator>&lt;</operator> <name>offset</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pisodesc</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <call><name>SWAPLONG</name><argument_list>(<argument><expr><name><name>pisodesc</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>-&gt;</operator><name>caplen</name></name> <operator>&lt;</operator> <name>offset</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pisodesc</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <call><name>SWAPLONG</name><argument_list>(<argument><expr><name><name>pisodesc</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>-&gt;</operator><name>caplen</name></name> <operator>&lt;</operator> <name>offset</name></expr>)</condition><block type="pseudo"><block_content>
<return>return;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>pisodesc</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <call><name>SWAPLONG</name><argument_list>(<argument><expr><name><name>pisodesc</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pisodesc</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>












<function><type><specifier>static</specifier> <name>void</name></type>
<name>swap_nflog_header</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>pcap_pkthdr</name></name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>, <parameter><decl><type><name>u_char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u_char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nflog_hdr_t</name> <modifier>*</modifier></type><name>nfhdr</name> <init>= <expr><operator>(</operator><name>nflog_hdr_t</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nflog_tlv_t</name> <modifier>*</modifier></type><name>tlv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>caplen</name> <init>= <expr><name><name>hdr</name><operator>-&gt;</operator><name>caplen</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u_int</name></type> <name>length</name> <init>= <expr><name><name>hdr</name><operator>-&gt;</operator><name>len</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint16_t</name></type> <name>size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>caplen</name> <operator>&lt;</operator> <operator>(</operator><name>u_int</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>nflog_hdr_t</name></expr></argument>)</argument_list></sizeof> <operator>||</operator>
<name>length</name> <operator>&lt;</operator> <operator>(</operator><name>u_int</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>nflog_hdr_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<return>return;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>nfhdr</name><operator>-&gt;</operator><name>nflog_version</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>length</name> <operator>-=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>nflog_hdr_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>caplen</name> <operator>-=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>nflog_hdr_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>nflog_hdr_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<while>while <condition>(<expr><name>caplen</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>nflog_tlv_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>tlv</name> <operator>=</operator> <operator>(</operator><name>nflog_tlv_t</name> <operator>*</operator><operator>)</operator> <name>p</name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>tlv</name><operator>-&gt;</operator><name>tlv_type</name></name> <operator>=</operator> <call><name>SWAPSHORT</name><argument_list>(<argument><expr><name><name>tlv</name><operator>-&gt;</operator><name>tlv_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tlv</name><operator>-&gt;</operator><name>tlv_length</name></name> <operator>=</operator> <call><name>SWAPSHORT</name><argument_list>(<argument><expr><name><name>tlv</name><operator>-&gt;</operator><name>tlv_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>tlv</name><operator>-&gt;</operator><name>tlv_length</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>size</name> <operator>%</operator> <literal type="number">4</literal> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">4</literal> <operator>-</operator> <name>size</name> <operator>%</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>nflog_tlv_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<return>return;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>caplen</name> <operator>&lt;</operator> <name>size</name> <operator>||</operator> <name>length</name> <operator>&lt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>

<return>return;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>length</name> <operator>-=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>caplen</name> <operator>-=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>swap_pseudo_headers</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>linktype</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>pcap_pkthdr</name></name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>, <parameter><decl><type><name>u_char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>





<switch>switch <condition>(<expr><name>linktype</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>DLT_LINUX_SLL</name></expr>:</case>
<expr_stmt><expr><call><name>swap_linux_sll_header</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>DLT_USB_LINUX</name></expr>:</case>
<expr_stmt><expr><call><name>swap_linux_usb_header</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>DLT_USB_LINUX_MMAPPED</name></expr>:</case>
<expr_stmt><expr><call><name>swap_linux_usb_header</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><name>DLT_NFLOG</name></expr>:</case>
<expr_stmt><expr><call><name>swap_nflog_header</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></switch>
</block_content>}</block></function>
</unit>
